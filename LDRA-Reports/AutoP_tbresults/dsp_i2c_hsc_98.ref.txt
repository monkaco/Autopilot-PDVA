     1F/*
     2FC TESTBED VERSION  : 9.4.4                                                                                               
     3FFILE UNDER TEST  : "F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\src\usr\dsp_i2c_hsc.c"        
     4FDATE OF ANALYSIS : Fri Nov 07 10:50:57 2014                          
     5F*/
     6F/******************************************************************************
     7F* FILENAME: dsp_i2c_hsc.c
     8F*
     9F* DESCRIPTION:
    10F* Functions for interacting with HSC differential pressure.
    11F*
    12F* FUNCTIONS:
    13F* void HSC_init (uint8_t*)
    14F* void HSC_get_data (void)
    15F*
    16F* NOTES:
    17F* ITG3200 is a tri-axis digital gyrometer which uses protocol I2C to transmit
    18F* and receive data.
    19F*
    20F* CODE: HSC-D-RR-N-010MD-2A3
    21F* HSC: Serie
    22F* D: DIP (Dual Inline Pin)
    23F* RR: Dual radial barbed ports in the same side
    24F* N: Gases only, no special options
    25F* 010MD: +/- 10 mbar
    26F* 2: I2C, address 0x28
    27F* A: 10% to 90% of 2^14 counts
    28F* 3: 3.3V supply voltage
    29F*
    30F* REFERENCES:
    31F* Adapted from CH Robotics
    32F*
    33F* START DATE: 05 Set 2011
    34F*
    35F* CHANGES :
    36F*
    37F* VERSION DATE WHO DETAIL
    38F* 1.0 05 Set 2011 Rogerio Lima Start-up coding.
    39F* Plínio Pereira
    40F* -----------------------------------------------------------------------------
    41F* 2.0 06 Set 2014 Rogerio Lima Improving code quality rewriting the
    42F* code and correcting errors.
    43F******************************************************************************/
    44F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Device.h */
    45F// TI File $Revision: /main/5 $
    46F// Checkin $Date: January 22, 2008 16:55:35 $
    47F//###########################################################################
    48F//
    49F// FILE: DSP2833x_Device.h
    50F//
    51F// TITLE: DSP2833x Device Definitions.
    52F//
    53F//###########################################################################
    54F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
    55F// $Release Date: August 4, 2009 $
    56F//###########################################################################
    57F#ifndef DSP2833x_DEVICE_H
    58F#define DSP2833x_DEVICE_H
    59F#define TARGET 1
    60F//---------------------------------------------------------------------------
    61F// User To Select Target Device:
    62F#define DSP28_28335 TARGET
    63F#define DSP28_28334 0
    64F#define DSP28_28332 0
    65F//---------------------------------------------------------------------------
    66F// Common CPU Definitions:
    67F//
    68F
    69Fextern cregister volatile unsigned int
    70F  IFR ;
    71F
    72Fextern cregister volatile unsigned int
    73F  IER ;
    74F#define EINT asm (" clrc INTM")
    75F#define DINT asm (" setc INTM")
    76F#define ERTM asm (" clrc DBGM")
    77F#define DRTM asm (" setc DBGM")
    78F#define EALLOW asm (" EALLOW")
    79F#define EDIS asm (" EDIS")
    80F#define ESTOP0 asm (" ESTOP0")
    81F#define M_INT1 0x0001
    82F#define M_INT2 0x0002
    83F#define M_INT3 0x0004
    84F#define M_INT4 0x0008
    85F#define M_INT5 0x0010
    86F#define M_INT6 0x0020
    87F#define M_INT7 0x0040
    88F#define M_INT8 0x0080
    89F#define M_INT9 0x0100
    90F#define M_INT10 0x0200
    91F#define M_INT11 0x0400
    92F#define M_INT12 0x0800
    93F#define M_INT13 0x1000
    94F#define M_INT14 0x2000
    95F#define M_DLOG 0x4000
    96F#define M_RTOS 0x8000
    97F#define BIT0 0x0001
    98F#define BIT1 0x0002
    99F#define BIT2 0x0004
   100F#define BIT3 0x0008
   101F#define BIT4 0x0010
   102F#define BIT5 0x0020
   103F#define BIT6 0x0040
   104F#define BIT7 0x0080
   105F#define BIT8 0x0100
   106F#define BIT9 0x0200
   107F#define BIT10 0x0400
   108F#define BIT11 0x0800
   109F#define BIT12 0x1000
   110F#define BIT13 0x2000
   111F#define BIT14 0x4000
   112F#define BIT15 0x8000
   113F//---------------------------------------------------------------------------
   114F// For Portability, User Is Recommended To Use Following Data Type Size
   115F// Definitions For 16-bit and 32-Bit Signed/Unsigned Integers:
   116F//
   117F#define DSP28_DATA_TYPES
   118F
   119Ftypedef
   120Fchar
   121F  int8 ;
   122F
   123Ftypedef
   124Fint
   125F  int16 ;
   126F
   127Ftypedef
   128Flong
   129F  int32 ;
   130F
   131Ftypedef
   132Flong long
   133F  int64 ;
   134F
   135Ftypedef
   136Funsigned char
   137F  Uint8 ;
   138F
   139Ftypedef
   140Funsigned int
   141F  Uint16 ;
   142F
   143Ftypedef
   144Funsigned long
   145F  Uint32 ;
   146F
   147Ftypedef
   148Funsigned long long
   149F  Uint64 ;
   150F
   151Ftypedef
   152Ffloat
   153F  float32 ;
   154F
   155Ftypedef
   156Flong double
   157F  float64 ;
   158F//---------------------------------------------------------------------------
   159F// Include All Peripheral Header Files:
   160F//
   161F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Adc.h */
   162F// TI File $Revision: /main/1 $
   163F// Checkin $Date: August 18, 2006 13:51:50 $
   164F//###########################################################################
   165F//
   166F// FILE: DSP2833x_Adc.h
   167F//
   168F// TITLE: DSP2833x Device ADC Register Definitions.
   169F//
   170F//###########################################################################
   171F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   172F// $Release Date: August 4, 2009 $
   173F//###########################################################################
   174F#ifndef DSP2833x_ADC_H
   175F#define DSP2833x_ADC_H
   176F//---------------------------------------------------------------------------
   177F// ADC Individual Register Bit Definitions:
   178F
   179Fstruct ADCTRL1_BITS
   180F{                     // bits description
   181F  Uint16 rsvd1 : 4 ;// 3:0 reserved
   182F  Uint16 SEQ_CASC : 1 ;// 4 Cascaded sequencer mode
   183F  Uint16 SEQ_OVRD : 1 ;// 5 Sequencer override
   184F  Uint16 CONT_RUN : 1 ;// 6 Continuous run
   185F  Uint16 CPS : 1 ;// 7 ADC core clock pre-scalar
   186F  Uint16 ACQ_PS : 4 ;// 11:8 Acquisition window size
   187F  Uint16 SUSMOD : 2 ;// 13:12 Emulation suspend mode
   188F  Uint16 RESET : 1 ;// 14 ADC reset
   189F  Uint16 rsvd2 : 1 ;// 15 reserved
   190F} ;
   191F
   192Funion ADCTRL1_REG
   193F{
   194F  Uint16 all ;
   195F  struct ADCTRL1_BITS bit ;
   196F} ;
   197F
   198Fstruct ADCTRL2_BITS
   199F{                     // bits description
   200F  Uint16 EPWM_SOCB_SEQ2 : 1 ;// 0 EPWM compare B SOC mask for SEQ2
   201F  Uint16 rsvd1 : 1 ;// 1 reserved
   202F  Uint16 INT_MOD_SEQ2 : 1 ;// 2 SEQ2 Interrupt mode
   203F  Uint16 INT_ENA_SEQ2 : 1 ;// 3 SEQ2 Interrupt enable
   204F  Uint16 rsvd2 : 1 ;// 4 reserved
   205F  Uint16 SOC_SEQ2 : 1 ;// 5 Start of conversion for SEQ2
   206F  Uint16 RST_SEQ2 : 1 ;// 6 Reset SEQ2
   207F  Uint16 EXT_SOC_SEQ1 : 1 ;// 7 External start of conversion for SEQ1
   208F  Uint16 EPWM_SOCA_SEQ1 : 1 ;// 8 EPWM compare B SOC mask for SEQ1
   209F  Uint16 rsvd3 : 1 ;// 9 reserved
   210F  Uint16 INT_MOD_SEQ1 : 1 ;// 10 SEQ1 Interrupt mode
   211F  Uint16 INT_ENA_SEQ1 : 1 ;// 11 SEQ1 Interrupt enable
   212F  Uint16 rsvd4 : 1 ;// 12 reserved
   213F  Uint16 SOC_SEQ1 : 1 ;// 13 Start of conversion trigger for SEQ1
   214F  Uint16 RST_SEQ1 : 1 ;// 14 Restart sequencer 1
   215F  Uint16 EPWM_SOCB_SEQ : 1 ;// 15 EPWM compare B SOC enable
   216F} ;
   217F
   218Funion ADCTRL2_REG
   219F{
   220F  Uint16 all ;
   221F  struct ADCTRL2_BITS bit ;
   222F} ;
   223F
   224Fstruct ADCASEQSR_BITS
   225F{                       // bits description
   226F  Uint16 SEQ1_STATE : 4 ;// 3:0 SEQ1 state
   227F  Uint16 SEQ2_STATE : 3 ;// 6:4 SEQ2 state
   228F  Uint16 rsvd1 : 1 ;// 7 reserved
   229F  Uint16 SEQ_CNTR : 4 ;// 11:8 Sequencing counter status
   230F  Uint16 rsvd2 : 4 ;// 15:12 reserved
   231F} ;
   232F
   233Funion ADCASEQSR_REG
   234F{
   235F  Uint16 all ;
   236F  struct ADCASEQSR_BITS bit ;
   237F} ;
   238F
   239Fstruct ADCMAXCONV_BITS
   240F{                        // bits description
   241F  Uint16 MAX_CONV1 : 4 ;// 3:0 Max number of conversions
   242F  Uint16 MAX_CONV2 : 3 ;// 6:4 Max number of conversions
   243F  Uint16 rsvd1 : 9 ;// 15:7 reserved
   244F} ;
   245F
   246Funion ADCMAXCONV_REG
   247F{
   248F  Uint16 all ;
   249F  struct ADCMAXCONV_BITS bit ;
   250F} ;
   251F
   252Fstruct ADCCHSELSEQ1_BITS
   253F{                          // bits description
   254F  Uint16 CONV00 : 4 ;// 3:0 Conversion selection 00
   255F  Uint16 CONV01 : 4 ;// 7:4 Conversion selection 01
   256F  Uint16 CONV02 : 4 ;// 11:8 Conversion selection 02
   257F  Uint16 CONV03 : 4 ;// 15:12 Conversion selection 03
   258F} ;
   259F
   260Funion ADCCHSELSEQ1_REG
   261F{
   262F  Uint16 all ;
   263F  struct ADCCHSELSEQ1_BITS bit ;
   264F} ;
   265F
   266Fstruct ADCCHSELSEQ2_BITS
   267F{                          // bits description
   268F  Uint16 CONV04 : 4 ;// 3:0 Conversion selection 04
   269F  Uint16 CONV05 : 4 ;// 7:4 Conversion selection 05
   270F  Uint16 CONV06 : 4 ;// 11:8 Conversion selection 06
   271F  Uint16 CONV07 : 4 ;// 15:12 Conversion selection 07
   272F} ;
   273F
   274Funion ADCCHSELSEQ2_REG
   275F{
   276F  Uint16 all ;
   277F  struct ADCCHSELSEQ2_BITS bit ;
   278F} ;
   279F
   280Fstruct ADCCHSELSEQ3_BITS
   281F{                          // bits description
   282F  Uint16 CONV08 : 4 ;// 3:0 Conversion selection 08
   283F  Uint16 CONV09 : 4 ;// 7:4 Conversion selection 09
   284F  Uint16 CONV10 : 4 ;// 11:8 Conversion selection 10
   285F  Uint16 CONV11 : 4 ;// 15:12 Conversion selection 11
   286F} ;
   287F
   288Funion ADCCHSELSEQ3_REG
   289F{
   290F  Uint16 all ;
   291F  struct ADCCHSELSEQ3_BITS bit ;
   292F} ;
   293F
   294Fstruct ADCCHSELSEQ4_BITS
   295F{                          // bits description
   296F  Uint16 CONV12 : 4 ;// 3:0 Conversion selection 12
   297F  Uint16 CONV13 : 4 ;// 7:4 Conversion selection 13
   298F  Uint16 CONV14 : 4 ;// 11:8 Conversion selection 14
   299F  Uint16 CONV15 : 4 ;// 15:12 Conversion selection 15
   300F} ;
   301F
   302Funion ADCCHSELSEQ4_REG
   303F{
   304F  Uint16 all ;
   305F  struct ADCCHSELSEQ4_BITS bit ;
   306F} ;
   307F
   308Fstruct ADCTRL3_BITS
   309F{                     // bits description
   310F  Uint16 SMODE_SEL : 1 ;// 0 Sampling mode select
   311F  Uint16 ADCCLKPS : 4 ;// 4:1 ADC core clock divider
   312F  Uint16 ADCPWDN : 1 ;// 5 ADC powerdown
   313F  Uint16 ADCBGRFDN : 2 ;// 7:6 ADC bandgap/ref power down
   314F  Uint16 rsvd1 : 8 ;// 15:8 reserved
   315F} ;
   316F
   317Funion ADCTRL3_REG
   318F{
   319F  Uint16 all ;
   320F  struct ADCTRL3_BITS bit ;
   321F} ;
   322F
   323Fstruct ADCST_BITS
   324F{                   // bits description
   325F  Uint16 INT_SEQ1 : 1 ;// 0 SEQ1 Interrupt flag
   326F  Uint16 INT_SEQ2 : 1 ;// 1 SEQ2 Interrupt flag
   327F  Uint16 SEQ1_BSY : 1 ;// 2 SEQ1 busy status
   328F  Uint16 SEQ2_BSY : 1 ;// 3 SEQ2 busy status
   329F  Uint16 INT_SEQ1_CLR : 1 ;// 4 SEQ1 Interrupt clear
   330F  Uint16 INT_SEQ2_CLR : 1 ;// 5 SEQ2 Interrupt clear
   331F  Uint16 EOS_BUF1 : 1 ;// 6 End of sequence buffer1
   332F  Uint16 EOS_BUF2 : 1 ;// 7 End of sequence buffer2
   333F  Uint16 rsvd1 : 8 ;// 15:8 reserved
   334F} ;
   335F
   336Funion ADCST_REG
   337F{
   338F  Uint16 all ;
   339F  struct ADCST_BITS bit ;
   340F} ;
   341F
   342Fstruct ADCREFSEL_BITS
   343F{                       // bits description
   344F  Uint16 rsvd1 : 14 ;    // 13:0 reserved
   345F  Uint16 REF_SEL : 2 ;    // 15:14 Reference select
   346F} ;
   347F
   348Funion ADCREFSEL_REG
   349F{
   350F  Uint16 all ;
   351F  struct ADCREFSEL_BITS bit ;
   352F} ;
   353F
   354Fstruct ADCOFFTRIM_BITS
   355F{                       // bits description
   356F  int16 OFFSET_TRIM : 9 ;    // 8:0 Offset Trim
   357F  Uint16 rsvd1 : 7 ;    // 15:9 reserved
   358F} ;
   359F
   360Funion ADCOFFTRIM_REG
   361F{
   362F  Uint16 all ;
   363F  struct ADCOFFTRIM_BITS bit ;
   364F} ;
   365F
   366Fstruct ADC_REGS
   367F{
   368F  union ADCTRL1_REG ADCTRL1 ;  // ADC Control 1
   369F  union ADCTRL2_REG ADCTRL2 ;  // ADC Control 2
   370F  union ADCMAXCONV_REG ADCMAXCONV ;  // Max conversions
   371F  union ADCCHSELSEQ1_REG ADCCHSELSEQ1 ;  // Channel select sequencing control 1
   372F  union ADCCHSELSEQ2_REG ADCCHSELSEQ2 ;  // Channel select sequencing control 2
   373F  union ADCCHSELSEQ3_REG ADCCHSELSEQ3 ;  // Channel select sequencing control 3
   374F  union ADCCHSELSEQ4_REG ADCCHSELSEQ4 ;  // Channel select sequencing control 4
   375F  union ADCASEQSR_REG ADCASEQSR ;  // Autosequence status register
   376F  Uint16 ADCRESULT0 ;  // Conversion Result Buffer 0
   377F  Uint16 ADCRESULT1 ;  // Conversion Result Buffer 1
   378F  Uint16 ADCRESULT2 ;  // Conversion Result Buffer 2
   379F  Uint16 ADCRESULT3 ;  // Conversion Result Buffer 3
   380F  Uint16 ADCRESULT4 ;  // Conversion Result Buffer 4
   381F  Uint16 ADCRESULT5 ;  // Conversion Result Buffer 5
   382F  Uint16 ADCRESULT6 ;  // Conversion Result Buffer 6
   383F  Uint16 ADCRESULT7 ;  // Conversion Result Buffer 7
   384F  Uint16 ADCRESULT8 ;  // Conversion Result Buffer 8
   385F  Uint16 ADCRESULT9 ;  // Conversion Result Buffer 9
   386F  Uint16 ADCRESULT10 ;  // Conversion Result Buffer 10
   387F  Uint16 ADCRESULT11 ;  // Conversion Result Buffer 11
   388F  Uint16 ADCRESULT12 ;  // Conversion Result Buffer 12
   389F  Uint16 ADCRESULT13 ;  // Conversion Result Buffer 13
   390F  Uint16 ADCRESULT14 ;  // Conversion Result Buffer 14
   391F  Uint16 ADCRESULT15 ;  // Conversion Result Buffer 15
   392F  union ADCTRL3_REG ADCTRL3 ;  // ADC Control 3
   393F  union ADCST_REG ADCST ;  // ADC Status Register
   394F  Uint16 rsvd1 ;
   395F  Uint16 rsvd2 ;
   396F  union ADCREFSEL_REG ADCREFSEL ;  // Reference Select Register
   397F  union ADCOFFTRIM_REG ADCOFFTRIM ;  // Offset Trim Register
   398F} ;
   399F
   400Fstruct ADC_RESULT_MIRROR_REGS
   401F{
   402F  Uint16 ADCRESULT0 ;  // Conversion Result Buffer 0
   403F  Uint16 ADCRESULT1 ;  // Conversion Result Buffer 1
   404F  Uint16 ADCRESULT2 ;  // Conversion Result Buffer 2
   405F  Uint16 ADCRESULT3 ;  // Conversion Result Buffer 3
   406F  Uint16 ADCRESULT4 ;  // Conversion Result Buffer 4
   407F  Uint16 ADCRESULT5 ;  // Conversion Result Buffer 5
   408F  Uint16 ADCRESULT6 ;  // Conversion Result Buffer 6
   409F  Uint16 ADCRESULT7 ;  // Conversion Result Buffer 7
   410F  Uint16 ADCRESULT8 ;  // Conversion Result Buffer 8
   411F  Uint16 ADCRESULT9 ;  // Conversion Result Buffer 9
   412F  Uint16 ADCRESULT10 ;  // Conversion Result Buffer 10
   413F  Uint16 ADCRESULT11 ;  // Conversion Result Buffer 11
   414F  Uint16 ADCRESULT12 ;  // Conversion Result Buffer 12
   415F  Uint16 ADCRESULT13 ;  // Conversion Result Buffer 13
   416F  Uint16 ADCRESULT14 ;  // Conversion Result Buffer 14
   417F  Uint16 ADCRESULT15 ;  // Conversion Result Buffer 15
   418F} ;
   419F//---------------------------------------------------------------------------
   420F// ADC External References & Function Declarations:
   421F//
   422F
   423Fextern volatile struct ADC_REGS
   424F  AdcRegs ;
   425F
   426Fextern volatile struct ADC_RESULT_MIRROR_REGS
   427F  AdcMirror ;
   428F       /* extern "C" */
   429F       // end of DSP2833x_ADC_H definition
   430F//===========================================================================
   431F// End of file.
   432F//===========================================================================
   433F 
   434F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Adc.h*/
   435F/*   CLOSE_FILE Include File */
   436F 
   437F                // ADC Registers
   438F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DevEmu.h */
   439F// TI File $Revision: /main/4 $
   440F// Checkin $Date: April 15, 2009 10:05:17 $
   441F//###########################################################################
   442F//
   443F// FILE: DSP2833x_DevEmu.h
   444F//
   445F// TITLE: DSP2833x Device Emulation Register Definitions.
   446F//
   447F//###########################################################################
   448F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   449F// $Release Date: August 4, 2009 $
   450F//###########################################################################
   451F#ifndef DSP2833x_DEV_EMU_H
   452F#define DSP2833x_DEV_EMU_H
   453F//---------------------------------------------------------------------------
   454F// Device Emulation Register Bit Definitions:
   455F//
   456F// Device Configuration Register Bit Definitions
   457F
   458Fstruct DEVICECNF_BITS
   459F{                       // bits description
   460F  Uint16 rsvd1 : 3 ;
   461F                   // 2:0 reserved
   462F  Uint16 VMAPS : 1 ;
   463F                   // 3 VMAP Status
   464F  Uint16 rsvd2 : 1 ;
   465F                   // 4 reserved
   466F  Uint16 XRSn : 1 ;
   467F                  // 5 XRSn Signal Status
   468F  Uint16 rsvd3 : 10 ;
   469F                    // 15:6
   470F  Uint16 rsvd4 : 3 ;
   471F                   // 18:16
   472F  Uint16 ENPROT : 1 ;
   473F                    // 19 Enable/Disable pipeline protection
   474F  Uint16 rsvd5 : 7 ;
   475F                   // 26:20 reserved
   476F  Uint16 TRSTN : 1 ;
   477F                   // 27 Status of TRSTn signal
   478F  Uint16 rsvd6 : 4 ;
   479F                   // 31:28 reserved
   480F} ;
   481F
   482Funion DEVICECNF_REG
   483F{
   484F  Uint32 all ;
   485F  struct DEVICECNF_BITS bit ;
   486F} ;
   487F// CLASSID
   488F
   489Fstruct CLASSID_BITS
   490F{                     // bits description
   491F  Uint16 CLASSNO : 8 ;
   492F                     // 7:0 Class Number
   493F  Uint16 PARTTYPE : 8 ;
   494F                      // 15:8 Part Type
   495F} ;
   496F
   497Funion CLASSID_REG
   498F{
   499F  Uint16 all ;
   500F  struct CLASSID_BITS bit ;
   501F} ;
   502F
   503Fstruct DEV_EMU_REGS
   504F{
   505F  union DEVICECNF_REG DEVICECNF ; // device configuration
   506F  union CLASSID_REG CLASSID ; // Class ID
   507F  Uint16 REVID ; // Device ID
   508F  Uint16 PROTSTART ; // Write-Read protection start
   509F  Uint16 PROTRANGE ; // Write-Read protection range
   510F  Uint16 rsvd2 [ 202 ] ;
   511F} ;
   512F// PARTID
   513F
   514Fstruct PARTID_BITS
   515F{                    // bits description
   516F  Uint16 PARTNO : 8 ;
   517F                    // 7:0 Part Number
   518F  Uint16 PARTTYPE : 8 ;
   519F                      // 15:8 Part Type
   520F} ;
   521F
   522Funion PARTID_REG
   523F{
   524F  Uint16 all ;
   525F  struct PARTID_BITS bit ;
   526F} ;
   527F
   528Fstruct PARTID_REGS
   529F{
   530F  union PARTID_REG PARTID ; // Part ID
   531F} ;
   532F//---------------------------------------------------------------------------
   533F// Device Emulation Register References & Function Declarations:
   534F//
   535F
   536Fextern volatile struct DEV_EMU_REGS
   537F  DevEmuRegs ;
   538F
   539Fextern volatile struct PARTID_REGS
   540F  PartIdRegs ;
   541F       /* extern "C" */
   542F       // end of DSP2833x_DEV_EMU_H definition
   543F//===========================================================================
   544F// End of file.
   545F//===========================================================================
   546F 
   547F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DevEmu.h*/
   548F/*   CLOSE_FILE Include File */
   549F 
   550F             // Device Emulation Registers
   551F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_CpuTimers.h */
   552F// TI File $Revision: /main/4 $
   553F// Checkin $Date: March 20, 2007 15:33:42 $
   554F//###########################################################################
   555F//
   556F// FILE: DSP2833x_CpuTimers.h
   557F//
   558F// TITLE: DSP2833x CPU 32-bit Timers Register Definitions.
   559F//
   560F// NOTES: CpuTimer1 and CpuTimer2 are reserved for use with DSP BIOS and
   561F// other realtime operating systems.
   562F//
   563F// Do not use these two timers in your application if you ever plan
   564F// on integrating DSP-BIOS or another realtime OS.
   565F//
   566F// For this reason, comment out the code to manipulate these two timers
   567F// if using DSP-BIOS or another realtime OS.
   568F//
   569F//###########################################################################
   570F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   571F// $Release Date: August 4, 2009 $
   572F//###########################################################################
   573F#ifndef DSP2833x_CPU_TIMERS_H
   574F#define DSP2833x_CPU_TIMERS_H
   575F//---------------------------------------------------------------------------
   576F// CPU Timer Register Bit Definitions:
   577F//
   578F//
   579F// TCR: Control register bit definitions:
   580F
   581Fstruct TCR_BITS
   582F{                 // bits description
   583F  Uint16 rsvd1 : 4 ;
   584F                   // 3:0 reserved
   585F  Uint16 TSS : 1 ;
   586F                 // 4 Timer Start/Stop
   587F  Uint16 TRB : 1 ;
   588F                 // 5 Timer reload
   589F  Uint16 rsvd2 : 4 ;
   590F                   // 9:6 reserved
   591F  Uint16 SOFT : 1 ;
   592F                  // 10 Emulation modes
   593F  Uint16 FREE : 1 ;
   594F                  // 11
   595F  Uint16 rsvd3 : 2 ;
   596F                   // 12:13 reserved
   597F  Uint16 TIE : 1 ;
   598F                 // 14 Output enable
   599F  Uint16 TIF : 1 ;
   600F                 // 15 Interrupt flag
   601F} ;
   602F
   603Funion TCR_REG
   604F{
   605F  Uint16 all ;
   606F  struct TCR_BITS bit ;
   607F} ;
   608F// TPR: Pre-scale low bit definitions:
   609F
   610Fstruct TPR_BITS
   611F{                 // bits description
   612F  Uint16 TDDR : 8 ;
   613F                  // 7:0 Divide-down low
   614F  Uint16 PSC : 8 ;
   615F                 // 15:8 Prescale counter low
   616F} ;
   617F
   618Funion TPR_REG
   619F{
   620F  Uint16 all ;
   621F  struct TPR_BITS bit ;
   622F} ;
   623F// TPRH: Pre-scale high bit definitions:
   624F
   625Fstruct TPRH_BITS
   626F{                  // bits description
   627F  Uint16 TDDRH : 8 ;
   628F                   // 7:0 Divide-down high
   629F  Uint16 PSCH : 8 ;
   630F                  // 15:8 Prescale counter high
   631F} ;
   632F
   633Funion TPRH_REG
   634F{
   635F  Uint16 all ;
   636F  struct TPRH_BITS bit ;
   637F} ;
   638F// TIM, TIMH: Timer register definitions:
   639F
   640Fstruct TIM_REG
   641F{
   642F  Uint16 LSW ;
   643F  Uint16 MSW ;
   644F} ;
   645F
   646Funion TIM_GROUP
   647F{
   648F  Uint32 all ;
   649F  struct TIM_REG half ;
   650F} ;
   651F// PRD, PRDH: Period register definitions:
   652F
   653Fstruct PRD_REG
   654F{
   655F  Uint16 LSW ;
   656F  Uint16 MSW ;
   657F} ;
   658F
   659Funion PRD_GROUP
   660F{
   661F  Uint32 all ;
   662F  struct PRD_REG half ;
   663F} ;
   664F//---------------------------------------------------------------------------
   665F// CPU Timer Register File:
   666F//
   667F
   668Fstruct CPUTIMER_REGS
   669F{
   670F  union TIM_GROUP TIM ; // Timer counter register
   671F  union PRD_GROUP PRD ; // Period register
   672F  union TCR_REG TCR ; // Timer control register
   673F  Uint16 rsvd1 ; // reserved
   674F  union TPR_REG TPR ; // Timer pre-scale low
   675F  union TPRH_REG TPRH ; // Timer pre-scale high
   676F} ;
   677F//---------------------------------------------------------------------------
   678F// CPU Timer Support Variables:
   679F//
   680F
   681Fstruct CPUTIMER_VARS
   682F{
   683F  volatile struct CPUTIMER_REGS * RegsAddr ;
   684F  Uint32 InterruptCount ;
   685F  float CPUFreqInMHz ;
   686F  float PeriodInUSec ;
   687F} ;
   688F//---------------------------------------------------------------------------
   689F// Function prototypes and external definitions:
   690F//
   691F
   692Fvoid
   693F  InitCpuTimers ( void ) ;
   694F
   695Fvoid
   696T  ConfigCpuTimer (
   697F  struct CPUTIMER_VARS * Timer ,
   698F  float Freq ,
   699F  float Period ) ;
   700F
   701Fextern volatile struct CPUTIMER_REGS
   702F  CpuTimer0Regs ;
   703F
   704Fextern struct CPUTIMER_VARS
   705F  CpuTimer0 ;
   706F// CpuTimer 1 and CpuTimer2 are reserved for DSP BIOS & other RTOS. Comment out CpuTimer1 and CpuTimer2 if using DSP BIOS or other RTOS
   707F
   708Fextern volatile struct CPUTIMER_REGS
   709F  CpuTimer1Regs ;
   710F
   711Fextern volatile struct CPUTIMER_REGS
   712F  CpuTimer2Regs ;
   713F
   714Fextern struct CPUTIMER_VARS
   715F  CpuTimer1 ;
   716F
   717Fextern struct CPUTIMER_VARS
   718F  CpuTimer2 ;
   719F//---------------------------------------------------------------------------
   720F// Usefull Timer Operations:
   721F//
   722F// Start Timer:
   723F#define StartCpuTimer0( ) CpuTimer0Regs . TCR . bit . TSS = 0
   724F// Stop Timer:
   725F#define StopCpuTimer0( ) CpuTimer0Regs . TCR . bit . TSS = 1
   726F// Reload Timer With period Value:
   727F#define ReloadCpuTimer0( ) CpuTimer0Regs . TCR . bit . TRB = 1
   728F// Read 32-Bit Timer Value:
   729F#define ReadCpuTimer0Counter( ) CpuTimer0Regs . TIM . all
   730F// Read 32-Bit Period Value:
   731F#define ReadCpuTimer0Period( ) CpuTimer0Regs . PRD . all
   732F// CpuTimer 1 and CpuTimer2 are reserved for DSP BIOS & other RTOS
   733F// Do not use these two timers if you ever plan on integrating
   734F// DSP-BIOS or another realtime OS.
   735F//
   736F// For this reason, comment out the code to manipulate these two timers
   737F// if using DSP-BIOS or another realtime OS.
   738F// Start Timer:
   739F#define StartCpuTimer1( ) CpuTimer1Regs . TCR . bit . TSS = 0
   740F#define StartCpuTimer2( ) CpuTimer2Regs . TCR . bit . TSS = 0
   741F// Stop Timer:
   742F#define StopCpuTimer1( ) CpuTimer1Regs . TCR . bit . TSS = 1
   743F#define StopCpuTimer2( ) CpuTimer2Regs . TCR . bit . TSS = 1
   744F// Reload Timer With period Value:
   745F#define ReloadCpuTimer1( ) CpuTimer1Regs . TCR . bit . TRB = 1
   746F#define ReloadCpuTimer2( ) CpuTimer2Regs . TCR . bit . TRB = 1
   747F// Read 32-Bit Timer Value:
   748F#define ReadCpuTimer1Counter( ) CpuTimer1Regs . TIM . all
   749F#define ReadCpuTimer2Counter( ) CpuTimer2Regs . TIM . all
   750F// Read 32-Bit Period Value:
   751F#define ReadCpuTimer1Period( ) CpuTimer1Regs . PRD . all
   752F#define ReadCpuTimer2Period( ) CpuTimer2Regs . PRD . all
   753F       /* extern "C" */
   754F       // end of DSP2833x_CPU_TIMERS_H definition
   755F//===========================================================================
   756F// End of file.
   757F//===========================================================================
   758F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_CpuTimers.h*/
   759F/*   CLOSE_FILE Include File */
   760F 
   761F          // 32-bit CPU Timers
   762F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECan.h */
   763F// TI File $Revision: /main/2 $
   764F// Checkin $Date: May 7, 2007 16:05:39 $
   765F//###########################################################################
   766F//
   767F// FILE: DSP2833x_ECan.h
   768F//
   769F// TITLE: DSP2833x Device eCAN Register Definitions.
   770F//
   771F//###########################################################################
   772F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   773F// $Release Date: August 4, 2009 $
   774F//###########################################################################
   775F#ifndef DSP2833x_ECAN_H
   776F#define DSP2833x_ECAN_H
   777F/* --------------------------------------------------- */
   778F/* eCAN Control & Status Registers */
   779F/* ----------------------------------------------------*/
   780F/* eCAN Mailbox enable register (CANME) bit definitions */
   781F
   782Fstruct CANME_BITS
   783F{                   // bit description
   784F  Uint16 ME0 : 1 ;
   785F                 // 0 Enable Mailbox 0
   786F  Uint16 ME1 : 1 ;
   787F                 // 1 Enable Mailbox 1
   788F  Uint16 ME2 : 1 ;
   789F                 // 2 Enable Mailbox 2
   790F  Uint16 ME3 : 1 ;
   791F                 // 3 Enable Mailbox 3
   792F  Uint16 ME4 : 1 ;
   793F                 // 4 Enable Mailbox 4
   794F  Uint16 ME5 : 1 ;
   795F                 // 5 Enable Mailbox 5
   796F  Uint16 ME6 : 1 ;
   797F                 // 6 Enable Mailbox 6
   798F  Uint16 ME7 : 1 ;
   799F                 // 7 Enable Mailbox 7
   800F  Uint16 ME8 : 1 ;
   801F                 // 8 Enable Mailbox 8
   802F  Uint16 ME9 : 1 ;
   803F                 // 9 Enable Mailbox 9
   804F  Uint16 ME10 : 1 ;
   805F                  // 10 Enable Mailbox 10
   806F  Uint16 ME11 : 1 ;
   807F                  // 11 Enable Mailbox 11
   808F  Uint16 ME12 : 1 ;
   809F                  // 12 Enable Mailbox 12
   810F  Uint16 ME13 : 1 ;
   811F                  // 13 Enable Mailbox 13
   812F  Uint16 ME14 : 1 ;
   813F                  // 14 Enable Mailbox 14
   814F  Uint16 ME15 : 1 ;
   815F                  // 15 Enable Mailbox 15
   816F  Uint16 ME16 : 1 ;
   817F                  // 16 Enable Mailbox 16
   818F  Uint16 ME17 : 1 ;
   819F                  // 17 Enable Mailbox 17
   820F  Uint16 ME18 : 1 ;
   821F                  // 18 Enable Mailbox 18
   822F  Uint16 ME19 : 1 ;
   823F                  // 19 Enable Mailbox 19
   824F  Uint16 ME20 : 1 ;
   825F                  // 20 Enable Mailbox 20
   826F  Uint16 ME21 : 1 ;
   827F                  // 21 Enable Mailbox 21
   828F  Uint16 ME22 : 1 ;
   829F                  // 22 Enable Mailbox 22
   830F  Uint16 ME23 : 1 ;
   831F                  // 23 Enable Mailbox 23
   832F  Uint16 ME24 : 1 ;
   833F                  // 24 Enable Mailbox 24
   834F  Uint16 ME25 : 1 ;
   835F                  // 25 Enable Mailbox 25
   836F  Uint16 ME26 : 1 ;
   837F                  // 26 Enable Mailbox 26
   838F  Uint16 ME27 : 1 ;
   839F                  // 27 Enable Mailbox 27
   840F  Uint16 ME28 : 1 ;
   841F                  // 28 Enable Mailbox 28
   842F  Uint16 ME29 : 1 ;
   843F                  // 29 Enable Mailbox 29
   844F  Uint16 ME30 : 1 ;
   845F                  // 30 Enable Mailbox 30
   846F  Uint16 ME31 : 1 ;
   847F                  // 31 Enable Mailbox 31
   848F} ;
   849F/* Allow access to the bit fields or entire register */
   850F
   851Funion CANME_REG
   852F{
   853F  Uint32 all ;
   854F  struct CANME_BITS bit ;
   855F} ;
   856F/* eCAN Mailbox direction register (CANMD) bit definitions */
   857F
   858Fstruct CANMD_BITS
   859F{                   // bit description
   860F  Uint16 MD0 : 1 ;
   861F                 // 0 0 -> Tx 1 -> Rx
   862F  Uint16 MD1 : 1 ;
   863F                 // 1 0 -> Tx 1 -> Rx
   864F  Uint16 MD2 : 1 ;
   865F                 // 2 0 -> Tx 1 -> Rx
   866F  Uint16 MD3 : 1 ;
   867F                 // 3 0 -> Tx 1 -> Rx
   868F  Uint16 MD4 : 1 ;
   869F                 // 4 0 -> Tx 1 -> Rx
   870F  Uint16 MD5 : 1 ;
   871F                 // 5 0 -> Tx 1 -> Rx
   872F  Uint16 MD6 : 1 ;
   873F                 // 6 0 -> Tx 1 -> Rx
   874F  Uint16 MD7 : 1 ;
   875F                 // 7 0 -> Tx 1 -> Rx
   876F  Uint16 MD8 : 1 ;
   877F                 // 8 0 -> Tx 1 -> Rx
   878F  Uint16 MD9 : 1 ;
   879F                 // 9 0 -> Tx 1 -> Rx
   880F  Uint16 MD10 : 1 ;
   881F                  // 10 0 -> Tx 1 -> Rx
   882F  Uint16 MD11 : 1 ;
   883F                  // 11 0 -> Tx 1 -> Rx
   884F  Uint16 MD12 : 1 ;
   885F                  // 12 0 -> Tx 1 -> Rx
   886F  Uint16 MD13 : 1 ;
   887F                  // 13 0 -> Tx 1 -> Rx
   888F  Uint16 MD14 : 1 ;
   889F                  // 14 0 -> Tx 1 -> Rx
   890F  Uint16 MD15 : 1 ;
   891F                  // 15 0 -> Tx 1 -> Rx
   892F  Uint16 MD16 : 1 ;
   893F                  // 16 0 -> Tx 1 -> Rx
   894F  Uint16 MD17 : 1 ;
   895F                  // 17 0 -> Tx 1 -> Rx
   896F  Uint16 MD18 : 1 ;
   897F                  // 18 0 -> Tx 1 -> Rx
   898F  Uint16 MD19 : 1 ;
   899F                  // 19 0 -> Tx 1 -> Rx
   900F  Uint16 MD20 : 1 ;
   901F                  // 20 0 -> Tx 1 -> Rx
   902F  Uint16 MD21 : 1 ;
   903F                  // 21 0 -> Tx 1 -> Rx
   904F  Uint16 MD22 : 1 ;
   905F                  // 22 0 -> Tx 1 -> Rx
   906F  Uint16 MD23 : 1 ;
   907F                  // 23 0 -> Tx 1 -> Rx
   908F  Uint16 MD24 : 1 ;
   909F                  // 24 0 -> Tx 1 -> Rx
   910F  Uint16 MD25 : 1 ;
   911F                  // 25 0 -> Tx 1 -> Rx
   912F  Uint16 MD26 : 1 ;
   913F                  // 26 0 -> Tx 1 -> Rx
   914F  Uint16 MD27 : 1 ;
   915F                  // 27 0 -> Tx 1 -> Rx
   916F  Uint16 MD28 : 1 ;
   917F                  // 28 0 -> Tx 1 -> Rx
   918F  Uint16 MD29 : 1 ;
   919F                  // 29 0 -> Tx 1 -> Rx
   920F  Uint16 MD30 : 1 ;
   921F                  // 30 0 -> Tx 1 -> Rx
   922F  Uint16 MD31 : 1 ;
   923F                  // 31 0 -> Tx 1 -> Rx
   924F} ;
   925F/* Allow access to the bit fields or entire register */
   926F
   927Funion CANMD_REG
   928F{
   929F  Uint32 all ;
   930F  struct CANMD_BITS bit ;
   931F} ;
   932F/* eCAN Transmit Request Set register (CANTRS) bit definitions */
   933F
   934Fstruct CANTRS_BITS
   935F{                    // bit description
   936F  Uint16 TRS0 : 1 ;
   937F                  // 0 TRS for Mailbox 0
   938F  Uint16 TRS1 : 1 ;
   939F                  // 1 TRS for Mailbox 1
   940F  Uint16 TRS2 : 1 ;
   941F                  // 2 TRS for Mailbox 2
   942F  Uint16 TRS3 : 1 ;
   943F                  // 3 TRS for Mailbox 3
   944F  Uint16 TRS4 : 1 ;
   945F                  // 4 TRS for Mailbox 4
   946F  Uint16 TRS5 : 1 ;
   947F                  // 5 TRS for Mailbox 5
   948F  Uint16 TRS6 : 1 ;
   949F                  // 6 TRS for Mailbox 6
   950F  Uint16 TRS7 : 1 ;
   951F                  // 7 TRS for Mailbox 7
   952F  Uint16 TRS8 : 1 ;
   953F                  // 8 TRS for Mailbox 8
   954F  Uint16 TRS9 : 1 ;
   955F                  // 9 TRS for Mailbox 9
   956F  Uint16 TRS10 : 1 ;
   957F                   // 10 TRS for Mailbox 10
   958F  Uint16 TRS11 : 1 ;
   959F                   // 11 TRS for Mailbox 11
   960F  Uint16 TRS12 : 1 ;
   961F                   // 12 TRS for Mailbox 12
   962F  Uint16 TRS13 : 1 ;
   963F                   // 13 TRS for Mailbox 13
   964F  Uint16 TRS14 : 1 ;
   965F                   // 14 TRS for Mailbox 14
   966F  Uint16 TRS15 : 1 ;
   967F                   // 15 TRS for Mailbox 15
   968F  Uint16 TRS16 : 1 ;
   969F                   // 16 TRS for Mailbox 16
   970F  Uint16 TRS17 : 1 ;
   971F                   // 17 TRS for Mailbox 17
   972F  Uint16 TRS18 : 1 ;
   973F                   // 18 TRS for Mailbox 18
   974F  Uint16 TRS19 : 1 ;
   975F                   // 19 TRS for Mailbox 19
   976F  Uint16 TRS20 : 1 ;
   977F                   // 20 TRS for Mailbox 20
   978F  Uint16 TRS21 : 1 ;
   979F                   // 21 TRS for Mailbox 21
   980F  Uint16 TRS22 : 1 ;
   981F                   // 22 TRS for Mailbox 22
   982F  Uint16 TRS23 : 1 ;
   983F                   // 23 TRS for Mailbox 23
   984F  Uint16 TRS24 : 1 ;
   985F                   // 24 TRS for Mailbox 24
   986F  Uint16 TRS25 : 1 ;
   987F                   // 25 TRS for Mailbox 25
   988F  Uint16 TRS26 : 1 ;
   989F                   // 26 TRS for Mailbox 26
   990F  Uint16 TRS27 : 1 ;
   991F                   // 27 TRS for Mailbox 27
   992F  Uint16 TRS28 : 1 ;
   993F                   // 28 TRS for Mailbox 28
   994F  Uint16 TRS29 : 1 ;
   995F                   // 29 TRS for Mailbox 29
   996F  Uint16 TRS30 : 1 ;
   997F                   // 30 TRS for Mailbox 30
   998F  Uint16 TRS31 : 1 ;
   999F                   // 31 TRS for Mailbox 31
  1000F} ;
  1001F/* Allow access to the bit fields or entire register */
  1002F
  1003Funion CANTRS_REG
  1004F{
  1005F  Uint32 all ;
  1006F  struct CANTRS_BITS bit ;
  1007F} ;
  1008F/* eCAN Transmit Request Reset register (CANTRR) bit definitions */
  1009F
  1010Fstruct CANTRR_BITS
  1011F{                    // bit description
  1012F  Uint16 TRR0 : 1 ;
  1013F                  // 0 TRR for Mailbox 0
  1014F  Uint16 TRR1 : 1 ;
  1015F                  // 1 TRR for Mailbox 1
  1016F  Uint16 TRR2 : 1 ;
  1017F                  // 2 TRR for Mailbox 2
  1018F  Uint16 TRR3 : 1 ;
  1019F                  // 3 TRR for Mailbox 3
  1020F  Uint16 TRR4 : 1 ;
  1021F                  // 4 TRR for Mailbox 4
  1022F  Uint16 TRR5 : 1 ;
  1023F                  // 5 TRR for Mailbox 5
  1024F  Uint16 TRR6 : 1 ;
  1025F                  // 6 TRR for Mailbox 6
  1026F  Uint16 TRR7 : 1 ;
  1027F                  // 7 TRR for Mailbox 7
  1028F  Uint16 TRR8 : 1 ;
  1029F                  // 8 TRR for Mailbox 8
  1030F  Uint16 TRR9 : 1 ;
  1031F                  // 9 TRR for Mailbox 9
  1032F  Uint16 TRR10 : 1 ;
  1033F                   // 10 TRR for Mailbox 10
  1034F  Uint16 TRR11 : 1 ;
  1035F                   // 11 TRR for Mailbox 11
  1036F  Uint16 TRR12 : 1 ;
  1037F                   // 12 TRR for Mailbox 12
  1038F  Uint16 TRR13 : 1 ;
  1039F                   // 13 TRR for Mailbox 13
  1040F  Uint16 TRR14 : 1 ;
  1041F                   // 14 TRR for Mailbox 14
  1042F  Uint16 TRR15 : 1 ;
  1043F                   // 15 TRR for Mailbox 15
  1044F  Uint16 TRR16 : 1 ;
  1045F                   // 16 TRR for Mailbox 16
  1046F  Uint16 TRR17 : 1 ;
  1047F                   // 17 TRR for Mailbox 17
  1048F  Uint16 TRR18 : 1 ;
  1049F                   // 18 TRR for Mailbox 18
  1050F  Uint16 TRR19 : 1 ;
  1051F                   // 19 TRR for Mailbox 19
  1052F  Uint16 TRR20 : 1 ;
  1053F                   // 20 TRR for Mailbox 20
  1054F  Uint16 TRR21 : 1 ;
  1055F                   // 21 TRR for Mailbox 21
  1056F  Uint16 TRR22 : 1 ;
  1057F                   // 22 TRR for Mailbox 22
  1058F  Uint16 TRR23 : 1 ;
  1059F                   // 23 TRR for Mailbox 23
  1060F  Uint16 TRR24 : 1 ;
  1061F                   // 24 TRR for Mailbox 24
  1062F  Uint16 TRR25 : 1 ;
  1063F                   // 25 TRR for Mailbox 25
  1064F  Uint16 TRR26 : 1 ;
  1065F                   // 26 TRR for Mailbox 26
  1066F  Uint16 TRR27 : 1 ;
  1067F                   // 27 TRR for Mailbox 27
  1068F  Uint16 TRR28 : 1 ;
  1069F                   // 28 TRR for Mailbox 28
  1070F  Uint16 TRR29 : 1 ;
  1071F                   // 29 TRR for Mailbox 29
  1072F  Uint16 TRR30 : 1 ;
  1073F                   // 30 TRR for Mailbox 30
  1074F  Uint16 TRR31 : 1 ;
  1075F                   // 31 TRR for Mailbox 31
  1076F} ;
  1077F/* Allow access to the bit fields or entire register */
  1078F
  1079Funion CANTRR_REG
  1080F{
  1081F  Uint32 all ;
  1082F  struct CANTRR_BITS bit ;
  1083F} ;
  1084F/* eCAN Transmit Acknowledge register (CANTA) bit definitions */
  1085F
  1086Fstruct CANTA_BITS
  1087F{                   // bit description
  1088F  Uint16 TA0 : 1 ;
  1089F                 // 0 TA for Mailbox 0
  1090F  Uint16 TA1 : 1 ;
  1091F                 // 1 TA for Mailbox 1
  1092F  Uint16 TA2 : 1 ;
  1093F                 // 2 TA for Mailbox 2
  1094F  Uint16 TA3 : 1 ;
  1095F                 // 3 TA for Mailbox 3
  1096F  Uint16 TA4 : 1 ;
  1097F                 // 4 TA for Mailbox 4
  1098F  Uint16 TA5 : 1 ;
  1099F                 // 5 TA for Mailbox 5
  1100F  Uint16 TA6 : 1 ;
  1101F                 // 6 TA for Mailbox 6
  1102F  Uint16 TA7 : 1 ;
  1103F                 // 7 TA for Mailbox 7
  1104F  Uint16 TA8 : 1 ;
  1105F                 // 8 TA for Mailbox 8
  1106F  Uint16 TA9 : 1 ;
  1107F                 // 9 TA for Mailbox 9
  1108F  Uint16 TA10 : 1 ;
  1109F                  // 10 TA for Mailbox 10
  1110F  Uint16 TA11 : 1 ;
  1111F                  // 11 TA for Mailbox 11
  1112F  Uint16 TA12 : 1 ;
  1113F                  // 12 TA for Mailbox 12
  1114F  Uint16 TA13 : 1 ;
  1115F                  // 13 TA for Mailbox 13
  1116F  Uint16 TA14 : 1 ;
  1117F                  // 14 TA for Mailbox 14
  1118F  Uint16 TA15 : 1 ;
  1119F                  // 15 TA for Mailbox 15
  1120F  Uint16 TA16 : 1 ;
  1121F                  // 16 TA for Mailbox 16
  1122F  Uint16 TA17 : 1 ;
  1123F                  // 17 TA for Mailbox 17
  1124F  Uint16 TA18 : 1 ;
  1125F                  // 18 TA for Mailbox 18
  1126F  Uint16 TA19 : 1 ;
  1127F                  // 19 TA for Mailbox 19
  1128F  Uint16 TA20 : 1 ;
  1129F                  // 20 TA for Mailbox 20
  1130F  Uint16 TA21 : 1 ;
  1131F                  // 21 TA for Mailbox 21
  1132F  Uint16 TA22 : 1 ;
  1133F                  // 22 TA for Mailbox 22
  1134F  Uint16 TA23 : 1 ;
  1135F                  // 23 TA for Mailbox 23
  1136F  Uint16 TA24 : 1 ;
  1137F                  // 24 TA for Mailbox 24
  1138F  Uint16 TA25 : 1 ;
  1139F                  // 25 TA for Mailbox 25
  1140F  Uint16 TA26 : 1 ;
  1141F                  // 26 TA for Mailbox 26
  1142F  Uint16 TA27 : 1 ;
  1143F                  // 27 TA for Mailbox 27
  1144F  Uint16 TA28 : 1 ;
  1145F                  // 28 TA for Mailbox 28
  1146F  Uint16 TA29 : 1 ;
  1147F                  // 29 TA for Mailbox 29
  1148F  Uint16 TA30 : 1 ;
  1149F                  // 30 TA for Mailbox 30
  1150F  Uint16 TA31 : 1 ;
  1151F                  // 31 TA for Mailbox 31
  1152F} ;
  1153F/* Allow access to the bit fields or entire register */
  1154F
  1155Funion CANTA_REG
  1156F{
  1157F  Uint32 all ;
  1158F  struct CANTA_BITS bit ;
  1159F} ;
  1160F/* eCAN Transmit Abort Acknowledge register (CANAA) bit definitions */
  1161F
  1162Fstruct CANAA_BITS
  1163F{                   // bit description
  1164F  Uint16 AA0 : 1 ;
  1165F                 // 0 AA for Mailbox 0
  1166F  Uint16 AA1 : 1 ;
  1167F                 // 1 AA for Mailbox 1
  1168F  Uint16 AA2 : 1 ;
  1169F                 // 2 AA for Mailbox 2
  1170F  Uint16 AA3 : 1 ;
  1171F                 // 3 AA for Mailbox 3
  1172F  Uint16 AA4 : 1 ;
  1173F                 // 4 AA for Mailbox 4
  1174F  Uint16 AA5 : 1 ;
  1175F                 // 5 AA for Mailbox 5
  1176F  Uint16 AA6 : 1 ;
  1177F                 // 6 AA for Mailbox 6
  1178F  Uint16 AA7 : 1 ;
  1179F                 // 7 AA for Mailbox 7
  1180F  Uint16 AA8 : 1 ;
  1181F                 // 8 AA for Mailbox 8
  1182F  Uint16 AA9 : 1 ;
  1183F                 // 9 AA for Mailbox 9
  1184F  Uint16 AA10 : 1 ;
  1185F                  // 10 AA for Mailbox 10
  1186F  Uint16 AA11 : 1 ;
  1187F                  // 11 AA for Mailbox 11
  1188F  Uint16 AA12 : 1 ;
  1189F                  // 12 AA for Mailbox 12
  1190F  Uint16 AA13 : 1 ;
  1191F                  // 13 AA for Mailbox 13
  1192F  Uint16 AA14 : 1 ;
  1193F                  // 14 AA for Mailbox 14
  1194F  Uint16 AA15 : 1 ;
  1195F                  // 15 AA for Mailbox 15
  1196F  Uint16 AA16 : 1 ;
  1197F                  // 16 AA for Mailbox 16
  1198F  Uint16 AA17 : 1 ;
  1199F                  // 17 AA for Mailbox 17
  1200F  Uint16 AA18 : 1 ;
  1201F                  // 18 AA for Mailbox 18
  1202F  Uint16 AA19 : 1 ;
  1203F                  // 19 AA for Mailbox 19
  1204F  Uint16 AA20 : 1 ;
  1205F                  // 20 AA for Mailbox 20
  1206F  Uint16 AA21 : 1 ;
  1207F                  // 21 AA for Mailbox 21
  1208F  Uint16 AA22 : 1 ;
  1209F                  // 22 AA for Mailbox 22
  1210F  Uint16 AA23 : 1 ;
  1211F                  // 23 AA for Mailbox 23
  1212F  Uint16 AA24 : 1 ;
  1213F                  // 24 AA for Mailbox 24
  1214F  Uint16 AA25 : 1 ;
  1215F                  // 25 AA for Mailbox 25
  1216F  Uint16 AA26 : 1 ;
  1217F                  // 26 AA for Mailbox 26
  1218F  Uint16 AA27 : 1 ;
  1219F                  // 27 AA for Mailbox 27
  1220F  Uint16 AA28 : 1 ;
  1221F                  // 28 AA for Mailbox 28
  1222F  Uint16 AA29 : 1 ;
  1223F                  // 29 AA for Mailbox 29
  1224F  Uint16 AA30 : 1 ;
  1225F                  // 30 AA for Mailbox 30
  1226F  Uint16 AA31 : 1 ;
  1227F                  // 31 AA for Mailbox 31
  1228F} ;
  1229F/* Allow access to the bit fields or entire register */
  1230F
  1231Funion CANAA_REG
  1232F{
  1233F  Uint32 all ;
  1234F  struct CANAA_BITS bit ;
  1235F} ;
  1236F/* eCAN Received Message Pending register (CANRMP) bit definitions */
  1237F
  1238Fstruct CANRMP_BITS
  1239F{                    // bit description
  1240F  Uint16 RMP0 : 1 ;
  1241F                  // 0 RMP for Mailbox 0
  1242F  Uint16 RMP1 : 1 ;
  1243F                  // 1 RMP for Mailbox 1
  1244F  Uint16 RMP2 : 1 ;
  1245F                  // 2 RMP for Mailbox 2
  1246F  Uint16 RMP3 : 1 ;
  1247F                  // 3 RMP for Mailbox 3
  1248F  Uint16 RMP4 : 1 ;
  1249F                  // 4 RMP for Mailbox 4
  1250F  Uint16 RMP5 : 1 ;
  1251F                  // 5 RMP for Mailbox 5
  1252F  Uint16 RMP6 : 1 ;
  1253F                  // 6 RMP for Mailbox 6
  1254F  Uint16 RMP7 : 1 ;
  1255F                  // 7 RMP for Mailbox 7
  1256F  Uint16 RMP8 : 1 ;
  1257F                  // 8 RMP for Mailbox 8
  1258F  Uint16 RMP9 : 1 ;
  1259F                  // 9 RMP for Mailbox 9
  1260F  Uint16 RMP10 : 1 ;
  1261F                   // 10 RMP for Mailbox 10
  1262F  Uint16 RMP11 : 1 ;
  1263F                   // 11 RMP for Mailbox 11
  1264F  Uint16 RMP12 : 1 ;
  1265F                   // 12 RMP for Mailbox 12
  1266F  Uint16 RMP13 : 1 ;
  1267F                   // 13 RMP for Mailbox 13
  1268F  Uint16 RMP14 : 1 ;
  1269F                   // 14 RMP for Mailbox 14
  1270F  Uint16 RMP15 : 1 ;
  1271F                   // 15 RMP for Mailbox 15
  1272F  Uint16 RMP16 : 1 ;
  1273F                   // 16 RMP for Mailbox 16
  1274F  Uint16 RMP17 : 1 ;
  1275F                   // 17 RMP for Mailbox 17
  1276F  Uint16 RMP18 : 1 ;
  1277F                   // 18 RMP for Mailbox 18
  1278F  Uint16 RMP19 : 1 ;
  1279F                   // 19 RMP for Mailbox 19
  1280F  Uint16 RMP20 : 1 ;
  1281F                   // 20 RMP for Mailbox 20
  1282F  Uint16 RMP21 : 1 ;
  1283F                   // 21 RMP for Mailbox 21
  1284F  Uint16 RMP22 : 1 ;
  1285F                   // 22 RMP for Mailbox 22
  1286F  Uint16 RMP23 : 1 ;
  1287F                   // 23 RMP for Mailbox 23
  1288F  Uint16 RMP24 : 1 ;
  1289F                   // 24 RMP for Mailbox 24
  1290F  Uint16 RMP25 : 1 ;
  1291F                   // 25 RMP for Mailbox 25
  1292F  Uint16 RMP26 : 1 ;
  1293F                   // 26 RMP for Mailbox 26
  1294F  Uint16 RMP27 : 1 ;
  1295F                   // 27 RMP for Mailbox 27
  1296F  Uint16 RMP28 : 1 ;
  1297F                   // 28 RMP for Mailbox 28
  1298F  Uint16 RMP29 : 1 ;
  1299F                   // 29 RMP for Mailbox 29
  1300F  Uint16 RMP30 : 1 ;
  1301F                   // 30 RMP for Mailbox 30
  1302F  Uint16 RMP31 : 1 ;
  1303F                   // 31 RMP for Mailbox 31
  1304F} ;
  1305F/* Allow access to the bit fields or entire register */
  1306F
  1307Funion CANRMP_REG
  1308F{
  1309F  Uint32 all ;
  1310F  struct CANRMP_BITS bit ;
  1311F} ;
  1312F/* eCAN Received Message Lost register (CANRML) bit definitions */
  1313F
  1314Fstruct CANRML_BITS
  1315F{                    // bit description
  1316F  Uint16 RML0 : 1 ;
  1317F                  // 0 RML for Mailbox 0
  1318F  Uint16 RML1 : 1 ;
  1319F                  // 1 RML for Mailbox 1
  1320F  Uint16 RML2 : 1 ;
  1321F                  // 2 RML for Mailbox 2
  1322F  Uint16 RML3 : 1 ;
  1323F                  // 3 RML for Mailbox 3
  1324F  Uint16 RML4 : 1 ;
  1325F                  // 4 RML for Mailbox 4
  1326F  Uint16 RML5 : 1 ;
  1327F                  // 5 RML for Mailbox 5
  1328F  Uint16 RML6 : 1 ;
  1329F                  // 6 RML for Mailbox 6
  1330F  Uint16 RML7 : 1 ;
  1331F                  // 7 RML for Mailbox 7
  1332F  Uint16 RML8 : 1 ;
  1333F                  // 8 RML for Mailbox 8
  1334F  Uint16 RML9 : 1 ;
  1335F                  // 9 RML for Mailbox 9
  1336F  Uint16 RML10 : 1 ;
  1337F                   // 10 RML for Mailbox 10
  1338F  Uint16 RML11 : 1 ;
  1339F                   // 11 RML for Mailbox 11
  1340F  Uint16 RML12 : 1 ;
  1341F                   // 12 RML for Mailbox 12
  1342F  Uint16 RML13 : 1 ;
  1343F                   // 13 RML for Mailbox 13
  1344F  Uint16 RML14 : 1 ;
  1345F                   // 14 RML for Mailbox 14
  1346F  Uint16 RML15 : 1 ;
  1347F                   // 15 RML for Mailbox 15
  1348F  Uint16 RML16 : 1 ;
  1349F                   // 16 RML for Mailbox 16
  1350F  Uint16 RML17 : 1 ;
  1351F                   // 17 RML for Mailbox 17
  1352F  Uint16 RML18 : 1 ;
  1353F                   // 18 RML for Mailbox 18
  1354F  Uint16 RML19 : 1 ;
  1355F                   // 19 RML for Mailbox 19
  1356F  Uint16 RML20 : 1 ;
  1357F                   // 20 RML for Mailbox 20
  1358F  Uint16 RML21 : 1 ;
  1359F                   // 21 RML for Mailbox 21
  1360F  Uint16 RML22 : 1 ;
  1361F                   // 22 RML for Mailbox 22
  1362F  Uint16 RML23 : 1 ;
  1363F                   // 23 RML for Mailbox 23
  1364F  Uint16 RML24 : 1 ;
  1365F                   // 24 RML for Mailbox 24
  1366F  Uint16 RML25 : 1 ;
  1367F                   // 25 RML for Mailbox 25
  1368F  Uint16 RML26 : 1 ;
  1369F                   // 26 RML for Mailbox 26
  1370F  Uint16 RML27 : 1 ;
  1371F                   // 27 RML for Mailbox 27
  1372F  Uint16 RML28 : 1 ;
  1373F                   // 28 RML for Mailbox 28
  1374F  Uint16 RML29 : 1 ;
  1375F                   // 29 RML for Mailbox 29
  1376F  Uint16 RML30 : 1 ;
  1377F                   // 30 RML for Mailbox 30
  1378F  Uint16 RML31 : 1 ;
  1379F                   // 31 RML for Mailbox 31
  1380F} ;
  1381F/* Allow access to the bit fields or entire register */
  1382F
  1383Funion CANRML_REG
  1384F{
  1385F  Uint32 all ;
  1386F  struct CANRML_BITS bit ;
  1387F} ;
  1388F/* eCAN Remote Frame Pending register (CANRFP) bit definitions */
  1389F
  1390Fstruct CANRFP_BITS
  1391F{                    // bit description
  1392F  Uint16 RFP0 : 1 ;
  1393F                  // 0 RFP for Mailbox 0
  1394F  Uint16 RFP1 : 1 ;
  1395F                  // 1 RFP for Mailbox 1
  1396F  Uint16 RFP2 : 1 ;
  1397F                  // 2 RFP for Mailbox 2
  1398F  Uint16 RFP3 : 1 ;
  1399F                  // 3 RFP for Mailbox 3
  1400F  Uint16 RFP4 : 1 ;
  1401F                  // 4 RFP for Mailbox 4
  1402F  Uint16 RFP5 : 1 ;
  1403F                  // 5 RFP for Mailbox 5
  1404F  Uint16 RFP6 : 1 ;
  1405F                  // 6 RFP for Mailbox 6
  1406F  Uint16 RFP7 : 1 ;
  1407F                  // 7 RFP for Mailbox 7
  1408F  Uint16 RFP8 : 1 ;
  1409F                  // 8 RFP for Mailbox 8
  1410F  Uint16 RFP9 : 1 ;
  1411F                  // 9 RFP for Mailbox 9
  1412F  Uint16 RFP10 : 1 ;
  1413F                   // 10 RFP for Mailbox 10
  1414F  Uint16 RFP11 : 1 ;
  1415F                   // 11 RFP for Mailbox 11
  1416F  Uint16 RFP12 : 1 ;
  1417F                   // 12 RFP for Mailbox 12
  1418F  Uint16 RFP13 : 1 ;
  1419F                   // 13 RFP for Mailbox 13
  1420F  Uint16 RFP14 : 1 ;
  1421F                   // 14 RFP for Mailbox 14
  1422F  Uint16 RFP15 : 1 ;
  1423F                   // 15 RFP for Mailbox 15
  1424F  Uint16 RFP16 : 1 ;
  1425F                   // 16 RFP for Mailbox 16
  1426F  Uint16 RFP17 : 1 ;
  1427F                   // 17 RFP for Mailbox 17
  1428F  Uint16 RFP18 : 1 ;
  1429F                   // 18 RFP for Mailbox 18
  1430F  Uint16 RFP19 : 1 ;
  1431F                   // 19 RFP for Mailbox 19
  1432F  Uint16 RFP20 : 1 ;
  1433F                   // 20 RFP for Mailbox 20
  1434F  Uint16 RFP21 : 1 ;
  1435F                   // 21 RFP for Mailbox 21
  1436F  Uint16 RFP22 : 1 ;
  1437F                   // 22 RFP for Mailbox 22
  1438F  Uint16 RFP23 : 1 ;
  1439F                   // 23 RFP for Mailbox 23
  1440F  Uint16 RFP24 : 1 ;
  1441F                   // 24 RFP for Mailbox 24
  1442F  Uint16 RFP25 : 1 ;
  1443F                   // 25 RFP for Mailbox 25
  1444F  Uint16 RFP26 : 1 ;
  1445F                   // 26 RFP for Mailbox 26
  1446F  Uint16 RFP27 : 1 ;
  1447F                   // 27 RFP for Mailbox 27
  1448F  Uint16 RFP28 : 1 ;
  1449F                   // 28 RFP for Mailbox 28
  1450F  Uint16 RFP29 : 1 ;
  1451F                   // 29 RFP for Mailbox 29
  1452F  Uint16 RFP30 : 1 ;
  1453F                   // 30 RFP for Mailbox 30
  1454F  Uint16 RFP31 : 1 ;
  1455F                   // 31 RFP for Mailbox 31
  1456F} ;
  1457F/* Allow access to the bit fields or entire register */
  1458F
  1459Funion CANRFP_REG
  1460F{
  1461F  Uint32 all ;
  1462F  struct CANRFP_BITS bit ;
  1463F} ;
  1464F/* eCAN Global Acceptance Mask register (CANGAM) bit definitions */
  1465F
  1466Fstruct CANGAM_BITS
  1467F{                    // bits description
  1468F  Uint16 GAM150 : 16 ;
  1469F                     // 15:0 Global acceptance mask bits 0-15
  1470F  Uint16 GAM2816 : 13 ;
  1471F                      // 28:16 Global acceptance mask bits 16-28
  1472F  Uint16 rsvd : 2 ;
  1473F                  // 30:29 reserved
  1474F  Uint16 AMI : 1 ;
  1475F                 // 31 AMI bit
  1476F} ;
  1477F/* Allow access to the bit fields or entire register */
  1478F
  1479Funion CANGAM_REG
  1480F{
  1481F  Uint32 all ;
  1482F  struct CANGAM_BITS bit ;
  1483F} ;
  1484F/* eCAN Master Control register (CANMC) bit definitions */
  1485F
  1486Fstruct CANMC_BITS
  1487F{                   // bits description
  1488F  Uint16 MBNR : 5 ;
  1489F                  // 4:0 MBX #for CDR bit
  1490F  Uint16 SRES : 1 ;
  1491F                  // 5 Soft reset
  1492F  Uint16 STM : 1 ;
  1493F                 // 6 Self-test mode
  1494F  Uint16 ABO : 1 ;
  1495F                 // 7 Auto bus-on
  1496F  Uint16 CDR : 1 ;
  1497F                 // 8 Change data request
  1498F  Uint16 WUBA : 1 ;
  1499F                  // 9 Wake-up on bus activity
  1500F  Uint16 DBO : 1 ;
  1501F                 // 10 Data-byte order
  1502F  Uint16 PDR : 1 ;
  1503F                 // 11 Power-down mode request
  1504F  Uint16 CCR : 1 ;
  1505F                 // 12 Change configuration request
  1506F  Uint16 SCB : 1 ;
  1507F                 // 13 SCC compatibility bit
  1508F  Uint16 TCC : 1 ;
  1509F                 // 14 TSC MSB clear bit
  1510F  Uint16 MBCC : 1 ;
  1511F                  // 15 TSC clear bit thru mailbox 16
  1512F  Uint16 SUSP : 1 ;
  1513F                  // 16 SUSPEND free/soft bit
  1514F  Uint16 rsvd : 15 ;
  1515F                   // 31:17 reserved
  1516F} ;
  1517F/* Allow access to the bit fields or entire register */
  1518F
  1519Funion CANMC_REG
  1520F{
  1521F  Uint32 all ;
  1522F  struct CANMC_BITS bit ;
  1523F} ;
  1524F/* eCAN Bit -timing configuration register (CANBTC) bit definitions */
  1525F
  1526Fstruct CANBTC_BITS
  1527F{                    // bits description
  1528F  Uint16 TSEG2REG : 3 ;
  1529F                      // 2:0 TSEG2 register value
  1530F  Uint16 TSEG1REG : 4 ;
  1531F                      // 6:3 TSEG1 register value
  1532F  Uint16 SAM : 1 ;
  1533F                 // 7 Sample-point setting
  1534F  Uint16 SJWREG : 2 ;
  1535F                    // 9:8 Synchroniztion Jump Width register value
  1536F  Uint16 rsvd1 : 6 ;
  1537F                   // 15:10 reserved
  1538F  Uint16 BRPREG : 8 ;
  1539F                    // 23:16 Baudrate prescaler register value
  1540F  Uint16 rsvd2 : 8 ;
  1541F                   // 31:24 reserved
  1542F} ;
  1543F/* Allow access to the bit fields or entire register */
  1544F
  1545Funion CANBTC_REG
  1546F{
  1547F  Uint32 all ;
  1548F  struct CANBTC_BITS bit ;
  1549F} ;
  1550F/* eCAN Error & Status register (CANES) bit definitions */
  1551F
  1552Fstruct CANES_BITS
  1553F{                   // bits description
  1554F  Uint16 TM : 1 ;
  1555F                // 0 Transmit Mode
  1556F  Uint16 RM : 1 ;
  1557F                // 1 Receive Mode
  1558F  Uint16 rsvd1 : 1 ;
  1559F                   // 2 reserved
  1560F  Uint16 PDA : 1 ;
  1561F                 // 3 Power-down acknowledge
  1562F  Uint16 CCE : 1 ;
  1563F                 // 4 Change Configuration Enable
  1564F  Uint16 SMA : 1 ;
  1565F                 // 5 Suspend Mode Acknowledge
  1566F  Uint16 rsvd2 : 10 ;
  1567F                    // 15:6 reserved
  1568F  Uint16 EW : 1 ;
  1569F                // 16 Warning status
  1570F  Uint16 EP : 1 ;
  1571F                // 17 Error Passive status
  1572F  Uint16 BO : 1 ;
  1573F                // 18 Bus-off status
  1574F  Uint16 ACKE : 1 ;
  1575F                  // 19 Acknowledge error
  1576F  Uint16 SE : 1 ;
  1577F                // 20 Stuff error
  1578F  Uint16 CRCE : 1 ;
  1579F                  // 21 CRC error
  1580F  Uint16 SA1 : 1 ;
  1581F                 // 22 Stuck at Dominant error
  1582F  Uint16 BE : 1 ;
  1583F                // 23 Bit error
  1584F  Uint16 FE : 1 ;
  1585F                // 24 Framing error
  1586F  Uint16 rsvd3 : 7 ;
  1587F                   // 31:25 reserved
  1588F} ;
  1589F/* Allow access to the bit fields or entire register */
  1590F
  1591Funion CANES_REG
  1592F{
  1593F  Uint32 all ;
  1594F  struct CANES_BITS bit ;
  1595F} ;
  1596F/* eCAN Transmit Error Counter register (CANTEC) bit definitions */
  1597F
  1598Fstruct CANTEC_BITS
  1599F{                    // bits description
  1600F  Uint16 TEC : 8 ;
  1601F                 // 7:0 TEC
  1602F  Uint16 rsvd1 : 8 ;
  1603F                   // 15:8 reserved
  1604F  Uint16 rsvd2 : 16 ;
  1605F                    // 31:16 reserved
  1606F} ;
  1607F/* Allow access to the bit fields or entire register */
  1608F
  1609Funion CANTEC_REG
  1610F{
  1611F  Uint32 all ;
  1612F  struct CANTEC_BITS bit ;
  1613F} ;
  1614F/* eCAN Receive Error Counter register (CANREC) bit definitions */
  1615F
  1616Fstruct CANREC_BITS
  1617F{                    // bits description
  1618F  Uint16 REC : 8 ;
  1619F                 // 7:0 REC
  1620F  Uint16 rsvd1 : 8 ;
  1621F                   // 15:8 reserved
  1622F  Uint16 rsvd2 : 16 ;
  1623F                    // 31:16 reserved
  1624F} ;
  1625F/* Allow access to the bit fields or entire register */
  1626F
  1627Funion CANREC_REG
  1628F{
  1629F  Uint32 all ;
  1630F  struct CANREC_BITS bit ;
  1631F} ;
  1632F/* eCAN Global Interrupt Flag 0 (CANGIF0) bit definitions */
  1633F
  1634Fstruct CANGIF0_BITS
  1635F{                     // bits description
  1636F  Uint16 MIV0 : 5 ;
  1637F                  // 4:0 Mailbox Interrupt Vector
  1638F  Uint16 rsvd1 : 3 ;
  1639F                   // 7:5 reserved
  1640F  Uint16 WLIF0 : 1 ;
  1641F                   // 8 Warning level interrupt flag
  1642F  Uint16 EPIF0 : 1 ;
  1643F                   // 9 Error-passive interrupt flag
  1644F  Uint16 BOIF0 : 1 ;
  1645F                   // 10 Bus-off interrupt flag
  1646F  Uint16 RMLIF0 : 1 ;
  1647F                    // 11 Received message lost interrupt flag
  1648F  Uint16 WUIF0 : 1 ;
  1649F                   // 12 Wakeup interrupt flag
  1650F  Uint16 WDIF0 : 1 ;
  1651F                   // 13 Write denied interrupt flag
  1652F  Uint16 AAIF0 : 1 ;
  1653F                   // 14 Abort Ack interrupt flag
  1654F  Uint16 GMIF0 : 1 ;
  1655F                   // 15 Global MBX interrupt flag
  1656F  Uint16 TCOF0 : 1 ;
  1657F                   // 16 TSC Overflow flag
  1658F  Uint16 MTOF0 : 1 ;
  1659F                   // 17 Mailbox Timeout flag
  1660F  Uint16 rsvd2 : 14 ;
  1661F                    // 31:18 reserved
  1662F} ;
  1663F/* Allow access to the bit fields or entire register */
  1664F
  1665Funion CANGIF0_REG
  1666F{
  1667F  Uint32 all ;
  1668F  struct CANGIF0_BITS bit ;
  1669F} ;
  1670F/* eCAN Global Interrupt Mask register (CANGIM) bit definitions */
  1671F
  1672Fstruct CANGIM_BITS
  1673F{                    // bits description
  1674F  Uint16 I0EN : 1 ;
  1675F                  // 0 Interrupt 0 enable
  1676F  Uint16 I1EN : 1 ;
  1677F                  // 1 Interrupt 1 enable
  1678F  Uint16 GIL : 1 ;
  1679F                 // 2 Global Interrupt Level
  1680F  Uint16 rsvd1 : 5 ;
  1681F                   // 7:3 reserved
  1682F  Uint16 WLIM : 1 ;
  1683F                  // 8 Warning level interrupt mask
  1684F  Uint16 EPIM : 1 ;
  1685F                  // 9 Error-passive interrupt mask
  1686F  Uint16 BOIM : 1 ;
  1687F                  // 10 Bus-off interrupt mask
  1688F  Uint16 RMLIM : 1 ;
  1689F                   // 11 Received message lost interrupt mask
  1690F  Uint16 WUIM : 1 ;
  1691F                  // 12 Wakeup interrupt mask
  1692F  Uint16 WDIM : 1 ;
  1693F                  // 13 Write denied interrupt mask
  1694F  Uint16 AAIM : 1 ;
  1695F                  // 14 Abort Ack interrupt mask
  1696F  Uint16 rsvd2 : 1 ;
  1697F                   // 15 reserved
  1698F  Uint16 TCOM : 1 ;
  1699F                  // 16 TSC overflow interrupt mask
  1700F  Uint16 MTOM : 1 ;
  1701F                  // 17 MBX Timeout interrupt mask
  1702F  Uint16 rsvd3 : 14 ;
  1703F                    // 31:18 reserved
  1704F} ;
  1705F/* Allow access to the bit fields or entire register */
  1706F
  1707Funion CANGIM_REG
  1708F{
  1709F  Uint32 all ;
  1710F  struct CANGIM_BITS bit ;
  1711F} ;
  1712F/* eCAN Global Interrupt Flag 1 (eCANGIF1) bit definitions */
  1713F
  1714Fstruct CANGIF1_BITS
  1715F{                     // bits description
  1716F  Uint16 MIV1 : 5 ;
  1717F                  // 4:0 Mailbox Interrupt Vector
  1718F  Uint16 rsvd1 : 3 ;
  1719F                   // 7:5 reserved
  1720F  Uint16 WLIF1 : 1 ;
  1721F                   // 8 Warning level interrupt flag
  1722F  Uint16 EPIF1 : 1 ;
  1723F                   // 9 Error-passive interrupt flag
  1724F  Uint16 BOIF1 : 1 ;
  1725F                   // 10 Bus-off interrupt flag
  1726F  Uint16 RMLIF1 : 1 ;
  1727F                    // 11 Received message lost interrupt flag
  1728F  Uint16 WUIF1 : 1 ;
  1729F                   // 12 Wakeup interrupt flag
  1730F  Uint16 WDIF1 : 1 ;
  1731F                   // 13 Write denied interrupt flag
  1732F  Uint16 AAIF1 : 1 ;
  1733F                   // 14 Abort Ack interrupt flag
  1734F  Uint16 GMIF1 : 1 ;
  1735F                   // 15 Global MBX interrupt flag
  1736F  Uint16 TCOF1 : 1 ;
  1737F                   // 16 TSC Overflow flag
  1738F  Uint16 MTOF1 : 1 ;
  1739F                   // 17 Mailbox Timeout flag
  1740F  Uint16 rsvd2 : 14 ;
  1741F                    // 31:18 reserved
  1742F} ;
  1743F/* Allow access to the bit fields or entire register */
  1744F
  1745Funion CANGIF1_REG
  1746F{
  1747F  Uint32 all ;
  1748F  struct CANGIF1_BITS bit ;
  1749F} ;
  1750F/* eCAN Mailbox Interrupt Mask register (CANMIM) bit definitions */
  1751F
  1752Fstruct CANMIM_BITS
  1753F{                    // bit description
  1754F  Uint16 MIM0 : 1 ;
  1755F                  // 0 MIM for Mailbox 0
  1756F  Uint16 MIM1 : 1 ;
  1757F                  // 1 MIM for Mailbox 1
  1758F  Uint16 MIM2 : 1 ;
  1759F                  // 2 MIM for Mailbox 2
  1760F  Uint16 MIM3 : 1 ;
  1761F                  // 3 MIM for Mailbox 3
  1762F  Uint16 MIM4 : 1 ;
  1763F                  // 4 MIM for Mailbox 4
  1764F  Uint16 MIM5 : 1 ;
  1765F                  // 5 MIM for Mailbox 5
  1766F  Uint16 MIM6 : 1 ;
  1767F                  // 6 MIM for Mailbox 6
  1768F  Uint16 MIM7 : 1 ;
  1769F                  // 7 MIM for Mailbox 7
  1770F  Uint16 MIM8 : 1 ;
  1771F                  // 8 MIM for Mailbox 8
  1772F  Uint16 MIM9 : 1 ;
  1773F                  // 9 MIM for Mailbox 9
  1774F  Uint16 MIM10 : 1 ;
  1775F                   // 10 MIM for Mailbox 10
  1776F  Uint16 MIM11 : 1 ;
  1777F                   // 11 MIM for Mailbox 11
  1778F  Uint16 MIM12 : 1 ;
  1779F                   // 12 MIM for Mailbox 12
  1780F  Uint16 MIM13 : 1 ;
  1781F                   // 13 MIM for Mailbox 13
  1782F  Uint16 MIM14 : 1 ;
  1783F                   // 14 MIM for Mailbox 14
  1784F  Uint16 MIM15 : 1 ;
  1785F                   // 15 MIM for Mailbox 15
  1786F  Uint16 MIM16 : 1 ;
  1787F                   // 16 MIM for Mailbox 16
  1788F  Uint16 MIM17 : 1 ;
  1789F                   // 17 MIM for Mailbox 17
  1790F  Uint16 MIM18 : 1 ;
  1791F                   // 18 MIM for Mailbox 18
  1792F  Uint16 MIM19 : 1 ;
  1793F                   // 19 MIM for Mailbox 19
  1794F  Uint16 MIM20 : 1 ;
  1795F                   // 20 MIM for Mailbox 20
  1796F  Uint16 MIM21 : 1 ;
  1797F                   // 21 MIM for Mailbox 21
  1798F  Uint16 MIM22 : 1 ;
  1799F                   // 22 MIM for Mailbox 22
  1800F  Uint16 MIM23 : 1 ;
  1801F                   // 23 MIM for Mailbox 23
  1802F  Uint16 MIM24 : 1 ;
  1803F                   // 24 MIM for Mailbox 24
  1804F  Uint16 MIM25 : 1 ;
  1805F                   // 25 MIM for Mailbox 25
  1806F  Uint16 MIM26 : 1 ;
  1807F                   // 26 MIM for Mailbox 26
  1808F  Uint16 MIM27 : 1 ;
  1809F                   // 27 MIM for Mailbox 27
  1810F  Uint16 MIM28 : 1 ;
  1811F                   // 28 MIM for Mailbox 28
  1812F  Uint16 MIM29 : 1 ;
  1813F                   // 29 MIM for Mailbox 29
  1814F  Uint16 MIM30 : 1 ;
  1815F                   // 30 MIM for Mailbox 30
  1816F  Uint16 MIM31 : 1 ;
  1817F                   // 31 MIM for Mailbox 31
  1818F} ;
  1819F/* Allow access to the bit fields or entire register */
  1820F
  1821Funion CANMIM_REG
  1822F{
  1823F  Uint32 all ;
  1824F  struct CANMIM_BITS bit ;
  1825F} ;
  1826F/* eCAN Mailbox Interrupt Level register (CANMIL) bit definitions */
  1827F
  1828Fstruct CANMIL_BITS
  1829F{                    // bit description
  1830F  Uint16 MIL0 : 1 ;
  1831F                  // 0 0 -> Int 9.5 1 -> Int 9.6
  1832F  Uint16 MIL1 : 1 ;
  1833F                  // 1 0 -> Int 9.5 1 -> Int 9.6
  1834F  Uint16 MIL2 : 1 ;
  1835F                  // 2 0 -> Int 9.5 1 -> Int 9.6
  1836F  Uint16 MIL3 : 1 ;
  1837F                  // 3 0 -> Int 9.5 1 -> Int 9.6
  1838F  Uint16 MIL4 : 1 ;
  1839F                  // 4 0 -> Int 9.5 1 -> Int 9.6
  1840F  Uint16 MIL5 : 1 ;
  1841F                  // 5 0 -> Int 9.5 1 -> Int 9.6
  1842F  Uint16 MIL6 : 1 ;
  1843F                  // 6 0 -> Int 9.5 1 -> Int 9.6
  1844F  Uint16 MIL7 : 1 ;
  1845F                  // 7 0 -> Int 9.5 1 -> Int 9.6
  1846F  Uint16 MIL8 : 1 ;
  1847F                  // 8 0 -> Int 9.5 1 -> Int 9.6
  1848F  Uint16 MIL9 : 1 ;
  1849F                  // 9 0 -> Int 9.5 1 -> Int 9.6
  1850F  Uint16 MIL10 : 1 ;
  1851F                   // 10 0 -> Int 9.5 1 -> Int 9.6
  1852F  Uint16 MIL11 : 1 ;
  1853F                   // 11 0 -> Int 9.5 1 -> Int 9.6
  1854F  Uint16 MIL12 : 1 ;
  1855F                   // 12 0 -> Int 9.5 1 -> Int 9.6
  1856F  Uint16 MIL13 : 1 ;
  1857F                   // 13 0 -> Int 9.5 1 -> Int 9.6
  1858F  Uint16 MIL14 : 1 ;
  1859F                   // 14 0 -> Int 9.5 1 -> Int 9.6
  1860F  Uint16 MIL15 : 1 ;
  1861F                   // 15 0 -> Int 9.5 1 -> Int 9.6
  1862F  Uint16 MIL16 : 1 ;
  1863F                   // 16 0 -> Int 9.5 1 -> Int 9.6
  1864F  Uint16 MIL17 : 1 ;
  1865F                   // 17 0 -> Int 9.5 1 -> Int 9.6
  1866F  Uint16 MIL18 : 1 ;
  1867F                   // 18 0 -> Int 9.5 1 -> Int 9.6
  1868F  Uint16 MIL19 : 1 ;
  1869F                   // 19 0 -> Int 9.5 1 -> Int 9.6
  1870F  Uint16 MIL20 : 1 ;
  1871F                   // 20 0 -> Int 9.5 1 -> Int 9.6
  1872F  Uint16 MIL21 : 1 ;
  1873F                   // 21 0 -> Int 9.5 1 -> Int 9.6
  1874F  Uint16 MIL22 : 1 ;
  1875F                   // 22 0 -> Int 9.5 1 -> Int 9.6
  1876F  Uint16 MIL23 : 1 ;
  1877F                   // 23 0 -> Int 9.5 1 -> Int 9.6
  1878F  Uint16 MIL24 : 1 ;
  1879F                   // 24 0 -> Int 9.5 1 -> Int 9.6
  1880F  Uint16 MIL25 : 1 ;
  1881F                   // 25 0 -> Int 9.5 1 -> Int 9.6
  1882F  Uint16 MIL26 : 1 ;
  1883F                   // 26 0 -> Int 9.5 1 -> Int 9.6
  1884F  Uint16 MIL27 : 1 ;
  1885F                   // 27 0 -> Int 9.5 1 -> Int 9.6
  1886F  Uint16 MIL28 : 1 ;
  1887F                   // 28 0 -> Int 9.5 1 -> Int 9.6
  1888F  Uint16 MIL29 : 1 ;
  1889F                   // 29 0 -> Int 9.5 1 -> Int 9.6
  1890F  Uint16 MIL30 : 1 ;
  1891F                   // 30 0 -> Int 9.5 1 -> Int 9.6
  1892F  Uint16 MIL31 : 1 ;
  1893F                   // 31 0 -> Int 9.5 1 -> Int 9.6
  1894F} ;
  1895F/* Allow access to the bit fields or entire register */
  1896F
  1897Funion CANMIL_REG
  1898F{
  1899F  Uint32 all ;
  1900F  struct CANMIL_BITS bit ;
  1901F} ;
  1902F/* eCAN Overwrite Protection Control register (CANOPC) bit definitions */
  1903F
  1904Fstruct CANOPC_BITS
  1905F{                    // bit description
  1906F  Uint16 OPC0 : 1 ;
  1907F                  // 0 OPC for Mailbox 0
  1908F  Uint16 OPC1 : 1 ;
  1909F                  // 1 OPC for Mailbox 1
  1910F  Uint16 OPC2 : 1 ;
  1911F                  // 2 OPC for Mailbox 2
  1912F  Uint16 OPC3 : 1 ;
  1913F                  // 3 OPC for Mailbox 3
  1914F  Uint16 OPC4 : 1 ;
  1915F                  // 4 OPC for Mailbox 4
  1916F  Uint16 OPC5 : 1 ;
  1917F                  // 5 OPC for Mailbox 5
  1918F  Uint16 OPC6 : 1 ;
  1919F                  // 6 OPC for Mailbox 6
  1920F  Uint16 OPC7 : 1 ;
  1921F                  // 7 OPC for Mailbox 7
  1922F  Uint16 OPC8 : 1 ;
  1923F                  // 8 OPC for Mailbox 8
  1924F  Uint16 OPC9 : 1 ;
  1925F                  // 9 OPC for Mailbox 9
  1926F  Uint16 OPC10 : 1 ;
  1927F                   // 10 OPC for Mailbox 10
  1928F  Uint16 OPC11 : 1 ;
  1929F                   // 11 OPC for Mailbox 11
  1930F  Uint16 OPC12 : 1 ;
  1931F                   // 12 OPC for Mailbox 12
  1932F  Uint16 OPC13 : 1 ;
  1933F                   // 13 OPC for Mailbox 13
  1934F  Uint16 OPC14 : 1 ;
  1935F                   // 14 OPC for Mailbox 14
  1936F  Uint16 OPC15 : 1 ;
  1937F                   // 15 OPC for Mailbox 15
  1938F  Uint16 OPC16 : 1 ;
  1939F                   // 16 OPC for Mailbox 16
  1940F  Uint16 OPC17 : 1 ;
  1941F                   // 17 OPC for Mailbox 17
  1942F  Uint16 OPC18 : 1 ;
  1943F                   // 18 OPC for Mailbox 18
  1944F  Uint16 OPC19 : 1 ;
  1945F                   // 19 OPC for Mailbox 19
  1946F  Uint16 OPC20 : 1 ;
  1947F                   // 20 OPC for Mailbox 20
  1948F  Uint16 OPC21 : 1 ;
  1949F                   // 21 OPC for Mailbox 21
  1950F  Uint16 OPC22 : 1 ;
  1951F                   // 22 OPC for Mailbox 22
  1952F  Uint16 OPC23 : 1 ;
  1953F                   // 23 OPC for Mailbox 23
  1954F  Uint16 OPC24 : 1 ;
  1955F                   // 24 OPC for Mailbox 24
  1956F  Uint16 OPC25 : 1 ;
  1957F                   // 25 OPC for Mailbox 25
  1958F  Uint16 OPC26 : 1 ;
  1959F                   // 26 OPC for Mailbox 26
  1960F  Uint16 OPC27 : 1 ;
  1961F                   // 27 OPC for Mailbox 27
  1962F  Uint16 OPC28 : 1 ;
  1963F                   // 28 OPC for Mailbox 28
  1964F  Uint16 OPC29 : 1 ;
  1965F                   // 29 OPC for Mailbox 29
  1966F  Uint16 OPC30 : 1 ;
  1967F                   // 30 OPC for Mailbox 30
  1968F  Uint16 OPC31 : 1 ;
  1969F                   // 31 OPC for Mailbox 31
  1970F} ;
  1971F/* Allow access to the bit fields or entire register */
  1972F
  1973Funion CANOPC_REG
  1974F{
  1975F  Uint32 all ;
  1976F  struct CANOPC_BITS bit ;
  1977F} ;
  1978F/* eCAN TX I/O Control Register (CANTIOC) bit definitions */
  1979F
  1980Fstruct CANTIOC_BITS
  1981F{                     // bits description
  1982F  Uint16 rsvd1 : 3 ;
  1983F                   // 2:0 reserved
  1984F  Uint16 TXFUNC : 1 ;
  1985F                    // 3 TXFUNC
  1986F  Uint16 rsvd2 : 12 ;
  1987F                    // 15:4 reserved
  1988F  Uint16 rsvd3 : 16 ;
  1989F                    // 31:16 reserved
  1990F} ;
  1991F/* Allow access to the bit fields or entire register */
  1992F
  1993Funion CANTIOC_REG
  1994F{
  1995F  Uint32 all ;
  1996F  struct CANTIOC_BITS bit ;
  1997F} ;
  1998F/* eCAN RX I/O Control Register (CANRIOC) bit definitions */
  1999F
  2000Fstruct CANRIOC_BITS
  2001F{                     // bits description
  2002F  Uint16 rsvd1 : 3 ;
  2003F                   // 2:0 reserved
  2004F  Uint16 RXFUNC : 1 ;
  2005F                    // 3 RXFUNC
  2006F  Uint16 rsvd2 : 12 ;
  2007F                    // 15:4 reserved
  2008F  Uint16 rsvd3 : 16 ;
  2009F                    // 31:16 reserved
  2010F} ;
  2011F/* Allow access to the bit fields or entire register */
  2012F
  2013Funion CANRIOC_REG
  2014F{
  2015F  Uint32 all ;
  2016F  struct CANRIOC_BITS bit ;
  2017F} ;
  2018F/* eCAN Time-out Control register (CANTOC) bit definitions */
  2019F
  2020Fstruct CANTOC_BITS
  2021F{                    // bit description
  2022F  Uint16 TOC0 : 1 ;
  2023F                  // 0 TOC for Mailbox 0
  2024F  Uint16 TOC1 : 1 ;
  2025F                  // 1 TOC for Mailbox 1
  2026F  Uint16 TOC2 : 1 ;
  2027F                  // 2 TOC for Mailbox 2
  2028F  Uint16 TOC3 : 1 ;
  2029F                  // 3 TOC for Mailbox 3
  2030F  Uint16 TOC4 : 1 ;
  2031F                  // 4 TOC for Mailbox 4
  2032F  Uint16 TOC5 : 1 ;
  2033F                  // 5 TOC for Mailbox 5
  2034F  Uint16 TOC6 : 1 ;
  2035F                  // 6 TOC for Mailbox 6
  2036F  Uint16 TOC7 : 1 ;
  2037F                  // 7 TOC for Mailbox 7
  2038F  Uint16 TOC8 : 1 ;
  2039F                  // 8 TOC for Mailbox 8
  2040F  Uint16 TOC9 : 1 ;
  2041F                  // 9 TOC for Mailbox 9
  2042F  Uint16 TOC10 : 1 ;
  2043F                   // 10 TOC for Mailbox 10
  2044F  Uint16 TOC11 : 1 ;
  2045F                   // 11 TOC for Mailbox 11
  2046F  Uint16 TOC12 : 1 ;
  2047F                   // 12 TOC for Mailbox 12
  2048F  Uint16 TOC13 : 1 ;
  2049F                   // 13 TOC for Mailbox 13
  2050F  Uint16 TOC14 : 1 ;
  2051F                   // 14 TOC for Mailbox 14
  2052F  Uint16 TOC15 : 1 ;
  2053F                   // 15 TOC for Mailbox 15
  2054F  Uint16 TOC16 : 1 ;
  2055F                   // 16 TOC for Mailbox 16
  2056F  Uint16 TOC17 : 1 ;
  2057F                   // 17 TOC for Mailbox 17
  2058F  Uint16 TOC18 : 1 ;
  2059F                   // 18 TOC for Mailbox 18
  2060F  Uint16 TOC19 : 1 ;
  2061F                   // 19 TOC for Mailbox 19
  2062F  Uint16 TOC20 : 1 ;
  2063F                   // 20 TOC for Mailbox 20
  2064F  Uint16 TOC21 : 1 ;
  2065F                   // 21 TOC for Mailbox 21
  2066F  Uint16 TOC22 : 1 ;
  2067F                   // 22 TOC for Mailbox 22
  2068F  Uint16 TOC23 : 1 ;
  2069F                   // 23 TOC for Mailbox 23
  2070F  Uint16 TOC24 : 1 ;
  2071F                   // 24 TOC for Mailbox 24
  2072F  Uint16 TOC25 : 1 ;
  2073F                   // 25 TOC for Mailbox 25
  2074F  Uint16 TOC26 : 1 ;
  2075F                   // 26 TOC for Mailbox 26
  2076F  Uint16 TOC27 : 1 ;
  2077F                   // 27 TOC for Mailbox 27
  2078F  Uint16 TOC28 : 1 ;
  2079F                   // 28 TOC for Mailbox 28
  2080F  Uint16 TOC29 : 1 ;
  2081F                   // 29 TOC for Mailbox 29
  2082F  Uint16 TOC30 : 1 ;
  2083F                   // 30 TOC for Mailbox 30
  2084F  Uint16 TOC31 : 1 ;
  2085F                   // 31 TOC for Mailbox 31
  2086F} ;
  2087F/* Allow access to the bit fields or entire register */
  2088F
  2089Funion CANTOC_REG
  2090F{
  2091F  Uint32 all ;
  2092F  struct CANTOC_BITS bit ;
  2093F} ;
  2094F/* eCAN Time-out Status register (CANTOS) bit definitions */
  2095F
  2096Fstruct CANTOS_BITS
  2097F{                    // bit description
  2098F  Uint16 TOS0 : 1 ;
  2099F                  // 0 TOS for Mailbox 0
  2100F  Uint16 TOS1 : 1 ;
  2101F                  // 1 TOS for Mailbox 1
  2102F  Uint16 TOS2 : 1 ;
  2103F                  // 2 TOS for Mailbox 2
  2104F  Uint16 TOS3 : 1 ;
  2105F                  // 3 TOS for Mailbox 3
  2106F  Uint16 TOS4 : 1 ;
  2107F                  // 4 TOS for Mailbox 4
  2108F  Uint16 TOS5 : 1 ;
  2109F                  // 5 TOS for Mailbox 5
  2110F  Uint16 TOS6 : 1 ;
  2111F                  // 6 TOS for Mailbox 6
  2112F  Uint16 TOS7 : 1 ;
  2113F                  // 7 TOS for Mailbox 7
  2114F  Uint16 TOS8 : 1 ;
  2115F                  // 8 TOS for Mailbox 8
  2116F  Uint16 TOS9 : 1 ;
  2117F                  // 9 TOS for Mailbox 9
  2118F  Uint16 TOS10 : 1 ;
  2119F                   // 10 TOS for Mailbox 10
  2120F  Uint16 TOS11 : 1 ;
  2121F                   // 11 TOS for Mailbox 11
  2122F  Uint16 TOS12 : 1 ;
  2123F                   // 12 TOS for Mailbox 12
  2124F  Uint16 TOS13 : 1 ;
  2125F                   // 13 TOS for Mailbox 13
  2126F  Uint16 TOS14 : 1 ;
  2127F                   // 14 TOS for Mailbox 14
  2128F  Uint16 TOS15 : 1 ;
  2129F                   // 15 TOS for Mailbox 15
  2130F  Uint16 TOS16 : 1 ;
  2131F                   // 16 TOS for Mailbox 16
  2132F  Uint16 TOS17 : 1 ;
  2133F                   // 17 TOS for Mailbox 17
  2134F  Uint16 TOS18 : 1 ;
  2135F                   // 18 TOS for Mailbox 18
  2136F  Uint16 TOS19 : 1 ;
  2137F                   // 19 TOS for Mailbox 19
  2138F  Uint16 TOS20 : 1 ;
  2139F                   // 20 TOS for Mailbox 20
  2140F  Uint16 TOS21 : 1 ;
  2141F                   // 21 TOS for Mailbox 21
  2142F  Uint16 TOS22 : 1 ;
  2143F                   // 22 TOS for Mailbox 22
  2144F  Uint16 TOS23 : 1 ;
  2145F                   // 23 TOS for Mailbox 23
  2146F  Uint16 TOS24 : 1 ;
  2147F                   // 24 TOS for Mailbox 24
  2148F  Uint16 TOS25 : 1 ;
  2149F                   // 25 TOS for Mailbox 25
  2150F  Uint16 TOS26 : 1 ;
  2151F                   // 26 TOS for Mailbox 26
  2152F  Uint16 TOS27 : 1 ;
  2153F                   // 27 TOS for Mailbox 27
  2154F  Uint16 TOS28 : 1 ;
  2155F                   // 28 TOS for Mailbox 28
  2156F  Uint16 TOS29 : 1 ;
  2157F                   // 29 TOS for Mailbox 29
  2158F  Uint16 TOS30 : 1 ;
  2159F                   // 30 TOS for Mailbox 30
  2160F  Uint16 TOS31 : 1 ;
  2161F                   // 31 TOS for Mailbox 31
  2162F} ;
  2163F/* Allow access to the bit fields or entire register */
  2164F
  2165Funion CANTOS_REG
  2166F{
  2167F  Uint32 all ;
  2168F  struct CANTOS_BITS bit ;
  2169F} ;
  2170F/**************************************/
  2171F/* eCAN Control & Status register file */
  2172F/**************************************/
  2173F
  2174Fstruct ECAN_REGS
  2175F{
  2176F  union CANME_REG CANME ; // Mailbox Enable
  2177F  union CANMD_REG CANMD ; // Mailbox Direction
  2178F  union CANTRS_REG CANTRS ; // Transmit Request Set
  2179F  union CANTRR_REG CANTRR ; // Transmit Request Reset
  2180F  union CANTA_REG CANTA ; // Transmit Acknowledge
  2181F  union CANAA_REG CANAA ; // Abort Acknowledge
  2182F  union CANRMP_REG CANRMP ; // Received Message Pending
  2183F  union CANRML_REG CANRML ; // Received Message Lost
  2184F  union CANRFP_REG CANRFP ; // Remote Frame Pending
  2185F  union CANGAM_REG CANGAM ; // Global Acceptance Mask
  2186F  union CANMC_REG CANMC ; // Master Control
  2187F  union CANBTC_REG CANBTC ; // Bit Timing
  2188F  union CANES_REG CANES ; // Error Status
  2189F  union CANTEC_REG CANTEC ; // Transmit Error Counter
  2190F  union CANREC_REG CANREC ; // Receive Error Counter
  2191F  union CANGIF0_REG CANGIF0 ; // Global Interrupt Flag 0
  2192F  union CANGIM_REG CANGIM ; // Global Interrupt Mask 0
  2193F  union CANGIF1_REG CANGIF1 ; // Global Interrupt Flag 1
  2194F  union CANMIM_REG CANMIM ; // Mailbox Interrupt Mask
  2195F  union CANMIL_REG CANMIL ; // Mailbox Interrupt Level
  2196F  union CANOPC_REG CANOPC ; // Overwrite Protection Control
  2197F  union CANTIOC_REG CANTIOC ; // TX I/O Control
  2198F  union CANRIOC_REG CANRIOC ; // RX I/O Control
  2199F  Uint32 CANTSC ; // Time-stamp counter
  2200F  union CANTOC_REG CANTOC ; // Time-out Control
  2201F  union CANTOS_REG CANTOS ; // Time-out Status
  2202F} ;
  2203F/* --------------------------------------------------- */
  2204F/* eCAN Mailbox Registers */
  2205F/* ----------------------------------------------------*/
  2206F/* eCAN Message ID (MSGID) bit definitions */
  2207F
  2208Fstruct CANMSGID_BITS
  2209F{                      // bits description
  2210F  Uint16 EXTMSGID_L : 16 ;
  2211F                         // 0:15
  2212F  Uint16 EXTMSGID_H : 2 ;
  2213F                        // 16:17
  2214F  Uint16 STDMSGID : 11 ;
  2215F                       // 18:28
  2216F  Uint16 AAM : 1 ;
  2217F                 // 29
  2218F  Uint16 AME : 1 ;
  2219F                 // 30
  2220F  Uint16 IDE : 1 ;
  2221F                 // 31
  2222F} ;
  2223F/* Allow access to the bit fields or entire register */
  2224F
  2225Funion CANMSGID_REG
  2226F{
  2227F  Uint32 all ;
  2228F  struct CANMSGID_BITS bit ;
  2229F} ;
  2230F/* eCAN Message Control Register (MSGCTRL) bit definitions */
  2231F
  2232Fstruct CANMSGCTRL_BITS
  2233F{                        // bits description
  2234F  Uint16 DLC : 4 ;
  2235F                 // 0:3
  2236F  Uint16 RTR : 1 ;
  2237F                 // 4
  2238F  Uint16 rsvd1 : 3 ;
  2239F                   // 7:5 reserved
  2240F  Uint16 TPL : 5 ;
  2241F                 // 12:8
  2242F  Uint16 rsvd2 : 3 ;
  2243F                   // 15:13 reserved
  2244F  Uint16 rsvd3 : 16 ;
  2245F                    // 31:16 reserved
  2246F} ;
  2247F/* Allow access to the bit fields or entire register */
  2248F
  2249Funion CANMSGCTRL_REG
  2250F{
  2251F  Uint32 all ;
  2252F  struct CANMSGCTRL_BITS bit ;
  2253F} ;
  2254F/* eCAN Message Data Register low (MDR_L) word definitions */
  2255F
  2256Fstruct CANMDL_WORDS
  2257F{                     // bits description
  2258F  Uint16 LOW_WORD : 16 ;
  2259F                       // 0:15
  2260F  Uint16 HI_WORD : 16 ;
  2261F                      // 31:16
  2262F} ;
  2263F/* eCAN Message Data Register low (MDR_L) byte definitions */
  2264F
  2265Fstruct CANMDL_BYTES
  2266F{                     // bits description
  2267F  Uint16 BYTE3 : 8 ;
  2268F                   // 31:24
  2269F  Uint16 BYTE2 : 8 ;
  2270F                   // 23:16
  2271F  Uint16 BYTE1 : 8 ;
  2272F                   // 15:8
  2273F  Uint16 BYTE0 : 8 ;
  2274F                   // 7:0
  2275F} ;
  2276F/* Allow access to the bit fields or entire register */
  2277F
  2278Funion CANMDL_REG
  2279F{
  2280F  Uint32 all ;
  2281F  struct CANMDL_WORDS word ;
  2282F  struct CANMDL_BYTES byte ;
  2283F} ;
  2284F/* eCAN Message Data Register high (MDR_H) word definitions */
  2285F
  2286Fstruct CANMDH_WORDS
  2287F{                     // bits description
  2288F  Uint16 LOW_WORD : 16 ;
  2289F                       // 0:15
  2290F  Uint16 HI_WORD : 16 ;
  2291F                      // 31:16
  2292F} ;
  2293F/* eCAN Message Data Register low (MDR_H) byte definitions */
  2294F
  2295Fstruct CANMDH_BYTES
  2296F{                     // bits description
  2297F  Uint16 BYTE7 : 8 ;
  2298F                   // 63:56
  2299F  Uint16 BYTE6 : 8 ;
  2300F                   // 55:48
  2301F  Uint16 BYTE5 : 8 ;
  2302F                   // 47:40
  2303F  Uint16 BYTE4 : 8 ;
  2304F                   // 39:32
  2305F} ;
  2306F/* Allow access to the bit fields or entire register */
  2307F
  2308Funion CANMDH_REG
  2309F{
  2310F  Uint32 all ;
  2311F  struct CANMDH_WORDS word ;
  2312F  struct CANMDH_BYTES byte ;
  2313F} ;
  2314F
  2315Fstruct MBOX
  2316F{
  2317F  union CANMSGID_REG MSGID ;
  2318F  union CANMSGCTRL_REG MSGCTRL ;
  2319F  union CANMDL_REG MDL ;
  2320F  union CANMDH_REG MDH ;
  2321F} ;
  2322F/**************************************/
  2323F/* eCAN Mailboxes */
  2324F/**************************************/
  2325F
  2326Fstruct ECAN_MBOXES
  2327F{
  2328F  struct MBOX MBOX0 ;
  2329F  struct MBOX MBOX1 ;
  2330F  struct MBOX MBOX2 ;
  2331F  struct MBOX MBOX3 ;
  2332F  struct MBOX MBOX4 ;
  2333F  struct MBOX MBOX5 ;
  2334F  struct MBOX MBOX6 ;
  2335F  struct MBOX MBOX7 ;
  2336F  struct MBOX MBOX8 ;
  2337F  struct MBOX MBOX9 ;
  2338F  struct MBOX MBOX10 ;
  2339F  struct MBOX MBOX11 ;
  2340F  struct MBOX MBOX12 ;
  2341F  struct MBOX MBOX13 ;
  2342F  struct MBOX MBOX14 ;
  2343F  struct MBOX MBOX15 ;
  2344F  struct MBOX MBOX16 ;
  2345F  struct MBOX MBOX17 ;
  2346F  struct MBOX MBOX18 ;
  2347F  struct MBOX MBOX19 ;
  2348F  struct MBOX MBOX20 ;
  2349F  struct MBOX MBOX21 ;
  2350F  struct MBOX MBOX22 ;
  2351F  struct MBOX MBOX23 ;
  2352F  struct MBOX MBOX24 ;
  2353F  struct MBOX MBOX25 ;
  2354F  struct MBOX MBOX26 ;
  2355F  struct MBOX MBOX27 ;
  2356F  struct MBOX MBOX28 ;
  2357F  struct MBOX MBOX29 ;
  2358F  struct MBOX MBOX30 ;
  2359F  struct MBOX MBOX31 ;
  2360F} ;
  2361F/* eCAN Local Acceptance Mask (LAM) bit definitions */
  2362F
  2363Fstruct CANLAM_BITS
  2364F{                    // bits description
  2365F  Uint16 LAM_L : 16 ;
  2366F                    // 0:15
  2367F  Uint16 LAM_H : 13 ;
  2368F                    // 16:28
  2369F  Uint16 rsvd1 : 2 ;
  2370F                   // 29:30 reserved
  2371F  Uint16 LAMI : 1 ;
  2372F                  // 31
  2373F} ;
  2374F/* Allow access to the bit fields or entire register */
  2375F
  2376Funion CANLAM_REG
  2377F{
  2378F  Uint32 all ;
  2379F  struct CANLAM_BITS bit ;
  2380F} ;
  2381F/**************************************/
  2382F/* eCAN Local Acceptance Masks */
  2383F/**************************************/
  2384F/* eCAN LAM File */
  2385F
  2386Fstruct LAM_REGS
  2387F{
  2388F  union CANLAM_REG LAM0 ;
  2389F  union CANLAM_REG LAM1 ;
  2390F  union CANLAM_REG LAM2 ;
  2391F  union CANLAM_REG LAM3 ;
  2392F  union CANLAM_REG LAM4 ;
  2393F  union CANLAM_REG LAM5 ;
  2394F  union CANLAM_REG LAM6 ;
  2395F  union CANLAM_REG LAM7 ;
  2396F  union CANLAM_REG LAM8 ;
  2397F  union CANLAM_REG LAM9 ;
  2398F  union CANLAM_REG LAM10 ;
  2399F  union CANLAM_REG LAM11 ;
  2400F  union CANLAM_REG LAM12 ;
  2401F  union CANLAM_REG LAM13 ;
  2402F  union CANLAM_REG LAM14 ;
  2403F  union CANLAM_REG LAM15 ;
  2404F  union CANLAM_REG LAM16 ;
  2405F  union CANLAM_REG LAM17 ;
  2406F  union CANLAM_REG LAM18 ;
  2407F  union CANLAM_REG LAM19 ;
  2408F  union CANLAM_REG LAM20 ;
  2409F  union CANLAM_REG LAM21 ;
  2410F  union CANLAM_REG LAM22 ;
  2411F  union CANLAM_REG LAM23 ;
  2412F  union CANLAM_REG LAM24 ;
  2413F  union CANLAM_REG LAM25 ;
  2414F  union CANLAM_REG LAM26 ;
  2415F  union CANLAM_REG LAM27 ;
  2416F  union CANLAM_REG LAM28 ;
  2417F  union CANLAM_REG LAM29 ;
  2418F  union CANLAM_REG LAM30 ;
  2419F  union CANLAM_REG LAM31 ;
  2420F} ;
  2421F/* Mailbox MOTS File */
  2422F
  2423Fstruct MOTS_REGS
  2424F{
  2425F  Uint32 MOTS0 ;
  2426F  Uint32 MOTS1 ;
  2427F  Uint32 MOTS2 ;
  2428F  Uint32 MOTS3 ;
  2429F  Uint32 MOTS4 ;
  2430F  Uint32 MOTS5 ;
  2431F  Uint32 MOTS6 ;
  2432F  Uint32 MOTS7 ;
  2433F  Uint32 MOTS8 ;
  2434F  Uint32 MOTS9 ;
  2435F  Uint32 MOTS10 ;
  2436F  Uint32 MOTS11 ;
  2437F  Uint32 MOTS12 ;
  2438F  Uint32 MOTS13 ;
  2439F  Uint32 MOTS14 ;
  2440F  Uint32 MOTS15 ;
  2441F  Uint32 MOTS16 ;
  2442F  Uint32 MOTS17 ;
  2443F  Uint32 MOTS18 ;
  2444F  Uint32 MOTS19 ;
  2445F  Uint32 MOTS20 ;
  2446F  Uint32 MOTS21 ;
  2447F  Uint32 MOTS22 ;
  2448F  Uint32 MOTS23 ;
  2449F  Uint32 MOTS24 ;
  2450F  Uint32 MOTS25 ;
  2451F  Uint32 MOTS26 ;
  2452F  Uint32 MOTS27 ;
  2453F  Uint32 MOTS28 ;
  2454F  Uint32 MOTS29 ;
  2455F  Uint32 MOTS30 ;
  2456F  Uint32 MOTS31 ;
  2457F} ;
  2458F/* Mailbox MOTO File */
  2459F
  2460Fstruct MOTO_REGS
  2461F{
  2462F  Uint32 MOTO0 ;
  2463F  Uint32 MOTO1 ;
  2464F  Uint32 MOTO2 ;
  2465F  Uint32 MOTO3 ;
  2466F  Uint32 MOTO4 ;
  2467F  Uint32 MOTO5 ;
  2468F  Uint32 MOTO6 ;
  2469F  Uint32 MOTO7 ;
  2470F  Uint32 MOTO8 ;
  2471F  Uint32 MOTO9 ;
  2472F  Uint32 MOTO10 ;
  2473F  Uint32 MOTO11 ;
  2474F  Uint32 MOTO12 ;
  2475F  Uint32 MOTO13 ;
  2476F  Uint32 MOTO14 ;
  2477F  Uint32 MOTO15 ;
  2478F  Uint32 MOTO16 ;
  2479F  Uint32 MOTO17 ;
  2480F  Uint32 MOTO18 ;
  2481F  Uint32 MOTO19 ;
  2482F  Uint32 MOTO20 ;
  2483F  Uint32 MOTO21 ;
  2484F  Uint32 MOTO22 ;
  2485F  Uint32 MOTO23 ;
  2486F  Uint32 MOTO24 ;
  2487F  Uint32 MOTO25 ;
  2488F  Uint32 MOTO26 ;
  2489F  Uint32 MOTO27 ;
  2490F  Uint32 MOTO28 ;
  2491F  Uint32 MOTO29 ;
  2492F  Uint32 MOTO30 ;
  2493F  Uint32 MOTO31 ;
  2494F} ;
  2495F//---------------------------------------------------------------------------
  2496F// eCAN External References & Function Declarations:
  2497F//
  2498F
  2499Fextern volatile struct ECAN_REGS
  2500F  ECanaRegs ;
  2501F
  2502Fextern volatile struct ECAN_MBOXES
  2503F  ECanaMboxes ;
  2504F
  2505Fextern volatile struct LAM_REGS
  2506F  ECanaLAMRegs ;
  2507F
  2508Fextern volatile struct MOTO_REGS
  2509F  ECanaMOTORegs ;
  2510F
  2511Fextern volatile struct MOTS_REGS
  2512F  ECanaMOTSRegs ;
  2513F
  2514Fextern volatile struct ECAN_REGS
  2515F  ECanbRegs ;
  2516F
  2517Fextern volatile struct ECAN_MBOXES
  2518F  ECanbMboxes ;
  2519F
  2520Fextern volatile struct LAM_REGS
  2521F  ECanbLAMRegs ;
  2522F
  2523Fextern volatile struct MOTO_REGS
  2524F  ECanbMOTORegs ;
  2525F
  2526Fextern volatile struct MOTS_REGS
  2527F  ECanbMOTSRegs ;
  2528F       /* extern "C" */
  2529F       // end of DSP2833x_ECAN.H definition
  2530F//===========================================================================
  2531F// End of file.
  2532F//===========================================================================
  2533F 
  2534F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECan.h*/
  2535F/*   CLOSE_FILE Include File */
  2536F 
  2537F               // Enhanced eCAN Registers
  2538F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECap.h */
  2539F// TI File $Revision: /main/1 $
  2540F// Checkin $Date: August 18, 2006 13:52:07 $
  2541F//###########################################################################
  2542F//
  2543F// FILE: DSP2833x_ECap.h
  2544F//
  2545F// TITLE: DSP2833x Enhanced Capture Module Register Bit Definitions.
  2546F//
  2547F//###########################################################################
  2548F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  2549F// $Release Date: August 4, 2009 $
  2550F//###########################################################################
  2551F#ifndef DSP2833x_ECAP_H
  2552F#define DSP2833x_ECAP_H
  2553F//----------------------------------------------------
  2554F// Capture control register 1 bit definitions */
  2555F
  2556Fstruct ECCTL1_BITS
  2557F{                    // bits description
  2558F  Uint16 CAP1POL : 1 ;
  2559F                     // 0 Capture Event 1 Polarity select
  2560F  Uint16 CTRRST1 : 1 ;
  2561F                     // 1 Counter Reset on Capture Event 1
  2562F  Uint16 CAP2POL : 1 ;
  2563F                     // 2 Capture Event 2 Polarity select
  2564F  Uint16 CTRRST2 : 1 ;
  2565F                     // 3 Counter Reset on Capture Event 2
  2566F  Uint16 CAP3POL : 1 ;
  2567F                     // 4 Capture Event 3 Polarity select
  2568F  Uint16 CTRRST3 : 1 ;
  2569F                     // 5 Counter Reset on Capture Event 3
  2570F  Uint16 CAP4POL : 1 ;
  2571F                     // 6 Capture Event 4 Polarity select
  2572F  Uint16 CTRRST4 : 1 ;
  2573F                     // 7 Counter Reset on Capture Event 4
  2574F  Uint16 CAPLDEN : 1 ;
  2575F                     // 8 Enable Loading CAP1-4 regs on a Cap Event
  2576F  Uint16 PRESCALE : 5 ;
  2577F                      // 13:9 Event Filter prescale select
  2578F  Uint16 FREE_SOFT : 2 ;
  2579F                       // 15:14 Emulation mode
  2580F} ;
  2581F
  2582Funion ECCTL1_REG
  2583F{
  2584F  Uint16 all ;
  2585F  struct ECCTL1_BITS bit ;
  2586F} ;
  2587F// In V1.1 the STOPVALUE bit field was changed to
  2588F// STOP_WRAP. This correlated to a silicon change from
  2589F// F2833x Rev 0 to Rev A.
  2590F//----------------------------------------------------
  2591F// Capture control register 2 bit definitions */
  2592F
  2593Fstruct ECCTL2_BITS
  2594F{                    // bits description
  2595F  Uint16 CONT_ONESHT : 1 ;
  2596F                         // 0 Continuous or one-shot
  2597F  Uint16 STOP_WRAP : 2 ;
  2598F                       // 2:1 Stop value for one-shot, Wrap for continuous
  2599F  Uint16 REARM : 1 ;
  2600F                   // 3 One-shot re-arm
  2601F  Uint16 TSCTRSTOP : 1 ;
  2602F                       // 4 TSCNT counter stop
  2603F  Uint16 SYNCI_EN : 1 ;
  2604F                      // 5 Counter sync-in select
  2605F  Uint16 SYNCO_SEL : 2 ;
  2606F                       // 7:6 Sync-out mode
  2607F  Uint16 SWSYNC : 1 ;
  2608F                    // 8 SW forced counter sync
  2609F  Uint16 CAP_APWM : 1 ;
  2610F                      // 9 CAP/APWM operating mode select
  2611F  Uint16 APWMPOL : 1 ;
  2612F                     // 10 APWM output polarity select
  2613F  Uint16 rsvd1 : 5 ;
  2614F                   // 15:11
  2615F} ;
  2616F
  2617Funion ECCTL2_REG
  2618F{
  2619F  Uint16 all ;
  2620F  struct ECCTL2_BITS bit ;
  2621F} ;
  2622F//----------------------------------------------------
  2623F// ECAP interrupt enable register bit definitions */
  2624F
  2625Fstruct ECEINT_BITS
  2626F{                    // bits description
  2627F  Uint16 rsvd1 : 1 ;
  2628F                   // 0 reserved
  2629F  Uint16 CEVT1 : 1 ;
  2630F                   // 1 Capture Event 1 Interrupt Enable
  2631F  Uint16 CEVT2 : 1 ;
  2632F                   // 2 Capture Event 2 Interrupt Enable
  2633F  Uint16 CEVT3 : 1 ;
  2634F                   // 3 Capture Event 3 Interrupt Enable
  2635F  Uint16 CEVT4 : 1 ;
  2636F                   // 4 Capture Event 4 Interrupt Enable
  2637F  Uint16 CTROVF : 1 ;
  2638F                    // 5 Counter Overflow Interrupt Enable
  2639F  Uint16 CTR_EQ_PRD : 1 ;
  2640F                        // 6 Period Equal Interrupt Enable
  2641F  Uint16 CTR_EQ_CMP : 1 ;
  2642F                        // 7 Compare Equal Interrupt Enable
  2643F  Uint16 rsvd2 : 8 ;
  2644F                   // 15:8 reserved
  2645F} ;
  2646F
  2647Funion ECEINT_REG
  2648F{
  2649F  Uint16 all ;
  2650F  struct ECEINT_BITS bit ;
  2651F} ;
  2652F//----------------------------------------------------
  2653F// ECAP interrupt flag register bit definitions */
  2654F
  2655Fstruct ECFLG_BITS
  2656F{                   // bits description
  2657F  Uint16 INT : 1 ;
  2658F                 // 0 Global Flag
  2659F  Uint16 CEVT1 : 1 ;
  2660F                   // 1 Capture Event 1 Interrupt Flag
  2661F  Uint16 CEVT2 : 1 ;
  2662F                   // 2 Capture Event 2 Interrupt Flag
  2663F  Uint16 CEVT3 : 1 ;
  2664F                   // 3 Capture Event 3 Interrupt Flag
  2665F  Uint16 CEVT4 : 1 ;
  2666F                   // 4 Capture Event 4 Interrupt Flag
  2667F  Uint16 CTROVF : 1 ;
  2668F                    // 5 Counter Overflow Interrupt Flag
  2669F  Uint16 CTR_EQ_PRD : 1 ;
  2670F                        // 6 Period Equal Interrupt Flag
  2671F  Uint16 CTR_EQ_CMP : 1 ;
  2672F                        // 7 Compare Equal Interrupt Flag
  2673F  Uint16 rsvd2 : 8 ;
  2674F                   // 15:8 reserved
  2675F} ;
  2676F
  2677Funion ECFLG_REG
  2678F{
  2679F  Uint16 all ;
  2680F  struct ECFLG_BITS bit ;
  2681F} ;
  2682F//----------------------------------------------------
  2683F
  2684Fstruct ECAP_REGS
  2685F{
  2686F  Uint32 TSCTR ; // Time stamp counter
  2687F  Uint32 CTRPHS ; // Counter phase
  2688F  Uint32 CAP1 ; // Capture 1
  2689F  Uint32 CAP2 ; // Capture 2
  2690F  Uint32 CAP3 ; // Capture 3
  2691F  Uint32 CAP4 ; // Capture 4
  2692F  Uint16 rsvd1 [ 8 ] ;
  2693F                    // reserved
  2694F  union ECCTL1_REG ECCTL1 ; // Capture Control Reg 1
  2695F  union ECCTL2_REG ECCTL2 ; // Capture Control Reg 2
  2696F  union ECEINT_REG ECEINT ; // ECAP interrupt enable
  2697F  union ECFLG_REG ECFLG ; // ECAP interrupt flags
  2698F  union ECFLG_REG ECCLR ; // ECAP interrupt clear
  2699F  union ECEINT_REG ECFRC ; // ECAP interrupt force
  2700F  Uint16 rsvd2 [ 6 ] ;
  2701F                    // reserved
  2702F} ;
  2703F//---------------------------------------------------------------------------
  2704F// GPI/O External References & Function Declarations:
  2705F//
  2706F
  2707Fextern volatile struct ECAP_REGS
  2708F  ECap1Regs ;
  2709F
  2710Fextern volatile struct ECAP_REGS
  2711F  ECap2Regs ;
  2712F
  2713Fextern volatile struct ECAP_REGS
  2714F  ECap3Regs ;
  2715F
  2716Fextern volatile struct ECAP_REGS
  2717F  ECap4Regs ;
  2718F
  2719Fextern volatile struct ECAP_REGS
  2720F  ECap5Regs ;
  2721F
  2722Fextern volatile struct ECAP_REGS
  2723F  ECap6Regs ;
  2724F       /* extern "C" */
  2725F       // end of DSP2833x_ECAP_H definition
  2726F//===========================================================================
  2727F// End of file.
  2728F//===========================================================================
  2729F 
  2730F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECap.h*/
  2731F/*   CLOSE_FILE Include File */
  2732F 
  2733F               // Enhanced Capture
  2734F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DMA.h */
  2735F// TI File $Revision: /main/11 $
  2736F// Checkin $Date: June 23, 2008 11:34:15 $
  2737F//###########################################################################
  2738F//
  2739F// FILE: DSP2833x_DMA.h
  2740F//
  2741F// TITLE: DSP2833x DMA Module Register Bit Definitions.
  2742F//
  2743F//###########################################################################
  2744F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  2745F// $Release Date: August 4, 2009 $
  2746F//###########################################################################
  2747F#ifndef DSP2833x_DMA_H
  2748F#define DSP2833x_DMA_H
  2749F//----------------------------------------------------
  2750F// Channel MODE register bit definitions:
  2751F
  2752Fstruct MODE_BITS
  2753F{                  // bits description
  2754F  Uint16 PERINTSEL : 5 ;
  2755F                       // 4:0 Peripheral Interrupt and Sync Select Bits (R/W):
  2756F                             // 0 no interrupt
  2757F               // 1 SEQ1INT & ADCSYNC
  2758F                             // 2 SEQ2INT
  2759F               // 3 XINT1
  2760F               // 4 XINT2
  2761F               // 5 XINT3
  2762F               // 6 XINT4
  2763F               // 7 XINT5
  2764F               // 8 XINT6
  2765F               // 9 XINT7
  2766F               // 10 XINT13
  2767F               // 11 TINT0
  2768F               // 12 TINT1
  2769F               // 13 TINT2
  2770F               // 14 MXEVTA & MXSYNCA
  2771F               // 15 MREVTA & MRSYNCA
  2772F               // 16 MXEVTB & MXSYNCB
  2773F               // 17 MREVTB & MRSYNCB
  2774F                                 // 18 ePWM1SOCA
  2775F                                 // 19 ePWM1SOCB
  2776F                                 // 20 ePWM2SOCA
  2777F                                 // 21 ePWM2SOCB
  2778F                                 // 22 ePWM3SOCA
  2779F                                 // 23 ePWM3SOCB
  2780F                                 // 24 ePWM4SOCA
  2781F                                 // 25 ePWM4SOCB
  2782F                                 // 26 ePWM5SOCA
  2783F                                 // 27 ePWM5SOCB
  2784F                                 // 28 ePWM6SOCA
  2785F                                 // 29 ePWM6SOCB
  2786F                                 // 30:31 no interrupt
  2787F  Uint16 rsvd1 : 2 ;
  2788F                   // 6:5 (R=0:0)
  2789F  Uint16 OVRINTE : 1 ;
  2790F                     // 7 Overflow Interrupt Enable (R/W):
  2791F                             // 0 overflow interrupt disabled
  2792F                             // 1 overflow interrupt enabled
  2793F  Uint16 PERINTE : 1 ;
  2794F                     // 8 Peripheral Interrupt Enable Bit (R/W):
  2795F                             // 0 peripheral interrupt disabled
  2796F                             // 1 peripheral interrupt enabled
  2797F  Uint16 CHINTMODE : 1 ;
  2798F                       // 9 Channel Interrupt Mode Bit (R/W):
  2799F                             // 0 generate interrupt at beginning of new transfer
  2800F                             // 1 generate interrupt at end of transfer
  2801F  Uint16 ONESHOT : 1 ;
  2802F                     // 10 One Shot Mode Bit (R/W):
  2803F                             // 0 only interrupt event triggers single burst transfer
  2804F                             // 1 first interrupt triggers burst, continue until transfer count is zero
  2805F  Uint16 CONTINUOUS : 1 ;
  2806F                        // 11 Continous Mode Bit (R/W):
  2807F                             // 0 stop when transfer count is zero
  2808F                             // 1 re-initialize when transfer count is zero
  2809F  Uint16 SYNCE : 1 ;
  2810F                   // 12 Sync Enable Bit (R/W):
  2811F                             // 0 ignore selected interrupt sync signal
  2812F                             // 1 enable selected interrupt sync signal
  2813F  Uint16 SYNCSEL : 1 ;
  2814F                     // 13 Sync Select Bit (R/W):
  2815F                             // 0 sync signal controls source wrap counter
  2816F                             // 1 sync signal controls destination wrap counter
  2817F  Uint16 DATASIZE : 1 ;
  2818F                      // 14 Data Size Mode Bit (R/W):
  2819F                             // 0 16-bit data transfer size
  2820F                             // 1 32-bit data transfer size
  2821F  Uint16 CHINTE : 1 ;
  2822F                    // 15 Channel Interrupt Enable Bit (R/W):
  2823F                             // 0 channel interrupt disabled
  2824F                             // 1 channel interrupt enabled
  2825F} ;
  2826F
  2827Funion MODE_REG
  2828F{
  2829F  Uint16 all ;
  2830F  struct MODE_BITS bit ;
  2831F} ;
  2832F//----------------------------------------------------
  2833F// Channel CONTROL register bit definitions:
  2834F
  2835Fstruct CONTROL_BITS
  2836F{                     // bits description
  2837F  Uint16 RUN : 1 ;
  2838F                 // 0 Run Bit (R=0/W=1)
  2839F  Uint16 HALT : 1 ;
  2840F                  // 1 Halt Bit (R=0/W=1)
  2841F  Uint16 SOFTRESET : 1 ;
  2842F                       // 2 Soft Reset Bit (R=0/W=1)
  2843F  Uint16 PERINTFRC : 1 ;
  2844F                       // 3 Interrupt Force Bit (R=0/W=1)
  2845F  Uint16 PERINTCLR : 1 ;
  2846F                       // 4 Interrupt Clear Bit (R=0/W=1)
  2847F  Uint16 SYNCFRC : 1 ;
  2848F                     // 5 Sync Force Bit (R=0/W=1)
  2849F  Uint16 SYNCCLR : 1 ;
  2850F                     // 6 Sync Clear Bit (R=0/W=1)
  2851F  Uint16 ERRCLR : 1 ;
  2852F                    // 7 Error Clear Bit (R=0/W=1)
  2853F  Uint16 PERINTFLG : 1 ;
  2854F                       // 8 Interrupt Flag Bit (R):
  2855F                             // 0 no interrupt pending
  2856F                             // 1 interrupt pending
  2857F  Uint16 SYNCFLG : 1 ;
  2858F                     // 9 Sync Flag Bit (R):
  2859F                             // 0 no sync pending
  2860F                             // 1 sync pending
  2861F  Uint16 SYNCERR : 1 ;
  2862F                     // 10 Sync Error Flag Bit (R):
  2863F                             // 0 no sync error
  2864F                             // 1 sync error detected
  2865F  Uint16 TRANSFERSTS : 1 ;
  2866F                         // 11 Transfer Status Bit (R):
  2867F                             // 0 no transfer in progress or pending
  2868F                             // 1 transfer in progress or pending
  2869F  Uint16 BURSTSTS : 1 ;
  2870F                      // 12 Burst Status Bit (R):
  2871F                             // 0 no burst in progress or pending
  2872F                             // 1 burst in progress or pending
  2873F  Uint16 RUNSTS : 1 ;
  2874F                    // 13 Run Status Bit (R):
  2875F                             // 0 channel not running or halted
  2876F                             // 1 channel running
  2877F  Uint16 OVRFLG : 1 ;
  2878F                    // 14 Overflow Flag Bit(R)
  2879F                             // 0 no overflow event
  2880F                             // 1 overflow event
  2881F  Uint16 rsvd1 : 1 ;
  2882F                   // 15 (R=0)
  2883F} ;
  2884F
  2885Funion CONTROL_REG
  2886F{
  2887F  Uint16 all ;
  2888F  struct CONTROL_BITS bit ;
  2889F} ;
  2890F//----------------------------------------------------
  2891F// DMACTRL register bit definitions:
  2892F
  2893Fstruct DMACTRL_BITS
  2894F{                     // bits description
  2895F  Uint16 HARDRESET : 1 ;
  2896F                       // 0 Hard Reset Bit (R=0/W=1)
  2897F  Uint16 PRIORITYRESET : 1 ;
  2898F                           // 1 Priority Reset Bit (R=0/W=1)
  2899F  Uint16 rsvd1 : 14 ;
  2900F                    // 15:2 (R=0:0)
  2901F} ;
  2902F
  2903Funion DMACTRL_REG
  2904F{
  2905F  Uint16 all ;
  2906F  struct DMACTRL_BITS bit ;
  2907F} ;
  2908F//----------------------------------------------------
  2909F// DEBUGCTRL register bit definitions:
  2910F
  2911Fstruct DEBUGCTRL_BITS
  2912F{                       // bits description
  2913F  Uint16 rsvd1 : 15 ;
  2914F                    // 14:0 (R=0:0)
  2915F  Uint16 FREE : 1 ;
  2916F                  // 15 Debug Mode Bit (R/W):
  2917F                             // 0 halt after current read-write operation
  2918F                             // 1 continue running
  2919F} ;
  2920F
  2921Funion DEBUGCTRL_REG
  2922F{
  2923F  Uint16 all ;
  2924F  struct DEBUGCTRL_BITS bit ;
  2925F} ;
  2926F//----------------------------------------------------
  2927F// PRIORITYCTRL1 register bit definitions:
  2928F
  2929Fstruct PRIORITYCTRL1_BITS
  2930F{                           // bits description
  2931F  Uint16 CH1PRIORITY : 1 ;
  2932F                         // 0 Ch1 Priority Bit (R/W):
  2933F                             // 0 same priority as all other channels
  2934F                             // 1 highest priority channel
  2935F  Uint16 rsvd1 : 15 ;
  2936F                    // 15:1 (R=0:0)
  2937F} ;
  2938F
  2939Funion PRIORITYCTRL1_REG
  2940F{
  2941F  Uint16 all ;
  2942F  struct PRIORITYCTRL1_BITS bit ;
  2943F} ;
  2944F//----------------------------------------------------
  2945F// PRIORITYSTAT register bit definitions:
  2946F
  2947Fstruct PRIORITYSTAT_BITS
  2948F{                          // bits description
  2949F  Uint16 ACTIVESTS : 3 ;
  2950F                       // 2:0 Active Channel Status Bits (R):
  2951F                              // 0,0,0 no channel active
  2952F                              // 0,0,1 Ch1 channel active
  2953F                              // 0,1,0 Ch2 channel active
  2954F                              // 0,1,1 Ch3 channel active
  2955F                              // 1,0,0 Ch4 channel active
  2956F                              // 1,0,1 Ch5 channel active
  2957F                              // 1,1,0 Ch6 channel active
  2958F  Uint16 rsvd1 : 1 ;
  2959F                   // 3 (R=0)
  2960F  Uint16 ACTIVESTS_SHADOW : 3 ;
  2961F                              // 6:4 Active Channel Status Shadow Bits (R):
  2962F                              // 0,0,0 no channel active and interrupted by Ch1
  2963F                              // 0,0,1 cannot occur
  2964F                              // 0,1,0 Ch2 was active and interrupted by Ch1
  2965F                              // 0,1,1 Ch3 was active and interrupted by Ch1
  2966F                              // 1,0,0 Ch4 was active and interrupted by Ch1
  2967F                              // 1,0,1 Ch5 was active and interrupted by Ch1
  2968F                              // 1,1,0 Ch6 was active and interrupted by Ch1
  2969F  Uint16 rsvd2 : 9 ;
  2970F                   // 15:7 (R=0:0)
  2971F} ;
  2972F
  2973Funion PRIORITYSTAT_REG
  2974F{
  2975F  Uint16 all ;
  2976F  struct PRIORITYSTAT_BITS bit ;
  2977F} ;
  2978F// Burst Size
  2979F
  2980Fstruct BURST_SIZE_BITS
  2981F{                        // bits description
  2982F  Uint16 BURSTSIZE : 5 ;
  2983F                       // 4:0 Burst transfer size
  2984F  Uint16 rsvd1 : 11 ;
  2985F                    // 15:5 reserved
  2986F} ;
  2987F
  2988Funion BURST_SIZE_REG
  2989F{
  2990F  Uint16 all ;
  2991F  struct BURST_SIZE_BITS bit ;
  2992F} ;
  2993F// Burst Count
  2994F
  2995Fstruct BURST_COUNT_BITS
  2996F{                         // bits description
  2997F  Uint16 BURSTCOUNT : 5 ;
  2998F                        // 4:0 Burst transfer size
  2999F  Uint16 rsvd1 : 11 ;
  3000F                    // 15:5 reserved
  3001F} ;
  3002F
  3003Funion BURST_COUNT_REG
  3004F{
  3005F  Uint16 all ;
  3006F  struct BURST_COUNT_BITS bit ;
  3007F} ;
  3008F//----------------------------------------------------
  3009F// DMA Channel Registers:
  3010F
  3011Fstruct CH_REGS
  3012F{
  3013F  union MODE_REG MODE ; // Mode Register
  3014F  union CONTROL_REG CONTROL ; // Control Register
  3015F  union BURST_SIZE_REG BURST_SIZE ; // Burst Size Register
  3016F  union BURST_COUNT_REG BURST_COUNT ; // Burst Count Register
  3017F  int16 SRC_BURST_STEP ; // Source Burst Step Register
  3018F  int16 DST_BURST_STEP ; // Destination Burst Step Register
  3019F  Uint16 TRANSFER_SIZE ; // Transfer Size Register
  3020F  Uint16 TRANSFER_COUNT ; // Transfer Count Register
  3021F  int16 SRC_TRANSFER_STEP ; // Source Transfer Step Register
  3022F  int16 DST_TRANSFER_STEP ; // Destination Transfer Step Register
  3023F  Uint16 SRC_WRAP_SIZE ; // Source Wrap Size Register
  3024F  Uint16 SRC_WRAP_COUNT ; // Source Wrap Count Register
  3025F  int16 SRC_WRAP_STEP ; // Source Wrap Step Register
  3026F  Uint16 DST_WRAP_SIZE ; // Destination Wrap Size Register
  3027F  Uint16 DST_WRAP_COUNT ; // Destination Wrap Count Register
  3028F  int16 DST_WRAP_STEP ; // Destination Wrap Step Register
  3029F  Uint32 SRC_BEG_ADDR_SHADOW ; // Source Begin Address Shadow Register
  3030F  Uint32 SRC_ADDR_SHADOW ; // Source Address Shadow Register
  3031F  Uint32 SRC_BEG_ADDR_ACTIVE ; // Source Begin Address Active Register
  3032F  Uint32 SRC_ADDR_ACTIVE ; // Source Address Active Register
  3033F  Uint32 DST_BEG_ADDR_SHADOW ; // Destination Begin Address Shadow Register
  3034F  Uint32 DST_ADDR_SHADOW ; // Destination Address Shadow Register
  3035F  Uint32 DST_BEG_ADDR_ACTIVE ; // Destination Begin Address Active Register
  3036F  Uint32 DST_ADDR_ACTIVE ; // Destination Address Active Register
  3037F} ;
  3038F//----------------------------------------------------
  3039F// DMA Registers:
  3040F
  3041Fstruct DMA_REGS
  3042F{
  3043F  union DMACTRL_REG DMACTRL ; // DMA Control Register
  3044F  union DEBUGCTRL_REG DEBUGCTRL ; // Debug Control Register
  3045F  Uint16 rsvd0 ; // reserved
  3046F  Uint16 rsvd1 ; //
  3047F  union PRIORITYCTRL1_REG PRIORITYCTRL1 ; // Priority Control 1 Register
  3048F  Uint16 rsvd2 ; //
  3049F  union PRIORITYSTAT_REG PRIORITYSTAT ; // Priority Status Register
  3050F  Uint16 rsvd3 [ 25 ] ;
  3051F                     //
  3052F  struct CH_REGS CH1 ; // DMA Channel 1 Registers
  3053F  struct CH_REGS CH2 ; // DMA Channel 2 Registers
  3054F  struct CH_REGS CH3 ; // DMA Channel 3 Registers
  3055F  struct CH_REGS CH4 ; // DMA Channel 4 Registers
  3056F  struct CH_REGS CH5 ; // DMA Channel 5 Registers
  3057F  struct CH_REGS CH6 ; // DMA Channel 6 Registers
  3058F} ;
  3059F//---------------------------------------------------------------------------
  3060F// External References & Function Declarations:
  3061F//
  3062F
  3063Fextern volatile struct DMA_REGS
  3064F  DmaRegs ;
  3065F       /* extern "C" */
  3066F       // end of DSP2833x_DMA_H definition
  3067F//===========================================================================
  3068F// End of file.
  3069F//===========================================================================
  3070F 
  3071F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DMA.h*/
  3072F/*   CLOSE_FILE Include File */
  3073F 
  3074F                // DMA Registers
  3075F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EPwm.h */
  3076F// TI File $Revision: /main/1 $
  3077F// Checkin $Date: August 18, 2006 13:52:10 $
  3078F//###########################################################################
  3079F//
  3080F// FILE: DSP2833x_EPwm.h
  3081F//
  3082F// TITLE: DSP2833x Enhanced PWM Module Register Bit Definitions.
  3083F//
  3084F//###########################################################################
  3085F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  3086F// $Release Date: August 4, 2009 $
  3087F//###########################################################################
  3088F#ifndef DSP2833x_EPWM_H
  3089F#define DSP2833x_EPWM_H
  3090F//----------------------------------------------------
  3091F// Time base control register bit definitions */
  3092F
  3093Fstruct TBCTL_BITS
  3094F{                   // bits description
  3095F  Uint16 CTRMODE : 2 ;
  3096F                     // 1:0 Counter Mode
  3097F  Uint16 PHSEN : 1 ;
  3098F                   // 2 Phase load enable
  3099F  Uint16 PRDLD : 1 ;
  3100F                   // 3 Active period load
  3101F  Uint16 SYNCOSEL : 2 ;
  3102F                      // 5:4 Sync output select
  3103F  Uint16 SWFSYNC : 1 ;
  3104F                     // 6 Software force sync pulse
  3105F  Uint16 HSPCLKDIV : 3 ;
  3106F                       // 9:7 High speed time pre-scale
  3107F  Uint16 CLKDIV : 3 ;
  3108F                    // 12:10 Timebase clock pre-scale
  3109F  Uint16 PHSDIR : 1 ;
  3110F                    // 13 Phase Direction
  3111F  Uint16 FREE_SOFT : 2 ;
  3112F                       // 15:14 Emulation mode
  3113F} ;
  3114F
  3115Funion TBCTL_REG
  3116F{
  3117F  Uint16 all ;
  3118F  struct TBCTL_BITS bit ;
  3119F} ;
  3120F//----------------------------------------------------
  3121F// Time base status register bit definitions */
  3122F
  3123Fstruct TBSTS_BITS
  3124F{                   // bits description
  3125F  Uint16 CTRDIR : 1 ;
  3126F                    // 0 Counter direction status
  3127F  Uint16 SYNCI : 1 ;
  3128F                   // 1 External input sync status
  3129F  Uint16 CTRMAX : 1 ;
  3130F                    // 2 Counter max latched status
  3131F  Uint16 rsvd1 : 13 ;
  3132F                    // 15:3 reserved
  3133F} ;
  3134F
  3135Funion TBSTS_REG
  3136F{
  3137F  Uint16 all ;
  3138F  struct TBSTS_BITS bit ;
  3139F} ;
  3140F//----------------------------------------------------
  3141F// Compare control register bit definitions */
  3142F
  3143Fstruct CMPCTL_BITS
  3144F{                    // bits description
  3145F  Uint16 LOADAMODE : 2 ;
  3146F                       // 0:1 Active compare A
  3147F  Uint16 LOADBMODE : 2 ;
  3148F                       // 3:2 Active compare B
  3149F  Uint16 SHDWAMODE : 1 ;
  3150F                       // 4 Compare A block operating mode
  3151F  Uint16 rsvd1 : 1 ;
  3152F                   // 5 reserved
  3153F  Uint16 SHDWBMODE : 1 ;
  3154F                       // 6 Compare B block operating mode
  3155F  Uint16 rsvd2 : 1 ;
  3156F                   // 7 reserved
  3157F  Uint16 SHDWAFULL : 1 ;
  3158F                       // 8 Compare A Shadow registers full Status
  3159F  Uint16 SHDWBFULL : 1 ;
  3160F                       // 9 Compare B Shadow registers full Status
  3161F  Uint16 rsvd3 : 6 ;
  3162F                   // 15:10 reserved
  3163F} ;
  3164F
  3165Funion CMPCTL_REG
  3166F{
  3167F  Uint16 all ;
  3168F  struct CMPCTL_BITS bit ;
  3169F} ;
  3170F//----------------------------------------------------
  3171F// Action qualifier register bit definitions */
  3172F
  3173Fstruct AQCTL_BITS
  3174F{                   // bits description
  3175F  Uint16 ZRO : 2 ;
  3176F                 // 1:0 Action Counter = Zero
  3177F  Uint16 PRD : 2 ;
  3178F                 // 3:2 Action Counter = Period
  3179F  Uint16 CAU : 2 ;
  3180F                 // 5:4 Action Counter = Compare A up
  3181F  Uint16 CAD : 2 ;
  3182F                 // 7:6 Action Counter = Compare A down
  3183F  Uint16 CBU : 2 ;
  3184F                 // 9:8 Action Counter = Compare B up
  3185F  Uint16 CBD : 2 ;
  3186F                 // 11:10 Action Counter = Compare B down
  3187F  Uint16 rsvd : 4 ;
  3188F                  // 15:12 reserved
  3189F} ;
  3190F
  3191Funion AQCTL_REG
  3192F{
  3193F  Uint16 all ;
  3194F  struct AQCTL_BITS bit ;
  3195F} ;
  3196F//----------------------------------------------------
  3197F// Action qualifier SW force register bit definitions */
  3198F
  3199Fstruct AQSFRC_BITS
  3200F{                    // bits description
  3201F  Uint16 ACTSFA : 2 ;
  3202F                    // 1:0 Action when One-time SW Force A invoked
  3203F  Uint16 OTSFA : 1 ;
  3204F                   // 2 One-time SW Force A output
  3205F  Uint16 ACTSFB : 2 ;
  3206F                    // 4:3 Action when One-time SW Force B invoked
  3207F  Uint16 OTSFB : 1 ;
  3208F                   // 5 One-time SW Force A output
  3209F  Uint16 RLDCSF : 2 ;
  3210F                    // 7:6 Reload from Shadow options
  3211F  Uint16 rsvd1 : 8 ;
  3212F                   // 15:8 reserved
  3213F} ;
  3214F
  3215Funion AQSFRC_REG
  3216F{
  3217F  Uint16 all ;
  3218F  struct AQSFRC_BITS bit ;
  3219F} ;
  3220F//----------------------------------------------------
  3221F// Action qualifier continuous SW force register bit definitions */
  3222F
  3223Fstruct AQCSFRC_BITS
  3224F{                     // bits description
  3225F  Uint16 CSFA : 2 ;
  3226F                  // 1:0 Continuous Software Force on output A
  3227F  Uint16 CSFB : 2 ;
  3228F                  // 3:2 Continuous Software Force on output B
  3229F  Uint16 rsvd1 : 12 ;
  3230F                    // 15:4 reserved
  3231F} ;
  3232F
  3233Funion AQCSFRC_REG
  3234F{
  3235F  Uint16 all ;
  3236F  struct AQCSFRC_BITS bit ;
  3237F} ;
  3238F// As of version 1.1
  3239F// Changed the MODE bit-field to OUT_MODE
  3240F// Added the bit-field IN_MODE
  3241F// This corresponds to changes in silicon as of F2833x devices
  3242F// Rev A silicon.
  3243F//----------------------------------------------------
  3244F// Dead-band generator control register bit definitions
  3245F
  3246Fstruct DBCTL_BITS
  3247F{                   // bits description
  3248F  Uint16 OUT_MODE : 2 ;  // 1:0 Dead Band Output Mode Control
  3249F  Uint16 POLSEL : 2 ;
  3250F                    // 3:2 Polarity Select Control
  3251F  Uint16 IN_MODE : 2 ;
  3252F                     // 5:4 Dead Band Input Select Mode Control
  3253F  Uint16 rsvd1 : 10 ;
  3254F                    // 15:4 reserved
  3255F} ;
  3256F
  3257Funion DBCTL_REG
  3258F{
  3259F  Uint16 all ;
  3260F  struct DBCTL_BITS bit ;
  3261F} ;
  3262F//----------------------------------------------------
  3263F// Trip zone select register bit definitions
  3264F
  3265Fstruct TZSEL_BITS
  3266F{                   // bits description
  3267F  Uint16 CBC1 : 1 ;
  3268F                  // 0 TZ1 CBC select
  3269F  Uint16 CBC2 : 1 ;
  3270F                  // 1 TZ2 CBC select
  3271F  Uint16 CBC3 : 1 ;
  3272F                  // 2 TZ3 CBC select
  3273F  Uint16 CBC4 : 1 ;
  3274F                  // 3 TZ4 CBC select
  3275F  Uint16 CBC5 : 1 ;
  3276F                  // 4 TZ5 CBC select
  3277F  Uint16 CBC6 : 1 ;
  3278F                  // 5 TZ6 CBC select
  3279F  Uint16 rsvd1 : 2 ;
  3280F                   // 7:6 reserved
  3281F  Uint16 OSHT1 : 1 ;
  3282F                   // 8 One-shot TZ1 select
  3283F  Uint16 OSHT2 : 1 ;
  3284F                   // 9 One-shot TZ2 select
  3285F  Uint16 OSHT3 : 1 ;
  3286F                   // 10 One-shot TZ3 select
  3287F  Uint16 OSHT4 : 1 ;
  3288F                   // 11 One-shot TZ4 select
  3289F  Uint16 OSHT5 : 1 ;
  3290F                   // 12 One-shot TZ5 select
  3291F  Uint16 OSHT6 : 1 ;
  3292F                   // 13 One-shot TZ6 select
  3293F  Uint16 rsvd2 : 2 ;
  3294F                   // 15:14 reserved
  3295F} ;
  3296F
  3297Funion TZSEL_REG
  3298F{
  3299F  Uint16 all ;
  3300F  struct TZSEL_BITS bit ;
  3301F} ;
  3302F//----------------------------------------------------
  3303F// Trip zone control register bit definitions */
  3304F
  3305Fstruct TZCTL_BITS
  3306F{                   // bits description
  3307F  Uint16 TZA : 2 ;
  3308F                 // 1:0 TZ1 to TZ6 Trip Action On EPWMxA
  3309F  Uint16 TZB : 2 ;
  3310F                 // 3:2 TZ1 to TZ6 Trip Action On EPWMxB
  3311F  Uint16 rsvd : 12 ;
  3312F                   // 15:4 reserved
  3313F} ;
  3314F
  3315Funion TZCTL_REG
  3316F{
  3317F  Uint16 all ;
  3318F  struct TZCTL_BITS bit ;
  3319F} ;
  3320F//----------------------------------------------------
  3321F// Trip zone control register bit definitions */
  3322F
  3323Fstruct TZEINT_BITS
  3324F{                    // bits description
  3325F  Uint16 rsvd1 : 1 ;
  3326F                   // 0 reserved
  3327F  Uint16 CBC : 1 ;
  3328F                 // 1 Trip Zones Cycle By Cycle Int Enable
  3329F  Uint16 OST : 1 ;
  3330F                 // 2 Trip Zones One Shot Int Enable
  3331F  Uint16 rsvd2 : 13 ;
  3332F                    // 15:3 reserved
  3333F} ;
  3334F
  3335Funion TZEINT_REG
  3336F{
  3337F  Uint16 all ;
  3338F  struct TZEINT_BITS bit ;
  3339F} ;
  3340F//----------------------------------------------------
  3341F// Trip zone flag register bit definitions */
  3342F
  3343Fstruct TZFLG_BITS
  3344F{                   // bits description
  3345F  Uint16 INT : 1 ;
  3346F                 // 0 Global status
  3347F  Uint16 CBC : 1 ;
  3348F                 // 1 Trip Zones Cycle By Cycle Int
  3349F  Uint16 OST : 1 ;
  3350F                 // 2 Trip Zones One Shot Int
  3351F  Uint16 rsvd2 : 13 ;
  3352F                    // 15:3 reserved
  3353F} ;
  3354F
  3355Funion TZFLG_REG
  3356F{
  3357F  Uint16 all ;
  3358F  struct TZFLG_BITS bit ;
  3359F} ;
  3360F//----------------------------------------------------
  3361F// Trip zone flag clear register bit definitions */
  3362F
  3363Fstruct TZCLR_BITS
  3364F{                   // bits description
  3365F  Uint16 INT : 1 ;
  3366F                 // 0 Global status
  3367F  Uint16 CBC : 1 ;
  3368F                 // 1 Trip Zones Cycle By Cycle Int
  3369F  Uint16 OST : 1 ;
  3370F                 // 2 Trip Zones One Shot Int
  3371F  Uint16 rsvd2 : 13 ;
  3372F                    // 15:3 reserved
  3373F} ;
  3374F
  3375Funion TZCLR_REG
  3376F{
  3377F  Uint16 all ;
  3378F  struct TZCLR_BITS bit ;
  3379F} ;
  3380F//----------------------------------------------------
  3381F// Trip zone flag force register bit definitions */
  3382F
  3383Fstruct TZFRC_BITS
  3384F{                   // bits description
  3385F  Uint16 rsvd1 : 1 ;
  3386F                   // 0 reserved
  3387F  Uint16 CBC : 1 ;
  3388F                 // 1 Trip Zones Cycle By Cycle Int
  3389F  Uint16 OST : 1 ;
  3390F                 // 2 Trip Zones One Shot Int
  3391F  Uint16 rsvd2 : 13 ;
  3392F                    // 15:3 reserved
  3393F} ;
  3394F
  3395Funion TZFRC_REG
  3396F{
  3397F  Uint16 all ;
  3398F  struct TZFRC_BITS bit ;
  3399F} ;
  3400F//----------------------------------------------------
  3401F// Event trigger select register bit definitions */
  3402F
  3403Fstruct ETSEL_BITS
  3404F{                   // bits description
  3405F  Uint16 INTSEL : 3 ;
  3406F                    // 2:0 EPWMxINTn Select
  3407F  Uint16 INTEN : 1 ;
  3408F                   // 3 EPWMxINTn Enable
  3409F  Uint16 rsvd1 : 4 ;
  3410F                   // 7:4 reserved
  3411F  Uint16 SOCASEL : 3 ;
  3412F                     // 10:8 Start of conversion A Select
  3413F  Uint16 SOCAEN : 1 ;
  3414F                    // 11 Start of conversion A Enable
  3415F  Uint16 SOCBSEL : 3 ;
  3416F                     // 14:12 Start of conversion B Select
  3417F  Uint16 SOCBEN : 1 ;
  3418F                    // 15 Start of conversion B Enable
  3419F} ;
  3420F
  3421Funion ETSEL_REG
  3422F{
  3423F  Uint16 all ;
  3424F  struct ETSEL_BITS bit ;
  3425F} ;
  3426F//----------------------------------------------------
  3427F// Event trigger pre-scale register bit definitions */
  3428F
  3429Fstruct ETPS_BITS
  3430F{                  // bits description
  3431F  Uint16 INTPRD : 2 ;
  3432F                    // 1:0 EPWMxINTn Period Select
  3433F  Uint16 INTCNT : 2 ;
  3434F                    // 3:2 EPWMxINTn Counter Register
  3435F  Uint16 rsvd1 : 4 ;
  3436F                   // 7:4 reserved
  3437F  Uint16 SOCAPRD : 2 ;
  3438F                     // 9:8 EPWMxSOCA Period Select
  3439F  Uint16 SOCACNT : 2 ;
  3440F                     // 11:10 EPWMxSOCA Counter Register
  3441F  Uint16 SOCBPRD : 2 ;
  3442F                     // 13:12 EPWMxSOCB Period Select
  3443F  Uint16 SOCBCNT : 2 ;
  3444F                     // 15:14 EPWMxSOCB Counter Register
  3445F} ;
  3446F
  3447Funion ETPS_REG
  3448F{
  3449F  Uint16 all ;
  3450F  struct ETPS_BITS bit ;
  3451F} ;
  3452F//----------------------------------------------------
  3453F// Event trigger Flag register bit definitions */
  3454F
  3455Fstruct ETFLG_BITS
  3456F{                   // bits description
  3457F  Uint16 INT : 1 ;
  3458F                 // 0   EPWMxINTn Flag
  3459F  Uint16 rsvd1 : 1 ;
  3460F                   // 1 reserved
  3461F  Uint16 SOCA : 1 ;
  3462F                  // 2  EPWMxSOCA Flag
  3463F  Uint16 SOCB : 1 ;
  3464F                  // 3  EPWMxSOCB Flag
  3465F  Uint16 rsvd2 : 12 ;
  3466F                    // 15:4     reserved
  3467F} ;
  3468F
  3469Funion ETFLG_REG
  3470F{
  3471F  Uint16 all ;
  3472F  struct ETFLG_BITS bit ;
  3473F} ;
  3474F//----------------------------------------------------
  3475F// Event trigger Clear register bit definitions */
  3476F
  3477Fstruct ETCLR_BITS
  3478F{                   // bits description
  3479F  Uint16 INT : 1 ;
  3480F                 // 0   EPWMxINTn Clear
  3481F  Uint16 rsvd1 : 1 ;
  3482F                   // 1 reserved
  3483F  Uint16 SOCA : 1 ;
  3484F                  // 2  EPWMxSOCA Clear
  3485F  Uint16 SOCB : 1 ;
  3486F                  // 3  EPWMxSOCB Clear
  3487F  Uint16 rsvd2 : 12 ;
  3488F                    // 15:4     reserved
  3489F} ;
  3490F
  3491Funion ETCLR_REG
  3492F{
  3493F  Uint16 all ;
  3494F  struct ETCLR_BITS bit ;
  3495F} ;
  3496F//----------------------------------------------------
  3497F// Event trigger Force register bit definitions */
  3498F
  3499Fstruct ETFRC_BITS
  3500F{                   // bits description
  3501F  Uint16 INT : 1 ;
  3502F                 // 0   EPWMxINTn Force
  3503F  Uint16 rsvd1 : 1 ;
  3504F                   // 1 reserved
  3505F  Uint16 SOCA : 1 ;
  3506F                  // 2  EPWMxSOCA Force
  3507F  Uint16 SOCB : 1 ;
  3508F                  // 3  EPWMxSOCB Force
  3509F  Uint16 rsvd2 : 12 ;
  3510F                    // 15:4     reserved
  3511F} ;
  3512F
  3513Funion ETFRC_REG
  3514F{
  3515F  Uint16 all ;
  3516F  struct ETFRC_BITS bit ;
  3517F} ;
  3518F//----------------------------------------------------
  3519F// PWM chopper control register bit definitions */
  3520F
  3521Fstruct PCCTL_BITS
  3522F{                   // bits description
  3523F  Uint16 CHPEN : 1 ;
  3524F                   // 0 PWM chopping enable
  3525F  Uint16 OSHTWTH : 4 ;
  3526F                     // 4:1 One-shot pulse width
  3527F  Uint16 CHPFREQ : 3 ;
  3528F                     // 7:5 Chopping clock frequency
  3529F  Uint16 CHPDUTY : 3 ;
  3530F                     // 10:8 Chopping clock Duty cycle
  3531F  Uint16 rsvd1 : 5 ;
  3532F                   // 15:11 reserved
  3533F} ;
  3534F
  3535Funion PCCTL_REG
  3536F{
  3537F  Uint16 all ;
  3538F  struct PCCTL_BITS bit ;
  3539F} ;
  3540F
  3541Fstruct HRCNFG_BITS
  3542F{                       // bits description
  3543F  Uint16 EDGMODE : 2 ;  // 1:0 Edge Mode select Bits
  3544F  Uint16 CTLMODE : 1 ;  // 2 Control mode Select Bit
  3545F  Uint16 HRLOAD : 1 ;   // 3 Shadow mode Select Bit
  3546F  Uint16 rsvd1 : 12 ;   // 15:4 reserved
  3547F} ;
  3548F
  3549Funion HRCNFG_REG
  3550F{
  3551F  Uint16 all ;
  3552F  struct HRCNFG_BITS bit ;
  3553F} ;
  3554F
  3555Fstruct TBPHS_HRPWM_REG
  3556F{                               // bits description
  3557F  Uint16 TBPHSHR ;      // 15:0 Extension register for HRPWM Phase (8 bits)
  3558F  Uint16 TBPHS ; // 31:16 Phase offset register
  3559F} ;
  3560F
  3561Funion TBPHS_HRPWM_GROUP
  3562F{
  3563F  Uint32 all ;
  3564F  struct TBPHS_HRPWM_REG half ;
  3565F} ;
  3566F
  3567Fstruct CMPA_HRPWM_REG
  3568F{                               // bits description
  3569F  Uint16 CMPAHR ;        // 15:0 Extension register for HRPWM compare (8 bits)
  3570F  Uint16 CMPA ; // 31:16 Compare A reg
  3571F} ;
  3572F
  3573Funion CMPA_HRPWM_GROUP
  3574F{
  3575F  Uint32 all ;
  3576F  struct CMPA_HRPWM_REG half ;
  3577F} ;
  3578F
  3579Fstruct EPWM_REGS
  3580F{
  3581F  union TBCTL_REG TBCTL ; //
  3582F  union TBSTS_REG TBSTS ; //
  3583F  union TBPHS_HRPWM_GROUP TBPHS ; // Union of TBPHS:TBPHSHR
  3584F  Uint16 TBCTR ; // Counter
  3585F  Uint16 TBPRD ; // Period register set
  3586F  Uint16 rsvd1 ; //
  3587F  union CMPCTL_REG CMPCTL ; // Compare control
  3588F  union CMPA_HRPWM_GROUP CMPA ; // Union of CMPA:CMPAHR
  3589F  Uint16 CMPB ; // Compare B reg
  3590F  union AQCTL_REG AQCTLA ; // Action qual output A
  3591F  union AQCTL_REG AQCTLB ; // Action qual output B
  3592F  union AQSFRC_REG AQSFRC ; // Action qual SW force
  3593F  union AQCSFRC_REG AQCSFRC ; // Action qualifier continuous SW force
  3594F  union DBCTL_REG DBCTL ; // Dead-band control
  3595F  Uint16 DBRED ; // Dead-band rising edge delay
  3596F  Uint16 DBFED ; // Dead-band falling edge delay
  3597F  union TZSEL_REG TZSEL ; // Trip zone select
  3598F  Uint16 rsvd2 ;
  3599F  union TZCTL_REG TZCTL ; // Trip zone control
  3600F  union TZEINT_REG TZEINT ; // Trip zone interrupt enable
  3601F  union TZFLG_REG TZFLG ; // Trip zone interrupt flags
  3602F  union TZCLR_REG TZCLR ; // Trip zone clear
  3603F  union TZFRC_REG TZFRC ;       // Trip zone force interrupt
  3604F  union ETSEL_REG ETSEL ; // Event trigger selection
  3605F  union ETPS_REG ETPS ; // Event trigger pre-scaler
  3606F  union ETFLG_REG ETFLG ; // Event trigger flags
  3607F  union ETCLR_REG ETCLR ; // Event trigger clear
  3608F  union ETFRC_REG ETFRC ; // Event trigger force
  3609F  union PCCTL_REG PCCTL ; // PWM chopper control
  3610F  Uint16 rsvd3 ; //
  3611F  union HRCNFG_REG HRCNFG ; // HRPWM Config Reg
  3612F} ;
  3613F//---------------------------------------------------------------------------
  3614F// External References & Function Declarations:
  3615F//
  3616F
  3617Fextern volatile struct EPWM_REGS
  3618F  EPwm1Regs ;
  3619F
  3620Fextern volatile struct EPWM_REGS
  3621F  EPwm2Regs ;
  3622F
  3623Fextern volatile struct EPWM_REGS
  3624F  EPwm3Regs ;
  3625F
  3626Fextern volatile struct EPWM_REGS
  3627F  EPwm4Regs ;
  3628F
  3629Fextern volatile struct EPWM_REGS
  3630F  EPwm5Regs ;
  3631F
  3632Fextern volatile struct EPWM_REGS
  3633F  EPwm6Regs ;
  3634F       /* extern "C" */
  3635F       // end of DSP2833x_EPWM_H definition
  3636F//===========================================================================
  3637F// End of file.
  3638F//===========================================================================
  3639F 
  3640F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EPwm.h*/
  3641F/*   CLOSE_FILE Include File */
  3642F 
  3643F               // Enhanced PWM
  3644F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EQep.h */
  3645F// TI File $Revision: /main/1 $
  3646F// Checkin $Date: August 18, 2006 13:52:13 $
  3647F//###########################################################################
  3648F//
  3649F// FILE: DSP2833x_EQep.h
  3650F//
  3651F// TITLE: DSP2833x Enhanced Quadrature Encoder Pulse Module
  3652F// Register Bit Definitions.
  3653F//
  3654F//###########################################################################
  3655F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  3656F// $Release Date: August 4, 2009 $
  3657F//###########################################################################
  3658F#ifndef DSP2833x_EQEP_H
  3659F#define DSP2833x_EQEP_H
  3660F//----------------------------------------------------
  3661F// Capture decoder control register bit definitions */
  3662F
  3663Fstruct QDECCTL_BITS
  3664F{                     // bits description
  3665F  Uint16 rsvd1 : 5 ;
  3666F                   // 4:0 reserved
  3667F  Uint16 QSP : 1 ;
  3668F                 // 5 QEPS input polarity
  3669F  Uint16 QIP : 1 ;
  3670F                 // 6 QEPI input polarity
  3671F  Uint16 QBP : 1 ;
  3672F                 // 7 QEPB input polarity
  3673F  Uint16 QAP : 1 ;
  3674F                 // 8 QEPA input polarity
  3675F  Uint16 IGATE : 1 ;
  3676F                   // 9 Index pulse gating option
  3677F  Uint16 SWAP : 1 ;
  3678F                  // 10 CLK/DIR signal source for Position Counter
  3679F  Uint16 XCR : 1 ;
  3680F                 // 11 External clock rate
  3681F  Uint16 SPSEL : 1 ;
  3682F                   // 12 Sync output pin select
  3683F  Uint16 SOEN : 1 ;
  3684F                  // 13 Enable position compare sync
  3685F  Uint16 QSRC : 2 ;
  3686F                  // 15:14 Position counter source
  3687F} ;
  3688F
  3689Funion QDECCTL_REG
  3690F{
  3691F  Uint16 all ;
  3692F  struct QDECCTL_BITS bit ;
  3693F} ;
  3694F//----------------------------------------------------
  3695F// QEP control register bit definitions */
  3696F
  3697Fstruct QEPCTL_BITS
  3698F{                    // bits description
  3699F  Uint16 WDE : 1 ;
  3700F                 // 0 QEP watchdog enable
  3701F  Uint16 UTE : 1 ;
  3702F                 // 1 QEP unit timer enable
  3703F  Uint16 QCLM : 1 ;
  3704F                  // 2 QEP capture latch mode
  3705F  Uint16 QPEN : 1 ;
  3706F                  // 3 Quadrature position counter enable
  3707F  Uint16 IEL : 2 ;
  3708F                 // 5:4 Index event latch
  3709F  Uint16 SEL : 1 ;
  3710F                 // 6 Strobe event latch
  3711F  Uint16 SWI : 1 ;
  3712F                 // 7 Software init position counter
  3713F  Uint16 IEI : 2 ;
  3714F                 // 9:8 Index event init of position count
  3715F  Uint16 SEI : 2 ;
  3716F                 // 11:10 Strobe event init
  3717F  Uint16 PCRM : 2 ;
  3718F                  // 13:12 Position counter reset
  3719F  Uint16 FREE_SOFT : 2 ;
  3720F                       // 15:14 Emulation mode
  3721F} ;
  3722F
  3723Funion QEPCTL_REG
  3724F{
  3725F  Uint16 all ;
  3726F  struct QEPCTL_BITS bit ;
  3727F} ;
  3728F//----------------------------------------------------
  3729F// Quadrature capture control register bit definitions */
  3730F
  3731Fstruct QCAPCTL_BITS
  3732F{                     // bits description
  3733F  Uint16 UPPS : 4 ;
  3734F                  // 3:0 Unit position pre-scale
  3735F  Uint16 CCPS : 3 ;
  3736F                  // 6:4 QEP capture timer pre-scale
  3737F  Uint16 rsvd1 : 8 ;
  3738F                   // 14:7 reserved
  3739F  Uint16 CEN : 1 ;
  3740F                 // 15 Enable QEP capture
  3741F} ;
  3742F
  3743Funion QCAPCTL_REG
  3744F{
  3745F  Uint16 all ;
  3746F  struct QCAPCTL_BITS bit ;
  3747F} ;
  3748F//----------------------------------------------------
  3749F// Position compare control register bit definitions */
  3750F
  3751Fstruct QPOSCTL_BITS
  3752F{                     // bits description
  3753F  Uint16 PCSPW : 12 ;
  3754F                    // 11:0 Position compare sync pulse width
  3755F  Uint16 PCE : 1 ;
  3756F                 // 12 Position compare enable/disable
  3757F  Uint16 PCPOL : 1 ;
  3758F                   // 13 Polarity of sync output
  3759F  Uint16 PCLOAD : 1 ;
  3760F                    // 14 Position compare of shadow load
  3761F  Uint16 PCSHDW : 1 ;
  3762F                    // 15 Position compare shadow enable
  3763F} ;
  3764F
  3765Funion QPOSCTL_REG
  3766F{
  3767F  Uint16 all ;
  3768F  struct QPOSCTL_BITS bit ;
  3769F} ;
  3770F//----------------------------------------------------
  3771F// QEP interrupt control register bit definitions */
  3772F
  3773Fstruct QEINT_BITS
  3774F{                   // bits description
  3775F  Uint16 rsvd1 : 1 ;
  3776F                   // 0 reserved
  3777F  Uint16 PCE : 1 ;
  3778F                 // 1 Position counter error
  3779F  Uint16 QPE : 1 ;
  3780F                 // 2 Quadrature phase error
  3781F  Uint16 QDC : 1 ;
  3782F                 // 3 Quadrature dir change
  3783F  Uint16 WTO : 1 ;
  3784F                 // 4 Watchdog timeout
  3785F  Uint16 PCU : 1 ;
  3786F                 // 5 Position counter underflow
  3787F  Uint16 PCO : 1 ;
  3788F                 // 6 Position counter overflow
  3789F  Uint16 PCR : 1 ;
  3790F                 // 7 Position compare ready
  3791F  Uint16 PCM : 1 ;
  3792F                 // 8 Position compare match
  3793F  Uint16 SEL : 1 ;
  3794F                 // 9 Strobe event latch
  3795F  Uint16 IEL : 1 ;
  3796F                 // 10 Event latch
  3797F  Uint16 UTO : 1 ;
  3798F                 // 11 Unit timeout
  3799F  Uint16 rsvd2 : 4 ;
  3800F                   // 15:12 reserved
  3801F} ;
  3802F
  3803Funion QEINT_REG
  3804F{
  3805F  Uint16 all ;
  3806F  struct QEINT_BITS bit ;
  3807F} ;
  3808F//----------------------------------------------------
  3809F// QEP interrupt status register bit definitions */
  3810F
  3811Fstruct QFLG_BITS
  3812F{                  // bits description
  3813F  Uint16 INT : 1 ;
  3814F                 // 0 Global interrupt
  3815F  Uint16 PCE : 1 ;
  3816F                 // 1 Position counter error
  3817F  Uint16 PHE : 1 ;
  3818F                 // 2 Quadrature phase error
  3819F  Uint16 QDC : 1 ;
  3820F                 // 3 Quadrature dir change
  3821F  Uint16 WTO : 1 ;
  3822F                 // 4 Watchdog timeout
  3823F  Uint16 PCU : 1 ;
  3824F                 // 5 Position counter underflow
  3825F  Uint16 PCO : 1 ;
  3826F                 // 6 Position counter overflow
  3827F  Uint16 PCR : 1 ;
  3828F                 // 7 Position compare ready
  3829F  Uint16 PCM : 1 ;
  3830F                 // 8 Position compare match
  3831F  Uint16 SEL : 1 ;
  3832F                 // 9 Strobe event latch
  3833F  Uint16 IEL : 1 ;
  3834F                 // 10 Event latch
  3835F  Uint16 UTO : 1 ;
  3836F                 // 11 Unit timeout
  3837F  Uint16 rsvd2 : 4 ;
  3838F                   // 15:12 reserved
  3839F} ;
  3840F
  3841Funion QFLG_REG
  3842F{
  3843F  Uint16 all ;
  3844F  struct QFLG_BITS bit ;
  3845F} ;
  3846F//----------------------------------------------------
  3847F// QEP interrupt force register bit definitions */
  3848F
  3849Fstruct QFRC_BITS
  3850F{                  // bits description
  3851F  Uint16 reserved : 1 ;
  3852F                      // 0 Reserved
  3853F  Uint16 PCE : 1 ;
  3854F                 // 1 Position counter error
  3855F  Uint16 PHE : 1 ;
  3856F                 // 2 Quadrature phase error
  3857F  Uint16 QDC : 1 ;
  3858F                 // 3 Quadrature dir change
  3859F  Uint16 WTO : 1 ;
  3860F                 // 4 Watchdog timeout
  3861F  Uint16 PCU : 1 ;
  3862F                 // 5 Position counter underflow
  3863F  Uint16 PCO : 1 ;
  3864F                 // 6 Position counter overflow
  3865F  Uint16 PCR : 1 ;
  3866F                 // 7 Position compare ready
  3867F  Uint16 PCM : 1 ;
  3868F                 // 8 Position compare match
  3869F  Uint16 SEL : 1 ;
  3870F                 // 9 Strobe event latch
  3871F  Uint16 IEL : 1 ;
  3872F                 // 10 Event latch
  3873F  Uint16 UTO : 1 ;
  3874F                 // 11 Unit timeout
  3875F  Uint16 rsvd2 : 4 ;
  3876F                   // 15:12 reserved
  3877F} ;
  3878F
  3879Funion QFRC_REG
  3880F{
  3881F  Uint16 all ;
  3882F  struct QFRC_BITS bit ;
  3883F} ;
  3884F// V1.1 Added UPEVNT (bit 7) This reflects changes
  3885F// made as of F2833x Rev A devices
  3886F//----------------------------------------------------
  3887F// QEP status register bit definitions */
  3888F
  3889Fstruct QEPSTS_BITS
  3890F{                    // bits description
  3891F  Uint16 PCEF : 1 ;
  3892F                  // 0 Position counter error
  3893F  Uint16 FIMF : 1 ;
  3894F                  // 1 First index marker
  3895F  Uint16 CDEF : 1 ;
  3896F                  // 2 Capture direction error
  3897F  Uint16 COEF : 1 ;
  3898F                  // 3 Capture overflow error
  3899F  Uint16 QDLF : 1 ;
  3900F                  // 4 QEP direction latch
  3901F  Uint16 QDF : 1 ;
  3902F                 // 5 Quadrature direction
  3903F  Uint16 FIDF : 1 ;
  3904F                  // 6 Direction on first index marker
  3905F  Uint16 UPEVNT : 1 ;
  3906F                    // 7 Unit position event flag
  3907F  Uint16 rsvd1 : 8 ;
  3908F                   // 15:8 reserved
  3909F} ;
  3910F
  3911Funion QEPSTS_REG
  3912F{
  3913F  Uint16 all ;
  3914F  struct QEPSTS_BITS bit ;
  3915F} ;
  3916F//----------------------------------------------------
  3917F
  3918Fstruct EQEP_REGS
  3919F{
  3920F  Uint32 QPOSCNT ; // Position counter
  3921F  Uint32 QPOSINIT ; // Position counter init
  3922F  Uint32 QPOSMAX ; // Maximum position count
  3923F  Uint32 QPOSCMP ; // Position compare
  3924F  Uint32 QPOSILAT ; // Index position latch
  3925F  Uint32 QPOSSLAT ; // Strobe position latch
  3926F  Uint32 QPOSLAT ; // Position latch
  3927F  Uint32 QUTMR ; // Unit timer
  3928F  Uint32 QUPRD ; // Unit period
  3929F  Uint16 QWDTMR ; // QEP watchdog timer
  3930F  Uint16 QWDPRD ; // QEP watchdog period
  3931F  union QDECCTL_REG QDECCTL ; // Quadrature decoder control
  3932F  union QEPCTL_REG QEPCTL ; // QEP control
  3933F  union QCAPCTL_REG QCAPCTL ; // Quadrature capture control
  3934F  union QPOSCTL_REG QPOSCTL ; // Position compare control
  3935F  union QEINT_REG QEINT ; // QEP interrupt control
  3936F  union QFLG_REG QFLG ; // QEP interrupt flag
  3937F  union QFLG_REG QCLR ; // QEP interrupt clear
  3938F  union QFRC_REG QFRC ; // QEP interrupt force
  3939F  union QEPSTS_REG QEPSTS ; // QEP status
  3940F  Uint16 QCTMR ; // QEP capture timer
  3941F  Uint16 QCPRD ; // QEP capture period
  3942F  Uint16 QCTMRLAT ; // QEP capture latch
  3943F  Uint16 QCPRDLAT ; // QEP capture period latch
  3944F  Uint16 rsvd1 [ 30 ] ;
  3945F                     // reserved
  3946F} ;
  3947F//---------------------------------------------------------------------------
  3948F// GPI/O External References & Function Declarations:
  3949F//
  3950F
  3951Fextern volatile struct EQEP_REGS
  3952F  EQep1Regs ;
  3953F
  3954Fextern volatile struct EQEP_REGS
  3955F  EQep2Regs ;
  3956F       /* extern "C" */
  3957F       // end of DSP2833x_EQEP_H definition
  3958F//===========================================================================
  3959F// End of file.
  3960F//===========================================================================
  3961F 
  3962F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EQep.h*/
  3963F/*   CLOSE_FILE Include File */
  3964F 
  3965F               // Enhanced QEP
  3966F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Gpio.h */
  3967F// TI File $Revision: /main/4 $
  3968F// Checkin $Date: November 15, 2007 09:58:53 $
  3969F//###########################################################################
  3970F//
  3971F// FILE: DSP2833x_Gpio.h
  3972F//
  3973F// TITLE: DSP2833x General Purpose I/O Definitions.
  3974F//
  3975F//###########################################################################
  3976F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  3977F// $Release Date: August 4, 2009 $
  3978F//###########################################################################
  3979F#ifndef DSP2833x_GPIO_H
  3980F#define DSP2833x_GPIO_H
  3981F//----------------------------------------------------
  3982F// GPIO A control register bit definitions */
  3983F
  3984Ftypedef
  3985Fstruct GPACTRL_BITS
  3986F{                             // bits description
  3987F  Uint16 QUALPRD0 : 8 ;
  3988F                      // 7:0 Qual period
  3989F  Uint16 QUALPRD1 : 8 ;
  3990F                      // 15:8 Qual period
  3991F  Uint16 QUALPRD2 : 8 ;
  3992F                      // 23:16 Qual period
  3993F  Uint16 QUALPRD3 : 8 ;
  3994F                      // 31:24 Qual period
  3995F} GPACTRL_BITS ;
  3996F
  3997Ftypedef
  3998Funion GPACTRL_REG
  3999F{
  4000F  Uint32 all ;
  4001F  struct GPACTRL_BITS bit ;
  4002F} GPACTRL_REG ;
  4003F//----------------------------------------------------
  4004F// GPIO B control register bit definitions */
  4005F
  4006Ftypedef
  4007Fstruct GPBCTRL_BITS
  4008F{                             // bits description
  4009F  Uint16 QUALPRD0 : 8 ;
  4010F                      // 7:0 Qual period
  4011F  Uint16 QUALPRD1 : 8 ;
  4012F                      // 15:8 Qual period
  4013F  Uint16 QUALPRD2 : 8 ;
  4014F                      // 23:16 Qual period
  4015F  Uint16 QUALPRD3 : 8 ;
  4016F                      // 31:24
  4017F} GPBCTRL_BITS ;
  4018F
  4019Ftypedef
  4020Funion GPBCTRL_REG
  4021F{
  4022F  Uint32 all ;
  4023F  struct GPBCTRL_BITS bit ;
  4024F} GPBCTRL_REG ;
  4025F//----------------------------------------------------
  4026F// GPIO A Qual/MUX select register bit definitions */
  4027F
  4028Ftypedef
  4029Fstruct GPA1_BITS
  4030F{                          // bits description
  4031F  Uint16 GPIO0 : 2 ;
  4032F                   // 1:0 GPIO0
  4033F  Uint16 GPIO1 : 2 ;
  4034F                   // 3:2 GPIO1
  4035F  Uint16 GPIO2 : 2 ;
  4036F                   // 5:4 GPIO2
  4037F  Uint16 GPIO3 : 2 ;
  4038F                   // 7:6 GPIO3
  4039F  Uint16 GPIO4 : 2 ;
  4040F                   // 9:8 GPIO4
  4041F  Uint16 GPIO5 : 2 ;
  4042F                   // 11:10 GPIO5
  4043F  Uint16 GPIO6 : 2 ;
  4044F                   // 13:12 GPIO6
  4045F  Uint16 GPIO7 : 2 ;
  4046F                   // 15:14 GPIO7
  4047F  Uint16 GPIO8 : 2 ;
  4048F                   // 17:16 GPIO8
  4049F  Uint16 GPIO9 : 2 ;
  4050F                   // 19:18 GPIO9
  4051F  Uint16 GPIO10 : 2 ;
  4052F                    // 21:20 GPIO10
  4053F  Uint16 GPIO11 : 2 ;
  4054F                    // 23:22 GPIO11
  4055F  Uint16 GPIO12 : 2 ;
  4056F                    // 25:24 GPIO12
  4057F  Uint16 GPIO13 : 2 ;
  4058F                    // 27:26 GPIO13
  4059F  Uint16 GPIO14 : 2 ;
  4060F                    // 29:28 GPIO14
  4061F  Uint16 GPIO15 : 2 ;
  4062F                    // 31:30 GPIO15
  4063F} GPA1_BITS ;
  4064F
  4065Ftypedef
  4066Fstruct GPA2_BITS
  4067F{                          // bits description
  4068F  Uint16 GPIO16 : 2 ;
  4069F                    // 1:0 GPIO16
  4070F  Uint16 GPIO17 : 2 ;
  4071F                    // 3:2 GPIO17
  4072F  Uint16 GPIO18 : 2 ;
  4073F                    // 5:4 GPIO18
  4074F  Uint16 GPIO19 : 2 ;
  4075F                    // 7:6 GPIO19
  4076F  Uint16 GPIO20 : 2 ;
  4077F                    // 9:8 GPIO20
  4078F  Uint16 GPIO21 : 2 ;
  4079F                    // 11:10 GPIO21
  4080F  Uint16 GPIO22 : 2 ;
  4081F                    // 13:12 GPIO22
  4082F  Uint16 GPIO23 : 2 ;
  4083F                    // 15:14 GPIO23
  4084F  Uint16 GPIO24 : 2 ;
  4085F                    // 17:16 GPIO24
  4086F  Uint16 GPIO25 : 2 ;
  4087F                    // 19:18 GPIO25
  4088F  Uint16 GPIO26 : 2 ;
  4089F                    // 21:20 GPIO26
  4090F  Uint16 GPIO27 : 2 ;
  4091F                    // 23:22 GPIO27
  4092F  Uint16 GPIO28 : 2 ;
  4093F                    // 25:24 GPIO28
  4094F  Uint16 GPIO29 : 2 ;
  4095F                    // 27:26 GPIO29
  4096F  Uint16 GPIO30 : 2 ;
  4097F                    // 29:28 GPIO30
  4098F  Uint16 GPIO31 : 2 ;
  4099F                    // 31:30 GPIO31
  4100F} GPA2_BITS ;
  4101F
  4102Ftypedef
  4103Fstruct GPB1_BITS
  4104F{                          // bits description
  4105F  Uint16 GPIO32 : 2 ;
  4106F                    // 1:0 GPIO32
  4107F  Uint16 GPIO33 : 2 ;
  4108F                    // 3:2 GPIO33
  4109F  Uint16 GPIO34 : 2 ;
  4110F                    // 5:4 GPIO34
  4111F  Uint16 GPIO35 : 2 ;
  4112F                    // 7:6 GPIO35
  4113F  Uint16 GPIO36 : 2 ;
  4114F                    // 9:8 GPIO36
  4115F  Uint16 GPIO37 : 2 ;
  4116F                    // 11:10 GPIO37
  4117F  Uint16 GPIO38 : 2 ;
  4118F                    // 13:12 GPIO38
  4119F  Uint16 GPIO39 : 2 ;
  4120F                    // 15:14 GPIO39
  4121F  Uint16 GPIO40 : 2 ;
  4122F                    // 17:16 GPIO40
  4123F  Uint16 GPIO41 : 2 ;
  4124F                    // 19:16 GPIO41
  4125F  Uint16 GPIO42 : 2 ;
  4126F                    // 21:20 GPIO42
  4127F  Uint16 GPIO43 : 2 ;
  4128F                    // 23:22 GPIO43
  4129F  Uint16 GPIO44 : 2 ;
  4130F                    // 25:24 GPIO44
  4131F  Uint16 GPIO45 : 2 ;
  4132F                    // 27:26 GPIO45
  4133F  Uint16 GPIO46 : 2 ;
  4134F                    // 29:28 GPIO46
  4135F  Uint16 GPIO47 : 2 ;
  4136F                    // 31:30 GPIO47
  4137F} GPB1_BITS ;
  4138F
  4139Ftypedef
  4140Fstruct GPB2_BITS
  4141F{                          // bits description
  4142F  Uint16 GPIO48 : 2 ;
  4143F                    // 1:0 GPIO48
  4144F  Uint16 GPIO49 : 2 ;
  4145F                    // 3:2 GPIO49
  4146F  Uint16 GPIO50 : 2 ;
  4147F                    // 5:4 GPIO50
  4148F  Uint16 GPIO51 : 2 ;
  4149F                    // 7:6 GPIO51
  4150F  Uint16 GPIO52 : 2 ;
  4151F                    // 9:8 GPIO52
  4152F  Uint16 GPIO53 : 2 ;
  4153F                    // 11:10 GPIO53
  4154F  Uint16 GPIO54 : 2 ;
  4155F                    // 13:12 GPIO54
  4156F  Uint16 GPIO55 : 2 ;
  4157F                    // 15:14 GPIO55
  4158F  Uint16 GPIO56 : 2 ;
  4159F                    // 17:16 GPIO56
  4160F  Uint16 GPIO57 : 2 ;
  4161F                    // 19:18 GPIO57
  4162F  Uint16 GPIO58 : 2 ;
  4163F                    // 21:20 GPIO58
  4164F  Uint16 GPIO59 : 2 ;
  4165F                    // 23:22 GPIO59
  4166F  Uint16 GPIO60 : 2 ;
  4167F                    // 25:24 GPIO60
  4168F  Uint16 GPIO61 : 2 ;
  4169F                    // 27:26 GPIO61
  4170F  Uint16 GPIO62 : 2 ;
  4171F                    // 29:28 GPIO62
  4172F  Uint16 GPIO63 : 2 ;
  4173F                    // 31:30 GPIO63
  4174F} GPB2_BITS ;
  4175F
  4176Ftypedef
  4177Fstruct GPC1_BITS
  4178F{                          // bits description
  4179F  Uint16 GPIO64 : 2 ;
  4180F                    // 1:0 GPIO64
  4181F  Uint16 GPIO65 : 2 ;
  4182F                    // 3:2 GPIO65
  4183F  Uint16 GPIO66 : 2 ;
  4184F                    // 5:4 GPIO66
  4185F  Uint16 GPIO67 : 2 ;
  4186F                    // 7:6 GPIO67
  4187F  Uint16 GPIO68 : 2 ;
  4188F                    // 9:8 GPIO68
  4189F  Uint16 GPIO69 : 2 ;
  4190F                    // 11:10 GPIO69
  4191F  Uint16 GPIO70 : 2 ;
  4192F                    // 13:12 GPIO70
  4193F  Uint16 GPIO71 : 2 ;
  4194F                    // 15:14 GPIO71
  4195F  Uint16 GPIO72 : 2 ;
  4196F                    // 17:16 GPIO72
  4197F  Uint16 GPIO73 : 2 ;
  4198F                    // 19:18 GPIO73
  4199F  Uint16 GPIO74 : 2 ;
  4200F                    // 21:20 GPIO74
  4201F  Uint16 GPIO75 : 2 ;
  4202F                    // 23:22 GPIO75
  4203F  Uint16 GPIO76 : 2 ;
  4204F                    // 25:24 GPIO76
  4205F  Uint16 GPIO77 : 2 ;
  4206F                    // 27:26 GPIO77
  4207F  Uint16 GPIO78 : 2 ;
  4208F                    // 29:28 GPIO78
  4209F  Uint16 GPIO79 : 2 ;
  4210F                    // 31:30 GPIO79
  4211F} GPC1_BITS ;
  4212F
  4213Ftypedef
  4214Fstruct GPC2_BITS
  4215F{                          // bits description
  4216F  Uint16 GPIO80 : 2 ;
  4217F                    // 1:0 GPIO80
  4218F  Uint16 GPIO81 : 2 ;
  4219F                    // 3:2 GPIO81
  4220F  Uint16 GPIO82 : 2 ;
  4221F                    // 5:4 GPIO82
  4222F  Uint16 GPIO83 : 2 ;
  4223F                    // 7:6 GPIO83
  4224F  Uint16 GPIO84 : 2 ;
  4225F                    // 9:8 GPIO84
  4226F  Uint16 GPIO85 : 2 ;
  4227F                    // 11:10 GPIO85
  4228F  Uint16 GPIO86 : 2 ;
  4229F                    // 13:12 GPIO86
  4230F  Uint16 GPIO87 : 2 ;
  4231F                    // 15:14 GPIO87
  4232F  Uint16 rsvd : 16 ;
  4233F                   // 31:16 reserved
  4234F} GPC2_BITS ;
  4235F
  4236Ftypedef
  4237Funion GPA1_REG
  4238F{
  4239F  Uint32 all ;
  4240F  struct GPA1_BITS bit ;
  4241F} GPA1_REG ;
  4242F
  4243Ftypedef
  4244Funion GPA2_REG
  4245F{
  4246F  Uint32 all ;
  4247F  struct GPA2_BITS bit ;
  4248F} GPA2_REG ;
  4249F
  4250Ftypedef
  4251Funion GPB1_REG
  4252F{
  4253F  Uint32 all ;
  4254F  struct GPB1_BITS bit ;
  4255F} GPB1_REG ;
  4256F
  4257Ftypedef
  4258Funion GPB2_REG
  4259F{
  4260F  Uint32 all ;
  4261F  struct GPB2_BITS bit ;
  4262F} GPB2_REG ;
  4263F
  4264Ftypedef
  4265Funion GPC1_REG
  4266F{
  4267F  Uint32 all ;
  4268F  struct GPC1_BITS bit ;
  4269F} GPC1_REG ;
  4270F
  4271Ftypedef
  4272Funion GPC2_REG
  4273F{
  4274F  Uint32 all ;
  4275F  struct GPC2_BITS bit ;
  4276F} GPC2_REG ;
  4277F//----------------------------------------------------
  4278F// GPIO A DIR/TOGGLE/SET/CLEAR register bit definitions */
  4279F
  4280Ftypedef
  4281Fstruct GPADAT_BITS
  4282F{                            // bits description
  4283F  Uint16 GPIO0 : 1 ;
  4284F                   // 0 GPIO0
  4285F  Uint16 GPIO1 : 1 ;
  4286F                   // 1 GPIO1
  4287F  Uint16 GPIO2 : 1 ;
  4288F                   // 2 GPIO2
  4289F  Uint16 GPIO3 : 1 ;
  4290F                   // 3 GPIO3
  4291F  Uint16 GPIO4 : 1 ;
  4292F                   // 4 GPIO4
  4293F  Uint16 GPIO5 : 1 ;
  4294F                   // 5 GPIO5
  4295F  Uint16 GPIO6 : 1 ;
  4296F                   // 6 GPIO6
  4297F  Uint16 GPIO7 : 1 ;
  4298F                   // 7 GPIO7
  4299F  Uint16 GPIO8 : 1 ;
  4300F                   // 8 GPIO8
  4301F  Uint16 GPIO9 : 1 ;
  4302F                   // 9 GPIO9
  4303F  Uint16 GPIO10 : 1 ;
  4304F                    // 10 GPIO10
  4305F  Uint16 GPIO11 : 1 ;
  4306F                    // 11 GPIO11
  4307F  Uint16 GPIO12 : 1 ;
  4308F                    // 12 GPIO12
  4309F  Uint16 GPIO13 : 1 ;
  4310F                    // 13 GPIO13
  4311F  Uint16 GPIO14 : 1 ;
  4312F                    // 14 GPIO14
  4313F  Uint16 GPIO15 : 1 ;
  4314F                    // 15 GPIO15
  4315F  Uint16 GPIO16 : 1 ;
  4316F                    // 16 GPIO16
  4317F  Uint16 GPIO17 : 1 ;
  4318F                    // 17 GPIO17
  4319F  Uint16 GPIO18 : 1 ;
  4320F                    // 18 GPIO18
  4321F  Uint16 GPIO19 : 1 ;
  4322F                    // 19 GPIO19
  4323F  Uint16 GPIO20 : 1 ;
  4324F                    // 20 GPIO20
  4325F  Uint16 GPIO21 : 1 ;
  4326F                    // 21 GPIO21
  4327F  Uint16 GPIO22 : 1 ;
  4328F                    // 22 GPIO22
  4329F  Uint16 GPIO23 : 1 ;
  4330F                    // 23 GPIO23
  4331F  Uint16 GPIO24 : 1 ;
  4332F                    // 24 GPIO24
  4333F  Uint16 GPIO25 : 1 ;
  4334F                    // 25 GPIO25
  4335F  Uint16 GPIO26 : 1 ;
  4336F                    // 26 GPIO26
  4337F  Uint16 GPIO27 : 1 ;
  4338F                    // 27 GPIO27
  4339F  Uint16 GPIO28 : 1 ;
  4340F                    // 28 GPIO28
  4341F  Uint16 GPIO29 : 1 ;
  4342F                    // 29 GPIO29
  4343F  Uint16 GPIO30 : 1 ;
  4344F                    // 30 GPIO30
  4345F  Uint16 GPIO31 : 1 ;
  4346F                    // 31 GPIO31
  4347F} GPADAT_BITS ;
  4348F
  4349Ftypedef
  4350Fstruct GPBDAT_BITS
  4351F{                            // bits description
  4352F  Uint16 GPIO32 : 1 ;
  4353F                    // 0 GPIO32
  4354F  Uint16 GPIO33 : 1 ;
  4355F                    // 1 GPIO33
  4356F  Uint16 GPIO34 : 1 ;
  4357F                    // 2 GPIO34
  4358F  Uint16 GPIO35 : 1 ;
  4359F                    // 3 GPIO35
  4360F  Uint16 GPIO36 : 1 ;
  4361F                    // 4 GPIO36
  4362F  Uint16 GPIO37 : 1 ;
  4363F                    // 5 GPIO37
  4364F  Uint16 GPIO38 : 1 ;
  4365F                    // 6 GPIO38
  4366F  Uint16 GPIO39 : 1 ;
  4367F                    // 7 GPIO39
  4368F  Uint16 GPIO40 : 1 ;
  4369F                    // 8 GPIO40
  4370F  Uint16 GPIO41 : 1 ;
  4371F                    // 9 GPIO41
  4372F  Uint16 GPIO42 : 1 ;
  4373F                    // 10 GPIO42
  4374F  Uint16 GPIO43 : 1 ;
  4375F                    // 11 GPIO43
  4376F  Uint16 GPIO44 : 1 ;
  4377F                    // 12 GPIO44
  4378F  Uint16 GPIO45 : 1 ;
  4379F                    // 13 GPIO45
  4380F  Uint16 GPIO46 : 1 ;
  4381F                    // 14 GPIO46
  4382F  Uint16 GPIO47 : 1 ;
  4383F                    // 15 GPIO47
  4384F  Uint16 GPIO48 : 1 ;
  4385F                    // 16 GPIO48
  4386F  Uint16 GPIO49 : 1 ;
  4387F                    // 17 GPIO49
  4388F  Uint16 GPIO50 : 1 ;
  4389F                    // 18 GPIO50
  4390F  Uint16 GPIO51 : 1 ;
  4391F                    // 19 GPIO51
  4392F  Uint16 GPIO52 : 1 ;
  4393F                    // 20 GPIO52
  4394F  Uint16 GPIO53 : 1 ;
  4395F                    // 21 GPIO53
  4396F  Uint16 GPIO54 : 1 ;
  4397F                    // 22 GPIO54
  4398F  Uint16 GPIO55 : 1 ;
  4399F                    // 23 GPIO55
  4400F  Uint16 GPIO56 : 1 ;
  4401F                    // 24 GPIO56
  4402F  Uint16 GPIO57 : 1 ;
  4403F                    // 25 GPIO57
  4404F  Uint16 GPIO58 : 1 ;
  4405F                    // 26 GPIO58
  4406F  Uint16 GPIO59 : 1 ;
  4407F                    // 27 GPIO59
  4408F  Uint16 GPIO60 : 1 ;
  4409F                    // 28 GPIO60
  4410F  Uint16 GPIO61 : 1 ;
  4411F                    // 29 GPIO61
  4412F  Uint16 GPIO62 : 1 ;
  4413F                    // 30 GPIO62
  4414F  Uint16 GPIO63 : 1 ;
  4415F                    // 31 GPIO63
  4416F} GPBDAT_BITS ;
  4417F
  4418Ftypedef
  4419Fstruct GPCDAT_BITS
  4420F{                            // bits description
  4421F  Uint16 GPIO64 : 1 ;
  4422F                    // 0 GPIO64
  4423F  Uint16 GPIO65 : 1 ;
  4424F                    // 1 GPIO65
  4425F  Uint16 GPIO66 : 1 ;
  4426F                    // 2 GPIO66
  4427F  Uint16 GPIO67 : 1 ;
  4428F                    // 3 GPIO67
  4429F  Uint16 GPIO68 : 1 ;
  4430F                    // 4 GPIO68
  4431F  Uint16 GPIO69 : 1 ;
  4432F                    // 5 GPIO69
  4433F  Uint16 GPIO70 : 1 ;
  4434F                    // 6 GPIO70
  4435F  Uint16 GPIO71 : 1 ;
  4436F                    // 7 GPIO71
  4437F  Uint16 GPIO72 : 1 ;
  4438F                    // 8 GPIO72
  4439F  Uint16 GPIO73 : 1 ;
  4440F                    // 9 GPIO73
  4441F  Uint16 GPIO74 : 1 ;
  4442F                    // 10 GPIO74
  4443F  Uint16 GPIO75 : 1 ;
  4444F                    // 11 GPIO75
  4445F  Uint16 GPIO76 : 1 ;
  4446F                    // 12 GPIO76
  4447F  Uint16 GPIO77 : 1 ;
  4448F                    // 13 GPIO77
  4449F  Uint16 GPIO78 : 1 ;
  4450F                    // 14 GPIO78
  4451F  Uint16 GPIO79 : 1 ;
  4452F                    // 15 GPIO79
  4453F  Uint16 GPIO80 : 1 ;
  4454F                    // 16 GPIO80
  4455F  Uint16 GPIO81 : 1 ;
  4456F                    // 17 GPIO81
  4457F  Uint16 GPIO82 : 1 ;
  4458F                    // 18 GPIO82
  4459F  Uint16 GPIO83 : 1 ;
  4460F                    // 19 GPIO83
  4461F  Uint16 GPIO84 : 1 ;
  4462F                    // 20 GPIO84
  4463F  Uint16 GPIO85 : 1 ;
  4464F                    // 21 GPIO85
  4465F  Uint16 GPIO86 : 1 ;
  4466F                    // 22 GPIO86
  4467F  Uint16 GPIO87 : 1 ;
  4468F                    // 23 GPIO87
  4469F  Uint16 rsvd1 : 8 ;
  4470F                   // 31:24 reserved
  4471F} GPCDAT_BITS ;
  4472F
  4473Ftypedef
  4474Funion GPADAT_REG
  4475F{
  4476F  Uint32 all ;
  4477F  struct GPADAT_BITS bit ;
  4478F} GPADAT_REG ;
  4479F
  4480Ftypedef
  4481Funion GPBDAT_REG
  4482F{
  4483F  Uint32 all ;
  4484F  struct GPBDAT_BITS bit ;
  4485F} GPBDAT_REG ;
  4486F
  4487Ftypedef
  4488Funion GPCDAT_REG
  4489F{
  4490F  Uint32 all ;
  4491F  struct GPCDAT_BITS bit ;
  4492F} GPCDAT_REG ;
  4493F//----------------------------------------------------
  4494F// GPIO Xint1/XINT2/XNMI select register bit definitions */
  4495F
  4496Ftypedef
  4497Fstruct GPIOXINT_BITS
  4498F{                              // bits description
  4499F  Uint16 GPIOSEL : 5 ;// 4:0 Select GPIO interrupt input source
  4500F  Uint16 rsvd1 : 11 ;// 15:5 reserved
  4501F} GPIOXINT_BITS ;
  4502F
  4503Ftypedef
  4504Funion GPIOXINT_REG
  4505F{
  4506F  Uint16 all ;
  4507F  struct GPIOXINT_BITS bit ;
  4508F} GPIOXINT_REG ;
  4509F
  4510Ftypedef
  4511Fstruct GPIO_CTRL_REGS
  4512F{
  4513F  union GPACTRL_REG GPACTRL ; // GPIO A Control Register (GPIO0 to 31)
  4514F  union GPA1_REG GPAQSEL1 ; // GPIO A Qualifier Select 1 Register (GPIO0 to 15)
  4515F  union GPA2_REG GPAQSEL2 ; // GPIO A Qualifier Select 2 Register (GPIO16 to 31)
  4516F  union GPA1_REG GPAMUX1 ; // GPIO A Mux 1 Register (GPIO0 to 15)
  4517F  union GPA2_REG GPAMUX2 ; // GPIO A Mux 2 Register (GPIO16 to 31)
  4518F  union GPADAT_REG GPADIR ; // GPIO A Direction Register (GPIO0 to 31)
  4519F  union GPADAT_REG GPAPUD ; // GPIO A Pull Up Disable Register (GPIO0 to 31)
  4520F  Uint32 rsvd1 ;
  4521F  union GPBCTRL_REG GPBCTRL ; // GPIO B Control Register (GPIO32 to 63)
  4522F  union GPB1_REG GPBQSEL1 ; // GPIO B Qualifier Select 1 Register (GPIO32 to 47)
  4523F  union GPB2_REG GPBQSEL2 ; // GPIO B Qualifier Select 2 Register (GPIO48 to 63)
  4524F  union GPB1_REG GPBMUX1 ; // GPIO B Mux 1 Register (GPIO32 to 47)
  4525F  union GPB2_REG GPBMUX2 ; // GPIO B Mux 2 Register (GPIO48 to 63)
  4526F  union GPBDAT_REG GPBDIR ; // GPIO B Direction Register (GPIO32 to 63)
  4527F  union GPBDAT_REG GPBPUD ; // GPIO B Pull Up Disable Register (GPIO32 to 63)
  4528F  Uint16 rsvd2 [ 8 ] ;
  4529F  union GPC1_REG GPCMUX1 ; // GPIO C Mux 1 Register (GPIO64 to 79)
  4530F  union GPC2_REG GPCMUX2 ; // GPIO C Mux 2 Register (GPIO80 to 95)
  4531F  union GPCDAT_REG GPCDIR ; // GPIO C Direction Register (GPIO64 to 95)
  4532F  union GPCDAT_REG GPCPUD ; // GPIO C Pull Up Disable Register (GPIO64 to 95)
  4533F} GPIO_CTRL_REGS ;
  4534F
  4535Ftypedef
  4536Fstruct GPIO_DATA_REGS
  4537F{
  4538F  union GPADAT_REG GPADAT ; // GPIO Data Register (GPIO0 to 31)
  4539F  union GPADAT_REG GPASET ; // GPIO Data Set Register (GPIO0 to 31)
  4540F  union GPADAT_REG GPACLEAR ; // GPIO Data Clear Register (GPIO0 to 31)
  4541F  union GPADAT_REG GPATOGGLE ; // GPIO Data Toggle Register (GPIO0 to 31)
  4542F  union GPBDAT_REG GPBDAT ; // GPIO Data Register (GPIO32 to 63)
  4543F  union GPBDAT_REG GPBSET ; // GPIO Data Set Register (GPIO32 to 63)
  4544F  union GPBDAT_REG GPBCLEAR ; // GPIO Data Clear Register (GPIO32 to 63)
  4545F  union GPBDAT_REG GPBTOGGLE ; // GPIO Data Toggle Register (GPIO32 to 63)
  4546F  union GPCDAT_REG GPCDAT ; // GPIO Data Register (GPIO64 to 95)
  4547F  union GPCDAT_REG GPCSET ; // GPIO Data Set Register (GPIO64 to 95)
  4548F  union GPCDAT_REG GPCCLEAR ; // GPIO Data Clear Register (GPIO64 to 95)
  4549F  union GPCDAT_REG GPCTOGGLE ; // GPIO Data Toggle Register (GPIO64 to 95)
  4550F  Uint16 rsvd1 [ 8 ] ;
  4551F} GPIO_DATA_REGS ;
  4552F
  4553Ftypedef
  4554Fstruct GPIO_INT_REGS
  4555F{
  4556F  union GPIOXINT_REG GPIOXINT1SEL ; // XINT1 GPIO Input Selection
  4557F  union GPIOXINT_REG GPIOXINT2SEL ; // XINT2 GPIO Input Selection
  4558F  union GPIOXINT_REG GPIOXNMISEL ; // XNMI_Xint13 GPIO Input Selection
  4559F  union GPIOXINT_REG GPIOXINT3SEL ; // XINT3 GPIO Input Selection
  4560F  union GPIOXINT_REG GPIOXINT4SEL ; // XINT4 GPIO Input Selection
  4561F  union GPIOXINT_REG GPIOXINT5SEL ; // XINT5 GPIO Input Selection
  4562F  union GPIOXINT_REG GPIOXINT6SEL ; // XINT6 GPIO Input Selection
  4563F  union GPIOXINT_REG GPIOXINT7SEL ; // XINT7 GPIO Input Selection
  4564F  union GPADAT_REG GPIOLPMSEL ; // Low power modes GP I/O input select
  4565F} GPIO_INT_REGS ;
  4566F//---------------------------------------------------------------------------
  4567F// GPI/O External References & Function Declarations:
  4568F//
  4569F
  4570Fextern volatile struct GPIO_CTRL_REGS
  4571F  GpioCtrlRegs ;
  4572F
  4573Fextern volatile struct GPIO_DATA_REGS
  4574F  GpioDataRegs ;
  4575F
  4576Fextern volatile struct GPIO_INT_REGS
  4577F  GpioIntRegs ;
  4578F       // end of DSP2833x_GPIO_H definition
  4579F//===========================================================================
  4580F// End of file.
  4581F//===========================================================================
  4582F 
  4583F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Gpio.h*/
  4584F/*   CLOSE_FILE Include File */
  4585F 
  4586F               // General Purpose I/O Registers
  4587F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_I2c.h */
  4588F// TI File $Revision: /main/2 $
  4589F// Checkin $Date: March 22, 2007 10:40:22 $
  4590F//###########################################################################
  4591F//
  4592F// FILE: DSP2833x_I2c.h
  4593F//
  4594F// TITLE: DSP2833x Enhanced Quadrature Encoder Pulse Module
  4595F// Register Bit Definitions.
  4596F//
  4597F//###########################################################################
  4598F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  4599F// $Release Date: August 4, 2009 $
  4600F//###########################################################################
  4601F#ifndef DSP2833x_I2C_H
  4602F#define DSP2833x_I2C_H
  4603F//----------------------------------------------------
  4604F// I2C interrupt vector register bit definitions */
  4605F
  4606Fstruct I2CISRC_BITS
  4607F{                     // bits description
  4608F  Uint16 INTCODE : 3 ;
  4609F                     // 2:0 Interrupt code
  4610F  Uint16 rsvd1 : 13 ;
  4611F                    // 15:3 reserved
  4612F} ;
  4613F
  4614Funion I2CISRC_REG
  4615F{
  4616F  Uint16 all ;
  4617F  struct I2CISRC_BITS bit ;
  4618F} ;
  4619F//----------------------------------------------------
  4620F// I2C interrupt mask register bit definitions */
  4621F
  4622Fstruct I2CIER_BITS
  4623F{                    // bits description
  4624F  Uint16 ARBL : 1 ;
  4625F                  // 0 Arbitration lost interrupt
  4626F  Uint16 NACK : 1 ;
  4627F                  // 1 No ack interrupt
  4628F  Uint16 ARDY : 1 ;
  4629F                  // 2 Register access ready interrupt
  4630F  Uint16 RRDY : 1 ;
  4631F                  // 3 Recieve data ready interrupt
  4632F  Uint16 XRDY : 1 ;
  4633F                  // 4 Transmit data ready interrupt
  4634F  Uint16 SCD : 1 ;
  4635F                 // 5 Stop condition detection
  4636F  Uint16 AAS : 1 ;
  4637F                 // 6 Address as slave
  4638F  Uint16 rsvd : 9 ;
  4639F                  // 15:7 reserved
  4640F} ;
  4641F
  4642Funion I2CIER_REG
  4643F{
  4644F  Uint16 all ;
  4645F  struct I2CIER_BITS bit ;
  4646F} ;
  4647F//----------------------------------------------------
  4648F// I2C status register bit definitions */
  4649F
  4650Fstruct I2CSTR_BITS
  4651F{                    // bits description
  4652F  Uint16 ARBL : 1 ;
  4653F                  // 0 Arbitration lost interrupt
  4654F  Uint16 NACK : 1 ;
  4655F                  // 1 No ack interrupt
  4656F  Uint16 ARDY : 1 ;
  4657F                  // 2 Register access ready interrupt
  4658F  Uint16 RRDY : 1 ;
  4659F                  // 3 Recieve data ready interrupt
  4660F  Uint16 XRDY : 1 ;
  4661F                  // 4 Transmit data ready interrupt
  4662F  Uint16 SCD : 1 ;
  4663F                 // 5 Stop condition detection
  4664F  Uint16 rsvd1 : 2 ;
  4665F                   // 7:6 reserved
  4666F  Uint16 AD0 : 1 ;
  4667F                 // 8 Address Zero
  4668F  Uint16 AAS : 1 ;
  4669F                 // 9 Address as slave
  4670F  Uint16 XSMT : 1 ;
  4671F                  // 10 XMIT shift empty
  4672F  Uint16 RSFULL : 1 ;
  4673F                    // 11 Recieve shift full
  4674F  Uint16 BB : 1 ;
  4675F                // 12 Bus busy
  4676F  Uint16 NACKSNT : 1 ;
  4677F                     // 13 A no ack sent
  4678F  Uint16 SDIR : 1 ;
  4679F                  // 14 Slave direction
  4680F  Uint16 rsvd2 : 1 ;
  4681F                   // 15 reserved
  4682F} ;
  4683F
  4684Funion I2CSTR_REG
  4685F{
  4686F  Uint16 all ;
  4687F  struct I2CSTR_BITS bit ;
  4688F} ;
  4689F//----------------------------------------------------
  4690F// I2C mode control register bit definitions */
  4691F
  4692Fstruct I2CMDR_BITS
  4693F{                    // bits description
  4694F  Uint16 BC : 3 ;
  4695F                // 2:0 Bit count
  4696F  Uint16 FDF : 1 ;
  4697F                 // 3 Free data format
  4698F  Uint16 STB : 1 ;
  4699F                 // 4 Start byte
  4700F  Uint16 IRS : 1 ;
  4701F                 // 5 I2C Reset not
  4702F  Uint16 DLB : 1 ;
  4703F                 // 6 Digital loopback
  4704F  Uint16 RM : 1 ;
  4705F                // 7 Repeat mode
  4706F  Uint16 XA : 1 ;
  4707F                // 8 Expand address
  4708F  Uint16 TRX : 1 ;
  4709F                 // 9 Transmitter/reciever
  4710F  Uint16 MST : 1 ;
  4711F                 // 10 Master/slave
  4712F  Uint16 STP : 1 ;
  4713F                 // 11 Stop condition
  4714F  Uint16 rsvd1 : 1 ;
  4715F                   // 12 reserved
  4716F  Uint16 STT : 1 ;
  4717F                 // 13 Start condition
  4718F  Uint16 FREE : 1 ;
  4719F                  // 14 Emulation mode
  4720F  Uint16 NACKMOD : 1 ;
  4721F                     // 15 No Ack mode
  4722F} ;
  4723F
  4724Funion I2CMDR_REG
  4725F{
  4726F  Uint16 all ;
  4727F  struct I2CMDR_BITS bit ;
  4728F} ;
  4729F//----------------------------------------------------
  4730F// I2C pre-scaler register bit definitions */
  4731F
  4732Fstruct I2CPSC_BITS
  4733F{                    // bits description
  4734F  Uint16 IPSC : 8 ;
  4735F                  // 7:0 pre-scaler
  4736F  Uint16 rsvd1 : 8 ;
  4737F                   // 15:8 reserved
  4738F} ;
  4739F
  4740Funion I2CPSC_REG
  4741F{
  4742F  Uint16 all ;
  4743F  struct I2CPSC_BITS bit ;
  4744F} ;
  4745F//----------------------------------------------------
  4746F// TX FIFO control register bit definitions */
  4747F
  4748Fstruct I2CFFTX_BITS
  4749F{                     // bits description
  4750F  Uint16 TXFFIL : 5 ;
  4751F                    // 4:0 FIFO interrupt level
  4752F  Uint16 TXFFIENA : 1 ;
  4753F                      // 5 FIFO interrupt enable/disable
  4754F  Uint16 TXFFINTCLR : 1 ;
  4755F                        // 6 FIFO clear
  4756F  Uint16 TXFFINT : 1 ;
  4757F                     // 7 FIFO interrupt flag
  4758F  Uint16 TXFFST : 5 ;
  4759F                    // 12:8 FIFO level status
  4760F  Uint16 TXFFRST : 1 ;
  4761F                     // 13 FIFO reset
  4762F  Uint16 I2CFFEN : 1 ;
  4763F                     // 14 enable/disable TX & RX FIFOs
  4764F  Uint16 rsvd1 : 1 ;
  4765F                   // 15 reserved
  4766F} ;
  4767F
  4768Funion I2CFFTX_REG
  4769F{
  4770F  Uint16 all ;
  4771F  struct I2CFFTX_BITS bit ;
  4772F} ;
  4773F//----------------------------------------------------
  4774F// RX FIFO control register bit definitions */
  4775F
  4776Fstruct I2CFFRX_BITS
  4777F{                     // bits description
  4778F  Uint16 RXFFIL : 5 ;
  4779F                    // 4:0 FIFO interrupt level
  4780F  Uint16 RXFFIENA : 1 ;
  4781F                      // 5 FIFO interrupt enable/disable
  4782F  Uint16 RXFFINTCLR : 1 ;
  4783F                        // 6 FIFO clear
  4784F  Uint16 RXFFINT : 1 ;
  4785F                     // 7 FIFO interrupt flag
  4786F  Uint16 RXFFST : 5 ;
  4787F                    // 12:8 FIFO level
  4788F  Uint16 RXFFRST : 1 ;
  4789F                     // 13 FIFO reset
  4790F  Uint16 rsvd1 : 2 ;
  4791F                   // 15:14 reserved
  4792F} ;
  4793F
  4794Funion I2CFFRX_REG
  4795F{
  4796F  Uint16 all ;
  4797F  struct I2CFFRX_BITS bit ;
  4798F} ;
  4799F//----------------------------------------------------
  4800F
  4801Fstruct I2C_REGS
  4802F{
  4803F  Uint16 I2COAR ; // Own address register
  4804F  union I2CIER_REG I2CIER ; // Interrupt enable
  4805F  union I2CSTR_REG I2CSTR ; // Interrupt status
  4806F  Uint16 I2CCLKL ; // Clock divider low
  4807F  Uint16 I2CCLKH ; // Clock divider high
  4808F  Uint16 I2CCNT ; // Data count
  4809F  Uint16 I2CDRR ; // Data recieve
  4810F  Uint16 I2CSAR ; // Slave address
  4811F  Uint16 I2CDXR ; // Data transmit
  4812F  union I2CMDR_REG I2CMDR ; // Mode
  4813F  union I2CISRC_REG I2CISRC ; // Interrupt source
  4814F  Uint16 rsvd1 ; // reserved
  4815F  union I2CPSC_REG I2CPSC ; // Pre-scaler
  4816F  Uint16 rsvd2 [ 19 ] ;
  4817F                     // reserved
  4818F  union I2CFFTX_REG I2CFFTX ; // Transmit FIFO
  4819F  union I2CFFRX_REG I2CFFRX ; // Recieve FIFO
  4820F} ;
  4821F//---------------------------------------------------------------------------
  4822F// External References & Function Declarations:
  4823F//
  4824F
  4825Fextern volatile struct I2C_REGS
  4826F  I2caRegs ;
  4827F       /* extern "C" */
  4828F       // end of DSP2833x_I2C_H definition
  4829F//===========================================================================
  4830F// End of file.
  4831F//===========================================================================
  4832F 
  4833F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_I2c.h*/
  4834F/*   CLOSE_FILE Include File */
  4835F 
  4836F                // I2C Registers
  4837F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_McBSP.h */
  4838F// TI File $Revision: /main/5 $
  4839F// Checkin $Date: May 14, 2008 16:30:31 $
  4840F//###########################################################################
  4841F//
  4842F// FILE: DSP2833x_Mcbsp.h
  4843F//
  4844F// TITLE: DSP2833x Device McBSP Register Definitions.
  4845F//
  4846F//###########################################################################
  4847F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  4848F// $Release Date: August 4, 2009 $
  4849F//###########################################################################
  4850F#ifndef DSP2833x_MCBSP_H
  4851F#define DSP2833x_MCBSP_H
  4852F//---------------------------------------------------------------------------
  4853F// McBSP Individual Register Bit Definitions:
  4854F//
  4855F// McBSP DRR2 register bit definitions:
  4856F
  4857Fstruct DRR2_BITS
  4858F{                  // bit description
  4859F  Uint16 HWLB : 8 ;
  4860F                  // 16:23 High word low byte
  4861F  Uint16 HWHB : 8 ;
  4862F                  // 24:31 High word high byte
  4863F} ;
  4864F
  4865Funion DRR2_REG
  4866F{
  4867F  Uint16 all ;
  4868F  struct DRR2_BITS bit ;
  4869F} ;
  4870F// McBSP DRR1 register bit definitions:
  4871F
  4872Fstruct DRR1_BITS
  4873F{                  // bit description
  4874F  Uint16 LWLB : 8 ;
  4875F                  // 16:23 Low word low byte
  4876F  Uint16 LWHB : 8 ;
  4877F                  // 24:31 low word high byte
  4878F} ;
  4879F
  4880Funion DRR1_REG
  4881F{
  4882F  Uint16 all ;
  4883F  struct DRR1_BITS bit ;
  4884F} ;
  4885F// McBSP DXR2 register bit definitions:
  4886F
  4887Fstruct DXR2_BITS
  4888F{                  // bit description
  4889F  Uint16 HWLB : 8 ;
  4890F                  // 16:23 High word low byte
  4891F  Uint16 HWHB : 8 ;
  4892F                  // 24:31 High word high byte
  4893F} ;
  4894F
  4895Funion DXR2_REG
  4896F{
  4897F  Uint16 all ;
  4898F  struct DXR2_BITS bit ;
  4899F} ;
  4900F// McBSP DXR1 register bit definitions:
  4901F
  4902Fstruct DXR1_BITS
  4903F{                  // bit description
  4904F  Uint16 LWLB : 8 ;
  4905F                  // 16:23 Low word low byte
  4906F  Uint16 LWHB : 8 ;
  4907F                  // 24:31 low word high byte
  4908F} ;
  4909F
  4910Funion DXR1_REG
  4911F{
  4912F  Uint16 all ;
  4913F  struct DXR1_BITS bit ;
  4914F} ;
  4915F// SPCR2 control register bit definitions:
  4916F
  4917Fstruct SPCR2_BITS
  4918F{                   // bit description
  4919F  Uint16 XRST : 1 ;
  4920F                  // 0 transmit reset
  4921F  Uint16 XRDY : 1 ;
  4922F                  // 1 transmit ready
  4923F  Uint16 XEMPTY : 1 ;
  4924F                    // 2 Transmit empty
  4925F  Uint16 XSYNCERR : 1 ;
  4926F                      // 3 Transmit syn errorINT flag
  4927F  Uint16 XINTM : 2 ;
  4928F                   // 5:4 Transmit interrupt types
  4929F  Uint16 GRST : 1 ;
  4930F                  // 6 CLKG reset
  4931F  Uint16 FRST : 1 ;
  4932F                  // 7 Frame sync reset
  4933F  Uint16 SOFT : 1 ;
  4934F                  // 8 SOFT bit
  4935F  Uint16 FREE : 1 ;
  4936F                  // 9 FREE bit
  4937F  Uint16 rsvd : 6 ;
  4938F                  // 15:10 reserved
  4939F} ;
  4940F
  4941Funion SPCR2_REG
  4942F{
  4943F  Uint16 all ;
  4944F  struct SPCR2_BITS bit ;
  4945F} ;
  4946F// SPCR1 control register bit definitions:
  4947F
  4948Fstruct SPCR1_BITS
  4949F{                   // bit description
  4950F  Uint16 RRST : 1 ;
  4951F                  // 0 Receive reset
  4952F  Uint16 RRDY : 1 ;
  4953F                  // 1 Receive ready
  4954F  Uint16 RFULL : 1 ;
  4955F                   // 2 Receive full
  4956F  Uint16 RSYNCERR : 1 ;
  4957F                      // 7 Receive syn error
  4958F  Uint16 RINTM : 2 ;
  4959F                   // 5:4 Receive interrupt types
  4960F  Uint16 ABIS : 1 ;
  4961F                  // 6 ABIS mode select
  4962F  Uint16 DXENA : 1 ;
  4963F                   // 7 DX hi-z enable
  4964F  Uint16 rsvd : 3 ;
  4965F                  // 10:8 reserved
  4966F  Uint16 CLKSTP : 2 ;
  4967F                    // 12:11 CLKSTOP mode bit
  4968F  Uint16 RJUST : 2 ;
  4969F                   // 13:14 Right justified
  4970F  Uint16 DLB : 1 ;
  4971F                 // 15 Digital loop back
  4972F} ;
  4973F
  4974Funion SPCR1_REG
  4975F{
  4976F  Uint16 all ;
  4977F  struct SPCR1_BITS bit ;
  4978F} ;
  4979F// RCR2 control register bit definitions:
  4980F
  4981Fstruct RCR2_BITS
  4982F{                  // bit description
  4983F  Uint16 RDATDLY : 2 ;
  4984F                     // 1:0 Receive data delay
  4985F  Uint16 RFIG : 1 ;
  4986F                  // 2 Receive frame sync ignore
  4987F  Uint16 RCOMPAND : 2 ;
  4988F                      // 4:3 Receive Companding Mode selects
  4989F  Uint16 RWDLEN2 : 3 ;
  4990F                     // 7:5 Receive word length
  4991F  Uint16 RFRLEN2 : 7 ;
  4992F                     // 14:8 Receive Frame sync
  4993F  Uint16 RPHASE : 1 ;
  4994F                    // 15 Receive Phase
  4995F} ;
  4996F
  4997Funion RCR2_REG
  4998F{
  4999F  Uint16 all ;
  5000F  struct RCR2_BITS bit ;
  5001F} ;
  5002F// RCR1 control register bit definitions:
  5003F
  5004Fstruct RCR1_BITS
  5005F{                  // bit description
  5006F  Uint16 rsvd1 : 5 ;
  5007F                   // 4:0 reserved
  5008F  Uint16 RWDLEN1 : 3 ;
  5009F                     // 7:5 Receive word length
  5010F  Uint16 RFRLEN1 : 7 ;
  5011F                     // 14:8 Receive frame length
  5012F  Uint16 rsvd2 : 1 ;
  5013F                   // 15 reserved
  5014F} ;
  5015F
  5016Funion RCR1_REG
  5017F{
  5018F  Uint16 all ;
  5019F  struct RCR1_BITS bit ;
  5020F} ;
  5021F// XCR2 control register bit definitions:
  5022F
  5023Fstruct XCR2_BITS
  5024F{                  // bit description
  5025F  Uint16 XDATDLY : 2 ;
  5026F                     // 1:0 Transmit data delay
  5027F  Uint16 XFIG : 1 ;
  5028F                  // 2 Transmit frame sync ignore
  5029F  Uint16 XCOMPAND : 2 ;
  5030F                      // 4:3 Transmit Companding Mode selects
  5031F  Uint16 XWDLEN2 : 3 ;
  5032F                     // 7:5 Transmit word length
  5033F  Uint16 XFRLEN2 : 7 ;
  5034F                     // 14:8 Transmit Frame sync
  5035F  Uint16 XPHASE : 1 ;
  5036F                    // 15 Transmit Phase
  5037F} ;
  5038F
  5039Funion XCR2_REG
  5040F{
  5041F  Uint16 all ;
  5042F  struct XCR2_BITS bit ;
  5043F} ;
  5044F// XCR1 control register bit definitions:
  5045F
  5046Fstruct XCR1_BITS
  5047F{                  // bit description
  5048F  Uint16 rsvd1 : 5 ;
  5049F                   // 4:0 reserved
  5050F  Uint16 XWDLEN1 : 3 ;
  5051F                     // 7:5 Transmit word length
  5052F  Uint16 XFRLEN1 : 7 ;
  5053F                     // 14:8 Transmit frame length
  5054F  Uint16 rsvd2 : 1 ;
  5055F                   // 15 reserved
  5056F} ;
  5057F
  5058Funion XCR1_REG
  5059F{
  5060F  Uint16 all ;
  5061F  struct XCR1_BITS bit ;
  5062F} ;
  5063F// SRGR2 Sample rate generator control register bit definitions:
  5064F
  5065Fstruct SRGR2_BITS
  5066F{                   // bit description
  5067F  Uint16 FPER : 12 ;
  5068F                   // 11:0 Frame period
  5069F  Uint16 FSGM : 1 ;
  5070F                  // 12 Frame sync generator mode
  5071F  Uint16 CLKSM : 1 ;
  5072F                   // 13 Sample rate generator mode
  5073F  Uint16 rsvd : 1 ;
  5074F                  // 14 reserved
  5075F  Uint16 GSYNC : 1 ;
  5076F                   // 15 CLKG sync
  5077F} ;
  5078F
  5079Funion SRGR2_REG
  5080F{
  5081F  Uint16 all ;
  5082F  struct SRGR2_BITS bit ;
  5083F} ;
  5084F// SRGR1 control register bit definitions:
  5085F
  5086Fstruct SRGR1_BITS
  5087F{                   // bit description
  5088F  Uint16 CLKGDV : 8 ;
  5089F                    // 7:0 CLKG divider
  5090F  Uint16 FWID : 8 ;
  5091F                  // 15:8 Frame width
  5092F} ;
  5093F
  5094Funion SRGR1_REG
  5095F{
  5096F  Uint16 all ;
  5097F  struct SRGR1_BITS bit ;
  5098F} ;
  5099F// MCR2 Multichannel control register bit definitions:
  5100F
  5101Fstruct MCR2_BITS
  5102F{                  // bit description
  5103F  Uint16 XMCM : 2 ;
  5104F                  // 1:0 Transmit multichannel mode
  5105F  Uint16 XCBLK : 3 ;
  5106F                   // 2:4 Transmit current block
  5107F  Uint16 XPABLK : 2 ;
  5108F                    // 5:6 Transmit partition A Block
  5109F  Uint16 XPBBLK : 2 ;
  5110F                    // 7:8 Transmit partition B Block
  5111F  Uint16 XMCME : 1 ;
  5112F                   // 9 Transmit multi-channel enhance mode
  5113F  Uint16 rsvd : 6 ;
  5114F                  // 15:10 reserved
  5115F} ;
  5116F
  5117Funion MCR2_REG
  5118F{
  5119F  Uint16 all ;
  5120F  struct MCR2_BITS bit ;
  5121F} ;
  5122F// MCR1 Multichannel control register bit definitions:
  5123F
  5124Fstruct MCR1_BITS
  5125F{                  // bit description
  5126F  Uint16 RMCM : 1 ;
  5127F                  // 0 Receive multichannel mode
  5128F  Uint16 rsvd : 1 ;
  5129F                  // 1 reserved
  5130F  Uint16 RCBLK : 3 ;
  5131F                   // 4:2 Receive current block
  5132F  Uint16 RPABLK : 2 ;
  5133F                    // 6:5 Receive partition A Block
  5134F  Uint16 RPBBLK : 2 ;
  5135F                    // 7:8 Receive partition B Block
  5136F  Uint16 RMCME : 1 ;
  5137F                   // 9 Receive multi-channel enhance mode
  5138F  Uint16 rsvd1 : 6 ;
  5139F                   // 15:10 reserved
  5140F} ;
  5141F
  5142Funion MCR1_REG
  5143F{
  5144F  Uint16 all ;
  5145F  struct MCR1_BITS bit ;
  5146F} ;
  5147F// RCERA control register bit definitions:
  5148F
  5149Fstruct RCERA_BITS
  5150F{                   // bit description
  5151F  Uint16 RCEA0 : 1 ;
  5152F                   // 0 Receive Channel enable bit
  5153F  Uint16 RCEA1 : 1 ;
  5154F                   // 1 Receive Channel enable bit
  5155F  Uint16 RCEA2 : 1 ;
  5156F                   // 2 Receive Channel enable bit
  5157F  Uint16 RCEA3 : 1 ;
  5158F                   // 3 Receive Channel enable bit
  5159F  Uint16 RCEA4 : 1 ;
  5160F                   // 4 Receive Channel enable bit
  5161F  Uint16 RCEA5 : 1 ;
  5162F                   // 5 Receive Channel enable bit
  5163F  Uint16 RCEA6 : 1 ;
  5164F                   // 6 Receive Channel enable bit
  5165F  Uint16 RCEA7 : 1 ;
  5166F                   // 7 Receive Channel enable bit
  5167F  Uint16 RCEA8 : 1 ;
  5168F                   // 8 Receive Channel enable bit
  5169F  Uint16 RCEA9 : 1 ;
  5170F                   // 9 Receive Channel enable bit
  5171F  Uint16 RCEA10 : 1 ;
  5172F                    // 10 Receive Channel enable bit
  5173F  Uint16 RCEA11 : 1 ;
  5174F                    // 11 Receive Channel enable bit
  5175F  Uint16 RCEA12 : 1 ;
  5176F                    // 12 Receive Channel enable bit
  5177F  Uint16 RCEA13 : 1 ;
  5178F                    // 13 Receive Channel enable bit
  5179F  Uint16 RCEA14 : 1 ;
  5180F                    // 14 Receive Channel enable bit
  5181F  Uint16 RCEA15 : 1 ;
  5182F                    // 15 Receive Channel enable bit
  5183F} ;
  5184F
  5185Funion RCERA_REG
  5186F{
  5187F  Uint16 all ;
  5188F  struct RCERA_BITS bit ;
  5189F} ;
  5190F// RCERB control register bit definitions:
  5191F
  5192Fstruct RCERB_BITS
  5193F{                   // bit description
  5194F  Uint16 RCEB0 : 1 ;
  5195F                   // 0 Receive Channel enable bit
  5196F  Uint16 RCEB1 : 1 ;
  5197F                   // 1 Receive Channel enable bit
  5198F  Uint16 RCEB2 : 1 ;
  5199F                   // 2 Receive Channel enable bit
  5200F  Uint16 RCEB3 : 1 ;
  5201F                   // 3 Receive Channel enable bit
  5202F  Uint16 RCEB4 : 1 ;
  5203F                   // 4 Receive Channel enable bit
  5204F  Uint16 RCEB5 : 1 ;
  5205F                   // 5 Receive Channel enable bit
  5206F  Uint16 RCEB6 : 1 ;
  5207F                   // 6 Receive Channel enable bit
  5208F  Uint16 RCEB7 : 1 ;
  5209F                   // 7 Receive Channel enable bit
  5210F  Uint16 RCEB8 : 1 ;
  5211F                   // 8 Receive Channel enable bit
  5212F  Uint16 RCEB9 : 1 ;
  5213F                   // 9 Receive Channel enable bit
  5214F  Uint16 RCEB10 : 1 ;
  5215F                    // 10 Receive Channel enable bit
  5216F  Uint16 RCEB11 : 1 ;
  5217F                    // 11 Receive Channel enable bit
  5218F  Uint16 RCEB12 : 1 ;
  5219F                    // 12 Receive Channel enable bit
  5220F  Uint16 RCEB13 : 1 ;
  5221F                    // 13 Receive Channel enable bit
  5222F  Uint16 RCEB14 : 1 ;
  5223F                    // 14 Receive Channel enable bit
  5224F  Uint16 RCEB15 : 1 ;
  5225F                    // 15 Receive Channel enable bit
  5226F} ;
  5227F
  5228Funion RCERB_REG
  5229F{
  5230F  Uint16 all ;
  5231F  struct RCERB_BITS bit ;
  5232F} ;
  5233F// XCERA control register bit definitions:
  5234F
  5235Fstruct XCERA_BITS
  5236F{                   // bit description
  5237F  Uint16 XCERA0 : 1 ;
  5238F                    // 0 Receive Channel enable bit
  5239F  Uint16 XCERA1 : 1 ;
  5240F                    // 1 Receive Channel enable bit
  5241F  Uint16 XCERA2 : 1 ;
  5242F                    // 2 Receive Channel enable bit
  5243F  Uint16 XCERA3 : 1 ;
  5244F                    // 3 Receive Channel enable bit
  5245F  Uint16 XCERA4 : 1 ;
  5246F                    // 4 Receive Channel enable bit
  5247F  Uint16 XCERA5 : 1 ;
  5248F                    // 5 Receive Channel enable bit
  5249F  Uint16 XCERA6 : 1 ;
  5250F                    // 6 Receive Channel enable bit
  5251F  Uint16 XCERA7 : 1 ;
  5252F                    // 7 Receive Channel enable bit
  5253F  Uint16 XCERA8 : 1 ;
  5254F                    // 8 Receive Channel enable bit
  5255F  Uint16 XCERA9 : 1 ;
  5256F                    // 9 Receive Channel enable bit
  5257F  Uint16 XCERA10 : 1 ;
  5258F                     // 10 Receive Channel enable bit
  5259F  Uint16 XCERA11 : 1 ;
  5260F                     // 11 Receive Channel enable bit
  5261F  Uint16 XCERA12 : 1 ;
  5262F                     // 12 Receive Channel enable bit
  5263F  Uint16 XCERA13 : 1 ;
  5264F                     // 13 Receive Channel enable bit
  5265F  Uint16 XCERA14 : 1 ;
  5266F                     // 14 Receive Channel enable bit
  5267F  Uint16 XCERA15 : 1 ;
  5268F                     // 15 Receive Channel enable bit
  5269F} ;
  5270F
  5271Funion XCERA_REG
  5272F{
  5273F  Uint16 all ;
  5274F  struct XCERA_BITS bit ;
  5275F} ;
  5276F// XCERB control register bit definitions:
  5277F
  5278Fstruct XCERB_BITS
  5279F{                   // bit description
  5280F  Uint16 XCERB0 : 1 ;
  5281F                    // 0 Receive Channel enable bit
  5282F  Uint16 XCERB1 : 1 ;
  5283F                    // 1 Receive Channel enable bit
  5284F  Uint16 XCERB2 : 1 ;
  5285F                    // 2 Receive Channel enable bit
  5286F  Uint16 XCERB3 : 1 ;
  5287F                    // 3 Receive Channel enable bit
  5288F  Uint16 XCERB4 : 1 ;
  5289F                    // 4 Receive Channel enable bit
  5290F  Uint16 XCERB5 : 1 ;
  5291F                    // 5 Receive Channel enable bit
  5292F  Uint16 XCERB6 : 1 ;
  5293F                    // 6 Receive Channel enable bit
  5294F  Uint16 XCERB7 : 1 ;
  5295F                    // 7 Receive Channel enable bit
  5296F  Uint16 XCERB8 : 1 ;
  5297F                    // 8 Receive Channel enable bit
  5298F  Uint16 XCERB9 : 1 ;
  5299F                    // 9 Receive Channel enable bit
  5300F  Uint16 XCERB10 : 1 ;
  5301F                     // 10 Receive Channel enable bit
  5302F  Uint16 XCERB11 : 1 ;
  5303F                     // 11 Receive Channel enable bit
  5304F  Uint16 XCERB12 : 1 ;
  5305F                     // 12 Receive Channel enable bit
  5306F  Uint16 XCERB13 : 1 ;
  5307F                     // 13 Receive Channel enable bit
  5308F  Uint16 XCERB14 : 1 ;
  5309F                     // 14 Receive Channel enable bit
  5310F  Uint16 XCERB15 : 1 ;
  5311F                     // 15 Receive Channel enable bit
  5312F} ;
  5313F
  5314Funion XCERB_REG
  5315F{
  5316F  Uint16 all ;
  5317F  struct XCERB_BITS bit ;
  5318F} ;
  5319F// PCR control register bit definitions:
  5320F
  5321Fstruct PCR_BITS
  5322F{                 // bit description
  5323F  Uint16 CLKRP : 1 ;
  5324F                   // 0 Receive Clock polarity
  5325F  Uint16 CLKXP : 1 ;
  5326F                   // 1 Transmit clock polarity
  5327F  Uint16 FSRP : 1 ;
  5328F                  // 2 Receive Frame synchronization polarity
  5329F  Uint16 FSXP : 1 ;
  5330F                  // 3 Transmit Frame synchronization polarity
  5331F  Uint16 DR_STAT : 1 ;
  5332F                     // 4 DR pin status - reserved for this McBSP
  5333F  Uint16 DX_STAT : 1 ;
  5334F                     // 5 DX pin status - reserved for this McBSP
  5335F  Uint16 CLKS_STAT : 1 ;
  5336F                       // 6 CLKS pin status - reserved for 28x -McBSP
  5337F  Uint16 SCLKME : 1 ;
  5338F                    // 7 Enhanced sample clock mode selection bit.
  5339F  Uint16 CLKRM : 1 ;
  5340F                   // 8 Receiver Clock Mode
  5341F  Uint16 CLKXM : 1 ;
  5342F                   // 9 Transmitter Clock Mode.
  5343F  Uint16 FSRM : 1 ;
  5344F                  // 10 Receive Frame Synchronization Mode
  5345F  Uint16 FSXM : 1 ;
  5346F                  // 11 Transmit Frame Synchronization Mode
  5347F  Uint16 RIOEN : 1 ;
  5348F                   // 12 General Purpose I/O Mode - reserved in this 28x-McBSP
  5349F  Uint16 XIOEN : 1 ;
  5350F                   // 13 General Purpose I/O Mode - reserved in this 28x-McBSP
  5351F  Uint16 IDEL_EN : 1 ;
  5352F                     // 14 reserved in this 28x-McBSP
  5353F  Uint16 rsvd : 1 ;// 15 reserved
  5354F} ;
  5355F
  5356Funion PCR_REG
  5357F{
  5358F  Uint16 all ;
  5359F  struct PCR_BITS bit ;
  5360F} ;
  5361F// RCERC control register bit definitions:
  5362F
  5363Fstruct RCERC_BITS
  5364F{                   // bit description
  5365F  Uint16 RCEC0 : 1 ;
  5366F                   // 0 Receive Channel enable bit
  5367F  Uint16 RCEC1 : 1 ;
  5368F                   // 1 Receive Channel enable bit
  5369F  Uint16 RCEC2 : 1 ;
  5370F                   // 2 Receive Channel enable bit
  5371F  Uint16 RCEC3 : 1 ;
  5372F                   // 3 Receive Channel enable bit
  5373F  Uint16 RCEC4 : 1 ;
  5374F                   // 4 Receive Channel enable bit
  5375F  Uint16 RCEC5 : 1 ;
  5376F                   // 5 Receive Channel enable bit
  5377F  Uint16 RCEC6 : 1 ;
  5378F                   // 6 Receive Channel enable bit
  5379F  Uint16 RCEC7 : 1 ;
  5380F                   // 7 Receive Channel enable bit
  5381F  Uint16 RCEC8 : 1 ;
  5382F                   // 8 Receive Channel enable bit
  5383F  Uint16 RCEC9 : 1 ;
  5384F                   // 9 Receive Channel enable bit
  5385F  Uint16 RCEC10 : 1 ;
  5386F                    // 10 Receive Channel enable bit
  5387F  Uint16 RCEC11 : 1 ;
  5388F                    // 11 Receive Channel enable bit
  5389F  Uint16 RCEC12 : 1 ;
  5390F                    // 12 Receive Channel enable bit
  5391F  Uint16 RCEC13 : 1 ;
  5392F                    // 13 Receive Channel enable bit
  5393F  Uint16 RCEC14 : 1 ;
  5394F                    // 14 Receive Channel enable bit
  5395F  Uint16 RCEC15 : 1 ;
  5396F                    // 15 Receive Channel enable bit
  5397F} ;
  5398F
  5399Funion RCERC_REG
  5400F{
  5401F  Uint16 all ;
  5402F  struct RCERC_BITS bit ;
  5403F} ;
  5404F// RCERD control register bit definitions:
  5405F
  5406Fstruct RCERD_BITS
  5407F{                   // bit description
  5408F  Uint16 RCED0 : 1 ;
  5409F                   // 0 Receive Channel enable bit
  5410F  Uint16 RCED1 : 1 ;
  5411F                   // 1 Receive Channel enable bit
  5412F  Uint16 RCED2 : 1 ;
  5413F                   // 2 Receive Channel enable bit
  5414F  Uint16 RCED3 : 1 ;
  5415F                   // 3 Receive Channel enable bit
  5416F  Uint16 RCED4 : 1 ;
  5417F                   // 4 Receive Channel enable bit
  5418F  Uint16 RCED5 : 1 ;
  5419F                   // 5 Receive Channel enable bit
  5420F  Uint16 RCED6 : 1 ;
  5421F                   // 6 Receive Channel enable bit
  5422F  Uint16 RCED7 : 1 ;
  5423F                   // 7 Receive Channel enable bit
  5424F  Uint16 RCED8 : 1 ;
  5425F                   // 8 Receive Channel enable bit
  5426F  Uint16 RCED9 : 1 ;
  5427F                   // 9 Receive Channel enable bit
  5428F  Uint16 RCED10 : 1 ;
  5429F                    // 10 Receive Channel enable bit
  5430F  Uint16 RCED11 : 1 ;
  5431F                    // 11 Receive Channel enable bit
  5432F  Uint16 RCED12 : 1 ;
  5433F                    // 12 Receive Channel enable bit
  5434F  Uint16 RCED13 : 1 ;
  5435F                    // 13 Receive Channel enable bit
  5436F  Uint16 RCED14 : 1 ;
  5437F                    // 14 Receive Channel enable bit
  5438F  Uint16 RCED15 : 1 ;
  5439F                    // 15 Receive Channel enable bit
  5440F} ;
  5441F
  5442Funion RCERD_REG
  5443F{
  5444F  Uint16 all ;
  5445F  struct RCERD_BITS bit ;
  5446F} ;
  5447F// XCERC control register bit definitions:
  5448F
  5449Fstruct XCERC_BITS
  5450F{                   // bit description
  5451F  Uint16 XCERC0 : 1 ;
  5452F                    // 0 Receive Channel enable bit
  5453F  Uint16 XCERC1 : 1 ;
  5454F                    // 1 Receive Channel enable bit
  5455F  Uint16 XCERC2 : 1 ;
  5456F                    // 2 Receive Channel enable bit
  5457F  Uint16 XCERC3 : 1 ;
  5458F                    // 3 Receive Channel enable bit
  5459F  Uint16 XCERC4 : 1 ;
  5460F                    // 4 Receive Channel enable bit
  5461F  Uint16 XCERC5 : 1 ;
  5462F                    // 5 Receive Channel enable bit
  5463F  Uint16 XCERC6 : 1 ;
  5464F                    // 6 Receive Channel enable bit
  5465F  Uint16 XCERC7 : 1 ;
  5466F                    // 7 Receive Channel enable bit
  5467F  Uint16 XCERC8 : 1 ;
  5468F                    // 8 Receive Channel enable bit
  5469F  Uint16 XCERC9 : 1 ;
  5470F                    // 9 Receive Channel enable bit
  5471F  Uint16 XCERC10 : 1 ;
  5472F                     // 10 Receive Channel enable bit
  5473F  Uint16 XCERC11 : 1 ;
  5474F                     // 11 Receive Channel enable bit
  5475F  Uint16 XCERC12 : 1 ;
  5476F                     // 12 Receive Channel enable bit
  5477F  Uint16 XCERC13 : 1 ;
  5478F                     // 13 Receive Channel enable bit
  5479F  Uint16 XCERC14 : 1 ;
  5480F                     // 14 Receive Channel enable bit
  5481F  Uint16 XCERC15 : 1 ;
  5482F                     // 15 Receive Channel enable bit
  5483F} ;
  5484F
  5485Funion XCERC_REG
  5486F{
  5487F  Uint16 all ;
  5488F  struct XCERC_BITS bit ;
  5489F} ;
  5490F// XCERD control register bit definitions:
  5491F
  5492Fstruct XCERD_BITS
  5493F{                   // bit description
  5494F  Uint16 XCERD0 : 1 ;
  5495F                    // 0 Receive Channel enable bit
  5496F  Uint16 XCERD1 : 1 ;
  5497F                    // 1 Receive Channel enable bit
  5498F  Uint16 XCERD2 : 1 ;
  5499F                    // 2 Receive Channel enable bit
  5500F  Uint16 XCERD3 : 1 ;
  5501F                    // 3 Receive Channel enable bit
  5502F  Uint16 XCERD4 : 1 ;
  5503F                    // 4 Receive Channel enable bit
  5504F  Uint16 XCERD5 : 1 ;
  5505F                    // 5 Receive Channel enable bit
  5506F  Uint16 XCERD6 : 1 ;
  5507F                    // 6 Receive Channel enable bit
  5508F  Uint16 XCERD7 : 1 ;
  5509F                    // 7 Receive Channel enable bit
  5510F  Uint16 XCERD8 : 1 ;
  5511F                    // 8 Receive Channel enable bit
  5512F  Uint16 XCERD9 : 1 ;
  5513F                    // 9 Receive Channel enable bit
  5514F  Uint16 XCERD10 : 1 ;
  5515F                     // 10 Receive Channel enable bit
  5516F  Uint16 XCERD11 : 1 ;
  5517F                     // 11 Receive Channel enable bit
  5518F  Uint16 XCERD12 : 1 ;
  5519F                     // 12 Receive Channel enable bit
  5520F  Uint16 XCERD13 : 1 ;
  5521F                     // 13 Receive Channel enable bit
  5522F  Uint16 XCERD14 : 1 ;
  5523F                     // 14 Receive Channel enable bit
  5524F  Uint16 XCERD15 : 1 ;
  5525F                     // 15 Receive Channel enable bit
  5526F} ;
  5527F
  5528Funion XCERD_REG
  5529F{
  5530F  Uint16 all ;
  5531F  struct XCERD_BITS bit ;
  5532F} ;
  5533F// RCERE control register bit definitions:
  5534F
  5535Fstruct RCERE_BITS
  5536F{                   // bit description
  5537F  Uint16 RCEE0 : 1 ;
  5538F                   // 0 Receive Channel enable bit
  5539F  Uint16 RCEE1 : 1 ;
  5540F                   // 1 Receive Channel enable bit
  5541F  Uint16 RCEE2 : 1 ;
  5542F                   // 2 Receive Channel enable bit
  5543F  Uint16 RCEE3 : 1 ;
  5544F                   // 3 Receive Channel enable bit
  5545F  Uint16 RCEE4 : 1 ;
  5546F                   // 4 Receive Channel enable bit
  5547F  Uint16 RCEE5 : 1 ;
  5548F                   // 5 Receive Channel enable bit
  5549F  Uint16 RCEE6 : 1 ;
  5550F                   // 6 Receive Channel enable bit
  5551F  Uint16 RCEE7 : 1 ;
  5552F                   // 7 Receive Channel enable bit
  5553F  Uint16 RCEE8 : 1 ;
  5554F                   // 8 Receive Channel enable bit
  5555F  Uint16 RCEE9 : 1 ;
  5556F                   // 9 Receive Channel enable bit
  5557F  Uint16 RCEE10 : 1 ;
  5558F                    // 10 Receive Channel enable bit
  5559F  Uint16 RCEE11 : 1 ;
  5560F                    // 11 Receive Channel enable bit
  5561F  Uint16 RCEE12 : 1 ;
  5562F                    // 12 Receive Channel enable bit
  5563F  Uint16 RCEE13 : 1 ;
  5564F                    // 13 Receive Channel enable bit
  5565F  Uint16 RCEE14 : 1 ;
  5566F                    // 14 Receive Channel enable bit
  5567F  Uint16 RCEE15 : 1 ;
  5568F                    // 15 Receive Channel enable bit
  5569F} ;
  5570F
  5571Funion RCERE_REG
  5572F{
  5573F  Uint16 all ;
  5574F  struct RCERE_BITS bit ;
  5575F} ;
  5576F// RCERF control register bit definitions:
  5577F
  5578Fstruct RCERF_BITS
  5579F{                   // bit description
  5580F  Uint16 RCEF0 : 1 ;
  5581F                   // 0 Receive Channel enable bit
  5582F  Uint16 RCEF1 : 1 ;
  5583F                   // 1 Receive Channel enable bit
  5584F  Uint16 RCEF2 : 1 ;
  5585F                   // 2 Receive Channel enable bit
  5586F  Uint16 RCEF3 : 1 ;
  5587F                   // 3 Receive Channel enable bit
  5588F  Uint16 RCEF4 : 1 ;
  5589F                   // 4 Receive Channel enable bit
  5590F  Uint16 RCEF5 : 1 ;
  5591F                   // 5 Receive Channel enable bit
  5592F  Uint16 RCEF6 : 1 ;
  5593F                   // 6 Receive Channel enable bit
  5594F  Uint16 RCEF7 : 1 ;
  5595F                   // 7 Receive Channel enable bit
  5596F  Uint16 RCEF8 : 1 ;
  5597F                   // 8 Receive Channel enable bit
  5598F  Uint16 RCEF9 : 1 ;
  5599F                   // 9 Receive Channel enable bit
  5600F  Uint16 RCEF10 : 1 ;
  5601F                    // 10 Receive Channel enable bit
  5602F  Uint16 RCEF11 : 1 ;
  5603F                    // 11 Receive Channel enable bit
  5604F  Uint16 RCEF12 : 1 ;
  5605F                    // 12 Receive Channel enable bit
  5606F  Uint16 RCEF13 : 1 ;
  5607F                    // 13 Receive Channel enable bit
  5608F  Uint16 RCEF14 : 1 ;
  5609F                    // 14 Receive Channel enable bit
  5610F  Uint16 RCEF15 : 1 ;
  5611F                    // 15 Receive Channel enable bit
  5612F} ;
  5613F
  5614Funion RCERF_REG
  5615F{
  5616F  Uint16 all ;
  5617F  struct RCERF_BITS bit ;
  5618F} ;
  5619F// XCERE control register bit definitions:
  5620F
  5621Fstruct XCERE_BITS
  5622F{                   // bit description
  5623F  Uint16 XCERE0 : 1 ;
  5624F                    // 0 Receive Channel enable bit
  5625F  Uint16 XCERE1 : 1 ;
  5626F                    // 1 Receive Channel enable bit
  5627F  Uint16 XCERE2 : 1 ;
  5628F                    // 2 Receive Channel enable bit
  5629F  Uint16 XCERE3 : 1 ;
  5630F                    // 3 Receive Channel enable bit
  5631F  Uint16 XCERE4 : 1 ;
  5632F                    // 4 Receive Channel enable bit
  5633F  Uint16 XCERE5 : 1 ;
  5634F                    // 5 Receive Channel enable bit
  5635F  Uint16 XCERE6 : 1 ;
  5636F                    // 6 Receive Channel enable bit
  5637F  Uint16 XCERE7 : 1 ;
  5638F                    // 7 Receive Channel enable bit
  5639F  Uint16 XCERE8 : 1 ;
  5640F                    // 8 Receive Channel enable bit
  5641F  Uint16 XCERE9 : 1 ;
  5642F                    // 9 Receive Channel enable bit
  5643F  Uint16 XCERE10 : 1 ;
  5644F                     // 10 Receive Channel enable bit
  5645F  Uint16 XCERE11 : 1 ;
  5646F                     // 11 Receive Channel enable bit
  5647F  Uint16 XCERE12 : 1 ;
  5648F                     // 12 Receive Channel enable bit
  5649F  Uint16 XCERE13 : 1 ;
  5650F                     // 13 Receive Channel enable bit
  5651F  Uint16 XCERE14 : 1 ;
  5652F                     // 14 Receive Channel enable bit
  5653F  Uint16 XCERE15 : 1 ;
  5654F                     // 15 Receive Channel enable bit
  5655F} ;
  5656F
  5657Funion XCERE_REG
  5658F{
  5659F  Uint16 all ;
  5660F  struct XCERE_BITS bit ;
  5661F} ;
  5662F// XCERF control register bit definitions:
  5663F
  5664Fstruct XCERF_BITS
  5665F{                   // bit description
  5666F  Uint16 XCERF0 : 1 ;
  5667F                    // 0 Receive Channel enable bit
  5668F  Uint16 XCERF1 : 1 ;
  5669F                    // 1 Receive Channel enable bit
  5670F  Uint16 XCERF2 : 1 ;
  5671F                    // 2 Receive Channel enable bit
  5672F  Uint16 XCERF3 : 1 ;
  5673F                    // 3 Receive Channel enable bit
  5674F  Uint16 XCERF4 : 1 ;
  5675F                    // 4 Receive Channel enable bit
  5676F  Uint16 XCERF5 : 1 ;
  5677F                    // 5 Receive Channel enable bit
  5678F  Uint16 XCERF6 : 1 ;
  5679F                    // 6 Receive Channel enable bit
  5680F  Uint16 XCERF7 : 1 ;
  5681F                    // 7 Receive Channel enable bit
  5682F  Uint16 XCERF8 : 1 ;
  5683F                    // 8 Receive Channel enable bit
  5684F  Uint16 XCERF9 : 1 ;
  5685F                    // 9 Receive Channel enable bit
  5686F  Uint16 XCERF10 : 1 ;
  5687F                     // 10 Receive Channel enable bit
  5688F  Uint16 XCERF11 : 1 ;
  5689F                     // 11 Receive Channel enable bit
  5690F  Uint16 XCERF12 : 1 ;
  5691F                     // 12 Receive Channel enable bit
  5692F  Uint16 XCERF13 : 1 ;
  5693F                     // 13 Receive Channel enable bit
  5694F  Uint16 XCERF14 : 1 ;
  5695F                     // 14 Receive Channel enable bit
  5696F  Uint16 XCERF15 : 1 ;
  5697F                     // 15 Receive Channel enable bit
  5698F} ;
  5699F
  5700Funion XCERF_REG
  5701F{
  5702F  Uint16 all ;
  5703F  struct XCERF_BITS bit ;
  5704F} ;
  5705F// RCERG control register bit definitions:
  5706F
  5707Fstruct RCERG_BITS
  5708F{                   // bit description
  5709F  Uint16 RCEG0 : 1 ;
  5710F                   // 0 Receive Channel enable bit
  5711F  Uint16 RCEG1 : 1 ;
  5712F                   // 1 Receive Channel enable bit
  5713F  Uint16 RCEG2 : 1 ;
  5714F                   // 2 Receive Channel enable bit
  5715F  Uint16 RCEG3 : 1 ;
  5716F                   // 3 Receive Channel enable bit
  5717F  Uint16 RCEG4 : 1 ;
  5718F                   // 4 Receive Channel enable bit
  5719F  Uint16 RCEG5 : 1 ;
  5720F                   // 5 Receive Channel enable bit
  5721F  Uint16 RCEG6 : 1 ;
  5722F                   // 6 Receive Channel enable bit
  5723F  Uint16 RCEG7 : 1 ;
  5724F                   // 7 Receive Channel enable bit
  5725F  Uint16 RCEG8 : 1 ;
  5726F                   // 8 Receive Channel enable bit
  5727F  Uint16 RCEG9 : 1 ;
  5728F                   // 9 Receive Channel enable bit
  5729F  Uint16 RCEG10 : 1 ;
  5730F                    // 10 Receive Channel enable bit
  5731F  Uint16 RCEG11 : 1 ;
  5732F                    // 11 Receive Channel enable bit
  5733F  Uint16 RCEG12 : 1 ;
  5734F                    // 12 Receive Channel enable bit
  5735F  Uint16 RCEG13 : 1 ;
  5736F                    // 13 Receive Channel enable bit
  5737F  Uint16 RCEG14 : 1 ;
  5738F                    // 14 Receive Channel enable bit
  5739F  Uint16 RCEG15 : 1 ;
  5740F                    // 15 Receive Channel enable bit
  5741F} ;
  5742F
  5743Funion RCERG_REG
  5744F{
  5745F  Uint16 all ;
  5746F  struct RCERG_BITS bit ;
  5747F} ;
  5748F// RCERH control register bit definitions:
  5749F
  5750Fstruct RCERH_BITS
  5751F{                   // bit description
  5752F  Uint16 RCEH0 : 1 ;
  5753F                   // 0 Receive Channel enable bit
  5754F  Uint16 RCEH1 : 1 ;
  5755F                   // 1 Receive Channel enable bit
  5756F  Uint16 RCEH2 : 1 ;
  5757F                   // 2 Receive Channel enable bit
  5758F  Uint16 RCEH3 : 1 ;
  5759F                   // 3 Receive Channel enable bit
  5760F  Uint16 RCEH4 : 1 ;
  5761F                   // 4 Receive Channel enable bit
  5762F  Uint16 RCEH5 : 1 ;
  5763F                   // 5 Receive Channel enable bit
  5764F  Uint16 RCEH6 : 1 ;
  5765F                   // 6 Receive Channel enable bit
  5766F  Uint16 RCEH7 : 1 ;
  5767F                   // 7 Receive Channel enable bit
  5768F  Uint16 RCEH8 : 1 ;
  5769F                   // 8 Receive Channel enable bit
  5770F  Uint16 RCEH9 : 1 ;
  5771F                   // 9 Receive Channel enable bit
  5772F  Uint16 RCEH10 : 1 ;
  5773F                    // 10 Receive Channel enable bit
  5774F  Uint16 RCEH11 : 1 ;
  5775F                    // 11 Receive Channel enable bit
  5776F  Uint16 RCEH12 : 1 ;
  5777F                    // 12 Receive Channel enable bit
  5778F  Uint16 RCEH13 : 1 ;
  5779F                    // 13 Receive Channel enable bit
  5780F  Uint16 RCEH14 : 1 ;
  5781F                    // 14 Receive Channel enable bit
  5782F  Uint16 RCEH15 : 1 ;
  5783F                    // 15 Receive Channel enable bit
  5784F} ;
  5785F
  5786Funion RCERH_REG
  5787F{
  5788F  Uint16 all ;
  5789F  struct RCERH_BITS bit ;
  5790F} ;
  5791F// XCERG control register bit definitions:
  5792F
  5793Fstruct XCERG_BITS
  5794F{                   // bit description
  5795F  Uint16 XCERG0 : 1 ;
  5796F                    // 0 Receive Channel enable bit
  5797F  Uint16 XCERG1 : 1 ;
  5798F                    // 1 Receive Channel enable bit
  5799F  Uint16 XCERG2 : 1 ;
  5800F                    // 2 Receive Channel enable bit
  5801F  Uint16 XCERG3 : 1 ;
  5802F                    // 3 Receive Channel enable bit
  5803F  Uint16 XCERG4 : 1 ;
  5804F                    // 4 Receive Channel enable bit
  5805F  Uint16 XCERG5 : 1 ;
  5806F                    // 5 Receive Channel enable bit
  5807F  Uint16 XCERG6 : 1 ;
  5808F                    // 6 Receive Channel enable bit
  5809F  Uint16 XCERG7 : 1 ;
  5810F                    // 7 Receive Channel enable bit
  5811F  Uint16 XCERG8 : 1 ;
  5812F                    // 8 Receive Channel enable bit
  5813F  Uint16 XCERG9 : 1 ;
  5814F                    // 9 Receive Channel enable bit
  5815F  Uint16 XCERG10 : 1 ;
  5816F                     // 10 Receive Channel enable bit
  5817F  Uint16 XCERG11 : 1 ;
  5818F                     // 11 Receive Channel enable bit
  5819F  Uint16 XCERG12 : 1 ;
  5820F                     // 12 Receive Channel enable bit
  5821F  Uint16 XCERG13 : 1 ;
  5822F                     // 13 Receive Channel enable bit
  5823F  Uint16 XCERG14 : 1 ;
  5824F                     // 14 Receive Channel enable bit
  5825F  Uint16 XCERG15 : 1 ;
  5826F                     // 15 Receive Channel enable bit
  5827F} ;
  5828F
  5829Funion XCERG_REG
  5830F{
  5831F  Uint16 all ;
  5832F  struct XCERG_BITS bit ;
  5833F} ;
  5834F// XCERH control register bit definitions:
  5835F
  5836Fstruct XCERH_BITS
  5837F{                   // bit description
  5838F  Uint16 XCEH0 : 1 ;
  5839F                   // 0 Receive Channel enable bit
  5840F  Uint16 XCEH1 : 1 ;
  5841F                   // 1 Receive Channel enable bit
  5842F  Uint16 XCEH2 : 1 ;
  5843F                   // 2 Receive Channel enable bit
  5844F  Uint16 XCEH3 : 1 ;
  5845F                   // 3 Receive Channel enable bit
  5846F  Uint16 XCEH4 : 1 ;
  5847F                   // 4 Receive Channel enable bit
  5848F  Uint16 XCEH5 : 1 ;
  5849F                   // 5 Receive Channel enable bit
  5850F  Uint16 XCEH6 : 1 ;
  5851F                   // 6 Receive Channel enable bit
  5852F  Uint16 XCEH7 : 1 ;
  5853F                   // 7 Receive Channel enable bit
  5854F  Uint16 XCEH8 : 1 ;
  5855F                   // 8 Receive Channel enable bit
  5856F  Uint16 XCEH9 : 1 ;
  5857F                   // 9 Receive Channel enable bit
  5858F  Uint16 XCEH10 : 1 ;
  5859F                    // 10 Receive Channel enable bit
  5860F  Uint16 XCEH11 : 1 ;
  5861F                    // 11 Receive Channel enable bit
  5862F  Uint16 XCEH12 : 1 ;
  5863F                    // 12 Receive Channel enable bit
  5864F  Uint16 XCEH13 : 1 ;
  5865F                    // 13 Receive Channel enable bit
  5866F  Uint16 XCEH14 : 1 ;
  5867F                    // 14 Receive Channel enable bit
  5868F  Uint16 XCEH15 : 1 ;
  5869F                    // 15 Receive Channel enable bit
  5870F} ;
  5871F
  5872Funion XCERH_REG
  5873F{
  5874F  Uint16 all ;
  5875F  struct XCERH_BITS bit ;
  5876F} ;
  5877F// McBSP Interrupt enable register for RINT/XINT
  5878F
  5879Fstruct MFFINT_BITS
  5880F{                    // bits description
  5881F  Uint16 XINT : 1 ;// 0 XINT interrupt enable
  5882F  Uint16 rsvd1 : 1 ;// 1 reserved
  5883F  Uint16 RINT : 1 ;// 2 RINT interrupt enable
  5884F  Uint16 rsvd2 : 13 ;// 15:3 reserved
  5885F} ;
  5886F
  5887Funion MFFINT_REG
  5888F{
  5889F  Uint16 all ;
  5890F  struct MFFINT_BITS bit ;
  5891F} ;
  5892F//---------------------------------------------------------------------------
  5893F// McBSP Register File:
  5894F//
  5895F
  5896Fstruct MCBSP_REGS
  5897F{
  5898F  union DRR2_REG DRR2 ; // MCBSP Data receive register bits 31-16
  5899F  union DRR1_REG DRR1 ; // MCBSP Data receive register bits 15-0
  5900F  union DXR2_REG DXR2 ; // MCBSP Data transmit register bits 31-16
  5901F  union DXR1_REG DXR1 ; // MCBSP Data transmit register bits 15-0
  5902F  union SPCR2_REG SPCR2 ; // MCBSP control register bits 31-16
  5903F  union SPCR1_REG SPCR1 ; // MCBSP control register bits 15-0
  5904F  union RCR2_REG RCR2 ; // MCBSP receive control register bits 31-16
  5905F  union RCR1_REG RCR1 ; // MCBSP receive control register bits 15-0
  5906F  union XCR2_REG XCR2 ; // MCBSP transmit control register bits 31-16
  5907F  union XCR1_REG XCR1 ; // MCBSP transmit control register bits 15-0
  5908F  union SRGR2_REG SRGR2 ; // MCBSP sample rate gen register bits 31-16
  5909F  union SRGR1_REG SRGR1 ; // MCBSP sample rate gen register bits 15-0
  5910F  union MCR2_REG MCR2 ; // MCBSP multichannel register bits 31-16
  5911F  union MCR1_REG MCR1 ; // MCBSP multichannel register bits 15-0
  5912F  union RCERA_REG RCERA ; // MCBSP Receive channel enable partition A
  5913F  union RCERB_REG RCERB ; // MCBSP Receive channel enable partition B
  5914F  union XCERA_REG XCERA ; // MCBSP Transmit channel enable partition A
  5915F  union XCERB_REG XCERB ; // MCBSP Transmit channel enable partition B
  5916F  union PCR_REG PCR ; // MCBSP Pin control register bits 15-0
  5917F  union RCERC_REG RCERC ; // MCBSP Receive channel enable partition C
  5918F  union RCERD_REG RCERD ; // MCBSP Receive channel enable partition D
  5919F  union XCERC_REG XCERC ; // MCBSP Transmit channel enable partition C
  5920F  union XCERD_REG XCERD ; // MCBSP Transmit channel enable partition D
  5921F  union RCERE_REG RCERE ; // MCBSP Receive channel enable partition E
  5922F  union RCERF_REG RCERF ; // MCBSP Receive channel enable partition F
  5923F  union XCERE_REG XCERE ; // MCBSP Transmit channel enable partition E
  5924F  union XCERF_REG XCERF ; // MCBSP Transmit channel enable partition F
  5925F  union RCERG_REG RCERG ; // MCBSP Receive channel enable partition G
  5926F  union RCERH_REG RCERH ; // MCBSP Receive channel enable partition H
  5927F  union XCERG_REG XCERG ; // MCBSP Transmit channel enable partition G
  5928F  union XCERH_REG XCERH ; // MCBSP Transmit channel enable partition H
  5929F  Uint16 rsvd1 [ 4 ] ;
  5930F                    // reserved
  5931F  union MFFINT_REG MFFINT ; // MCBSP Interrupt enable register for RINT/XINT
  5932F  Uint16 rsvd2 ; // reserved
  5933F} ;
  5934F//---------------------------------------------------------------------------
  5935F// McBSP External References & Function Declarations:
  5936F//
  5937F
  5938Fextern volatile struct MCBSP_REGS
  5939F  McbspaRegs ;
  5940F
  5941Fextern volatile struct MCBSP_REGS
  5942F  McbspbRegs ;
  5943F       /* extern "C" */
  5944F       // end of DSP2833x_MCBSP_H definition
  5945F//===========================================================================
  5946F// No more.
  5947F//===========================================================================
  5948F 
  5949F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_McBSP.h*/
  5950F/*   CLOSE_FILE Include File */
  5951F 
  5952F              // McBSP
  5953F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieCtrl.h */
  5954F// TI File $Revision: /main/1 $
  5955F// Checkin $Date: August 18, 2006 13:52:24 $
  5956F//###########################################################################
  5957F//
  5958F// FILE: DSP2833x_PieCtrl.h
  5959F//
  5960F// TITLE: DSP2833x Device PIE Control Register Definitions.
  5961F//
  5962F//###########################################################################
  5963F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  5964F// $Release Date: August 4, 2009 $
  5965F//###########################################################################
  5966F#ifndef DSP2833x_PIE_CTRL_H
  5967F#define DSP2833x_PIE_CTRL_H
  5968F//---------------------------------------------------------------------------
  5969F// PIE Control Register Bit Definitions:
  5970F//
  5971F// PIECTRL: Register bit definitions:
  5972F
  5973Ftypedef
  5974Fstruct PIECTRL_BITS
  5975F{                            // bits description
  5976F  Uint16 ENPIE : 1 ;
  5977F                   // 0 Enable PIE block
  5978F  Uint16 PIEVECT : 15 ;
  5979F                      // 15:1 Fetched vector address
  5980F} PIECTRL_BITS ;
  5981F
  5982Ftypedef
  5983Funion PIECTRL_REG
  5984F{
  5985F  Uint16 all ;
  5986F  struct PIECTRL_BITS bit ;
  5987F} PIECTRL_REG ;
  5988F// PIEIER: Register bit definitions:
  5989F
  5990Ftypedef
  5991Fstruct PIEIER_BITS
  5992F{                            // bits description
  5993F  Uint16 INTx1 : 1 ;
  5994F                   // 0 INTx.1
  5995F  Uint16 INTx2 : 1 ;
  5996F                   // 1 INTx.2
  5997F  Uint16 INTx3 : 1 ;
  5998F                   // 2 INTx.3
  5999F  Uint16 INTx4 : 1 ;
  6000F                   // 3 INTx.4
  6001F  Uint16 INTx5 : 1 ;
  6002F                   // 4 INTx.5
  6003F  Uint16 INTx6 : 1 ;
  6004F                   // 5 INTx.6
  6005F  Uint16 INTx7 : 1 ;
  6006F                   // 6 INTx.7
  6007F  Uint16 INTx8 : 1 ;
  6008F                   // 7 INTx.8
  6009F  Uint16 rsvd : 8 ;
  6010F                  // 15:8 reserved
  6011F} PIEIER_BITS ;
  6012F
  6013Ftypedef
  6014Funion PIEIER_REG
  6015F{
  6016F  Uint16 all ;
  6017F  struct PIEIER_BITS bit ;
  6018F} PIEIER_REG ;
  6019F// PIEIFR: Register bit definitions:
  6020F
  6021Ftypedef
  6022Fstruct PIEIFR_BITS
  6023F{                            // bits description
  6024F  Uint16 INTx1 : 1 ;
  6025F                   // 0 INTx.1
  6026F  Uint16 INTx2 : 1 ;
  6027F                   // 1 INTx.2
  6028F  Uint16 INTx3 : 1 ;
  6029F                   // 2 INTx.3
  6030F  Uint16 INTx4 : 1 ;
  6031F                   // 3 INTx.4
  6032F  Uint16 INTx5 : 1 ;
  6033F                   // 4 INTx.5
  6034F  Uint16 INTx6 : 1 ;
  6035F                   // 5 INTx.6
  6036F  Uint16 INTx7 : 1 ;
  6037F                   // 6 INTx.7
  6038F  Uint16 INTx8 : 1 ;
  6039F                   // 7 INTx.8
  6040F  Uint16 rsvd : 8 ;
  6041F                  // 15:8 reserved
  6042F} PIEIFR_BITS ;
  6043F
  6044Ftypedef
  6045Funion PIEIFR_REG
  6046F{
  6047F  Uint16 all ;
  6048F  struct PIEIFR_BITS bit ;
  6049F} PIEIFR_REG ;
  6050F// PIEACK: Register bit definitions:
  6051F
  6052Ftypedef
  6053Fstruct PIEACK_BITS
  6054F{                            // bits description
  6055F  Uint16 ACK1 : 1 ;
  6056F                  // 0 Acknowledge PIE interrupt group 1
  6057F  Uint16 ACK2 : 1 ;
  6058F                  // 1 Acknowledge PIE interrupt group 2
  6059F  Uint16 ACK3 : 1 ;
  6060F                  // 2 Acknowledge PIE interrupt group 3
  6061F  Uint16 ACK4 : 1 ;
  6062F                  // 3 Acknowledge PIE interrupt group 4
  6063F  Uint16 ACK5 : 1 ;
  6064F                  // 4 Acknowledge PIE interrupt group 5
  6065F  Uint16 ACK6 : 1 ;
  6066F                  // 5 Acknowledge PIE interrupt group 6
  6067F  Uint16 ACK7 : 1 ;
  6068F                  // 6 Acknowledge PIE interrupt group 7
  6069F  Uint16 ACK8 : 1 ;
  6070F                  // 7 Acknowledge PIE interrupt group 8
  6071F  Uint16 ACK9 : 1 ;
  6072F                  // 8 Acknowledge PIE interrupt group 9
  6073F  Uint16 ACK10 : 1 ;
  6074F                   // 9 Acknowledge PIE interrupt group 10
  6075F  Uint16 ACK11 : 1 ;
  6076F                   // 10 Acknowledge PIE interrupt group 11
  6077F  Uint16 ACK12 : 1 ;
  6078F                   // 11 Acknowledge PIE interrupt group 12
  6079F  Uint16 rsvd : 4 ;
  6080F                  // 15:12 reserved
  6081F} PIEACK_BITS ;
  6082F
  6083Ftypedef
  6084Funion PIEACK_REG
  6085F{
  6086F  Uint16 all ;
  6087F  struct PIEACK_BITS bit ;
  6088F} PIEACK_REG ;
  6089F//---------------------------------------------------------------------------
  6090F// PIE Control Register File:
  6091F//
  6092F
  6093Ftypedef
  6094Fstruct PIE_CTRL_REGS
  6095F{
  6096F  union PIECTRL_REG PIECTRL ; // PIE control register
  6097F  union PIEACK_REG PIEACK ; // PIE acknowledge
  6098F  union PIEIER_REG PIEIER1 ; // PIE int1 IER register
  6099F  union PIEIFR_REG PIEIFR1 ; // PIE int1 IFR register
  6100F  union PIEIER_REG PIEIER2 ; // PIE INT2 IER register
  6101F  union PIEIFR_REG PIEIFR2 ; // PIE INT2 IFR register
  6102F  union PIEIER_REG PIEIER3 ; // PIE INT3 IER register
  6103F  union PIEIFR_REG PIEIFR3 ; // PIE INT3 IFR register
  6104F  union PIEIER_REG PIEIER4 ; // PIE INT4 IER register
  6105F  union PIEIFR_REG PIEIFR4 ; // PIE INT4 IFR register
  6106F  union PIEIER_REG PIEIER5 ; // PIE INT5 IER register
  6107F  union PIEIFR_REG PIEIFR5 ; // PIE INT5 IFR register
  6108F  union PIEIER_REG PIEIER6 ; // PIE INT6 IER register
  6109F  union PIEIFR_REG PIEIFR6 ; // PIE INT6 IFR register
  6110F  union PIEIER_REG PIEIER7 ; // PIE INT7 IER register
  6111F  union PIEIFR_REG PIEIFR7 ; // PIE INT7 IFR register
  6112F  union PIEIER_REG PIEIER8 ; // PIE INT8 IER register
  6113F  union PIEIFR_REG PIEIFR8 ; // PIE INT8 IFR register
  6114F  union PIEIER_REG PIEIER9 ; // PIE INT9 IER register
  6115F  union PIEIFR_REG PIEIFR9 ; // PIE INT9 IFR register
  6116F  union PIEIER_REG PIEIER10 ; // PIE int10 IER register
  6117F  union PIEIFR_REG PIEIFR10 ; // PIE int10 IFR register
  6118F  union PIEIER_REG PIEIER11 ; // PIE int11 IER register
  6119F  union PIEIFR_REG PIEIFR11 ; // PIE int11 IFR register
  6120F  union PIEIER_REG PIEIER12 ; // PIE int12 IER register
  6121F  union PIEIFR_REG PIEIFR12 ; // PIE int12 IFR register
  6122F} PIE_CTRL_REGS ;
  6123F#define PIEACK_GROUP1 0x0001
  6124F#define PIEACK_GROUP2 0x0002
  6125F#define PIEACK_GROUP3 0x0004
  6126F#define PIEACK_GROUP4 0x0008
  6127F#define PIEACK_GROUP5 0x0010
  6128F#define PIEACK_GROUP6 0x0020
  6129F#define PIEACK_GROUP7 0x0040
  6130F#define PIEACK_GROUP8 0x0080
  6131F#define PIEACK_GROUP9 0x0100
  6132F#define PIEACK_GROUP10 0x0200
  6133F#define PIEACK_GROUP11 0x0400
  6134F#define PIEACK_GROUP12 0x0800
  6135F//---------------------------------------------------------------------------
  6136F// PIE Control Registers External References & Function Declarations:
  6137F//
  6138F
  6139Fextern volatile struct PIE_CTRL_REGS
  6140F  PieCtrlRegs ;
  6141F       // end of DSP2833x_PIE_CTRL_H definition
  6142F//===========================================================================
  6143F// End of file.
  6144F//===========================================================================
  6145F 
  6146F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieCtrl.h*/
  6147F/*   CLOSE_FILE Include File */
  6148F 
  6149F            // PIE Control Registers
  6150F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieVect.h */
  6151F// TI File $Revision: /main/2 $
  6152F// Checkin $Date: March 16, 2007 09:00:21 $
  6153F//###########################################################################
  6154F//
  6155F// FILE: DSP2833x_PieVect.h
  6156F//
  6157F// TITLE: DSP2833x Devices PIE Vector Table Definitions.
  6158F//
  6159F//###########################################################################
  6160F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6161F// $Release Date: August 4, 2009 $
  6162F//###########################################################################
  6163F#ifndef DSP2833x_PIE_VECT_H
  6164F#define DSP2833x_PIE_VECT_H
  6165F//---------------------------------------------------------------------------
  6166F// PIE Interrupt Vector Table Definition:
  6167F//
  6168F// Create a user type called PINT (pointer to interrupt):
  6169F
  6170Ftypedef
  6171Fconst
  6172Finterrupt void ( * PINT ) ( void ) ;
  6173F// Define Vector Table:
  6174F
  6175Ftypedef
  6176Fstruct PIE_VECT_TABLE
  6177F{
  6178F// Reset is never fetched from this table.
  6179F// It will always be fetched from 0x3FFFC0 in
  6180F// boot ROM
  6181F  PINT PIE1_RESERVED ;
  6182F  PINT PIE2_RESERVED ;
  6183F  PINT PIE3_RESERVED ;
  6184F  PINT PIE4_RESERVED ;
  6185F  PINT PIE5_RESERVED ;
  6186F  PINT PIE6_RESERVED ;
  6187F  PINT PIE7_RESERVED ;
  6188F  PINT PIE8_RESERVED ;
  6189F  PINT PIE9_RESERVED ;
  6190F  PINT PIE10_RESERVED ;
  6191F  PINT PIE11_RESERVED ;
  6192F  PINT PIE12_RESERVED ;
  6193F  PINT PIE13_RESERVED ;
  6194F// Non-Peripheral Interrupts:
  6195F  PINT XINT13 ;    // XINT13 / CPU-Timer1
  6196F  PINT TINT2 ;    // CPU-Timer2
  6197F  PINT DATALOG ;    // Datalogging interrupt
  6198F  PINT RTOSINT ;    // RTOS interrupt
  6199F  PINT EMUINT ;    // Emulation interrupt
  6200F  PINT XNMI ;    // Non-maskable interrupt
  6201F  PINT ILLEGAL ;    // Illegal operation TRAP
  6202F  PINT USER1 ;    // User Defined trap 1
  6203F  PINT USER2 ;    // User Defined trap 2
  6204F  PINT USER3 ;    // User Defined trap 3
  6205F  PINT USER4 ;    // User Defined trap 4
  6206F  PINT USER5 ;    // User Defined trap 5
  6207F  PINT USER6 ;    // User Defined trap 6
  6208F  PINT USER7 ;    // User Defined trap 7
  6209F  PINT USER8 ;    // User Defined trap 8
  6210F  PINT USER9 ;    // User Defined trap 9
  6211F  PINT USER10 ;    // User Defined trap 10
  6212F  PINT USER11 ;    // User Defined trap 11
  6213F  PINT USER12 ;    // User Defined trap 12
  6214F// Group 1 PIE Peripheral Vectors:
  6215F  PINT SEQ1INT ;
  6216F  PINT SEQ2INT ;
  6217F  PINT rsvd1_3 ;
  6218F  PINT XINT1 ;
  6219F  PINT XINT2 ;
  6220F  PINT ADCINT ;    // ADC
  6221F  PINT TINT0 ;    // Timer 0
  6222F  PINT WAKEINT ;    // WD
  6223F// Group 2 PIE Peripheral Vectors:
  6224F  PINT EPWM1_TZINT ;    // EPWM-1
  6225F  PINT EPWM2_TZINT ;    // EPWM-2
  6226F  PINT EPWM3_TZINT ;    // EPWM-3
  6227F  PINT EPWM4_TZINT ;    // EPWM-4
  6228F  PINT EPWM5_TZINT ;    // EPWM-5
  6229F  PINT EPWM6_TZINT ;    // EPWM-6
  6230F  PINT rsvd2_7 ;
  6231F  PINT rsvd2_8 ;
  6232F// Group 3 PIE Peripheral Vectors:
  6233F  PINT EPWM1_INT ;    // EPWM-1
  6234F  PINT EPWM2_INT ;    // EPWM-2
  6235F  PINT EPWM3_INT ;    // EPWM-3
  6236F  PINT EPWM4_INT ;    // EPWM-4
  6237F  PINT EPWM5_INT ;    // EPWM-5
  6238F  PINT EPWM6_INT ;    // EPWM-6
  6239F  PINT rsvd3_7 ;
  6240F  PINT rsvd3_8 ;
  6241F// Group 4 PIE Peripheral Vectors:
  6242F  PINT ECAP1_INT ;    // ECAP-1
  6243F  PINT ECAP2_INT ;    // ECAP-2
  6244F  PINT ECAP3_INT ;    // ECAP-3
  6245F  PINT ECAP4_INT ;    // ECAP-4
  6246F  PINT ECAP5_INT ;    // ECAP-5
  6247F  PINT ECAP6_INT ;    // ECAP-6
  6248F  PINT rsvd4_7 ;
  6249F  PINT rsvd4_8 ;
  6250F// Group 5 PIE Peripheral Vectors:
  6251F  PINT EQEP1_INT ;    // EQEP-1
  6252F  PINT EQEP2_INT ;    // EQEP-2
  6253F  PINT rsvd5_3 ;
  6254F  PINT rsvd5_4 ;
  6255F  PINT rsvd5_5 ;
  6256F  PINT rsvd5_6 ;
  6257F  PINT rsvd5_7 ;
  6258F  PINT rsvd5_8 ;
  6259F// Group 6 PIE Peripheral Vectors:
  6260F  PINT SPIRXINTA ;    // SPI-A
  6261F  PINT SPITXINTA ;    // SPI-A
  6262F  PINT MRINTB ;    // McBSP-B
  6263F  PINT MXINTB ;    // McBSP-B
  6264F  PINT MRINTA ;        // McBSP-A
  6265F  PINT MXINTA ;    // McBSP-A
  6266F  PINT rsvd6_7 ;
  6267F  PINT rsvd6_8 ;
  6268F// Group 7 PIE Peripheral Vectors:
  6269F  PINT DINTCH1 ;    // DMA
  6270F  PINT DINTCH2 ;    // DMA
  6271F  PINT DINTCH3 ;    // DMA
  6272F  PINT DINTCH4 ;    // DMA
  6273F  PINT DINTCH5 ;    // DMA
  6274F  PINT DINTCH6 ;    // DMA
  6275F  PINT rsvd7_7 ;
  6276F  PINT rsvd7_8 ;
  6277F// Group 8 PIE Peripheral Vectors:
  6278F  PINT I2CINT1A ;    // I2C-A
  6279F  PINT I2CINT2A ;    // I2C-A
  6280F  PINT rsvd8_3 ;
  6281F  PINT rsvd8_4 ;
  6282F  PINT SCIRXINTC ;    // SCI-C
  6283F  PINT SCITXINTC ;    // SCI-C
  6284F  PINT rsvd8_7 ;
  6285F  PINT rsvd8_8 ;
  6286F// Group 9 PIE Peripheral Vectors:
  6287F  PINT SCIRXINTA ;    // SCI-A
  6288F  PINT SCITXINTA ;    // SCI-A
  6289F  PINT SCIRXINTB ;    // SCI-B
  6290F  PINT SCITXINTB ;    // SCI-B
  6291F  PINT ECAN0INTA ;    // eCAN-A
  6292F  PINT ECAN1INTA ;    // eCAN-A
  6293F  PINT ECAN0INTB ;    // eCAN-B
  6294F  PINT ECAN1INTB ;    // eCAN-B
  6295F// Group 10 PIE Peripheral Vectors:
  6296F  PINT rsvd10_1 ;
  6297F  PINT rsvd10_2 ;
  6298F  PINT rsvd10_3 ;
  6299F  PINT rsvd10_4 ;
  6300F  PINT rsvd10_5 ;
  6301F  PINT rsvd10_6 ;
  6302F  PINT rsvd10_7 ;
  6303F  PINT rsvd10_8 ;
  6304F// Group 11 PIE Peripheral Vectors:
  6305F  PINT rsvd11_1 ;
  6306F  PINT rsvd11_2 ;
  6307F  PINT rsvd11_3 ;
  6308F  PINT rsvd11_4 ;
  6309F  PINT rsvd11_5 ;
  6310F  PINT rsvd11_6 ;
  6311F  PINT rsvd11_7 ;
  6312F  PINT rsvd11_8 ;
  6313F// Group 12 PIE Peripheral Vectors:
  6314F  PINT XINT3 ;    // External interrupt
  6315F  PINT XINT4 ;
  6316F  PINT XINT5 ;
  6317F  PINT XINT6 ;
  6318F  PINT XINT7 ;
  6319F  PINT rsvd12_6 ;
  6320F  PINT LVF ;    // Latched overflow
  6321F  PINT LUF ;    // Latched underflow
  6322F} PIE_VECT_TABLE ;
  6323F//---------------------------------------------------------------------------
  6324F// PIE Interrupt Vector Table External References & Function Declarations:
  6325F//
  6326F
  6327Fextern struct PIE_VECT_TABLE
  6328F  PieVectTable ;
  6329F       // end of DSP2833x_PIE_VECT_H definition
  6330F//===========================================================================
  6331F// End of file.
  6332F//===========================================================================
  6333F 
  6334F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieVect.h*/
  6335F/*   CLOSE_FILE Include File */
  6336F 
  6337F            // PIE Vector Table
  6338F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Spi.h */
  6339F// TI File $Revision: /main/3 $
  6340F// Checkin $Date: April 17, 2008 11:08:27 $
  6341F//###########################################################################
  6342F//
  6343F// FILE: DSP2833x_Spi.h
  6344F//
  6345F// TITLE: DSP2833x Device SPI Register Definitions.
  6346F//
  6347F//###########################################################################
  6348F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6349F// $Release Date: August 4, 2009 $
  6350F//###########################################################################
  6351F#ifndef DSP2833x_SPI_H
  6352F#define DSP2833x_SPI_H
  6353F//---------------------------------------------------------------------------
  6354F// SPI Individual Register Bit Definitions:
  6355F//
  6356F// SPI FIFO Transmit register bit definitions:
  6357F
  6358Fstruct SPIFFTX_BITS
  6359F{                     // bit description
  6360F  Uint16 TXFFIL : 5 ;
  6361F                    // 4:0 Interrupt level
  6362F  Uint16 TXFFIENA : 1 ;
  6363F                      // 5 Interrupt enable
  6364F  Uint16 TXFFINTCLR : 1 ;
  6365F                        // 6 Clear INT flag
  6366F  Uint16 TXFFINT : 1 ;
  6367F                     // 7 INT flag
  6368F  Uint16 TXFFST : 5 ;
  6369F                    // 12:8 FIFO status
  6370F  Uint16 TXFIFO : 1 ;
  6371F                    // 13 FIFO reset
  6372F  Uint16 SPIFFENA : 1 ;
  6373F                      // 14 Enhancement enable
  6374F  Uint16 SPIRST : 1 ;
  6375F                    // 15 Reset SPI
  6376F} ;
  6377F
  6378Funion SPIFFTX_REG
  6379F{
  6380F  Uint16 all ;
  6381F  struct SPIFFTX_BITS bit ;
  6382F} ;
  6383F//--------------------------------------------
  6384F// SPI FIFO recieve register bit definitions:
  6385F//
  6386F//
  6387F
  6388Fstruct SPIFFRX_BITS
  6389F{                     // bits description
  6390F  Uint16 RXFFIL : 5 ;
  6391F                    // 4:0 Interrupt level
  6392F  Uint16 RXFFIENA : 1 ;
  6393F                      // 5 Interrupt enable
  6394F  Uint16 RXFFINTCLR : 1 ;
  6395F                        // 6 Clear INT flag
  6396F  Uint16 RXFFINT : 1 ;
  6397F                     // 7 INT flag
  6398F  Uint16 RXFFST : 5 ;
  6399F                    // 12:8 FIFO status
  6400F  Uint16 RXFIFORESET : 1 ;
  6401F                         // 13 FIFO reset
  6402F  Uint16 RXFFOVFCLR : 1 ;
  6403F                        // 14 Clear overflow
  6404F  Uint16 RXFFOVF : 1 ;
  6405F                     // 15 FIFO overflow
  6406F} ;
  6407F
  6408Funion SPIFFRX_REG
  6409F{
  6410F  Uint16 all ;
  6411F  struct SPIFFRX_BITS bit ;
  6412F} ;
  6413F//--------------------------------------------
  6414F// SPI FIFO control register bit definitions:
  6415F//
  6416F//
  6417F
  6418Fstruct SPIFFCT_BITS
  6419F{                     // bits description
  6420F  Uint16 TXDLY : 8 ;
  6421F                   // 7:0 FIFO transmit delay
  6422F  Uint16 rsvd : 8 ;
  6423F                  // 15:8 reserved
  6424F} ;
  6425F
  6426Funion SPIFFCT_REG
  6427F{
  6428F  Uint16 all ;
  6429F  struct SPIFFCT_BITS bit ;
  6430F} ;
  6431F//---------------------------------------------
  6432F// SPI configuration register bit definitions:
  6433F//
  6434F//
  6435F
  6436Fstruct SPICCR_BITS
  6437F{                    // bits description
  6438F  Uint16 SPICHAR : 4 ;
  6439F                     // 3:0 Character length control
  6440F  Uint16 SPILBK : 1 ;
  6441F                    // 4 Loop-back enable/disable
  6442F  Uint16 rsvd1 : 1 ;
  6443F                   // 5 reserved
  6444F  Uint16 CLKPOLARITY : 1 ;
  6445F                         // 6 Clock polarity
  6446F  Uint16 SPISWRESET : 1 ;
  6447F                        // 7 SPI SW Reset
  6448F  Uint16 rsvd2 : 8 ;
  6449F                   // 15:8 reserved
  6450F} ;
  6451F
  6452Funion SPICCR_REG
  6453F{
  6454F  Uint16 all ;
  6455F  struct SPICCR_BITS bit ;
  6456F} ;
  6457F//-------------------------------------------------
  6458F// SPI operation control register bit definitions:
  6459F//
  6460F//
  6461F
  6462Fstruct SPICTL_BITS
  6463F{                    // bits description
  6464F  Uint16 SPIINTENA : 1 ;
  6465F                       // 0 Interrupt enable
  6466F  Uint16 TALK : 1 ;
  6467F                  // 1 Master/Slave transmit enable
  6468F  Uint16 MASTER_SLAVE : 1 ;
  6469F                          // 2 Network control mode
  6470F  Uint16 CLK_PHASE : 1 ;
  6471F                       // 3 Clock phase select
  6472F  Uint16 OVERRUNINTENA : 1 ;
  6473F                           // 4 Overrun interrupt enable
  6474F  Uint16 rsvd : 11 ;
  6475F                   // 15:5 reserved
  6476F} ;
  6477F
  6478Funion SPICTL_REG
  6479F{
  6480F  Uint16 all ;
  6481F  struct SPICTL_BITS bit ;
  6482F} ;
  6483F//--------------------------------------
  6484F// SPI status register bit definitions:
  6485F//
  6486F//
  6487F
  6488Fstruct SPISTS_BITS
  6489F{                    // bits description
  6490F  Uint16 rsvd1 : 5 ;
  6491F                   // 4:0 reserved
  6492F  Uint16 BUFFULL_FLAG : 1 ;
  6493F                          // 5 SPI transmit buffer full flag
  6494F  Uint16 INT_FLAG : 1 ;
  6495F                      // 6 SPI interrupt flag
  6496F  Uint16 OVERRUN_FLAG : 1 ;
  6497F                          // 7 SPI reciever overrun flag
  6498F  Uint16 rsvd2 : 8 ;
  6499F                   // 15:8 reserved
  6500F} ;
  6501F
  6502Funion SPISTS_REG
  6503F{
  6504F  Uint16 all ;
  6505F  struct SPISTS_BITS bit ;
  6506F} ;
  6507F//------------------------------------------------
  6508F// SPI priority control register bit definitions:
  6509F//
  6510F//
  6511F
  6512Fstruct SPIPRI_BITS
  6513F{                    // bits description
  6514F  Uint16 rsvd1 : 4 ;
  6515F                   // 3:0 reserved
  6516F  Uint16 FREE : 1 ;
  6517F                  // 4 Free emulation mode control
  6518F  Uint16 SOFT : 1 ;
  6519F                  // 5 Soft emulation mode control
  6520F  Uint16 rsvd2 : 1 ;
  6521F                   // 6 reserved
  6522F  Uint16 rsvd3 : 9 ;
  6523F                   // 15:7 reserved
  6524F} ;
  6525F
  6526Funion SPIPRI_REG
  6527F{
  6528F  Uint16 all ;
  6529F  struct SPIPRI_BITS bit ;
  6530F} ;
  6531F//---------------------------------------------------------------------------
  6532F// SPI Register File:
  6533F//
  6534F
  6535Fstruct SPI_REGS
  6536F{
  6537F  union SPICCR_REG SPICCR ; // Configuration register
  6538F  union SPICTL_REG SPICTL ; // Operation control register
  6539F  union SPISTS_REG SPISTS ; // Status register
  6540F  Uint16 rsvd1 ; // reserved
  6541F  Uint16 SPIBRR ; // Baud Rate
  6542F  Uint16 rsvd2 ; // reserved
  6543F  Uint16 SPIRXEMU ; // Emulation buffer
  6544F  Uint16 SPIRXBUF ; // Serial input buffer
  6545F  Uint16 SPITXBUF ; // Serial output buffer
  6546F  Uint16 SPIDAT ; // Serial data
  6547F  union SPIFFTX_REG SPIFFTX ; // FIFO transmit register
  6548F  union SPIFFRX_REG SPIFFRX ; // FIFO recieve register
  6549F  union SPIFFCT_REG SPIFFCT ; // FIFO control register
  6550F  Uint16 rsvd3 [ 2 ] ;
  6551F                    // reserved
  6552F  union SPIPRI_REG SPIPRI ; // FIFO Priority control
  6553F} ;
  6554F//---------------------------------------------------------------------------
  6555F// SPI External References & Function Declarations:
  6556F//
  6557F
  6558Fextern volatile struct SPI_REGS
  6559F  SpiaRegs ;
  6560F       /* extern "C" */
  6561F       // end of DSP2833x_SPI_H definition
  6562F//===========================================================================
  6563F// End of file.
  6564F//===========================================================================
  6565F 
  6566F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Spi.h*/
  6567F/*   CLOSE_FILE Include File */
  6568F 
  6569F                // SPI Registers
  6570F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Sci.h */
  6571F// TI File $Revision: /main/2 $
  6572F// Checkin $Date: March 1, 2007 15:57:02 $
  6573F//###########################################################################
  6574F//
  6575F// FILE:        DSP2833x_Sci.h
  6576F//
  6577F// TITLE:       DSP2833x Device SCI Register Definitions.
  6578F//
  6579F//###########################################################################
  6580F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6581F// $Release Date: August 4, 2009 $
  6582F//###########################################################################
  6583F#ifndef DSP2833x_SCI_H
  6584F#define DSP2833x_SCI_H
  6585F//---------------------------------------------------------------------------
  6586F// SCI Individual Register Bit Definitions
  6587F//----------------------------------------------------------
  6588F// SCICCR communication control register bit definitions:
  6589F//
  6590F
  6591Fstruct SCICCR_BITS
  6592F{                    // bit description
  6593F  Uint16 SCICHAR : 3 ;
  6594F                     // 2:0 Character length control
  6595F  Uint16 ADDRIDLE_MODE : 1 ;
  6596F                           // 3 ADDR/IDLE Mode control
  6597F  Uint16 LOOPBKENA : 1 ;
  6598F                       // 4 Loop Back enable
  6599F  Uint16 PARITYENA : 1 ;
  6600F                       // 5 Parity enable
  6601F  Uint16 PARITY : 1 ;
  6602F                    // 6 Even or Odd Parity
  6603F  Uint16 STOPBITS : 1 ;
  6604F                      // 7 Number of Stop Bits
  6605F  Uint16 rsvd1 : 8 ;
  6606F                   // 15:8 reserved
  6607F} ;
  6608F
  6609Funion SCICCR_REG
  6610F{
  6611F  Uint16 all ;
  6612F  struct SCICCR_BITS bit ;
  6613F} ;
  6614F//-------------------------------------------
  6615F// SCICTL1 control register 1 bit definitions:
  6616F//
  6617F
  6618Fstruct SCICTL1_BITS
  6619F{                     // bit description
  6620F  Uint16 RXENA : 1 ;
  6621F                   // 0 SCI receiver enable
  6622F  Uint16 TXENA : 1 ;
  6623F                   // 1 SCI transmitter enable
  6624F  Uint16 SLEEP : 1 ;
  6625F                   // 2 SCI sleep
  6626F  Uint16 TXWAKE : 1 ;
  6627F                    // 3 Transmitter wakeup method
  6628F  Uint16 rsvd : 1 ;
  6629F                  // 4 reserved
  6630F  Uint16 SWRESET : 1 ;
  6631F                     // 5 Software reset
  6632F  Uint16 RXERRINTENA : 1 ;
  6633F                         // 6 Recieve interrupt enable
  6634F  Uint16 rsvd1 : 9 ;
  6635F                   // 15:7 reserved
  6636F} ;
  6637F
  6638Funion SCICTL1_REG
  6639F{
  6640F  Uint16 all ;
  6641F  struct SCICTL1_BITS bit ;
  6642F} ;
  6643F//---------------------------------------------
  6644F// SCICTL2 control register 2 bit definitions:
  6645F//
  6646F
  6647Fstruct SCICTL2_BITS
  6648F{                     // bit description
  6649F  Uint16 TXINTENA : 1 ;
  6650F                      // 0 Transmit interrupt enable
  6651F  Uint16 RXBKINTENA : 1 ;
  6652F                        // 1 Receiver-buffer break enable
  6653F  Uint16 rsvd : 4 ;
  6654F                  // 5:2 reserved
  6655F  Uint16 TXEMPTY : 1 ;
  6656F                     // 6 Transmitter empty flag
  6657F  Uint16 TXRDY : 1 ;
  6658F                   // 7 Transmitter ready flag
  6659F  Uint16 rsvd1 : 8 ;
  6660F                   // 15:8 reserved
  6661F} ;
  6662F
  6663Funion SCICTL2_REG
  6664F{
  6665F  Uint16 all ;
  6666F  struct SCICTL2_BITS bit ;
  6667F} ;
  6668F//---------------------------------------------------
  6669F// SCIRXST Receiver status register bit definitions:
  6670F//
  6671F
  6672Fstruct SCIRXST_BITS
  6673F{                     // bit description
  6674F  Uint16 rsvd : 1 ;
  6675F                  // 0 reserved
  6676F  Uint16 RXWAKE : 1 ;
  6677F                    // 1 Receiver wakeup detect flag
  6678F  Uint16 PE : 1 ;
  6679F                // 2 Parity error flag
  6680F  Uint16 OE : 1 ;
  6681F                // 3 Overrun error flag
  6682F  Uint16 FE : 1 ;
  6683F                // 4 Framing error flag
  6684F  Uint16 BRKDT : 1 ;
  6685F                   // 5 Break-detect flag
  6686F  Uint16 RXRDY : 1 ;
  6687F                   // 6 Receiver ready flag
  6688F  Uint16 RXERROR : 1 ;
  6689F                     // 7 Receiver error flag
  6690F} ;
  6691F
  6692Funion SCIRXST_REG
  6693F{
  6694F  Uint16 all ;
  6695F  struct SCIRXST_BITS bit ;
  6696F} ;
  6697F//----------------------------------------------------
  6698F// SCIRXBUF Receiver Data Buffer with FIFO bit definitions:
  6699F//
  6700F
  6701Fstruct SCIRXBUF_BITS
  6702F{                      // bits description
  6703F  Uint16 RXDT : 8 ;
  6704F                  // 7:0 Receive word
  6705F  Uint16 rsvd : 6 ;
  6706F                  // 13:8 reserved
  6707F  Uint16 SCIFFPE : 1 ;
  6708F                     // 14 SCI PE error in FIFO mode
  6709F  Uint16 SCIFFFE : 1 ;
  6710F                     // 15 SCI FE error in FIFO mode
  6711F} ;
  6712F
  6713Funion SCIRXBUF_REG
  6714F{
  6715F  Uint16 all ;
  6716F  struct SCIRXBUF_BITS bit ;
  6717F} ;
  6718F//--------------------------------------------------
  6719F// SCIPRI Priority control register bit definitions:
  6720F//
  6721F//
  6722F
  6723Fstruct SCIPRI_BITS
  6724F{                    // bit description
  6725F  Uint16 rsvd : 3 ;
  6726F                  // 2:0 reserved
  6727F  Uint16 FREE : 1 ;
  6728F                  // 3 Free emulation suspend mode
  6729F  Uint16 SOFT : 1 ;
  6730F                  // 4 Soft emulation suspend mode
  6731F  Uint16 rsvd1 : 3 ;
  6732F                   // 7:5 reserved
  6733F} ;
  6734F
  6735Funion SCIPRI_REG
  6736F{
  6737F  Uint16 all ;
  6738F  struct SCIPRI_BITS bit ;
  6739F} ;
  6740F//-------------------------------------------------
  6741F// SCI FIFO Transmit register bit definitions:
  6742F//
  6743F//
  6744F
  6745Fstruct SCIFFTX_BITS
  6746F{                     // bit description
  6747F  Uint16 TXFFIL : 5 ;
  6748F                    // 4:0 Interrupt level
  6749F  Uint16 TXFFIENA : 1 ;
  6750F                      // 5 Interrupt enable
  6751F  Uint16 TXFFINTCLR : 1 ;
  6752F                        // 6 Clear INT flag
  6753F  Uint16 TXFFINT : 1 ;
  6754F                     // 7 INT flag
  6755F  Uint16 TXFFST : 5 ;
  6756F                    // 12:8 FIFO status
  6757F  Uint16 TXFIFOXRESET : 1 ;
  6758F                          // 13 FIFO reset
  6759F  Uint16 SCIFFENA : 1 ;
  6760F                      // 14 Enhancement enable
  6761F  Uint16 SCIRST : 1 ;
  6762F                    // 15 SCI reset rx/tx channels
  6763F} ;
  6764F
  6765Funion SCIFFTX_REG
  6766F{
  6767F  Uint16 all ;
  6768F  struct SCIFFTX_BITS bit ;
  6769F} ;
  6770F//------------------------------------------------
  6771F// SCI FIFO recieve register bit definitions:
  6772F//
  6773F//
  6774F
  6775Fstruct SCIFFRX_BITS
  6776F{                     // bits description
  6777F  Uint16 RXFFIL : 5 ;
  6778F                    // 4:0 Interrupt level
  6779F  Uint16 RXFFIENA : 1 ;
  6780F                      // 5 Interrupt enable
  6781F  Uint16 RXFFINTCLR : 1 ;
  6782F                        // 6 Clear INT flag
  6783F  Uint16 RXFFINT : 1 ;
  6784F                     // 7 INT flag
  6785F  Uint16 RXFFST : 5 ;
  6786F                    // 12:8 FIFO status
  6787F  Uint16 RXFIFORESET : 1 ;
  6788F                         // 13 FIFO reset
  6789F  Uint16 RXFFOVRCLR : 1 ;
  6790F                        // 14 Clear overflow
  6791F  Uint16 RXFFOVF : 1 ;
  6792F                     // 15 FIFO overflow
  6793F} ;
  6794F
  6795Funion SCIFFRX_REG
  6796F{
  6797F  Uint16 all ;
  6798F  struct SCIFFRX_BITS bit ;
  6799F} ;
  6800F// SCI FIFO control register bit definitions:
  6801F
  6802Fstruct SCIFFCT_BITS
  6803F{                     // bits description
  6804F  Uint16 FFTXDLY : 8 ;
  6805F                     // 7:0 FIFO transmit delay
  6806F  Uint16 rsvd : 5 ;
  6807F                  // 12:8 reserved
  6808F  Uint16 CDC : 1 ;
  6809F                 // 13 Auto baud mode enable
  6810F  Uint16 ABDCLR : 1 ;
  6811F                    // 14 Auto baud clear
  6812F  Uint16 ABD : 1 ;
  6813F                 // 15 Auto baud detect
  6814F} ;
  6815F
  6816Funion SCIFFCT_REG
  6817F{
  6818F  Uint16 all ;
  6819F  struct SCIFFCT_BITS bit ;
  6820F} ;
  6821F//---------------------------------------------------------------------------
  6822F// SCI Register File:
  6823F//
  6824F
  6825Fstruct SCI_REGS
  6826F{
  6827F  union SCICCR_REG SCICCR ; // Communications control register
  6828F  union SCICTL1_REG SCICTL1 ; // Control register 1
  6829F  Uint16 SCIHBAUD ; // Baud rate (high) register
  6830F  Uint16 SCILBAUD ; // Baud rate (low) register
  6831F  union SCICTL2_REG SCICTL2 ; // Control register 2
  6832F  union SCIRXST_REG SCIRXST ; // Recieve status register
  6833F  Uint16 SCIRXEMU ; // Recieve emulation buffer register
  6834F  union SCIRXBUF_REG SCIRXBUF ; // Recieve data buffer
  6835F  Uint16 rsvd1 ; // reserved
  6836F  Uint16 SCITXBUF ; // Transmit data buffer
  6837F  union SCIFFTX_REG SCIFFTX ; // FIFO transmit register
  6838F  union SCIFFRX_REG SCIFFRX ; // FIFO recieve register
  6839F  union SCIFFCT_REG SCIFFCT ; // FIFO control register
  6840F  Uint16 rsvd2 ; // reserved
  6841F  Uint16 rsvd3 ; // reserved
  6842F  union SCIPRI_REG SCIPRI ; // FIFO Priority control
  6843F} ;
  6844F//---------------------------------------------------------------------------
  6845F// SCI External References & Function Declarations:
  6846F//
  6847F
  6848Fextern volatile struct SCI_REGS
  6849F  SciaRegs ;
  6850F
  6851Fextern volatile struct SCI_REGS
  6852F  ScibRegs ;
  6853F
  6854Fextern volatile struct SCI_REGS
  6855F  ScicRegs ;
  6856F       /* extern "C" */
  6857F       // end of DSP2833x_SCI_H definition
  6858F//===========================================================================
  6859F// End of file.
  6860F//===========================================================================
  6861F 
  6862F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Sci.h*/
  6863F/*   CLOSE_FILE Include File */
  6864F 
  6865F                // SCI Registers
  6866F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_SysCtrl.h */
  6867F// TI File $Revision: /main/5 $
  6868F// Checkin $Date: May 12, 2008 09:34:58 $
  6869F//###########################################################################
  6870F//
  6871F// FILE: DSP2833x_SysCtrl.h
  6872F//
  6873F// TITLE: DSP2833x Device System Control Register Definitions.
  6874F//
  6875F//###########################################################################
  6876F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6877F// $Release Date: August 4, 2009 $
  6878F//###########################################################################
  6879F#ifndef DSP2833x_SYS_CTRL_H
  6880F#define DSP2833x_SYS_CTRL_H
  6881F//---------------------------------------------------------------------------
  6882F// System Control Individual Register Bit Definitions:
  6883F//
  6884F// PLL Status Register
  6885F
  6886Ftypedef
  6887Fstruct PLLSTS_BITS
  6888F{                            // bits description
  6889F  Uint16 PLLLOCKS : 1 ;
  6890F                      // 0 PLL lock status
  6891F  Uint16 rsvd1 : 1 ;
  6892F                   // 1 reserved
  6893F  Uint16 PLLOFF : 1 ;
  6894F                    // 2 PLL off bit
  6895F  Uint16 MCLKSTS : 1 ;
  6896F                     // 3 Missing clock status bit
  6897F  Uint16 MCLKCLR : 1 ;
  6898F                     // 4 Missing clock clear bit
  6899F  Uint16 OSCOFF : 1 ;
  6900F                    // 5 Oscillator clock off
  6901F  Uint16 MCLKOFF : 1 ;
  6902F                     // 6 Missing clock detect
  6903F  Uint16 DIVSEL : 2 ;
  6904F                    // 7 Divide Select
  6905F  Uint16 rsvd2 : 7 ;
  6906F                   // 15:7 reserved
  6907F} PLLSTS_BITS ;
  6908F
  6909Ftypedef
  6910Funion PLLSTS_REG
  6911F{
  6912F  Uint16 all ;
  6913F  struct PLLSTS_BITS bit ;
  6914F} PLLSTS_REG ;
  6915F// High speed peripheral clock register bit definitions:
  6916F
  6917Ftypedef
  6918Fstruct HISPCP_BITS
  6919F{                            // bits description
  6920F  Uint16 HSPCLK : 3 ;
  6921F                    // 2:0 Rate relative to SYSCLKOUT
  6922F  Uint16 rsvd1 : 13 ;
  6923F                    // 15:3 reserved
  6924F} HISPCP_BITS ;
  6925F
  6926Ftypedef
  6927Funion HISPCP_REG
  6928F{
  6929F  Uint16 all ;
  6930F  struct HISPCP_BITS bit ;
  6931F} HISPCP_REG ;
  6932F// Low speed peripheral clock register bit definitions:
  6933F
  6934Ftypedef
  6935Fstruct LOSPCP_BITS
  6936F{                            // bits description
  6937F  Uint16 LSPCLK : 3 ;
  6938F                    // 2:0 Rate relative to SYSCLKOUT
  6939F  Uint16 rsvd1 : 13 ;
  6940F                    // 15:3 reserved
  6941F} LOSPCP_BITS ;
  6942F
  6943Ftypedef
  6944Funion LOSPCP_REG
  6945F{
  6946F  Uint16 all ;
  6947F  struct LOSPCP_BITS bit ;
  6948F} LOSPCP_REG ;
  6949F// Peripheral clock control register 0 bit definitions:
  6950F
  6951Ftypedef
  6952Fstruct PCLKCR0_BITS
  6953F{                             // bits description
  6954F  Uint16 rsvd1 : 2 ;
  6955F                   // 1:0 reserved
  6956F  Uint16 TBCLKSYNC : 1 ;
  6957F                       // 2 EWPM Module TBCLK enable/sync
  6958F  Uint16 ADCENCLK : 1 ;
  6959F                      // 3 Enable high speed clk to ADC
  6960F  Uint16 I2CAENCLK : 1 ;
  6961F                       // 4 Enable SYSCLKOUT to I2C-A
  6962F  Uint16 SCICENCLK : 1 ;
  6963F                       // 5 Enalbe low speed clk to SCI-C
  6964F  Uint16 rsvd2 : 2 ;
  6965F                   // 7:6 reserved
  6966F  Uint16 SPIAENCLK : 1 ;
  6967F                       // 8 Enable low speed clk to SPI-A
  6968F  Uint16 rsvd3 : 1 ;
  6969F                   // 9 reserved
  6970F  Uint16 SCIAENCLK : 1 ;
  6971F                       // 10 Enable low speed clk to SCI-A
  6972F  Uint16 SCIBENCLK : 1 ;
  6973F                       // 11 Enable low speed clk to SCI-B
  6974F  Uint16 MCBSPAENCLK : 1 ;
  6975F                         // 12 Enable low speed clk to McBSP-A
  6976F  Uint16 MCBSPBENCLK : 1 ;
  6977F                         // 13 Enable low speed clk to McBSP-B
  6978F  Uint16 ECANAENCLK : 1 ;
  6979F                        // 14 Enable system clk to eCAN-A
  6980F  Uint16 ECANBENCLK : 1 ;
  6981F                        // 15 Enable system clk to eCAN-B
  6982F} PCLKCR0_BITS ;
  6983F
  6984Ftypedef
  6985Funion PCLKCR0_REG
  6986F{
  6987F  Uint16 all ;
  6988F  struct PCLKCR0_BITS bit ;
  6989F} PCLKCR0_REG ;
  6990F// Peripheral clock control register 1 bit definitions:
  6991F
  6992Ftypedef
  6993Fstruct PCLKCR1_BITS
  6994F{                             // bits description
  6995F  Uint16 EPWM1ENCLK : 1 ;
  6996F                        // 0 Enable SYSCLKOUT to EPWM1
  6997F  Uint16 EPWM2ENCLK : 1 ;
  6998F                        // 1 Enable SYSCLKOUT to EPWM2
  6999F  Uint16 EPWM3ENCLK : 1 ;
  7000F                        // 2 Enable SYSCLKOUT to EPWM3
  7001F  Uint16 EPWM4ENCLK : 1 ;
  7002F                        // 3 Enable SYSCLKOUT to EPWM4
  7003F  Uint16 EPWM5ENCLK : 1 ;
  7004F                        // 4 Enable SYSCLKOUT to EPWM5
  7005F  Uint16 EPWM6ENCLK : 1 ;
  7006F                        // 5 Enable SYSCLKOUT to EPWM6
  7007F  Uint16 rsvd1 : 2 ;
  7008F                   // 7:6 reserved
  7009F  Uint16 ECAP1ENCLK : 1 ;
  7010F                        // 8 Enable SYSCLKOUT to ECAP1
  7011F  Uint16 ECAP2ENCLK : 1 ;
  7012F                        // 9 Enable SYSCLKOUT to ECAP2
  7013F  Uint16 ECAP3ENCLK : 1 ;
  7014F                        // 10 Enable SYSCLKOUT to ECAP3
  7015F  Uint16 ECAP4ENCLK : 1 ;
  7016F                        // 11 Enable SYSCLKOUT to ECAP4
  7017F  Uint16 ECAP5ENCLK : 1 ;
  7018F                        // 12 Enable SYSCLKOUT to ECAP5
  7019F  Uint16 ECAP6ENCLK : 1 ;
  7020F                        // 13 Enable SYSCLKOUT to ECAP6
  7021F  Uint16 EQEP1ENCLK : 1 ;
  7022F                        // 14 Enable SYSCLKOUT to EQEP1
  7023F  Uint16 EQEP2ENCLK : 1 ;
  7024F                        // 15 Enable SYSCLKOUT to EQEP2
  7025F} PCLKCR1_BITS ;
  7026F
  7027Ftypedef
  7028Funion PCLKCR1_REG
  7029F{
  7030F  Uint16 all ;
  7031F  struct PCLKCR1_BITS bit ;
  7032F} PCLKCR1_REG ;
  7033F// Peripheral clock control register 2 bit definitions:
  7034F
  7035Ftypedef
  7036Fstruct PCLKCR3_BITS
  7037F{                             // bits description
  7038F  Uint16 rsvd1 : 8 ;
  7039F                   // 7:0 reserved
  7040F  Uint16 CPUTIMER0ENCLK : 1 ;
  7041F                            // 8 Enable SYSCLKOUT to CPU-Timer 0
  7042F  Uint16 CPUTIMER1ENCLK : 1 ;
  7043F                            // 9 Enable SYSCLKOUT to CPU-Timer 1
  7044F  Uint16 CPUTIMER2ENCLK : 1 ;
  7045F                            // 10 Enable SYSCLKOUT to CPU-Timer 2
  7046F  Uint16 DMAENCLK : 1 ;
  7047F                      // 11 Enable the DMA clock
  7048F  Uint16 XINTFENCLK : 1 ;
  7049F                        // 12 Enable SYSCLKOUT to XINTF
  7050F  Uint16 GPIOINENCLK : 1 ;
  7051F                         // Enable GPIO input clock
  7052F  Uint16 rsvd2 : 2 ;
  7053F                   // 15:14 reserved
  7054F} PCLKCR3_BITS ;
  7055F
  7056Ftypedef
  7057Funion PCLKCR3_REG
  7058F{
  7059F  Uint16 all ;
  7060F  struct PCLKCR3_BITS bit ;
  7061F} PCLKCR3_REG ;
  7062F// PLL control register bit definitions:
  7063F
  7064Ftypedef
  7065Fstruct PLLCR_BITS
  7066F{                           // bits description
  7067F  Uint16 DIV : 4 ;
  7068F                 // 3:0 Set clock ratio for the PLL
  7069F  Uint16 rsvd1 : 12 ;
  7070F                    // 15:4 reserved
  7071F} PLLCR_BITS ;
  7072F
  7073Ftypedef
  7074Funion PLLCR_REG
  7075F{
  7076F  Uint16 all ;
  7077F  struct PLLCR_BITS bit ;
  7078F} PLLCR_REG ;
  7079F// Low Power Mode 0 control register bit definitions:
  7080F
  7081Ftypedef
  7082Fstruct LPMCR0_BITS
  7083F{                            // bits description
  7084F  Uint16 LPM : 2 ;
  7085F                 // 1:0 Set the low power mode
  7086F  Uint16 QUALSTDBY : 6 ;
  7087F                       // 7:2 Qualification
  7088F  Uint16 rsvd1 : 7 ;
  7089F                   // 14:8 reserved
  7090F  Uint16 WDINTE : 1 ;
  7091F                    // 15 Enables WD to wake the device from STANDBY
  7092F} LPMCR0_BITS ;
  7093F
  7094Ftypedef
  7095Funion LPMCR0_REG
  7096F{
  7097F  Uint16 all ;
  7098F  struct LPMCR0_BITS bit ;
  7099F} LPMCR0_REG ;
  7100F// Dual-mapping configuration register bit definitions:
  7101F
  7102Ftypedef
  7103Fstruct MAPCNF_BITS
  7104F{                            // bits description
  7105F  Uint16 MAPEPWM : 1 ;// 0 EPWM dual-map enable
  7106F  Uint16 rsvd1 : 15 ;// 15:1 reserved
  7107F} MAPCNF_BITS ;
  7108F
  7109Ftypedef
  7110Funion MAPCNF_REG
  7111F{
  7112F  Uint16 all ;
  7113F  struct MAPCNF_BITS bit ;
  7114F} MAPCNF_REG ;
  7115F//---------------------------------------------------------------------------
  7116F// System Control Register File:
  7117F//
  7118F
  7119Ftypedef
  7120Fstruct SYS_CTRL_REGS
  7121F{
  7122F  Uint16 rsvd1 ; // 0
  7123F  union PLLSTS_REG PLLSTS ; // 1
  7124F  Uint16 rsvd2 [ 8 ] ;
  7125F                    // 2-9
  7126F  union HISPCP_REG HISPCP ; // 10: High-speed peripheral clock pre-scaler
  7127F  union LOSPCP_REG LOSPCP ; // 11: Low-speed peripheral clock pre-scaler
  7128F  union PCLKCR0_REG PCLKCR0 ; // 12: Peripheral clock control register
  7129F  union PCLKCR1_REG PCLKCR1 ; // 13: Peripheral clock control register
  7130F  union LPMCR0_REG LPMCR0 ; // 14: Low-power mode control register 0
  7131F  Uint16 rsvd3 ; // 15: reserved
  7132F  union PCLKCR3_REG PCLKCR3 ; // 16: Peripheral clock control register
  7133F  union PLLCR_REG PLLCR ;
  7134F                          // 17: PLL control register
  7135F   // No bit definitions are defined for SCSR because
  7136F   // a read-modify-write instruction can clear the WDOVERRIDE bit
  7137F  Uint16 SCSR ; // 18: System control and status register
  7138F  Uint16 WDCNTR ; // 19: WD counter register
  7139F  Uint16 rsvd4 ; // 20
  7140F  Uint16 WDKEY ; // 21: WD reset key register
  7141F  Uint16 rsvd5 [ 3 ] ;
  7142F                    // 22-24
  7143F   // No bit definitions are defined for WDCR because
  7144F   // the proper value must be written to the WDCHK field
  7145F   // whenever writing to this register.
  7146F  Uint16 WDCR ; // 25: WD timer control register
  7147F  Uint16 rsvd6 [ 4 ] ;
  7148F                    // 26-29
  7149F  union MAPCNF_REG MAPCNF ; // 30: Dual-mapping configuration register
  7150F  Uint16 rsvd7 [ 1 ] ;
  7151F                    // 31
  7152F} SYS_CTRL_REGS ;
  7153F/* --------------------------------------------------- */
  7154F/* CSM Registers */
  7155F/* */
  7156F/* ----------------------------------------------------*/
  7157F/* CSM Status & Control register bit definitions */
  7158F
  7159Ftypedef
  7160Fstruct CSMSCR_BITS
  7161F{                            // bit description
  7162F  Uint16 SECURE : 1 ;
  7163F                    // 0 Secure flag
  7164F  Uint16 rsvd1 : 14 ;
  7165F                    // 14-1 reserved
  7166F  Uint16 FORCESEC : 1 ;
  7167F                      // 15 Force Secure control bit
  7168F} CSMSCR_BITS ;
  7169F/* Allow access to the bit fields or entire register */
  7170F
  7171Ftypedef
  7172Funion CSMSCR_REG
  7173F{
  7174F  Uint16 all ;
  7175F  struct CSMSCR_BITS bit ;
  7176F} CSMSCR_REG ;
  7177F/* CSM Register File */
  7178F
  7179Ftypedef
  7180Fstruct CSM_REGS
  7181F{
  7182F  Uint16 KEY0 ; // KEY reg bits 15-0
  7183F  Uint16 KEY1 ; // KEY reg bits 31-16
  7184F  Uint16 KEY2 ; // KEY reg bits 47-32
  7185F  Uint16 KEY3 ; // KEY reg bits 63-48
  7186F  Uint16 KEY4 ; // KEY reg bits 79-64
  7187F  Uint16 KEY5 ; // KEY reg bits 95-80
  7188F  Uint16 KEY6 ; // KEY reg bits 111-96
  7189F  Uint16 KEY7 ; // KEY reg bits 127-112
  7190F  Uint16 rsvd1 ; // reserved
  7191F  Uint16 rsvd2 ; // reserved
  7192F  Uint16 rsvd3 ; // reserved
  7193F  Uint16 rsvd4 ; // reserved
  7194F  Uint16 rsvd5 ; // reserved
  7195F  Uint16 rsvd6 ; // reserved
  7196F  Uint16 rsvd7 ; // reserved
  7197F  union CSMSCR_REG CSMSCR ; // CSM Status & Control register
  7198F} CSM_REGS ;
  7199F/* Password locations */
  7200F
  7201Ftypedef
  7202Fstruct CSM_PWL
  7203F{
  7204F  Uint16 PSWD0 ; // PSWD bits 15-0
  7205F  Uint16 PSWD1 ; // PSWD bits 31-16
  7206F  Uint16 PSWD2 ; // PSWD bits 47-32
  7207F  Uint16 PSWD3 ; // PSWD bits 63-48
  7208F  Uint16 PSWD4 ; // PSWD bits 79-64
  7209F  Uint16 PSWD5 ; // PSWD bits 95-80
  7210F  Uint16 PSWD6 ; // PSWD bits 111-96
  7211F  Uint16 PSWD7 ; // PSWD bits 127-112
  7212F} CSM_PWL ;
  7213F/* Flash Registers */
  7214F#define FLASH_SLEEP 0x0000 ;
  7215F#define FLASH_STANDBY 0x0001 ;
  7216F#define FLASH_ACTIVE 0x0003 ;
  7217F/* Flash Option Register bit definitions */
  7218F
  7219Ftypedef
  7220Fstruct FOPT_BITS
  7221F{                          // bit description
  7222F  Uint16 ENPIPE : 1 ;
  7223F                    // 0 Enable Pipeline Mode
  7224F  Uint16 rsvd : 15 ;
  7225F                   // 1-15 reserved
  7226F} FOPT_BITS ;
  7227F/* Allow access to the bit fields or entire register */
  7228F
  7229Ftypedef
  7230Funion FOPT_REG
  7231F{
  7232F  Uint16 all ;
  7233F  struct FOPT_BITS bit ;
  7234F} FOPT_REG ;
  7235F/* Flash Power Modes Register bit definitions */
  7236F
  7237Ftypedef
  7238Fstruct FPWR_BITS
  7239F{                          // bit description
  7240F  Uint16 PWR : 2 ;
  7241F                 // 0-1 Power Mode bits
  7242F  Uint16 rsvd : 14 ;
  7243F                   // 2-15 reserved
  7244F} FPWR_BITS ;
  7245F/* Allow access to the bit fields or entire register */
  7246F
  7247Ftypedef
  7248Funion FPWR_REG
  7249F{
  7250F  Uint16 all ;
  7251F  struct FPWR_BITS bit ;
  7252F} FPWR_REG ;
  7253F/* Flash Status Register bit definitions */
  7254F
  7255Ftypedef
  7256Fstruct FSTATUS_BITS
  7257F{                             // bit description
  7258F  Uint16 PWRS : 2 ;
  7259F                  // 0-1 Power Mode Status bits
  7260F  Uint16 STDBYWAITS : 1 ;
  7261F                        // 2 Bank/Pump Sleep to Standby Wait Counter Status bits
  7262F  Uint16 ACTIVEWAITS : 1 ;
  7263F                         // 3 Bank/Pump Standby to Active Wait Counter Status bits
  7264F  Uint16 rsvd1 : 4 ;
  7265F                   // 4-7 reserved
  7266F  Uint16 V3STAT : 1 ;
  7267F                    // 8 VDD3V Status Latch bit
  7268F  Uint16 rsvd2 : 7 ;
  7269F                   // 9-15 reserved
  7270F} FSTATUS_BITS ;
  7271F/* Allow access to the bit fields or entire register */
  7272F
  7273Ftypedef
  7274Funion FSTATUS_REG
  7275F{
  7276F  Uint16 all ;
  7277F  struct FSTATUS_BITS bit ;
  7278F} FSTATUS_REG ;
  7279F/* Flash Sleep to Standby Wait Counter Register bit definitions */
  7280F
  7281Ftypedef
  7282Fstruct FSTDBYWAIT_BITS
  7283F{                                // bit description
  7284F  Uint16 STDBYWAIT : 9 ;
  7285F                       // 0-8 Bank/Pump Sleep to Standby Wait Count bits
  7286F  Uint16 rsvd : 7 ;
  7287F                  // 9-15 reserved
  7288F} FSTDBYWAIT_BITS ;
  7289F/* Allow access to the bit fields or entire register */
  7290F
  7291Ftypedef
  7292Funion FSTDBYWAIT_REG
  7293F{
  7294F  Uint16 all ;
  7295F  struct FSTDBYWAIT_BITS bit ;
  7296F} FSTDBYWAIT_REG ;
  7297F/* Flash Standby to Active Wait Counter Register bit definitions */
  7298F
  7299Ftypedef
  7300Fstruct FACTIVEWAIT_BITS
  7301F{                                 // bit description
  7302F  Uint16 ACTIVEWAIT : 9 ;
  7303F                        // 0-8 Bank/Pump Standby to Active Wait Count bits
  7304F  Uint16 rsvd : 7 ;
  7305F                  // 9-15 reserved
  7306F} FACTIVEWAIT_BITS ;
  7307F/* Allow access to the bit fields or entire register */
  7308F
  7309Ftypedef
  7310Funion FACTIVEWAIT_REG
  7311F{
  7312F  Uint16 all ;
  7313F  struct FACTIVEWAIT_BITS bit ;
  7314F} FACTIVEWAIT_REG ;
  7315F/* Bank Read Access Wait State Register bit definitions */
  7316F
  7317Ftypedef
  7318Fstruct FBANKWAIT_BITS
  7319F{                               // bit description
  7320F  Uint16 RANDWAIT : 4 ;
  7321F                      // 0-3 Flash Random Read Wait State bits
  7322F  Uint16 rsvd1 : 4 ;
  7323F                   // 4-7 reserved
  7324F  Uint16 PAGEWAIT : 4 ;
  7325F                      // 8-11 Flash Paged Read Wait State bits
  7326F  Uint16 rsvd2 : 4 ;
  7327F                   // 12-15 reserved
  7328F} FBANKWAIT_BITS ;
  7329F/* Allow access to the bit fields or entire register */
  7330F
  7331Ftypedef
  7332Funion FBANKWAIT_REG
  7333F{
  7334F  Uint16 all ;
  7335F  struct FBANKWAIT_BITS bit ;
  7336F} FBANKWAIT_REG ;
  7337F/* OTP Read Access Wait State Register bit definitions */
  7338F
  7339Ftypedef
  7340Fstruct FOTPWAIT_BITS
  7341F{                              // bit description
  7342F  Uint16 OTPWAIT : 5 ;
  7343F                     // 0-4 OTP Read Wait State bits
  7344F  Uint16 rsvd : 11 ;
  7345F                   // 5-15 reserved
  7346F} FOTPWAIT_BITS ;
  7347F/* Allow access to the bit fields or entire register */
  7348F
  7349Ftypedef
  7350Funion FOTPWAIT_REG
  7351F{
  7352F  Uint16 all ;
  7353F  struct FOTPWAIT_BITS bit ;
  7354F} FOTPWAIT_REG ;
  7355F
  7356Ftypedef
  7357Fstruct FLASH_REGS
  7358F{
  7359F  union FOPT_REG FOPT ; // Option Register
  7360F  Uint16 rsvd1 ; // reserved
  7361F  union FPWR_REG FPWR ; // Power Modes Register
  7362F  union FSTATUS_REG FSTATUS ; // Status Register
  7363F  union FSTDBYWAIT_REG FSTDBYWAIT ; // Pump/Bank Sleep to Standby Wait State Register
  7364F  union FACTIVEWAIT_REG FACTIVEWAIT ; // Pump/Bank Standby to Active Wait State Register
  7365F  union FBANKWAIT_REG FBANKWAIT ; // Bank Read Access Wait State Register
  7366F  union FOTPWAIT_REG FOTPWAIT ; // OTP Read Access Wait State Register
  7367F} FLASH_REGS ;
  7368F//---------------------------------------------------------------------------
  7369F// System Control External References & Function Declarations:
  7370F//
  7371F
  7372Fextern volatile struct SYS_CTRL_REGS
  7373F  SysCtrlRegs ;
  7374F
  7375Fextern volatile struct CSM_REGS
  7376F  CsmRegs ;
  7377F
  7378Fextern volatile struct CSM_PWL
  7379F  CsmPwl ;
  7380F
  7381Fextern volatile struct FLASH_REGS
  7382F  FlashRegs ;
  7383F       // end of DSP2833x_SYS_CTRL_H definition
  7384F//===========================================================================
  7385F// End of file.
  7386F//===========================================================================
  7387F 
  7388F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_SysCtrl.h*/
  7389F/*   CLOSE_FILE Include File */
  7390F 
  7391F            // System Control/Power Modes
  7392F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_XIntrupt.h */
  7393F// TI File $Revision: /main/1 $
  7394F// Checkin $Date: August 18, 2006 13:52:39 $
  7395F//###########################################################################
  7396F//
  7397F// FILE: DSP2833x_XIntrupt.h
  7398F//
  7399F// TITLE: DSP2833x Device External Interrupt Register Definitions.
  7400F//
  7401F//###########################################################################
  7402F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  7403F// $Release Date: August 4, 2009 $
  7404F//###########################################################################
  7405F#ifndef DSP2833x_XINTRUPT_H
  7406F#define DSP2833x_XINTRUPT_H
  7407F//---------------------------------------------------------------------------
  7408F
  7409Fstruct XINTCR_BITS
  7410F{
  7411F  Uint16 ENABLE : 1 ;// 0 enable/disable
  7412F  Uint16 rsvd1 : 1 ;// 1 reserved
  7413F  Uint16 POLARITY : 2 ;// 3:2 pos/neg, both triggered
  7414F  Uint16 rsvd2 : 12 ;//15:4 reserved
  7415F} ;
  7416F
  7417Funion XINTCR_REG
  7418F{
  7419F  Uint16 all ;
  7420F  struct XINTCR_BITS bit ;
  7421F} ;
  7422F
  7423Fstruct XNMICR_BITS
  7424F{
  7425F  Uint16 ENABLE : 1 ;// 0 enable/disable
  7426F  Uint16 SELECT : 1 ;// 1 Timer 1 or XNMI connected to int13
  7427F  Uint16 POLARITY : 2 ;// 3:2 pos/neg, or both triggered
  7428F  Uint16 rsvd2 : 12 ;// 15:4 reserved
  7429F} ;
  7430F
  7431Funion XNMICR_REG
  7432F{
  7433F  Uint16 all ;
  7434F  struct XNMICR_BITS bit ;
  7435F} ;
  7436F//---------------------------------------------------------------------------
  7437F// External Interrupt Register File:
  7438F//
  7439F
  7440Fstruct XINTRUPT_REGS
  7441F{
  7442F  union XINTCR_REG XINT1CR ;
  7443F  union XINTCR_REG XINT2CR ;
  7444F  union XINTCR_REG XINT3CR ;
  7445F  union XINTCR_REG XINT4CR ;
  7446F  union XINTCR_REG XINT5CR ;
  7447F  union XINTCR_REG XINT6CR ;
  7448F  union XINTCR_REG XINT7CR ;
  7449F  union XNMICR_REG XNMICR ;
  7450F  Uint16 XINT1CTR ;
  7451F  Uint16 XINT2CTR ;
  7452F  Uint16 rsvd [ 5 ] ;
  7453F  Uint16 XNMICTR ;
  7454F} ;
  7455F//---------------------------------------------------------------------------
  7456F// External Interrupt References & Function Declarations:
  7457F//
  7458F
  7459Fextern volatile struct XINTRUPT_REGS
  7460F  XIntruptRegs ;
  7461F       /* extern "C" */
  7462F       // end of DSP2833x_XINTF_H definition
  7463F//===========================================================================
  7464F// End of file.
  7465F//===========================================================================
  7466F 
  7467F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_XIntrupt.h*/
  7468F/*   CLOSE_FILE Include File */
  7469F 
  7470F           // External Interrupts
  7471F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Xintf.h */
  7472F// TI File $Revision: /main/4 $
  7473F// Checkin $Date: July 27, 2009 13:57:25 $
  7474F//###########################################################################
  7475F//
  7476F// FILE: DSP2833x_Xintf.h
  7477F//
  7478F// TITLE: DSP2833x Device External Interface Register Definitions.
  7479F//
  7480F//###########################################################################
  7481F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  7482F// $Release Date: August 4, 2009 $
  7483F//###########################################################################
  7484F#ifndef DSP2833x_XINTF_H
  7485F#define DSP2833x_XINTF_H
  7486F// XINTF timing register bit definitions:
  7487F
  7488Fstruct XTIMING_BITS
  7489F{                     // bits description
  7490F  Uint16 XWRTRAIL : 2 ;
  7491F                      // 1:0 Write access trail timing
  7492F  Uint16 XWRACTIVE : 3 ;
  7493F                       // 4:2 Write access active timing
  7494F  Uint16 XWRLEAD : 2 ;
  7495F                     // 6:5 Write access lead timing
  7496F  Uint16 XRDTRAIL : 2 ;
  7497F                      // 8:7 Read access trail timing
  7498F  Uint16 XRDACTIVE : 3 ;
  7499F                       // 11:9 Read access active timing
  7500F  Uint16 XRDLEAD : 2 ;
  7501F                     // 13:12 Read access lead timing
  7502F  Uint16 USEREADY : 1 ;
  7503F                      // 14 Extend access using HW waitstates
  7504F  Uint16 READYMODE : 1 ;
  7505F                       // 15 Ready mode
  7506F  Uint16 XSIZE : 2 ;
  7507F                   // 17:16 XINTF bus width - must be written as 11b
  7508F  Uint16 rsvd1 : 4 ;
  7509F                   // 21:18 reserved
  7510F  Uint16 X2TIMING : 1 ;
  7511F                      // 22 Double lead/active/trail timing
  7512F  Uint16 rsvd3 : 9 ;
  7513F                   // 31:23 reserved
  7514F} ;
  7515F
  7516Funion XTIMING_REG
  7517F{
  7518F  Uint32 all ;
  7519F  struct XTIMING_BITS bit ;
  7520F} ;
  7521F// XINTF control register bit definitions:
  7522F
  7523Fstruct XINTCNF2_BITS
  7524F{                      // bits description
  7525F  Uint16 WRBUFF : 2 ;
  7526F                    // 1:0 Write buffer depth
  7527F  Uint16 CLKMODE : 1 ;
  7528F                     // 2 Ratio for XCLKOUT with respect to XTIMCLK
  7529F  Uint16 CLKOFF : 1 ;
  7530F                    // 3 Disable XCLKOUT
  7531F  Uint16 rsvd1 : 2 ;
  7532F                   // 5:4 reserved
  7533F  Uint16 WLEVEL : 2 ;
  7534F                    // 7:6 Current level of the write buffer
  7535F  Uint16 rsvd2 : 1 ;
  7536F                   // 8 reserved
  7537F  Uint16 HOLD : 1 ;
  7538F                  // 9 Hold enable/disable
  7539F  Uint16 HOLDS : 1 ;
  7540F                   // 10 Current state of HOLDn input
  7541F  Uint16 HOLDAS : 1 ;
  7542F                    // 11 Current state of HOLDAn output
  7543F  Uint16 rsvd3 : 4 ;
  7544F                   // 15:12 reserved
  7545F  Uint16 XTIMCLK : 3 ;
  7546F                     // 18:16 Ratio for XTIMCLK
  7547F  Uint16 rsvd4 : 13 ;
  7548F                    // 31:19 reserved
  7549F} ;
  7550F
  7551Funion XINTCNF2_REG
  7552F{
  7553F  Uint32 all ;
  7554F  struct XINTCNF2_BITS bit ;
  7555F} ;
  7556F// XINTF bank switching register bit definitions:
  7557F
  7558Fstruct XBANK_BITS
  7559F{                   // bits description
  7560F  Uint16 BANK : 3 ;
  7561F                  // 2:0 Zone for which banking is enabled
  7562F  Uint16 BCYC : 3 ;
  7563F                  // 5:3 XTIMCLK cycles to add
  7564F  Uint16 rsvd : 10 ;
  7565F                   // 15:6 reserved
  7566F} ;
  7567F
  7568Funion XBANK_REG
  7569F{
  7570F  Uint16 all ;
  7571F  struct XBANK_BITS bit ;
  7572F} ;
  7573F
  7574Fstruct XRESET_BITS
  7575F{
  7576F  Uint16 XHARDRESET : 1 ;
  7577F  Uint16 rsvd1 : 15 ;
  7578F} ;
  7579F
  7580Funion XRESET_REG
  7581F{
  7582F  Uint16 all ;
  7583F  struct XRESET_BITS bit ;
  7584F} ;
  7585F//---------------------------------------------------------------------------
  7586F// XINTF Register File:
  7587F//
  7588F
  7589Fstruct XINTF_REGS
  7590F{
  7591F  union XTIMING_REG XTIMING0 ;
  7592F  Uint32 rsvd1 [ 5 ] ;
  7593F  union XTIMING_REG XTIMING6 ;
  7594F  union XTIMING_REG XTIMING7 ;
  7595F  Uint32 rsvd2 [ 2 ] ;
  7596F  union XINTCNF2_REG XINTCNF2 ;
  7597F  Uint32 rsvd3 ;
  7598F  union XBANK_REG XBANK ;
  7599F  Uint16 rsvd4 ;
  7600F  Uint16 XREVISION ;
  7601F  Uint16 rsvd5 [ 2 ] ;
  7602F  union XRESET_REG XRESET ;
  7603F} ;
  7604F//---------------------------------------------------------------------------
  7605F// XINTF External References & Function Declarations:
  7606F//
  7607F
  7608Fextern volatile struct XINTF_REGS
  7609F  XintfRegs ;
  7610F       /* extern "C" */
  7611F       // end of DSP2833x_XINTF_H definition
  7612F//===========================================================================
  7613F// No more.
  7614F//===========================================================================
  7615F 
  7616F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Xintf.h*/
  7617F/*   CLOSE_FILE Include File */
  7618F 
  7619F              // XINTF External Interface
  7620F#define DSP28_EPWM1 1
  7621F#define DSP28_EPWM2 1
  7622F#define DSP28_EPWM3 1
  7623F#define DSP28_EPWM4 1
  7624F#define DSP28_EPWM5 1
  7625F#define DSP28_EPWM6 1
  7626F#define DSP28_ECAP1 1
  7627F#define DSP28_ECAP2 1
  7628F#define DSP28_ECAP3 1
  7629F#define DSP28_ECAP4 1
  7630F#define DSP28_ECAP5 1
  7631F#define DSP28_ECAP6 1
  7632F#define DSP28_EQEP1 1
  7633F#define DSP28_EQEP2 1
  7634F#define DSP28_ECANA 1
  7635F#define DSP28_ECANB 1
  7636F#define DSP28_MCBSPA 1
  7637F#define DSP28_MCBSPB 1
  7638F#define DSP28_SPIA 1
  7639F#define DSP28_SCIA 1
  7640F#define DSP28_SCIB 1
  7641F#define DSP28_SCIC 1
  7642F#define DSP28_I2CA 1
  7643F       // end DSP28_28335
  7644F       // end DSP28_28334
  7645F       // end DSP28_28332
  7646F       /* extern "C" */
  7647F       // end of DSP2833x_DEVICE_H definition
  7648F//===========================================================================
  7649F// End of file.
  7650F//===========================================================================
  7651F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Device.h*/
  7652F/*   CLOSE_FILE Include File */
  7653F 
  7654F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Examples.h */
  7655F// TI File $Revision: /main/9 $
  7656F// Checkin $Date: July 2, 2008 14:31:12 $
  7657F//###########################################################################
  7658F//
  7659F// FILE: DSP2833x_Examples.h
  7660F//
  7661F// TITLE: DSP2833x Device Definitions.
  7662F//
  7663F//###########################################################################
  7664F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  7665F// $Release Date: August 4, 2009 $
  7666F//###########################################################################
  7667F#ifndef DSP2833x_EXAMPLES_H
  7668F#define DSP2833x_EXAMPLES_H
  7669F/*-----------------------------------------------------------------------------
  7670F      Specify the PLL control register (PLLCR) and divide select (DIVSEL) value.
  7671F-----------------------------------------------------------------------------*/
  7672F//#define DSP28_DIVSEL 0 // Enable /4 for SYSCLKOUT
  7673F//#define DSP28_DIVSEL 1 // Enable /4 for SYSCKOUT
  7674F#define DSP28_DIVSEL 2
  7675F//#define DSP28_DIVSEL 3 // Enable /1 for SYSCLKOUT
  7676F#define DSP28_PLLCR 10
  7677F//#define DSP28_PLLCR 9
  7678F//#define DSP28_PLLCR 8
  7679F//#define DSP28_PLLCR 7
  7680F//#define DSP28_PLLCR 6
  7681F//#define DSP28_PLLCR 5
  7682F//#define DSP28_PLLCR 4
  7683F//#define DSP28_PLLCR 3
  7684F//#define DSP28_PLLCR 2
  7685F//#define DSP28_PLLCR 1
  7686F//#define DSP28_PLLCR 0 // PLL is bypassed in this mode
  7687F//----------------------------------------------------------------------------
  7688F/*-----------------------------------------------------------------------------
  7689F      Specify the clock rate of the CPU (SYSCLKOUT) in nS.
  7690F      Take into account the input clock frequency and the PLL multiplier
  7691F      selected in step 1.
  7692F      Use one of the values provided, or define your own.
  7693F      The trailing L is required tells the compiler to treat
  7694F      the number as a 64-bit value.
  7695F      Only one statement should be uncommented.
  7696F      Example 1:150 MHz devices:
  7697F                CLKIN is a 30MHz crystal.
  7698F                In step 1 the user specified PLLCR = 0xA for a
  7699F                150Mhz CPU clock (SYSCLKOUT = 150MHz).
  7700F                In this case, the CPU_RATE will be 6.667L
  7701F                Uncomment the line: #define CPU_RATE 6.667L
  7702F      Example 2: 100 MHz devices:
  7703F                  CLKIN is a 20MHz crystal.
  7704F                      In step 1 the user specified PLLCR = 0xA for a
  7705F                      100Mhz CPU clock (SYSCLKOUT = 100MHz).
  7706F                      In this case, the CPU_RATE will be 10.000L
  7707F                  Uncomment the line: #define CPU_RATE 10.000L
  7708F-----------------------------------------------------------------------------*/
  7709F#define CPU_RATE 6.667L
  7710F//#define CPU_RATE 7.143L // for a 140MHz CPU clock speed (SYSCLKOUT)
  7711F//#define CPU_RATE 8.333L // for a 120MHz CPU clock speed (SYSCLKOUT)
  7712F//#define CPU_RATE 10.000L // for a 100MHz CPU clock speed (SYSCLKOUT)
  7713F//#define CPU_RATE 13.330L // for a 75MHz CPU clock speed (SYSCLKOUT)
  7714F//#define CPU_RATE 20.000L // for a 50MHz CPU clock speed (SYSCLKOUT)
  7715F//#define CPU_RATE 33.333L // for a 30MHz CPU clock speed (SYSCLKOUT)
  7716F//#define CPU_RATE 41.667L // for a 24MHz CPU clock speed (SYSCLKOUT)
  7717F//#define CPU_RATE 50.000L // for a 20MHz CPU clock speed (SYSCLKOUT)
  7718F//#define CPU_RATE 66.667L // for a 15MHz CPU clock speed (SYSCLKOUT)
  7719F//#define CPU_RATE 100.000L // for a 10MHz CPU clock speed (SYSCLKOUT)
  7720F//----------------------------------------------------------------------------
  7721F/*-----------------------------------------------------------------------------
  7722F      Target device (in DSP2833x_Device.h) determines CPU frequency
  7723F      (for examples) - either 150 MHz (for 28335 and 28334) or 100 MHz
  7724F      (for 28332). User does not have to change anything here.
  7725F-----------------------------------------------------------------------------*/
  7726F#define CPU_FRQ_100MHZ 0
  7727F#define CPU_FRQ_150MHZ 1
  7728F//---------------------------------------------------------------------------
  7729F// Include Example Header Files:
  7730F//
  7731F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_GlobalPrototypes.h */
  7732F// TI File $Revision: /main/11 $
  7733F// Checkin $Date: May 12, 2008 14:30:08 $
  7734F//###########################################################################
  7735F//
  7736F// FILE: DSP2833x_GlobalPrototypes.h
  7737F//
  7738F// TITLE: Global prototypes for DSP2833x Examples
  7739F//
  7740F//###########################################################################
  7741F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  7742F// $Release Date: August 4, 2009 $
  7743F//###########################################################################
  7744F#ifndef DSP2833x_GLOBALPROTOTYPES_H
  7745F#define DSP2833x_GLOBALPROTOTYPES_H
  7746F/*---- shared global function prototypes -----------------------------------*/
  7747F
  7748Fextern void
  7749F  InitAdc ( void ) ;
  7750F
  7751Fextern void
  7752F  DMAInitialize ( void ) ;
  7753F// DMA Channel 1
  7754F
  7755Fextern void
  7756T  DMACH1AddrConfig (
  7757F  volatile Uint16 * DMA_Dest ,
  7758F  volatile Uint16 * DMA_Source ) ;
  7759F
  7760Fextern void
  7761T  DMACH1BurstConfig (
  7762F  Uint16 bsize ,
  7763F  int16 srcbstep ,
  7764F  int16 desbstep ) ;
  7765F
  7766Fextern void
  7767T  DMACH1TransferConfig (
  7768F  Uint16 tsize ,
  7769F  int16 srctstep ,
  7770F  int16 deststep ) ;
  7771F
  7772Fextern void
  7773T  DMACH1WrapConfig (
  7774F  Uint16 srcwsize ,
  7775F  int16 srcwstep ,
  7776F  Uint16 deswsize ,
  7777F  int16 deswstep ) ;
  7778F
  7779Fextern void
  7780T  DMACH1ModeConfig (
  7781F  Uint16 persel ,
  7782F  Uint16 perinte ,
  7783F  Uint16 oneshot ,
  7784F  Uint16 cont ,
  7785F  Uint16 synce ,
  7786F  Uint16 syncsel ,
  7787F  Uint16 ovrinte ,
  7788F  Uint16 datasize ,
  7789F  Uint16 chintmode ,
  7790F  Uint16 chinte ) ;
  7791F
  7792Fextern void
  7793F  StartDMACH1 ( void ) ;
  7794F// DMA Channel 2
  7795F
  7796Fextern void
  7797T  DMACH2AddrConfig (
  7798F  volatile Uint16 * DMA_Dest ,
  7799F  volatile Uint16 * DMA_Source ) ;
  7800F
  7801Fextern void
  7802T  DMACH2BurstConfig (
  7803F  Uint16 bsize ,
  7804F  int16 srcbstep ,
  7805F  int16 desbstep ) ;
  7806F
  7807Fextern void
  7808T  DMACH2TransferConfig (
  7809F  Uint16 tsize ,
  7810F  int16 srctstep ,
  7811F  int16 deststep ) ;
  7812F
  7813Fextern void
  7814T  DMACH2WrapConfig (
  7815F  Uint16 srcwsize ,
  7816F  int16 srcwstep ,
  7817F  Uint16 deswsize ,
  7818F  int16 deswstep ) ;
  7819F
  7820Fextern void
  7821T  DMACH2ModeConfig (
  7822F  Uint16 persel ,
  7823F  Uint16 perinte ,
  7824F  Uint16 oneshot ,
  7825F  Uint16 cont ,
  7826F  Uint16 synce ,
  7827F  Uint16 syncsel ,
  7828F  Uint16 ovrinte ,
  7829F  Uint16 datasize ,
  7830F  Uint16 chintmode ,
  7831F  Uint16 chinte ) ;
  7832F
  7833Fextern void
  7834F  StartDMACH2 ( void ) ;
  7835F// DMA Channel 3
  7836F
  7837Fextern void
  7838T  DMACH3AddrConfig (
  7839F  volatile Uint16 * DMA_Dest ,
  7840F  volatile Uint16 * DMA_Source ) ;
  7841F
  7842Fextern void
  7843T  DMACH3BurstConfig (
  7844F  Uint16 bsize ,
  7845F  int16 srcbstep ,
  7846F  int16 desbstep ) ;
  7847F
  7848Fextern void
  7849T  DMACH3TransferConfig (
  7850F  Uint16 tsize ,
  7851F  int16 srctstep ,
  7852F  int16 deststep ) ;
  7853F
  7854Fextern void
  7855T  DMACH3WrapConfig (
  7856F  Uint16 srcwsize ,
  7857F  int16 srcwstep ,
  7858F  Uint16 deswsize ,
  7859F  int16 deswstep ) ;
  7860F
  7861Fextern void
  7862T  DMACH3ModeConfig (
  7863F  Uint16 persel ,
  7864F  Uint16 perinte ,
  7865F  Uint16 oneshot ,
  7866F  Uint16 cont ,
  7867F  Uint16 synce ,
  7868F  Uint16 syncsel ,
  7869F  Uint16 ovrinte ,
  7870F  Uint16 datasize ,
  7871F  Uint16 chintmode ,
  7872F  Uint16 chinte ) ;
  7873F
  7874Fextern void
  7875F  StartDMACH3 ( void ) ;
  7876F// DMA Channel 4
  7877F
  7878Fextern void
  7879T  DMACH4AddrConfig (
  7880F  volatile Uint16 * DMA_Dest ,
  7881F  volatile Uint16 * DMA_Source ) ;
  7882F
  7883Fextern void
  7884T  DMACH4BurstConfig (
  7885F  Uint16 bsize ,
  7886F  int16 srcbstep ,
  7887F  int16 desbstep ) ;
  7888F
  7889Fextern void
  7890T  DMACH4TransferConfig (
  7891F  Uint16 tsize ,
  7892F  int16 srctstep ,
  7893F  int16 deststep ) ;
  7894F
  7895Fextern void
  7896T  DMACH4WrapConfig (
  7897F  Uint16 srcwsize ,
  7898F  int16 srcwstep ,
  7899F  Uint16 deswsize ,
  7900F  int16 deswstep ) ;
  7901F
  7902Fextern void
  7903T  DMACH4ModeConfig (
  7904F  Uint16 persel ,
  7905F  Uint16 perinte ,
  7906F  Uint16 oneshot ,
  7907F  Uint16 cont ,
  7908F  Uint16 synce ,
  7909F  Uint16 syncsel ,
  7910F  Uint16 ovrinte ,
  7911F  Uint16 datasize ,
  7912F  Uint16 chintmode ,
  7913F  Uint16 chinte ) ;
  7914F
  7915Fextern void
  7916F  StartDMACH4 ( void ) ;
  7917F// DMA Channel 5
  7918F
  7919Fextern void
  7920T  DMACH5AddrConfig (
  7921F  volatile Uint16 * DMA_Dest ,
  7922F  volatile Uint16 * DMA_Source ) ;
  7923F
  7924Fextern void
  7925T  DMACH5BurstConfig (
  7926F  Uint16 bsize ,
  7927F  int16 srcbstep ,
  7928F  int16 desbstep ) ;
  7929F
  7930Fextern void
  7931T  DMACH5TransferConfig (
  7932F  Uint16 tsize ,
  7933F  int16 srctstep ,
  7934F  int16 deststep ) ;
  7935F
  7936Fextern void
  7937T  DMACH5WrapConfig (
  7938F  Uint16 srcwsize ,
  7939F  int16 srcwstep ,
  7940F  Uint16 deswsize ,
  7941F  int16 deswstep ) ;
  7942F
  7943Fextern void
  7944T  DMACH5ModeConfig (
  7945F  Uint16 persel ,
  7946F  Uint16 perinte ,
  7947F  Uint16 oneshot ,
  7948F  Uint16 cont ,
  7949F  Uint16 synce ,
  7950F  Uint16 syncsel ,
  7951F  Uint16 ovrinte ,
  7952F  Uint16 datasize ,
  7953F  Uint16 chintmode ,
  7954F  Uint16 chinte ) ;
  7955F
  7956Fextern void
  7957F  StartDMACH5 ( void ) ;
  7958F// DMA Channel 6
  7959F
  7960Fextern void
  7961T  DMACH6AddrConfig (
  7962F  volatile Uint16 * DMA_Dest ,
  7963F  volatile Uint16 * DMA_Source ) ;
  7964F
  7965Fextern void
  7966T  DMACH6BurstConfig (
  7967F  Uint16 bsize ,
  7968F  Uint16 srcbstep ,
  7969F  int16 desbstep ) ;
  7970F
  7971Fextern void
  7972T  DMACH6TransferConfig (
  7973F  Uint16 tsize ,
  7974F  int16 srctstep ,
  7975F  int16 deststep ) ;
  7976F
  7977Fextern void
  7978T  DMACH6WrapConfig (
  7979F  Uint16 srcwsize ,
  7980F  int16 srcwstep ,
  7981F  Uint16 deswsize ,
  7982F  int16 deswstep ) ;
  7983F
  7984Fextern void
  7985T  DMACH6ModeConfig (
  7986F  Uint16 persel ,
  7987F  Uint16 perinte ,
  7988F  Uint16 oneshot ,
  7989F  Uint16 cont ,
  7990F  Uint16 synce ,
  7991F  Uint16 syncsel ,
  7992F  Uint16 ovrinte ,
  7993F  Uint16 datasize ,
  7994F  Uint16 chintmode ,
  7995F  Uint16 chinte ) ;
  7996F
  7997Fextern void
  7998F  StartDMACH6 ( void ) ;
  7999F
  8000Fextern void
  8001F  InitPeripherals ( void ) ;
  8002F
  8003Fextern void
  8004F  InitECan ( void ) ;
  8005F
  8006Fextern void
  8007F  InitECana ( void ) ;
  8008F
  8009Fextern void
  8010F  InitECanGpio ( void ) ;
  8011F
  8012Fextern void
  8013F  InitECanaGpio ( void ) ;
  8014F       // endif DSP28_ECANA
  8015F
  8016Fextern void
  8017F  InitECanb ( void ) ;
  8018F
  8019Fextern void
  8020F  InitECanbGpio ( void ) ;
  8021F       // endif DSP28_ECANB
  8022F
  8023Fextern void
  8024F  InitECap ( void ) ;
  8025F
  8026Fextern void
  8027F  InitECapGpio ( void ) ;
  8028F
  8029Fextern void
  8030F  InitECap1Gpio ( void ) ;
  8031F
  8032Fextern void
  8033F  InitECap2Gpio ( void ) ;
  8034F
  8035Fextern void
  8036F  InitECap3Gpio ( void ) ;
  8037F       // endif DSP28_ECAP3
  8038F
  8039Fextern void
  8040F  InitECap4Gpio ( void ) ;
  8041F       // endif DSP28_ECAP4
  8042F
  8043Fextern void
  8044F  InitECap5Gpio ( void ) ;
  8045F       // endif DSP28_ECAP5
  8046F
  8047Fextern void
  8048F  InitECap6Gpio ( void ) ;
  8049F       // endif DSP28_ECAP6
  8050F
  8051Fextern void
  8052F  InitEPwm ( void ) ;
  8053F
  8054Fextern void
  8055F  InitEPwmGpio ( void ) ;
  8056F
  8057Fextern void
  8058F  InitEPwm1Gpio ( void ) ;
  8059F
  8060Fextern void
  8061F  InitEPwm2Gpio ( void ) ;
  8062F
  8063Fextern void
  8064F  InitEPwm3Gpio ( void ) ;
  8065F
  8066Fextern void
  8067F  InitEPwm4Gpio ( void ) ;
  8068F       // endif DSP28_EPWM4
  8069F
  8070Fextern void
  8071F  InitEPwm5Gpio ( void ) ;
  8072F       // endif DSP28_EPWM5
  8073F
  8074Fextern void
  8075F  InitEPwm6Gpio ( void ) ;
  8076F       // endif DSP28_EPWM6
  8077F
  8078Fextern void
  8079F  InitEQep ( void ) ;
  8080F
  8081Fextern void
  8082F  InitEQepGpio ( void ) ;
  8083F
  8084Fextern void
  8085F  InitEQep1Gpio ( void ) ;
  8086F       // if DSP28_EQEP1
  8087F
  8088Fextern void
  8089F  InitEQep2Gpio ( void ) ;
  8090F       // endif DSP28_EQEP2
  8091F
  8092Fextern void
  8093F  InitGpio ( void ) ;
  8094F
  8095Fextern void
  8096F  InitI2CGpio ( void ) ;
  8097F
  8098Fextern void
  8099F  InitMcbsp ( void ) ;
  8100F
  8101Fextern void
  8102F  InitMcbspa ( void ) ;
  8103F
  8104Fextern void
  8105F  delay_loop ( void ) ;
  8106F
  8107Fextern void
  8108F  InitMcbspaGpio ( void ) ;
  8109F
  8110Fextern void
  8111F  InitMcbspa8bit ( void ) ;
  8112F
  8113Fextern void
  8114F  InitMcbspa12bit ( void ) ;
  8115F
  8116Fextern void
  8117F  InitMcbspa16bit ( void ) ;
  8118F
  8119Fextern void
  8120F  InitMcbspa20bit ( void ) ;
  8121F
  8122Fextern void
  8123F  InitMcbspa24bit ( void ) ;
  8124F
  8125Fextern void
  8126F  InitMcbspa32bit ( void ) ;
  8127F
  8128Fextern void
  8129F  InitMcbspb ( void ) ;
  8130F
  8131Fextern void
  8132F  InitMcbspbGpio ( void ) ;
  8133F
  8134Fextern void
  8135F  InitMcbspb8bit ( void ) ;
  8136F
  8137Fextern void
  8138F  InitMcbspb12bit ( void ) ;
  8139F
  8140Fextern void
  8141F  InitMcbspb16bit ( void ) ;
  8142F
  8143Fextern void
  8144F  InitMcbspb20bit ( void ) ;
  8145F
  8146Fextern void
  8147F  InitMcbspb24bit ( void ) ;
  8148F
  8149Fextern void
  8150F  InitMcbspb32bit ( void ) ;
  8151F       // endif DSP28_MCBSPB
  8152F
  8153Fextern void
  8154F  InitPieCtrl ( void ) ;
  8155F
  8156Fextern void
  8157F  InitPieVectTable ( void ) ;
  8158F
  8159Fextern void
  8160F  InitSci ( void ) ;
  8161F
  8162Fextern void
  8163F  InitSciGpio ( void ) ;
  8164F
  8165Fextern void
  8166F  InitSciaGpio ( void ) ;
  8167F
  8168Fextern void
  8169F  InitScibGpio ( void ) ;
  8170F       // endif DSP28_SCIB
  8171F
  8172Fextern void
  8173F  InitScicGpio ( void ) ;
  8174F
  8175Fextern void
  8176F  InitSpi ( void ) ;
  8177F
  8178Fextern void
  8179F  InitSpiGpio ( void ) ;
  8180F
  8181Fextern void
  8182F  InitSpiaGpio ( void ) ;
  8183F
  8184Fextern void
  8185F  InitSysCtrl ( void ) ;
  8186F
  8187Fextern void
  8188F  InitTzGpio ( void ) ;
  8189F
  8190Fextern void
  8191F  InitXIntrupt ( void ) ;
  8192F
  8193Fextern void
  8194F  XintfInit ( void ) ;
  8195F
  8196Fextern void
  8197F  InitXintf16Gpio() ;
  8198F
  8199Fextern void
  8200F  InitXintf32Gpio() ;
  8201F
  8202Fextern void
  8203T  InitPll (
  8204F  Uint16 pllcr ,
  8205F  Uint16 clkindiv ) ;
  8206F
  8207Fextern void
  8208F  InitPeripheralClocks ( void ) ;
  8209F
  8210Fextern void
  8211F  EnableInterrupts ( void ) ;
  8212F
  8213Fextern void
  8214T  DSP28x_usDelay (
  8215F  Uint32 Count ) ;
  8216F
  8217Fextern void
  8218F  ADC_cal ( void ) ;
  8219F#define KickDog ServiceDog
  8220F
  8221Fextern void
  8222F  ServiceDog ( void ) ;
  8223F
  8224Fextern void
  8225F  DisableDog ( void ) ;
  8226F
  8227Fextern Uint16
  8228F  CsmUnlock ( void ) ;
  8229F// DSP28_DBGIER.asm
  8230F
  8231Fextern void
  8232T  SetDBGIER (
  8233F  Uint16 dbgier ) ;
  8234F// CAUTION
  8235F// This function MUST be executed out of RAM. Executing it
  8236F// out of OTP/Flash will yield unpredictable results
  8237F
  8238Fextern void
  8239F  InitFlash ( void ) ;
  8240F
  8241Fvoid
  8242T  MemCopy (
  8243F  Uint16 * SourceAddr ,
  8244F  Uint16 * SourceEndAddr ,
  8245F  Uint16 * DestAddr ) ;
  8246F//---------------------------------------------------------------------------
  8247F// External symbols created by the linker cmd file
  8248F// DSP28 examples will use these to relocate code from one LOAD location
  8249F// in either Flash or XINTF to a different RUN location in internal
  8250F// RAM
  8251F
  8252Fextern Uint16
  8253F  RamfuncsLoadStart ;
  8254F
  8255Fextern Uint16
  8256F  RamfuncsLoadEnd ;
  8257F
  8258Fextern Uint16
  8259F  RamfuncsRunStart ;
  8260F
  8261Fextern Uint16
  8262F  XintffuncsLoadStart ;
  8263F
  8264Fextern Uint16
  8265F  XintffuncsLoadEnd ;
  8266F
  8267Fextern Uint16
  8268F  XintffuncsRunStart ;
  8269F       /* extern "C" */
  8270F       // - end of DSP2833x_GLOBALPROTOTYPES_H
  8271F//===========================================================================
  8272F// End of file.
  8273F//===========================================================================
  8274F 
  8275F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_GlobalPrototypes.h*/
  8276F/*   CLOSE_FILE Include File */
  8277F 
  8278F         // Prototypes for global functions within the
  8279F                                              // .c files.
  8280F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ePwm_defines.h */
  8281F// TI File $Revision: /main/1 $
  8282F// Checkin $Date: August 18, 2006 13:45:39 $
  8283F//###########################################################################
  8284F//
  8285F// FILE: DSP2833x_EPwm_defines.h
  8286F//
  8287F// TITLE: #defines used in ePWM examples examples
  8288F//
  8289F//###########################################################################
  8290F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  8291F// $Release Date: August 4, 2009 $
  8292F//###########################################################################
  8293F#ifndef DSP2833x_EPWM_DEFINES_H
  8294F#define DSP2833x_EPWM_DEFINES_H
  8295F// TBCTL (Time-Base Control)
  8296F//==========================
  8297F// CTRMODE bits
  8298F#define TB_COUNT_UP 0x0
  8299F#define TB_COUNT_DOWN 0x1
  8300F#define TB_COUNT_UPDOWN 0x2
  8301F#define TB_FREEZE 0x3
  8302F// PHSEN bit
  8303F#define TB_DISABLE 0x0
  8304F#define TB_ENABLE 0x1
  8305F// PRDLD bit
  8306F#define TB_SHADOW 0x0
  8307F#define TB_IMMEDIATE 0x1
  8308F// SYNCOSEL bits
  8309F#define TB_SYNC_IN 0x0
  8310F#define TB_CTR_ZERO 0x1
  8311F#define TB_CTR_CMPB 0x2
  8312F#define TB_SYNC_DISABLE 0x3
  8313F// HSPCLKDIV and CLKDIV bits
  8314F#define TB_DIV1 0x0
  8315F#define TB_DIV2 0x1
  8316F#define TB_DIV4 0x2
  8317F// PHSDIR bit
  8318F#define TB_DOWN 0x0
  8319F#define TB_UP 0x1
  8320F// CMPCTL (Compare Control)
  8321F//==========================
  8322F// LOADAMODE and LOADBMODE bits
  8323F#define CC_CTR_ZERO 0x0
  8324F#define CC_CTR_PRD 0x1
  8325F#define CC_CTR_ZERO_PRD 0x2
  8326F#define CC_LD_DISABLE 0x3
  8327F// SHDWAMODE and SHDWBMODE bits
  8328F#define CC_SHADOW 0x0
  8329F#define CC_IMMEDIATE 0x1
  8330F// AQCTLA and AQCTLB (Action Qualifier Control)
  8331F//=============================================
  8332F// ZRO, PRD, CAU, CAD, CBU, CBD bits
  8333F#define AQ_NO_ACTION 0x0
  8334F#define AQ_CLEAR 0x1
  8335F#define AQ_SET 0x2
  8336F#define AQ_TOGGLE 0x3
  8337F// DBCTL (Dead-Band Control)
  8338F//==========================
  8339F// OUT MODE bits
  8340F#define DB_DISABLE 0x0
  8341F#define DBA_ENABLE 0x1
  8342F#define DBB_ENABLE 0x2
  8343F#define DB_FULL_ENABLE 0x3
  8344F// POLSEL bits
  8345F#define DB_ACTV_HI 0x0
  8346F#define DB_ACTV_LOC 0x1
  8347F#define DB_ACTV_HIC 0x2
  8348F#define DB_ACTV_LO 0x3
  8349F// IN MODE
  8350F#define DBA_ALL 0x0
  8351F#define DBB_RED_DBA_FED 0x1
  8352F#define DBA_RED_DBB_FED 0x2
  8353F#define DBB_ALL 0x3
  8354F// CHPCTL (chopper control)
  8355F//==========================
  8356F// CHPEN bit
  8357F#define CHP_DISABLE 0x0
  8358F#define CHP_ENABLE 0x1
  8359F// CHPFREQ bits
  8360F#define CHP_DIV1 0x0
  8361F#define CHP_DIV2 0x1
  8362F#define CHP_DIV3 0x2
  8363F#define CHP_DIV4 0x3
  8364F#define CHP_DIV5 0x4
  8365F#define CHP_DIV6 0x5
  8366F#define CHP_DIV7 0x6
  8367F#define CHP_DIV8 0x7
  8368F// CHPDUTY bits
  8369F#define CHP1_8TH 0x0
  8370F#define CHP2_8TH 0x1
  8371F#define CHP3_8TH 0x2
  8372F#define CHP4_8TH 0x3
  8373F#define CHP5_8TH 0x4
  8374F#define CHP6_8TH 0x5
  8375F#define CHP7_8TH 0x6
  8376F// TZSEL (Trip Zone Select)
  8377F//==========================
  8378F// CBCn and OSHTn bits
  8379F#define TZ_DISABLE 0x0
  8380F#define TZ_ENABLE 0x1
  8381F// TZCTL (Trip Zone Control)
  8382F//==========================
  8383F// TZA and TZB bits
  8384F#define TZ_HIZ 0x0
  8385F#define TZ_FORCE_HI 0x1
  8386F#define TZ_FORCE_LO 0x2
  8387F#define TZ_NO_CHANGE 0x3
  8388F// ETSEL (Event Trigger Select)
  8389F//=============================
  8390F#define ET_CTR_ZERO 0x1
  8391F#define ET_CTR_PRD 0x2
  8392F#define ET_CTRU_CMPA 0x4
  8393F#define ET_CTRD_CMPA 0x5
  8394F#define ET_CTRU_CMPB 0x6
  8395F#define ET_CTRD_CMPB 0x7
  8396F// ETPS (Event Trigger Pre-scale)
  8397F//===============================
  8398F// INTPRD, SOCAPRD, SOCBPRD bits
  8399F#define ET_DISABLE 0x0
  8400F#define ET_1ST 0x1
  8401F#define ET_2ND 0x2
  8402F#define ET_3RD 0x3
  8403F//--------------------------------
  8404F// HRPWM (High Resolution PWM)
  8405F//================================
  8406F// HRCNFG
  8407F#define HR_Disable 0x0
  8408F#define HR_REP 0x1
  8409F#define HR_FEP 0x2
  8410F#define HR_BEP 0x3
  8411F#define HR_CMP 0x0
  8412F#define HR_PHS 0x1
  8413F#define HR_CTR_ZERO 0x0
  8414F#define HR_CTR_PRD 0x1
  8415F       /* extern "C" */
  8416F       // - end of DSP2833x_EPWM_DEFINES_H
  8417F//===========================================================================
  8418F// End of file.
  8419F//===========================================================================
  8420F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ePwm_defines.h*/
  8421F/*   CLOSE_FILE Include File */
  8422F 
  8423F             // Macros used for PWM examples.
  8424F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Dma_defines.h */
  8425F// TI File $Revision: /main/2 $
  8426F// Checkin $Date: August 14, 2007 16:32:29 $
  8427F//###########################################################################
  8428F//
  8429F// FILE: DSP2833x_Dma_defines.h
  8430F//
  8431F// TITLE: #defines used in DMA examples
  8432F//
  8433F//###########################################################################
  8434F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  8435F// $Release Date: August 4, 2009 $
  8436F//###########################################################################
  8437F#ifndef DSP2833x_DMA_DEFINES_H
  8438F#define DSP2833x_DMA_DEFINES_H
  8439F// MODE
  8440F//==========================
  8441F// PERINTSEL bits
  8442F#define DMA_SEQ1INT 1
  8443F#define DMA_SEQ2INT 2
  8444F#define DMA_XINT1 3
  8445F#define DMA_XINT2 4
  8446F#define DMA_XINT3 5
  8447F#define DMA_XINT4 6
  8448F#define DMA_XINT5 7
  8449F#define DMA_XINT6 8
  8450F#define DMA_XINT7 9
  8451F#define DMA_XINT13 10
  8452F#define DMA_TINT0 11
  8453F#define DMA_TINT1 12
  8454F#define DMA_TINT2 13
  8455F#define DMA_MXEVTA 14
  8456F#define DMA_MREVTA 15
  8457F#define DMA_MXREVTB 16
  8458F#define DMA_MREVTB 17
  8459F// OVERINTE bit
  8460F#define OVRFLOW_DISABLE 0x0
  8461F#define OVEFLOW_ENABLE 0x1
  8462F// PERINTE bit
  8463F#define PERINT_DISABLE 0x0
  8464F#define PERINT_ENABLE 0x1
  8465F// CHINTMODE bits
  8466F#define CHINT_BEGIN 0x0
  8467F#define CHINT_END 0x1
  8468F// ONESHOT bits
  8469F#define ONESHOT_DISABLE 0x0
  8470F#define ONESHOT_ENABLE 0x1
  8471F// CONTINOUS bit
  8472F#define CONT_DISABLE 0x0
  8473F#define CONT_ENABLE 0x1
  8474F// SYNCE bit
  8475F#define SYNC_DISABLE 0x0
  8476F#define SYNC_ENABLE 0x1
  8477F// SYNCSEL bit
  8478F#define SYNC_SRC 0x0
  8479F#define SYNC_DST 0x1
  8480F// DATASIZE bit
  8481F#define SIXTEEN_BIT 0x0
  8482F#define THIRTYTWO_BIT 0x1
  8483F// CHINTE bit
  8484F#define CHINT_DISABLE 0x0
  8485F#define CHINT_ENABLE 0x1
  8486F       /* extern "C" */
  8487F       // - end of DSP2833x_EPWM_DEFINES_H
  8488F//===========================================================================
  8489F// End of file.
  8490F//===========================================================================
  8491F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Dma_defines.h*/
  8492F/*   CLOSE_FILE Include File */
  8493F 
  8494F              // Macros used for DMA examples.
  8495F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_I2C_defines.h */
  8496F// TI File $Revision: /main/2 $
  8497F// Checkin $Date: April 16, 2008 17:16:47 $
  8498F//###########################################################################
  8499F//
  8500F// FILE:        DSP2833x_I2cExample.h
  8501F//
  8502F// TITLE:       2833x I2C Example Code Definitions.
  8503F//
  8504F//###########################################################################
  8505F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  8506F// $Release Date: August 4, 2009 $
  8507F//###########################################################################
  8508F#ifndef DSP2833x_I2C_DEFINES_H
  8509F#define DSP2833x_I2C_DEFINES_H
  8510F//--------------------------------------------
  8511F// Defines
  8512F//--------------------------------------------
  8513F// Error Messages
  8514F#define I2C_ERROR 0xFFFF
  8515F#define I2C_ARB_LOST_ERROR 0x0001
  8516F#define I2C_NACK_ERROR 0x0002
  8517F#define I2C_BUS_BUSY_ERROR 0x1000
  8518F#define I2C_STP_NOT_READY_ERROR 0x5555
  8519F#define I2C_NO_FLAGS 0xAAAA
  8520F#define I2C_SUCCESS 0x0000
  8521F// Clear Status Flags
  8522F#define I2C_CLR_AL_BIT 0x0001
  8523F#define I2C_CLR_NACK_BIT 0x0002
  8524F#define I2C_CLR_ARDY_BIT 0x0004
  8525F#define I2C_CLR_RRDY_BIT 0x0008
  8526F#define I2C_CLR_SCD_BIT 0x0020
  8527F// Interrupt Source Messages
  8528F#define I2C_NO_ISRC 0x0000
  8529F#define I2C_ARB_ISRC 0x0001
  8530F#define I2C_NACK_ISRC 0x0002
  8531F#define I2C_ARDY_ISRC 0x0003
  8532F#define I2C_RX_ISRC 0x0004
  8533F#define I2C_TX_ISRC 0x0005
  8534F#define I2C_SCD_ISRC 0x0006
  8535F#define I2C_AAS_ISRC 0x0007
  8536F// I2CMSG structure defines
  8537F#define I2C_NO_STOP 0
  8538F#define I2C_YES_STOP 1
  8539F#define I2C_RECEIVE 0
  8540F#define I2C_TRANSMIT 1
  8541F#define I2C_MAX_BUFFER_SIZE 16
  8542F// I2C Slave State defines
  8543F#define I2C_NOTSLAVE 0
  8544F#define I2C_ADDR_AS_SLAVE 1
  8545F#define I2C_ST_MSG_READY 2
  8546F// I2C Slave Receiver messages defines
  8547F#define I2C_SND_MSG1 1
  8548F#define I2C_SND_MSG2 2
  8549F// I2C State defines
  8550F#define I2C_IDLE 0
  8551F#define I2C_SLAVE_RECEIVER 1
  8552F#define I2C_SLAVE_TRANSMITTER 2
  8553F#define I2C_MASTER_RECEIVER 3
  8554F#define I2C_MASTER_TRANSMITTER 4
  8555F// I2C Message Commands for I2CMSG struct
  8556F#define I2C_MSGSTAT_INACTIVE 0x0000
  8557F#define I2C_MSGSTAT_SEND_WITHSTOP 0x0010
  8558F#define I2C_MSGSTAT_WRITE_BUSY 0x0011
  8559F#define I2C_MSGSTAT_SEND_NOSTOP 0x0020
  8560F#define I2C_MSGSTAT_SEND_NOSTOP_BUSY 0x0021
  8561F#define I2C_MSGSTAT_RESTART 0x0022
  8562F#define I2C_MSGSTAT_READ_BUSY 0x0023
  8563F// Generic defines
  8564F#define I2C_TRUE 1
  8565F#define I2C_FALSE 0
  8566F#define I2C_YES 1
  8567F#define I2C_NO 0
  8568F#define I2C_DUMMY_BYTE 0
  8569F//--------------------------------------------
  8570F// Structures
  8571F//--------------------------------------------
  8572F// I2C Message Structure
  8573F
  8574Fstruct I2CMSG
  8575F{
  8576F  Uint16 MsgStatus ;
  8577F                         // Word stating what state msg is in:
  8578F               // I2C_MSGCMD_INACTIVE = do not send msg
  8579F               // I2C_MSGCMD_BUSY = msg start has been sent,
  8580F               // awaiting stop
  8581F               // I2C_MSGCMD_SEND_WITHSTOP = command to send
  8582F               // master trans msg complete with a stop bit
  8583F               // I2C_MSGCMD_SEND_NOSTOP = command to send
  8584F               // master trans msg without the stop bit
  8585F               // I2C_MSGCMD_RESTART = command to send a restart
  8586F               // as a master receiver with a stop bit
  8587F  Uint16 SlaveAddress ;  // I2C address of slave msg is intended for
  8588F  Uint16 NumOfBytes ;    // Num of valid bytes in (or to be put in MsgBuffer)
  8589F  Uint16 MemoryHighAddr ;        // EEPROM address of data associated with msg (high byte)
  8590F  Uint16 MemoryLowAddr ; // EEPROM address of data associated with msg (low byte)
  8591F  Uint16 MsgBuffer [ 16 ] ;
  8592F                                                // Array holding msg data - max that
  8593F                     // MAX_BUFFER_SIZE can be is 16 due to
  8594F                     // the FIFO's
  8595F} ;
  8596F       // end of DSP2833x_I2C_DEFINES_H definition
  8597F//===========================================================================
  8598F// End of file.
  8599F//===========================================================================
  8600F 
  8601F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_I2C_defines.h*/
  8602F/*   CLOSE_FILE Include File */
  8603F 
  8604F              // Macros used for I2C examples.
  8605F#define PARTNO_28335 0xEF
  8606F#define PARTNO_28334 0xEE
  8607F#define PARTNO_28332 0xED
  8608F#define PARTNO_28235 0xE8
  8609F#define PARTNO_28234 0xE7
  8610F#define PARTNO_28232 0xE6
  8611F// Include files not used with DSP/BIOS
  8612F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DefaultISR.h */
  8613F// TI File $Revision: /main/1 $
  8614F// Checkin $Date: August 18, 2006 13:45:37 $
  8615F//###########################################################################
  8616F//
  8617F// FILE: DSP2833x_DefaultIsr.h
  8618F//
  8619F// TITLE: DSP2833x Devices Default Interrupt Service Routines Definitions.
  8620F//
  8621F//###########################################################################
  8622F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  8623F// $Release Date: August 4, 2009 $
  8624F//###########################################################################
  8625F#ifndef DSP2833x_DEFAULT_ISR_H
  8626F#define DSP2833x_DEFAULT_ISR_H
  8627F//---------------------------------------------------------------------------
  8628F// Default Interrupt Service Routine Declarations:
  8629F//
  8630F// The following function prototypes are for the
  8631F// default ISR routines used with the default PIE vector table.
  8632F// This default vector table is found in the DSP2833x_PieVect.h
  8633F// file.
  8634F//
  8635F// Non-Peripheral Interrupts:
  8636F
  8637Finterrupt void
  8638F  INT13_ISR ( void ) ;          // XINT13 or CPU-Timer 1
  8639T  interrupt void
  8640F  INT14_ISR ( void ) ;          // CPU-Timer2
  8641T  interrupt void
  8642F  DATALOG_ISR ( void ) ;          // Datalogging interrupt
  8643T  interrupt void
  8644F  RTOSINT_ISR ( void ) ;          // RTOS interrupt
  8645T  interrupt void
  8646F  EMUINT_ISR ( void ) ;          // Emulation interrupt
  8647T  interrupt void
  8648F  NMI_ISR ( void ) ;          // Non-maskable interrupt
  8649T  interrupt void
  8650F  ILLEGAL_ISR ( void ) ;          // Illegal operation TRAP
  8651F// Group 1 PIE Interrupt Service Routines:
  8652T  interrupt void
  8653F  SEQ1INT_ISR ( void ) ;          // ADC Sequencer 1 ISR
  8654T  interrupt void
  8655F  SEQ2INT_ISR ( void ) ;          // ADC Sequencer 2 ISR
  8656T  interrupt void
  8657F  XINT1_ISR ( void ) ;          // External interrupt 1
  8658T  interrupt void
  8659F  XINT2_ISR ( void ) ;          // External interrupt 2
  8660T  interrupt void
  8661F  ADCINT_ISR ( void ) ;          // ADC
  8662T  interrupt void
  8663F  TINT0_ISR ( void ) ;          // Timer 0
  8664T  interrupt void
  8665F  WAKEINT_ISR ( void ) ;          // WD
  8666F// Group 6 PIE Interrupt Service Routines:
  8667T  interrupt void
  8668F  SPIRXINTA_ISR ( void ) ;          // SPI-A
  8669T  interrupt void
  8670F  SPITXINTA_ISR ( void ) ;          // SPI-A
  8671T  interrupt void
  8672F  MRINTA_ISR ( void ) ;          // McBSP-A
  8673T  interrupt void
  8674F  MXINTA_ISR ( void ) ;          // McBSP-A
  8675T  interrupt void
  8676F  MRINTB_ISR ( void ) ;          // McBSP-B
  8677T  interrupt void
  8678F  MXINTB_ISR ( void ) ;          // McBSP-B
  8679F// Group 7 PIE Interrupt Service Routines:
  8680T  interrupt void
  8681F  DINTCH1_ISR ( void ) ;          // DMA-Channel 1
  8682T  interrupt void
  8683F  DINTCH2_ISR ( void ) ;          // DMA-Channel 2
  8684T  interrupt void
  8685F  DINTCH3_ISR ( void ) ;          // DMA-Channel 3
  8686T  interrupt void
  8687F  DINTCH4_ISR ( void ) ;          // DMA-Channel 4
  8688T  interrupt void
  8689F  DINTCH5_ISR ( void ) ;          // DMA-Channel 5
  8690T  interrupt void
  8691F  DINTCH6_ISR ( void ) ;          // DMA-Channel 6
  8692F// Group 8 PIE Interrupt Service Routines:
  8693T  interrupt void
  8694F  I2CINT1A_ISR ( void ) ;          // I2C-A
  8695T  interrupt void
  8696F  I2CINT2A_ISR ( void ) ;          // I2C-A
  8697T  interrupt void
  8698F  SCIRXINTC_ISR ( void ) ;          // SCI-C
  8699T  interrupt void
  8700F  SCITXINTC_ISR ( void ) ;          // SCI-C
  8701F// Group 9 PIE Interrupt Service Routines:
  8702T  interrupt void
  8703F  SCIRXINTA_ISR ( void ) ;          // SCI-A
  8704T  interrupt void
  8705F  SCITXINTA_ISR ( void ) ;          // SCI-A
  8706T  interrupt void
  8707F  SCIRXINTB_ISR ( void ) ;          // SCI-B
  8708T  interrupt void
  8709F  SCITXINTB_ISR ( void ) ;          // SCI-B
  8710T  interrupt void
  8711F  ECAN0INTA_ISR ( void ) ;          // eCAN-A
  8712T  interrupt void
  8713F  ECAN1INTA_ISR ( void ) ;          // eCAN-A
  8714T  interrupt void
  8715F  ECAN0INTB_ISR ( void ) ;          // eCAN-B
  8716T  interrupt void
  8717F  ECAN1INTB_ISR ( void ) ;
  8718F                                    // eCAN-B
  8719F// Group 10 PIE Interrupt Service Routines:
  8720F// Group 11 PIE Interrupt Service Routines:
  8721F// Group 12 PIE Interrupt Service Routines:
  8722T  interrupt void
  8723F  XINT3_ISR ( void ) ;          // External interrupt 3
  8724T  interrupt void
  8725F  XINT4_ISR ( void ) ;          // External interrupt 4
  8726T  interrupt void
  8727F  XINT5_ISR ( void ) ;          // External interrupt 5
  8728T  interrupt void
  8729F  XINT6_ISR ( void ) ;          // External interrupt 6
  8730T  interrupt void
  8731F  XINT7_ISR ( void ) ;          // External interrupt 7
  8732T  interrupt void
  8733F  LVF_ISR ( void ) ;          // Latched overflow flag
  8734T  interrupt void
  8735F  LUF_ISR ( void ) ;          // Latched underflow flag
  8736F// Catch-all for Reserved Locations For testing purposes:
  8737T  interrupt void
  8738F  PIE_RESERVED ( void ) ;          // Reserved for test
  8739T  interrupt void
  8740F  rsvd_ISR ( void ) ;          // for test
  8741T  interrupt void
  8742F  INT_NOTUSED_ISR ( void ) ;
  8743F                                      // for unused interrupts
  8744F       /* extern "C" */
  8745F       // end of DSP2833x_DEFAULT_ISR_H definition
  8746F//===========================================================================
  8747F// End of file.
  8748F//===========================================================================
  8749F 
  8750F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DefaultISR.h*/
  8751F/*   CLOSE_FILE Include File */
  8752F 
  8753F// DO NOT MODIFY THIS LINE.
  8754F#define DELAY_US( A ) DSP28x_usDelay ( ( ( ( ( long double ) A * 1000.0L ) / ( long double ) CPU_RATE ) - 9.0L ) / 5.0L )
  8755F       /* extern "C" */
  8756F       // end of DSP2833x_EXAMPLES_H definition
  8757F//===========================================================================
  8758F// End of file.
  8759F//===========================================================================
  8760F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Examples.h*/
  8761F/*   CLOSE_FILE Include File */
  8762F 
  8763F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\my_stdint.h */
  8764F/*****************************************************************************/
  8765F/* STDINT.H v6.2.0 */
  8766F/* */
  8767F/* Copyright (c) 2002-2013 Texas Instruments Incorporated */
  8768F/* http://www.ti.com/ */
  8769F/* */
  8770F/* Redistribution and use in source and binary forms, with or without */
  8771F/* modification, are permitted provided that the following conditions */
  8772F/* are met: */
  8773F/* */
  8774F/* Redistributions of source code must retain the above copyright */
  8775F/* notice, this list of conditions and the following disclaimer. */
  8776F/* */
  8777F/* Redistributions in binary form must reproduce the above copyright */
  8778F/* notice, this list of conditions and the following disclaimer in */
  8779F/* the documentation and/or other materials provided with the */
  8780F/* distribution. */
  8781F/* */
  8782F/* Neither the name of Texas Instruments Incorporated nor the names */
  8783F/* of its contributors may be used to endorse or promote products */
  8784F/* derived from this software without specific prior written */
  8785F/* permission. */
  8786F/* */
  8787F/* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS */
  8788F/* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT */
  8789F/* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR */
  8790F/* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT */
  8791F/* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, */
  8792F/* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT */
  8793F/* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, */
  8794F/* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY */
  8795F/* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT */
  8796F/* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE */
  8797F/* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
  8798F/* */
  8799F/*****************************************************************************/
  8800F#ifndef _MY_STDINT_H_
  8801F#define _MY_STDINT_H_
  8802F/* These definitions might not be 8-bit wide */
  8803F
  8804Ftypedef
  8805Fsigned char
  8806F  int8_t ;
  8807F
  8808Ftypedef
  8809Funsigned char
  8810F  uint8_t ;
  8811F  /* 7.18.1.1 Exact-width integer types */
  8812F
  8813Ftypedef
  8814Fshort
  8815F  int16_t ;
  8816F
  8817Ftypedef
  8818Funsigned short
  8819F  uint16_t ;
  8820F
  8821Ftypedef
  8822Flong
  8823F  int32_t ;
  8824F
  8825Ftypedef
  8826Funsigned long
  8827F  uint32_t ;
  8828F  /* 7.18.1.2 Minimum-width integer types */
  8829F
  8830Ftypedef
  8831Fint16_t
  8832F  int_least8_t ;
  8833F
  8834Ftypedef
  8835Fuint16_t
  8836F  uint_least8_t ;
  8837F
  8838Ftypedef
  8839Fint16_t
  8840F  int_least16_t ;
  8841F
  8842Ftypedef
  8843Fuint16_t
  8844F  uint_least16_t ;
  8845F
  8846Ftypedef
  8847Fint32_t
  8848F  int_least32_t ;
  8849F
  8850Ftypedef
  8851Fuint32_t
  8852F  uint_least32_t ;
  8853F/* sorry, [u]int_least64_t not implemented for C27X, CLA */
  8854F/* 7.18.1.3 Fastest minimum-width integer types */
  8855F
  8856Ftypedef
  8857Fint16_t
  8858F  int_fast8_t ;
  8859F
  8860Ftypedef
  8861Fuint16_t
  8862F  uint_fast8_t ;
  8863F
  8864Ftypedef
  8865Fint16_t
  8866F  int_fast16_t ;
  8867F
  8868Ftypedef
  8869Fuint16_t
  8870F  uint_fast16_t ;
  8871F
  8872Ftypedef
  8873Fint32_t
  8874F  int_fast32_t ;
  8875F
  8876Ftypedef
  8877Fuint32_t
  8878F  uint_fast32_t ;
  8879F/* sorry, [u]int_fast64_t not implemented for C27X, CLA */
  8880F/* 7.18.1.4 Integer types capable of holding object pointers */
  8881F
  8882Ftypedef
  8883Flong
  8884F  intptr_t ;
  8885F
  8886Ftypedef
  8887Funsigned long
  8888F  uintptr_t ;
  8889F/* 7.18.1.5 Greatest-width integer types */
  8890F      /* C27X or CLA */
  8891F
  8892Ftypedef
  8893Flong
  8894F  intmax_t ;
  8895F
  8896Ftypedef
  8897Funsigned long
  8898F  uintmax_t ;
  8899F/*
  8900F According to footnotes in the 1999 C standard, "C++ implementations
  8901F should define these macros only when __STDC_LIMIT_MACROS is defined
  8902F before <stdint.h> is included."
  8903F*/
  8904F/* 7.18.2 Limits of specified width integer types */
  8905F#define INT16_MAX 0x7fff
  8906F#define INT16_MIN ( - INT16_MAX - 1 )
  8907F#define UINT16_MAX 0xffff
  8908F#define INT32_MAX 0x7fffffff
  8909F#define INT32_MIN ( - INT32_MAX - 1 )
  8910F#define UINT32_MAX 0xffffffff
  8911F#define INT_LEAST8_MAX ( INT16_MAX )
  8912F#define INT_LEAST8_MIN ( INT16_MIN )
  8913F#define UINT_LEAST8_MAX ( UINT16_MAX )
  8914F#define INT_LEAST16_MAX ( INT16_MAX )
  8915F#define INT_LEAST16_MIN ( INT16_MIN )
  8916F#define UINT_LEAST16_MAX ( UINT16_MAX )
  8917F#define INT_LEAST32_MAX ( INT32_MAX )
  8918F#define INT_LEAST32_MIN ( INT32_MIN )
  8919F#define UINT_LEAST32_MAX ( UINT32_MAX )
  8920F#define INT_FAST8_MAX ( INT16_MAX )
  8921F#define INT_FAST8_MIN ( INT16_MIN )
  8922F#define UINT_FAST8_MAX ( UINT16_MAX )
  8923F#define INT_FAST16_MAX ( INT16_MAX )
  8924F#define INT_FAST16_MIN ( INT16_MIN )
  8925F#define UINT_FAST16_MAX ( UINT16_MAX )
  8926F#define INT_FAST32_MAX ( INT32_MAX )
  8927F#define INT_FAST32_MIN ( INT32_MIN )
  8928F#define UINT_FAST32_MAX ( UINT32_MAX )
  8929F#define INTPTR_MAX ( INT32_MAX )
  8930F#define INTPTR_MIN ( INT32_MIN )
  8931F#define UINTPTR_MAX ( UINT32_MAX )
  8932F#define INTMAX_MIN ( INT32_MIN )
  8933F#define INTMAX_MAX ( INT32_MAX )
  8934F#define UINTMAX_MAX ( UINT32_MAX )
  8935F/* 7.18.3 Limits of other integer types */
  8936F#define PTRDIFF_MAX ( INT32_MAX )
  8937F#define PTRDIFF_MIN ( INT32_MIN )
  8938F#define SIG_ATOMIC_MIN ( INT32_MIN )
  8939F#define SIG_ATOMIC_MAX ( INT32_MAX )
  8940F#define SIZE_MAX ( INT32_MAX )
  8941F#define WCHAR_MAX 0xffffu
  8942F#define WCHAR_MIN 0
  8943F#define WINT_MIN ( INT32_MIN )
  8944F#define WINT_MAX ( INT32_MAX )
  8945F/* 7.18.4.1 Macros for minimum-width integer constants */
  8946F/*
  8947F There is a defect report filed against the C99 standard concerning how
  8948F the (U)INTN_C macros should be implemented. Please refer to --
  8949F http://wwwold.dkuug.dk/JTC1/SC22/WG14/www/docs/dr_209.htm
  8950F for more information. These macros are implemented according to the
  8951F suggestion given at this web site.
  8952F*/
  8953F#define INT8_C( value ) ( ( int_least8_t ) ( value ) )
  8954F#define UINT8_C( value ) ( ( uint_least8_t ) ( value ) )
  8955F#define INT16_C( value ) ( ( int_least16_t ) ( value ) )
  8956F#define UINT16_C( value ) ( ( uint_least16_t ) ( value ) )
  8957F#define INT32_C( value ) ( ( int_least32_t ) ( value ) )
  8958F#define UINT32_C( value ) ( ( uint_least32_t ) ( value ) )
  8959F/* 7.18.4.2 Macros for greatest-width integer constants */
  8960F#define INTMAX_C( value ) ( ( intmax_t ) ( value ) )
  8961F#define UINTMAX_C( value ) ( ( uintmax_t ) ( value ) )
  8962F       /* !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS) */
  8963F       /* _STDINT_H_ */
  8964F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\my_stdint.h*/
  8965F/*   CLOSE_FILE Include File */
  8966F 
  8967F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_sensorhead_types.h */
  8968F//############################################################################
  8969F//
  8970F// File:         dsp_sensorhead_types.h
  8971F// Version:      0.1
  8972F//
  8973F// Description: Structure and variable definitions.
  8974F//
  8975F//############################################################################
  8976F// Author: Rogério Lima
  8977F// Release Date: July 2012
  8978F//############################################################################
  8979F#ifndef DSP_SENSORHEAD_TYPES_H
  8980F#define DSP_SENSORHEAD_TYPES_H
  8981F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_types.h */
  8982F//############################################################################
  8983F//
  8984F// File:         dsp_types.h
  8985F// Version:      0.1
  8986F//
  8987F// Description: Structure and variable definitions.
  8988F//
  8989F//############################################################################
  8990F// Author: Rogério Lima
  8991F// Release Date: July 2012
  8992F//############################################################################
  8993F#ifndef DSP_TYPES_H
  8994F#define DSP_TYPES_H
  8995F/* These definitions might not be 8-bit wide */
  8996F
  8997Ftypedef
  8998Fsigned char
  8999F  int8_t ;
  9000F
  9001Ftypedef
  9002Funsigned char
  9003F  uint8_t ;
  9004F  /* 7.18.1.1 Exact-width integer types */
  9005F
  9006Ftypedef
  9007Fshort
  9008F  int16_t ;
  9009F
  9010Ftypedef
  9011Funsigned short
  9012F  uint16_t ;
  9013F
  9014Ftypedef
  9015Flong
  9016F  int32_t ;
  9017F
  9018Ftypedef
  9019Funsigned long
  9020F  uint32_t ;
  9021F       /* DSP_TYPES_H */
  9022F 
  9023F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_types.h*/
  9024F/*   CLOSE_FILE Include File */
  9025F 
  9026F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_quat.h */
  9027F//############################################################################
  9028F//
  9029F// File:         EKF_Quat.h
  9030F// Version:      0.1
  9031F//
  9032F// Description: Preprocessor definitions and function declarations for quater-
  9033F//       nion calculations.
  9034F//
  9035F//############################################################################
  9036F// Author: Rogério Lima
  9037F// Release Date: July 2012
  9038F//############################################################################
  9039F#ifndef __EKF_quat_h
  9040F#define __EKF_quat_h
  9041F
  9042Ftypedef
  9043Fstruct _quat
  9044F{
  9045F  float a ,
  9046F  b ,
  9047F  c ,
  9048F  d ;
  9049F} quat ;
  9050F
  9051Fint16_t
  9052T  quat_mult (
  9053F  quat * src1 ,
  9054F  quat * src2 ,
  9055F  quat * dest ) ;
  9056F
  9057Fint16_t
  9058T  quat_conj (
  9059F  quat * src ,
  9060F  quat * dest ) ;
  9061F
  9062Fint16_t
  9063T  quat_norm (
  9064F  quat * src ) ;
  9065F
  9066Fint16_t
  9067T  quat_add (
  9068F  quat * src1 ,
  9069F  quat * src2 ,
  9070F  quat * dest ) ;
  9071F
  9072Fint16_t
  9073T  quat_subtract (
  9074F  quat * src1 ,
  9075F  quat * src2 ,
  9076F  quat * dest ) ;
  9077F
  9078Fint16_t
  9079T  quat_scalar_mult (
  9080F  quat * qsrc ,
  9081F  float scalar ,
  9082F  quat * dest ) ;
  9083F 
  9084F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_quat.h*/
  9085F/*   CLOSE_FILE Include File */
  9086F 
  9087F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_matrix.h */
  9088F//############################################################################
  9089F//
  9090F// File: dsp_matrix.h
  9091F// Version: 0.1
  9092F//
  9093F// Description: Preprocessor definitions and function declarations for matrix
  9094F// calculations.
  9095F//
  9096F//############################################################################
  9097F// Author: Rogério Lima
  9098F// Release Date: July 2012
  9099F//############################################################################
  9100F#ifndef DSP_MATRIX_H
  9101F#define DSP_MATRIX_H
  9102F#define MATRIX_MAX_ROWS 12
  9103F#define MATRIX_MAX_COLUMNS 12
  9104F
  9105Ftypedef
  9106Fstruct _fMatrix
  9107F{
  9108F  int rows ;
  9109F  int columns ;
  9110F  float data [ 12 ] [ 12 ] ;
  9111F} fMatrix ;
  9112F// Matrix operations
  9113F
  9114Fint
  9115T  mat_add (
  9116F  fMatrix * src1 ,
  9117F  fMatrix * src2 ,
  9118F  fMatrix * dest ) ;
  9119F
  9120Fint
  9121T  mat_mult (
  9122F  fMatrix * src1 ,
  9123F  fMatrix * src2 ,
  9124F  fMatrix * dest ) ;
  9125F
  9126Fint
  9127T  mat_scalar_mult (
  9128F  float scalar ,
  9129F  fMatrix * src ,
  9130F  fMatrix * dest ) ;
  9131F
  9132Fint
  9133T  mat_determinant (
  9134F  fMatrix * src ,
  9135F  float * det ) ;
  9136F
  9137Fint
  9138T  mat_transpose (
  9139F  fMatrix * src ,
  9140F  fMatrix * dest ) ;
  9141F
  9142Fint
  9143T  mat_create_identity (
  9144F  fMatrix * dest ,
  9145F  int rows ,
  9146F  int columns ) ;
  9147F
  9148Fint
  9149T  mat_zero (
  9150F  fMatrix * dest ,
  9151F  int rows ,
  9152F  int columns ) ;
  9153F
  9154Fint
  9155T  mat_copy (
  9156F  fMatrix * src ,
  9157F  fMatrix * dest ) ;
  9158F//int mat_print( fMatrix* matrix );
  9159F//void hexPrint16( short byte );
  9160F 
  9161F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_matrix.h*/
  9162F/*   CLOSE_FILE Include File */
  9163F 
  9164F#define SUCCESS ( 1 == 1 )
  9165F#define FAIL ( 0 == 1 )
  9166F#define MAG_UPDATE 0
  9167F#define ACCEL_UPDATE 1
  9168F         // Original values
  9169F#define ACCEL_VARIANCE 223.59E-4f
  9170F#define GYRO_VARIANCE 68.81E-5f
  9171F#define GYRO_BIAS_VARIANCE 201.93E-3f
  9172F#define MAGNETO_VARIANCE 48.12E-5f
  9173F#define GPS_VARIANCE 1.6E-3f
  9174F#define QUATERNION_NORM_VARIANCE 1.0E-9f
  9175F#define ACCEL_SCALE_FACTOR 0.03830859375f
  9176F#define GYRO_SCALE_FACTOR_DEG 0.06956521739f
  9177F#define GYRO_SCALE_FACTOR_RAD 0.00121414208f
  9178F#define MAG_SCALE_FACTOR 0.00151515151f
  9179F#define RAD2DEG 57.2957795130f
  9180F#define DEG2RAD 0.01745329251f
  9181F#define KM2M 0.27777777778f
  9182F//#define       ABS_PRESSURE_SCALE_FACTOR // -> Transfer function
  9183F//#define       DIFF_PRESSURE_SCALE_FACTOR // -> Transfer function
  9184F/* Structure for holding raw sensor data */
  9185F
  9186Ftypedef
  9187Fstruct sensor_data_raw
  9188F{
  9189F  int16_t gyro_x ;
  9190F  int16_t gyro_y ;
  9191F  int16_t gyro_z ;
  9192F  int16_t new_gyro_data ;
  9193F  int16_t accel_x ;
  9194F  int16_t accel_y ;
  9195F  int16_t accel_z ;
  9196F        // Flag specifies whether there is new accel data in the sensor data structure
  9197F  int16_t new_accel_data ;
  9198F  int16_t mag_x ;
  9199F  int16_t mag_y ;
  9200F  int16_t mag_z ;
  9201F        // Flag specifies whether there is new magnetometer data in the sensor data structure
  9202F  int16_t new_mag_data ;
  9203F        // Rate gyro temperature measurement
  9204F  int16_t gyro_temperature ;
  9205F  int32_t abs_pressure ;
  9206F  int16_t new_abs_pressure_data ;
  9207F  int16_t diff_pressure ;
  9208F  int16_t new_diff_pressure_data ;
  9209F} sensor_data_raw_t ;
  9210F/* Structure for holding scaled sensor data */
  9211F
  9212Ftypedef
  9213F  struct
  9214F  {
  9215F    float gyro_x ;
  9216F    float gyro_y ;
  9217F    float gyro_z ;
  9218F    float accel_x ;
  9219F    float accel_y ;
  9220F    float accel_z ;
  9221F    float mag_x ;
  9222F    float mag_y ;
  9223F    float mag_z ;
  9224F    float gyro_temperature ;
  9225F    float abs_pressure ;
  9226F    float baro_altitude ;
  9227F    float diff_pressure ;
  9228F    float airspeed ;
  9229F        /* GPS data */
  9230F        /* Latitude */
  9231F    int16_t gps_lat_deg ;
  9232F    uint32_t gps_lat_min ;
  9233F    uint8_t gps_lat_sector ;
  9234F        /* Longitude */
  9235F    int16_t gps_lon_deg ;
  9236F    uint32_t gps_lon_min ;
  9237F    uint8_t gps_lon_sector ;
  9238F        /* Altitude */
  9239F    int32_t gps_alt ;
  9240F        /* Speed */
  9241F    int32_t gps_speed ;
  9242F    int32_t gps_course ;
  9243F        /* Time */
  9244F    uint16_t gps_hour ;
  9245F    uint16_t gps_min ;
  9246F    float gps_sec ;
  9247F        // Status
  9248F    uint16_t gps_position_fix_status ;
  9249F    uint16_t gps_no_sv ;
  9250F    float gps_hdop ;
  9251F    uint16_t gps_new_message ;
  9252F  } sensor_data_scaled_t ;
  9253F// Structure for storing AHRS states and other data related to state computation
  9254F// This structure is, in a way, redundant because all this data is also stored in the
  9255F// UM6_config or UM6_data structures. However, in the config and data strucutres, the
  9256F// data is packaged as UInt32 entries into an array for convenience with communication.
  9257F// To use the data as floats, special formatting is required. This structure provides
  9258F// a place to store that data in the expected format, which makes accessing it easier.
  9259F
  9260Ftypedef
  9261F  struct
  9262F  {
  9263F        /* Attitude states */
  9264F    float psi ;
  9265F    float theta ;
  9266F    float phi ;
  9267F        /* Angle rate states */
  9268F    float psi_dot ;
  9269F    float theta_dot ;
  9270F    float phi_dot ;
  9271F        /* Quaternion states "qib" = Quaternion from Inertial to Body */
  9272F    quat qib ;
  9273F    quat quat_debug ;
  9274F        /* Gyro biases */
  9275F    float bias_p ;
  9276F    float bias_q ;
  9277F    float bias_r ;
  9278F        /* Accelerometer biases */
  9279F    float bias_accel_x ;
  9280F    float bias_accel_y ;
  9281F    float bias_accel_z ;
  9282F        /* Magnetometer biases */
  9283F    float bias_mag_x ;
  9284F    float bias_mag_y ;
  9285F    float bias_mag_z ;
  9286F        /* State Transition Matrix (jacobian of system matrix 'f') */
  9287F    fMatrix jac_f ;
  9288F        /* Linearized measurement equation (jacobian of output equation 'h') */
  9289F    fMatrix jac_h ;
  9290F        /* Measurement noise matrix */
  9291F    fMatrix R ;
  9292F        /* Auxiliary construction measurement matrix for phi and theta angles. */
  9293F    fMatrix R_phi_theta ;
  9294F        /* Auxiliary construction measurement matrix for psi angle. */
  9295F    fMatrix R_psi ;
  9296F        /* Process noise matrix */
  9297F    fMatrix Q ;
  9298F        /* Accelerometer alignment matrix */
  9299F    fMatrix accel_align_mat ;
  9300F        /* Gyro alignment matrix */
  9301F    fMatrix gyro_align_mat ;
  9302F        /* Magnetometer calibration matrix */
  9303F    fMatrix mag_align_mat ;
  9304F        // Error covariance matrix
  9305F    fMatrix P ;
  9306F        /* Magnetic field reference vector */
  9307F    float mag_ref_x ;
  9308F    float mag_ref_y ;
  9309F    float mag_ref_z ;
  9310F        /* Accelerometer reference vector */
  9311F    float accel_ref_x ;
  9312F    float accel_ref_y ;
  9313F    float accel_ref_z ;
  9314F        /* Accelerometer variance */
  9315F    float accel_var ;
  9316F        /* Gyrometer variance */
  9317F    float gyro_var ;
  9318F        /* Gyro bias variance */
  9319F    float gyro_bias_var ;
  9320F        /* Magnetometer variance */
  9321F    float mag_var ;
  9322F        /* GPS velocity variance */
  9323F    float gps_var ;
  9324F    float U ;
  9325F    float V ;
  9326F    float W ;
  9327F    float U_ant ;
  9328F    float V_ant ;
  9329F    float W_ant ;
  9330F    float U_dot ;
  9331F    float V_dot ;
  9332F    float W_dot ;
  9333F    float temperature ;
  9334F        // Time sampling
  9335F    float Ts ;    // In seconds
  9336F    float debug_misc [ 5 ] ;
  9337F        // GPS stuffs
  9338F    float GPS_north ;    // In meters
  9339F    float GPS_east ;
  9340F    float GPS_h ;
  9341F    float GPS_h_ant ;
  9342F    float GPS_speed ;    // In m/s
  9343F    float GPS_speed_ant ;    // past speed
  9344F    float GPS_heading ;    // In m/s
  9345F    float GPS_Ts ;
  9346F    float GPS_lat_home ;
  9347F    float GPS_lon_home ;
  9348F    float GPS_alt_home ;
  9349F  } ahrs_states_t ;
  9350F// Structure for holding raw sensor data
  9351F
  9352Ftypedef
  9353F  struct
  9354F  {
  9355F        // input
  9356F    float xk [ 9 ] ;
  9357F    float xk_1 [ 9 ] ;
  9358F    float xk_2 [ 9 ] ;
  9359F        // output
  9360F    float yk [ 9 ] ;
  9361F    float yk_1 [ 9 ] ;
  9362F    float yk_2 [ 9 ] ;
  9363F    float a [ 5 ] ; // denominator coefficient
  9364F    float b [ 5 ] ; // numerator coefficient
  9365F  } digital_filter_data_t ;
  9366F
  9367Fvoid
  9368T  compute_euler_angles (
  9369F  ahrs_states_t * estimated_states ) ;
  9370F
  9371Fvoid
  9372T  unroll_states (
  9373F  ahrs_states_t * states ) ;
  9374F 
  9375F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_sensorhead_types.h*/
  9376F/*   CLOSE_FILE Include File */
  9377F 
  9378F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_i2c.h */
  9379F/******************************************************************************
  9380F* FILENAME: dsp_i2c.h
  9381F*
  9382F* DESCRIPTION:
  9383F* High-level functions for I2C module..
  9384F*
  9385F* FUNCTIONS:
  9386F* uint8_t i2cBatchWrite ( uint8_t, uint8_t*, uint8_t)
  9387F* uint8_t i2cBatchRead ( uint8_t, uint8_t, uint8_t*, uint8_t)
  9388F* void I2C_get_data (I2C_RawSensorData*)
  9389F* void I2C_init_sensors (void)
  9390F*
  9391F* VERSION DATE WHO DETAIL
  9392F* 1.0 05 Set 2011 Rogerio Lima Start-up coding.
  9393F* Plínio Pereira
  9394F* -----------------------------------------------------------------------------
  9395F* 2.0 30 Aug 2014 Rogerio Lima Improving code quality rewriting the
  9396F* code and correcting errors.
  9397F******************************************************************************/
  9398F/*
  9399F * SECTION ORDER
  9400F * 1. Comment block
  9401F * 2. Include statements
  9402F * 3. Definitions: data type, constants, macros
  9403F * 4. Static data declarations
  9404F * 5. Private functions prototypes
  9405F * 6. Public function bodies
  9406F * 7. Private function bodies
  9407F *
  9408F */
  9409F#ifndef DSP_I2C_H
  9410F#define DSP_I2C_H
  9411F#define I2C_TX_BUFSIZE 16U
  9412F#define I2C_RX_BUFSIZE 24U
  9413F#define I2C_ACK_ATTEMPTS 5000U
  9414F#define MAX_RETRIES 10000U
  9415F#define I2C_TRANSMITTER I2C_Direction_Transmitter
  9416F#define I2C_RECEIVER I2C_Direction_Receiver
  9417F#define I2C_BIT_SET 1U
  9418F#define I2C_BIT_CLEAR 0U
  9419F#define I2C_ACK_DISABLE 1U
  9420F#define I2C_ACK_ENABLE 0U
  9421F#define I2C_SEND_START 1U
  9422F#define I2C_NO_START 0U
  9423F#define I2C_SEND_STOP 1U
  9424F#define I2C_NO_STOP 0U
  9425F#define I2C_SCL_PIN GPIO_Pin_6
  9426F#define I2C_SDA_PIN GPIO_Pin_7
  9427F#define I2C_PORT GPIOB
  9428F#define I2C_ARBITRATION_LOST 10U
  9429F#define I2C_NACK 1U
  9430F#define I2C_TIMEOUT 11U
  9431F/*------------------------------------------------------------------------------
  9432F F28335 Register I2CMDR
  9433F------------------------------------------------------------------------------*/
  9434F// BC Bits
  9435F#define I2C_BC_8BITS 0x0000
  9436F#define I2C_BC_1BITS 0x0001
  9437F#define I2C_BC_2BITS 0x0002
  9438F#define I2C_BC_3BITS 0x0003
  9439F#define I2C_BC_4BITS 0x0004
  9440F#define I2C_BC_5BITS 0x0005
  9441F#define I2C_BC_6BITS 0x0006
  9442F#define I2C_BC_7BITS 0x0007
  9443F// FDF
  9444F#define I2C_NO_FREE_DATA_FORMAT 0x0000
  9445F#define I2C_FREE_DATA_FORMAT 0x0008
  9446F// STB
  9447F#define I2C_NO_START_BYTE 0x0000
  9448F#define I2C_START_BYTE 0x0010
  9449F// IRS
  9450F#define I2C_RESET 0x0000
  9451F#define I2C_ENABLED 0x0020
  9452F// DLB
  9453F#define I2C_NO_LOOPBACK 0x0000
  9454F#define I2C_LOOPBACK 0x0040
  9455F// RM
  9456F#define I2C_NO_REPEAT 0x0000
  9457F#define I2C_REPEAT 0x0080
  9458F/* Defines the length of time the i2c software will wait for clock stretching *
  9459F * the number of attempts simply corresponds with the number of iterations *
  9460F * through a for loop. */
  9461F#define I2C_MAX_ATTEMPTS 1000
  9462F/* Macro definitions */
  9463F#define I2C_DELAY_INIT( ) int16_t _counter ;
  9464F#define I2C_DELAY( ) for ( _counter = 0 ; _counter < 5 ; _counter ++ ) { asm volatile("mov r0, r0")   ; }
  9465F#define I2C_DELAY_SHORT( ) asm volatile("mov r0, r0")
  9466F/* Structure for holding raw sensor data from I2C bus
  9467Ftypedef struct __I2CData {
  9468F Gyrometers
  9469F int16_t W_x;
  9470F int16_t W_y;
  9471F int16_t W_z;
  9472F int16_t new_gyro_data;
  9473F Accelerometers
  9474F int16_t A_x;
  9475F int16_t A_y;
  9476F int16_t A_z;
  9477F Flag specifies whether there is new accel data in the sensor data structure
  9478F int16_t new_accel_data;
  9479F Magnetometers
  9480F int16_t H_x;
  9481F int16_t H_y;
  9482F int16_t H_z;
  9483F Flag specifies whether there is new magnetometer data in the sensor data structure
  9484F int16_t new_mag_data;
  9485F 
  9486F Rate gyro temperature measurement
  9487F int16_t gyro_temperature;
  9488F Differential pressure
  9489F int16_t diff_press;
  9490F Flag specifies whether there is new differential pressure data in the sensor data structure
  9491F int16_t new_diff_press_data;
  9492F Absolute pressure
  9493F int16_t abs_press;
  9494F Flag specifies whether there is new differential pressure data in the sensor data structure
  9495F int16_t new_abs_press_data;
  9496F} I2C_RawSensorData;*/
  9497F// Prototype statements for functions found within this file.
  9498F
  9499Fvoid
  9500F  Gpio_select_I2C ( void ) ;
  9501F// Software-emulated i2c function calls. Use these ones.
  9502F
  9503Fuint8_t
  9504T  i2cBatchWrite (
  9505F  const uint8_t address7 ,
  9506F  uint8_t * txBuffer ,
  9507F  const uint8_t bytesToWrite ) ;
  9508F
  9509Fuint8_t
  9510T  i2cBatchRead (
  9511F  const uint8_t address7 ,
  9512F  const uint8_t device_start_address ,
  9513F  uint8_t * rxBuffer ,
  9514F  const uint8_t bytesToRead ) ;
  9515F
  9516Fvoid
  9517T  i2c_get_data (
  9518F  sensor_data_raw_t * raw_data ) ;
  9519F
  9520Fvoid
  9521F  i2c_init_sensors ( void ) ;
  9522F 
  9523F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_i2c.h*/
  9524F/*   CLOSE_FILE Include File */
  9525F 
  9526F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_i2c_hsc.h */
  9527F/******************************************************************************
  9528F* FILENAME: dsp_i2c_hsc.h
  9529F*
  9530F* DESCRIPTION:
  9531F* Function prototypes and defines for interacting with HSC differential pressure.
  9532F*
  9533F* FUNCTIONS:
  9534F* void HSC_init (uint8_t*)
  9535F* void HSC_get_data (void)
  9536F*
  9537F* NOTES:
  9538F* ITG3200 is a tri-axis digital gyrometer which uses protocol I2C to transmit
  9539F* and receive data.
  9540F*
  9541F* CODE: HSC-D-RR-N-010MD-2A3
  9542F* HSC: Serie
  9543F* D: DIP (Dual Inline Pin)
  9544F* RR: Dual radial barbed ports in the same side
  9545F* N: Gases only, no special options
  9546F* 010MD: +/- 10 mbar
  9547F* 2: I2C, address 0x28
  9548F* A: 10% to 90% of 2^14 counts
  9549F* 3: 3.3V supply voltage
  9550F*
  9551F* REFERENCES:
  9552F* Adapted from CH Robotics
  9553F*
  9554F* START DATE: 05 Set 2011
  9555F*
  9556F* CHANGES :
  9557F*
  9558F* VERSION DATE WHO DETAIL
  9559F* 1.0 05 Set 2011 Rogerio Lima Start-up coding.
  9560F* Plínio Pereira
  9561F* -----------------------------------------------------------------------------
  9562F* 2.0 06 Set 2014 Rogerio Lima Improving code quality rewriting the
  9563F* code and correcting errors.
  9564F******************************************************************************/
  9565F#ifndef DSP_I2C_HSC_H
  9566F#define DSP_I2C_HSC_H
  9567F/* HSC function prototypes */
  9568F
  9569Fuint8_t
  9570F  hsc_init ( void ) ;
  9571F
  9572Fuint8_t
  9573F  hsc_get_data ( void ) ;
  9574F  /* Register addresses for the HSC */
  9575F#define HSC_SLAVE_ADDRESS7 0x28U
  9576F#define OUTPUT_MIN 0x0666U
  9577F#define OUTPUT_MAX 0x3999U
  9578F#define PRESSURE_MIN - 10.0F
  9579F#define PRESSURE_MAX 10.0F
  9580F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_i2c_hsc.h*/
  9581F/*   CLOSE_FILE Include File */
  9582F 
  9583F
  9584Fuint8_t
  9585F  gHSC_Initialized = 0U ;
  9586F
  9587Fuint16_t
  9588F  diff_pressure = 0U ;
  9589F
  9590Fextern uint8_t
  9591F  g_i2cTxBuf [ 16U ] ;
  9592F
  9593Fextern uint8_t
  9594F  g_i2cRxBuf [ 24U ] ;
  9595F/*******************************************************************************
  9596F* Function Name : HSC_init
  9597F* Input : None
  9598F* Output : None
  9599F* Return : None
  9600F* Description : Initializes the HSC differential pressure sensor
  9601F*******************************************************************************/
  9602F
  9603Fuint8_t
  9604T  hsc_init()
  9605F  {
  9606T    return
  9607T    ( 1U ) ;
  9608F  }
  9609F/*******************************************************************************
  9610F* Function Name : HSC_get_data
  9611F* Input : None
  9612F* Output : uint8_t* i2cBuf
  9613F* Return : 1 if success, 0 if fail
  9614F* Description :
  9615F*******************************************************************************/
  9616F
  9617Fuint8_t
  9618T  hsc_get_data()
  9619F  {
  9620F    static uint8_t
  9621F      returnval ;
  9622F    static uint16_t
  9623F      i ;
  9624T    I2caRegs.I2CSAR = 0x28U ;             /* I2C slave address register */
  9625T    I2caRegs.I2CCNT = 1U ;
  9626F                          /* Enviar 1 byte */
  9627F    /* Send new start condition and initiate read */
  9628T    I2caRegs.I2CCNT = 2U ;/* Lê 2 bytes do sensor de pressão dinâmica HSC */
  9629T    I2caRegs.I2CMDR.all = 0x6C20U ;/* Master-receiver, Start, Stop after all bytes trans. */
  9630T    for
  9631T      (
  9632T      i = 0
  9633T      ;
  9634T      i < 2
  9635T      ;
  9636T      i ++
  9637T      )                     /* Lê 2 bytes do sensor de pressão dinâmica HSC */
  9638T      {
  9639F        /* WARNING */
  9640T        while
  9641T          (
  9642T          I2caRegs.I2CSTR.bit.RRDY == 0U
  9643T          )
  9644T          {
  9645T            ;
  9646F                                                /* Aguarda dado ficar disponível no registrador */
  9647F        /* WARNING */
  9648T          }
  9649T        g_i2cRxBuf [ i ] = I2caRegs.I2CDRR ;/* Lê dado do buffer do DSP */
  9650T      }
  9651F      /* WARNING */
  9652T    while
  9653T      (
  9654T      I2caRegs.I2CSTR.bit.SCD == 0U
  9655T      )
  9656T      {
  9657T        ;
  9658F                                           /* Aguarda Stop condition */
  9659F    /* WARNING */
  9660T      }
  9661T    I2caRegs.I2CSTR.bit.SCD = 1U ;
  9662T    diff_pressure = g_i2cRxBuf [ 0 ] |= g_i2cRxBuf [ 1 ] ;
  9663T    returnval = I2caRegs.I2CSTR.bit.NACK ;/* 0: ACK, 1: NACK */
  9664T    return
  9665T    ( ~ returnval ) ;
  9666F  }
  9667F 
