     1F/*
     2FC TESTBED VERSION  : 9.4.4                                                                                               
     3FFILE UNDER TEST  : "F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\src\usr\dsp_comm.c"           
     4FDATE OF ANALYSIS : Fri Nov 07 10:49:46 2014                          
     5F*/
     6F/******************************************************************************
     7F* FILENAME: dsp_comm.c
     8F*
     9F* DESCRIPTION:
    10F* Communication routines.
    11F* Functions used to configure communication peripherals, such as
    12F* I2C, SPI and UART;
    13F* See TMS320F28335 for detailed description.
    14F*
    15F* FUNCTIONS:
    16F* void Gpio_Select (void)
    17F*
    18F* VERSION DATE WHO DETAIL
    19F* 1.0 30 Aug 2014 Rogerio Lima Comm's function grouped in this file.
    20F******************************************************************************/
    21F/*
    22F * SECTION ORDER
    23F * 1. Comment block
    24F * 2. Include statements
    25F * 3. Definitions: data type, constants, macros
    26F * 4. Static data declarations
    27F * 5. Private functions prototypes
    28F * 6. Public function bodies
    29F * 7. Private function bodies
    30F *
    31F */
    32F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_types.h */
    33F//############################################################################
    34F//
    35F// File:         dsp_types.h
    36F// Version:      0.1
    37F//
    38F// Description: Structure and variable definitions.
    39F//
    40F//############################################################################
    41F// Author: Rogério Lima
    42F// Release Date: July 2012
    43F//############################################################################
    44F#ifndef DSP_TYPES_H
    45F#define DSP_TYPES_H
    46F/* These definitions might not be 8-bit wide */
    47F
    48Ftypedef
    49Fsigned char
    50F  int8_t ;
    51F
    52Ftypedef
    53Funsigned char
    54F  uint8_t ;
    55F  /* 7.18.1.1 Exact-width integer types */
    56F
    57Ftypedef
    58Fshort
    59F  int16_t ;
    60F
    61Ftypedef
    62Funsigned short
    63F  uint16_t ;
    64F
    65Ftypedef
    66Flong
    67F  int32_t ;
    68F
    69Ftypedef
    70Funsigned long
    71F  uint32_t ;
    72F       /* DSP_TYPES_H */
    73F 
    74F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_types.h*/
    75F/*   CLOSE_FILE Include File */
    76F 
    77F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_comm.h */
    78F/******************************************************************************
    79F* FILENAME: dsp_comm.h
    80F*
    81F* DESCRIPTION:
    82F* Function prototypes of communication peripherals.
    83F*
    84F* FUNCTIONS:
    85F* void scia_init (void)
    86F* void spia_init (void)
    87F* void i2ca_init (void)
    88F*
    89F* VERSION DATE WHO DETAIL
    90F* 1.0 05 Set 2011 Rogerio Lima Start-up coding.
    91F* Plínio Pereira
    92F* -----------------------------------------------------------------------------
    93F* 2.0 30 Aug 2014 Rogerio Lima Improving code quality rewriting the
    94F* code and correcting errors.
    95F******************************************************************************/
    96F#ifndef DSP_COMM_H
    97F#define DSP_COMM_H
    98F#define SPI_8BITS
    99F/* Function prototypes */
   100F
   101Fvoid
   102F  scia_init ( void ) ;
   103F
   104Fvoid
   105F  spia_init ( void ) ;
   106F
   107Fvoid
   108F  i2ca_init ( void ) ;
   109F 
   110F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_comm.h*/
   111F/*   CLOSE_FILE Include File */
   112F 
   113F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Device.h */
   114F// TI File $Revision: /main/5 $
   115F// Checkin $Date: January 22, 2008 16:55:35 $
   116F//###########################################################################
   117F//
   118F// FILE: DSP2833x_Device.h
   119F//
   120F// TITLE: DSP2833x Device Definitions.
   121F//
   122F//###########################################################################
   123F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   124F// $Release Date: August 4, 2009 $
   125F//###########################################################################
   126F#ifndef DSP2833x_DEVICE_H
   127F#define DSP2833x_DEVICE_H
   128F#define TARGET 1
   129F//---------------------------------------------------------------------------
   130F// User To Select Target Device:
   131F#define DSP28_28335 TARGET
   132F#define DSP28_28334 0
   133F#define DSP28_28332 0
   134F//---------------------------------------------------------------------------
   135F// Common CPU Definitions:
   136F//
   137F
   138Fextern cregister volatile unsigned int
   139F  IFR ;
   140F
   141Fextern cregister volatile unsigned int
   142F  IER ;
   143F#define EINT asm (" clrc INTM")
   144F#define DINT asm (" setc INTM")
   145F#define ERTM asm (" clrc DBGM")
   146F#define DRTM asm (" setc DBGM")
   147F#define EALLOW asm (" EALLOW")
   148F#define EDIS asm (" EDIS")
   149F#define ESTOP0 asm (" ESTOP0")
   150F#define M_INT1 0x0001
   151F#define M_INT2 0x0002
   152F#define M_INT3 0x0004
   153F#define M_INT4 0x0008
   154F#define M_INT5 0x0010
   155F#define M_INT6 0x0020
   156F#define M_INT7 0x0040
   157F#define M_INT8 0x0080
   158F#define M_INT9 0x0100
   159F#define M_INT10 0x0200
   160F#define M_INT11 0x0400
   161F#define M_INT12 0x0800
   162F#define M_INT13 0x1000
   163F#define M_INT14 0x2000
   164F#define M_DLOG 0x4000
   165F#define M_RTOS 0x8000
   166F#define BIT0 0x0001
   167F#define BIT1 0x0002
   168F#define BIT2 0x0004
   169F#define BIT3 0x0008
   170F#define BIT4 0x0010
   171F#define BIT5 0x0020
   172F#define BIT6 0x0040
   173F#define BIT7 0x0080
   174F#define BIT8 0x0100
   175F#define BIT9 0x0200
   176F#define BIT10 0x0400
   177F#define BIT11 0x0800
   178F#define BIT12 0x1000
   179F#define BIT13 0x2000
   180F#define BIT14 0x4000
   181F#define BIT15 0x8000
   182F//---------------------------------------------------------------------------
   183F// For Portability, User Is Recommended To Use Following Data Type Size
   184F// Definitions For 16-bit and 32-Bit Signed/Unsigned Integers:
   185F//
   186F#define DSP28_DATA_TYPES
   187F
   188Ftypedef
   189Fchar
   190F  int8 ;
   191F
   192Ftypedef
   193Fint
   194F  int16 ;
   195F
   196Ftypedef
   197Flong
   198F  int32 ;
   199F
   200Ftypedef
   201Flong long
   202F  int64 ;
   203F
   204Ftypedef
   205Funsigned char
   206F  Uint8 ;
   207F
   208Ftypedef
   209Funsigned int
   210F  Uint16 ;
   211F
   212Ftypedef
   213Funsigned long
   214F  Uint32 ;
   215F
   216Ftypedef
   217Funsigned long long
   218F  Uint64 ;
   219F
   220Ftypedef
   221Ffloat
   222F  float32 ;
   223F
   224Ftypedef
   225Flong double
   226F  float64 ;
   227F//---------------------------------------------------------------------------
   228F// Include All Peripheral Header Files:
   229F//
   230F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Adc.h */
   231F// TI File $Revision: /main/1 $
   232F// Checkin $Date: August 18, 2006 13:51:50 $
   233F//###########################################################################
   234F//
   235F// FILE: DSP2833x_Adc.h
   236F//
   237F// TITLE: DSP2833x Device ADC Register Definitions.
   238F//
   239F//###########################################################################
   240F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   241F// $Release Date: August 4, 2009 $
   242F//###########################################################################
   243F#ifndef DSP2833x_ADC_H
   244F#define DSP2833x_ADC_H
   245F//---------------------------------------------------------------------------
   246F// ADC Individual Register Bit Definitions:
   247F
   248Fstruct ADCTRL1_BITS
   249F{                     // bits description
   250F  Uint16 rsvd1 : 4 ;// 3:0 reserved
   251F  Uint16 SEQ_CASC : 1 ;// 4 Cascaded sequencer mode
   252F  Uint16 SEQ_OVRD : 1 ;// 5 Sequencer override
   253F  Uint16 CONT_RUN : 1 ;// 6 Continuous run
   254F  Uint16 CPS : 1 ;// 7 ADC core clock pre-scalar
   255F  Uint16 ACQ_PS : 4 ;// 11:8 Acquisition window size
   256F  Uint16 SUSMOD : 2 ;// 13:12 Emulation suspend mode
   257F  Uint16 RESET : 1 ;// 14 ADC reset
   258F  Uint16 rsvd2 : 1 ;// 15 reserved
   259F} ;
   260F
   261Funion ADCTRL1_REG
   262F{
   263F  Uint16 all ;
   264F  struct ADCTRL1_BITS bit ;
   265F} ;
   266F
   267Fstruct ADCTRL2_BITS
   268F{                     // bits description
   269F  Uint16 EPWM_SOCB_SEQ2 : 1 ;// 0 EPWM compare B SOC mask for SEQ2
   270F  Uint16 rsvd1 : 1 ;// 1 reserved
   271F  Uint16 INT_MOD_SEQ2 : 1 ;// 2 SEQ2 Interrupt mode
   272F  Uint16 INT_ENA_SEQ2 : 1 ;// 3 SEQ2 Interrupt enable
   273F  Uint16 rsvd2 : 1 ;// 4 reserved
   274F  Uint16 SOC_SEQ2 : 1 ;// 5 Start of conversion for SEQ2
   275F  Uint16 RST_SEQ2 : 1 ;// 6 Reset SEQ2
   276F  Uint16 EXT_SOC_SEQ1 : 1 ;// 7 External start of conversion for SEQ1
   277F  Uint16 EPWM_SOCA_SEQ1 : 1 ;// 8 EPWM compare B SOC mask for SEQ1
   278F  Uint16 rsvd3 : 1 ;// 9 reserved
   279F  Uint16 INT_MOD_SEQ1 : 1 ;// 10 SEQ1 Interrupt mode
   280F  Uint16 INT_ENA_SEQ1 : 1 ;// 11 SEQ1 Interrupt enable
   281F  Uint16 rsvd4 : 1 ;// 12 reserved
   282F  Uint16 SOC_SEQ1 : 1 ;// 13 Start of conversion trigger for SEQ1
   283F  Uint16 RST_SEQ1 : 1 ;// 14 Restart sequencer 1
   284F  Uint16 EPWM_SOCB_SEQ : 1 ;// 15 EPWM compare B SOC enable
   285F} ;
   286F
   287Funion ADCTRL2_REG
   288F{
   289F  Uint16 all ;
   290F  struct ADCTRL2_BITS bit ;
   291F} ;
   292F
   293Fstruct ADCASEQSR_BITS
   294F{                       // bits description
   295F  Uint16 SEQ1_STATE : 4 ;// 3:0 SEQ1 state
   296F  Uint16 SEQ2_STATE : 3 ;// 6:4 SEQ2 state
   297F  Uint16 rsvd1 : 1 ;// 7 reserved
   298F  Uint16 SEQ_CNTR : 4 ;// 11:8 Sequencing counter status
   299F  Uint16 rsvd2 : 4 ;// 15:12 reserved
   300F} ;
   301F
   302Funion ADCASEQSR_REG
   303F{
   304F  Uint16 all ;
   305F  struct ADCASEQSR_BITS bit ;
   306F} ;
   307F
   308Fstruct ADCMAXCONV_BITS
   309F{                        // bits description
   310F  Uint16 MAX_CONV1 : 4 ;// 3:0 Max number of conversions
   311F  Uint16 MAX_CONV2 : 3 ;// 6:4 Max number of conversions
   312F  Uint16 rsvd1 : 9 ;// 15:7 reserved
   313F} ;
   314F
   315Funion ADCMAXCONV_REG
   316F{
   317F  Uint16 all ;
   318F  struct ADCMAXCONV_BITS bit ;
   319F} ;
   320F
   321Fstruct ADCCHSELSEQ1_BITS
   322F{                          // bits description
   323F  Uint16 CONV00 : 4 ;// 3:0 Conversion selection 00
   324F  Uint16 CONV01 : 4 ;// 7:4 Conversion selection 01
   325F  Uint16 CONV02 : 4 ;// 11:8 Conversion selection 02
   326F  Uint16 CONV03 : 4 ;// 15:12 Conversion selection 03
   327F} ;
   328F
   329Funion ADCCHSELSEQ1_REG
   330F{
   331F  Uint16 all ;
   332F  struct ADCCHSELSEQ1_BITS bit ;
   333F} ;
   334F
   335Fstruct ADCCHSELSEQ2_BITS
   336F{                          // bits description
   337F  Uint16 CONV04 : 4 ;// 3:0 Conversion selection 04
   338F  Uint16 CONV05 : 4 ;// 7:4 Conversion selection 05
   339F  Uint16 CONV06 : 4 ;// 11:8 Conversion selection 06
   340F  Uint16 CONV07 : 4 ;// 15:12 Conversion selection 07
   341F} ;
   342F
   343Funion ADCCHSELSEQ2_REG
   344F{
   345F  Uint16 all ;
   346F  struct ADCCHSELSEQ2_BITS bit ;
   347F} ;
   348F
   349Fstruct ADCCHSELSEQ3_BITS
   350F{                          // bits description
   351F  Uint16 CONV08 : 4 ;// 3:0 Conversion selection 08
   352F  Uint16 CONV09 : 4 ;// 7:4 Conversion selection 09
   353F  Uint16 CONV10 : 4 ;// 11:8 Conversion selection 10
   354F  Uint16 CONV11 : 4 ;// 15:12 Conversion selection 11
   355F} ;
   356F
   357Funion ADCCHSELSEQ3_REG
   358F{
   359F  Uint16 all ;
   360F  struct ADCCHSELSEQ3_BITS bit ;
   361F} ;
   362F
   363Fstruct ADCCHSELSEQ4_BITS
   364F{                          // bits description
   365F  Uint16 CONV12 : 4 ;// 3:0 Conversion selection 12
   366F  Uint16 CONV13 : 4 ;// 7:4 Conversion selection 13
   367F  Uint16 CONV14 : 4 ;// 11:8 Conversion selection 14
   368F  Uint16 CONV15 : 4 ;// 15:12 Conversion selection 15
   369F} ;
   370F
   371Funion ADCCHSELSEQ4_REG
   372F{
   373F  Uint16 all ;
   374F  struct ADCCHSELSEQ4_BITS bit ;
   375F} ;
   376F
   377Fstruct ADCTRL3_BITS
   378F{                     // bits description
   379F  Uint16 SMODE_SEL : 1 ;// 0 Sampling mode select
   380F  Uint16 ADCCLKPS : 4 ;// 4:1 ADC core clock divider
   381F  Uint16 ADCPWDN : 1 ;// 5 ADC powerdown
   382F  Uint16 ADCBGRFDN : 2 ;// 7:6 ADC bandgap/ref power down
   383F  Uint16 rsvd1 : 8 ;// 15:8 reserved
   384F} ;
   385F
   386Funion ADCTRL3_REG
   387F{
   388F  Uint16 all ;
   389F  struct ADCTRL3_BITS bit ;
   390F} ;
   391F
   392Fstruct ADCST_BITS
   393F{                   // bits description
   394F  Uint16 INT_SEQ1 : 1 ;// 0 SEQ1 Interrupt flag
   395F  Uint16 INT_SEQ2 : 1 ;// 1 SEQ2 Interrupt flag
   396F  Uint16 SEQ1_BSY : 1 ;// 2 SEQ1 busy status
   397F  Uint16 SEQ2_BSY : 1 ;// 3 SEQ2 busy status
   398F  Uint16 INT_SEQ1_CLR : 1 ;// 4 SEQ1 Interrupt clear
   399F  Uint16 INT_SEQ2_CLR : 1 ;// 5 SEQ2 Interrupt clear
   400F  Uint16 EOS_BUF1 : 1 ;// 6 End of sequence buffer1
   401F  Uint16 EOS_BUF2 : 1 ;// 7 End of sequence buffer2
   402F  Uint16 rsvd1 : 8 ;// 15:8 reserved
   403F} ;
   404F
   405Funion ADCST_REG
   406F{
   407F  Uint16 all ;
   408F  struct ADCST_BITS bit ;
   409F} ;
   410F
   411Fstruct ADCREFSEL_BITS
   412F{                       // bits description
   413F  Uint16 rsvd1 : 14 ;    // 13:0 reserved
   414F  Uint16 REF_SEL : 2 ;    // 15:14 Reference select
   415F} ;
   416F
   417Funion ADCREFSEL_REG
   418F{
   419F  Uint16 all ;
   420F  struct ADCREFSEL_BITS bit ;
   421F} ;
   422F
   423Fstruct ADCOFFTRIM_BITS
   424F{                       // bits description
   425F  int16 OFFSET_TRIM : 9 ;    // 8:0 Offset Trim
   426F  Uint16 rsvd1 : 7 ;    // 15:9 reserved
   427F} ;
   428F
   429Funion ADCOFFTRIM_REG
   430F{
   431F  Uint16 all ;
   432F  struct ADCOFFTRIM_BITS bit ;
   433F} ;
   434F
   435Fstruct ADC_REGS
   436F{
   437F  union ADCTRL1_REG ADCTRL1 ;  // ADC Control 1
   438F  union ADCTRL2_REG ADCTRL2 ;  // ADC Control 2
   439F  union ADCMAXCONV_REG ADCMAXCONV ;  // Max conversions
   440F  union ADCCHSELSEQ1_REG ADCCHSELSEQ1 ;  // Channel select sequencing control 1
   441F  union ADCCHSELSEQ2_REG ADCCHSELSEQ2 ;  // Channel select sequencing control 2
   442F  union ADCCHSELSEQ3_REG ADCCHSELSEQ3 ;  // Channel select sequencing control 3
   443F  union ADCCHSELSEQ4_REG ADCCHSELSEQ4 ;  // Channel select sequencing control 4
   444F  union ADCASEQSR_REG ADCASEQSR ;  // Autosequence status register
   445F  Uint16 ADCRESULT0 ;  // Conversion Result Buffer 0
   446F  Uint16 ADCRESULT1 ;  // Conversion Result Buffer 1
   447F  Uint16 ADCRESULT2 ;  // Conversion Result Buffer 2
   448F  Uint16 ADCRESULT3 ;  // Conversion Result Buffer 3
   449F  Uint16 ADCRESULT4 ;  // Conversion Result Buffer 4
   450F  Uint16 ADCRESULT5 ;  // Conversion Result Buffer 5
   451F  Uint16 ADCRESULT6 ;  // Conversion Result Buffer 6
   452F  Uint16 ADCRESULT7 ;  // Conversion Result Buffer 7
   453F  Uint16 ADCRESULT8 ;  // Conversion Result Buffer 8
   454F  Uint16 ADCRESULT9 ;  // Conversion Result Buffer 9
   455F  Uint16 ADCRESULT10 ;  // Conversion Result Buffer 10
   456F  Uint16 ADCRESULT11 ;  // Conversion Result Buffer 11
   457F  Uint16 ADCRESULT12 ;  // Conversion Result Buffer 12
   458F  Uint16 ADCRESULT13 ;  // Conversion Result Buffer 13
   459F  Uint16 ADCRESULT14 ;  // Conversion Result Buffer 14
   460F  Uint16 ADCRESULT15 ;  // Conversion Result Buffer 15
   461F  union ADCTRL3_REG ADCTRL3 ;  // ADC Control 3
   462F  union ADCST_REG ADCST ;  // ADC Status Register
   463F  Uint16 rsvd1 ;
   464F  Uint16 rsvd2 ;
   465F  union ADCREFSEL_REG ADCREFSEL ;  // Reference Select Register
   466F  union ADCOFFTRIM_REG ADCOFFTRIM ;  // Offset Trim Register
   467F} ;
   468F
   469Fstruct ADC_RESULT_MIRROR_REGS
   470F{
   471F  Uint16 ADCRESULT0 ;  // Conversion Result Buffer 0
   472F  Uint16 ADCRESULT1 ;  // Conversion Result Buffer 1
   473F  Uint16 ADCRESULT2 ;  // Conversion Result Buffer 2
   474F  Uint16 ADCRESULT3 ;  // Conversion Result Buffer 3
   475F  Uint16 ADCRESULT4 ;  // Conversion Result Buffer 4
   476F  Uint16 ADCRESULT5 ;  // Conversion Result Buffer 5
   477F  Uint16 ADCRESULT6 ;  // Conversion Result Buffer 6
   478F  Uint16 ADCRESULT7 ;  // Conversion Result Buffer 7
   479F  Uint16 ADCRESULT8 ;  // Conversion Result Buffer 8
   480F  Uint16 ADCRESULT9 ;  // Conversion Result Buffer 9
   481F  Uint16 ADCRESULT10 ;  // Conversion Result Buffer 10
   482F  Uint16 ADCRESULT11 ;  // Conversion Result Buffer 11
   483F  Uint16 ADCRESULT12 ;  // Conversion Result Buffer 12
   484F  Uint16 ADCRESULT13 ;  // Conversion Result Buffer 13
   485F  Uint16 ADCRESULT14 ;  // Conversion Result Buffer 14
   486F  Uint16 ADCRESULT15 ;  // Conversion Result Buffer 15
   487F} ;
   488F//---------------------------------------------------------------------------
   489F// ADC External References & Function Declarations:
   490F//
   491F
   492Fextern volatile struct ADC_REGS
   493F  AdcRegs ;
   494F
   495Fextern volatile struct ADC_RESULT_MIRROR_REGS
   496F  AdcMirror ;
   497F       /* extern "C" */
   498F       // end of DSP2833x_ADC_H definition
   499F//===========================================================================
   500F// End of file.
   501F//===========================================================================
   502F 
   503F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Adc.h*/
   504F/*   CLOSE_FILE Include File */
   505F 
   506F                // ADC Registers
   507F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DevEmu.h */
   508F// TI File $Revision: /main/4 $
   509F// Checkin $Date: April 15, 2009 10:05:17 $
   510F//###########################################################################
   511F//
   512F// FILE: DSP2833x_DevEmu.h
   513F//
   514F// TITLE: DSP2833x Device Emulation Register Definitions.
   515F//
   516F//###########################################################################
   517F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   518F// $Release Date: August 4, 2009 $
   519F//###########################################################################
   520F#ifndef DSP2833x_DEV_EMU_H
   521F#define DSP2833x_DEV_EMU_H
   522F//---------------------------------------------------------------------------
   523F// Device Emulation Register Bit Definitions:
   524F//
   525F// Device Configuration Register Bit Definitions
   526F
   527Fstruct DEVICECNF_BITS
   528F{                       // bits description
   529F  Uint16 rsvd1 : 3 ;
   530F                   // 2:0 reserved
   531F  Uint16 VMAPS : 1 ;
   532F                   // 3 VMAP Status
   533F  Uint16 rsvd2 : 1 ;
   534F                   // 4 reserved
   535F  Uint16 XRSn : 1 ;
   536F                  // 5 XRSn Signal Status
   537F  Uint16 rsvd3 : 10 ;
   538F                    // 15:6
   539F  Uint16 rsvd4 : 3 ;
   540F                   // 18:16
   541F  Uint16 ENPROT : 1 ;
   542F                    // 19 Enable/Disable pipeline protection
   543F  Uint16 rsvd5 : 7 ;
   544F                   // 26:20 reserved
   545F  Uint16 TRSTN : 1 ;
   546F                   // 27 Status of TRSTn signal
   547F  Uint16 rsvd6 : 4 ;
   548F                   // 31:28 reserved
   549F} ;
   550F
   551Funion DEVICECNF_REG
   552F{
   553F  Uint32 all ;
   554F  struct DEVICECNF_BITS bit ;
   555F} ;
   556F// CLASSID
   557F
   558Fstruct CLASSID_BITS
   559F{                     // bits description
   560F  Uint16 CLASSNO : 8 ;
   561F                     // 7:0 Class Number
   562F  Uint16 PARTTYPE : 8 ;
   563F                      // 15:8 Part Type
   564F} ;
   565F
   566Funion CLASSID_REG
   567F{
   568F  Uint16 all ;
   569F  struct CLASSID_BITS bit ;
   570F} ;
   571F
   572Fstruct DEV_EMU_REGS
   573F{
   574F  union DEVICECNF_REG DEVICECNF ; // device configuration
   575F  union CLASSID_REG CLASSID ; // Class ID
   576F  Uint16 REVID ; // Device ID
   577F  Uint16 PROTSTART ; // Write-Read protection start
   578F  Uint16 PROTRANGE ; // Write-Read protection range
   579F  Uint16 rsvd2 [ 202 ] ;
   580F} ;
   581F// PARTID
   582F
   583Fstruct PARTID_BITS
   584F{                    // bits description
   585F  Uint16 PARTNO : 8 ;
   586F                    // 7:0 Part Number
   587F  Uint16 PARTTYPE : 8 ;
   588F                      // 15:8 Part Type
   589F} ;
   590F
   591Funion PARTID_REG
   592F{
   593F  Uint16 all ;
   594F  struct PARTID_BITS bit ;
   595F} ;
   596F
   597Fstruct PARTID_REGS
   598F{
   599F  union PARTID_REG PARTID ; // Part ID
   600F} ;
   601F//---------------------------------------------------------------------------
   602F// Device Emulation Register References & Function Declarations:
   603F//
   604F
   605Fextern volatile struct DEV_EMU_REGS
   606F  DevEmuRegs ;
   607F
   608Fextern volatile struct PARTID_REGS
   609F  PartIdRegs ;
   610F       /* extern "C" */
   611F       // end of DSP2833x_DEV_EMU_H definition
   612F//===========================================================================
   613F// End of file.
   614F//===========================================================================
   615F 
   616F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DevEmu.h*/
   617F/*   CLOSE_FILE Include File */
   618F 
   619F             // Device Emulation Registers
   620F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_CpuTimers.h */
   621F// TI File $Revision: /main/4 $
   622F// Checkin $Date: March 20, 2007 15:33:42 $
   623F//###########################################################################
   624F//
   625F// FILE: DSP2833x_CpuTimers.h
   626F//
   627F// TITLE: DSP2833x CPU 32-bit Timers Register Definitions.
   628F//
   629F// NOTES: CpuTimer1 and CpuTimer2 are reserved for use with DSP BIOS and
   630F// other realtime operating systems.
   631F//
   632F// Do not use these two timers in your application if you ever plan
   633F// on integrating DSP-BIOS or another realtime OS.
   634F//
   635F// For this reason, comment out the code to manipulate these two timers
   636F// if using DSP-BIOS or another realtime OS.
   637F//
   638F//###########################################################################
   639F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   640F// $Release Date: August 4, 2009 $
   641F//###########################################################################
   642F#ifndef DSP2833x_CPU_TIMERS_H
   643F#define DSP2833x_CPU_TIMERS_H
   644F//---------------------------------------------------------------------------
   645F// CPU Timer Register Bit Definitions:
   646F//
   647F//
   648F// TCR: Control register bit definitions:
   649F
   650Fstruct TCR_BITS
   651F{                 // bits description
   652F  Uint16 rsvd1 : 4 ;
   653F                   // 3:0 reserved
   654F  Uint16 TSS : 1 ;
   655F                 // 4 Timer Start/Stop
   656F  Uint16 TRB : 1 ;
   657F                 // 5 Timer reload
   658F  Uint16 rsvd2 : 4 ;
   659F                   // 9:6 reserved
   660F  Uint16 SOFT : 1 ;
   661F                  // 10 Emulation modes
   662F  Uint16 FREE : 1 ;
   663F                  // 11
   664F  Uint16 rsvd3 : 2 ;
   665F                   // 12:13 reserved
   666F  Uint16 TIE : 1 ;
   667F                 // 14 Output enable
   668F  Uint16 TIF : 1 ;
   669F                 // 15 Interrupt flag
   670F} ;
   671F
   672Funion TCR_REG
   673F{
   674F  Uint16 all ;
   675F  struct TCR_BITS bit ;
   676F} ;
   677F// TPR: Pre-scale low bit definitions:
   678F
   679Fstruct TPR_BITS
   680F{                 // bits description
   681F  Uint16 TDDR : 8 ;
   682F                  // 7:0 Divide-down low
   683F  Uint16 PSC : 8 ;
   684F                 // 15:8 Prescale counter low
   685F} ;
   686F
   687Funion TPR_REG
   688F{
   689F  Uint16 all ;
   690F  struct TPR_BITS bit ;
   691F} ;
   692F// TPRH: Pre-scale high bit definitions:
   693F
   694Fstruct TPRH_BITS
   695F{                  // bits description
   696F  Uint16 TDDRH : 8 ;
   697F                   // 7:0 Divide-down high
   698F  Uint16 PSCH : 8 ;
   699F                  // 15:8 Prescale counter high
   700F} ;
   701F
   702Funion TPRH_REG
   703F{
   704F  Uint16 all ;
   705F  struct TPRH_BITS bit ;
   706F} ;
   707F// TIM, TIMH: Timer register definitions:
   708F
   709Fstruct TIM_REG
   710F{
   711F  Uint16 LSW ;
   712F  Uint16 MSW ;
   713F} ;
   714F
   715Funion TIM_GROUP
   716F{
   717F  Uint32 all ;
   718F  struct TIM_REG half ;
   719F} ;
   720F// PRD, PRDH: Period register definitions:
   721F
   722Fstruct PRD_REG
   723F{
   724F  Uint16 LSW ;
   725F  Uint16 MSW ;
   726F} ;
   727F
   728Funion PRD_GROUP
   729F{
   730F  Uint32 all ;
   731F  struct PRD_REG half ;
   732F} ;
   733F//---------------------------------------------------------------------------
   734F// CPU Timer Register File:
   735F//
   736F
   737Fstruct CPUTIMER_REGS
   738F{
   739F  union TIM_GROUP TIM ; // Timer counter register
   740F  union PRD_GROUP PRD ; // Period register
   741F  union TCR_REG TCR ; // Timer control register
   742F  Uint16 rsvd1 ; // reserved
   743F  union TPR_REG TPR ; // Timer pre-scale low
   744F  union TPRH_REG TPRH ; // Timer pre-scale high
   745F} ;
   746F//---------------------------------------------------------------------------
   747F// CPU Timer Support Variables:
   748F//
   749F
   750Fstruct CPUTIMER_VARS
   751F{
   752F  volatile struct CPUTIMER_REGS * RegsAddr ;
   753F  Uint32 InterruptCount ;
   754F  float CPUFreqInMHz ;
   755F  float PeriodInUSec ;
   756F} ;
   757F//---------------------------------------------------------------------------
   758F// Function prototypes and external definitions:
   759F//
   760F
   761Fvoid
   762F  InitCpuTimers ( void ) ;
   763F
   764Fvoid
   765T  ConfigCpuTimer (
   766F  struct CPUTIMER_VARS * Timer ,
   767F  float Freq ,
   768F  float Period ) ;
   769F
   770Fextern volatile struct CPUTIMER_REGS
   771F  CpuTimer0Regs ;
   772F
   773Fextern struct CPUTIMER_VARS
   774F  CpuTimer0 ;
   775F// CpuTimer 1 and CpuTimer2 are reserved for DSP BIOS & other RTOS. Comment out CpuTimer1 and CpuTimer2 if using DSP BIOS or other RTOS
   776F
   777Fextern volatile struct CPUTIMER_REGS
   778F  CpuTimer1Regs ;
   779F
   780Fextern volatile struct CPUTIMER_REGS
   781F  CpuTimer2Regs ;
   782F
   783Fextern struct CPUTIMER_VARS
   784F  CpuTimer1 ;
   785F
   786Fextern struct CPUTIMER_VARS
   787F  CpuTimer2 ;
   788F//---------------------------------------------------------------------------
   789F// Usefull Timer Operations:
   790F//
   791F// Start Timer:
   792F#define StartCpuTimer0( ) CpuTimer0Regs . TCR . bit . TSS = 0
   793F// Stop Timer:
   794F#define StopCpuTimer0( ) CpuTimer0Regs . TCR . bit . TSS = 1
   795F// Reload Timer With period Value:
   796F#define ReloadCpuTimer0( ) CpuTimer0Regs . TCR . bit . TRB = 1
   797F// Read 32-Bit Timer Value:
   798F#define ReadCpuTimer0Counter( ) CpuTimer0Regs . TIM . all
   799F// Read 32-Bit Period Value:
   800F#define ReadCpuTimer0Period( ) CpuTimer0Regs . PRD . all
   801F// CpuTimer 1 and CpuTimer2 are reserved for DSP BIOS & other RTOS
   802F// Do not use these two timers if you ever plan on integrating
   803F// DSP-BIOS or another realtime OS.
   804F//
   805F// For this reason, comment out the code to manipulate these two timers
   806F// if using DSP-BIOS or another realtime OS.
   807F// Start Timer:
   808F#define StartCpuTimer1( ) CpuTimer1Regs . TCR . bit . TSS = 0
   809F#define StartCpuTimer2( ) CpuTimer2Regs . TCR . bit . TSS = 0
   810F// Stop Timer:
   811F#define StopCpuTimer1( ) CpuTimer1Regs . TCR . bit . TSS = 1
   812F#define StopCpuTimer2( ) CpuTimer2Regs . TCR . bit . TSS = 1
   813F// Reload Timer With period Value:
   814F#define ReloadCpuTimer1( ) CpuTimer1Regs . TCR . bit . TRB = 1
   815F#define ReloadCpuTimer2( ) CpuTimer2Regs . TCR . bit . TRB = 1
   816F// Read 32-Bit Timer Value:
   817F#define ReadCpuTimer1Counter( ) CpuTimer1Regs . TIM . all
   818F#define ReadCpuTimer2Counter( ) CpuTimer2Regs . TIM . all
   819F// Read 32-Bit Period Value:
   820F#define ReadCpuTimer1Period( ) CpuTimer1Regs . PRD . all
   821F#define ReadCpuTimer2Period( ) CpuTimer2Regs . PRD . all
   822F       /* extern "C" */
   823F       // end of DSP2833x_CPU_TIMERS_H definition
   824F//===========================================================================
   825F// End of file.
   826F//===========================================================================
   827F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_CpuTimers.h*/
   828F/*   CLOSE_FILE Include File */
   829F 
   830F          // 32-bit CPU Timers
   831F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECan.h */
   832F// TI File $Revision: /main/2 $
   833F// Checkin $Date: May 7, 2007 16:05:39 $
   834F//###########################################################################
   835F//
   836F// FILE: DSP2833x_ECan.h
   837F//
   838F// TITLE: DSP2833x Device eCAN Register Definitions.
   839F//
   840F//###########################################################################
   841F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   842F// $Release Date: August 4, 2009 $
   843F//###########################################################################
   844F#ifndef DSP2833x_ECAN_H
   845F#define DSP2833x_ECAN_H
   846F/* --------------------------------------------------- */
   847F/* eCAN Control & Status Registers */
   848F/* ----------------------------------------------------*/
   849F/* eCAN Mailbox enable register (CANME) bit definitions */
   850F
   851Fstruct CANME_BITS
   852F{                   // bit description
   853F  Uint16 ME0 : 1 ;
   854F                 // 0 Enable Mailbox 0
   855F  Uint16 ME1 : 1 ;
   856F                 // 1 Enable Mailbox 1
   857F  Uint16 ME2 : 1 ;
   858F                 // 2 Enable Mailbox 2
   859F  Uint16 ME3 : 1 ;
   860F                 // 3 Enable Mailbox 3
   861F  Uint16 ME4 : 1 ;
   862F                 // 4 Enable Mailbox 4
   863F  Uint16 ME5 : 1 ;
   864F                 // 5 Enable Mailbox 5
   865F  Uint16 ME6 : 1 ;
   866F                 // 6 Enable Mailbox 6
   867F  Uint16 ME7 : 1 ;
   868F                 // 7 Enable Mailbox 7
   869F  Uint16 ME8 : 1 ;
   870F                 // 8 Enable Mailbox 8
   871F  Uint16 ME9 : 1 ;
   872F                 // 9 Enable Mailbox 9
   873F  Uint16 ME10 : 1 ;
   874F                  // 10 Enable Mailbox 10
   875F  Uint16 ME11 : 1 ;
   876F                  // 11 Enable Mailbox 11
   877F  Uint16 ME12 : 1 ;
   878F                  // 12 Enable Mailbox 12
   879F  Uint16 ME13 : 1 ;
   880F                  // 13 Enable Mailbox 13
   881F  Uint16 ME14 : 1 ;
   882F                  // 14 Enable Mailbox 14
   883F  Uint16 ME15 : 1 ;
   884F                  // 15 Enable Mailbox 15
   885F  Uint16 ME16 : 1 ;
   886F                  // 16 Enable Mailbox 16
   887F  Uint16 ME17 : 1 ;
   888F                  // 17 Enable Mailbox 17
   889F  Uint16 ME18 : 1 ;
   890F                  // 18 Enable Mailbox 18
   891F  Uint16 ME19 : 1 ;
   892F                  // 19 Enable Mailbox 19
   893F  Uint16 ME20 : 1 ;
   894F                  // 20 Enable Mailbox 20
   895F  Uint16 ME21 : 1 ;
   896F                  // 21 Enable Mailbox 21
   897F  Uint16 ME22 : 1 ;
   898F                  // 22 Enable Mailbox 22
   899F  Uint16 ME23 : 1 ;
   900F                  // 23 Enable Mailbox 23
   901F  Uint16 ME24 : 1 ;
   902F                  // 24 Enable Mailbox 24
   903F  Uint16 ME25 : 1 ;
   904F                  // 25 Enable Mailbox 25
   905F  Uint16 ME26 : 1 ;
   906F                  // 26 Enable Mailbox 26
   907F  Uint16 ME27 : 1 ;
   908F                  // 27 Enable Mailbox 27
   909F  Uint16 ME28 : 1 ;
   910F                  // 28 Enable Mailbox 28
   911F  Uint16 ME29 : 1 ;
   912F                  // 29 Enable Mailbox 29
   913F  Uint16 ME30 : 1 ;
   914F                  // 30 Enable Mailbox 30
   915F  Uint16 ME31 : 1 ;
   916F                  // 31 Enable Mailbox 31
   917F} ;
   918F/* Allow access to the bit fields or entire register */
   919F
   920Funion CANME_REG
   921F{
   922F  Uint32 all ;
   923F  struct CANME_BITS bit ;
   924F} ;
   925F/* eCAN Mailbox direction register (CANMD) bit definitions */
   926F
   927Fstruct CANMD_BITS
   928F{                   // bit description
   929F  Uint16 MD0 : 1 ;
   930F                 // 0 0 -> Tx 1 -> Rx
   931F  Uint16 MD1 : 1 ;
   932F                 // 1 0 -> Tx 1 -> Rx
   933F  Uint16 MD2 : 1 ;
   934F                 // 2 0 -> Tx 1 -> Rx
   935F  Uint16 MD3 : 1 ;
   936F                 // 3 0 -> Tx 1 -> Rx
   937F  Uint16 MD4 : 1 ;
   938F                 // 4 0 -> Tx 1 -> Rx
   939F  Uint16 MD5 : 1 ;
   940F                 // 5 0 -> Tx 1 -> Rx
   941F  Uint16 MD6 : 1 ;
   942F                 // 6 0 -> Tx 1 -> Rx
   943F  Uint16 MD7 : 1 ;
   944F                 // 7 0 -> Tx 1 -> Rx
   945F  Uint16 MD8 : 1 ;
   946F                 // 8 0 -> Tx 1 -> Rx
   947F  Uint16 MD9 : 1 ;
   948F                 // 9 0 -> Tx 1 -> Rx
   949F  Uint16 MD10 : 1 ;
   950F                  // 10 0 -> Tx 1 -> Rx
   951F  Uint16 MD11 : 1 ;
   952F                  // 11 0 -> Tx 1 -> Rx
   953F  Uint16 MD12 : 1 ;
   954F                  // 12 0 -> Tx 1 -> Rx
   955F  Uint16 MD13 : 1 ;
   956F                  // 13 0 -> Tx 1 -> Rx
   957F  Uint16 MD14 : 1 ;
   958F                  // 14 0 -> Tx 1 -> Rx
   959F  Uint16 MD15 : 1 ;
   960F                  // 15 0 -> Tx 1 -> Rx
   961F  Uint16 MD16 : 1 ;
   962F                  // 16 0 -> Tx 1 -> Rx
   963F  Uint16 MD17 : 1 ;
   964F                  // 17 0 -> Tx 1 -> Rx
   965F  Uint16 MD18 : 1 ;
   966F                  // 18 0 -> Tx 1 -> Rx
   967F  Uint16 MD19 : 1 ;
   968F                  // 19 0 -> Tx 1 -> Rx
   969F  Uint16 MD20 : 1 ;
   970F                  // 20 0 -> Tx 1 -> Rx
   971F  Uint16 MD21 : 1 ;
   972F                  // 21 0 -> Tx 1 -> Rx
   973F  Uint16 MD22 : 1 ;
   974F                  // 22 0 -> Tx 1 -> Rx
   975F  Uint16 MD23 : 1 ;
   976F                  // 23 0 -> Tx 1 -> Rx
   977F  Uint16 MD24 : 1 ;
   978F                  // 24 0 -> Tx 1 -> Rx
   979F  Uint16 MD25 : 1 ;
   980F                  // 25 0 -> Tx 1 -> Rx
   981F  Uint16 MD26 : 1 ;
   982F                  // 26 0 -> Tx 1 -> Rx
   983F  Uint16 MD27 : 1 ;
   984F                  // 27 0 -> Tx 1 -> Rx
   985F  Uint16 MD28 : 1 ;
   986F                  // 28 0 -> Tx 1 -> Rx
   987F  Uint16 MD29 : 1 ;
   988F                  // 29 0 -> Tx 1 -> Rx
   989F  Uint16 MD30 : 1 ;
   990F                  // 30 0 -> Tx 1 -> Rx
   991F  Uint16 MD31 : 1 ;
   992F                  // 31 0 -> Tx 1 -> Rx
   993F} ;
   994F/* Allow access to the bit fields or entire register */
   995F
   996Funion CANMD_REG
   997F{
   998F  Uint32 all ;
   999F  struct CANMD_BITS bit ;
  1000F} ;
  1001F/* eCAN Transmit Request Set register (CANTRS) bit definitions */
  1002F
  1003Fstruct CANTRS_BITS
  1004F{                    // bit description
  1005F  Uint16 TRS0 : 1 ;
  1006F                  // 0 TRS for Mailbox 0
  1007F  Uint16 TRS1 : 1 ;
  1008F                  // 1 TRS for Mailbox 1
  1009F  Uint16 TRS2 : 1 ;
  1010F                  // 2 TRS for Mailbox 2
  1011F  Uint16 TRS3 : 1 ;
  1012F                  // 3 TRS for Mailbox 3
  1013F  Uint16 TRS4 : 1 ;
  1014F                  // 4 TRS for Mailbox 4
  1015F  Uint16 TRS5 : 1 ;
  1016F                  // 5 TRS for Mailbox 5
  1017F  Uint16 TRS6 : 1 ;
  1018F                  // 6 TRS for Mailbox 6
  1019F  Uint16 TRS7 : 1 ;
  1020F                  // 7 TRS for Mailbox 7
  1021F  Uint16 TRS8 : 1 ;
  1022F                  // 8 TRS for Mailbox 8
  1023F  Uint16 TRS9 : 1 ;
  1024F                  // 9 TRS for Mailbox 9
  1025F  Uint16 TRS10 : 1 ;
  1026F                   // 10 TRS for Mailbox 10
  1027F  Uint16 TRS11 : 1 ;
  1028F                   // 11 TRS for Mailbox 11
  1029F  Uint16 TRS12 : 1 ;
  1030F                   // 12 TRS for Mailbox 12
  1031F  Uint16 TRS13 : 1 ;
  1032F                   // 13 TRS for Mailbox 13
  1033F  Uint16 TRS14 : 1 ;
  1034F                   // 14 TRS for Mailbox 14
  1035F  Uint16 TRS15 : 1 ;
  1036F                   // 15 TRS for Mailbox 15
  1037F  Uint16 TRS16 : 1 ;
  1038F                   // 16 TRS for Mailbox 16
  1039F  Uint16 TRS17 : 1 ;
  1040F                   // 17 TRS for Mailbox 17
  1041F  Uint16 TRS18 : 1 ;
  1042F                   // 18 TRS for Mailbox 18
  1043F  Uint16 TRS19 : 1 ;
  1044F                   // 19 TRS for Mailbox 19
  1045F  Uint16 TRS20 : 1 ;
  1046F                   // 20 TRS for Mailbox 20
  1047F  Uint16 TRS21 : 1 ;
  1048F                   // 21 TRS for Mailbox 21
  1049F  Uint16 TRS22 : 1 ;
  1050F                   // 22 TRS for Mailbox 22
  1051F  Uint16 TRS23 : 1 ;
  1052F                   // 23 TRS for Mailbox 23
  1053F  Uint16 TRS24 : 1 ;
  1054F                   // 24 TRS for Mailbox 24
  1055F  Uint16 TRS25 : 1 ;
  1056F                   // 25 TRS for Mailbox 25
  1057F  Uint16 TRS26 : 1 ;
  1058F                   // 26 TRS for Mailbox 26
  1059F  Uint16 TRS27 : 1 ;
  1060F                   // 27 TRS for Mailbox 27
  1061F  Uint16 TRS28 : 1 ;
  1062F                   // 28 TRS for Mailbox 28
  1063F  Uint16 TRS29 : 1 ;
  1064F                   // 29 TRS for Mailbox 29
  1065F  Uint16 TRS30 : 1 ;
  1066F                   // 30 TRS for Mailbox 30
  1067F  Uint16 TRS31 : 1 ;
  1068F                   // 31 TRS for Mailbox 31
  1069F} ;
  1070F/* Allow access to the bit fields or entire register */
  1071F
  1072Funion CANTRS_REG
  1073F{
  1074F  Uint32 all ;
  1075F  struct CANTRS_BITS bit ;
  1076F} ;
  1077F/* eCAN Transmit Request Reset register (CANTRR) bit definitions */
  1078F
  1079Fstruct CANTRR_BITS
  1080F{                    // bit description
  1081F  Uint16 TRR0 : 1 ;
  1082F                  // 0 TRR for Mailbox 0
  1083F  Uint16 TRR1 : 1 ;
  1084F                  // 1 TRR for Mailbox 1
  1085F  Uint16 TRR2 : 1 ;
  1086F                  // 2 TRR for Mailbox 2
  1087F  Uint16 TRR3 : 1 ;
  1088F                  // 3 TRR for Mailbox 3
  1089F  Uint16 TRR4 : 1 ;
  1090F                  // 4 TRR for Mailbox 4
  1091F  Uint16 TRR5 : 1 ;
  1092F                  // 5 TRR for Mailbox 5
  1093F  Uint16 TRR6 : 1 ;
  1094F                  // 6 TRR for Mailbox 6
  1095F  Uint16 TRR7 : 1 ;
  1096F                  // 7 TRR for Mailbox 7
  1097F  Uint16 TRR8 : 1 ;
  1098F                  // 8 TRR for Mailbox 8
  1099F  Uint16 TRR9 : 1 ;
  1100F                  // 9 TRR for Mailbox 9
  1101F  Uint16 TRR10 : 1 ;
  1102F                   // 10 TRR for Mailbox 10
  1103F  Uint16 TRR11 : 1 ;
  1104F                   // 11 TRR for Mailbox 11
  1105F  Uint16 TRR12 : 1 ;
  1106F                   // 12 TRR for Mailbox 12
  1107F  Uint16 TRR13 : 1 ;
  1108F                   // 13 TRR for Mailbox 13
  1109F  Uint16 TRR14 : 1 ;
  1110F                   // 14 TRR for Mailbox 14
  1111F  Uint16 TRR15 : 1 ;
  1112F                   // 15 TRR for Mailbox 15
  1113F  Uint16 TRR16 : 1 ;
  1114F                   // 16 TRR for Mailbox 16
  1115F  Uint16 TRR17 : 1 ;
  1116F                   // 17 TRR for Mailbox 17
  1117F  Uint16 TRR18 : 1 ;
  1118F                   // 18 TRR for Mailbox 18
  1119F  Uint16 TRR19 : 1 ;
  1120F                   // 19 TRR for Mailbox 19
  1121F  Uint16 TRR20 : 1 ;
  1122F                   // 20 TRR for Mailbox 20
  1123F  Uint16 TRR21 : 1 ;
  1124F                   // 21 TRR for Mailbox 21
  1125F  Uint16 TRR22 : 1 ;
  1126F                   // 22 TRR for Mailbox 22
  1127F  Uint16 TRR23 : 1 ;
  1128F                   // 23 TRR for Mailbox 23
  1129F  Uint16 TRR24 : 1 ;
  1130F                   // 24 TRR for Mailbox 24
  1131F  Uint16 TRR25 : 1 ;
  1132F                   // 25 TRR for Mailbox 25
  1133F  Uint16 TRR26 : 1 ;
  1134F                   // 26 TRR for Mailbox 26
  1135F  Uint16 TRR27 : 1 ;
  1136F                   // 27 TRR for Mailbox 27
  1137F  Uint16 TRR28 : 1 ;
  1138F                   // 28 TRR for Mailbox 28
  1139F  Uint16 TRR29 : 1 ;
  1140F                   // 29 TRR for Mailbox 29
  1141F  Uint16 TRR30 : 1 ;
  1142F                   // 30 TRR for Mailbox 30
  1143F  Uint16 TRR31 : 1 ;
  1144F                   // 31 TRR for Mailbox 31
  1145F} ;
  1146F/* Allow access to the bit fields or entire register */
  1147F
  1148Funion CANTRR_REG
  1149F{
  1150F  Uint32 all ;
  1151F  struct CANTRR_BITS bit ;
  1152F} ;
  1153F/* eCAN Transmit Acknowledge register (CANTA) bit definitions */
  1154F
  1155Fstruct CANTA_BITS
  1156F{                   // bit description
  1157F  Uint16 TA0 : 1 ;
  1158F                 // 0 TA for Mailbox 0
  1159F  Uint16 TA1 : 1 ;
  1160F                 // 1 TA for Mailbox 1
  1161F  Uint16 TA2 : 1 ;
  1162F                 // 2 TA for Mailbox 2
  1163F  Uint16 TA3 : 1 ;
  1164F                 // 3 TA for Mailbox 3
  1165F  Uint16 TA4 : 1 ;
  1166F                 // 4 TA for Mailbox 4
  1167F  Uint16 TA5 : 1 ;
  1168F                 // 5 TA for Mailbox 5
  1169F  Uint16 TA6 : 1 ;
  1170F                 // 6 TA for Mailbox 6
  1171F  Uint16 TA7 : 1 ;
  1172F                 // 7 TA for Mailbox 7
  1173F  Uint16 TA8 : 1 ;
  1174F                 // 8 TA for Mailbox 8
  1175F  Uint16 TA9 : 1 ;
  1176F                 // 9 TA for Mailbox 9
  1177F  Uint16 TA10 : 1 ;
  1178F                  // 10 TA for Mailbox 10
  1179F  Uint16 TA11 : 1 ;
  1180F                  // 11 TA for Mailbox 11
  1181F  Uint16 TA12 : 1 ;
  1182F                  // 12 TA for Mailbox 12
  1183F  Uint16 TA13 : 1 ;
  1184F                  // 13 TA for Mailbox 13
  1185F  Uint16 TA14 : 1 ;
  1186F                  // 14 TA for Mailbox 14
  1187F  Uint16 TA15 : 1 ;
  1188F                  // 15 TA for Mailbox 15
  1189F  Uint16 TA16 : 1 ;
  1190F                  // 16 TA for Mailbox 16
  1191F  Uint16 TA17 : 1 ;
  1192F                  // 17 TA for Mailbox 17
  1193F  Uint16 TA18 : 1 ;
  1194F                  // 18 TA for Mailbox 18
  1195F  Uint16 TA19 : 1 ;
  1196F                  // 19 TA for Mailbox 19
  1197F  Uint16 TA20 : 1 ;
  1198F                  // 20 TA for Mailbox 20
  1199F  Uint16 TA21 : 1 ;
  1200F                  // 21 TA for Mailbox 21
  1201F  Uint16 TA22 : 1 ;
  1202F                  // 22 TA for Mailbox 22
  1203F  Uint16 TA23 : 1 ;
  1204F                  // 23 TA for Mailbox 23
  1205F  Uint16 TA24 : 1 ;
  1206F                  // 24 TA for Mailbox 24
  1207F  Uint16 TA25 : 1 ;
  1208F                  // 25 TA for Mailbox 25
  1209F  Uint16 TA26 : 1 ;
  1210F                  // 26 TA for Mailbox 26
  1211F  Uint16 TA27 : 1 ;
  1212F                  // 27 TA for Mailbox 27
  1213F  Uint16 TA28 : 1 ;
  1214F                  // 28 TA for Mailbox 28
  1215F  Uint16 TA29 : 1 ;
  1216F                  // 29 TA for Mailbox 29
  1217F  Uint16 TA30 : 1 ;
  1218F                  // 30 TA for Mailbox 30
  1219F  Uint16 TA31 : 1 ;
  1220F                  // 31 TA for Mailbox 31
  1221F} ;
  1222F/* Allow access to the bit fields or entire register */
  1223F
  1224Funion CANTA_REG
  1225F{
  1226F  Uint32 all ;
  1227F  struct CANTA_BITS bit ;
  1228F} ;
  1229F/* eCAN Transmit Abort Acknowledge register (CANAA) bit definitions */
  1230F
  1231Fstruct CANAA_BITS
  1232F{                   // bit description
  1233F  Uint16 AA0 : 1 ;
  1234F                 // 0 AA for Mailbox 0
  1235F  Uint16 AA1 : 1 ;
  1236F                 // 1 AA for Mailbox 1
  1237F  Uint16 AA2 : 1 ;
  1238F                 // 2 AA for Mailbox 2
  1239F  Uint16 AA3 : 1 ;
  1240F                 // 3 AA for Mailbox 3
  1241F  Uint16 AA4 : 1 ;
  1242F                 // 4 AA for Mailbox 4
  1243F  Uint16 AA5 : 1 ;
  1244F                 // 5 AA for Mailbox 5
  1245F  Uint16 AA6 : 1 ;
  1246F                 // 6 AA for Mailbox 6
  1247F  Uint16 AA7 : 1 ;
  1248F                 // 7 AA for Mailbox 7
  1249F  Uint16 AA8 : 1 ;
  1250F                 // 8 AA for Mailbox 8
  1251F  Uint16 AA9 : 1 ;
  1252F                 // 9 AA for Mailbox 9
  1253F  Uint16 AA10 : 1 ;
  1254F                  // 10 AA for Mailbox 10
  1255F  Uint16 AA11 : 1 ;
  1256F                  // 11 AA for Mailbox 11
  1257F  Uint16 AA12 : 1 ;
  1258F                  // 12 AA for Mailbox 12
  1259F  Uint16 AA13 : 1 ;
  1260F                  // 13 AA for Mailbox 13
  1261F  Uint16 AA14 : 1 ;
  1262F                  // 14 AA for Mailbox 14
  1263F  Uint16 AA15 : 1 ;
  1264F                  // 15 AA for Mailbox 15
  1265F  Uint16 AA16 : 1 ;
  1266F                  // 16 AA for Mailbox 16
  1267F  Uint16 AA17 : 1 ;
  1268F                  // 17 AA for Mailbox 17
  1269F  Uint16 AA18 : 1 ;
  1270F                  // 18 AA for Mailbox 18
  1271F  Uint16 AA19 : 1 ;
  1272F                  // 19 AA for Mailbox 19
  1273F  Uint16 AA20 : 1 ;
  1274F                  // 20 AA for Mailbox 20
  1275F  Uint16 AA21 : 1 ;
  1276F                  // 21 AA for Mailbox 21
  1277F  Uint16 AA22 : 1 ;
  1278F                  // 22 AA for Mailbox 22
  1279F  Uint16 AA23 : 1 ;
  1280F                  // 23 AA for Mailbox 23
  1281F  Uint16 AA24 : 1 ;
  1282F                  // 24 AA for Mailbox 24
  1283F  Uint16 AA25 : 1 ;
  1284F                  // 25 AA for Mailbox 25
  1285F  Uint16 AA26 : 1 ;
  1286F                  // 26 AA for Mailbox 26
  1287F  Uint16 AA27 : 1 ;
  1288F                  // 27 AA for Mailbox 27
  1289F  Uint16 AA28 : 1 ;
  1290F                  // 28 AA for Mailbox 28
  1291F  Uint16 AA29 : 1 ;
  1292F                  // 29 AA for Mailbox 29
  1293F  Uint16 AA30 : 1 ;
  1294F                  // 30 AA for Mailbox 30
  1295F  Uint16 AA31 : 1 ;
  1296F                  // 31 AA for Mailbox 31
  1297F} ;
  1298F/* Allow access to the bit fields or entire register */
  1299F
  1300Funion CANAA_REG
  1301F{
  1302F  Uint32 all ;
  1303F  struct CANAA_BITS bit ;
  1304F} ;
  1305F/* eCAN Received Message Pending register (CANRMP) bit definitions */
  1306F
  1307Fstruct CANRMP_BITS
  1308F{                    // bit description
  1309F  Uint16 RMP0 : 1 ;
  1310F                  // 0 RMP for Mailbox 0
  1311F  Uint16 RMP1 : 1 ;
  1312F                  // 1 RMP for Mailbox 1
  1313F  Uint16 RMP2 : 1 ;
  1314F                  // 2 RMP for Mailbox 2
  1315F  Uint16 RMP3 : 1 ;
  1316F                  // 3 RMP for Mailbox 3
  1317F  Uint16 RMP4 : 1 ;
  1318F                  // 4 RMP for Mailbox 4
  1319F  Uint16 RMP5 : 1 ;
  1320F                  // 5 RMP for Mailbox 5
  1321F  Uint16 RMP6 : 1 ;
  1322F                  // 6 RMP for Mailbox 6
  1323F  Uint16 RMP7 : 1 ;
  1324F                  // 7 RMP for Mailbox 7
  1325F  Uint16 RMP8 : 1 ;
  1326F                  // 8 RMP for Mailbox 8
  1327F  Uint16 RMP9 : 1 ;
  1328F                  // 9 RMP for Mailbox 9
  1329F  Uint16 RMP10 : 1 ;
  1330F                   // 10 RMP for Mailbox 10
  1331F  Uint16 RMP11 : 1 ;
  1332F                   // 11 RMP for Mailbox 11
  1333F  Uint16 RMP12 : 1 ;
  1334F                   // 12 RMP for Mailbox 12
  1335F  Uint16 RMP13 : 1 ;
  1336F                   // 13 RMP for Mailbox 13
  1337F  Uint16 RMP14 : 1 ;
  1338F                   // 14 RMP for Mailbox 14
  1339F  Uint16 RMP15 : 1 ;
  1340F                   // 15 RMP for Mailbox 15
  1341F  Uint16 RMP16 : 1 ;
  1342F                   // 16 RMP for Mailbox 16
  1343F  Uint16 RMP17 : 1 ;
  1344F                   // 17 RMP for Mailbox 17
  1345F  Uint16 RMP18 : 1 ;
  1346F                   // 18 RMP for Mailbox 18
  1347F  Uint16 RMP19 : 1 ;
  1348F                   // 19 RMP for Mailbox 19
  1349F  Uint16 RMP20 : 1 ;
  1350F                   // 20 RMP for Mailbox 20
  1351F  Uint16 RMP21 : 1 ;
  1352F                   // 21 RMP for Mailbox 21
  1353F  Uint16 RMP22 : 1 ;
  1354F                   // 22 RMP for Mailbox 22
  1355F  Uint16 RMP23 : 1 ;
  1356F                   // 23 RMP for Mailbox 23
  1357F  Uint16 RMP24 : 1 ;
  1358F                   // 24 RMP for Mailbox 24
  1359F  Uint16 RMP25 : 1 ;
  1360F                   // 25 RMP for Mailbox 25
  1361F  Uint16 RMP26 : 1 ;
  1362F                   // 26 RMP for Mailbox 26
  1363F  Uint16 RMP27 : 1 ;
  1364F                   // 27 RMP for Mailbox 27
  1365F  Uint16 RMP28 : 1 ;
  1366F                   // 28 RMP for Mailbox 28
  1367F  Uint16 RMP29 : 1 ;
  1368F                   // 29 RMP for Mailbox 29
  1369F  Uint16 RMP30 : 1 ;
  1370F                   // 30 RMP for Mailbox 30
  1371F  Uint16 RMP31 : 1 ;
  1372F                   // 31 RMP for Mailbox 31
  1373F} ;
  1374F/* Allow access to the bit fields or entire register */
  1375F
  1376Funion CANRMP_REG
  1377F{
  1378F  Uint32 all ;
  1379F  struct CANRMP_BITS bit ;
  1380F} ;
  1381F/* eCAN Received Message Lost register (CANRML) bit definitions */
  1382F
  1383Fstruct CANRML_BITS
  1384F{                    // bit description
  1385F  Uint16 RML0 : 1 ;
  1386F                  // 0 RML for Mailbox 0
  1387F  Uint16 RML1 : 1 ;
  1388F                  // 1 RML for Mailbox 1
  1389F  Uint16 RML2 : 1 ;
  1390F                  // 2 RML for Mailbox 2
  1391F  Uint16 RML3 : 1 ;
  1392F                  // 3 RML for Mailbox 3
  1393F  Uint16 RML4 : 1 ;
  1394F                  // 4 RML for Mailbox 4
  1395F  Uint16 RML5 : 1 ;
  1396F                  // 5 RML for Mailbox 5
  1397F  Uint16 RML6 : 1 ;
  1398F                  // 6 RML for Mailbox 6
  1399F  Uint16 RML7 : 1 ;
  1400F                  // 7 RML for Mailbox 7
  1401F  Uint16 RML8 : 1 ;
  1402F                  // 8 RML for Mailbox 8
  1403F  Uint16 RML9 : 1 ;
  1404F                  // 9 RML for Mailbox 9
  1405F  Uint16 RML10 : 1 ;
  1406F                   // 10 RML for Mailbox 10
  1407F  Uint16 RML11 : 1 ;
  1408F                   // 11 RML for Mailbox 11
  1409F  Uint16 RML12 : 1 ;
  1410F                   // 12 RML for Mailbox 12
  1411F  Uint16 RML13 : 1 ;
  1412F                   // 13 RML for Mailbox 13
  1413F  Uint16 RML14 : 1 ;
  1414F                   // 14 RML for Mailbox 14
  1415F  Uint16 RML15 : 1 ;
  1416F                   // 15 RML for Mailbox 15
  1417F  Uint16 RML16 : 1 ;
  1418F                   // 16 RML for Mailbox 16
  1419F  Uint16 RML17 : 1 ;
  1420F                   // 17 RML for Mailbox 17
  1421F  Uint16 RML18 : 1 ;
  1422F                   // 18 RML for Mailbox 18
  1423F  Uint16 RML19 : 1 ;
  1424F                   // 19 RML for Mailbox 19
  1425F  Uint16 RML20 : 1 ;
  1426F                   // 20 RML for Mailbox 20
  1427F  Uint16 RML21 : 1 ;
  1428F                   // 21 RML for Mailbox 21
  1429F  Uint16 RML22 : 1 ;
  1430F                   // 22 RML for Mailbox 22
  1431F  Uint16 RML23 : 1 ;
  1432F                   // 23 RML for Mailbox 23
  1433F  Uint16 RML24 : 1 ;
  1434F                   // 24 RML for Mailbox 24
  1435F  Uint16 RML25 : 1 ;
  1436F                   // 25 RML for Mailbox 25
  1437F  Uint16 RML26 : 1 ;
  1438F                   // 26 RML for Mailbox 26
  1439F  Uint16 RML27 : 1 ;
  1440F                   // 27 RML for Mailbox 27
  1441F  Uint16 RML28 : 1 ;
  1442F                   // 28 RML for Mailbox 28
  1443F  Uint16 RML29 : 1 ;
  1444F                   // 29 RML for Mailbox 29
  1445F  Uint16 RML30 : 1 ;
  1446F                   // 30 RML for Mailbox 30
  1447F  Uint16 RML31 : 1 ;
  1448F                   // 31 RML for Mailbox 31
  1449F} ;
  1450F/* Allow access to the bit fields or entire register */
  1451F
  1452Funion CANRML_REG
  1453F{
  1454F  Uint32 all ;
  1455F  struct CANRML_BITS bit ;
  1456F} ;
  1457F/* eCAN Remote Frame Pending register (CANRFP) bit definitions */
  1458F
  1459Fstruct CANRFP_BITS
  1460F{                    // bit description
  1461F  Uint16 RFP0 : 1 ;
  1462F                  // 0 RFP for Mailbox 0
  1463F  Uint16 RFP1 : 1 ;
  1464F                  // 1 RFP for Mailbox 1
  1465F  Uint16 RFP2 : 1 ;
  1466F                  // 2 RFP for Mailbox 2
  1467F  Uint16 RFP3 : 1 ;
  1468F                  // 3 RFP for Mailbox 3
  1469F  Uint16 RFP4 : 1 ;
  1470F                  // 4 RFP for Mailbox 4
  1471F  Uint16 RFP5 : 1 ;
  1472F                  // 5 RFP for Mailbox 5
  1473F  Uint16 RFP6 : 1 ;
  1474F                  // 6 RFP for Mailbox 6
  1475F  Uint16 RFP7 : 1 ;
  1476F                  // 7 RFP for Mailbox 7
  1477F  Uint16 RFP8 : 1 ;
  1478F                  // 8 RFP for Mailbox 8
  1479F  Uint16 RFP9 : 1 ;
  1480F                  // 9 RFP for Mailbox 9
  1481F  Uint16 RFP10 : 1 ;
  1482F                   // 10 RFP for Mailbox 10
  1483F  Uint16 RFP11 : 1 ;
  1484F                   // 11 RFP for Mailbox 11
  1485F  Uint16 RFP12 : 1 ;
  1486F                   // 12 RFP for Mailbox 12
  1487F  Uint16 RFP13 : 1 ;
  1488F                   // 13 RFP for Mailbox 13
  1489F  Uint16 RFP14 : 1 ;
  1490F                   // 14 RFP for Mailbox 14
  1491F  Uint16 RFP15 : 1 ;
  1492F                   // 15 RFP for Mailbox 15
  1493F  Uint16 RFP16 : 1 ;
  1494F                   // 16 RFP for Mailbox 16
  1495F  Uint16 RFP17 : 1 ;
  1496F                   // 17 RFP for Mailbox 17
  1497F  Uint16 RFP18 : 1 ;
  1498F                   // 18 RFP for Mailbox 18
  1499F  Uint16 RFP19 : 1 ;
  1500F                   // 19 RFP for Mailbox 19
  1501F  Uint16 RFP20 : 1 ;
  1502F                   // 20 RFP for Mailbox 20
  1503F  Uint16 RFP21 : 1 ;
  1504F                   // 21 RFP for Mailbox 21
  1505F  Uint16 RFP22 : 1 ;
  1506F                   // 22 RFP for Mailbox 22
  1507F  Uint16 RFP23 : 1 ;
  1508F                   // 23 RFP for Mailbox 23
  1509F  Uint16 RFP24 : 1 ;
  1510F                   // 24 RFP for Mailbox 24
  1511F  Uint16 RFP25 : 1 ;
  1512F                   // 25 RFP for Mailbox 25
  1513F  Uint16 RFP26 : 1 ;
  1514F                   // 26 RFP for Mailbox 26
  1515F  Uint16 RFP27 : 1 ;
  1516F                   // 27 RFP for Mailbox 27
  1517F  Uint16 RFP28 : 1 ;
  1518F                   // 28 RFP for Mailbox 28
  1519F  Uint16 RFP29 : 1 ;
  1520F                   // 29 RFP for Mailbox 29
  1521F  Uint16 RFP30 : 1 ;
  1522F                   // 30 RFP for Mailbox 30
  1523F  Uint16 RFP31 : 1 ;
  1524F                   // 31 RFP for Mailbox 31
  1525F} ;
  1526F/* Allow access to the bit fields or entire register */
  1527F
  1528Funion CANRFP_REG
  1529F{
  1530F  Uint32 all ;
  1531F  struct CANRFP_BITS bit ;
  1532F} ;
  1533F/* eCAN Global Acceptance Mask register (CANGAM) bit definitions */
  1534F
  1535Fstruct CANGAM_BITS
  1536F{                    // bits description
  1537F  Uint16 GAM150 : 16 ;
  1538F                     // 15:0 Global acceptance mask bits 0-15
  1539F  Uint16 GAM2816 : 13 ;
  1540F                      // 28:16 Global acceptance mask bits 16-28
  1541F  Uint16 rsvd : 2 ;
  1542F                  // 30:29 reserved
  1543F  Uint16 AMI : 1 ;
  1544F                 // 31 AMI bit
  1545F} ;
  1546F/* Allow access to the bit fields or entire register */
  1547F
  1548Funion CANGAM_REG
  1549F{
  1550F  Uint32 all ;
  1551F  struct CANGAM_BITS bit ;
  1552F} ;
  1553F/* eCAN Master Control register (CANMC) bit definitions */
  1554F
  1555Fstruct CANMC_BITS
  1556F{                   // bits description
  1557F  Uint16 MBNR : 5 ;
  1558F                  // 4:0 MBX #for CDR bit
  1559F  Uint16 SRES : 1 ;
  1560F                  // 5 Soft reset
  1561F  Uint16 STM : 1 ;
  1562F                 // 6 Self-test mode
  1563F  Uint16 ABO : 1 ;
  1564F                 // 7 Auto bus-on
  1565F  Uint16 CDR : 1 ;
  1566F                 // 8 Change data request
  1567F  Uint16 WUBA : 1 ;
  1568F                  // 9 Wake-up on bus activity
  1569F  Uint16 DBO : 1 ;
  1570F                 // 10 Data-byte order
  1571F  Uint16 PDR : 1 ;
  1572F                 // 11 Power-down mode request
  1573F  Uint16 CCR : 1 ;
  1574F                 // 12 Change configuration request
  1575F  Uint16 SCB : 1 ;
  1576F                 // 13 SCC compatibility bit
  1577F  Uint16 TCC : 1 ;
  1578F                 // 14 TSC MSB clear bit
  1579F  Uint16 MBCC : 1 ;
  1580F                  // 15 TSC clear bit thru mailbox 16
  1581F  Uint16 SUSP : 1 ;
  1582F                  // 16 SUSPEND free/soft bit
  1583F  Uint16 rsvd : 15 ;
  1584F                   // 31:17 reserved
  1585F} ;
  1586F/* Allow access to the bit fields or entire register */
  1587F
  1588Funion CANMC_REG
  1589F{
  1590F  Uint32 all ;
  1591F  struct CANMC_BITS bit ;
  1592F} ;
  1593F/* eCAN Bit -timing configuration register (CANBTC) bit definitions */
  1594F
  1595Fstruct CANBTC_BITS
  1596F{                    // bits description
  1597F  Uint16 TSEG2REG : 3 ;
  1598F                      // 2:0 TSEG2 register value
  1599F  Uint16 TSEG1REG : 4 ;
  1600F                      // 6:3 TSEG1 register value
  1601F  Uint16 SAM : 1 ;
  1602F                 // 7 Sample-point setting
  1603F  Uint16 SJWREG : 2 ;
  1604F                    // 9:8 Synchroniztion Jump Width register value
  1605F  Uint16 rsvd1 : 6 ;
  1606F                   // 15:10 reserved
  1607F  Uint16 BRPREG : 8 ;
  1608F                    // 23:16 Baudrate prescaler register value
  1609F  Uint16 rsvd2 : 8 ;
  1610F                   // 31:24 reserved
  1611F} ;
  1612F/* Allow access to the bit fields or entire register */
  1613F
  1614Funion CANBTC_REG
  1615F{
  1616F  Uint32 all ;
  1617F  struct CANBTC_BITS bit ;
  1618F} ;
  1619F/* eCAN Error & Status register (CANES) bit definitions */
  1620F
  1621Fstruct CANES_BITS
  1622F{                   // bits description
  1623F  Uint16 TM : 1 ;
  1624F                // 0 Transmit Mode
  1625F  Uint16 RM : 1 ;
  1626F                // 1 Receive Mode
  1627F  Uint16 rsvd1 : 1 ;
  1628F                   // 2 reserved
  1629F  Uint16 PDA : 1 ;
  1630F                 // 3 Power-down acknowledge
  1631F  Uint16 CCE : 1 ;
  1632F                 // 4 Change Configuration Enable
  1633F  Uint16 SMA : 1 ;
  1634F                 // 5 Suspend Mode Acknowledge
  1635F  Uint16 rsvd2 : 10 ;
  1636F                    // 15:6 reserved
  1637F  Uint16 EW : 1 ;
  1638F                // 16 Warning status
  1639F  Uint16 EP : 1 ;
  1640F                // 17 Error Passive status
  1641F  Uint16 BO : 1 ;
  1642F                // 18 Bus-off status
  1643F  Uint16 ACKE : 1 ;
  1644F                  // 19 Acknowledge error
  1645F  Uint16 SE : 1 ;
  1646F                // 20 Stuff error
  1647F  Uint16 CRCE : 1 ;
  1648F                  // 21 CRC error
  1649F  Uint16 SA1 : 1 ;
  1650F                 // 22 Stuck at Dominant error
  1651F  Uint16 BE : 1 ;
  1652F                // 23 Bit error
  1653F  Uint16 FE : 1 ;
  1654F                // 24 Framing error
  1655F  Uint16 rsvd3 : 7 ;
  1656F                   // 31:25 reserved
  1657F} ;
  1658F/* Allow access to the bit fields or entire register */
  1659F
  1660Funion CANES_REG
  1661F{
  1662F  Uint32 all ;
  1663F  struct CANES_BITS bit ;
  1664F} ;
  1665F/* eCAN Transmit Error Counter register (CANTEC) bit definitions */
  1666F
  1667Fstruct CANTEC_BITS
  1668F{                    // bits description
  1669F  Uint16 TEC : 8 ;
  1670F                 // 7:0 TEC
  1671F  Uint16 rsvd1 : 8 ;
  1672F                   // 15:8 reserved
  1673F  Uint16 rsvd2 : 16 ;
  1674F                    // 31:16 reserved
  1675F} ;
  1676F/* Allow access to the bit fields or entire register */
  1677F
  1678Funion CANTEC_REG
  1679F{
  1680F  Uint32 all ;
  1681F  struct CANTEC_BITS bit ;
  1682F} ;
  1683F/* eCAN Receive Error Counter register (CANREC) bit definitions */
  1684F
  1685Fstruct CANREC_BITS
  1686F{                    // bits description
  1687F  Uint16 REC : 8 ;
  1688F                 // 7:0 REC
  1689F  Uint16 rsvd1 : 8 ;
  1690F                   // 15:8 reserved
  1691F  Uint16 rsvd2 : 16 ;
  1692F                    // 31:16 reserved
  1693F} ;
  1694F/* Allow access to the bit fields or entire register */
  1695F
  1696Funion CANREC_REG
  1697F{
  1698F  Uint32 all ;
  1699F  struct CANREC_BITS bit ;
  1700F} ;
  1701F/* eCAN Global Interrupt Flag 0 (CANGIF0) bit definitions */
  1702F
  1703Fstruct CANGIF0_BITS
  1704F{                     // bits description
  1705F  Uint16 MIV0 : 5 ;
  1706F                  // 4:0 Mailbox Interrupt Vector
  1707F  Uint16 rsvd1 : 3 ;
  1708F                   // 7:5 reserved
  1709F  Uint16 WLIF0 : 1 ;
  1710F                   // 8 Warning level interrupt flag
  1711F  Uint16 EPIF0 : 1 ;
  1712F                   // 9 Error-passive interrupt flag
  1713F  Uint16 BOIF0 : 1 ;
  1714F                   // 10 Bus-off interrupt flag
  1715F  Uint16 RMLIF0 : 1 ;
  1716F                    // 11 Received message lost interrupt flag
  1717F  Uint16 WUIF0 : 1 ;
  1718F                   // 12 Wakeup interrupt flag
  1719F  Uint16 WDIF0 : 1 ;
  1720F                   // 13 Write denied interrupt flag
  1721F  Uint16 AAIF0 : 1 ;
  1722F                   // 14 Abort Ack interrupt flag
  1723F  Uint16 GMIF0 : 1 ;
  1724F                   // 15 Global MBX interrupt flag
  1725F  Uint16 TCOF0 : 1 ;
  1726F                   // 16 TSC Overflow flag
  1727F  Uint16 MTOF0 : 1 ;
  1728F                   // 17 Mailbox Timeout flag
  1729F  Uint16 rsvd2 : 14 ;
  1730F                    // 31:18 reserved
  1731F} ;
  1732F/* Allow access to the bit fields or entire register */
  1733F
  1734Funion CANGIF0_REG
  1735F{
  1736F  Uint32 all ;
  1737F  struct CANGIF0_BITS bit ;
  1738F} ;
  1739F/* eCAN Global Interrupt Mask register (CANGIM) bit definitions */
  1740F
  1741Fstruct CANGIM_BITS
  1742F{                    // bits description
  1743F  Uint16 I0EN : 1 ;
  1744F                  // 0 Interrupt 0 enable
  1745F  Uint16 I1EN : 1 ;
  1746F                  // 1 Interrupt 1 enable
  1747F  Uint16 GIL : 1 ;
  1748F                 // 2 Global Interrupt Level
  1749F  Uint16 rsvd1 : 5 ;
  1750F                   // 7:3 reserved
  1751F  Uint16 WLIM : 1 ;
  1752F                  // 8 Warning level interrupt mask
  1753F  Uint16 EPIM : 1 ;
  1754F                  // 9 Error-passive interrupt mask
  1755F  Uint16 BOIM : 1 ;
  1756F                  // 10 Bus-off interrupt mask
  1757F  Uint16 RMLIM : 1 ;
  1758F                   // 11 Received message lost interrupt mask
  1759F  Uint16 WUIM : 1 ;
  1760F                  // 12 Wakeup interrupt mask
  1761F  Uint16 WDIM : 1 ;
  1762F                  // 13 Write denied interrupt mask
  1763F  Uint16 AAIM : 1 ;
  1764F                  // 14 Abort Ack interrupt mask
  1765F  Uint16 rsvd2 : 1 ;
  1766F                   // 15 reserved
  1767F  Uint16 TCOM : 1 ;
  1768F                  // 16 TSC overflow interrupt mask
  1769F  Uint16 MTOM : 1 ;
  1770F                  // 17 MBX Timeout interrupt mask
  1771F  Uint16 rsvd3 : 14 ;
  1772F                    // 31:18 reserved
  1773F} ;
  1774F/* Allow access to the bit fields or entire register */
  1775F
  1776Funion CANGIM_REG
  1777F{
  1778F  Uint32 all ;
  1779F  struct CANGIM_BITS bit ;
  1780F} ;
  1781F/* eCAN Global Interrupt Flag 1 (eCANGIF1) bit definitions */
  1782F
  1783Fstruct CANGIF1_BITS
  1784F{                     // bits description
  1785F  Uint16 MIV1 : 5 ;
  1786F                  // 4:0 Mailbox Interrupt Vector
  1787F  Uint16 rsvd1 : 3 ;
  1788F                   // 7:5 reserved
  1789F  Uint16 WLIF1 : 1 ;
  1790F                   // 8 Warning level interrupt flag
  1791F  Uint16 EPIF1 : 1 ;
  1792F                   // 9 Error-passive interrupt flag
  1793F  Uint16 BOIF1 : 1 ;
  1794F                   // 10 Bus-off interrupt flag
  1795F  Uint16 RMLIF1 : 1 ;
  1796F                    // 11 Received message lost interrupt flag
  1797F  Uint16 WUIF1 : 1 ;
  1798F                   // 12 Wakeup interrupt flag
  1799F  Uint16 WDIF1 : 1 ;
  1800F                   // 13 Write denied interrupt flag
  1801F  Uint16 AAIF1 : 1 ;
  1802F                   // 14 Abort Ack interrupt flag
  1803F  Uint16 GMIF1 : 1 ;
  1804F                   // 15 Global MBX interrupt flag
  1805F  Uint16 TCOF1 : 1 ;
  1806F                   // 16 TSC Overflow flag
  1807F  Uint16 MTOF1 : 1 ;
  1808F                   // 17 Mailbox Timeout flag
  1809F  Uint16 rsvd2 : 14 ;
  1810F                    // 31:18 reserved
  1811F} ;
  1812F/* Allow access to the bit fields or entire register */
  1813F
  1814Funion CANGIF1_REG
  1815F{
  1816F  Uint32 all ;
  1817F  struct CANGIF1_BITS bit ;
  1818F} ;
  1819F/* eCAN Mailbox Interrupt Mask register (CANMIM) bit definitions */
  1820F
  1821Fstruct CANMIM_BITS
  1822F{                    // bit description
  1823F  Uint16 MIM0 : 1 ;
  1824F                  // 0 MIM for Mailbox 0
  1825F  Uint16 MIM1 : 1 ;
  1826F                  // 1 MIM for Mailbox 1
  1827F  Uint16 MIM2 : 1 ;
  1828F                  // 2 MIM for Mailbox 2
  1829F  Uint16 MIM3 : 1 ;
  1830F                  // 3 MIM for Mailbox 3
  1831F  Uint16 MIM4 : 1 ;
  1832F                  // 4 MIM for Mailbox 4
  1833F  Uint16 MIM5 : 1 ;
  1834F                  // 5 MIM for Mailbox 5
  1835F  Uint16 MIM6 : 1 ;
  1836F                  // 6 MIM for Mailbox 6
  1837F  Uint16 MIM7 : 1 ;
  1838F                  // 7 MIM for Mailbox 7
  1839F  Uint16 MIM8 : 1 ;
  1840F                  // 8 MIM for Mailbox 8
  1841F  Uint16 MIM9 : 1 ;
  1842F                  // 9 MIM for Mailbox 9
  1843F  Uint16 MIM10 : 1 ;
  1844F                   // 10 MIM for Mailbox 10
  1845F  Uint16 MIM11 : 1 ;
  1846F                   // 11 MIM for Mailbox 11
  1847F  Uint16 MIM12 : 1 ;
  1848F                   // 12 MIM for Mailbox 12
  1849F  Uint16 MIM13 : 1 ;
  1850F                   // 13 MIM for Mailbox 13
  1851F  Uint16 MIM14 : 1 ;
  1852F                   // 14 MIM for Mailbox 14
  1853F  Uint16 MIM15 : 1 ;
  1854F                   // 15 MIM for Mailbox 15
  1855F  Uint16 MIM16 : 1 ;
  1856F                   // 16 MIM for Mailbox 16
  1857F  Uint16 MIM17 : 1 ;
  1858F                   // 17 MIM for Mailbox 17
  1859F  Uint16 MIM18 : 1 ;
  1860F                   // 18 MIM for Mailbox 18
  1861F  Uint16 MIM19 : 1 ;
  1862F                   // 19 MIM for Mailbox 19
  1863F  Uint16 MIM20 : 1 ;
  1864F                   // 20 MIM for Mailbox 20
  1865F  Uint16 MIM21 : 1 ;
  1866F                   // 21 MIM for Mailbox 21
  1867F  Uint16 MIM22 : 1 ;
  1868F                   // 22 MIM for Mailbox 22
  1869F  Uint16 MIM23 : 1 ;
  1870F                   // 23 MIM for Mailbox 23
  1871F  Uint16 MIM24 : 1 ;
  1872F                   // 24 MIM for Mailbox 24
  1873F  Uint16 MIM25 : 1 ;
  1874F                   // 25 MIM for Mailbox 25
  1875F  Uint16 MIM26 : 1 ;
  1876F                   // 26 MIM for Mailbox 26
  1877F  Uint16 MIM27 : 1 ;
  1878F                   // 27 MIM for Mailbox 27
  1879F  Uint16 MIM28 : 1 ;
  1880F                   // 28 MIM for Mailbox 28
  1881F  Uint16 MIM29 : 1 ;
  1882F                   // 29 MIM for Mailbox 29
  1883F  Uint16 MIM30 : 1 ;
  1884F                   // 30 MIM for Mailbox 30
  1885F  Uint16 MIM31 : 1 ;
  1886F                   // 31 MIM for Mailbox 31
  1887F} ;
  1888F/* Allow access to the bit fields or entire register */
  1889F
  1890Funion CANMIM_REG
  1891F{
  1892F  Uint32 all ;
  1893F  struct CANMIM_BITS bit ;
  1894F} ;
  1895F/* eCAN Mailbox Interrupt Level register (CANMIL) bit definitions */
  1896F
  1897Fstruct CANMIL_BITS
  1898F{                    // bit description
  1899F  Uint16 MIL0 : 1 ;
  1900F                  // 0 0 -> Int 9.5 1 -> Int 9.6
  1901F  Uint16 MIL1 : 1 ;
  1902F                  // 1 0 -> Int 9.5 1 -> Int 9.6
  1903F  Uint16 MIL2 : 1 ;
  1904F                  // 2 0 -> Int 9.5 1 -> Int 9.6
  1905F  Uint16 MIL3 : 1 ;
  1906F                  // 3 0 -> Int 9.5 1 -> Int 9.6
  1907F  Uint16 MIL4 : 1 ;
  1908F                  // 4 0 -> Int 9.5 1 -> Int 9.6
  1909F  Uint16 MIL5 : 1 ;
  1910F                  // 5 0 -> Int 9.5 1 -> Int 9.6
  1911F  Uint16 MIL6 : 1 ;
  1912F                  // 6 0 -> Int 9.5 1 -> Int 9.6
  1913F  Uint16 MIL7 : 1 ;
  1914F                  // 7 0 -> Int 9.5 1 -> Int 9.6
  1915F  Uint16 MIL8 : 1 ;
  1916F                  // 8 0 -> Int 9.5 1 -> Int 9.6
  1917F  Uint16 MIL9 : 1 ;
  1918F                  // 9 0 -> Int 9.5 1 -> Int 9.6
  1919F  Uint16 MIL10 : 1 ;
  1920F                   // 10 0 -> Int 9.5 1 -> Int 9.6
  1921F  Uint16 MIL11 : 1 ;
  1922F                   // 11 0 -> Int 9.5 1 -> Int 9.6
  1923F  Uint16 MIL12 : 1 ;
  1924F                   // 12 0 -> Int 9.5 1 -> Int 9.6
  1925F  Uint16 MIL13 : 1 ;
  1926F                   // 13 0 -> Int 9.5 1 -> Int 9.6
  1927F  Uint16 MIL14 : 1 ;
  1928F                   // 14 0 -> Int 9.5 1 -> Int 9.6
  1929F  Uint16 MIL15 : 1 ;
  1930F                   // 15 0 -> Int 9.5 1 -> Int 9.6
  1931F  Uint16 MIL16 : 1 ;
  1932F                   // 16 0 -> Int 9.5 1 -> Int 9.6
  1933F  Uint16 MIL17 : 1 ;
  1934F                   // 17 0 -> Int 9.5 1 -> Int 9.6
  1935F  Uint16 MIL18 : 1 ;
  1936F                   // 18 0 -> Int 9.5 1 -> Int 9.6
  1937F  Uint16 MIL19 : 1 ;
  1938F                   // 19 0 -> Int 9.5 1 -> Int 9.6
  1939F  Uint16 MIL20 : 1 ;
  1940F                   // 20 0 -> Int 9.5 1 -> Int 9.6
  1941F  Uint16 MIL21 : 1 ;
  1942F                   // 21 0 -> Int 9.5 1 -> Int 9.6
  1943F  Uint16 MIL22 : 1 ;
  1944F                   // 22 0 -> Int 9.5 1 -> Int 9.6
  1945F  Uint16 MIL23 : 1 ;
  1946F                   // 23 0 -> Int 9.5 1 -> Int 9.6
  1947F  Uint16 MIL24 : 1 ;
  1948F                   // 24 0 -> Int 9.5 1 -> Int 9.6
  1949F  Uint16 MIL25 : 1 ;
  1950F                   // 25 0 -> Int 9.5 1 -> Int 9.6
  1951F  Uint16 MIL26 : 1 ;
  1952F                   // 26 0 -> Int 9.5 1 -> Int 9.6
  1953F  Uint16 MIL27 : 1 ;
  1954F                   // 27 0 -> Int 9.5 1 -> Int 9.6
  1955F  Uint16 MIL28 : 1 ;
  1956F                   // 28 0 -> Int 9.5 1 -> Int 9.6
  1957F  Uint16 MIL29 : 1 ;
  1958F                   // 29 0 -> Int 9.5 1 -> Int 9.6
  1959F  Uint16 MIL30 : 1 ;
  1960F                   // 30 0 -> Int 9.5 1 -> Int 9.6
  1961F  Uint16 MIL31 : 1 ;
  1962F                   // 31 0 -> Int 9.5 1 -> Int 9.6
  1963F} ;
  1964F/* Allow access to the bit fields or entire register */
  1965F
  1966Funion CANMIL_REG
  1967F{
  1968F  Uint32 all ;
  1969F  struct CANMIL_BITS bit ;
  1970F} ;
  1971F/* eCAN Overwrite Protection Control register (CANOPC) bit definitions */
  1972F
  1973Fstruct CANOPC_BITS
  1974F{                    // bit description
  1975F  Uint16 OPC0 : 1 ;
  1976F                  // 0 OPC for Mailbox 0
  1977F  Uint16 OPC1 : 1 ;
  1978F                  // 1 OPC for Mailbox 1
  1979F  Uint16 OPC2 : 1 ;
  1980F                  // 2 OPC for Mailbox 2
  1981F  Uint16 OPC3 : 1 ;
  1982F                  // 3 OPC for Mailbox 3
  1983F  Uint16 OPC4 : 1 ;
  1984F                  // 4 OPC for Mailbox 4
  1985F  Uint16 OPC5 : 1 ;
  1986F                  // 5 OPC for Mailbox 5
  1987F  Uint16 OPC6 : 1 ;
  1988F                  // 6 OPC for Mailbox 6
  1989F  Uint16 OPC7 : 1 ;
  1990F                  // 7 OPC for Mailbox 7
  1991F  Uint16 OPC8 : 1 ;
  1992F                  // 8 OPC for Mailbox 8
  1993F  Uint16 OPC9 : 1 ;
  1994F                  // 9 OPC for Mailbox 9
  1995F  Uint16 OPC10 : 1 ;
  1996F                   // 10 OPC for Mailbox 10
  1997F  Uint16 OPC11 : 1 ;
  1998F                   // 11 OPC for Mailbox 11
  1999F  Uint16 OPC12 : 1 ;
  2000F                   // 12 OPC for Mailbox 12
  2001F  Uint16 OPC13 : 1 ;
  2002F                   // 13 OPC for Mailbox 13
  2003F  Uint16 OPC14 : 1 ;
  2004F                   // 14 OPC for Mailbox 14
  2005F  Uint16 OPC15 : 1 ;
  2006F                   // 15 OPC for Mailbox 15
  2007F  Uint16 OPC16 : 1 ;
  2008F                   // 16 OPC for Mailbox 16
  2009F  Uint16 OPC17 : 1 ;
  2010F                   // 17 OPC for Mailbox 17
  2011F  Uint16 OPC18 : 1 ;
  2012F                   // 18 OPC for Mailbox 18
  2013F  Uint16 OPC19 : 1 ;
  2014F                   // 19 OPC for Mailbox 19
  2015F  Uint16 OPC20 : 1 ;
  2016F                   // 20 OPC for Mailbox 20
  2017F  Uint16 OPC21 : 1 ;
  2018F                   // 21 OPC for Mailbox 21
  2019F  Uint16 OPC22 : 1 ;
  2020F                   // 22 OPC for Mailbox 22
  2021F  Uint16 OPC23 : 1 ;
  2022F                   // 23 OPC for Mailbox 23
  2023F  Uint16 OPC24 : 1 ;
  2024F                   // 24 OPC for Mailbox 24
  2025F  Uint16 OPC25 : 1 ;
  2026F                   // 25 OPC for Mailbox 25
  2027F  Uint16 OPC26 : 1 ;
  2028F                   // 26 OPC for Mailbox 26
  2029F  Uint16 OPC27 : 1 ;
  2030F                   // 27 OPC for Mailbox 27
  2031F  Uint16 OPC28 : 1 ;
  2032F                   // 28 OPC for Mailbox 28
  2033F  Uint16 OPC29 : 1 ;
  2034F                   // 29 OPC for Mailbox 29
  2035F  Uint16 OPC30 : 1 ;
  2036F                   // 30 OPC for Mailbox 30
  2037F  Uint16 OPC31 : 1 ;
  2038F                   // 31 OPC for Mailbox 31
  2039F} ;
  2040F/* Allow access to the bit fields or entire register */
  2041F
  2042Funion CANOPC_REG
  2043F{
  2044F  Uint32 all ;
  2045F  struct CANOPC_BITS bit ;
  2046F} ;
  2047F/* eCAN TX I/O Control Register (CANTIOC) bit definitions */
  2048F
  2049Fstruct CANTIOC_BITS
  2050F{                     // bits description
  2051F  Uint16 rsvd1 : 3 ;
  2052F                   // 2:0 reserved
  2053F  Uint16 TXFUNC : 1 ;
  2054F                    // 3 TXFUNC
  2055F  Uint16 rsvd2 : 12 ;
  2056F                    // 15:4 reserved
  2057F  Uint16 rsvd3 : 16 ;
  2058F                    // 31:16 reserved
  2059F} ;
  2060F/* Allow access to the bit fields or entire register */
  2061F
  2062Funion CANTIOC_REG
  2063F{
  2064F  Uint32 all ;
  2065F  struct CANTIOC_BITS bit ;
  2066F} ;
  2067F/* eCAN RX I/O Control Register (CANRIOC) bit definitions */
  2068F
  2069Fstruct CANRIOC_BITS
  2070F{                     // bits description
  2071F  Uint16 rsvd1 : 3 ;
  2072F                   // 2:0 reserved
  2073F  Uint16 RXFUNC : 1 ;
  2074F                    // 3 RXFUNC
  2075F  Uint16 rsvd2 : 12 ;
  2076F                    // 15:4 reserved
  2077F  Uint16 rsvd3 : 16 ;
  2078F                    // 31:16 reserved
  2079F} ;
  2080F/* Allow access to the bit fields or entire register */
  2081F
  2082Funion CANRIOC_REG
  2083F{
  2084F  Uint32 all ;
  2085F  struct CANRIOC_BITS bit ;
  2086F} ;
  2087F/* eCAN Time-out Control register (CANTOC) bit definitions */
  2088F
  2089Fstruct CANTOC_BITS
  2090F{                    // bit description
  2091F  Uint16 TOC0 : 1 ;
  2092F                  // 0 TOC for Mailbox 0
  2093F  Uint16 TOC1 : 1 ;
  2094F                  // 1 TOC for Mailbox 1
  2095F  Uint16 TOC2 : 1 ;
  2096F                  // 2 TOC for Mailbox 2
  2097F  Uint16 TOC3 : 1 ;
  2098F                  // 3 TOC for Mailbox 3
  2099F  Uint16 TOC4 : 1 ;
  2100F                  // 4 TOC for Mailbox 4
  2101F  Uint16 TOC5 : 1 ;
  2102F                  // 5 TOC for Mailbox 5
  2103F  Uint16 TOC6 : 1 ;
  2104F                  // 6 TOC for Mailbox 6
  2105F  Uint16 TOC7 : 1 ;
  2106F                  // 7 TOC for Mailbox 7
  2107F  Uint16 TOC8 : 1 ;
  2108F                  // 8 TOC for Mailbox 8
  2109F  Uint16 TOC9 : 1 ;
  2110F                  // 9 TOC for Mailbox 9
  2111F  Uint16 TOC10 : 1 ;
  2112F                   // 10 TOC for Mailbox 10
  2113F  Uint16 TOC11 : 1 ;
  2114F                   // 11 TOC for Mailbox 11
  2115F  Uint16 TOC12 : 1 ;
  2116F                   // 12 TOC for Mailbox 12
  2117F  Uint16 TOC13 : 1 ;
  2118F                   // 13 TOC for Mailbox 13
  2119F  Uint16 TOC14 : 1 ;
  2120F                   // 14 TOC for Mailbox 14
  2121F  Uint16 TOC15 : 1 ;
  2122F                   // 15 TOC for Mailbox 15
  2123F  Uint16 TOC16 : 1 ;
  2124F                   // 16 TOC for Mailbox 16
  2125F  Uint16 TOC17 : 1 ;
  2126F                   // 17 TOC for Mailbox 17
  2127F  Uint16 TOC18 : 1 ;
  2128F                   // 18 TOC for Mailbox 18
  2129F  Uint16 TOC19 : 1 ;
  2130F                   // 19 TOC for Mailbox 19
  2131F  Uint16 TOC20 : 1 ;
  2132F                   // 20 TOC for Mailbox 20
  2133F  Uint16 TOC21 : 1 ;
  2134F                   // 21 TOC for Mailbox 21
  2135F  Uint16 TOC22 : 1 ;
  2136F                   // 22 TOC for Mailbox 22
  2137F  Uint16 TOC23 : 1 ;
  2138F                   // 23 TOC for Mailbox 23
  2139F  Uint16 TOC24 : 1 ;
  2140F                   // 24 TOC for Mailbox 24
  2141F  Uint16 TOC25 : 1 ;
  2142F                   // 25 TOC for Mailbox 25
  2143F  Uint16 TOC26 : 1 ;
  2144F                   // 26 TOC for Mailbox 26
  2145F  Uint16 TOC27 : 1 ;
  2146F                   // 27 TOC for Mailbox 27
  2147F  Uint16 TOC28 : 1 ;
  2148F                   // 28 TOC for Mailbox 28
  2149F  Uint16 TOC29 : 1 ;
  2150F                   // 29 TOC for Mailbox 29
  2151F  Uint16 TOC30 : 1 ;
  2152F                   // 30 TOC for Mailbox 30
  2153F  Uint16 TOC31 : 1 ;
  2154F                   // 31 TOC for Mailbox 31
  2155F} ;
  2156F/* Allow access to the bit fields or entire register */
  2157F
  2158Funion CANTOC_REG
  2159F{
  2160F  Uint32 all ;
  2161F  struct CANTOC_BITS bit ;
  2162F} ;
  2163F/* eCAN Time-out Status register (CANTOS) bit definitions */
  2164F
  2165Fstruct CANTOS_BITS
  2166F{                    // bit description
  2167F  Uint16 TOS0 : 1 ;
  2168F                  // 0 TOS for Mailbox 0
  2169F  Uint16 TOS1 : 1 ;
  2170F                  // 1 TOS for Mailbox 1
  2171F  Uint16 TOS2 : 1 ;
  2172F                  // 2 TOS for Mailbox 2
  2173F  Uint16 TOS3 : 1 ;
  2174F                  // 3 TOS for Mailbox 3
  2175F  Uint16 TOS4 : 1 ;
  2176F                  // 4 TOS for Mailbox 4
  2177F  Uint16 TOS5 : 1 ;
  2178F                  // 5 TOS for Mailbox 5
  2179F  Uint16 TOS6 : 1 ;
  2180F                  // 6 TOS for Mailbox 6
  2181F  Uint16 TOS7 : 1 ;
  2182F                  // 7 TOS for Mailbox 7
  2183F  Uint16 TOS8 : 1 ;
  2184F                  // 8 TOS for Mailbox 8
  2185F  Uint16 TOS9 : 1 ;
  2186F                  // 9 TOS for Mailbox 9
  2187F  Uint16 TOS10 : 1 ;
  2188F                   // 10 TOS for Mailbox 10
  2189F  Uint16 TOS11 : 1 ;
  2190F                   // 11 TOS for Mailbox 11
  2191F  Uint16 TOS12 : 1 ;
  2192F                   // 12 TOS for Mailbox 12
  2193F  Uint16 TOS13 : 1 ;
  2194F                   // 13 TOS for Mailbox 13
  2195F  Uint16 TOS14 : 1 ;
  2196F                   // 14 TOS for Mailbox 14
  2197F  Uint16 TOS15 : 1 ;
  2198F                   // 15 TOS for Mailbox 15
  2199F  Uint16 TOS16 : 1 ;
  2200F                   // 16 TOS for Mailbox 16
  2201F  Uint16 TOS17 : 1 ;
  2202F                   // 17 TOS for Mailbox 17
  2203F  Uint16 TOS18 : 1 ;
  2204F                   // 18 TOS for Mailbox 18
  2205F  Uint16 TOS19 : 1 ;
  2206F                   // 19 TOS for Mailbox 19
  2207F  Uint16 TOS20 : 1 ;
  2208F                   // 20 TOS for Mailbox 20
  2209F  Uint16 TOS21 : 1 ;
  2210F                   // 21 TOS for Mailbox 21
  2211F  Uint16 TOS22 : 1 ;
  2212F                   // 22 TOS for Mailbox 22
  2213F  Uint16 TOS23 : 1 ;
  2214F                   // 23 TOS for Mailbox 23
  2215F  Uint16 TOS24 : 1 ;
  2216F                   // 24 TOS for Mailbox 24
  2217F  Uint16 TOS25 : 1 ;
  2218F                   // 25 TOS for Mailbox 25
  2219F  Uint16 TOS26 : 1 ;
  2220F                   // 26 TOS for Mailbox 26
  2221F  Uint16 TOS27 : 1 ;
  2222F                   // 27 TOS for Mailbox 27
  2223F  Uint16 TOS28 : 1 ;
  2224F                   // 28 TOS for Mailbox 28
  2225F  Uint16 TOS29 : 1 ;
  2226F                   // 29 TOS for Mailbox 29
  2227F  Uint16 TOS30 : 1 ;
  2228F                   // 30 TOS for Mailbox 30
  2229F  Uint16 TOS31 : 1 ;
  2230F                   // 31 TOS for Mailbox 31
  2231F} ;
  2232F/* Allow access to the bit fields or entire register */
  2233F
  2234Funion CANTOS_REG
  2235F{
  2236F  Uint32 all ;
  2237F  struct CANTOS_BITS bit ;
  2238F} ;
  2239F/**************************************/
  2240F/* eCAN Control & Status register file */
  2241F/**************************************/
  2242F
  2243Fstruct ECAN_REGS
  2244F{
  2245F  union CANME_REG CANME ; // Mailbox Enable
  2246F  union CANMD_REG CANMD ; // Mailbox Direction
  2247F  union CANTRS_REG CANTRS ; // Transmit Request Set
  2248F  union CANTRR_REG CANTRR ; // Transmit Request Reset
  2249F  union CANTA_REG CANTA ; // Transmit Acknowledge
  2250F  union CANAA_REG CANAA ; // Abort Acknowledge
  2251F  union CANRMP_REG CANRMP ; // Received Message Pending
  2252F  union CANRML_REG CANRML ; // Received Message Lost
  2253F  union CANRFP_REG CANRFP ; // Remote Frame Pending
  2254F  union CANGAM_REG CANGAM ; // Global Acceptance Mask
  2255F  union CANMC_REG CANMC ; // Master Control
  2256F  union CANBTC_REG CANBTC ; // Bit Timing
  2257F  union CANES_REG CANES ; // Error Status
  2258F  union CANTEC_REG CANTEC ; // Transmit Error Counter
  2259F  union CANREC_REG CANREC ; // Receive Error Counter
  2260F  union CANGIF0_REG CANGIF0 ; // Global Interrupt Flag 0
  2261F  union CANGIM_REG CANGIM ; // Global Interrupt Mask 0
  2262F  union CANGIF1_REG CANGIF1 ; // Global Interrupt Flag 1
  2263F  union CANMIM_REG CANMIM ; // Mailbox Interrupt Mask
  2264F  union CANMIL_REG CANMIL ; // Mailbox Interrupt Level
  2265F  union CANOPC_REG CANOPC ; // Overwrite Protection Control
  2266F  union CANTIOC_REG CANTIOC ; // TX I/O Control
  2267F  union CANRIOC_REG CANRIOC ; // RX I/O Control
  2268F  Uint32 CANTSC ; // Time-stamp counter
  2269F  union CANTOC_REG CANTOC ; // Time-out Control
  2270F  union CANTOS_REG CANTOS ; // Time-out Status
  2271F} ;
  2272F/* --------------------------------------------------- */
  2273F/* eCAN Mailbox Registers */
  2274F/* ----------------------------------------------------*/
  2275F/* eCAN Message ID (MSGID) bit definitions */
  2276F
  2277Fstruct CANMSGID_BITS
  2278F{                      // bits description
  2279F  Uint16 EXTMSGID_L : 16 ;
  2280F                         // 0:15
  2281F  Uint16 EXTMSGID_H : 2 ;
  2282F                        // 16:17
  2283F  Uint16 STDMSGID : 11 ;
  2284F                       // 18:28
  2285F  Uint16 AAM : 1 ;
  2286F                 // 29
  2287F  Uint16 AME : 1 ;
  2288F                 // 30
  2289F  Uint16 IDE : 1 ;
  2290F                 // 31
  2291F} ;
  2292F/* Allow access to the bit fields or entire register */
  2293F
  2294Funion CANMSGID_REG
  2295F{
  2296F  Uint32 all ;
  2297F  struct CANMSGID_BITS bit ;
  2298F} ;
  2299F/* eCAN Message Control Register (MSGCTRL) bit definitions */
  2300F
  2301Fstruct CANMSGCTRL_BITS
  2302F{                        // bits description
  2303F  Uint16 DLC : 4 ;
  2304F                 // 0:3
  2305F  Uint16 RTR : 1 ;
  2306F                 // 4
  2307F  Uint16 rsvd1 : 3 ;
  2308F                   // 7:5 reserved
  2309F  Uint16 TPL : 5 ;
  2310F                 // 12:8
  2311F  Uint16 rsvd2 : 3 ;
  2312F                   // 15:13 reserved
  2313F  Uint16 rsvd3 : 16 ;
  2314F                    // 31:16 reserved
  2315F} ;
  2316F/* Allow access to the bit fields or entire register */
  2317F
  2318Funion CANMSGCTRL_REG
  2319F{
  2320F  Uint32 all ;
  2321F  struct CANMSGCTRL_BITS bit ;
  2322F} ;
  2323F/* eCAN Message Data Register low (MDR_L) word definitions */
  2324F
  2325Fstruct CANMDL_WORDS
  2326F{                     // bits description
  2327F  Uint16 LOW_WORD : 16 ;
  2328F                       // 0:15
  2329F  Uint16 HI_WORD : 16 ;
  2330F                      // 31:16
  2331F} ;
  2332F/* eCAN Message Data Register low (MDR_L) byte definitions */
  2333F
  2334Fstruct CANMDL_BYTES
  2335F{                     // bits description
  2336F  Uint16 BYTE3 : 8 ;
  2337F                   // 31:24
  2338F  Uint16 BYTE2 : 8 ;
  2339F                   // 23:16
  2340F  Uint16 BYTE1 : 8 ;
  2341F                   // 15:8
  2342F  Uint16 BYTE0 : 8 ;
  2343F                   // 7:0
  2344F} ;
  2345F/* Allow access to the bit fields or entire register */
  2346F
  2347Funion CANMDL_REG
  2348F{
  2349F  Uint32 all ;
  2350F  struct CANMDL_WORDS word ;
  2351F  struct CANMDL_BYTES byte ;
  2352F} ;
  2353F/* eCAN Message Data Register high (MDR_H) word definitions */
  2354F
  2355Fstruct CANMDH_WORDS
  2356F{                     // bits description
  2357F  Uint16 LOW_WORD : 16 ;
  2358F                       // 0:15
  2359F  Uint16 HI_WORD : 16 ;
  2360F                      // 31:16
  2361F} ;
  2362F/* eCAN Message Data Register low (MDR_H) byte definitions */
  2363F
  2364Fstruct CANMDH_BYTES
  2365F{                     // bits description
  2366F  Uint16 BYTE7 : 8 ;
  2367F                   // 63:56
  2368F  Uint16 BYTE6 : 8 ;
  2369F                   // 55:48
  2370F  Uint16 BYTE5 : 8 ;
  2371F                   // 47:40
  2372F  Uint16 BYTE4 : 8 ;
  2373F                   // 39:32
  2374F} ;
  2375F/* Allow access to the bit fields or entire register */
  2376F
  2377Funion CANMDH_REG
  2378F{
  2379F  Uint32 all ;
  2380F  struct CANMDH_WORDS word ;
  2381F  struct CANMDH_BYTES byte ;
  2382F} ;
  2383F
  2384Fstruct MBOX
  2385F{
  2386F  union CANMSGID_REG MSGID ;
  2387F  union CANMSGCTRL_REG MSGCTRL ;
  2388F  union CANMDL_REG MDL ;
  2389F  union CANMDH_REG MDH ;
  2390F} ;
  2391F/**************************************/
  2392F/* eCAN Mailboxes */
  2393F/**************************************/
  2394F
  2395Fstruct ECAN_MBOXES
  2396F{
  2397F  struct MBOX MBOX0 ;
  2398F  struct MBOX MBOX1 ;
  2399F  struct MBOX MBOX2 ;
  2400F  struct MBOX MBOX3 ;
  2401F  struct MBOX MBOX4 ;
  2402F  struct MBOX MBOX5 ;
  2403F  struct MBOX MBOX6 ;
  2404F  struct MBOX MBOX7 ;
  2405F  struct MBOX MBOX8 ;
  2406F  struct MBOX MBOX9 ;
  2407F  struct MBOX MBOX10 ;
  2408F  struct MBOX MBOX11 ;
  2409F  struct MBOX MBOX12 ;
  2410F  struct MBOX MBOX13 ;
  2411F  struct MBOX MBOX14 ;
  2412F  struct MBOX MBOX15 ;
  2413F  struct MBOX MBOX16 ;
  2414F  struct MBOX MBOX17 ;
  2415F  struct MBOX MBOX18 ;
  2416F  struct MBOX MBOX19 ;
  2417F  struct MBOX MBOX20 ;
  2418F  struct MBOX MBOX21 ;
  2419F  struct MBOX MBOX22 ;
  2420F  struct MBOX MBOX23 ;
  2421F  struct MBOX MBOX24 ;
  2422F  struct MBOX MBOX25 ;
  2423F  struct MBOX MBOX26 ;
  2424F  struct MBOX MBOX27 ;
  2425F  struct MBOX MBOX28 ;
  2426F  struct MBOX MBOX29 ;
  2427F  struct MBOX MBOX30 ;
  2428F  struct MBOX MBOX31 ;
  2429F} ;
  2430F/* eCAN Local Acceptance Mask (LAM) bit definitions */
  2431F
  2432Fstruct CANLAM_BITS
  2433F{                    // bits description
  2434F  Uint16 LAM_L : 16 ;
  2435F                    // 0:15
  2436F  Uint16 LAM_H : 13 ;
  2437F                    // 16:28
  2438F  Uint16 rsvd1 : 2 ;
  2439F                   // 29:30 reserved
  2440F  Uint16 LAMI : 1 ;
  2441F                  // 31
  2442F} ;
  2443F/* Allow access to the bit fields or entire register */
  2444F
  2445Funion CANLAM_REG
  2446F{
  2447F  Uint32 all ;
  2448F  struct CANLAM_BITS bit ;
  2449F} ;
  2450F/**************************************/
  2451F/* eCAN Local Acceptance Masks */
  2452F/**************************************/
  2453F/* eCAN LAM File */
  2454F
  2455Fstruct LAM_REGS
  2456F{
  2457F  union CANLAM_REG LAM0 ;
  2458F  union CANLAM_REG LAM1 ;
  2459F  union CANLAM_REG LAM2 ;
  2460F  union CANLAM_REG LAM3 ;
  2461F  union CANLAM_REG LAM4 ;
  2462F  union CANLAM_REG LAM5 ;
  2463F  union CANLAM_REG LAM6 ;
  2464F  union CANLAM_REG LAM7 ;
  2465F  union CANLAM_REG LAM8 ;
  2466F  union CANLAM_REG LAM9 ;
  2467F  union CANLAM_REG LAM10 ;
  2468F  union CANLAM_REG LAM11 ;
  2469F  union CANLAM_REG LAM12 ;
  2470F  union CANLAM_REG LAM13 ;
  2471F  union CANLAM_REG LAM14 ;
  2472F  union CANLAM_REG LAM15 ;
  2473F  union CANLAM_REG LAM16 ;
  2474F  union CANLAM_REG LAM17 ;
  2475F  union CANLAM_REG LAM18 ;
  2476F  union CANLAM_REG LAM19 ;
  2477F  union CANLAM_REG LAM20 ;
  2478F  union CANLAM_REG LAM21 ;
  2479F  union CANLAM_REG LAM22 ;
  2480F  union CANLAM_REG LAM23 ;
  2481F  union CANLAM_REG LAM24 ;
  2482F  union CANLAM_REG LAM25 ;
  2483F  union CANLAM_REG LAM26 ;
  2484F  union CANLAM_REG LAM27 ;
  2485F  union CANLAM_REG LAM28 ;
  2486F  union CANLAM_REG LAM29 ;
  2487F  union CANLAM_REG LAM30 ;
  2488F  union CANLAM_REG LAM31 ;
  2489F} ;
  2490F/* Mailbox MOTS File */
  2491F
  2492Fstruct MOTS_REGS
  2493F{
  2494F  Uint32 MOTS0 ;
  2495F  Uint32 MOTS1 ;
  2496F  Uint32 MOTS2 ;
  2497F  Uint32 MOTS3 ;
  2498F  Uint32 MOTS4 ;
  2499F  Uint32 MOTS5 ;
  2500F  Uint32 MOTS6 ;
  2501F  Uint32 MOTS7 ;
  2502F  Uint32 MOTS8 ;
  2503F  Uint32 MOTS9 ;
  2504F  Uint32 MOTS10 ;
  2505F  Uint32 MOTS11 ;
  2506F  Uint32 MOTS12 ;
  2507F  Uint32 MOTS13 ;
  2508F  Uint32 MOTS14 ;
  2509F  Uint32 MOTS15 ;
  2510F  Uint32 MOTS16 ;
  2511F  Uint32 MOTS17 ;
  2512F  Uint32 MOTS18 ;
  2513F  Uint32 MOTS19 ;
  2514F  Uint32 MOTS20 ;
  2515F  Uint32 MOTS21 ;
  2516F  Uint32 MOTS22 ;
  2517F  Uint32 MOTS23 ;
  2518F  Uint32 MOTS24 ;
  2519F  Uint32 MOTS25 ;
  2520F  Uint32 MOTS26 ;
  2521F  Uint32 MOTS27 ;
  2522F  Uint32 MOTS28 ;
  2523F  Uint32 MOTS29 ;
  2524F  Uint32 MOTS30 ;
  2525F  Uint32 MOTS31 ;
  2526F} ;
  2527F/* Mailbox MOTO File */
  2528F
  2529Fstruct MOTO_REGS
  2530F{
  2531F  Uint32 MOTO0 ;
  2532F  Uint32 MOTO1 ;
  2533F  Uint32 MOTO2 ;
  2534F  Uint32 MOTO3 ;
  2535F  Uint32 MOTO4 ;
  2536F  Uint32 MOTO5 ;
  2537F  Uint32 MOTO6 ;
  2538F  Uint32 MOTO7 ;
  2539F  Uint32 MOTO8 ;
  2540F  Uint32 MOTO9 ;
  2541F  Uint32 MOTO10 ;
  2542F  Uint32 MOTO11 ;
  2543F  Uint32 MOTO12 ;
  2544F  Uint32 MOTO13 ;
  2545F  Uint32 MOTO14 ;
  2546F  Uint32 MOTO15 ;
  2547F  Uint32 MOTO16 ;
  2548F  Uint32 MOTO17 ;
  2549F  Uint32 MOTO18 ;
  2550F  Uint32 MOTO19 ;
  2551F  Uint32 MOTO20 ;
  2552F  Uint32 MOTO21 ;
  2553F  Uint32 MOTO22 ;
  2554F  Uint32 MOTO23 ;
  2555F  Uint32 MOTO24 ;
  2556F  Uint32 MOTO25 ;
  2557F  Uint32 MOTO26 ;
  2558F  Uint32 MOTO27 ;
  2559F  Uint32 MOTO28 ;
  2560F  Uint32 MOTO29 ;
  2561F  Uint32 MOTO30 ;
  2562F  Uint32 MOTO31 ;
  2563F} ;
  2564F//---------------------------------------------------------------------------
  2565F// eCAN External References & Function Declarations:
  2566F//
  2567F
  2568Fextern volatile struct ECAN_REGS
  2569F  ECanaRegs ;
  2570F
  2571Fextern volatile struct ECAN_MBOXES
  2572F  ECanaMboxes ;
  2573F
  2574Fextern volatile struct LAM_REGS
  2575F  ECanaLAMRegs ;
  2576F
  2577Fextern volatile struct MOTO_REGS
  2578F  ECanaMOTORegs ;
  2579F
  2580Fextern volatile struct MOTS_REGS
  2581F  ECanaMOTSRegs ;
  2582F
  2583Fextern volatile struct ECAN_REGS
  2584F  ECanbRegs ;
  2585F
  2586Fextern volatile struct ECAN_MBOXES
  2587F  ECanbMboxes ;
  2588F
  2589Fextern volatile struct LAM_REGS
  2590F  ECanbLAMRegs ;
  2591F
  2592Fextern volatile struct MOTO_REGS
  2593F  ECanbMOTORegs ;
  2594F
  2595Fextern volatile struct MOTS_REGS
  2596F  ECanbMOTSRegs ;
  2597F       /* extern "C" */
  2598F       // end of DSP2833x_ECAN.H definition
  2599F//===========================================================================
  2600F// End of file.
  2601F//===========================================================================
  2602F 
  2603F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECan.h*/
  2604F/*   CLOSE_FILE Include File */
  2605F 
  2606F               // Enhanced eCAN Registers
  2607F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECap.h */
  2608F// TI File $Revision: /main/1 $
  2609F// Checkin $Date: August 18, 2006 13:52:07 $
  2610F//###########################################################################
  2611F//
  2612F// FILE: DSP2833x_ECap.h
  2613F//
  2614F// TITLE: DSP2833x Enhanced Capture Module Register Bit Definitions.
  2615F//
  2616F//###########################################################################
  2617F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  2618F// $Release Date: August 4, 2009 $
  2619F//###########################################################################
  2620F#ifndef DSP2833x_ECAP_H
  2621F#define DSP2833x_ECAP_H
  2622F//----------------------------------------------------
  2623F// Capture control register 1 bit definitions */
  2624F
  2625Fstruct ECCTL1_BITS
  2626F{                    // bits description
  2627F  Uint16 CAP1POL : 1 ;
  2628F                     // 0 Capture Event 1 Polarity select
  2629F  Uint16 CTRRST1 : 1 ;
  2630F                     // 1 Counter Reset on Capture Event 1
  2631F  Uint16 CAP2POL : 1 ;
  2632F                     // 2 Capture Event 2 Polarity select
  2633F  Uint16 CTRRST2 : 1 ;
  2634F                     // 3 Counter Reset on Capture Event 2
  2635F  Uint16 CAP3POL : 1 ;
  2636F                     // 4 Capture Event 3 Polarity select
  2637F  Uint16 CTRRST3 : 1 ;
  2638F                     // 5 Counter Reset on Capture Event 3
  2639F  Uint16 CAP4POL : 1 ;
  2640F                     // 6 Capture Event 4 Polarity select
  2641F  Uint16 CTRRST4 : 1 ;
  2642F                     // 7 Counter Reset on Capture Event 4
  2643F  Uint16 CAPLDEN : 1 ;
  2644F                     // 8 Enable Loading CAP1-4 regs on a Cap Event
  2645F  Uint16 PRESCALE : 5 ;
  2646F                      // 13:9 Event Filter prescale select
  2647F  Uint16 FREE_SOFT : 2 ;
  2648F                       // 15:14 Emulation mode
  2649F} ;
  2650F
  2651Funion ECCTL1_REG
  2652F{
  2653F  Uint16 all ;
  2654F  struct ECCTL1_BITS bit ;
  2655F} ;
  2656F// In V1.1 the STOPVALUE bit field was changed to
  2657F// STOP_WRAP. This correlated to a silicon change from
  2658F// F2833x Rev 0 to Rev A.
  2659F//----------------------------------------------------
  2660F// Capture control register 2 bit definitions */
  2661F
  2662Fstruct ECCTL2_BITS
  2663F{                    // bits description
  2664F  Uint16 CONT_ONESHT : 1 ;
  2665F                         // 0 Continuous or one-shot
  2666F  Uint16 STOP_WRAP : 2 ;
  2667F                       // 2:1 Stop value for one-shot, Wrap for continuous
  2668F  Uint16 REARM : 1 ;
  2669F                   // 3 One-shot re-arm
  2670F  Uint16 TSCTRSTOP : 1 ;
  2671F                       // 4 TSCNT counter stop
  2672F  Uint16 SYNCI_EN : 1 ;
  2673F                      // 5 Counter sync-in select
  2674F  Uint16 SYNCO_SEL : 2 ;
  2675F                       // 7:6 Sync-out mode
  2676F  Uint16 SWSYNC : 1 ;
  2677F                    // 8 SW forced counter sync
  2678F  Uint16 CAP_APWM : 1 ;
  2679F                      // 9 CAP/APWM operating mode select
  2680F  Uint16 APWMPOL : 1 ;
  2681F                     // 10 APWM output polarity select
  2682F  Uint16 rsvd1 : 5 ;
  2683F                   // 15:11
  2684F} ;
  2685F
  2686Funion ECCTL2_REG
  2687F{
  2688F  Uint16 all ;
  2689F  struct ECCTL2_BITS bit ;
  2690F} ;
  2691F//----------------------------------------------------
  2692F// ECAP interrupt enable register bit definitions */
  2693F
  2694Fstruct ECEINT_BITS
  2695F{                    // bits description
  2696F  Uint16 rsvd1 : 1 ;
  2697F                   // 0 reserved
  2698F  Uint16 CEVT1 : 1 ;
  2699F                   // 1 Capture Event 1 Interrupt Enable
  2700F  Uint16 CEVT2 : 1 ;
  2701F                   // 2 Capture Event 2 Interrupt Enable
  2702F  Uint16 CEVT3 : 1 ;
  2703F                   // 3 Capture Event 3 Interrupt Enable
  2704F  Uint16 CEVT4 : 1 ;
  2705F                   // 4 Capture Event 4 Interrupt Enable
  2706F  Uint16 CTROVF : 1 ;
  2707F                    // 5 Counter Overflow Interrupt Enable
  2708F  Uint16 CTR_EQ_PRD : 1 ;
  2709F                        // 6 Period Equal Interrupt Enable
  2710F  Uint16 CTR_EQ_CMP : 1 ;
  2711F                        // 7 Compare Equal Interrupt Enable
  2712F  Uint16 rsvd2 : 8 ;
  2713F                   // 15:8 reserved
  2714F} ;
  2715F
  2716Funion ECEINT_REG
  2717F{
  2718F  Uint16 all ;
  2719F  struct ECEINT_BITS bit ;
  2720F} ;
  2721F//----------------------------------------------------
  2722F// ECAP interrupt flag register bit definitions */
  2723F
  2724Fstruct ECFLG_BITS
  2725F{                   // bits description
  2726F  Uint16 INT : 1 ;
  2727F                 // 0 Global Flag
  2728F  Uint16 CEVT1 : 1 ;
  2729F                   // 1 Capture Event 1 Interrupt Flag
  2730F  Uint16 CEVT2 : 1 ;
  2731F                   // 2 Capture Event 2 Interrupt Flag
  2732F  Uint16 CEVT3 : 1 ;
  2733F                   // 3 Capture Event 3 Interrupt Flag
  2734F  Uint16 CEVT4 : 1 ;
  2735F                   // 4 Capture Event 4 Interrupt Flag
  2736F  Uint16 CTROVF : 1 ;
  2737F                    // 5 Counter Overflow Interrupt Flag
  2738F  Uint16 CTR_EQ_PRD : 1 ;
  2739F                        // 6 Period Equal Interrupt Flag
  2740F  Uint16 CTR_EQ_CMP : 1 ;
  2741F                        // 7 Compare Equal Interrupt Flag
  2742F  Uint16 rsvd2 : 8 ;
  2743F                   // 15:8 reserved
  2744F} ;
  2745F
  2746Funion ECFLG_REG
  2747F{
  2748F  Uint16 all ;
  2749F  struct ECFLG_BITS bit ;
  2750F} ;
  2751F//----------------------------------------------------
  2752F
  2753Fstruct ECAP_REGS
  2754F{
  2755F  Uint32 TSCTR ; // Time stamp counter
  2756F  Uint32 CTRPHS ; // Counter phase
  2757F  Uint32 CAP1 ; // Capture 1
  2758F  Uint32 CAP2 ; // Capture 2
  2759F  Uint32 CAP3 ; // Capture 3
  2760F  Uint32 CAP4 ; // Capture 4
  2761F  Uint16 rsvd1 [ 8 ] ;
  2762F                    // reserved
  2763F  union ECCTL1_REG ECCTL1 ; // Capture Control Reg 1
  2764F  union ECCTL2_REG ECCTL2 ; // Capture Control Reg 2
  2765F  union ECEINT_REG ECEINT ; // ECAP interrupt enable
  2766F  union ECFLG_REG ECFLG ; // ECAP interrupt flags
  2767F  union ECFLG_REG ECCLR ; // ECAP interrupt clear
  2768F  union ECEINT_REG ECFRC ; // ECAP interrupt force
  2769F  Uint16 rsvd2 [ 6 ] ;
  2770F                    // reserved
  2771F} ;
  2772F//---------------------------------------------------------------------------
  2773F// GPI/O External References & Function Declarations:
  2774F//
  2775F
  2776Fextern volatile struct ECAP_REGS
  2777F  ECap1Regs ;
  2778F
  2779Fextern volatile struct ECAP_REGS
  2780F  ECap2Regs ;
  2781F
  2782Fextern volatile struct ECAP_REGS
  2783F  ECap3Regs ;
  2784F
  2785Fextern volatile struct ECAP_REGS
  2786F  ECap4Regs ;
  2787F
  2788Fextern volatile struct ECAP_REGS
  2789F  ECap5Regs ;
  2790F
  2791Fextern volatile struct ECAP_REGS
  2792F  ECap6Regs ;
  2793F       /* extern "C" */
  2794F       // end of DSP2833x_ECAP_H definition
  2795F//===========================================================================
  2796F// End of file.
  2797F//===========================================================================
  2798F 
  2799F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECap.h*/
  2800F/*   CLOSE_FILE Include File */
  2801F 
  2802F               // Enhanced Capture
  2803F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DMA.h */
  2804F// TI File $Revision: /main/11 $
  2805F// Checkin $Date: June 23, 2008 11:34:15 $
  2806F//###########################################################################
  2807F//
  2808F// FILE: DSP2833x_DMA.h
  2809F//
  2810F// TITLE: DSP2833x DMA Module Register Bit Definitions.
  2811F//
  2812F//###########################################################################
  2813F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  2814F// $Release Date: August 4, 2009 $
  2815F//###########################################################################
  2816F#ifndef DSP2833x_DMA_H
  2817F#define DSP2833x_DMA_H
  2818F//----------------------------------------------------
  2819F// Channel MODE register bit definitions:
  2820F
  2821Fstruct MODE_BITS
  2822F{                  // bits description
  2823F  Uint16 PERINTSEL : 5 ;
  2824F                       // 4:0 Peripheral Interrupt and Sync Select Bits (R/W):
  2825F                             // 0 no interrupt
  2826F               // 1 SEQ1INT & ADCSYNC
  2827F                             // 2 SEQ2INT
  2828F               // 3 XINT1
  2829F               // 4 XINT2
  2830F               // 5 XINT3
  2831F               // 6 XINT4
  2832F               // 7 XINT5
  2833F               // 8 XINT6
  2834F               // 9 XINT7
  2835F               // 10 XINT13
  2836F               // 11 TINT0
  2837F               // 12 TINT1
  2838F               // 13 TINT2
  2839F               // 14 MXEVTA & MXSYNCA
  2840F               // 15 MREVTA & MRSYNCA
  2841F               // 16 MXEVTB & MXSYNCB
  2842F               // 17 MREVTB & MRSYNCB
  2843F                                 // 18 ePWM1SOCA
  2844F                                 // 19 ePWM1SOCB
  2845F                                 // 20 ePWM2SOCA
  2846F                                 // 21 ePWM2SOCB
  2847F                                 // 22 ePWM3SOCA
  2848F                                 // 23 ePWM3SOCB
  2849F                                 // 24 ePWM4SOCA
  2850F                                 // 25 ePWM4SOCB
  2851F                                 // 26 ePWM5SOCA
  2852F                                 // 27 ePWM5SOCB
  2853F                                 // 28 ePWM6SOCA
  2854F                                 // 29 ePWM6SOCB
  2855F                                 // 30:31 no interrupt
  2856F  Uint16 rsvd1 : 2 ;
  2857F                   // 6:5 (R=0:0)
  2858F  Uint16 OVRINTE : 1 ;
  2859F                     // 7 Overflow Interrupt Enable (R/W):
  2860F                             // 0 overflow interrupt disabled
  2861F                             // 1 overflow interrupt enabled
  2862F  Uint16 PERINTE : 1 ;
  2863F                     // 8 Peripheral Interrupt Enable Bit (R/W):
  2864F                             // 0 peripheral interrupt disabled
  2865F                             // 1 peripheral interrupt enabled
  2866F  Uint16 CHINTMODE : 1 ;
  2867F                       // 9 Channel Interrupt Mode Bit (R/W):
  2868F                             // 0 generate interrupt at beginning of new transfer
  2869F                             // 1 generate interrupt at end of transfer
  2870F  Uint16 ONESHOT : 1 ;
  2871F                     // 10 One Shot Mode Bit (R/W):
  2872F                             // 0 only interrupt event triggers single burst transfer
  2873F                             // 1 first interrupt triggers burst, continue until transfer count is zero
  2874F  Uint16 CONTINUOUS : 1 ;
  2875F                        // 11 Continous Mode Bit (R/W):
  2876F                             // 0 stop when transfer count is zero
  2877F                             // 1 re-initialize when transfer count is zero
  2878F  Uint16 SYNCE : 1 ;
  2879F                   // 12 Sync Enable Bit (R/W):
  2880F                             // 0 ignore selected interrupt sync signal
  2881F                             // 1 enable selected interrupt sync signal
  2882F  Uint16 SYNCSEL : 1 ;
  2883F                     // 13 Sync Select Bit (R/W):
  2884F                             // 0 sync signal controls source wrap counter
  2885F                             // 1 sync signal controls destination wrap counter
  2886F  Uint16 DATASIZE : 1 ;
  2887F                      // 14 Data Size Mode Bit (R/W):
  2888F                             // 0 16-bit data transfer size
  2889F                             // 1 32-bit data transfer size
  2890F  Uint16 CHINTE : 1 ;
  2891F                    // 15 Channel Interrupt Enable Bit (R/W):
  2892F                             // 0 channel interrupt disabled
  2893F                             // 1 channel interrupt enabled
  2894F} ;
  2895F
  2896Funion MODE_REG
  2897F{
  2898F  Uint16 all ;
  2899F  struct MODE_BITS bit ;
  2900F} ;
  2901F//----------------------------------------------------
  2902F// Channel CONTROL register bit definitions:
  2903F
  2904Fstruct CONTROL_BITS
  2905F{                     // bits description
  2906F  Uint16 RUN : 1 ;
  2907F                 // 0 Run Bit (R=0/W=1)
  2908F  Uint16 HALT : 1 ;
  2909F                  // 1 Halt Bit (R=0/W=1)
  2910F  Uint16 SOFTRESET : 1 ;
  2911F                       // 2 Soft Reset Bit (R=0/W=1)
  2912F  Uint16 PERINTFRC : 1 ;
  2913F                       // 3 Interrupt Force Bit (R=0/W=1)
  2914F  Uint16 PERINTCLR : 1 ;
  2915F                       // 4 Interrupt Clear Bit (R=0/W=1)
  2916F  Uint16 SYNCFRC : 1 ;
  2917F                     // 5 Sync Force Bit (R=0/W=1)
  2918F  Uint16 SYNCCLR : 1 ;
  2919F                     // 6 Sync Clear Bit (R=0/W=1)
  2920F  Uint16 ERRCLR : 1 ;
  2921F                    // 7 Error Clear Bit (R=0/W=1)
  2922F  Uint16 PERINTFLG : 1 ;
  2923F                       // 8 Interrupt Flag Bit (R):
  2924F                             // 0 no interrupt pending
  2925F                             // 1 interrupt pending
  2926F  Uint16 SYNCFLG : 1 ;
  2927F                     // 9 Sync Flag Bit (R):
  2928F                             // 0 no sync pending
  2929F                             // 1 sync pending
  2930F  Uint16 SYNCERR : 1 ;
  2931F                     // 10 Sync Error Flag Bit (R):
  2932F                             // 0 no sync error
  2933F                             // 1 sync error detected
  2934F  Uint16 TRANSFERSTS : 1 ;
  2935F                         // 11 Transfer Status Bit (R):
  2936F                             // 0 no transfer in progress or pending
  2937F                             // 1 transfer in progress or pending
  2938F  Uint16 BURSTSTS : 1 ;
  2939F                      // 12 Burst Status Bit (R):
  2940F                             // 0 no burst in progress or pending
  2941F                             // 1 burst in progress or pending
  2942F  Uint16 RUNSTS : 1 ;
  2943F                    // 13 Run Status Bit (R):
  2944F                             // 0 channel not running or halted
  2945F                             // 1 channel running
  2946F  Uint16 OVRFLG : 1 ;
  2947F                    // 14 Overflow Flag Bit(R)
  2948F                             // 0 no overflow event
  2949F                             // 1 overflow event
  2950F  Uint16 rsvd1 : 1 ;
  2951F                   // 15 (R=0)
  2952F} ;
  2953F
  2954Funion CONTROL_REG
  2955F{
  2956F  Uint16 all ;
  2957F  struct CONTROL_BITS bit ;
  2958F} ;
  2959F//----------------------------------------------------
  2960F// DMACTRL register bit definitions:
  2961F
  2962Fstruct DMACTRL_BITS
  2963F{                     // bits description
  2964F  Uint16 HARDRESET : 1 ;
  2965F                       // 0 Hard Reset Bit (R=0/W=1)
  2966F  Uint16 PRIORITYRESET : 1 ;
  2967F                           // 1 Priority Reset Bit (R=0/W=1)
  2968F  Uint16 rsvd1 : 14 ;
  2969F                    // 15:2 (R=0:0)
  2970F} ;
  2971F
  2972Funion DMACTRL_REG
  2973F{
  2974F  Uint16 all ;
  2975F  struct DMACTRL_BITS bit ;
  2976F} ;
  2977F//----------------------------------------------------
  2978F// DEBUGCTRL register bit definitions:
  2979F
  2980Fstruct DEBUGCTRL_BITS
  2981F{                       // bits description
  2982F  Uint16 rsvd1 : 15 ;
  2983F                    // 14:0 (R=0:0)
  2984F  Uint16 FREE : 1 ;
  2985F                  // 15 Debug Mode Bit (R/W):
  2986F                             // 0 halt after current read-write operation
  2987F                             // 1 continue running
  2988F} ;
  2989F
  2990Funion DEBUGCTRL_REG
  2991F{
  2992F  Uint16 all ;
  2993F  struct DEBUGCTRL_BITS bit ;
  2994F} ;
  2995F//----------------------------------------------------
  2996F// PRIORITYCTRL1 register bit definitions:
  2997F
  2998Fstruct PRIORITYCTRL1_BITS
  2999F{                           // bits description
  3000F  Uint16 CH1PRIORITY : 1 ;
  3001F                         // 0 Ch1 Priority Bit (R/W):
  3002F                             // 0 same priority as all other channels
  3003F                             // 1 highest priority channel
  3004F  Uint16 rsvd1 : 15 ;
  3005F                    // 15:1 (R=0:0)
  3006F} ;
  3007F
  3008Funion PRIORITYCTRL1_REG
  3009F{
  3010F  Uint16 all ;
  3011F  struct PRIORITYCTRL1_BITS bit ;
  3012F} ;
  3013F//----------------------------------------------------
  3014F// PRIORITYSTAT register bit definitions:
  3015F
  3016Fstruct PRIORITYSTAT_BITS
  3017F{                          // bits description
  3018F  Uint16 ACTIVESTS : 3 ;
  3019F                       // 2:0 Active Channel Status Bits (R):
  3020F                              // 0,0,0 no channel active
  3021F                              // 0,0,1 Ch1 channel active
  3022F                              // 0,1,0 Ch2 channel active
  3023F                              // 0,1,1 Ch3 channel active
  3024F                              // 1,0,0 Ch4 channel active
  3025F                              // 1,0,1 Ch5 channel active
  3026F                              // 1,1,0 Ch6 channel active
  3027F  Uint16 rsvd1 : 1 ;
  3028F                   // 3 (R=0)
  3029F  Uint16 ACTIVESTS_SHADOW : 3 ;
  3030F                              // 6:4 Active Channel Status Shadow Bits (R):
  3031F                              // 0,0,0 no channel active and interrupted by Ch1
  3032F                              // 0,0,1 cannot occur
  3033F                              // 0,1,0 Ch2 was active and interrupted by Ch1
  3034F                              // 0,1,1 Ch3 was active and interrupted by Ch1
  3035F                              // 1,0,0 Ch4 was active and interrupted by Ch1
  3036F                              // 1,0,1 Ch5 was active and interrupted by Ch1
  3037F                              // 1,1,0 Ch6 was active and interrupted by Ch1
  3038F  Uint16 rsvd2 : 9 ;
  3039F                   // 15:7 (R=0:0)
  3040F} ;
  3041F
  3042Funion PRIORITYSTAT_REG
  3043F{
  3044F  Uint16 all ;
  3045F  struct PRIORITYSTAT_BITS bit ;
  3046F} ;
  3047F// Burst Size
  3048F
  3049Fstruct BURST_SIZE_BITS
  3050F{                        // bits description
  3051F  Uint16 BURSTSIZE : 5 ;
  3052F                       // 4:0 Burst transfer size
  3053F  Uint16 rsvd1 : 11 ;
  3054F                    // 15:5 reserved
  3055F} ;
  3056F
  3057Funion BURST_SIZE_REG
  3058F{
  3059F  Uint16 all ;
  3060F  struct BURST_SIZE_BITS bit ;
  3061F} ;
  3062F// Burst Count
  3063F
  3064Fstruct BURST_COUNT_BITS
  3065F{                         // bits description
  3066F  Uint16 BURSTCOUNT : 5 ;
  3067F                        // 4:0 Burst transfer size
  3068F  Uint16 rsvd1 : 11 ;
  3069F                    // 15:5 reserved
  3070F} ;
  3071F
  3072Funion BURST_COUNT_REG
  3073F{
  3074F  Uint16 all ;
  3075F  struct BURST_COUNT_BITS bit ;
  3076F} ;
  3077F//----------------------------------------------------
  3078F// DMA Channel Registers:
  3079F
  3080Fstruct CH_REGS
  3081F{
  3082F  union MODE_REG MODE ; // Mode Register
  3083F  union CONTROL_REG CONTROL ; // Control Register
  3084F  union BURST_SIZE_REG BURST_SIZE ; // Burst Size Register
  3085F  union BURST_COUNT_REG BURST_COUNT ; // Burst Count Register
  3086F  int16 SRC_BURST_STEP ; // Source Burst Step Register
  3087F  int16 DST_BURST_STEP ; // Destination Burst Step Register
  3088F  Uint16 TRANSFER_SIZE ; // Transfer Size Register
  3089F  Uint16 TRANSFER_COUNT ; // Transfer Count Register
  3090F  int16 SRC_TRANSFER_STEP ; // Source Transfer Step Register
  3091F  int16 DST_TRANSFER_STEP ; // Destination Transfer Step Register
  3092F  Uint16 SRC_WRAP_SIZE ; // Source Wrap Size Register
  3093F  Uint16 SRC_WRAP_COUNT ; // Source Wrap Count Register
  3094F  int16 SRC_WRAP_STEP ; // Source Wrap Step Register
  3095F  Uint16 DST_WRAP_SIZE ; // Destination Wrap Size Register
  3096F  Uint16 DST_WRAP_COUNT ; // Destination Wrap Count Register
  3097F  int16 DST_WRAP_STEP ; // Destination Wrap Step Register
  3098F  Uint32 SRC_BEG_ADDR_SHADOW ; // Source Begin Address Shadow Register
  3099F  Uint32 SRC_ADDR_SHADOW ; // Source Address Shadow Register
  3100F  Uint32 SRC_BEG_ADDR_ACTIVE ; // Source Begin Address Active Register
  3101F  Uint32 SRC_ADDR_ACTIVE ; // Source Address Active Register
  3102F  Uint32 DST_BEG_ADDR_SHADOW ; // Destination Begin Address Shadow Register
  3103F  Uint32 DST_ADDR_SHADOW ; // Destination Address Shadow Register
  3104F  Uint32 DST_BEG_ADDR_ACTIVE ; // Destination Begin Address Active Register
  3105F  Uint32 DST_ADDR_ACTIVE ; // Destination Address Active Register
  3106F} ;
  3107F//----------------------------------------------------
  3108F// DMA Registers:
  3109F
  3110Fstruct DMA_REGS
  3111F{
  3112F  union DMACTRL_REG DMACTRL ; // DMA Control Register
  3113F  union DEBUGCTRL_REG DEBUGCTRL ; // Debug Control Register
  3114F  Uint16 rsvd0 ; // reserved
  3115F  Uint16 rsvd1 ; //
  3116F  union PRIORITYCTRL1_REG PRIORITYCTRL1 ; // Priority Control 1 Register
  3117F  Uint16 rsvd2 ; //
  3118F  union PRIORITYSTAT_REG PRIORITYSTAT ; // Priority Status Register
  3119F  Uint16 rsvd3 [ 25 ] ;
  3120F                     //
  3121F  struct CH_REGS CH1 ; // DMA Channel 1 Registers
  3122F  struct CH_REGS CH2 ; // DMA Channel 2 Registers
  3123F  struct CH_REGS CH3 ; // DMA Channel 3 Registers
  3124F  struct CH_REGS CH4 ; // DMA Channel 4 Registers
  3125F  struct CH_REGS CH5 ; // DMA Channel 5 Registers
  3126F  struct CH_REGS CH6 ; // DMA Channel 6 Registers
  3127F} ;
  3128F//---------------------------------------------------------------------------
  3129F// External References & Function Declarations:
  3130F//
  3131F
  3132Fextern volatile struct DMA_REGS
  3133F  DmaRegs ;
  3134F       /* extern "C" */
  3135F       // end of DSP2833x_DMA_H definition
  3136F//===========================================================================
  3137F// End of file.
  3138F//===========================================================================
  3139F 
  3140F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DMA.h*/
  3141F/*   CLOSE_FILE Include File */
  3142F 
  3143F                // DMA Registers
  3144F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EPwm.h */
  3145F// TI File $Revision: /main/1 $
  3146F// Checkin $Date: August 18, 2006 13:52:10 $
  3147F//###########################################################################
  3148F//
  3149F// FILE: DSP2833x_EPwm.h
  3150F//
  3151F// TITLE: DSP2833x Enhanced PWM Module Register Bit Definitions.
  3152F//
  3153F//###########################################################################
  3154F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  3155F// $Release Date: August 4, 2009 $
  3156F//###########################################################################
  3157F#ifndef DSP2833x_EPWM_H
  3158F#define DSP2833x_EPWM_H
  3159F//----------------------------------------------------
  3160F// Time base control register bit definitions */
  3161F
  3162Fstruct TBCTL_BITS
  3163F{                   // bits description
  3164F  Uint16 CTRMODE : 2 ;
  3165F                     // 1:0 Counter Mode
  3166F  Uint16 PHSEN : 1 ;
  3167F                   // 2 Phase load enable
  3168F  Uint16 PRDLD : 1 ;
  3169F                   // 3 Active period load
  3170F  Uint16 SYNCOSEL : 2 ;
  3171F                      // 5:4 Sync output select
  3172F  Uint16 SWFSYNC : 1 ;
  3173F                     // 6 Software force sync pulse
  3174F  Uint16 HSPCLKDIV : 3 ;
  3175F                       // 9:7 High speed time pre-scale
  3176F  Uint16 CLKDIV : 3 ;
  3177F                    // 12:10 Timebase clock pre-scale
  3178F  Uint16 PHSDIR : 1 ;
  3179F                    // 13 Phase Direction
  3180F  Uint16 FREE_SOFT : 2 ;
  3181F                       // 15:14 Emulation mode
  3182F} ;
  3183F
  3184Funion TBCTL_REG
  3185F{
  3186F  Uint16 all ;
  3187F  struct TBCTL_BITS bit ;
  3188F} ;
  3189F//----------------------------------------------------
  3190F// Time base status register bit definitions */
  3191F
  3192Fstruct TBSTS_BITS
  3193F{                   // bits description
  3194F  Uint16 CTRDIR : 1 ;
  3195F                    // 0 Counter direction status
  3196F  Uint16 SYNCI : 1 ;
  3197F                   // 1 External input sync status
  3198F  Uint16 CTRMAX : 1 ;
  3199F                    // 2 Counter max latched status
  3200F  Uint16 rsvd1 : 13 ;
  3201F                    // 15:3 reserved
  3202F} ;
  3203F
  3204Funion TBSTS_REG
  3205F{
  3206F  Uint16 all ;
  3207F  struct TBSTS_BITS bit ;
  3208F} ;
  3209F//----------------------------------------------------
  3210F// Compare control register bit definitions */
  3211F
  3212Fstruct CMPCTL_BITS
  3213F{                    // bits description
  3214F  Uint16 LOADAMODE : 2 ;
  3215F                       // 0:1 Active compare A
  3216F  Uint16 LOADBMODE : 2 ;
  3217F                       // 3:2 Active compare B
  3218F  Uint16 SHDWAMODE : 1 ;
  3219F                       // 4 Compare A block operating mode
  3220F  Uint16 rsvd1 : 1 ;
  3221F                   // 5 reserved
  3222F  Uint16 SHDWBMODE : 1 ;
  3223F                       // 6 Compare B block operating mode
  3224F  Uint16 rsvd2 : 1 ;
  3225F                   // 7 reserved
  3226F  Uint16 SHDWAFULL : 1 ;
  3227F                       // 8 Compare A Shadow registers full Status
  3228F  Uint16 SHDWBFULL : 1 ;
  3229F                       // 9 Compare B Shadow registers full Status
  3230F  Uint16 rsvd3 : 6 ;
  3231F                   // 15:10 reserved
  3232F} ;
  3233F
  3234Funion CMPCTL_REG
  3235F{
  3236F  Uint16 all ;
  3237F  struct CMPCTL_BITS bit ;
  3238F} ;
  3239F//----------------------------------------------------
  3240F// Action qualifier register bit definitions */
  3241F
  3242Fstruct AQCTL_BITS
  3243F{                   // bits description
  3244F  Uint16 ZRO : 2 ;
  3245F                 // 1:0 Action Counter = Zero
  3246F  Uint16 PRD : 2 ;
  3247F                 // 3:2 Action Counter = Period
  3248F  Uint16 CAU : 2 ;
  3249F                 // 5:4 Action Counter = Compare A up
  3250F  Uint16 CAD : 2 ;
  3251F                 // 7:6 Action Counter = Compare A down
  3252F  Uint16 CBU : 2 ;
  3253F                 // 9:8 Action Counter = Compare B up
  3254F  Uint16 CBD : 2 ;
  3255F                 // 11:10 Action Counter = Compare B down
  3256F  Uint16 rsvd : 4 ;
  3257F                  // 15:12 reserved
  3258F} ;
  3259F
  3260Funion AQCTL_REG
  3261F{
  3262F  Uint16 all ;
  3263F  struct AQCTL_BITS bit ;
  3264F} ;
  3265F//----------------------------------------------------
  3266F// Action qualifier SW force register bit definitions */
  3267F
  3268Fstruct AQSFRC_BITS
  3269F{                    // bits description
  3270F  Uint16 ACTSFA : 2 ;
  3271F                    // 1:0 Action when One-time SW Force A invoked
  3272F  Uint16 OTSFA : 1 ;
  3273F                   // 2 One-time SW Force A output
  3274F  Uint16 ACTSFB : 2 ;
  3275F                    // 4:3 Action when One-time SW Force B invoked
  3276F  Uint16 OTSFB : 1 ;
  3277F                   // 5 One-time SW Force A output
  3278F  Uint16 RLDCSF : 2 ;
  3279F                    // 7:6 Reload from Shadow options
  3280F  Uint16 rsvd1 : 8 ;
  3281F                   // 15:8 reserved
  3282F} ;
  3283F
  3284Funion AQSFRC_REG
  3285F{
  3286F  Uint16 all ;
  3287F  struct AQSFRC_BITS bit ;
  3288F} ;
  3289F//----------------------------------------------------
  3290F// Action qualifier continuous SW force register bit definitions */
  3291F
  3292Fstruct AQCSFRC_BITS
  3293F{                     // bits description
  3294F  Uint16 CSFA : 2 ;
  3295F                  // 1:0 Continuous Software Force on output A
  3296F  Uint16 CSFB : 2 ;
  3297F                  // 3:2 Continuous Software Force on output B
  3298F  Uint16 rsvd1 : 12 ;
  3299F                    // 15:4 reserved
  3300F} ;
  3301F
  3302Funion AQCSFRC_REG
  3303F{
  3304F  Uint16 all ;
  3305F  struct AQCSFRC_BITS bit ;
  3306F} ;
  3307F// As of version 1.1
  3308F// Changed the MODE bit-field to OUT_MODE
  3309F// Added the bit-field IN_MODE
  3310F// This corresponds to changes in silicon as of F2833x devices
  3311F// Rev A silicon.
  3312F//----------------------------------------------------
  3313F// Dead-band generator control register bit definitions
  3314F
  3315Fstruct DBCTL_BITS
  3316F{                   // bits description
  3317F  Uint16 OUT_MODE : 2 ;  // 1:0 Dead Band Output Mode Control
  3318F  Uint16 POLSEL : 2 ;
  3319F                    // 3:2 Polarity Select Control
  3320F  Uint16 IN_MODE : 2 ;
  3321F                     // 5:4 Dead Band Input Select Mode Control
  3322F  Uint16 rsvd1 : 10 ;
  3323F                    // 15:4 reserved
  3324F} ;
  3325F
  3326Funion DBCTL_REG
  3327F{
  3328F  Uint16 all ;
  3329F  struct DBCTL_BITS bit ;
  3330F} ;
  3331F//----------------------------------------------------
  3332F// Trip zone select register bit definitions
  3333F
  3334Fstruct TZSEL_BITS
  3335F{                   // bits description
  3336F  Uint16 CBC1 : 1 ;
  3337F                  // 0 TZ1 CBC select
  3338F  Uint16 CBC2 : 1 ;
  3339F                  // 1 TZ2 CBC select
  3340F  Uint16 CBC3 : 1 ;
  3341F                  // 2 TZ3 CBC select
  3342F  Uint16 CBC4 : 1 ;
  3343F                  // 3 TZ4 CBC select
  3344F  Uint16 CBC5 : 1 ;
  3345F                  // 4 TZ5 CBC select
  3346F  Uint16 CBC6 : 1 ;
  3347F                  // 5 TZ6 CBC select
  3348F  Uint16 rsvd1 : 2 ;
  3349F                   // 7:6 reserved
  3350F  Uint16 OSHT1 : 1 ;
  3351F                   // 8 One-shot TZ1 select
  3352F  Uint16 OSHT2 : 1 ;
  3353F                   // 9 One-shot TZ2 select
  3354F  Uint16 OSHT3 : 1 ;
  3355F                   // 10 One-shot TZ3 select
  3356F  Uint16 OSHT4 : 1 ;
  3357F                   // 11 One-shot TZ4 select
  3358F  Uint16 OSHT5 : 1 ;
  3359F                   // 12 One-shot TZ5 select
  3360F  Uint16 OSHT6 : 1 ;
  3361F                   // 13 One-shot TZ6 select
  3362F  Uint16 rsvd2 : 2 ;
  3363F                   // 15:14 reserved
  3364F} ;
  3365F
  3366Funion TZSEL_REG
  3367F{
  3368F  Uint16 all ;
  3369F  struct TZSEL_BITS bit ;
  3370F} ;
  3371F//----------------------------------------------------
  3372F// Trip zone control register bit definitions */
  3373F
  3374Fstruct TZCTL_BITS
  3375F{                   // bits description
  3376F  Uint16 TZA : 2 ;
  3377F                 // 1:0 TZ1 to TZ6 Trip Action On EPWMxA
  3378F  Uint16 TZB : 2 ;
  3379F                 // 3:2 TZ1 to TZ6 Trip Action On EPWMxB
  3380F  Uint16 rsvd : 12 ;
  3381F                   // 15:4 reserved
  3382F} ;
  3383F
  3384Funion TZCTL_REG
  3385F{
  3386F  Uint16 all ;
  3387F  struct TZCTL_BITS bit ;
  3388F} ;
  3389F//----------------------------------------------------
  3390F// Trip zone control register bit definitions */
  3391F
  3392Fstruct TZEINT_BITS
  3393F{                    // bits description
  3394F  Uint16 rsvd1 : 1 ;
  3395F                   // 0 reserved
  3396F  Uint16 CBC : 1 ;
  3397F                 // 1 Trip Zones Cycle By Cycle Int Enable
  3398F  Uint16 OST : 1 ;
  3399F                 // 2 Trip Zones One Shot Int Enable
  3400F  Uint16 rsvd2 : 13 ;
  3401F                    // 15:3 reserved
  3402F} ;
  3403F
  3404Funion TZEINT_REG
  3405F{
  3406F  Uint16 all ;
  3407F  struct TZEINT_BITS bit ;
  3408F} ;
  3409F//----------------------------------------------------
  3410F// Trip zone flag register bit definitions */
  3411F
  3412Fstruct TZFLG_BITS
  3413F{                   // bits description
  3414F  Uint16 INT : 1 ;
  3415F                 // 0 Global status
  3416F  Uint16 CBC : 1 ;
  3417F                 // 1 Trip Zones Cycle By Cycle Int
  3418F  Uint16 OST : 1 ;
  3419F                 // 2 Trip Zones One Shot Int
  3420F  Uint16 rsvd2 : 13 ;
  3421F                    // 15:3 reserved
  3422F} ;
  3423F
  3424Funion TZFLG_REG
  3425F{
  3426F  Uint16 all ;
  3427F  struct TZFLG_BITS bit ;
  3428F} ;
  3429F//----------------------------------------------------
  3430F// Trip zone flag clear register bit definitions */
  3431F
  3432Fstruct TZCLR_BITS
  3433F{                   // bits description
  3434F  Uint16 INT : 1 ;
  3435F                 // 0 Global status
  3436F  Uint16 CBC : 1 ;
  3437F                 // 1 Trip Zones Cycle By Cycle Int
  3438F  Uint16 OST : 1 ;
  3439F                 // 2 Trip Zones One Shot Int
  3440F  Uint16 rsvd2 : 13 ;
  3441F                    // 15:3 reserved
  3442F} ;
  3443F
  3444Funion TZCLR_REG
  3445F{
  3446F  Uint16 all ;
  3447F  struct TZCLR_BITS bit ;
  3448F} ;
  3449F//----------------------------------------------------
  3450F// Trip zone flag force register bit definitions */
  3451F
  3452Fstruct TZFRC_BITS
  3453F{                   // bits description
  3454F  Uint16 rsvd1 : 1 ;
  3455F                   // 0 reserved
  3456F  Uint16 CBC : 1 ;
  3457F                 // 1 Trip Zones Cycle By Cycle Int
  3458F  Uint16 OST : 1 ;
  3459F                 // 2 Trip Zones One Shot Int
  3460F  Uint16 rsvd2 : 13 ;
  3461F                    // 15:3 reserved
  3462F} ;
  3463F
  3464Funion TZFRC_REG
  3465F{
  3466F  Uint16 all ;
  3467F  struct TZFRC_BITS bit ;
  3468F} ;
  3469F//----------------------------------------------------
  3470F// Event trigger select register bit definitions */
  3471F
  3472Fstruct ETSEL_BITS
  3473F{                   // bits description
  3474F  Uint16 INTSEL : 3 ;
  3475F                    // 2:0 EPWMxINTn Select
  3476F  Uint16 INTEN : 1 ;
  3477F                   // 3 EPWMxINTn Enable
  3478F  Uint16 rsvd1 : 4 ;
  3479F                   // 7:4 reserved
  3480F  Uint16 SOCASEL : 3 ;
  3481F                     // 10:8 Start of conversion A Select
  3482F  Uint16 SOCAEN : 1 ;
  3483F                    // 11 Start of conversion A Enable
  3484F  Uint16 SOCBSEL : 3 ;
  3485F                     // 14:12 Start of conversion B Select
  3486F  Uint16 SOCBEN : 1 ;
  3487F                    // 15 Start of conversion B Enable
  3488F} ;
  3489F
  3490Funion ETSEL_REG
  3491F{
  3492F  Uint16 all ;
  3493F  struct ETSEL_BITS bit ;
  3494F} ;
  3495F//----------------------------------------------------
  3496F// Event trigger pre-scale register bit definitions */
  3497F
  3498Fstruct ETPS_BITS
  3499F{                  // bits description
  3500F  Uint16 INTPRD : 2 ;
  3501F                    // 1:0 EPWMxINTn Period Select
  3502F  Uint16 INTCNT : 2 ;
  3503F                    // 3:2 EPWMxINTn Counter Register
  3504F  Uint16 rsvd1 : 4 ;
  3505F                   // 7:4 reserved
  3506F  Uint16 SOCAPRD : 2 ;
  3507F                     // 9:8 EPWMxSOCA Period Select
  3508F  Uint16 SOCACNT : 2 ;
  3509F                     // 11:10 EPWMxSOCA Counter Register
  3510F  Uint16 SOCBPRD : 2 ;
  3511F                     // 13:12 EPWMxSOCB Period Select
  3512F  Uint16 SOCBCNT : 2 ;
  3513F                     // 15:14 EPWMxSOCB Counter Register
  3514F} ;
  3515F
  3516Funion ETPS_REG
  3517F{
  3518F  Uint16 all ;
  3519F  struct ETPS_BITS bit ;
  3520F} ;
  3521F//----------------------------------------------------
  3522F// Event trigger Flag register bit definitions */
  3523F
  3524Fstruct ETFLG_BITS
  3525F{                   // bits description
  3526F  Uint16 INT : 1 ;
  3527F                 // 0   EPWMxINTn Flag
  3528F  Uint16 rsvd1 : 1 ;
  3529F                   // 1 reserved
  3530F  Uint16 SOCA : 1 ;
  3531F                  // 2  EPWMxSOCA Flag
  3532F  Uint16 SOCB : 1 ;
  3533F                  // 3  EPWMxSOCB Flag
  3534F  Uint16 rsvd2 : 12 ;
  3535F                    // 15:4     reserved
  3536F} ;
  3537F
  3538Funion ETFLG_REG
  3539F{
  3540F  Uint16 all ;
  3541F  struct ETFLG_BITS bit ;
  3542F} ;
  3543F//----------------------------------------------------
  3544F// Event trigger Clear register bit definitions */
  3545F
  3546Fstruct ETCLR_BITS
  3547F{                   // bits description
  3548F  Uint16 INT : 1 ;
  3549F                 // 0   EPWMxINTn Clear
  3550F  Uint16 rsvd1 : 1 ;
  3551F                   // 1 reserved
  3552F  Uint16 SOCA : 1 ;
  3553F                  // 2  EPWMxSOCA Clear
  3554F  Uint16 SOCB : 1 ;
  3555F                  // 3  EPWMxSOCB Clear
  3556F  Uint16 rsvd2 : 12 ;
  3557F                    // 15:4     reserved
  3558F} ;
  3559F
  3560Funion ETCLR_REG
  3561F{
  3562F  Uint16 all ;
  3563F  struct ETCLR_BITS bit ;
  3564F} ;
  3565F//----------------------------------------------------
  3566F// Event trigger Force register bit definitions */
  3567F
  3568Fstruct ETFRC_BITS
  3569F{                   // bits description
  3570F  Uint16 INT : 1 ;
  3571F                 // 0   EPWMxINTn Force
  3572F  Uint16 rsvd1 : 1 ;
  3573F                   // 1 reserved
  3574F  Uint16 SOCA : 1 ;
  3575F                  // 2  EPWMxSOCA Force
  3576F  Uint16 SOCB : 1 ;
  3577F                  // 3  EPWMxSOCB Force
  3578F  Uint16 rsvd2 : 12 ;
  3579F                    // 15:4     reserved
  3580F} ;
  3581F
  3582Funion ETFRC_REG
  3583F{
  3584F  Uint16 all ;
  3585F  struct ETFRC_BITS bit ;
  3586F} ;
  3587F//----------------------------------------------------
  3588F// PWM chopper control register bit definitions */
  3589F
  3590Fstruct PCCTL_BITS
  3591F{                   // bits description
  3592F  Uint16 CHPEN : 1 ;
  3593F                   // 0 PWM chopping enable
  3594F  Uint16 OSHTWTH : 4 ;
  3595F                     // 4:1 One-shot pulse width
  3596F  Uint16 CHPFREQ : 3 ;
  3597F                     // 7:5 Chopping clock frequency
  3598F  Uint16 CHPDUTY : 3 ;
  3599F                     // 10:8 Chopping clock Duty cycle
  3600F  Uint16 rsvd1 : 5 ;
  3601F                   // 15:11 reserved
  3602F} ;
  3603F
  3604Funion PCCTL_REG
  3605F{
  3606F  Uint16 all ;
  3607F  struct PCCTL_BITS bit ;
  3608F} ;
  3609F
  3610Fstruct HRCNFG_BITS
  3611F{                       // bits description
  3612F  Uint16 EDGMODE : 2 ;  // 1:0 Edge Mode select Bits
  3613F  Uint16 CTLMODE : 1 ;  // 2 Control mode Select Bit
  3614F  Uint16 HRLOAD : 1 ;   // 3 Shadow mode Select Bit
  3615F  Uint16 rsvd1 : 12 ;   // 15:4 reserved
  3616F} ;
  3617F
  3618Funion HRCNFG_REG
  3619F{
  3620F  Uint16 all ;
  3621F  struct HRCNFG_BITS bit ;
  3622F} ;
  3623F
  3624Fstruct TBPHS_HRPWM_REG
  3625F{                               // bits description
  3626F  Uint16 TBPHSHR ;      // 15:0 Extension register for HRPWM Phase (8 bits)
  3627F  Uint16 TBPHS ; // 31:16 Phase offset register
  3628F} ;
  3629F
  3630Funion TBPHS_HRPWM_GROUP
  3631F{
  3632F  Uint32 all ;
  3633F  struct TBPHS_HRPWM_REG half ;
  3634F} ;
  3635F
  3636Fstruct CMPA_HRPWM_REG
  3637F{                               // bits description
  3638F  Uint16 CMPAHR ;        // 15:0 Extension register for HRPWM compare (8 bits)
  3639F  Uint16 CMPA ; // 31:16 Compare A reg
  3640F} ;
  3641F
  3642Funion CMPA_HRPWM_GROUP
  3643F{
  3644F  Uint32 all ;
  3645F  struct CMPA_HRPWM_REG half ;
  3646F} ;
  3647F
  3648Fstruct EPWM_REGS
  3649F{
  3650F  union TBCTL_REG TBCTL ; //
  3651F  union TBSTS_REG TBSTS ; //
  3652F  union TBPHS_HRPWM_GROUP TBPHS ; // Union of TBPHS:TBPHSHR
  3653F  Uint16 TBCTR ; // Counter
  3654F  Uint16 TBPRD ; // Period register set
  3655F  Uint16 rsvd1 ; //
  3656F  union CMPCTL_REG CMPCTL ; // Compare control
  3657F  union CMPA_HRPWM_GROUP CMPA ; // Union of CMPA:CMPAHR
  3658F  Uint16 CMPB ; // Compare B reg
  3659F  union AQCTL_REG AQCTLA ; // Action qual output A
  3660F  union AQCTL_REG AQCTLB ; // Action qual output B
  3661F  union AQSFRC_REG AQSFRC ; // Action qual SW force
  3662F  union AQCSFRC_REG AQCSFRC ; // Action qualifier continuous SW force
  3663F  union DBCTL_REG DBCTL ; // Dead-band control
  3664F  Uint16 DBRED ; // Dead-band rising edge delay
  3665F  Uint16 DBFED ; // Dead-band falling edge delay
  3666F  union TZSEL_REG TZSEL ; // Trip zone select
  3667F  Uint16 rsvd2 ;
  3668F  union TZCTL_REG TZCTL ; // Trip zone control
  3669F  union TZEINT_REG TZEINT ; // Trip zone interrupt enable
  3670F  union TZFLG_REG TZFLG ; // Trip zone interrupt flags
  3671F  union TZCLR_REG TZCLR ; // Trip zone clear
  3672F  union TZFRC_REG TZFRC ;       // Trip zone force interrupt
  3673F  union ETSEL_REG ETSEL ; // Event trigger selection
  3674F  union ETPS_REG ETPS ; // Event trigger pre-scaler
  3675F  union ETFLG_REG ETFLG ; // Event trigger flags
  3676F  union ETCLR_REG ETCLR ; // Event trigger clear
  3677F  union ETFRC_REG ETFRC ; // Event trigger force
  3678F  union PCCTL_REG PCCTL ; // PWM chopper control
  3679F  Uint16 rsvd3 ; //
  3680F  union HRCNFG_REG HRCNFG ; // HRPWM Config Reg
  3681F} ;
  3682F//---------------------------------------------------------------------------
  3683F// External References & Function Declarations:
  3684F//
  3685F
  3686Fextern volatile struct EPWM_REGS
  3687F  EPwm1Regs ;
  3688F
  3689Fextern volatile struct EPWM_REGS
  3690F  EPwm2Regs ;
  3691F
  3692Fextern volatile struct EPWM_REGS
  3693F  EPwm3Regs ;
  3694F
  3695Fextern volatile struct EPWM_REGS
  3696F  EPwm4Regs ;
  3697F
  3698Fextern volatile struct EPWM_REGS
  3699F  EPwm5Regs ;
  3700F
  3701Fextern volatile struct EPWM_REGS
  3702F  EPwm6Regs ;
  3703F       /* extern "C" */
  3704F       // end of DSP2833x_EPWM_H definition
  3705F//===========================================================================
  3706F// End of file.
  3707F//===========================================================================
  3708F 
  3709F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EPwm.h*/
  3710F/*   CLOSE_FILE Include File */
  3711F 
  3712F               // Enhanced PWM
  3713F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EQep.h */
  3714F// TI File $Revision: /main/1 $
  3715F// Checkin $Date: August 18, 2006 13:52:13 $
  3716F//###########################################################################
  3717F//
  3718F// FILE: DSP2833x_EQep.h
  3719F//
  3720F// TITLE: DSP2833x Enhanced Quadrature Encoder Pulse Module
  3721F// Register Bit Definitions.
  3722F//
  3723F//###########################################################################
  3724F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  3725F// $Release Date: August 4, 2009 $
  3726F//###########################################################################
  3727F#ifndef DSP2833x_EQEP_H
  3728F#define DSP2833x_EQEP_H
  3729F//----------------------------------------------------
  3730F// Capture decoder control register bit definitions */
  3731F
  3732Fstruct QDECCTL_BITS
  3733F{                     // bits description
  3734F  Uint16 rsvd1 : 5 ;
  3735F                   // 4:0 reserved
  3736F  Uint16 QSP : 1 ;
  3737F                 // 5 QEPS input polarity
  3738F  Uint16 QIP : 1 ;
  3739F                 // 6 QEPI input polarity
  3740F  Uint16 QBP : 1 ;
  3741F                 // 7 QEPB input polarity
  3742F  Uint16 QAP : 1 ;
  3743F                 // 8 QEPA input polarity
  3744F  Uint16 IGATE : 1 ;
  3745F                   // 9 Index pulse gating option
  3746F  Uint16 SWAP : 1 ;
  3747F                  // 10 CLK/DIR signal source for Position Counter
  3748F  Uint16 XCR : 1 ;
  3749F                 // 11 External clock rate
  3750F  Uint16 SPSEL : 1 ;
  3751F                   // 12 Sync output pin select
  3752F  Uint16 SOEN : 1 ;
  3753F                  // 13 Enable position compare sync
  3754F  Uint16 QSRC : 2 ;
  3755F                  // 15:14 Position counter source
  3756F} ;
  3757F
  3758Funion QDECCTL_REG
  3759F{
  3760F  Uint16 all ;
  3761F  struct QDECCTL_BITS bit ;
  3762F} ;
  3763F//----------------------------------------------------
  3764F// QEP control register bit definitions */
  3765F
  3766Fstruct QEPCTL_BITS
  3767F{                    // bits description
  3768F  Uint16 WDE : 1 ;
  3769F                 // 0 QEP watchdog enable
  3770F  Uint16 UTE : 1 ;
  3771F                 // 1 QEP unit timer enable
  3772F  Uint16 QCLM : 1 ;
  3773F                  // 2 QEP capture latch mode
  3774F  Uint16 QPEN : 1 ;
  3775F                  // 3 Quadrature position counter enable
  3776F  Uint16 IEL : 2 ;
  3777F                 // 5:4 Index event latch
  3778F  Uint16 SEL : 1 ;
  3779F                 // 6 Strobe event latch
  3780F  Uint16 SWI : 1 ;
  3781F                 // 7 Software init position counter
  3782F  Uint16 IEI : 2 ;
  3783F                 // 9:8 Index event init of position count
  3784F  Uint16 SEI : 2 ;
  3785F                 // 11:10 Strobe event init
  3786F  Uint16 PCRM : 2 ;
  3787F                  // 13:12 Position counter reset
  3788F  Uint16 FREE_SOFT : 2 ;
  3789F                       // 15:14 Emulation mode
  3790F} ;
  3791F
  3792Funion QEPCTL_REG
  3793F{
  3794F  Uint16 all ;
  3795F  struct QEPCTL_BITS bit ;
  3796F} ;
  3797F//----------------------------------------------------
  3798F// Quadrature capture control register bit definitions */
  3799F
  3800Fstruct QCAPCTL_BITS
  3801F{                     // bits description
  3802F  Uint16 UPPS : 4 ;
  3803F                  // 3:0 Unit position pre-scale
  3804F  Uint16 CCPS : 3 ;
  3805F                  // 6:4 QEP capture timer pre-scale
  3806F  Uint16 rsvd1 : 8 ;
  3807F                   // 14:7 reserved
  3808F  Uint16 CEN : 1 ;
  3809F                 // 15 Enable QEP capture
  3810F} ;
  3811F
  3812Funion QCAPCTL_REG
  3813F{
  3814F  Uint16 all ;
  3815F  struct QCAPCTL_BITS bit ;
  3816F} ;
  3817F//----------------------------------------------------
  3818F// Position compare control register bit definitions */
  3819F
  3820Fstruct QPOSCTL_BITS
  3821F{                     // bits description
  3822F  Uint16 PCSPW : 12 ;
  3823F                    // 11:0 Position compare sync pulse width
  3824F  Uint16 PCE : 1 ;
  3825F                 // 12 Position compare enable/disable
  3826F  Uint16 PCPOL : 1 ;
  3827F                   // 13 Polarity of sync output
  3828F  Uint16 PCLOAD : 1 ;
  3829F                    // 14 Position compare of shadow load
  3830F  Uint16 PCSHDW : 1 ;
  3831F                    // 15 Position compare shadow enable
  3832F} ;
  3833F
  3834Funion QPOSCTL_REG
  3835F{
  3836F  Uint16 all ;
  3837F  struct QPOSCTL_BITS bit ;
  3838F} ;
  3839F//----------------------------------------------------
  3840F// QEP interrupt control register bit definitions */
  3841F
  3842Fstruct QEINT_BITS
  3843F{                   // bits description
  3844F  Uint16 rsvd1 : 1 ;
  3845F                   // 0 reserved
  3846F  Uint16 PCE : 1 ;
  3847F                 // 1 Position counter error
  3848F  Uint16 QPE : 1 ;
  3849F                 // 2 Quadrature phase error
  3850F  Uint16 QDC : 1 ;
  3851F                 // 3 Quadrature dir change
  3852F  Uint16 WTO : 1 ;
  3853F                 // 4 Watchdog timeout
  3854F  Uint16 PCU : 1 ;
  3855F                 // 5 Position counter underflow
  3856F  Uint16 PCO : 1 ;
  3857F                 // 6 Position counter overflow
  3858F  Uint16 PCR : 1 ;
  3859F                 // 7 Position compare ready
  3860F  Uint16 PCM : 1 ;
  3861F                 // 8 Position compare match
  3862F  Uint16 SEL : 1 ;
  3863F                 // 9 Strobe event latch
  3864F  Uint16 IEL : 1 ;
  3865F                 // 10 Event latch
  3866F  Uint16 UTO : 1 ;
  3867F                 // 11 Unit timeout
  3868F  Uint16 rsvd2 : 4 ;
  3869F                   // 15:12 reserved
  3870F} ;
  3871F
  3872Funion QEINT_REG
  3873F{
  3874F  Uint16 all ;
  3875F  struct QEINT_BITS bit ;
  3876F} ;
  3877F//----------------------------------------------------
  3878F// QEP interrupt status register bit definitions */
  3879F
  3880Fstruct QFLG_BITS
  3881F{                  // bits description
  3882F  Uint16 INT : 1 ;
  3883F                 // 0 Global interrupt
  3884F  Uint16 PCE : 1 ;
  3885F                 // 1 Position counter error
  3886F  Uint16 PHE : 1 ;
  3887F                 // 2 Quadrature phase error
  3888F  Uint16 QDC : 1 ;
  3889F                 // 3 Quadrature dir change
  3890F  Uint16 WTO : 1 ;
  3891F                 // 4 Watchdog timeout
  3892F  Uint16 PCU : 1 ;
  3893F                 // 5 Position counter underflow
  3894F  Uint16 PCO : 1 ;
  3895F                 // 6 Position counter overflow
  3896F  Uint16 PCR : 1 ;
  3897F                 // 7 Position compare ready
  3898F  Uint16 PCM : 1 ;
  3899F                 // 8 Position compare match
  3900F  Uint16 SEL : 1 ;
  3901F                 // 9 Strobe event latch
  3902F  Uint16 IEL : 1 ;
  3903F                 // 10 Event latch
  3904F  Uint16 UTO : 1 ;
  3905F                 // 11 Unit timeout
  3906F  Uint16 rsvd2 : 4 ;
  3907F                   // 15:12 reserved
  3908F} ;
  3909F
  3910Funion QFLG_REG
  3911F{
  3912F  Uint16 all ;
  3913F  struct QFLG_BITS bit ;
  3914F} ;
  3915F//----------------------------------------------------
  3916F// QEP interrupt force register bit definitions */
  3917F
  3918Fstruct QFRC_BITS
  3919F{                  // bits description
  3920F  Uint16 reserved : 1 ;
  3921F                      // 0 Reserved
  3922F  Uint16 PCE : 1 ;
  3923F                 // 1 Position counter error
  3924F  Uint16 PHE : 1 ;
  3925F                 // 2 Quadrature phase error
  3926F  Uint16 QDC : 1 ;
  3927F                 // 3 Quadrature dir change
  3928F  Uint16 WTO : 1 ;
  3929F                 // 4 Watchdog timeout
  3930F  Uint16 PCU : 1 ;
  3931F                 // 5 Position counter underflow
  3932F  Uint16 PCO : 1 ;
  3933F                 // 6 Position counter overflow
  3934F  Uint16 PCR : 1 ;
  3935F                 // 7 Position compare ready
  3936F  Uint16 PCM : 1 ;
  3937F                 // 8 Position compare match
  3938F  Uint16 SEL : 1 ;
  3939F                 // 9 Strobe event latch
  3940F  Uint16 IEL : 1 ;
  3941F                 // 10 Event latch
  3942F  Uint16 UTO : 1 ;
  3943F                 // 11 Unit timeout
  3944F  Uint16 rsvd2 : 4 ;
  3945F                   // 15:12 reserved
  3946F} ;
  3947F
  3948Funion QFRC_REG
  3949F{
  3950F  Uint16 all ;
  3951F  struct QFRC_BITS bit ;
  3952F} ;
  3953F// V1.1 Added UPEVNT (bit 7) This reflects changes
  3954F// made as of F2833x Rev A devices
  3955F//----------------------------------------------------
  3956F// QEP status register bit definitions */
  3957F
  3958Fstruct QEPSTS_BITS
  3959F{                    // bits description
  3960F  Uint16 PCEF : 1 ;
  3961F                  // 0 Position counter error
  3962F  Uint16 FIMF : 1 ;
  3963F                  // 1 First index marker
  3964F  Uint16 CDEF : 1 ;
  3965F                  // 2 Capture direction error
  3966F  Uint16 COEF : 1 ;
  3967F                  // 3 Capture overflow error
  3968F  Uint16 QDLF : 1 ;
  3969F                  // 4 QEP direction latch
  3970F  Uint16 QDF : 1 ;
  3971F                 // 5 Quadrature direction
  3972F  Uint16 FIDF : 1 ;
  3973F                  // 6 Direction on first index marker
  3974F  Uint16 UPEVNT : 1 ;
  3975F                    // 7 Unit position event flag
  3976F  Uint16 rsvd1 : 8 ;
  3977F                   // 15:8 reserved
  3978F} ;
  3979F
  3980Funion QEPSTS_REG
  3981F{
  3982F  Uint16 all ;
  3983F  struct QEPSTS_BITS bit ;
  3984F} ;
  3985F//----------------------------------------------------
  3986F
  3987Fstruct EQEP_REGS
  3988F{
  3989F  Uint32 QPOSCNT ; // Position counter
  3990F  Uint32 QPOSINIT ; // Position counter init
  3991F  Uint32 QPOSMAX ; // Maximum position count
  3992F  Uint32 QPOSCMP ; // Position compare
  3993F  Uint32 QPOSILAT ; // Index position latch
  3994F  Uint32 QPOSSLAT ; // Strobe position latch
  3995F  Uint32 QPOSLAT ; // Position latch
  3996F  Uint32 QUTMR ; // Unit timer
  3997F  Uint32 QUPRD ; // Unit period
  3998F  Uint16 QWDTMR ; // QEP watchdog timer
  3999F  Uint16 QWDPRD ; // QEP watchdog period
  4000F  union QDECCTL_REG QDECCTL ; // Quadrature decoder control
  4001F  union QEPCTL_REG QEPCTL ; // QEP control
  4002F  union QCAPCTL_REG QCAPCTL ; // Quadrature capture control
  4003F  union QPOSCTL_REG QPOSCTL ; // Position compare control
  4004F  union QEINT_REG QEINT ; // QEP interrupt control
  4005F  union QFLG_REG QFLG ; // QEP interrupt flag
  4006F  union QFLG_REG QCLR ; // QEP interrupt clear
  4007F  union QFRC_REG QFRC ; // QEP interrupt force
  4008F  union QEPSTS_REG QEPSTS ; // QEP status
  4009F  Uint16 QCTMR ; // QEP capture timer
  4010F  Uint16 QCPRD ; // QEP capture period
  4011F  Uint16 QCTMRLAT ; // QEP capture latch
  4012F  Uint16 QCPRDLAT ; // QEP capture period latch
  4013F  Uint16 rsvd1 [ 30 ] ;
  4014F                     // reserved
  4015F} ;
  4016F//---------------------------------------------------------------------------
  4017F// GPI/O External References & Function Declarations:
  4018F//
  4019F
  4020Fextern volatile struct EQEP_REGS
  4021F  EQep1Regs ;
  4022F
  4023Fextern volatile struct EQEP_REGS
  4024F  EQep2Regs ;
  4025F       /* extern "C" */
  4026F       // end of DSP2833x_EQEP_H definition
  4027F//===========================================================================
  4028F// End of file.
  4029F//===========================================================================
  4030F 
  4031F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EQep.h*/
  4032F/*   CLOSE_FILE Include File */
  4033F 
  4034F               // Enhanced QEP
  4035F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Gpio.h */
  4036F// TI File $Revision: /main/4 $
  4037F// Checkin $Date: November 15, 2007 09:58:53 $
  4038F//###########################################################################
  4039F//
  4040F// FILE: DSP2833x_Gpio.h
  4041F//
  4042F// TITLE: DSP2833x General Purpose I/O Definitions.
  4043F//
  4044F//###########################################################################
  4045F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  4046F// $Release Date: August 4, 2009 $
  4047F//###########################################################################
  4048F#ifndef DSP2833x_GPIO_H
  4049F#define DSP2833x_GPIO_H
  4050F//----------------------------------------------------
  4051F// GPIO A control register bit definitions */
  4052F
  4053Ftypedef
  4054Fstruct GPACTRL_BITS
  4055F{                             // bits description
  4056F  Uint16 QUALPRD0 : 8 ;
  4057F                      // 7:0 Qual period
  4058F  Uint16 QUALPRD1 : 8 ;
  4059F                      // 15:8 Qual period
  4060F  Uint16 QUALPRD2 : 8 ;
  4061F                      // 23:16 Qual period
  4062F  Uint16 QUALPRD3 : 8 ;
  4063F                      // 31:24 Qual period
  4064F} GPACTRL_BITS ;
  4065F
  4066Ftypedef
  4067Funion GPACTRL_REG
  4068F{
  4069F  Uint32 all ;
  4070F  struct GPACTRL_BITS bit ;
  4071F} GPACTRL_REG ;
  4072F//----------------------------------------------------
  4073F// GPIO B control register bit definitions */
  4074F
  4075Ftypedef
  4076Fstruct GPBCTRL_BITS
  4077F{                             // bits description
  4078F  Uint16 QUALPRD0 : 8 ;
  4079F                      // 7:0 Qual period
  4080F  Uint16 QUALPRD1 : 8 ;
  4081F                      // 15:8 Qual period
  4082F  Uint16 QUALPRD2 : 8 ;
  4083F                      // 23:16 Qual period
  4084F  Uint16 QUALPRD3 : 8 ;
  4085F                      // 31:24
  4086F} GPBCTRL_BITS ;
  4087F
  4088Ftypedef
  4089Funion GPBCTRL_REG
  4090F{
  4091F  Uint32 all ;
  4092F  struct GPBCTRL_BITS bit ;
  4093F} GPBCTRL_REG ;
  4094F//----------------------------------------------------
  4095F// GPIO A Qual/MUX select register bit definitions */
  4096F
  4097Ftypedef
  4098Fstruct GPA1_BITS
  4099F{                          // bits description
  4100F  Uint16 GPIO0 : 2 ;
  4101F                   // 1:0 GPIO0
  4102F  Uint16 GPIO1 : 2 ;
  4103F                   // 3:2 GPIO1
  4104F  Uint16 GPIO2 : 2 ;
  4105F                   // 5:4 GPIO2
  4106F  Uint16 GPIO3 : 2 ;
  4107F                   // 7:6 GPIO3
  4108F  Uint16 GPIO4 : 2 ;
  4109F                   // 9:8 GPIO4
  4110F  Uint16 GPIO5 : 2 ;
  4111F                   // 11:10 GPIO5
  4112F  Uint16 GPIO6 : 2 ;
  4113F                   // 13:12 GPIO6
  4114F  Uint16 GPIO7 : 2 ;
  4115F                   // 15:14 GPIO7
  4116F  Uint16 GPIO8 : 2 ;
  4117F                   // 17:16 GPIO8
  4118F  Uint16 GPIO9 : 2 ;
  4119F                   // 19:18 GPIO9
  4120F  Uint16 GPIO10 : 2 ;
  4121F                    // 21:20 GPIO10
  4122F  Uint16 GPIO11 : 2 ;
  4123F                    // 23:22 GPIO11
  4124F  Uint16 GPIO12 : 2 ;
  4125F                    // 25:24 GPIO12
  4126F  Uint16 GPIO13 : 2 ;
  4127F                    // 27:26 GPIO13
  4128F  Uint16 GPIO14 : 2 ;
  4129F                    // 29:28 GPIO14
  4130F  Uint16 GPIO15 : 2 ;
  4131F                    // 31:30 GPIO15
  4132F} GPA1_BITS ;
  4133F
  4134Ftypedef
  4135Fstruct GPA2_BITS
  4136F{                          // bits description
  4137F  Uint16 GPIO16 : 2 ;
  4138F                    // 1:0 GPIO16
  4139F  Uint16 GPIO17 : 2 ;
  4140F                    // 3:2 GPIO17
  4141F  Uint16 GPIO18 : 2 ;
  4142F                    // 5:4 GPIO18
  4143F  Uint16 GPIO19 : 2 ;
  4144F                    // 7:6 GPIO19
  4145F  Uint16 GPIO20 : 2 ;
  4146F                    // 9:8 GPIO20
  4147F  Uint16 GPIO21 : 2 ;
  4148F                    // 11:10 GPIO21
  4149F  Uint16 GPIO22 : 2 ;
  4150F                    // 13:12 GPIO22
  4151F  Uint16 GPIO23 : 2 ;
  4152F                    // 15:14 GPIO23
  4153F  Uint16 GPIO24 : 2 ;
  4154F                    // 17:16 GPIO24
  4155F  Uint16 GPIO25 : 2 ;
  4156F                    // 19:18 GPIO25
  4157F  Uint16 GPIO26 : 2 ;
  4158F                    // 21:20 GPIO26
  4159F  Uint16 GPIO27 : 2 ;
  4160F                    // 23:22 GPIO27
  4161F  Uint16 GPIO28 : 2 ;
  4162F                    // 25:24 GPIO28
  4163F  Uint16 GPIO29 : 2 ;
  4164F                    // 27:26 GPIO29
  4165F  Uint16 GPIO30 : 2 ;
  4166F                    // 29:28 GPIO30
  4167F  Uint16 GPIO31 : 2 ;
  4168F                    // 31:30 GPIO31
  4169F} GPA2_BITS ;
  4170F
  4171Ftypedef
  4172Fstruct GPB1_BITS
  4173F{                          // bits description
  4174F  Uint16 GPIO32 : 2 ;
  4175F                    // 1:0 GPIO32
  4176F  Uint16 GPIO33 : 2 ;
  4177F                    // 3:2 GPIO33
  4178F  Uint16 GPIO34 : 2 ;
  4179F                    // 5:4 GPIO34
  4180F  Uint16 GPIO35 : 2 ;
  4181F                    // 7:6 GPIO35
  4182F  Uint16 GPIO36 : 2 ;
  4183F                    // 9:8 GPIO36
  4184F  Uint16 GPIO37 : 2 ;
  4185F                    // 11:10 GPIO37
  4186F  Uint16 GPIO38 : 2 ;
  4187F                    // 13:12 GPIO38
  4188F  Uint16 GPIO39 : 2 ;
  4189F                    // 15:14 GPIO39
  4190F  Uint16 GPIO40 : 2 ;
  4191F                    // 17:16 GPIO40
  4192F  Uint16 GPIO41 : 2 ;
  4193F                    // 19:16 GPIO41
  4194F  Uint16 GPIO42 : 2 ;
  4195F                    // 21:20 GPIO42
  4196F  Uint16 GPIO43 : 2 ;
  4197F                    // 23:22 GPIO43
  4198F  Uint16 GPIO44 : 2 ;
  4199F                    // 25:24 GPIO44
  4200F  Uint16 GPIO45 : 2 ;
  4201F                    // 27:26 GPIO45
  4202F  Uint16 GPIO46 : 2 ;
  4203F                    // 29:28 GPIO46
  4204F  Uint16 GPIO47 : 2 ;
  4205F                    // 31:30 GPIO47
  4206F} GPB1_BITS ;
  4207F
  4208Ftypedef
  4209Fstruct GPB2_BITS
  4210F{                          // bits description
  4211F  Uint16 GPIO48 : 2 ;
  4212F                    // 1:0 GPIO48
  4213F  Uint16 GPIO49 : 2 ;
  4214F                    // 3:2 GPIO49
  4215F  Uint16 GPIO50 : 2 ;
  4216F                    // 5:4 GPIO50
  4217F  Uint16 GPIO51 : 2 ;
  4218F                    // 7:6 GPIO51
  4219F  Uint16 GPIO52 : 2 ;
  4220F                    // 9:8 GPIO52
  4221F  Uint16 GPIO53 : 2 ;
  4222F                    // 11:10 GPIO53
  4223F  Uint16 GPIO54 : 2 ;
  4224F                    // 13:12 GPIO54
  4225F  Uint16 GPIO55 : 2 ;
  4226F                    // 15:14 GPIO55
  4227F  Uint16 GPIO56 : 2 ;
  4228F                    // 17:16 GPIO56
  4229F  Uint16 GPIO57 : 2 ;
  4230F                    // 19:18 GPIO57
  4231F  Uint16 GPIO58 : 2 ;
  4232F                    // 21:20 GPIO58
  4233F  Uint16 GPIO59 : 2 ;
  4234F                    // 23:22 GPIO59
  4235F  Uint16 GPIO60 : 2 ;
  4236F                    // 25:24 GPIO60
  4237F  Uint16 GPIO61 : 2 ;
  4238F                    // 27:26 GPIO61
  4239F  Uint16 GPIO62 : 2 ;
  4240F                    // 29:28 GPIO62
  4241F  Uint16 GPIO63 : 2 ;
  4242F                    // 31:30 GPIO63
  4243F} GPB2_BITS ;
  4244F
  4245Ftypedef
  4246Fstruct GPC1_BITS
  4247F{                          // bits description
  4248F  Uint16 GPIO64 : 2 ;
  4249F                    // 1:0 GPIO64
  4250F  Uint16 GPIO65 : 2 ;
  4251F                    // 3:2 GPIO65
  4252F  Uint16 GPIO66 : 2 ;
  4253F                    // 5:4 GPIO66
  4254F  Uint16 GPIO67 : 2 ;
  4255F                    // 7:6 GPIO67
  4256F  Uint16 GPIO68 : 2 ;
  4257F                    // 9:8 GPIO68
  4258F  Uint16 GPIO69 : 2 ;
  4259F                    // 11:10 GPIO69
  4260F  Uint16 GPIO70 : 2 ;
  4261F                    // 13:12 GPIO70
  4262F  Uint16 GPIO71 : 2 ;
  4263F                    // 15:14 GPIO71
  4264F  Uint16 GPIO72 : 2 ;
  4265F                    // 17:16 GPIO72
  4266F  Uint16 GPIO73 : 2 ;
  4267F                    // 19:18 GPIO73
  4268F  Uint16 GPIO74 : 2 ;
  4269F                    // 21:20 GPIO74
  4270F  Uint16 GPIO75 : 2 ;
  4271F                    // 23:22 GPIO75
  4272F  Uint16 GPIO76 : 2 ;
  4273F                    // 25:24 GPIO76
  4274F  Uint16 GPIO77 : 2 ;
  4275F                    // 27:26 GPIO77
  4276F  Uint16 GPIO78 : 2 ;
  4277F                    // 29:28 GPIO78
  4278F  Uint16 GPIO79 : 2 ;
  4279F                    // 31:30 GPIO79
  4280F} GPC1_BITS ;
  4281F
  4282Ftypedef
  4283Fstruct GPC2_BITS
  4284F{                          // bits description
  4285F  Uint16 GPIO80 : 2 ;
  4286F                    // 1:0 GPIO80
  4287F  Uint16 GPIO81 : 2 ;
  4288F                    // 3:2 GPIO81
  4289F  Uint16 GPIO82 : 2 ;
  4290F                    // 5:4 GPIO82
  4291F  Uint16 GPIO83 : 2 ;
  4292F                    // 7:6 GPIO83
  4293F  Uint16 GPIO84 : 2 ;
  4294F                    // 9:8 GPIO84
  4295F  Uint16 GPIO85 : 2 ;
  4296F                    // 11:10 GPIO85
  4297F  Uint16 GPIO86 : 2 ;
  4298F                    // 13:12 GPIO86
  4299F  Uint16 GPIO87 : 2 ;
  4300F                    // 15:14 GPIO87
  4301F  Uint16 rsvd : 16 ;
  4302F                   // 31:16 reserved
  4303F} GPC2_BITS ;
  4304F
  4305Ftypedef
  4306Funion GPA1_REG
  4307F{
  4308F  Uint32 all ;
  4309F  struct GPA1_BITS bit ;
  4310F} GPA1_REG ;
  4311F
  4312Ftypedef
  4313Funion GPA2_REG
  4314F{
  4315F  Uint32 all ;
  4316F  struct GPA2_BITS bit ;
  4317F} GPA2_REG ;
  4318F
  4319Ftypedef
  4320Funion GPB1_REG
  4321F{
  4322F  Uint32 all ;
  4323F  struct GPB1_BITS bit ;
  4324F} GPB1_REG ;
  4325F
  4326Ftypedef
  4327Funion GPB2_REG
  4328F{
  4329F  Uint32 all ;
  4330F  struct GPB2_BITS bit ;
  4331F} GPB2_REG ;
  4332F
  4333Ftypedef
  4334Funion GPC1_REG
  4335F{
  4336F  Uint32 all ;
  4337F  struct GPC1_BITS bit ;
  4338F} GPC1_REG ;
  4339F
  4340Ftypedef
  4341Funion GPC2_REG
  4342F{
  4343F  Uint32 all ;
  4344F  struct GPC2_BITS bit ;
  4345F} GPC2_REG ;
  4346F//----------------------------------------------------
  4347F// GPIO A DIR/TOGGLE/SET/CLEAR register bit definitions */
  4348F
  4349Ftypedef
  4350Fstruct GPADAT_BITS
  4351F{                            // bits description
  4352F  Uint16 GPIO0 : 1 ;
  4353F                   // 0 GPIO0
  4354F  Uint16 GPIO1 : 1 ;
  4355F                   // 1 GPIO1
  4356F  Uint16 GPIO2 : 1 ;
  4357F                   // 2 GPIO2
  4358F  Uint16 GPIO3 : 1 ;
  4359F                   // 3 GPIO3
  4360F  Uint16 GPIO4 : 1 ;
  4361F                   // 4 GPIO4
  4362F  Uint16 GPIO5 : 1 ;
  4363F                   // 5 GPIO5
  4364F  Uint16 GPIO6 : 1 ;
  4365F                   // 6 GPIO6
  4366F  Uint16 GPIO7 : 1 ;
  4367F                   // 7 GPIO7
  4368F  Uint16 GPIO8 : 1 ;
  4369F                   // 8 GPIO8
  4370F  Uint16 GPIO9 : 1 ;
  4371F                   // 9 GPIO9
  4372F  Uint16 GPIO10 : 1 ;
  4373F                    // 10 GPIO10
  4374F  Uint16 GPIO11 : 1 ;
  4375F                    // 11 GPIO11
  4376F  Uint16 GPIO12 : 1 ;
  4377F                    // 12 GPIO12
  4378F  Uint16 GPIO13 : 1 ;
  4379F                    // 13 GPIO13
  4380F  Uint16 GPIO14 : 1 ;
  4381F                    // 14 GPIO14
  4382F  Uint16 GPIO15 : 1 ;
  4383F                    // 15 GPIO15
  4384F  Uint16 GPIO16 : 1 ;
  4385F                    // 16 GPIO16
  4386F  Uint16 GPIO17 : 1 ;
  4387F                    // 17 GPIO17
  4388F  Uint16 GPIO18 : 1 ;
  4389F                    // 18 GPIO18
  4390F  Uint16 GPIO19 : 1 ;
  4391F                    // 19 GPIO19
  4392F  Uint16 GPIO20 : 1 ;
  4393F                    // 20 GPIO20
  4394F  Uint16 GPIO21 : 1 ;
  4395F                    // 21 GPIO21
  4396F  Uint16 GPIO22 : 1 ;
  4397F                    // 22 GPIO22
  4398F  Uint16 GPIO23 : 1 ;
  4399F                    // 23 GPIO23
  4400F  Uint16 GPIO24 : 1 ;
  4401F                    // 24 GPIO24
  4402F  Uint16 GPIO25 : 1 ;
  4403F                    // 25 GPIO25
  4404F  Uint16 GPIO26 : 1 ;
  4405F                    // 26 GPIO26
  4406F  Uint16 GPIO27 : 1 ;
  4407F                    // 27 GPIO27
  4408F  Uint16 GPIO28 : 1 ;
  4409F                    // 28 GPIO28
  4410F  Uint16 GPIO29 : 1 ;
  4411F                    // 29 GPIO29
  4412F  Uint16 GPIO30 : 1 ;
  4413F                    // 30 GPIO30
  4414F  Uint16 GPIO31 : 1 ;
  4415F                    // 31 GPIO31
  4416F} GPADAT_BITS ;
  4417F
  4418Ftypedef
  4419Fstruct GPBDAT_BITS
  4420F{                            // bits description
  4421F  Uint16 GPIO32 : 1 ;
  4422F                    // 0 GPIO32
  4423F  Uint16 GPIO33 : 1 ;
  4424F                    // 1 GPIO33
  4425F  Uint16 GPIO34 : 1 ;
  4426F                    // 2 GPIO34
  4427F  Uint16 GPIO35 : 1 ;
  4428F                    // 3 GPIO35
  4429F  Uint16 GPIO36 : 1 ;
  4430F                    // 4 GPIO36
  4431F  Uint16 GPIO37 : 1 ;
  4432F                    // 5 GPIO37
  4433F  Uint16 GPIO38 : 1 ;
  4434F                    // 6 GPIO38
  4435F  Uint16 GPIO39 : 1 ;
  4436F                    // 7 GPIO39
  4437F  Uint16 GPIO40 : 1 ;
  4438F                    // 8 GPIO40
  4439F  Uint16 GPIO41 : 1 ;
  4440F                    // 9 GPIO41
  4441F  Uint16 GPIO42 : 1 ;
  4442F                    // 10 GPIO42
  4443F  Uint16 GPIO43 : 1 ;
  4444F                    // 11 GPIO43
  4445F  Uint16 GPIO44 : 1 ;
  4446F                    // 12 GPIO44
  4447F  Uint16 GPIO45 : 1 ;
  4448F                    // 13 GPIO45
  4449F  Uint16 GPIO46 : 1 ;
  4450F                    // 14 GPIO46
  4451F  Uint16 GPIO47 : 1 ;
  4452F                    // 15 GPIO47
  4453F  Uint16 GPIO48 : 1 ;
  4454F                    // 16 GPIO48
  4455F  Uint16 GPIO49 : 1 ;
  4456F                    // 17 GPIO49
  4457F  Uint16 GPIO50 : 1 ;
  4458F                    // 18 GPIO50
  4459F  Uint16 GPIO51 : 1 ;
  4460F                    // 19 GPIO51
  4461F  Uint16 GPIO52 : 1 ;
  4462F                    // 20 GPIO52
  4463F  Uint16 GPIO53 : 1 ;
  4464F                    // 21 GPIO53
  4465F  Uint16 GPIO54 : 1 ;
  4466F                    // 22 GPIO54
  4467F  Uint16 GPIO55 : 1 ;
  4468F                    // 23 GPIO55
  4469F  Uint16 GPIO56 : 1 ;
  4470F                    // 24 GPIO56
  4471F  Uint16 GPIO57 : 1 ;
  4472F                    // 25 GPIO57
  4473F  Uint16 GPIO58 : 1 ;
  4474F                    // 26 GPIO58
  4475F  Uint16 GPIO59 : 1 ;
  4476F                    // 27 GPIO59
  4477F  Uint16 GPIO60 : 1 ;
  4478F                    // 28 GPIO60
  4479F  Uint16 GPIO61 : 1 ;
  4480F                    // 29 GPIO61
  4481F  Uint16 GPIO62 : 1 ;
  4482F                    // 30 GPIO62
  4483F  Uint16 GPIO63 : 1 ;
  4484F                    // 31 GPIO63
  4485F} GPBDAT_BITS ;
  4486F
  4487Ftypedef
  4488Fstruct GPCDAT_BITS
  4489F{                            // bits description
  4490F  Uint16 GPIO64 : 1 ;
  4491F                    // 0 GPIO64
  4492F  Uint16 GPIO65 : 1 ;
  4493F                    // 1 GPIO65
  4494F  Uint16 GPIO66 : 1 ;
  4495F                    // 2 GPIO66
  4496F  Uint16 GPIO67 : 1 ;
  4497F                    // 3 GPIO67
  4498F  Uint16 GPIO68 : 1 ;
  4499F                    // 4 GPIO68
  4500F  Uint16 GPIO69 : 1 ;
  4501F                    // 5 GPIO69
  4502F  Uint16 GPIO70 : 1 ;
  4503F                    // 6 GPIO70
  4504F  Uint16 GPIO71 : 1 ;
  4505F                    // 7 GPIO71
  4506F  Uint16 GPIO72 : 1 ;
  4507F                    // 8 GPIO72
  4508F  Uint16 GPIO73 : 1 ;
  4509F                    // 9 GPIO73
  4510F  Uint16 GPIO74 : 1 ;
  4511F                    // 10 GPIO74
  4512F  Uint16 GPIO75 : 1 ;
  4513F                    // 11 GPIO75
  4514F  Uint16 GPIO76 : 1 ;
  4515F                    // 12 GPIO76
  4516F  Uint16 GPIO77 : 1 ;
  4517F                    // 13 GPIO77
  4518F  Uint16 GPIO78 : 1 ;
  4519F                    // 14 GPIO78
  4520F  Uint16 GPIO79 : 1 ;
  4521F                    // 15 GPIO79
  4522F  Uint16 GPIO80 : 1 ;
  4523F                    // 16 GPIO80
  4524F  Uint16 GPIO81 : 1 ;
  4525F                    // 17 GPIO81
  4526F  Uint16 GPIO82 : 1 ;
  4527F                    // 18 GPIO82
  4528F  Uint16 GPIO83 : 1 ;
  4529F                    // 19 GPIO83
  4530F  Uint16 GPIO84 : 1 ;
  4531F                    // 20 GPIO84
  4532F  Uint16 GPIO85 : 1 ;
  4533F                    // 21 GPIO85
  4534F  Uint16 GPIO86 : 1 ;
  4535F                    // 22 GPIO86
  4536F  Uint16 GPIO87 : 1 ;
  4537F                    // 23 GPIO87
  4538F  Uint16 rsvd1 : 8 ;
  4539F                   // 31:24 reserved
  4540F} GPCDAT_BITS ;
  4541F
  4542Ftypedef
  4543Funion GPADAT_REG
  4544F{
  4545F  Uint32 all ;
  4546F  struct GPADAT_BITS bit ;
  4547F} GPADAT_REG ;
  4548F
  4549Ftypedef
  4550Funion GPBDAT_REG
  4551F{
  4552F  Uint32 all ;
  4553F  struct GPBDAT_BITS bit ;
  4554F} GPBDAT_REG ;
  4555F
  4556Ftypedef
  4557Funion GPCDAT_REG
  4558F{
  4559F  Uint32 all ;
  4560F  struct GPCDAT_BITS bit ;
  4561F} GPCDAT_REG ;
  4562F//----------------------------------------------------
  4563F// GPIO Xint1/XINT2/XNMI select register bit definitions */
  4564F
  4565Ftypedef
  4566Fstruct GPIOXINT_BITS
  4567F{                              // bits description
  4568F  Uint16 GPIOSEL : 5 ;// 4:0 Select GPIO interrupt input source
  4569F  Uint16 rsvd1 : 11 ;// 15:5 reserved
  4570F} GPIOXINT_BITS ;
  4571F
  4572Ftypedef
  4573Funion GPIOXINT_REG
  4574F{
  4575F  Uint16 all ;
  4576F  struct GPIOXINT_BITS bit ;
  4577F} GPIOXINT_REG ;
  4578F
  4579Ftypedef
  4580Fstruct GPIO_CTRL_REGS
  4581F{
  4582F  union GPACTRL_REG GPACTRL ; // GPIO A Control Register (GPIO0 to 31)
  4583F  union GPA1_REG GPAQSEL1 ; // GPIO A Qualifier Select 1 Register (GPIO0 to 15)
  4584F  union GPA2_REG GPAQSEL2 ; // GPIO A Qualifier Select 2 Register (GPIO16 to 31)
  4585F  union GPA1_REG GPAMUX1 ; // GPIO A Mux 1 Register (GPIO0 to 15)
  4586F  union GPA2_REG GPAMUX2 ; // GPIO A Mux 2 Register (GPIO16 to 31)
  4587F  union GPADAT_REG GPADIR ; // GPIO A Direction Register (GPIO0 to 31)
  4588F  union GPADAT_REG GPAPUD ; // GPIO A Pull Up Disable Register (GPIO0 to 31)
  4589F  Uint32 rsvd1 ;
  4590F  union GPBCTRL_REG GPBCTRL ; // GPIO B Control Register (GPIO32 to 63)
  4591F  union GPB1_REG GPBQSEL1 ; // GPIO B Qualifier Select 1 Register (GPIO32 to 47)
  4592F  union GPB2_REG GPBQSEL2 ; // GPIO B Qualifier Select 2 Register (GPIO48 to 63)
  4593F  union GPB1_REG GPBMUX1 ; // GPIO B Mux 1 Register (GPIO32 to 47)
  4594F  union GPB2_REG GPBMUX2 ; // GPIO B Mux 2 Register (GPIO48 to 63)
  4595F  union GPBDAT_REG GPBDIR ; // GPIO B Direction Register (GPIO32 to 63)
  4596F  union GPBDAT_REG GPBPUD ; // GPIO B Pull Up Disable Register (GPIO32 to 63)
  4597F  Uint16 rsvd2 [ 8 ] ;
  4598F  union GPC1_REG GPCMUX1 ; // GPIO C Mux 1 Register (GPIO64 to 79)
  4599F  union GPC2_REG GPCMUX2 ; // GPIO C Mux 2 Register (GPIO80 to 95)
  4600F  union GPCDAT_REG GPCDIR ; // GPIO C Direction Register (GPIO64 to 95)
  4601F  union GPCDAT_REG GPCPUD ; // GPIO C Pull Up Disable Register (GPIO64 to 95)
  4602F} GPIO_CTRL_REGS ;
  4603F
  4604Ftypedef
  4605Fstruct GPIO_DATA_REGS
  4606F{
  4607F  union GPADAT_REG GPADAT ; // GPIO Data Register (GPIO0 to 31)
  4608F  union GPADAT_REG GPASET ; // GPIO Data Set Register (GPIO0 to 31)
  4609F  union GPADAT_REG GPACLEAR ; // GPIO Data Clear Register (GPIO0 to 31)
  4610F  union GPADAT_REG GPATOGGLE ; // GPIO Data Toggle Register (GPIO0 to 31)
  4611F  union GPBDAT_REG GPBDAT ; // GPIO Data Register (GPIO32 to 63)
  4612F  union GPBDAT_REG GPBSET ; // GPIO Data Set Register (GPIO32 to 63)
  4613F  union GPBDAT_REG GPBCLEAR ; // GPIO Data Clear Register (GPIO32 to 63)
  4614F  union GPBDAT_REG GPBTOGGLE ; // GPIO Data Toggle Register (GPIO32 to 63)
  4615F  union GPCDAT_REG GPCDAT ; // GPIO Data Register (GPIO64 to 95)
  4616F  union GPCDAT_REG GPCSET ; // GPIO Data Set Register (GPIO64 to 95)
  4617F  union GPCDAT_REG GPCCLEAR ; // GPIO Data Clear Register (GPIO64 to 95)
  4618F  union GPCDAT_REG GPCTOGGLE ; // GPIO Data Toggle Register (GPIO64 to 95)
  4619F  Uint16 rsvd1 [ 8 ] ;
  4620F} GPIO_DATA_REGS ;
  4621F
  4622Ftypedef
  4623Fstruct GPIO_INT_REGS
  4624F{
  4625F  union GPIOXINT_REG GPIOXINT1SEL ; // XINT1 GPIO Input Selection
  4626F  union GPIOXINT_REG GPIOXINT2SEL ; // XINT2 GPIO Input Selection
  4627F  union GPIOXINT_REG GPIOXNMISEL ; // XNMI_Xint13 GPIO Input Selection
  4628F  union GPIOXINT_REG GPIOXINT3SEL ; // XINT3 GPIO Input Selection
  4629F  union GPIOXINT_REG GPIOXINT4SEL ; // XINT4 GPIO Input Selection
  4630F  union GPIOXINT_REG GPIOXINT5SEL ; // XINT5 GPIO Input Selection
  4631F  union GPIOXINT_REG GPIOXINT6SEL ; // XINT6 GPIO Input Selection
  4632F  union GPIOXINT_REG GPIOXINT7SEL ; // XINT7 GPIO Input Selection
  4633F  union GPADAT_REG GPIOLPMSEL ; // Low power modes GP I/O input select
  4634F} GPIO_INT_REGS ;
  4635F//---------------------------------------------------------------------------
  4636F// GPI/O External References & Function Declarations:
  4637F//
  4638F
  4639Fextern volatile struct GPIO_CTRL_REGS
  4640F  GpioCtrlRegs ;
  4641F
  4642Fextern volatile struct GPIO_DATA_REGS
  4643F  GpioDataRegs ;
  4644F
  4645Fextern volatile struct GPIO_INT_REGS
  4646F  GpioIntRegs ;
  4647F       // end of DSP2833x_GPIO_H definition
  4648F//===========================================================================
  4649F// End of file.
  4650F//===========================================================================
  4651F 
  4652F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Gpio.h*/
  4653F/*   CLOSE_FILE Include File */
  4654F 
  4655F               // General Purpose I/O Registers
  4656F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_I2c.h */
  4657F// TI File $Revision: /main/2 $
  4658F// Checkin $Date: March 22, 2007 10:40:22 $
  4659F//###########################################################################
  4660F//
  4661F// FILE: DSP2833x_I2c.h
  4662F//
  4663F// TITLE: DSP2833x Enhanced Quadrature Encoder Pulse Module
  4664F// Register Bit Definitions.
  4665F//
  4666F//###########################################################################
  4667F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  4668F// $Release Date: August 4, 2009 $
  4669F//###########################################################################
  4670F#ifndef DSP2833x_I2C_H
  4671F#define DSP2833x_I2C_H
  4672F//----------------------------------------------------
  4673F// I2C interrupt vector register bit definitions */
  4674F
  4675Fstruct I2CISRC_BITS
  4676F{                     // bits description
  4677F  Uint16 INTCODE : 3 ;
  4678F                     // 2:0 Interrupt code
  4679F  Uint16 rsvd1 : 13 ;
  4680F                    // 15:3 reserved
  4681F} ;
  4682F
  4683Funion I2CISRC_REG
  4684F{
  4685F  Uint16 all ;
  4686F  struct I2CISRC_BITS bit ;
  4687F} ;
  4688F//----------------------------------------------------
  4689F// I2C interrupt mask register bit definitions */
  4690F
  4691Fstruct I2CIER_BITS
  4692F{                    // bits description
  4693F  Uint16 ARBL : 1 ;
  4694F                  // 0 Arbitration lost interrupt
  4695F  Uint16 NACK : 1 ;
  4696F                  // 1 No ack interrupt
  4697F  Uint16 ARDY : 1 ;
  4698F                  // 2 Register access ready interrupt
  4699F  Uint16 RRDY : 1 ;
  4700F                  // 3 Recieve data ready interrupt
  4701F  Uint16 XRDY : 1 ;
  4702F                  // 4 Transmit data ready interrupt
  4703F  Uint16 SCD : 1 ;
  4704F                 // 5 Stop condition detection
  4705F  Uint16 AAS : 1 ;
  4706F                 // 6 Address as slave
  4707F  Uint16 rsvd : 9 ;
  4708F                  // 15:7 reserved
  4709F} ;
  4710F
  4711Funion I2CIER_REG
  4712F{
  4713F  Uint16 all ;
  4714F  struct I2CIER_BITS bit ;
  4715F} ;
  4716F//----------------------------------------------------
  4717F// I2C status register bit definitions */
  4718F
  4719Fstruct I2CSTR_BITS
  4720F{                    // bits description
  4721F  Uint16 ARBL : 1 ;
  4722F                  // 0 Arbitration lost interrupt
  4723F  Uint16 NACK : 1 ;
  4724F                  // 1 No ack interrupt
  4725F  Uint16 ARDY : 1 ;
  4726F                  // 2 Register access ready interrupt
  4727F  Uint16 RRDY : 1 ;
  4728F                  // 3 Recieve data ready interrupt
  4729F  Uint16 XRDY : 1 ;
  4730F                  // 4 Transmit data ready interrupt
  4731F  Uint16 SCD : 1 ;
  4732F                 // 5 Stop condition detection
  4733F  Uint16 rsvd1 : 2 ;
  4734F                   // 7:6 reserved
  4735F  Uint16 AD0 : 1 ;
  4736F                 // 8 Address Zero
  4737F  Uint16 AAS : 1 ;
  4738F                 // 9 Address as slave
  4739F  Uint16 XSMT : 1 ;
  4740F                  // 10 XMIT shift empty
  4741F  Uint16 RSFULL : 1 ;
  4742F                    // 11 Recieve shift full
  4743F  Uint16 BB : 1 ;
  4744F                // 12 Bus busy
  4745F  Uint16 NACKSNT : 1 ;
  4746F                     // 13 A no ack sent
  4747F  Uint16 SDIR : 1 ;
  4748F                  // 14 Slave direction
  4749F  Uint16 rsvd2 : 1 ;
  4750F                   // 15 reserved
  4751F} ;
  4752F
  4753Funion I2CSTR_REG
  4754F{
  4755F  Uint16 all ;
  4756F  struct I2CSTR_BITS bit ;
  4757F} ;
  4758F//----------------------------------------------------
  4759F// I2C mode control register bit definitions */
  4760F
  4761Fstruct I2CMDR_BITS
  4762F{                    // bits description
  4763F  Uint16 BC : 3 ;
  4764F                // 2:0 Bit count
  4765F  Uint16 FDF : 1 ;
  4766F                 // 3 Free data format
  4767F  Uint16 STB : 1 ;
  4768F                 // 4 Start byte
  4769F  Uint16 IRS : 1 ;
  4770F                 // 5 I2C Reset not
  4771F  Uint16 DLB : 1 ;
  4772F                 // 6 Digital loopback
  4773F  Uint16 RM : 1 ;
  4774F                // 7 Repeat mode
  4775F  Uint16 XA : 1 ;
  4776F                // 8 Expand address
  4777F  Uint16 TRX : 1 ;
  4778F                 // 9 Transmitter/reciever
  4779F  Uint16 MST : 1 ;
  4780F                 // 10 Master/slave
  4781F  Uint16 STP : 1 ;
  4782F                 // 11 Stop condition
  4783F  Uint16 rsvd1 : 1 ;
  4784F                   // 12 reserved
  4785F  Uint16 STT : 1 ;
  4786F                 // 13 Start condition
  4787F  Uint16 FREE : 1 ;
  4788F                  // 14 Emulation mode
  4789F  Uint16 NACKMOD : 1 ;
  4790F                     // 15 No Ack mode
  4791F} ;
  4792F
  4793Funion I2CMDR_REG
  4794F{
  4795F  Uint16 all ;
  4796F  struct I2CMDR_BITS bit ;
  4797F} ;
  4798F//----------------------------------------------------
  4799F// I2C pre-scaler register bit definitions */
  4800F
  4801Fstruct I2CPSC_BITS
  4802F{                    // bits description
  4803F  Uint16 IPSC : 8 ;
  4804F                  // 7:0 pre-scaler
  4805F  Uint16 rsvd1 : 8 ;
  4806F                   // 15:8 reserved
  4807F} ;
  4808F
  4809Funion I2CPSC_REG
  4810F{
  4811F  Uint16 all ;
  4812F  struct I2CPSC_BITS bit ;
  4813F} ;
  4814F//----------------------------------------------------
  4815F// TX FIFO control register bit definitions */
  4816F
  4817Fstruct I2CFFTX_BITS
  4818F{                     // bits description
  4819F  Uint16 TXFFIL : 5 ;
  4820F                    // 4:0 FIFO interrupt level
  4821F  Uint16 TXFFIENA : 1 ;
  4822F                      // 5 FIFO interrupt enable/disable
  4823F  Uint16 TXFFINTCLR : 1 ;
  4824F                        // 6 FIFO clear
  4825F  Uint16 TXFFINT : 1 ;
  4826F                     // 7 FIFO interrupt flag
  4827F  Uint16 TXFFST : 5 ;
  4828F                    // 12:8 FIFO level status
  4829F  Uint16 TXFFRST : 1 ;
  4830F                     // 13 FIFO reset
  4831F  Uint16 I2CFFEN : 1 ;
  4832F                     // 14 enable/disable TX & RX FIFOs
  4833F  Uint16 rsvd1 : 1 ;
  4834F                   // 15 reserved
  4835F} ;
  4836F
  4837Funion I2CFFTX_REG
  4838F{
  4839F  Uint16 all ;
  4840F  struct I2CFFTX_BITS bit ;
  4841F} ;
  4842F//----------------------------------------------------
  4843F// RX FIFO control register bit definitions */
  4844F
  4845Fstruct I2CFFRX_BITS
  4846F{                     // bits description
  4847F  Uint16 RXFFIL : 5 ;
  4848F                    // 4:0 FIFO interrupt level
  4849F  Uint16 RXFFIENA : 1 ;
  4850F                      // 5 FIFO interrupt enable/disable
  4851F  Uint16 RXFFINTCLR : 1 ;
  4852F                        // 6 FIFO clear
  4853F  Uint16 RXFFINT : 1 ;
  4854F                     // 7 FIFO interrupt flag
  4855F  Uint16 RXFFST : 5 ;
  4856F                    // 12:8 FIFO level
  4857F  Uint16 RXFFRST : 1 ;
  4858F                     // 13 FIFO reset
  4859F  Uint16 rsvd1 : 2 ;
  4860F                   // 15:14 reserved
  4861F} ;
  4862F
  4863Funion I2CFFRX_REG
  4864F{
  4865F  Uint16 all ;
  4866F  struct I2CFFRX_BITS bit ;
  4867F} ;
  4868F//----------------------------------------------------
  4869F
  4870Fstruct I2C_REGS
  4871F{
  4872F  Uint16 I2COAR ; // Own address register
  4873F  union I2CIER_REG I2CIER ; // Interrupt enable
  4874F  union I2CSTR_REG I2CSTR ; // Interrupt status
  4875F  Uint16 I2CCLKL ; // Clock divider low
  4876F  Uint16 I2CCLKH ; // Clock divider high
  4877F  Uint16 I2CCNT ; // Data count
  4878F  Uint16 I2CDRR ; // Data recieve
  4879F  Uint16 I2CSAR ; // Slave address
  4880F  Uint16 I2CDXR ; // Data transmit
  4881F  union I2CMDR_REG I2CMDR ; // Mode
  4882F  union I2CISRC_REG I2CISRC ; // Interrupt source
  4883F  Uint16 rsvd1 ; // reserved
  4884F  union I2CPSC_REG I2CPSC ; // Pre-scaler
  4885F  Uint16 rsvd2 [ 19 ] ;
  4886F                     // reserved
  4887F  union I2CFFTX_REG I2CFFTX ; // Transmit FIFO
  4888F  union I2CFFRX_REG I2CFFRX ; // Recieve FIFO
  4889F} ;
  4890F//---------------------------------------------------------------------------
  4891F// External References & Function Declarations:
  4892F//
  4893F
  4894Fextern volatile struct I2C_REGS
  4895F  I2caRegs ;
  4896F       /* extern "C" */
  4897F       // end of DSP2833x_I2C_H definition
  4898F//===========================================================================
  4899F// End of file.
  4900F//===========================================================================
  4901F 
  4902F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_I2c.h*/
  4903F/*   CLOSE_FILE Include File */
  4904F 
  4905F                // I2C Registers
  4906F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_McBSP.h */
  4907F// TI File $Revision: /main/5 $
  4908F// Checkin $Date: May 14, 2008 16:30:31 $
  4909F//###########################################################################
  4910F//
  4911F// FILE: DSP2833x_Mcbsp.h
  4912F//
  4913F// TITLE: DSP2833x Device McBSP Register Definitions.
  4914F//
  4915F//###########################################################################
  4916F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  4917F// $Release Date: August 4, 2009 $
  4918F//###########################################################################
  4919F#ifndef DSP2833x_MCBSP_H
  4920F#define DSP2833x_MCBSP_H
  4921F//---------------------------------------------------------------------------
  4922F// McBSP Individual Register Bit Definitions:
  4923F//
  4924F// McBSP DRR2 register bit definitions:
  4925F
  4926Fstruct DRR2_BITS
  4927F{                  // bit description
  4928F  Uint16 HWLB : 8 ;
  4929F                  // 16:23 High word low byte
  4930F  Uint16 HWHB : 8 ;
  4931F                  // 24:31 High word high byte
  4932F} ;
  4933F
  4934Funion DRR2_REG
  4935F{
  4936F  Uint16 all ;
  4937F  struct DRR2_BITS bit ;
  4938F} ;
  4939F// McBSP DRR1 register bit definitions:
  4940F
  4941Fstruct DRR1_BITS
  4942F{                  // bit description
  4943F  Uint16 LWLB : 8 ;
  4944F                  // 16:23 Low word low byte
  4945F  Uint16 LWHB : 8 ;
  4946F                  // 24:31 low word high byte
  4947F} ;
  4948F
  4949Funion DRR1_REG
  4950F{
  4951F  Uint16 all ;
  4952F  struct DRR1_BITS bit ;
  4953F} ;
  4954F// McBSP DXR2 register bit definitions:
  4955F
  4956Fstruct DXR2_BITS
  4957F{                  // bit description
  4958F  Uint16 HWLB : 8 ;
  4959F                  // 16:23 High word low byte
  4960F  Uint16 HWHB : 8 ;
  4961F                  // 24:31 High word high byte
  4962F} ;
  4963F
  4964Funion DXR2_REG
  4965F{
  4966F  Uint16 all ;
  4967F  struct DXR2_BITS bit ;
  4968F} ;
  4969F// McBSP DXR1 register bit definitions:
  4970F
  4971Fstruct DXR1_BITS
  4972F{                  // bit description
  4973F  Uint16 LWLB : 8 ;
  4974F                  // 16:23 Low word low byte
  4975F  Uint16 LWHB : 8 ;
  4976F                  // 24:31 low word high byte
  4977F} ;
  4978F
  4979Funion DXR1_REG
  4980F{
  4981F  Uint16 all ;
  4982F  struct DXR1_BITS bit ;
  4983F} ;
  4984F// SPCR2 control register bit definitions:
  4985F
  4986Fstruct SPCR2_BITS
  4987F{                   // bit description
  4988F  Uint16 XRST : 1 ;
  4989F                  // 0 transmit reset
  4990F  Uint16 XRDY : 1 ;
  4991F                  // 1 transmit ready
  4992F  Uint16 XEMPTY : 1 ;
  4993F                    // 2 Transmit empty
  4994F  Uint16 XSYNCERR : 1 ;
  4995F                      // 3 Transmit syn errorINT flag
  4996F  Uint16 XINTM : 2 ;
  4997F                   // 5:4 Transmit interrupt types
  4998F  Uint16 GRST : 1 ;
  4999F                  // 6 CLKG reset
  5000F  Uint16 FRST : 1 ;
  5001F                  // 7 Frame sync reset
  5002F  Uint16 SOFT : 1 ;
  5003F                  // 8 SOFT bit
  5004F  Uint16 FREE : 1 ;
  5005F                  // 9 FREE bit
  5006F  Uint16 rsvd : 6 ;
  5007F                  // 15:10 reserved
  5008F} ;
  5009F
  5010Funion SPCR2_REG
  5011F{
  5012F  Uint16 all ;
  5013F  struct SPCR2_BITS bit ;
  5014F} ;
  5015F// SPCR1 control register bit definitions:
  5016F
  5017Fstruct SPCR1_BITS
  5018F{                   // bit description
  5019F  Uint16 RRST : 1 ;
  5020F                  // 0 Receive reset
  5021F  Uint16 RRDY : 1 ;
  5022F                  // 1 Receive ready
  5023F  Uint16 RFULL : 1 ;
  5024F                   // 2 Receive full
  5025F  Uint16 RSYNCERR : 1 ;
  5026F                      // 7 Receive syn error
  5027F  Uint16 RINTM : 2 ;
  5028F                   // 5:4 Receive interrupt types
  5029F  Uint16 ABIS : 1 ;
  5030F                  // 6 ABIS mode select
  5031F  Uint16 DXENA : 1 ;
  5032F                   // 7 DX hi-z enable
  5033F  Uint16 rsvd : 3 ;
  5034F                  // 10:8 reserved
  5035F  Uint16 CLKSTP : 2 ;
  5036F                    // 12:11 CLKSTOP mode bit
  5037F  Uint16 RJUST : 2 ;
  5038F                   // 13:14 Right justified
  5039F  Uint16 DLB : 1 ;
  5040F                 // 15 Digital loop back
  5041F} ;
  5042F
  5043Funion SPCR1_REG
  5044F{
  5045F  Uint16 all ;
  5046F  struct SPCR1_BITS bit ;
  5047F} ;
  5048F// RCR2 control register bit definitions:
  5049F
  5050Fstruct RCR2_BITS
  5051F{                  // bit description
  5052F  Uint16 RDATDLY : 2 ;
  5053F                     // 1:0 Receive data delay
  5054F  Uint16 RFIG : 1 ;
  5055F                  // 2 Receive frame sync ignore
  5056F  Uint16 RCOMPAND : 2 ;
  5057F                      // 4:3 Receive Companding Mode selects
  5058F  Uint16 RWDLEN2 : 3 ;
  5059F                     // 7:5 Receive word length
  5060F  Uint16 RFRLEN2 : 7 ;
  5061F                     // 14:8 Receive Frame sync
  5062F  Uint16 RPHASE : 1 ;
  5063F                    // 15 Receive Phase
  5064F} ;
  5065F
  5066Funion RCR2_REG
  5067F{
  5068F  Uint16 all ;
  5069F  struct RCR2_BITS bit ;
  5070F} ;
  5071F// RCR1 control register bit definitions:
  5072F
  5073Fstruct RCR1_BITS
  5074F{                  // bit description
  5075F  Uint16 rsvd1 : 5 ;
  5076F                   // 4:0 reserved
  5077F  Uint16 RWDLEN1 : 3 ;
  5078F                     // 7:5 Receive word length
  5079F  Uint16 RFRLEN1 : 7 ;
  5080F                     // 14:8 Receive frame length
  5081F  Uint16 rsvd2 : 1 ;
  5082F                   // 15 reserved
  5083F} ;
  5084F
  5085Funion RCR1_REG
  5086F{
  5087F  Uint16 all ;
  5088F  struct RCR1_BITS bit ;
  5089F} ;
  5090F// XCR2 control register bit definitions:
  5091F
  5092Fstruct XCR2_BITS
  5093F{                  // bit description
  5094F  Uint16 XDATDLY : 2 ;
  5095F                     // 1:0 Transmit data delay
  5096F  Uint16 XFIG : 1 ;
  5097F                  // 2 Transmit frame sync ignore
  5098F  Uint16 XCOMPAND : 2 ;
  5099F                      // 4:3 Transmit Companding Mode selects
  5100F  Uint16 XWDLEN2 : 3 ;
  5101F                     // 7:5 Transmit word length
  5102F  Uint16 XFRLEN2 : 7 ;
  5103F                     // 14:8 Transmit Frame sync
  5104F  Uint16 XPHASE : 1 ;
  5105F                    // 15 Transmit Phase
  5106F} ;
  5107F
  5108Funion XCR2_REG
  5109F{
  5110F  Uint16 all ;
  5111F  struct XCR2_BITS bit ;
  5112F} ;
  5113F// XCR1 control register bit definitions:
  5114F
  5115Fstruct XCR1_BITS
  5116F{                  // bit description
  5117F  Uint16 rsvd1 : 5 ;
  5118F                   // 4:0 reserved
  5119F  Uint16 XWDLEN1 : 3 ;
  5120F                     // 7:5 Transmit word length
  5121F  Uint16 XFRLEN1 : 7 ;
  5122F                     // 14:8 Transmit frame length
  5123F  Uint16 rsvd2 : 1 ;
  5124F                   // 15 reserved
  5125F} ;
  5126F
  5127Funion XCR1_REG
  5128F{
  5129F  Uint16 all ;
  5130F  struct XCR1_BITS bit ;
  5131F} ;
  5132F// SRGR2 Sample rate generator control register bit definitions:
  5133F
  5134Fstruct SRGR2_BITS
  5135F{                   // bit description
  5136F  Uint16 FPER : 12 ;
  5137F                   // 11:0 Frame period
  5138F  Uint16 FSGM : 1 ;
  5139F                  // 12 Frame sync generator mode
  5140F  Uint16 CLKSM : 1 ;
  5141F                   // 13 Sample rate generator mode
  5142F  Uint16 rsvd : 1 ;
  5143F                  // 14 reserved
  5144F  Uint16 GSYNC : 1 ;
  5145F                   // 15 CLKG sync
  5146F} ;
  5147F
  5148Funion SRGR2_REG
  5149F{
  5150F  Uint16 all ;
  5151F  struct SRGR2_BITS bit ;
  5152F} ;
  5153F// SRGR1 control register bit definitions:
  5154F
  5155Fstruct SRGR1_BITS
  5156F{                   // bit description
  5157F  Uint16 CLKGDV : 8 ;
  5158F                    // 7:0 CLKG divider
  5159F  Uint16 FWID : 8 ;
  5160F                  // 15:8 Frame width
  5161F} ;
  5162F
  5163Funion SRGR1_REG
  5164F{
  5165F  Uint16 all ;
  5166F  struct SRGR1_BITS bit ;
  5167F} ;
  5168F// MCR2 Multichannel control register bit definitions:
  5169F
  5170Fstruct MCR2_BITS
  5171F{                  // bit description
  5172F  Uint16 XMCM : 2 ;
  5173F                  // 1:0 Transmit multichannel mode
  5174F  Uint16 XCBLK : 3 ;
  5175F                   // 2:4 Transmit current block
  5176F  Uint16 XPABLK : 2 ;
  5177F                    // 5:6 Transmit partition A Block
  5178F  Uint16 XPBBLK : 2 ;
  5179F                    // 7:8 Transmit partition B Block
  5180F  Uint16 XMCME : 1 ;
  5181F                   // 9 Transmit multi-channel enhance mode
  5182F  Uint16 rsvd : 6 ;
  5183F                  // 15:10 reserved
  5184F} ;
  5185F
  5186Funion MCR2_REG
  5187F{
  5188F  Uint16 all ;
  5189F  struct MCR2_BITS bit ;
  5190F} ;
  5191F// MCR1 Multichannel control register bit definitions:
  5192F
  5193Fstruct MCR1_BITS
  5194F{                  // bit description
  5195F  Uint16 RMCM : 1 ;
  5196F                  // 0 Receive multichannel mode
  5197F  Uint16 rsvd : 1 ;
  5198F                  // 1 reserved
  5199F  Uint16 RCBLK : 3 ;
  5200F                   // 4:2 Receive current block
  5201F  Uint16 RPABLK : 2 ;
  5202F                    // 6:5 Receive partition A Block
  5203F  Uint16 RPBBLK : 2 ;
  5204F                    // 7:8 Receive partition B Block
  5205F  Uint16 RMCME : 1 ;
  5206F                   // 9 Receive multi-channel enhance mode
  5207F  Uint16 rsvd1 : 6 ;
  5208F                   // 15:10 reserved
  5209F} ;
  5210F
  5211Funion MCR1_REG
  5212F{
  5213F  Uint16 all ;
  5214F  struct MCR1_BITS bit ;
  5215F} ;
  5216F// RCERA control register bit definitions:
  5217F
  5218Fstruct RCERA_BITS
  5219F{                   // bit description
  5220F  Uint16 RCEA0 : 1 ;
  5221F                   // 0 Receive Channel enable bit
  5222F  Uint16 RCEA1 : 1 ;
  5223F                   // 1 Receive Channel enable bit
  5224F  Uint16 RCEA2 : 1 ;
  5225F                   // 2 Receive Channel enable bit
  5226F  Uint16 RCEA3 : 1 ;
  5227F                   // 3 Receive Channel enable bit
  5228F  Uint16 RCEA4 : 1 ;
  5229F                   // 4 Receive Channel enable bit
  5230F  Uint16 RCEA5 : 1 ;
  5231F                   // 5 Receive Channel enable bit
  5232F  Uint16 RCEA6 : 1 ;
  5233F                   // 6 Receive Channel enable bit
  5234F  Uint16 RCEA7 : 1 ;
  5235F                   // 7 Receive Channel enable bit
  5236F  Uint16 RCEA8 : 1 ;
  5237F                   // 8 Receive Channel enable bit
  5238F  Uint16 RCEA9 : 1 ;
  5239F                   // 9 Receive Channel enable bit
  5240F  Uint16 RCEA10 : 1 ;
  5241F                    // 10 Receive Channel enable bit
  5242F  Uint16 RCEA11 : 1 ;
  5243F                    // 11 Receive Channel enable bit
  5244F  Uint16 RCEA12 : 1 ;
  5245F                    // 12 Receive Channel enable bit
  5246F  Uint16 RCEA13 : 1 ;
  5247F                    // 13 Receive Channel enable bit
  5248F  Uint16 RCEA14 : 1 ;
  5249F                    // 14 Receive Channel enable bit
  5250F  Uint16 RCEA15 : 1 ;
  5251F                    // 15 Receive Channel enable bit
  5252F} ;
  5253F
  5254Funion RCERA_REG
  5255F{
  5256F  Uint16 all ;
  5257F  struct RCERA_BITS bit ;
  5258F} ;
  5259F// RCERB control register bit definitions:
  5260F
  5261Fstruct RCERB_BITS
  5262F{                   // bit description
  5263F  Uint16 RCEB0 : 1 ;
  5264F                   // 0 Receive Channel enable bit
  5265F  Uint16 RCEB1 : 1 ;
  5266F                   // 1 Receive Channel enable bit
  5267F  Uint16 RCEB2 : 1 ;
  5268F                   // 2 Receive Channel enable bit
  5269F  Uint16 RCEB3 : 1 ;
  5270F                   // 3 Receive Channel enable bit
  5271F  Uint16 RCEB4 : 1 ;
  5272F                   // 4 Receive Channel enable bit
  5273F  Uint16 RCEB5 : 1 ;
  5274F                   // 5 Receive Channel enable bit
  5275F  Uint16 RCEB6 : 1 ;
  5276F                   // 6 Receive Channel enable bit
  5277F  Uint16 RCEB7 : 1 ;
  5278F                   // 7 Receive Channel enable bit
  5279F  Uint16 RCEB8 : 1 ;
  5280F                   // 8 Receive Channel enable bit
  5281F  Uint16 RCEB9 : 1 ;
  5282F                   // 9 Receive Channel enable bit
  5283F  Uint16 RCEB10 : 1 ;
  5284F                    // 10 Receive Channel enable bit
  5285F  Uint16 RCEB11 : 1 ;
  5286F                    // 11 Receive Channel enable bit
  5287F  Uint16 RCEB12 : 1 ;
  5288F                    // 12 Receive Channel enable bit
  5289F  Uint16 RCEB13 : 1 ;
  5290F                    // 13 Receive Channel enable bit
  5291F  Uint16 RCEB14 : 1 ;
  5292F                    // 14 Receive Channel enable bit
  5293F  Uint16 RCEB15 : 1 ;
  5294F                    // 15 Receive Channel enable bit
  5295F} ;
  5296F
  5297Funion RCERB_REG
  5298F{
  5299F  Uint16 all ;
  5300F  struct RCERB_BITS bit ;
  5301F} ;
  5302F// XCERA control register bit definitions:
  5303F
  5304Fstruct XCERA_BITS
  5305F{                   // bit description
  5306F  Uint16 XCERA0 : 1 ;
  5307F                    // 0 Receive Channel enable bit
  5308F  Uint16 XCERA1 : 1 ;
  5309F                    // 1 Receive Channel enable bit
  5310F  Uint16 XCERA2 : 1 ;
  5311F                    // 2 Receive Channel enable bit
  5312F  Uint16 XCERA3 : 1 ;
  5313F                    // 3 Receive Channel enable bit
  5314F  Uint16 XCERA4 : 1 ;
  5315F                    // 4 Receive Channel enable bit
  5316F  Uint16 XCERA5 : 1 ;
  5317F                    // 5 Receive Channel enable bit
  5318F  Uint16 XCERA6 : 1 ;
  5319F                    // 6 Receive Channel enable bit
  5320F  Uint16 XCERA7 : 1 ;
  5321F                    // 7 Receive Channel enable bit
  5322F  Uint16 XCERA8 : 1 ;
  5323F                    // 8 Receive Channel enable bit
  5324F  Uint16 XCERA9 : 1 ;
  5325F                    // 9 Receive Channel enable bit
  5326F  Uint16 XCERA10 : 1 ;
  5327F                     // 10 Receive Channel enable bit
  5328F  Uint16 XCERA11 : 1 ;
  5329F                     // 11 Receive Channel enable bit
  5330F  Uint16 XCERA12 : 1 ;
  5331F                     // 12 Receive Channel enable bit
  5332F  Uint16 XCERA13 : 1 ;
  5333F                     // 13 Receive Channel enable bit
  5334F  Uint16 XCERA14 : 1 ;
  5335F                     // 14 Receive Channel enable bit
  5336F  Uint16 XCERA15 : 1 ;
  5337F                     // 15 Receive Channel enable bit
  5338F} ;
  5339F
  5340Funion XCERA_REG
  5341F{
  5342F  Uint16 all ;
  5343F  struct XCERA_BITS bit ;
  5344F} ;
  5345F// XCERB control register bit definitions:
  5346F
  5347Fstruct XCERB_BITS
  5348F{                   // bit description
  5349F  Uint16 XCERB0 : 1 ;
  5350F                    // 0 Receive Channel enable bit
  5351F  Uint16 XCERB1 : 1 ;
  5352F                    // 1 Receive Channel enable bit
  5353F  Uint16 XCERB2 : 1 ;
  5354F                    // 2 Receive Channel enable bit
  5355F  Uint16 XCERB3 : 1 ;
  5356F                    // 3 Receive Channel enable bit
  5357F  Uint16 XCERB4 : 1 ;
  5358F                    // 4 Receive Channel enable bit
  5359F  Uint16 XCERB5 : 1 ;
  5360F                    // 5 Receive Channel enable bit
  5361F  Uint16 XCERB6 : 1 ;
  5362F                    // 6 Receive Channel enable bit
  5363F  Uint16 XCERB7 : 1 ;
  5364F                    // 7 Receive Channel enable bit
  5365F  Uint16 XCERB8 : 1 ;
  5366F                    // 8 Receive Channel enable bit
  5367F  Uint16 XCERB9 : 1 ;
  5368F                    // 9 Receive Channel enable bit
  5369F  Uint16 XCERB10 : 1 ;
  5370F                     // 10 Receive Channel enable bit
  5371F  Uint16 XCERB11 : 1 ;
  5372F                     // 11 Receive Channel enable bit
  5373F  Uint16 XCERB12 : 1 ;
  5374F                     // 12 Receive Channel enable bit
  5375F  Uint16 XCERB13 : 1 ;
  5376F                     // 13 Receive Channel enable bit
  5377F  Uint16 XCERB14 : 1 ;
  5378F                     // 14 Receive Channel enable bit
  5379F  Uint16 XCERB15 : 1 ;
  5380F                     // 15 Receive Channel enable bit
  5381F} ;
  5382F
  5383Funion XCERB_REG
  5384F{
  5385F  Uint16 all ;
  5386F  struct XCERB_BITS bit ;
  5387F} ;
  5388F// PCR control register bit definitions:
  5389F
  5390Fstruct PCR_BITS
  5391F{                 // bit description
  5392F  Uint16 CLKRP : 1 ;
  5393F                   // 0 Receive Clock polarity
  5394F  Uint16 CLKXP : 1 ;
  5395F                   // 1 Transmit clock polarity
  5396F  Uint16 FSRP : 1 ;
  5397F                  // 2 Receive Frame synchronization polarity
  5398F  Uint16 FSXP : 1 ;
  5399F                  // 3 Transmit Frame synchronization polarity
  5400F  Uint16 DR_STAT : 1 ;
  5401F                     // 4 DR pin status - reserved for this McBSP
  5402F  Uint16 DX_STAT : 1 ;
  5403F                     // 5 DX pin status - reserved for this McBSP
  5404F  Uint16 CLKS_STAT : 1 ;
  5405F                       // 6 CLKS pin status - reserved for 28x -McBSP
  5406F  Uint16 SCLKME : 1 ;
  5407F                    // 7 Enhanced sample clock mode selection bit.
  5408F  Uint16 CLKRM : 1 ;
  5409F                   // 8 Receiver Clock Mode
  5410F  Uint16 CLKXM : 1 ;
  5411F                   // 9 Transmitter Clock Mode.
  5412F  Uint16 FSRM : 1 ;
  5413F                  // 10 Receive Frame Synchronization Mode
  5414F  Uint16 FSXM : 1 ;
  5415F                  // 11 Transmit Frame Synchronization Mode
  5416F  Uint16 RIOEN : 1 ;
  5417F                   // 12 General Purpose I/O Mode - reserved in this 28x-McBSP
  5418F  Uint16 XIOEN : 1 ;
  5419F                   // 13 General Purpose I/O Mode - reserved in this 28x-McBSP
  5420F  Uint16 IDEL_EN : 1 ;
  5421F                     // 14 reserved in this 28x-McBSP
  5422F  Uint16 rsvd : 1 ;// 15 reserved
  5423F} ;
  5424F
  5425Funion PCR_REG
  5426F{
  5427F  Uint16 all ;
  5428F  struct PCR_BITS bit ;
  5429F} ;
  5430F// RCERC control register bit definitions:
  5431F
  5432Fstruct RCERC_BITS
  5433F{                   // bit description
  5434F  Uint16 RCEC0 : 1 ;
  5435F                   // 0 Receive Channel enable bit
  5436F  Uint16 RCEC1 : 1 ;
  5437F                   // 1 Receive Channel enable bit
  5438F  Uint16 RCEC2 : 1 ;
  5439F                   // 2 Receive Channel enable bit
  5440F  Uint16 RCEC3 : 1 ;
  5441F                   // 3 Receive Channel enable bit
  5442F  Uint16 RCEC4 : 1 ;
  5443F                   // 4 Receive Channel enable bit
  5444F  Uint16 RCEC5 : 1 ;
  5445F                   // 5 Receive Channel enable bit
  5446F  Uint16 RCEC6 : 1 ;
  5447F                   // 6 Receive Channel enable bit
  5448F  Uint16 RCEC7 : 1 ;
  5449F                   // 7 Receive Channel enable bit
  5450F  Uint16 RCEC8 : 1 ;
  5451F                   // 8 Receive Channel enable bit
  5452F  Uint16 RCEC9 : 1 ;
  5453F                   // 9 Receive Channel enable bit
  5454F  Uint16 RCEC10 : 1 ;
  5455F                    // 10 Receive Channel enable bit
  5456F  Uint16 RCEC11 : 1 ;
  5457F                    // 11 Receive Channel enable bit
  5458F  Uint16 RCEC12 : 1 ;
  5459F                    // 12 Receive Channel enable bit
  5460F  Uint16 RCEC13 : 1 ;
  5461F                    // 13 Receive Channel enable bit
  5462F  Uint16 RCEC14 : 1 ;
  5463F                    // 14 Receive Channel enable bit
  5464F  Uint16 RCEC15 : 1 ;
  5465F                    // 15 Receive Channel enable bit
  5466F} ;
  5467F
  5468Funion RCERC_REG
  5469F{
  5470F  Uint16 all ;
  5471F  struct RCERC_BITS bit ;
  5472F} ;
  5473F// RCERD control register bit definitions:
  5474F
  5475Fstruct RCERD_BITS
  5476F{                   // bit description
  5477F  Uint16 RCED0 : 1 ;
  5478F                   // 0 Receive Channel enable bit
  5479F  Uint16 RCED1 : 1 ;
  5480F                   // 1 Receive Channel enable bit
  5481F  Uint16 RCED2 : 1 ;
  5482F                   // 2 Receive Channel enable bit
  5483F  Uint16 RCED3 : 1 ;
  5484F                   // 3 Receive Channel enable bit
  5485F  Uint16 RCED4 : 1 ;
  5486F                   // 4 Receive Channel enable bit
  5487F  Uint16 RCED5 : 1 ;
  5488F                   // 5 Receive Channel enable bit
  5489F  Uint16 RCED6 : 1 ;
  5490F                   // 6 Receive Channel enable bit
  5491F  Uint16 RCED7 : 1 ;
  5492F                   // 7 Receive Channel enable bit
  5493F  Uint16 RCED8 : 1 ;
  5494F                   // 8 Receive Channel enable bit
  5495F  Uint16 RCED9 : 1 ;
  5496F                   // 9 Receive Channel enable bit
  5497F  Uint16 RCED10 : 1 ;
  5498F                    // 10 Receive Channel enable bit
  5499F  Uint16 RCED11 : 1 ;
  5500F                    // 11 Receive Channel enable bit
  5501F  Uint16 RCED12 : 1 ;
  5502F                    // 12 Receive Channel enable bit
  5503F  Uint16 RCED13 : 1 ;
  5504F                    // 13 Receive Channel enable bit
  5505F  Uint16 RCED14 : 1 ;
  5506F                    // 14 Receive Channel enable bit
  5507F  Uint16 RCED15 : 1 ;
  5508F                    // 15 Receive Channel enable bit
  5509F} ;
  5510F
  5511Funion RCERD_REG
  5512F{
  5513F  Uint16 all ;
  5514F  struct RCERD_BITS bit ;
  5515F} ;
  5516F// XCERC control register bit definitions:
  5517F
  5518Fstruct XCERC_BITS
  5519F{                   // bit description
  5520F  Uint16 XCERC0 : 1 ;
  5521F                    // 0 Receive Channel enable bit
  5522F  Uint16 XCERC1 : 1 ;
  5523F                    // 1 Receive Channel enable bit
  5524F  Uint16 XCERC2 : 1 ;
  5525F                    // 2 Receive Channel enable bit
  5526F  Uint16 XCERC3 : 1 ;
  5527F                    // 3 Receive Channel enable bit
  5528F  Uint16 XCERC4 : 1 ;
  5529F                    // 4 Receive Channel enable bit
  5530F  Uint16 XCERC5 : 1 ;
  5531F                    // 5 Receive Channel enable bit
  5532F  Uint16 XCERC6 : 1 ;
  5533F                    // 6 Receive Channel enable bit
  5534F  Uint16 XCERC7 : 1 ;
  5535F                    // 7 Receive Channel enable bit
  5536F  Uint16 XCERC8 : 1 ;
  5537F                    // 8 Receive Channel enable bit
  5538F  Uint16 XCERC9 : 1 ;
  5539F                    // 9 Receive Channel enable bit
  5540F  Uint16 XCERC10 : 1 ;
  5541F                     // 10 Receive Channel enable bit
  5542F  Uint16 XCERC11 : 1 ;
  5543F                     // 11 Receive Channel enable bit
  5544F  Uint16 XCERC12 : 1 ;
  5545F                     // 12 Receive Channel enable bit
  5546F  Uint16 XCERC13 : 1 ;
  5547F                     // 13 Receive Channel enable bit
  5548F  Uint16 XCERC14 : 1 ;
  5549F                     // 14 Receive Channel enable bit
  5550F  Uint16 XCERC15 : 1 ;
  5551F                     // 15 Receive Channel enable bit
  5552F} ;
  5553F
  5554Funion XCERC_REG
  5555F{
  5556F  Uint16 all ;
  5557F  struct XCERC_BITS bit ;
  5558F} ;
  5559F// XCERD control register bit definitions:
  5560F
  5561Fstruct XCERD_BITS
  5562F{                   // bit description
  5563F  Uint16 XCERD0 : 1 ;
  5564F                    // 0 Receive Channel enable bit
  5565F  Uint16 XCERD1 : 1 ;
  5566F                    // 1 Receive Channel enable bit
  5567F  Uint16 XCERD2 : 1 ;
  5568F                    // 2 Receive Channel enable bit
  5569F  Uint16 XCERD3 : 1 ;
  5570F                    // 3 Receive Channel enable bit
  5571F  Uint16 XCERD4 : 1 ;
  5572F                    // 4 Receive Channel enable bit
  5573F  Uint16 XCERD5 : 1 ;
  5574F                    // 5 Receive Channel enable bit
  5575F  Uint16 XCERD6 : 1 ;
  5576F                    // 6 Receive Channel enable bit
  5577F  Uint16 XCERD7 : 1 ;
  5578F                    // 7 Receive Channel enable bit
  5579F  Uint16 XCERD8 : 1 ;
  5580F                    // 8 Receive Channel enable bit
  5581F  Uint16 XCERD9 : 1 ;
  5582F                    // 9 Receive Channel enable bit
  5583F  Uint16 XCERD10 : 1 ;
  5584F                     // 10 Receive Channel enable bit
  5585F  Uint16 XCERD11 : 1 ;
  5586F                     // 11 Receive Channel enable bit
  5587F  Uint16 XCERD12 : 1 ;
  5588F                     // 12 Receive Channel enable bit
  5589F  Uint16 XCERD13 : 1 ;
  5590F                     // 13 Receive Channel enable bit
  5591F  Uint16 XCERD14 : 1 ;
  5592F                     // 14 Receive Channel enable bit
  5593F  Uint16 XCERD15 : 1 ;
  5594F                     // 15 Receive Channel enable bit
  5595F} ;
  5596F
  5597Funion XCERD_REG
  5598F{
  5599F  Uint16 all ;
  5600F  struct XCERD_BITS bit ;
  5601F} ;
  5602F// RCERE control register bit definitions:
  5603F
  5604Fstruct RCERE_BITS
  5605F{                   // bit description
  5606F  Uint16 RCEE0 : 1 ;
  5607F                   // 0 Receive Channel enable bit
  5608F  Uint16 RCEE1 : 1 ;
  5609F                   // 1 Receive Channel enable bit
  5610F  Uint16 RCEE2 : 1 ;
  5611F                   // 2 Receive Channel enable bit
  5612F  Uint16 RCEE3 : 1 ;
  5613F                   // 3 Receive Channel enable bit
  5614F  Uint16 RCEE4 : 1 ;
  5615F                   // 4 Receive Channel enable bit
  5616F  Uint16 RCEE5 : 1 ;
  5617F                   // 5 Receive Channel enable bit
  5618F  Uint16 RCEE6 : 1 ;
  5619F                   // 6 Receive Channel enable bit
  5620F  Uint16 RCEE7 : 1 ;
  5621F                   // 7 Receive Channel enable bit
  5622F  Uint16 RCEE8 : 1 ;
  5623F                   // 8 Receive Channel enable bit
  5624F  Uint16 RCEE9 : 1 ;
  5625F                   // 9 Receive Channel enable bit
  5626F  Uint16 RCEE10 : 1 ;
  5627F                    // 10 Receive Channel enable bit
  5628F  Uint16 RCEE11 : 1 ;
  5629F                    // 11 Receive Channel enable bit
  5630F  Uint16 RCEE12 : 1 ;
  5631F                    // 12 Receive Channel enable bit
  5632F  Uint16 RCEE13 : 1 ;
  5633F                    // 13 Receive Channel enable bit
  5634F  Uint16 RCEE14 : 1 ;
  5635F                    // 14 Receive Channel enable bit
  5636F  Uint16 RCEE15 : 1 ;
  5637F                    // 15 Receive Channel enable bit
  5638F} ;
  5639F
  5640Funion RCERE_REG
  5641F{
  5642F  Uint16 all ;
  5643F  struct RCERE_BITS bit ;
  5644F} ;
  5645F// RCERF control register bit definitions:
  5646F
  5647Fstruct RCERF_BITS
  5648F{                   // bit description
  5649F  Uint16 RCEF0 : 1 ;
  5650F                   // 0 Receive Channel enable bit
  5651F  Uint16 RCEF1 : 1 ;
  5652F                   // 1 Receive Channel enable bit
  5653F  Uint16 RCEF2 : 1 ;
  5654F                   // 2 Receive Channel enable bit
  5655F  Uint16 RCEF3 : 1 ;
  5656F                   // 3 Receive Channel enable bit
  5657F  Uint16 RCEF4 : 1 ;
  5658F                   // 4 Receive Channel enable bit
  5659F  Uint16 RCEF5 : 1 ;
  5660F                   // 5 Receive Channel enable bit
  5661F  Uint16 RCEF6 : 1 ;
  5662F                   // 6 Receive Channel enable bit
  5663F  Uint16 RCEF7 : 1 ;
  5664F                   // 7 Receive Channel enable bit
  5665F  Uint16 RCEF8 : 1 ;
  5666F                   // 8 Receive Channel enable bit
  5667F  Uint16 RCEF9 : 1 ;
  5668F                   // 9 Receive Channel enable bit
  5669F  Uint16 RCEF10 : 1 ;
  5670F                    // 10 Receive Channel enable bit
  5671F  Uint16 RCEF11 : 1 ;
  5672F                    // 11 Receive Channel enable bit
  5673F  Uint16 RCEF12 : 1 ;
  5674F                    // 12 Receive Channel enable bit
  5675F  Uint16 RCEF13 : 1 ;
  5676F                    // 13 Receive Channel enable bit
  5677F  Uint16 RCEF14 : 1 ;
  5678F                    // 14 Receive Channel enable bit
  5679F  Uint16 RCEF15 : 1 ;
  5680F                    // 15 Receive Channel enable bit
  5681F} ;
  5682F
  5683Funion RCERF_REG
  5684F{
  5685F  Uint16 all ;
  5686F  struct RCERF_BITS bit ;
  5687F} ;
  5688F// XCERE control register bit definitions:
  5689F
  5690Fstruct XCERE_BITS
  5691F{                   // bit description
  5692F  Uint16 XCERE0 : 1 ;
  5693F                    // 0 Receive Channel enable bit
  5694F  Uint16 XCERE1 : 1 ;
  5695F                    // 1 Receive Channel enable bit
  5696F  Uint16 XCERE2 : 1 ;
  5697F                    // 2 Receive Channel enable bit
  5698F  Uint16 XCERE3 : 1 ;
  5699F                    // 3 Receive Channel enable bit
  5700F  Uint16 XCERE4 : 1 ;
  5701F                    // 4 Receive Channel enable bit
  5702F  Uint16 XCERE5 : 1 ;
  5703F                    // 5 Receive Channel enable bit
  5704F  Uint16 XCERE6 : 1 ;
  5705F                    // 6 Receive Channel enable bit
  5706F  Uint16 XCERE7 : 1 ;
  5707F                    // 7 Receive Channel enable bit
  5708F  Uint16 XCERE8 : 1 ;
  5709F                    // 8 Receive Channel enable bit
  5710F  Uint16 XCERE9 : 1 ;
  5711F                    // 9 Receive Channel enable bit
  5712F  Uint16 XCERE10 : 1 ;
  5713F                     // 10 Receive Channel enable bit
  5714F  Uint16 XCERE11 : 1 ;
  5715F                     // 11 Receive Channel enable bit
  5716F  Uint16 XCERE12 : 1 ;
  5717F                     // 12 Receive Channel enable bit
  5718F  Uint16 XCERE13 : 1 ;
  5719F                     // 13 Receive Channel enable bit
  5720F  Uint16 XCERE14 : 1 ;
  5721F                     // 14 Receive Channel enable bit
  5722F  Uint16 XCERE15 : 1 ;
  5723F                     // 15 Receive Channel enable bit
  5724F} ;
  5725F
  5726Funion XCERE_REG
  5727F{
  5728F  Uint16 all ;
  5729F  struct XCERE_BITS bit ;
  5730F} ;
  5731F// XCERF control register bit definitions:
  5732F
  5733Fstruct XCERF_BITS
  5734F{                   // bit description
  5735F  Uint16 XCERF0 : 1 ;
  5736F                    // 0 Receive Channel enable bit
  5737F  Uint16 XCERF1 : 1 ;
  5738F                    // 1 Receive Channel enable bit
  5739F  Uint16 XCERF2 : 1 ;
  5740F                    // 2 Receive Channel enable bit
  5741F  Uint16 XCERF3 : 1 ;
  5742F                    // 3 Receive Channel enable bit
  5743F  Uint16 XCERF4 : 1 ;
  5744F                    // 4 Receive Channel enable bit
  5745F  Uint16 XCERF5 : 1 ;
  5746F                    // 5 Receive Channel enable bit
  5747F  Uint16 XCERF6 : 1 ;
  5748F                    // 6 Receive Channel enable bit
  5749F  Uint16 XCERF7 : 1 ;
  5750F                    // 7 Receive Channel enable bit
  5751F  Uint16 XCERF8 : 1 ;
  5752F                    // 8 Receive Channel enable bit
  5753F  Uint16 XCERF9 : 1 ;
  5754F                    // 9 Receive Channel enable bit
  5755F  Uint16 XCERF10 : 1 ;
  5756F                     // 10 Receive Channel enable bit
  5757F  Uint16 XCERF11 : 1 ;
  5758F                     // 11 Receive Channel enable bit
  5759F  Uint16 XCERF12 : 1 ;
  5760F                     // 12 Receive Channel enable bit
  5761F  Uint16 XCERF13 : 1 ;
  5762F                     // 13 Receive Channel enable bit
  5763F  Uint16 XCERF14 : 1 ;
  5764F                     // 14 Receive Channel enable bit
  5765F  Uint16 XCERF15 : 1 ;
  5766F                     // 15 Receive Channel enable bit
  5767F} ;
  5768F
  5769Funion XCERF_REG
  5770F{
  5771F  Uint16 all ;
  5772F  struct XCERF_BITS bit ;
  5773F} ;
  5774F// RCERG control register bit definitions:
  5775F
  5776Fstruct RCERG_BITS
  5777F{                   // bit description
  5778F  Uint16 RCEG0 : 1 ;
  5779F                   // 0 Receive Channel enable bit
  5780F  Uint16 RCEG1 : 1 ;
  5781F                   // 1 Receive Channel enable bit
  5782F  Uint16 RCEG2 : 1 ;
  5783F                   // 2 Receive Channel enable bit
  5784F  Uint16 RCEG3 : 1 ;
  5785F                   // 3 Receive Channel enable bit
  5786F  Uint16 RCEG4 : 1 ;
  5787F                   // 4 Receive Channel enable bit
  5788F  Uint16 RCEG5 : 1 ;
  5789F                   // 5 Receive Channel enable bit
  5790F  Uint16 RCEG6 : 1 ;
  5791F                   // 6 Receive Channel enable bit
  5792F  Uint16 RCEG7 : 1 ;
  5793F                   // 7 Receive Channel enable bit
  5794F  Uint16 RCEG8 : 1 ;
  5795F                   // 8 Receive Channel enable bit
  5796F  Uint16 RCEG9 : 1 ;
  5797F                   // 9 Receive Channel enable bit
  5798F  Uint16 RCEG10 : 1 ;
  5799F                    // 10 Receive Channel enable bit
  5800F  Uint16 RCEG11 : 1 ;
  5801F                    // 11 Receive Channel enable bit
  5802F  Uint16 RCEG12 : 1 ;
  5803F                    // 12 Receive Channel enable bit
  5804F  Uint16 RCEG13 : 1 ;
  5805F                    // 13 Receive Channel enable bit
  5806F  Uint16 RCEG14 : 1 ;
  5807F                    // 14 Receive Channel enable bit
  5808F  Uint16 RCEG15 : 1 ;
  5809F                    // 15 Receive Channel enable bit
  5810F} ;
  5811F
  5812Funion RCERG_REG
  5813F{
  5814F  Uint16 all ;
  5815F  struct RCERG_BITS bit ;
  5816F} ;
  5817F// RCERH control register bit definitions:
  5818F
  5819Fstruct RCERH_BITS
  5820F{                   // bit description
  5821F  Uint16 RCEH0 : 1 ;
  5822F                   // 0 Receive Channel enable bit
  5823F  Uint16 RCEH1 : 1 ;
  5824F                   // 1 Receive Channel enable bit
  5825F  Uint16 RCEH2 : 1 ;
  5826F                   // 2 Receive Channel enable bit
  5827F  Uint16 RCEH3 : 1 ;
  5828F                   // 3 Receive Channel enable bit
  5829F  Uint16 RCEH4 : 1 ;
  5830F                   // 4 Receive Channel enable bit
  5831F  Uint16 RCEH5 : 1 ;
  5832F                   // 5 Receive Channel enable bit
  5833F  Uint16 RCEH6 : 1 ;
  5834F                   // 6 Receive Channel enable bit
  5835F  Uint16 RCEH7 : 1 ;
  5836F                   // 7 Receive Channel enable bit
  5837F  Uint16 RCEH8 : 1 ;
  5838F                   // 8 Receive Channel enable bit
  5839F  Uint16 RCEH9 : 1 ;
  5840F                   // 9 Receive Channel enable bit
  5841F  Uint16 RCEH10 : 1 ;
  5842F                    // 10 Receive Channel enable bit
  5843F  Uint16 RCEH11 : 1 ;
  5844F                    // 11 Receive Channel enable bit
  5845F  Uint16 RCEH12 : 1 ;
  5846F                    // 12 Receive Channel enable bit
  5847F  Uint16 RCEH13 : 1 ;
  5848F                    // 13 Receive Channel enable bit
  5849F  Uint16 RCEH14 : 1 ;
  5850F                    // 14 Receive Channel enable bit
  5851F  Uint16 RCEH15 : 1 ;
  5852F                    // 15 Receive Channel enable bit
  5853F} ;
  5854F
  5855Funion RCERH_REG
  5856F{
  5857F  Uint16 all ;
  5858F  struct RCERH_BITS bit ;
  5859F} ;
  5860F// XCERG control register bit definitions:
  5861F
  5862Fstruct XCERG_BITS
  5863F{                   // bit description
  5864F  Uint16 XCERG0 : 1 ;
  5865F                    // 0 Receive Channel enable bit
  5866F  Uint16 XCERG1 : 1 ;
  5867F                    // 1 Receive Channel enable bit
  5868F  Uint16 XCERG2 : 1 ;
  5869F                    // 2 Receive Channel enable bit
  5870F  Uint16 XCERG3 : 1 ;
  5871F                    // 3 Receive Channel enable bit
  5872F  Uint16 XCERG4 : 1 ;
  5873F                    // 4 Receive Channel enable bit
  5874F  Uint16 XCERG5 : 1 ;
  5875F                    // 5 Receive Channel enable bit
  5876F  Uint16 XCERG6 : 1 ;
  5877F                    // 6 Receive Channel enable bit
  5878F  Uint16 XCERG7 : 1 ;
  5879F                    // 7 Receive Channel enable bit
  5880F  Uint16 XCERG8 : 1 ;
  5881F                    // 8 Receive Channel enable bit
  5882F  Uint16 XCERG9 : 1 ;
  5883F                    // 9 Receive Channel enable bit
  5884F  Uint16 XCERG10 : 1 ;
  5885F                     // 10 Receive Channel enable bit
  5886F  Uint16 XCERG11 : 1 ;
  5887F                     // 11 Receive Channel enable bit
  5888F  Uint16 XCERG12 : 1 ;
  5889F                     // 12 Receive Channel enable bit
  5890F  Uint16 XCERG13 : 1 ;
  5891F                     // 13 Receive Channel enable bit
  5892F  Uint16 XCERG14 : 1 ;
  5893F                     // 14 Receive Channel enable bit
  5894F  Uint16 XCERG15 : 1 ;
  5895F                     // 15 Receive Channel enable bit
  5896F} ;
  5897F
  5898Funion XCERG_REG
  5899F{
  5900F  Uint16 all ;
  5901F  struct XCERG_BITS bit ;
  5902F} ;
  5903F// XCERH control register bit definitions:
  5904F
  5905Fstruct XCERH_BITS
  5906F{                   // bit description
  5907F  Uint16 XCEH0 : 1 ;
  5908F                   // 0 Receive Channel enable bit
  5909F  Uint16 XCEH1 : 1 ;
  5910F                   // 1 Receive Channel enable bit
  5911F  Uint16 XCEH2 : 1 ;
  5912F                   // 2 Receive Channel enable bit
  5913F  Uint16 XCEH3 : 1 ;
  5914F                   // 3 Receive Channel enable bit
  5915F  Uint16 XCEH4 : 1 ;
  5916F                   // 4 Receive Channel enable bit
  5917F  Uint16 XCEH5 : 1 ;
  5918F                   // 5 Receive Channel enable bit
  5919F  Uint16 XCEH6 : 1 ;
  5920F                   // 6 Receive Channel enable bit
  5921F  Uint16 XCEH7 : 1 ;
  5922F                   // 7 Receive Channel enable bit
  5923F  Uint16 XCEH8 : 1 ;
  5924F                   // 8 Receive Channel enable bit
  5925F  Uint16 XCEH9 : 1 ;
  5926F                   // 9 Receive Channel enable bit
  5927F  Uint16 XCEH10 : 1 ;
  5928F                    // 10 Receive Channel enable bit
  5929F  Uint16 XCEH11 : 1 ;
  5930F                    // 11 Receive Channel enable bit
  5931F  Uint16 XCEH12 : 1 ;
  5932F                    // 12 Receive Channel enable bit
  5933F  Uint16 XCEH13 : 1 ;
  5934F                    // 13 Receive Channel enable bit
  5935F  Uint16 XCEH14 : 1 ;
  5936F                    // 14 Receive Channel enable bit
  5937F  Uint16 XCEH15 : 1 ;
  5938F                    // 15 Receive Channel enable bit
  5939F} ;
  5940F
  5941Funion XCERH_REG
  5942F{
  5943F  Uint16 all ;
  5944F  struct XCERH_BITS bit ;
  5945F} ;
  5946F// McBSP Interrupt enable register for RINT/XINT
  5947F
  5948Fstruct MFFINT_BITS
  5949F{                    // bits description
  5950F  Uint16 XINT : 1 ;// 0 XINT interrupt enable
  5951F  Uint16 rsvd1 : 1 ;// 1 reserved
  5952F  Uint16 RINT : 1 ;// 2 RINT interrupt enable
  5953F  Uint16 rsvd2 : 13 ;// 15:3 reserved
  5954F} ;
  5955F
  5956Funion MFFINT_REG
  5957F{
  5958F  Uint16 all ;
  5959F  struct MFFINT_BITS bit ;
  5960F} ;
  5961F//---------------------------------------------------------------------------
  5962F// McBSP Register File:
  5963F//
  5964F
  5965Fstruct MCBSP_REGS
  5966F{
  5967F  union DRR2_REG DRR2 ; // MCBSP Data receive register bits 31-16
  5968F  union DRR1_REG DRR1 ; // MCBSP Data receive register bits 15-0
  5969F  union DXR2_REG DXR2 ; // MCBSP Data transmit register bits 31-16
  5970F  union DXR1_REG DXR1 ; // MCBSP Data transmit register bits 15-0
  5971F  union SPCR2_REG SPCR2 ; // MCBSP control register bits 31-16
  5972F  union SPCR1_REG SPCR1 ; // MCBSP control register bits 15-0
  5973F  union RCR2_REG RCR2 ; // MCBSP receive control register bits 31-16
  5974F  union RCR1_REG RCR1 ; // MCBSP receive control register bits 15-0
  5975F  union XCR2_REG XCR2 ; // MCBSP transmit control register bits 31-16
  5976F  union XCR1_REG XCR1 ; // MCBSP transmit control register bits 15-0
  5977F  union SRGR2_REG SRGR2 ; // MCBSP sample rate gen register bits 31-16
  5978F  union SRGR1_REG SRGR1 ; // MCBSP sample rate gen register bits 15-0
  5979F  union MCR2_REG MCR2 ; // MCBSP multichannel register bits 31-16
  5980F  union MCR1_REG MCR1 ; // MCBSP multichannel register bits 15-0
  5981F  union RCERA_REG RCERA ; // MCBSP Receive channel enable partition A
  5982F  union RCERB_REG RCERB ; // MCBSP Receive channel enable partition B
  5983F  union XCERA_REG XCERA ; // MCBSP Transmit channel enable partition A
  5984F  union XCERB_REG XCERB ; // MCBSP Transmit channel enable partition B
  5985F  union PCR_REG PCR ; // MCBSP Pin control register bits 15-0
  5986F  union RCERC_REG RCERC ; // MCBSP Receive channel enable partition C
  5987F  union RCERD_REG RCERD ; // MCBSP Receive channel enable partition D
  5988F  union XCERC_REG XCERC ; // MCBSP Transmit channel enable partition C
  5989F  union XCERD_REG XCERD ; // MCBSP Transmit channel enable partition D
  5990F  union RCERE_REG RCERE ; // MCBSP Receive channel enable partition E
  5991F  union RCERF_REG RCERF ; // MCBSP Receive channel enable partition F
  5992F  union XCERE_REG XCERE ; // MCBSP Transmit channel enable partition E
  5993F  union XCERF_REG XCERF ; // MCBSP Transmit channel enable partition F
  5994F  union RCERG_REG RCERG ; // MCBSP Receive channel enable partition G
  5995F  union RCERH_REG RCERH ; // MCBSP Receive channel enable partition H
  5996F  union XCERG_REG XCERG ; // MCBSP Transmit channel enable partition G
  5997F  union XCERH_REG XCERH ; // MCBSP Transmit channel enable partition H
  5998F  Uint16 rsvd1 [ 4 ] ;
  5999F                    // reserved
  6000F  union MFFINT_REG MFFINT ; // MCBSP Interrupt enable register for RINT/XINT
  6001F  Uint16 rsvd2 ; // reserved
  6002F} ;
  6003F//---------------------------------------------------------------------------
  6004F// McBSP External References & Function Declarations:
  6005F//
  6006F
  6007Fextern volatile struct MCBSP_REGS
  6008F  McbspaRegs ;
  6009F
  6010Fextern volatile struct MCBSP_REGS
  6011F  McbspbRegs ;
  6012F       /* extern "C" */
  6013F       // end of DSP2833x_MCBSP_H definition
  6014F//===========================================================================
  6015F// No more.
  6016F//===========================================================================
  6017F 
  6018F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_McBSP.h*/
  6019F/*   CLOSE_FILE Include File */
  6020F 
  6021F              // McBSP
  6022F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieCtrl.h */
  6023F// TI File $Revision: /main/1 $
  6024F// Checkin $Date: August 18, 2006 13:52:24 $
  6025F//###########################################################################
  6026F//
  6027F// FILE: DSP2833x_PieCtrl.h
  6028F//
  6029F// TITLE: DSP2833x Device PIE Control Register Definitions.
  6030F//
  6031F//###########################################################################
  6032F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6033F// $Release Date: August 4, 2009 $
  6034F//###########################################################################
  6035F#ifndef DSP2833x_PIE_CTRL_H
  6036F#define DSP2833x_PIE_CTRL_H
  6037F//---------------------------------------------------------------------------
  6038F// PIE Control Register Bit Definitions:
  6039F//
  6040F// PIECTRL: Register bit definitions:
  6041F
  6042Ftypedef
  6043Fstruct PIECTRL_BITS
  6044F{                            // bits description
  6045F  Uint16 ENPIE : 1 ;
  6046F                   // 0 Enable PIE block
  6047F  Uint16 PIEVECT : 15 ;
  6048F                      // 15:1 Fetched vector address
  6049F} PIECTRL_BITS ;
  6050F
  6051Ftypedef
  6052Funion PIECTRL_REG
  6053F{
  6054F  Uint16 all ;
  6055F  struct PIECTRL_BITS bit ;
  6056F} PIECTRL_REG ;
  6057F// PIEIER: Register bit definitions:
  6058F
  6059Ftypedef
  6060Fstruct PIEIER_BITS
  6061F{                            // bits description
  6062F  Uint16 INTx1 : 1 ;
  6063F                   // 0 INTx.1
  6064F  Uint16 INTx2 : 1 ;
  6065F                   // 1 INTx.2
  6066F  Uint16 INTx3 : 1 ;
  6067F                   // 2 INTx.3
  6068F  Uint16 INTx4 : 1 ;
  6069F                   // 3 INTx.4
  6070F  Uint16 INTx5 : 1 ;
  6071F                   // 4 INTx.5
  6072F  Uint16 INTx6 : 1 ;
  6073F                   // 5 INTx.6
  6074F  Uint16 INTx7 : 1 ;
  6075F                   // 6 INTx.7
  6076F  Uint16 INTx8 : 1 ;
  6077F                   // 7 INTx.8
  6078F  Uint16 rsvd : 8 ;
  6079F                  // 15:8 reserved
  6080F} PIEIER_BITS ;
  6081F
  6082Ftypedef
  6083Funion PIEIER_REG
  6084F{
  6085F  Uint16 all ;
  6086F  struct PIEIER_BITS bit ;
  6087F} PIEIER_REG ;
  6088F// PIEIFR: Register bit definitions:
  6089F
  6090Ftypedef
  6091Fstruct PIEIFR_BITS
  6092F{                            // bits description
  6093F  Uint16 INTx1 : 1 ;
  6094F                   // 0 INTx.1
  6095F  Uint16 INTx2 : 1 ;
  6096F                   // 1 INTx.2
  6097F  Uint16 INTx3 : 1 ;
  6098F                   // 2 INTx.3
  6099F  Uint16 INTx4 : 1 ;
  6100F                   // 3 INTx.4
  6101F  Uint16 INTx5 : 1 ;
  6102F                   // 4 INTx.5
  6103F  Uint16 INTx6 : 1 ;
  6104F                   // 5 INTx.6
  6105F  Uint16 INTx7 : 1 ;
  6106F                   // 6 INTx.7
  6107F  Uint16 INTx8 : 1 ;
  6108F                   // 7 INTx.8
  6109F  Uint16 rsvd : 8 ;
  6110F                  // 15:8 reserved
  6111F} PIEIFR_BITS ;
  6112F
  6113Ftypedef
  6114Funion PIEIFR_REG
  6115F{
  6116F  Uint16 all ;
  6117F  struct PIEIFR_BITS bit ;
  6118F} PIEIFR_REG ;
  6119F// PIEACK: Register bit definitions:
  6120F
  6121Ftypedef
  6122Fstruct PIEACK_BITS
  6123F{                            // bits description
  6124F  Uint16 ACK1 : 1 ;
  6125F                  // 0 Acknowledge PIE interrupt group 1
  6126F  Uint16 ACK2 : 1 ;
  6127F                  // 1 Acknowledge PIE interrupt group 2
  6128F  Uint16 ACK3 : 1 ;
  6129F                  // 2 Acknowledge PIE interrupt group 3
  6130F  Uint16 ACK4 : 1 ;
  6131F                  // 3 Acknowledge PIE interrupt group 4
  6132F  Uint16 ACK5 : 1 ;
  6133F                  // 4 Acknowledge PIE interrupt group 5
  6134F  Uint16 ACK6 : 1 ;
  6135F                  // 5 Acknowledge PIE interrupt group 6
  6136F  Uint16 ACK7 : 1 ;
  6137F                  // 6 Acknowledge PIE interrupt group 7
  6138F  Uint16 ACK8 : 1 ;
  6139F                  // 7 Acknowledge PIE interrupt group 8
  6140F  Uint16 ACK9 : 1 ;
  6141F                  // 8 Acknowledge PIE interrupt group 9
  6142F  Uint16 ACK10 : 1 ;
  6143F                   // 9 Acknowledge PIE interrupt group 10
  6144F  Uint16 ACK11 : 1 ;
  6145F                   // 10 Acknowledge PIE interrupt group 11
  6146F  Uint16 ACK12 : 1 ;
  6147F                   // 11 Acknowledge PIE interrupt group 12
  6148F  Uint16 rsvd : 4 ;
  6149F                  // 15:12 reserved
  6150F} PIEACK_BITS ;
  6151F
  6152Ftypedef
  6153Funion PIEACK_REG
  6154F{
  6155F  Uint16 all ;
  6156F  struct PIEACK_BITS bit ;
  6157F} PIEACK_REG ;
  6158F//---------------------------------------------------------------------------
  6159F// PIE Control Register File:
  6160F//
  6161F
  6162Ftypedef
  6163Fstruct PIE_CTRL_REGS
  6164F{
  6165F  union PIECTRL_REG PIECTRL ; // PIE control register
  6166F  union PIEACK_REG PIEACK ; // PIE acknowledge
  6167F  union PIEIER_REG PIEIER1 ; // PIE int1 IER register
  6168F  union PIEIFR_REG PIEIFR1 ; // PIE int1 IFR register
  6169F  union PIEIER_REG PIEIER2 ; // PIE INT2 IER register
  6170F  union PIEIFR_REG PIEIFR2 ; // PIE INT2 IFR register
  6171F  union PIEIER_REG PIEIER3 ; // PIE INT3 IER register
  6172F  union PIEIFR_REG PIEIFR3 ; // PIE INT3 IFR register
  6173F  union PIEIER_REG PIEIER4 ; // PIE INT4 IER register
  6174F  union PIEIFR_REG PIEIFR4 ; // PIE INT4 IFR register
  6175F  union PIEIER_REG PIEIER5 ; // PIE INT5 IER register
  6176F  union PIEIFR_REG PIEIFR5 ; // PIE INT5 IFR register
  6177F  union PIEIER_REG PIEIER6 ; // PIE INT6 IER register
  6178F  union PIEIFR_REG PIEIFR6 ; // PIE INT6 IFR register
  6179F  union PIEIER_REG PIEIER7 ; // PIE INT7 IER register
  6180F  union PIEIFR_REG PIEIFR7 ; // PIE INT7 IFR register
  6181F  union PIEIER_REG PIEIER8 ; // PIE INT8 IER register
  6182F  union PIEIFR_REG PIEIFR8 ; // PIE INT8 IFR register
  6183F  union PIEIER_REG PIEIER9 ; // PIE INT9 IER register
  6184F  union PIEIFR_REG PIEIFR9 ; // PIE INT9 IFR register
  6185F  union PIEIER_REG PIEIER10 ; // PIE int10 IER register
  6186F  union PIEIFR_REG PIEIFR10 ; // PIE int10 IFR register
  6187F  union PIEIER_REG PIEIER11 ; // PIE int11 IER register
  6188F  union PIEIFR_REG PIEIFR11 ; // PIE int11 IFR register
  6189F  union PIEIER_REG PIEIER12 ; // PIE int12 IER register
  6190F  union PIEIFR_REG PIEIFR12 ; // PIE int12 IFR register
  6191F} PIE_CTRL_REGS ;
  6192F#define PIEACK_GROUP1 0x0001
  6193F#define PIEACK_GROUP2 0x0002
  6194F#define PIEACK_GROUP3 0x0004
  6195F#define PIEACK_GROUP4 0x0008
  6196F#define PIEACK_GROUP5 0x0010
  6197F#define PIEACK_GROUP6 0x0020
  6198F#define PIEACK_GROUP7 0x0040
  6199F#define PIEACK_GROUP8 0x0080
  6200F#define PIEACK_GROUP9 0x0100
  6201F#define PIEACK_GROUP10 0x0200
  6202F#define PIEACK_GROUP11 0x0400
  6203F#define PIEACK_GROUP12 0x0800
  6204F//---------------------------------------------------------------------------
  6205F// PIE Control Registers External References & Function Declarations:
  6206F//
  6207F
  6208Fextern volatile struct PIE_CTRL_REGS
  6209F  PieCtrlRegs ;
  6210F       // end of DSP2833x_PIE_CTRL_H definition
  6211F//===========================================================================
  6212F// End of file.
  6213F//===========================================================================
  6214F 
  6215F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieCtrl.h*/
  6216F/*   CLOSE_FILE Include File */
  6217F 
  6218F            // PIE Control Registers
  6219F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieVect.h */
  6220F// TI File $Revision: /main/2 $
  6221F// Checkin $Date: March 16, 2007 09:00:21 $
  6222F//###########################################################################
  6223F//
  6224F// FILE: DSP2833x_PieVect.h
  6225F//
  6226F// TITLE: DSP2833x Devices PIE Vector Table Definitions.
  6227F//
  6228F//###########################################################################
  6229F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6230F// $Release Date: August 4, 2009 $
  6231F//###########################################################################
  6232F#ifndef DSP2833x_PIE_VECT_H
  6233F#define DSP2833x_PIE_VECT_H
  6234F//---------------------------------------------------------------------------
  6235F// PIE Interrupt Vector Table Definition:
  6236F//
  6237F// Create a user type called PINT (pointer to interrupt):
  6238F
  6239Ftypedef
  6240Fconst
  6241Finterrupt void ( * PINT ) ( void ) ;
  6242F// Define Vector Table:
  6243F
  6244Ftypedef
  6245Fstruct PIE_VECT_TABLE
  6246F{
  6247F// Reset is never fetched from this table.
  6248F// It will always be fetched from 0x3FFFC0 in
  6249F// boot ROM
  6250F  PINT PIE1_RESERVED ;
  6251F  PINT PIE2_RESERVED ;
  6252F  PINT PIE3_RESERVED ;
  6253F  PINT PIE4_RESERVED ;
  6254F  PINT PIE5_RESERVED ;
  6255F  PINT PIE6_RESERVED ;
  6256F  PINT PIE7_RESERVED ;
  6257F  PINT PIE8_RESERVED ;
  6258F  PINT PIE9_RESERVED ;
  6259F  PINT PIE10_RESERVED ;
  6260F  PINT PIE11_RESERVED ;
  6261F  PINT PIE12_RESERVED ;
  6262F  PINT PIE13_RESERVED ;
  6263F// Non-Peripheral Interrupts:
  6264F  PINT XINT13 ;    // XINT13 / CPU-Timer1
  6265F  PINT TINT2 ;    // CPU-Timer2
  6266F  PINT DATALOG ;    // Datalogging interrupt
  6267F  PINT RTOSINT ;    // RTOS interrupt
  6268F  PINT EMUINT ;    // Emulation interrupt
  6269F  PINT XNMI ;    // Non-maskable interrupt
  6270F  PINT ILLEGAL ;    // Illegal operation TRAP
  6271F  PINT USER1 ;    // User Defined trap 1
  6272F  PINT USER2 ;    // User Defined trap 2
  6273F  PINT USER3 ;    // User Defined trap 3
  6274F  PINT USER4 ;    // User Defined trap 4
  6275F  PINT USER5 ;    // User Defined trap 5
  6276F  PINT USER6 ;    // User Defined trap 6
  6277F  PINT USER7 ;    // User Defined trap 7
  6278F  PINT USER8 ;    // User Defined trap 8
  6279F  PINT USER9 ;    // User Defined trap 9
  6280F  PINT USER10 ;    // User Defined trap 10
  6281F  PINT USER11 ;    // User Defined trap 11
  6282F  PINT USER12 ;    // User Defined trap 12
  6283F// Group 1 PIE Peripheral Vectors:
  6284F  PINT SEQ1INT ;
  6285F  PINT SEQ2INT ;
  6286F  PINT rsvd1_3 ;
  6287F  PINT XINT1 ;
  6288F  PINT XINT2 ;
  6289F  PINT ADCINT ;    // ADC
  6290F  PINT TINT0 ;    // Timer 0
  6291F  PINT WAKEINT ;    // WD
  6292F// Group 2 PIE Peripheral Vectors:
  6293F  PINT EPWM1_TZINT ;    // EPWM-1
  6294F  PINT EPWM2_TZINT ;    // EPWM-2
  6295F  PINT EPWM3_TZINT ;    // EPWM-3
  6296F  PINT EPWM4_TZINT ;    // EPWM-4
  6297F  PINT EPWM5_TZINT ;    // EPWM-5
  6298F  PINT EPWM6_TZINT ;    // EPWM-6
  6299F  PINT rsvd2_7 ;
  6300F  PINT rsvd2_8 ;
  6301F// Group 3 PIE Peripheral Vectors:
  6302F  PINT EPWM1_INT ;    // EPWM-1
  6303F  PINT EPWM2_INT ;    // EPWM-2
  6304F  PINT EPWM3_INT ;    // EPWM-3
  6305F  PINT EPWM4_INT ;    // EPWM-4
  6306F  PINT EPWM5_INT ;    // EPWM-5
  6307F  PINT EPWM6_INT ;    // EPWM-6
  6308F  PINT rsvd3_7 ;
  6309F  PINT rsvd3_8 ;
  6310F// Group 4 PIE Peripheral Vectors:
  6311F  PINT ECAP1_INT ;    // ECAP-1
  6312F  PINT ECAP2_INT ;    // ECAP-2
  6313F  PINT ECAP3_INT ;    // ECAP-3
  6314F  PINT ECAP4_INT ;    // ECAP-4
  6315F  PINT ECAP5_INT ;    // ECAP-5
  6316F  PINT ECAP6_INT ;    // ECAP-6
  6317F  PINT rsvd4_7 ;
  6318F  PINT rsvd4_8 ;
  6319F// Group 5 PIE Peripheral Vectors:
  6320F  PINT EQEP1_INT ;    // EQEP-1
  6321F  PINT EQEP2_INT ;    // EQEP-2
  6322F  PINT rsvd5_3 ;
  6323F  PINT rsvd5_4 ;
  6324F  PINT rsvd5_5 ;
  6325F  PINT rsvd5_6 ;
  6326F  PINT rsvd5_7 ;
  6327F  PINT rsvd5_8 ;
  6328F// Group 6 PIE Peripheral Vectors:
  6329F  PINT SPIRXINTA ;    // SPI-A
  6330F  PINT SPITXINTA ;    // SPI-A
  6331F  PINT MRINTB ;    // McBSP-B
  6332F  PINT MXINTB ;    // McBSP-B
  6333F  PINT MRINTA ;        // McBSP-A
  6334F  PINT MXINTA ;    // McBSP-A
  6335F  PINT rsvd6_7 ;
  6336F  PINT rsvd6_8 ;
  6337F// Group 7 PIE Peripheral Vectors:
  6338F  PINT DINTCH1 ;    // DMA
  6339F  PINT DINTCH2 ;    // DMA
  6340F  PINT DINTCH3 ;    // DMA
  6341F  PINT DINTCH4 ;    // DMA
  6342F  PINT DINTCH5 ;    // DMA
  6343F  PINT DINTCH6 ;    // DMA
  6344F  PINT rsvd7_7 ;
  6345F  PINT rsvd7_8 ;
  6346F// Group 8 PIE Peripheral Vectors:
  6347F  PINT I2CINT1A ;    // I2C-A
  6348F  PINT I2CINT2A ;    // I2C-A
  6349F  PINT rsvd8_3 ;
  6350F  PINT rsvd8_4 ;
  6351F  PINT SCIRXINTC ;    // SCI-C
  6352F  PINT SCITXINTC ;    // SCI-C
  6353F  PINT rsvd8_7 ;
  6354F  PINT rsvd8_8 ;
  6355F// Group 9 PIE Peripheral Vectors:
  6356F  PINT SCIRXINTA ;    // SCI-A
  6357F  PINT SCITXINTA ;    // SCI-A
  6358F  PINT SCIRXINTB ;    // SCI-B
  6359F  PINT SCITXINTB ;    // SCI-B
  6360F  PINT ECAN0INTA ;    // eCAN-A
  6361F  PINT ECAN1INTA ;    // eCAN-A
  6362F  PINT ECAN0INTB ;    // eCAN-B
  6363F  PINT ECAN1INTB ;    // eCAN-B
  6364F// Group 10 PIE Peripheral Vectors:
  6365F  PINT rsvd10_1 ;
  6366F  PINT rsvd10_2 ;
  6367F  PINT rsvd10_3 ;
  6368F  PINT rsvd10_4 ;
  6369F  PINT rsvd10_5 ;
  6370F  PINT rsvd10_6 ;
  6371F  PINT rsvd10_7 ;
  6372F  PINT rsvd10_8 ;
  6373F// Group 11 PIE Peripheral Vectors:
  6374F  PINT rsvd11_1 ;
  6375F  PINT rsvd11_2 ;
  6376F  PINT rsvd11_3 ;
  6377F  PINT rsvd11_4 ;
  6378F  PINT rsvd11_5 ;
  6379F  PINT rsvd11_6 ;
  6380F  PINT rsvd11_7 ;
  6381F  PINT rsvd11_8 ;
  6382F// Group 12 PIE Peripheral Vectors:
  6383F  PINT XINT3 ;    // External interrupt
  6384F  PINT XINT4 ;
  6385F  PINT XINT5 ;
  6386F  PINT XINT6 ;
  6387F  PINT XINT7 ;
  6388F  PINT rsvd12_6 ;
  6389F  PINT LVF ;    // Latched overflow
  6390F  PINT LUF ;    // Latched underflow
  6391F} PIE_VECT_TABLE ;
  6392F//---------------------------------------------------------------------------
  6393F// PIE Interrupt Vector Table External References & Function Declarations:
  6394F//
  6395F
  6396Fextern struct PIE_VECT_TABLE
  6397F  PieVectTable ;
  6398F       // end of DSP2833x_PIE_VECT_H definition
  6399F//===========================================================================
  6400F// End of file.
  6401F//===========================================================================
  6402F 
  6403F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieVect.h*/
  6404F/*   CLOSE_FILE Include File */
  6405F 
  6406F            // PIE Vector Table
  6407F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Spi.h */
  6408F// TI File $Revision: /main/3 $
  6409F// Checkin $Date: April 17, 2008 11:08:27 $
  6410F//###########################################################################
  6411F//
  6412F// FILE: DSP2833x_Spi.h
  6413F//
  6414F// TITLE: DSP2833x Device SPI Register Definitions.
  6415F//
  6416F//###########################################################################
  6417F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6418F// $Release Date: August 4, 2009 $
  6419F//###########################################################################
  6420F#ifndef DSP2833x_SPI_H
  6421F#define DSP2833x_SPI_H
  6422F//---------------------------------------------------------------------------
  6423F// SPI Individual Register Bit Definitions:
  6424F//
  6425F// SPI FIFO Transmit register bit definitions:
  6426F
  6427Fstruct SPIFFTX_BITS
  6428F{                     // bit description
  6429F  Uint16 TXFFIL : 5 ;
  6430F                    // 4:0 Interrupt level
  6431F  Uint16 TXFFIENA : 1 ;
  6432F                      // 5 Interrupt enable
  6433F  Uint16 TXFFINTCLR : 1 ;
  6434F                        // 6 Clear INT flag
  6435F  Uint16 TXFFINT : 1 ;
  6436F                     // 7 INT flag
  6437F  Uint16 TXFFST : 5 ;
  6438F                    // 12:8 FIFO status
  6439F  Uint16 TXFIFO : 1 ;
  6440F                    // 13 FIFO reset
  6441F  Uint16 SPIFFENA : 1 ;
  6442F                      // 14 Enhancement enable
  6443F  Uint16 SPIRST : 1 ;
  6444F                    // 15 Reset SPI
  6445F} ;
  6446F
  6447Funion SPIFFTX_REG
  6448F{
  6449F  Uint16 all ;
  6450F  struct SPIFFTX_BITS bit ;
  6451F} ;
  6452F//--------------------------------------------
  6453F// SPI FIFO recieve register bit definitions:
  6454F//
  6455F//
  6456F
  6457Fstruct SPIFFRX_BITS
  6458F{                     // bits description
  6459F  Uint16 RXFFIL : 5 ;
  6460F                    // 4:0 Interrupt level
  6461F  Uint16 RXFFIENA : 1 ;
  6462F                      // 5 Interrupt enable
  6463F  Uint16 RXFFINTCLR : 1 ;
  6464F                        // 6 Clear INT flag
  6465F  Uint16 RXFFINT : 1 ;
  6466F                     // 7 INT flag
  6467F  Uint16 RXFFST : 5 ;
  6468F                    // 12:8 FIFO status
  6469F  Uint16 RXFIFORESET : 1 ;
  6470F                         // 13 FIFO reset
  6471F  Uint16 RXFFOVFCLR : 1 ;
  6472F                        // 14 Clear overflow
  6473F  Uint16 RXFFOVF : 1 ;
  6474F                     // 15 FIFO overflow
  6475F} ;
  6476F
  6477Funion SPIFFRX_REG
  6478F{
  6479F  Uint16 all ;
  6480F  struct SPIFFRX_BITS bit ;
  6481F} ;
  6482F//--------------------------------------------
  6483F// SPI FIFO control register bit definitions:
  6484F//
  6485F//
  6486F
  6487Fstruct SPIFFCT_BITS
  6488F{                     // bits description
  6489F  Uint16 TXDLY : 8 ;
  6490F                   // 7:0 FIFO transmit delay
  6491F  Uint16 rsvd : 8 ;
  6492F                  // 15:8 reserved
  6493F} ;
  6494F
  6495Funion SPIFFCT_REG
  6496F{
  6497F  Uint16 all ;
  6498F  struct SPIFFCT_BITS bit ;
  6499F} ;
  6500F//---------------------------------------------
  6501F// SPI configuration register bit definitions:
  6502F//
  6503F//
  6504F
  6505Fstruct SPICCR_BITS
  6506F{                    // bits description
  6507F  Uint16 SPICHAR : 4 ;
  6508F                     // 3:0 Character length control
  6509F  Uint16 SPILBK : 1 ;
  6510F                    // 4 Loop-back enable/disable
  6511F  Uint16 rsvd1 : 1 ;
  6512F                   // 5 reserved
  6513F  Uint16 CLKPOLARITY : 1 ;
  6514F                         // 6 Clock polarity
  6515F  Uint16 SPISWRESET : 1 ;
  6516F                        // 7 SPI SW Reset
  6517F  Uint16 rsvd2 : 8 ;
  6518F                   // 15:8 reserved
  6519F} ;
  6520F
  6521Funion SPICCR_REG
  6522F{
  6523F  Uint16 all ;
  6524F  struct SPICCR_BITS bit ;
  6525F} ;
  6526F//-------------------------------------------------
  6527F// SPI operation control register bit definitions:
  6528F//
  6529F//
  6530F
  6531Fstruct SPICTL_BITS
  6532F{                    // bits description
  6533F  Uint16 SPIINTENA : 1 ;
  6534F                       // 0 Interrupt enable
  6535F  Uint16 TALK : 1 ;
  6536F                  // 1 Master/Slave transmit enable
  6537F  Uint16 MASTER_SLAVE : 1 ;
  6538F                          // 2 Network control mode
  6539F  Uint16 CLK_PHASE : 1 ;
  6540F                       // 3 Clock phase select
  6541F  Uint16 OVERRUNINTENA : 1 ;
  6542F                           // 4 Overrun interrupt enable
  6543F  Uint16 rsvd : 11 ;
  6544F                   // 15:5 reserved
  6545F} ;
  6546F
  6547Funion SPICTL_REG
  6548F{
  6549F  Uint16 all ;
  6550F  struct SPICTL_BITS bit ;
  6551F} ;
  6552F//--------------------------------------
  6553F// SPI status register bit definitions:
  6554F//
  6555F//
  6556F
  6557Fstruct SPISTS_BITS
  6558F{                    // bits description
  6559F  Uint16 rsvd1 : 5 ;
  6560F                   // 4:0 reserved
  6561F  Uint16 BUFFULL_FLAG : 1 ;
  6562F                          // 5 SPI transmit buffer full flag
  6563F  Uint16 INT_FLAG : 1 ;
  6564F                      // 6 SPI interrupt flag
  6565F  Uint16 OVERRUN_FLAG : 1 ;
  6566F                          // 7 SPI reciever overrun flag
  6567F  Uint16 rsvd2 : 8 ;
  6568F                   // 15:8 reserved
  6569F} ;
  6570F
  6571Funion SPISTS_REG
  6572F{
  6573F  Uint16 all ;
  6574F  struct SPISTS_BITS bit ;
  6575F} ;
  6576F//------------------------------------------------
  6577F// SPI priority control register bit definitions:
  6578F//
  6579F//
  6580F
  6581Fstruct SPIPRI_BITS
  6582F{                    // bits description
  6583F  Uint16 rsvd1 : 4 ;
  6584F                   // 3:0 reserved
  6585F  Uint16 FREE : 1 ;
  6586F                  // 4 Free emulation mode control
  6587F  Uint16 SOFT : 1 ;
  6588F                  // 5 Soft emulation mode control
  6589F  Uint16 rsvd2 : 1 ;
  6590F                   // 6 reserved
  6591F  Uint16 rsvd3 : 9 ;
  6592F                   // 15:7 reserved
  6593F} ;
  6594F
  6595Funion SPIPRI_REG
  6596F{
  6597F  Uint16 all ;
  6598F  struct SPIPRI_BITS bit ;
  6599F} ;
  6600F//---------------------------------------------------------------------------
  6601F// SPI Register File:
  6602F//
  6603F
  6604Fstruct SPI_REGS
  6605F{
  6606F  union SPICCR_REG SPICCR ; // Configuration register
  6607F  union SPICTL_REG SPICTL ; // Operation control register
  6608F  union SPISTS_REG SPISTS ; // Status register
  6609F  Uint16 rsvd1 ; // reserved
  6610F  Uint16 SPIBRR ; // Baud Rate
  6611F  Uint16 rsvd2 ; // reserved
  6612F  Uint16 SPIRXEMU ; // Emulation buffer
  6613F  Uint16 SPIRXBUF ; // Serial input buffer
  6614F  Uint16 SPITXBUF ; // Serial output buffer
  6615F  Uint16 SPIDAT ; // Serial data
  6616F  union SPIFFTX_REG SPIFFTX ; // FIFO transmit register
  6617F  union SPIFFRX_REG SPIFFRX ; // FIFO recieve register
  6618F  union SPIFFCT_REG SPIFFCT ; // FIFO control register
  6619F  Uint16 rsvd3 [ 2 ] ;
  6620F                    // reserved
  6621F  union SPIPRI_REG SPIPRI ; // FIFO Priority control
  6622F} ;
  6623F//---------------------------------------------------------------------------
  6624F// SPI External References & Function Declarations:
  6625F//
  6626F
  6627Fextern volatile struct SPI_REGS
  6628F  SpiaRegs ;
  6629F       /* extern "C" */
  6630F       // end of DSP2833x_SPI_H definition
  6631F//===========================================================================
  6632F// End of file.
  6633F//===========================================================================
  6634F 
  6635F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Spi.h*/
  6636F/*   CLOSE_FILE Include File */
  6637F 
  6638F                // SPI Registers
  6639F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Sci.h */
  6640F// TI File $Revision: /main/2 $
  6641F// Checkin $Date: March 1, 2007 15:57:02 $
  6642F//###########################################################################
  6643F//
  6644F// FILE:        DSP2833x_Sci.h
  6645F//
  6646F// TITLE:       DSP2833x Device SCI Register Definitions.
  6647F//
  6648F//###########################################################################
  6649F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6650F// $Release Date: August 4, 2009 $
  6651F//###########################################################################
  6652F#ifndef DSP2833x_SCI_H
  6653F#define DSP2833x_SCI_H
  6654F//---------------------------------------------------------------------------
  6655F// SCI Individual Register Bit Definitions
  6656F//----------------------------------------------------------
  6657F// SCICCR communication control register bit definitions:
  6658F//
  6659F
  6660Fstruct SCICCR_BITS
  6661F{                    // bit description
  6662F  Uint16 SCICHAR : 3 ;
  6663F                     // 2:0 Character length control
  6664F  Uint16 ADDRIDLE_MODE : 1 ;
  6665F                           // 3 ADDR/IDLE Mode control
  6666F  Uint16 LOOPBKENA : 1 ;
  6667F                       // 4 Loop Back enable
  6668F  Uint16 PARITYENA : 1 ;
  6669F                       // 5 Parity enable
  6670F  Uint16 PARITY : 1 ;
  6671F                    // 6 Even or Odd Parity
  6672F  Uint16 STOPBITS : 1 ;
  6673F                      // 7 Number of Stop Bits
  6674F  Uint16 rsvd1 : 8 ;
  6675F                   // 15:8 reserved
  6676F} ;
  6677F
  6678Funion SCICCR_REG
  6679F{
  6680F  Uint16 all ;
  6681F  struct SCICCR_BITS bit ;
  6682F} ;
  6683F//-------------------------------------------
  6684F// SCICTL1 control register 1 bit definitions:
  6685F//
  6686F
  6687Fstruct SCICTL1_BITS
  6688F{                     // bit description
  6689F  Uint16 RXENA : 1 ;
  6690F                   // 0 SCI receiver enable
  6691F  Uint16 TXENA : 1 ;
  6692F                   // 1 SCI transmitter enable
  6693F  Uint16 SLEEP : 1 ;
  6694F                   // 2 SCI sleep
  6695F  Uint16 TXWAKE : 1 ;
  6696F                    // 3 Transmitter wakeup method
  6697F  Uint16 rsvd : 1 ;
  6698F                  // 4 reserved
  6699F  Uint16 SWRESET : 1 ;
  6700F                     // 5 Software reset
  6701F  Uint16 RXERRINTENA : 1 ;
  6702F                         // 6 Recieve interrupt enable
  6703F  Uint16 rsvd1 : 9 ;
  6704F                   // 15:7 reserved
  6705F} ;
  6706F
  6707Funion SCICTL1_REG
  6708F{
  6709F  Uint16 all ;
  6710F  struct SCICTL1_BITS bit ;
  6711F} ;
  6712F//---------------------------------------------
  6713F// SCICTL2 control register 2 bit definitions:
  6714F//
  6715F
  6716Fstruct SCICTL2_BITS
  6717F{                     // bit description
  6718F  Uint16 TXINTENA : 1 ;
  6719F                      // 0 Transmit interrupt enable
  6720F  Uint16 RXBKINTENA : 1 ;
  6721F                        // 1 Receiver-buffer break enable
  6722F  Uint16 rsvd : 4 ;
  6723F                  // 5:2 reserved
  6724F  Uint16 TXEMPTY : 1 ;
  6725F                     // 6 Transmitter empty flag
  6726F  Uint16 TXRDY : 1 ;
  6727F                   // 7 Transmitter ready flag
  6728F  Uint16 rsvd1 : 8 ;
  6729F                   // 15:8 reserved
  6730F} ;
  6731F
  6732Funion SCICTL2_REG
  6733F{
  6734F  Uint16 all ;
  6735F  struct SCICTL2_BITS bit ;
  6736F} ;
  6737F//---------------------------------------------------
  6738F// SCIRXST Receiver status register bit definitions:
  6739F//
  6740F
  6741Fstruct SCIRXST_BITS
  6742F{                     // bit description
  6743F  Uint16 rsvd : 1 ;
  6744F                  // 0 reserved
  6745F  Uint16 RXWAKE : 1 ;
  6746F                    // 1 Receiver wakeup detect flag
  6747F  Uint16 PE : 1 ;
  6748F                // 2 Parity error flag
  6749F  Uint16 OE : 1 ;
  6750F                // 3 Overrun error flag
  6751F  Uint16 FE : 1 ;
  6752F                // 4 Framing error flag
  6753F  Uint16 BRKDT : 1 ;
  6754F                   // 5 Break-detect flag
  6755F  Uint16 RXRDY : 1 ;
  6756F                   // 6 Receiver ready flag
  6757F  Uint16 RXERROR : 1 ;
  6758F                     // 7 Receiver error flag
  6759F} ;
  6760F
  6761Funion SCIRXST_REG
  6762F{
  6763F  Uint16 all ;
  6764F  struct SCIRXST_BITS bit ;
  6765F} ;
  6766F//----------------------------------------------------
  6767F// SCIRXBUF Receiver Data Buffer with FIFO bit definitions:
  6768F//
  6769F
  6770Fstruct SCIRXBUF_BITS
  6771F{                      // bits description
  6772F  Uint16 RXDT : 8 ;
  6773F                  // 7:0 Receive word
  6774F  Uint16 rsvd : 6 ;
  6775F                  // 13:8 reserved
  6776F  Uint16 SCIFFPE : 1 ;
  6777F                     // 14 SCI PE error in FIFO mode
  6778F  Uint16 SCIFFFE : 1 ;
  6779F                     // 15 SCI FE error in FIFO mode
  6780F} ;
  6781F
  6782Funion SCIRXBUF_REG
  6783F{
  6784F  Uint16 all ;
  6785F  struct SCIRXBUF_BITS bit ;
  6786F} ;
  6787F//--------------------------------------------------
  6788F// SCIPRI Priority control register bit definitions:
  6789F//
  6790F//
  6791F
  6792Fstruct SCIPRI_BITS
  6793F{                    // bit description
  6794F  Uint16 rsvd : 3 ;
  6795F                  // 2:0 reserved
  6796F  Uint16 FREE : 1 ;
  6797F                  // 3 Free emulation suspend mode
  6798F  Uint16 SOFT : 1 ;
  6799F                  // 4 Soft emulation suspend mode
  6800F  Uint16 rsvd1 : 3 ;
  6801F                   // 7:5 reserved
  6802F} ;
  6803F
  6804Funion SCIPRI_REG
  6805F{
  6806F  Uint16 all ;
  6807F  struct SCIPRI_BITS bit ;
  6808F} ;
  6809F//-------------------------------------------------
  6810F// SCI FIFO Transmit register bit definitions:
  6811F//
  6812F//
  6813F
  6814Fstruct SCIFFTX_BITS
  6815F{                     // bit description
  6816F  Uint16 TXFFIL : 5 ;
  6817F                    // 4:0 Interrupt level
  6818F  Uint16 TXFFIENA : 1 ;
  6819F                      // 5 Interrupt enable
  6820F  Uint16 TXFFINTCLR : 1 ;
  6821F                        // 6 Clear INT flag
  6822F  Uint16 TXFFINT : 1 ;
  6823F                     // 7 INT flag
  6824F  Uint16 TXFFST : 5 ;
  6825F                    // 12:8 FIFO status
  6826F  Uint16 TXFIFOXRESET : 1 ;
  6827F                          // 13 FIFO reset
  6828F  Uint16 SCIFFENA : 1 ;
  6829F                      // 14 Enhancement enable
  6830F  Uint16 SCIRST : 1 ;
  6831F                    // 15 SCI reset rx/tx channels
  6832F} ;
  6833F
  6834Funion SCIFFTX_REG
  6835F{
  6836F  Uint16 all ;
  6837F  struct SCIFFTX_BITS bit ;
  6838F} ;
  6839F//------------------------------------------------
  6840F// SCI FIFO recieve register bit definitions:
  6841F//
  6842F//
  6843F
  6844Fstruct SCIFFRX_BITS
  6845F{                     // bits description
  6846F  Uint16 RXFFIL : 5 ;
  6847F                    // 4:0 Interrupt level
  6848F  Uint16 RXFFIENA : 1 ;
  6849F                      // 5 Interrupt enable
  6850F  Uint16 RXFFINTCLR : 1 ;
  6851F                        // 6 Clear INT flag
  6852F  Uint16 RXFFINT : 1 ;
  6853F                     // 7 INT flag
  6854F  Uint16 RXFFST : 5 ;
  6855F                    // 12:8 FIFO status
  6856F  Uint16 RXFIFORESET : 1 ;
  6857F                         // 13 FIFO reset
  6858F  Uint16 RXFFOVRCLR : 1 ;
  6859F                        // 14 Clear overflow
  6860F  Uint16 RXFFOVF : 1 ;
  6861F                     // 15 FIFO overflow
  6862F} ;
  6863F
  6864Funion SCIFFRX_REG
  6865F{
  6866F  Uint16 all ;
  6867F  struct SCIFFRX_BITS bit ;
  6868F} ;
  6869F// SCI FIFO control register bit definitions:
  6870F
  6871Fstruct SCIFFCT_BITS
  6872F{                     // bits description
  6873F  Uint16 FFTXDLY : 8 ;
  6874F                     // 7:0 FIFO transmit delay
  6875F  Uint16 rsvd : 5 ;
  6876F                  // 12:8 reserved
  6877F  Uint16 CDC : 1 ;
  6878F                 // 13 Auto baud mode enable
  6879F  Uint16 ABDCLR : 1 ;
  6880F                    // 14 Auto baud clear
  6881F  Uint16 ABD : 1 ;
  6882F                 // 15 Auto baud detect
  6883F} ;
  6884F
  6885Funion SCIFFCT_REG
  6886F{
  6887F  Uint16 all ;
  6888F  struct SCIFFCT_BITS bit ;
  6889F} ;
  6890F//---------------------------------------------------------------------------
  6891F// SCI Register File:
  6892F//
  6893F
  6894Fstruct SCI_REGS
  6895F{
  6896F  union SCICCR_REG SCICCR ; // Communications control register
  6897F  union SCICTL1_REG SCICTL1 ; // Control register 1
  6898F  Uint16 SCIHBAUD ; // Baud rate (high) register
  6899F  Uint16 SCILBAUD ; // Baud rate (low) register
  6900F  union SCICTL2_REG SCICTL2 ; // Control register 2
  6901F  union SCIRXST_REG SCIRXST ; // Recieve status register
  6902F  Uint16 SCIRXEMU ; // Recieve emulation buffer register
  6903F  union SCIRXBUF_REG SCIRXBUF ; // Recieve data buffer
  6904F  Uint16 rsvd1 ; // reserved
  6905F  Uint16 SCITXBUF ; // Transmit data buffer
  6906F  union SCIFFTX_REG SCIFFTX ; // FIFO transmit register
  6907F  union SCIFFRX_REG SCIFFRX ; // FIFO recieve register
  6908F  union SCIFFCT_REG SCIFFCT ; // FIFO control register
  6909F  Uint16 rsvd2 ; // reserved
  6910F  Uint16 rsvd3 ; // reserved
  6911F  union SCIPRI_REG SCIPRI ; // FIFO Priority control
  6912F} ;
  6913F//---------------------------------------------------------------------------
  6914F// SCI External References & Function Declarations:
  6915F//
  6916F
  6917Fextern volatile struct SCI_REGS
  6918F  SciaRegs ;
  6919F
  6920Fextern volatile struct SCI_REGS
  6921F  ScibRegs ;
  6922F
  6923Fextern volatile struct SCI_REGS
  6924F  ScicRegs ;
  6925F       /* extern "C" */
  6926F       // end of DSP2833x_SCI_H definition
  6927F//===========================================================================
  6928F// End of file.
  6929F//===========================================================================
  6930F 
  6931F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Sci.h*/
  6932F/*   CLOSE_FILE Include File */
  6933F 
  6934F                // SCI Registers
  6935F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_SysCtrl.h */
  6936F// TI File $Revision: /main/5 $
  6937F// Checkin $Date: May 12, 2008 09:34:58 $
  6938F//###########################################################################
  6939F//
  6940F// FILE: DSP2833x_SysCtrl.h
  6941F//
  6942F// TITLE: DSP2833x Device System Control Register Definitions.
  6943F//
  6944F//###########################################################################
  6945F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6946F// $Release Date: August 4, 2009 $
  6947F//###########################################################################
  6948F#ifndef DSP2833x_SYS_CTRL_H
  6949F#define DSP2833x_SYS_CTRL_H
  6950F//---------------------------------------------------------------------------
  6951F// System Control Individual Register Bit Definitions:
  6952F//
  6953F// PLL Status Register
  6954F
  6955Ftypedef
  6956Fstruct PLLSTS_BITS
  6957F{                            // bits description
  6958F  Uint16 PLLLOCKS : 1 ;
  6959F                      // 0 PLL lock status
  6960F  Uint16 rsvd1 : 1 ;
  6961F                   // 1 reserved
  6962F  Uint16 PLLOFF : 1 ;
  6963F                    // 2 PLL off bit
  6964F  Uint16 MCLKSTS : 1 ;
  6965F                     // 3 Missing clock status bit
  6966F  Uint16 MCLKCLR : 1 ;
  6967F                     // 4 Missing clock clear bit
  6968F  Uint16 OSCOFF : 1 ;
  6969F                    // 5 Oscillator clock off
  6970F  Uint16 MCLKOFF : 1 ;
  6971F                     // 6 Missing clock detect
  6972F  Uint16 DIVSEL : 2 ;
  6973F                    // 7 Divide Select
  6974F  Uint16 rsvd2 : 7 ;
  6975F                   // 15:7 reserved
  6976F} PLLSTS_BITS ;
  6977F
  6978Ftypedef
  6979Funion PLLSTS_REG
  6980F{
  6981F  Uint16 all ;
  6982F  struct PLLSTS_BITS bit ;
  6983F} PLLSTS_REG ;
  6984F// High speed peripheral clock register bit definitions:
  6985F
  6986Ftypedef
  6987Fstruct HISPCP_BITS
  6988F{                            // bits description
  6989F  Uint16 HSPCLK : 3 ;
  6990F                    // 2:0 Rate relative to SYSCLKOUT
  6991F  Uint16 rsvd1 : 13 ;
  6992F                    // 15:3 reserved
  6993F} HISPCP_BITS ;
  6994F
  6995Ftypedef
  6996Funion HISPCP_REG
  6997F{
  6998F  Uint16 all ;
  6999F  struct HISPCP_BITS bit ;
  7000F} HISPCP_REG ;
  7001F// Low speed peripheral clock register bit definitions:
  7002F
  7003Ftypedef
  7004Fstruct LOSPCP_BITS
  7005F{                            // bits description
  7006F  Uint16 LSPCLK : 3 ;
  7007F                    // 2:0 Rate relative to SYSCLKOUT
  7008F  Uint16 rsvd1 : 13 ;
  7009F                    // 15:3 reserved
  7010F} LOSPCP_BITS ;
  7011F
  7012Ftypedef
  7013Funion LOSPCP_REG
  7014F{
  7015F  Uint16 all ;
  7016F  struct LOSPCP_BITS bit ;
  7017F} LOSPCP_REG ;
  7018F// Peripheral clock control register 0 bit definitions:
  7019F
  7020Ftypedef
  7021Fstruct PCLKCR0_BITS
  7022F{                             // bits description
  7023F  Uint16 rsvd1 : 2 ;
  7024F                   // 1:0 reserved
  7025F  Uint16 TBCLKSYNC : 1 ;
  7026F                       // 2 EWPM Module TBCLK enable/sync
  7027F  Uint16 ADCENCLK : 1 ;
  7028F                      // 3 Enable high speed clk to ADC
  7029F  Uint16 I2CAENCLK : 1 ;
  7030F                       // 4 Enable SYSCLKOUT to I2C-A
  7031F  Uint16 SCICENCLK : 1 ;
  7032F                       // 5 Enalbe low speed clk to SCI-C
  7033F  Uint16 rsvd2 : 2 ;
  7034F                   // 7:6 reserved
  7035F  Uint16 SPIAENCLK : 1 ;
  7036F                       // 8 Enable low speed clk to SPI-A
  7037F  Uint16 rsvd3 : 1 ;
  7038F                   // 9 reserved
  7039F  Uint16 SCIAENCLK : 1 ;
  7040F                       // 10 Enable low speed clk to SCI-A
  7041F  Uint16 SCIBENCLK : 1 ;
  7042F                       // 11 Enable low speed clk to SCI-B
  7043F  Uint16 MCBSPAENCLK : 1 ;
  7044F                         // 12 Enable low speed clk to McBSP-A
  7045F  Uint16 MCBSPBENCLK : 1 ;
  7046F                         // 13 Enable low speed clk to McBSP-B
  7047F  Uint16 ECANAENCLK : 1 ;
  7048F                        // 14 Enable system clk to eCAN-A
  7049F  Uint16 ECANBENCLK : 1 ;
  7050F                        // 15 Enable system clk to eCAN-B
  7051F} PCLKCR0_BITS ;
  7052F
  7053Ftypedef
  7054Funion PCLKCR0_REG
  7055F{
  7056F  Uint16 all ;
  7057F  struct PCLKCR0_BITS bit ;
  7058F} PCLKCR0_REG ;
  7059F// Peripheral clock control register 1 bit definitions:
  7060F
  7061Ftypedef
  7062Fstruct PCLKCR1_BITS
  7063F{                             // bits description
  7064F  Uint16 EPWM1ENCLK : 1 ;
  7065F                        // 0 Enable SYSCLKOUT to EPWM1
  7066F  Uint16 EPWM2ENCLK : 1 ;
  7067F                        // 1 Enable SYSCLKOUT to EPWM2
  7068F  Uint16 EPWM3ENCLK : 1 ;
  7069F                        // 2 Enable SYSCLKOUT to EPWM3
  7070F  Uint16 EPWM4ENCLK : 1 ;
  7071F                        // 3 Enable SYSCLKOUT to EPWM4
  7072F  Uint16 EPWM5ENCLK : 1 ;
  7073F                        // 4 Enable SYSCLKOUT to EPWM5
  7074F  Uint16 EPWM6ENCLK : 1 ;
  7075F                        // 5 Enable SYSCLKOUT to EPWM6
  7076F  Uint16 rsvd1 : 2 ;
  7077F                   // 7:6 reserved
  7078F  Uint16 ECAP1ENCLK : 1 ;
  7079F                        // 8 Enable SYSCLKOUT to ECAP1
  7080F  Uint16 ECAP2ENCLK : 1 ;
  7081F                        // 9 Enable SYSCLKOUT to ECAP2
  7082F  Uint16 ECAP3ENCLK : 1 ;
  7083F                        // 10 Enable SYSCLKOUT to ECAP3
  7084F  Uint16 ECAP4ENCLK : 1 ;
  7085F                        // 11 Enable SYSCLKOUT to ECAP4
  7086F  Uint16 ECAP5ENCLK : 1 ;
  7087F                        // 12 Enable SYSCLKOUT to ECAP5
  7088F  Uint16 ECAP6ENCLK : 1 ;
  7089F                        // 13 Enable SYSCLKOUT to ECAP6
  7090F  Uint16 EQEP1ENCLK : 1 ;
  7091F                        // 14 Enable SYSCLKOUT to EQEP1
  7092F  Uint16 EQEP2ENCLK : 1 ;
  7093F                        // 15 Enable SYSCLKOUT to EQEP2
  7094F} PCLKCR1_BITS ;
  7095F
  7096Ftypedef
  7097Funion PCLKCR1_REG
  7098F{
  7099F  Uint16 all ;
  7100F  struct PCLKCR1_BITS bit ;
  7101F} PCLKCR1_REG ;
  7102F// Peripheral clock control register 2 bit definitions:
  7103F
  7104Ftypedef
  7105Fstruct PCLKCR3_BITS
  7106F{                             // bits description
  7107F  Uint16 rsvd1 : 8 ;
  7108F                   // 7:0 reserved
  7109F  Uint16 CPUTIMER0ENCLK : 1 ;
  7110F                            // 8 Enable SYSCLKOUT to CPU-Timer 0
  7111F  Uint16 CPUTIMER1ENCLK : 1 ;
  7112F                            // 9 Enable SYSCLKOUT to CPU-Timer 1
  7113F  Uint16 CPUTIMER2ENCLK : 1 ;
  7114F                            // 10 Enable SYSCLKOUT to CPU-Timer 2
  7115F  Uint16 DMAENCLK : 1 ;
  7116F                      // 11 Enable the DMA clock
  7117F  Uint16 XINTFENCLK : 1 ;
  7118F                        // 12 Enable SYSCLKOUT to XINTF
  7119F  Uint16 GPIOINENCLK : 1 ;
  7120F                         // Enable GPIO input clock
  7121F  Uint16 rsvd2 : 2 ;
  7122F                   // 15:14 reserved
  7123F} PCLKCR3_BITS ;
  7124F
  7125Ftypedef
  7126Funion PCLKCR3_REG
  7127F{
  7128F  Uint16 all ;
  7129F  struct PCLKCR3_BITS bit ;
  7130F} PCLKCR3_REG ;
  7131F// PLL control register bit definitions:
  7132F
  7133Ftypedef
  7134Fstruct PLLCR_BITS
  7135F{                           // bits description
  7136F  Uint16 DIV : 4 ;
  7137F                 // 3:0 Set clock ratio for the PLL
  7138F  Uint16 rsvd1 : 12 ;
  7139F                    // 15:4 reserved
  7140F} PLLCR_BITS ;
  7141F
  7142Ftypedef
  7143Funion PLLCR_REG
  7144F{
  7145F  Uint16 all ;
  7146F  struct PLLCR_BITS bit ;
  7147F} PLLCR_REG ;
  7148F// Low Power Mode 0 control register bit definitions:
  7149F
  7150Ftypedef
  7151Fstruct LPMCR0_BITS
  7152F{                            // bits description
  7153F  Uint16 LPM : 2 ;
  7154F                 // 1:0 Set the low power mode
  7155F  Uint16 QUALSTDBY : 6 ;
  7156F                       // 7:2 Qualification
  7157F  Uint16 rsvd1 : 7 ;
  7158F                   // 14:8 reserved
  7159F  Uint16 WDINTE : 1 ;
  7160F                    // 15 Enables WD to wake the device from STANDBY
  7161F} LPMCR0_BITS ;
  7162F
  7163Ftypedef
  7164Funion LPMCR0_REG
  7165F{
  7166F  Uint16 all ;
  7167F  struct LPMCR0_BITS bit ;
  7168F} LPMCR0_REG ;
  7169F// Dual-mapping configuration register bit definitions:
  7170F
  7171Ftypedef
  7172Fstruct MAPCNF_BITS
  7173F{                            // bits description
  7174F  Uint16 MAPEPWM : 1 ;// 0 EPWM dual-map enable
  7175F  Uint16 rsvd1 : 15 ;// 15:1 reserved
  7176F} MAPCNF_BITS ;
  7177F
  7178Ftypedef
  7179Funion MAPCNF_REG
  7180F{
  7181F  Uint16 all ;
  7182F  struct MAPCNF_BITS bit ;
  7183F} MAPCNF_REG ;
  7184F//---------------------------------------------------------------------------
  7185F// System Control Register File:
  7186F//
  7187F
  7188Ftypedef
  7189Fstruct SYS_CTRL_REGS
  7190F{
  7191F  Uint16 rsvd1 ; // 0
  7192F  union PLLSTS_REG PLLSTS ; // 1
  7193F  Uint16 rsvd2 [ 8 ] ;
  7194F                    // 2-9
  7195F  union HISPCP_REG HISPCP ; // 10: High-speed peripheral clock pre-scaler
  7196F  union LOSPCP_REG LOSPCP ; // 11: Low-speed peripheral clock pre-scaler
  7197F  union PCLKCR0_REG PCLKCR0 ; // 12: Peripheral clock control register
  7198F  union PCLKCR1_REG PCLKCR1 ; // 13: Peripheral clock control register
  7199F  union LPMCR0_REG LPMCR0 ; // 14: Low-power mode control register 0
  7200F  Uint16 rsvd3 ; // 15: reserved
  7201F  union PCLKCR3_REG PCLKCR3 ; // 16: Peripheral clock control register
  7202F  union PLLCR_REG PLLCR ;
  7203F                          // 17: PLL control register
  7204F   // No bit definitions are defined for SCSR because
  7205F   // a read-modify-write instruction can clear the WDOVERRIDE bit
  7206F  Uint16 SCSR ; // 18: System control and status register
  7207F  Uint16 WDCNTR ; // 19: WD counter register
  7208F  Uint16 rsvd4 ; // 20
  7209F  Uint16 WDKEY ; // 21: WD reset key register
  7210F  Uint16 rsvd5 [ 3 ] ;
  7211F                    // 22-24
  7212F   // No bit definitions are defined for WDCR because
  7213F   // the proper value must be written to the WDCHK field
  7214F   // whenever writing to this register.
  7215F  Uint16 WDCR ; // 25: WD timer control register
  7216F  Uint16 rsvd6 [ 4 ] ;
  7217F                    // 26-29
  7218F  union MAPCNF_REG MAPCNF ; // 30: Dual-mapping configuration register
  7219F  Uint16 rsvd7 [ 1 ] ;
  7220F                    // 31
  7221F} SYS_CTRL_REGS ;
  7222F/* --------------------------------------------------- */
  7223F/* CSM Registers */
  7224F/* */
  7225F/* ----------------------------------------------------*/
  7226F/* CSM Status & Control register bit definitions */
  7227F
  7228Ftypedef
  7229Fstruct CSMSCR_BITS
  7230F{                            // bit description
  7231F  Uint16 SECURE : 1 ;
  7232F                    // 0 Secure flag
  7233F  Uint16 rsvd1 : 14 ;
  7234F                    // 14-1 reserved
  7235F  Uint16 FORCESEC : 1 ;
  7236F                      // 15 Force Secure control bit
  7237F} CSMSCR_BITS ;
  7238F/* Allow access to the bit fields or entire register */
  7239F
  7240Ftypedef
  7241Funion CSMSCR_REG
  7242F{
  7243F  Uint16 all ;
  7244F  struct CSMSCR_BITS bit ;
  7245F} CSMSCR_REG ;
  7246F/* CSM Register File */
  7247F
  7248Ftypedef
  7249Fstruct CSM_REGS
  7250F{
  7251F  Uint16 KEY0 ; // KEY reg bits 15-0
  7252F  Uint16 KEY1 ; // KEY reg bits 31-16
  7253F  Uint16 KEY2 ; // KEY reg bits 47-32
  7254F  Uint16 KEY3 ; // KEY reg bits 63-48
  7255F  Uint16 KEY4 ; // KEY reg bits 79-64
  7256F  Uint16 KEY5 ; // KEY reg bits 95-80
  7257F  Uint16 KEY6 ; // KEY reg bits 111-96
  7258F  Uint16 KEY7 ; // KEY reg bits 127-112
  7259F  Uint16 rsvd1 ; // reserved
  7260F  Uint16 rsvd2 ; // reserved
  7261F  Uint16 rsvd3 ; // reserved
  7262F  Uint16 rsvd4 ; // reserved
  7263F  Uint16 rsvd5 ; // reserved
  7264F  Uint16 rsvd6 ; // reserved
  7265F  Uint16 rsvd7 ; // reserved
  7266F  union CSMSCR_REG CSMSCR ; // CSM Status & Control register
  7267F} CSM_REGS ;
  7268F/* Password locations */
  7269F
  7270Ftypedef
  7271Fstruct CSM_PWL
  7272F{
  7273F  Uint16 PSWD0 ; // PSWD bits 15-0
  7274F  Uint16 PSWD1 ; // PSWD bits 31-16
  7275F  Uint16 PSWD2 ; // PSWD bits 47-32
  7276F  Uint16 PSWD3 ; // PSWD bits 63-48
  7277F  Uint16 PSWD4 ; // PSWD bits 79-64
  7278F  Uint16 PSWD5 ; // PSWD bits 95-80
  7279F  Uint16 PSWD6 ; // PSWD bits 111-96
  7280F  Uint16 PSWD7 ; // PSWD bits 127-112
  7281F} CSM_PWL ;
  7282F/* Flash Registers */
  7283F#define FLASH_SLEEP 0x0000 ;
  7284F#define FLASH_STANDBY 0x0001 ;
  7285F#define FLASH_ACTIVE 0x0003 ;
  7286F/* Flash Option Register bit definitions */
  7287F
  7288Ftypedef
  7289Fstruct FOPT_BITS
  7290F{                          // bit description
  7291F  Uint16 ENPIPE : 1 ;
  7292F                    // 0 Enable Pipeline Mode
  7293F  Uint16 rsvd : 15 ;
  7294F                   // 1-15 reserved
  7295F} FOPT_BITS ;
  7296F/* Allow access to the bit fields or entire register */
  7297F
  7298Ftypedef
  7299Funion FOPT_REG
  7300F{
  7301F  Uint16 all ;
  7302F  struct FOPT_BITS bit ;
  7303F} FOPT_REG ;
  7304F/* Flash Power Modes Register bit definitions */
  7305F
  7306Ftypedef
  7307Fstruct FPWR_BITS
  7308F{                          // bit description
  7309F  Uint16 PWR : 2 ;
  7310F                 // 0-1 Power Mode bits
  7311F  Uint16 rsvd : 14 ;
  7312F                   // 2-15 reserved
  7313F} FPWR_BITS ;
  7314F/* Allow access to the bit fields or entire register */
  7315F
  7316Ftypedef
  7317Funion FPWR_REG
  7318F{
  7319F  Uint16 all ;
  7320F  struct FPWR_BITS bit ;
  7321F} FPWR_REG ;
  7322F/* Flash Status Register bit definitions */
  7323F
  7324Ftypedef
  7325Fstruct FSTATUS_BITS
  7326F{                             // bit description
  7327F  Uint16 PWRS : 2 ;
  7328F                  // 0-1 Power Mode Status bits
  7329F  Uint16 STDBYWAITS : 1 ;
  7330F                        // 2 Bank/Pump Sleep to Standby Wait Counter Status bits
  7331F  Uint16 ACTIVEWAITS : 1 ;
  7332F                         // 3 Bank/Pump Standby to Active Wait Counter Status bits
  7333F  Uint16 rsvd1 : 4 ;
  7334F                   // 4-7 reserved
  7335F  Uint16 V3STAT : 1 ;
  7336F                    // 8 VDD3V Status Latch bit
  7337F  Uint16 rsvd2 : 7 ;
  7338F                   // 9-15 reserved
  7339F} FSTATUS_BITS ;
  7340F/* Allow access to the bit fields or entire register */
  7341F
  7342Ftypedef
  7343Funion FSTATUS_REG
  7344F{
  7345F  Uint16 all ;
  7346F  struct FSTATUS_BITS bit ;
  7347F} FSTATUS_REG ;
  7348F/* Flash Sleep to Standby Wait Counter Register bit definitions */
  7349F
  7350Ftypedef
  7351Fstruct FSTDBYWAIT_BITS
  7352F{                                // bit description
  7353F  Uint16 STDBYWAIT : 9 ;
  7354F                       // 0-8 Bank/Pump Sleep to Standby Wait Count bits
  7355F  Uint16 rsvd : 7 ;
  7356F                  // 9-15 reserved
  7357F} FSTDBYWAIT_BITS ;
  7358F/* Allow access to the bit fields or entire register */
  7359F
  7360Ftypedef
  7361Funion FSTDBYWAIT_REG
  7362F{
  7363F  Uint16 all ;
  7364F  struct FSTDBYWAIT_BITS bit ;
  7365F} FSTDBYWAIT_REG ;
  7366F/* Flash Standby to Active Wait Counter Register bit definitions */
  7367F
  7368Ftypedef
  7369Fstruct FACTIVEWAIT_BITS
  7370F{                                 // bit description
  7371F  Uint16 ACTIVEWAIT : 9 ;
  7372F                        // 0-8 Bank/Pump Standby to Active Wait Count bits
  7373F  Uint16 rsvd : 7 ;
  7374F                  // 9-15 reserved
  7375F} FACTIVEWAIT_BITS ;
  7376F/* Allow access to the bit fields or entire register */
  7377F
  7378Ftypedef
  7379Funion FACTIVEWAIT_REG
  7380F{
  7381F  Uint16 all ;
  7382F  struct FACTIVEWAIT_BITS bit ;
  7383F} FACTIVEWAIT_REG ;
  7384F/* Bank Read Access Wait State Register bit definitions */
  7385F
  7386Ftypedef
  7387Fstruct FBANKWAIT_BITS
  7388F{                               // bit description
  7389F  Uint16 RANDWAIT : 4 ;
  7390F                      // 0-3 Flash Random Read Wait State bits
  7391F  Uint16 rsvd1 : 4 ;
  7392F                   // 4-7 reserved
  7393F  Uint16 PAGEWAIT : 4 ;
  7394F                      // 8-11 Flash Paged Read Wait State bits
  7395F  Uint16 rsvd2 : 4 ;
  7396F                   // 12-15 reserved
  7397F} FBANKWAIT_BITS ;
  7398F/* Allow access to the bit fields or entire register */
  7399F
  7400Ftypedef
  7401Funion FBANKWAIT_REG
  7402F{
  7403F  Uint16 all ;
  7404F  struct FBANKWAIT_BITS bit ;
  7405F} FBANKWAIT_REG ;
  7406F/* OTP Read Access Wait State Register bit definitions */
  7407F
  7408Ftypedef
  7409Fstruct FOTPWAIT_BITS
  7410F{                              // bit description
  7411F  Uint16 OTPWAIT : 5 ;
  7412F                     // 0-4 OTP Read Wait State bits
  7413F  Uint16 rsvd : 11 ;
  7414F                   // 5-15 reserved
  7415F} FOTPWAIT_BITS ;
  7416F/* Allow access to the bit fields or entire register */
  7417F
  7418Ftypedef
  7419Funion FOTPWAIT_REG
  7420F{
  7421F  Uint16 all ;
  7422F  struct FOTPWAIT_BITS bit ;
  7423F} FOTPWAIT_REG ;
  7424F
  7425Ftypedef
  7426Fstruct FLASH_REGS
  7427F{
  7428F  union FOPT_REG FOPT ; // Option Register
  7429F  Uint16 rsvd1 ; // reserved
  7430F  union FPWR_REG FPWR ; // Power Modes Register
  7431F  union FSTATUS_REG FSTATUS ; // Status Register
  7432F  union FSTDBYWAIT_REG FSTDBYWAIT ; // Pump/Bank Sleep to Standby Wait State Register
  7433F  union FACTIVEWAIT_REG FACTIVEWAIT ; // Pump/Bank Standby to Active Wait State Register
  7434F  union FBANKWAIT_REG FBANKWAIT ; // Bank Read Access Wait State Register
  7435F  union FOTPWAIT_REG FOTPWAIT ; // OTP Read Access Wait State Register
  7436F} FLASH_REGS ;
  7437F//---------------------------------------------------------------------------
  7438F// System Control External References & Function Declarations:
  7439F//
  7440F
  7441Fextern volatile struct SYS_CTRL_REGS
  7442F  SysCtrlRegs ;
  7443F
  7444Fextern volatile struct CSM_REGS
  7445F  CsmRegs ;
  7446F
  7447Fextern volatile struct CSM_PWL
  7448F  CsmPwl ;
  7449F
  7450Fextern volatile struct FLASH_REGS
  7451F  FlashRegs ;
  7452F       // end of DSP2833x_SYS_CTRL_H definition
  7453F//===========================================================================
  7454F// End of file.
  7455F//===========================================================================
  7456F 
  7457F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_SysCtrl.h*/
  7458F/*   CLOSE_FILE Include File */
  7459F 
  7460F            // System Control/Power Modes
  7461F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_XIntrupt.h */
  7462F// TI File $Revision: /main/1 $
  7463F// Checkin $Date: August 18, 2006 13:52:39 $
  7464F//###########################################################################
  7465F//
  7466F// FILE: DSP2833x_XIntrupt.h
  7467F//
  7468F// TITLE: DSP2833x Device External Interrupt Register Definitions.
  7469F//
  7470F//###########################################################################
  7471F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  7472F// $Release Date: August 4, 2009 $
  7473F//###########################################################################
  7474F#ifndef DSP2833x_XINTRUPT_H
  7475F#define DSP2833x_XINTRUPT_H
  7476F//---------------------------------------------------------------------------
  7477F
  7478Fstruct XINTCR_BITS
  7479F{
  7480F  Uint16 ENABLE : 1 ;// 0 enable/disable
  7481F  Uint16 rsvd1 : 1 ;// 1 reserved
  7482F  Uint16 POLARITY : 2 ;// 3:2 pos/neg, both triggered
  7483F  Uint16 rsvd2 : 12 ;//15:4 reserved
  7484F} ;
  7485F
  7486Funion XINTCR_REG
  7487F{
  7488F  Uint16 all ;
  7489F  struct XINTCR_BITS bit ;
  7490F} ;
  7491F
  7492Fstruct XNMICR_BITS
  7493F{
  7494F  Uint16 ENABLE : 1 ;// 0 enable/disable
  7495F  Uint16 SELECT : 1 ;// 1 Timer 1 or XNMI connected to int13
  7496F  Uint16 POLARITY : 2 ;// 3:2 pos/neg, or both triggered
  7497F  Uint16 rsvd2 : 12 ;// 15:4 reserved
  7498F} ;
  7499F
  7500Funion XNMICR_REG
  7501F{
  7502F  Uint16 all ;
  7503F  struct XNMICR_BITS bit ;
  7504F} ;
  7505F//---------------------------------------------------------------------------
  7506F// External Interrupt Register File:
  7507F//
  7508F
  7509Fstruct XINTRUPT_REGS
  7510F{
  7511F  union XINTCR_REG XINT1CR ;
  7512F  union XINTCR_REG XINT2CR ;
  7513F  union XINTCR_REG XINT3CR ;
  7514F  union XINTCR_REG XINT4CR ;
  7515F  union XINTCR_REG XINT5CR ;
  7516F  union XINTCR_REG XINT6CR ;
  7517F  union XINTCR_REG XINT7CR ;
  7518F  union XNMICR_REG XNMICR ;
  7519F  Uint16 XINT1CTR ;
  7520F  Uint16 XINT2CTR ;
  7521F  Uint16 rsvd [ 5 ] ;
  7522F  Uint16 XNMICTR ;
  7523F} ;
  7524F//---------------------------------------------------------------------------
  7525F// External Interrupt References & Function Declarations:
  7526F//
  7527F
  7528Fextern volatile struct XINTRUPT_REGS
  7529F  XIntruptRegs ;
  7530F       /* extern "C" */
  7531F       // end of DSP2833x_XINTF_H definition
  7532F//===========================================================================
  7533F// End of file.
  7534F//===========================================================================
  7535F 
  7536F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_XIntrupt.h*/
  7537F/*   CLOSE_FILE Include File */
  7538F 
  7539F           // External Interrupts
  7540F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Xintf.h */
  7541F// TI File $Revision: /main/4 $
  7542F// Checkin $Date: July 27, 2009 13:57:25 $
  7543F//###########################################################################
  7544F//
  7545F// FILE: DSP2833x_Xintf.h
  7546F//
  7547F// TITLE: DSP2833x Device External Interface Register Definitions.
  7548F//
  7549F//###########################################################################
  7550F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  7551F// $Release Date: August 4, 2009 $
  7552F//###########################################################################
  7553F#ifndef DSP2833x_XINTF_H
  7554F#define DSP2833x_XINTF_H
  7555F// XINTF timing register bit definitions:
  7556F
  7557Fstruct XTIMING_BITS
  7558F{                     // bits description
  7559F  Uint16 XWRTRAIL : 2 ;
  7560F                      // 1:0 Write access trail timing
  7561F  Uint16 XWRACTIVE : 3 ;
  7562F                       // 4:2 Write access active timing
  7563F  Uint16 XWRLEAD : 2 ;
  7564F                     // 6:5 Write access lead timing
  7565F  Uint16 XRDTRAIL : 2 ;
  7566F                      // 8:7 Read access trail timing
  7567F  Uint16 XRDACTIVE : 3 ;
  7568F                       // 11:9 Read access active timing
  7569F  Uint16 XRDLEAD : 2 ;
  7570F                     // 13:12 Read access lead timing
  7571F  Uint16 USEREADY : 1 ;
  7572F                      // 14 Extend access using HW waitstates
  7573F  Uint16 READYMODE : 1 ;
  7574F                       // 15 Ready mode
  7575F  Uint16 XSIZE : 2 ;
  7576F                   // 17:16 XINTF bus width - must be written as 11b
  7577F  Uint16 rsvd1 : 4 ;
  7578F                   // 21:18 reserved
  7579F  Uint16 X2TIMING : 1 ;
  7580F                      // 22 Double lead/active/trail timing
  7581F  Uint16 rsvd3 : 9 ;
  7582F                   // 31:23 reserved
  7583F} ;
  7584F
  7585Funion XTIMING_REG
  7586F{
  7587F  Uint32 all ;
  7588F  struct XTIMING_BITS bit ;
  7589F} ;
  7590F// XINTF control register bit definitions:
  7591F
  7592Fstruct XINTCNF2_BITS
  7593F{                      // bits description
  7594F  Uint16 WRBUFF : 2 ;
  7595F                    // 1:0 Write buffer depth
  7596F  Uint16 CLKMODE : 1 ;
  7597F                     // 2 Ratio for XCLKOUT with respect to XTIMCLK
  7598F  Uint16 CLKOFF : 1 ;
  7599F                    // 3 Disable XCLKOUT
  7600F  Uint16 rsvd1 : 2 ;
  7601F                   // 5:4 reserved
  7602F  Uint16 WLEVEL : 2 ;
  7603F                    // 7:6 Current level of the write buffer
  7604F  Uint16 rsvd2 : 1 ;
  7605F                   // 8 reserved
  7606F  Uint16 HOLD : 1 ;
  7607F                  // 9 Hold enable/disable
  7608F  Uint16 HOLDS : 1 ;
  7609F                   // 10 Current state of HOLDn input
  7610F  Uint16 HOLDAS : 1 ;
  7611F                    // 11 Current state of HOLDAn output
  7612F  Uint16 rsvd3 : 4 ;
  7613F                   // 15:12 reserved
  7614F  Uint16 XTIMCLK : 3 ;
  7615F                     // 18:16 Ratio for XTIMCLK
  7616F  Uint16 rsvd4 : 13 ;
  7617F                    // 31:19 reserved
  7618F} ;
  7619F
  7620Funion XINTCNF2_REG
  7621F{
  7622F  Uint32 all ;
  7623F  struct XINTCNF2_BITS bit ;
  7624F} ;
  7625F// XINTF bank switching register bit definitions:
  7626F
  7627Fstruct XBANK_BITS
  7628F{                   // bits description
  7629F  Uint16 BANK : 3 ;
  7630F                  // 2:0 Zone for which banking is enabled
  7631F  Uint16 BCYC : 3 ;
  7632F                  // 5:3 XTIMCLK cycles to add
  7633F  Uint16 rsvd : 10 ;
  7634F                   // 15:6 reserved
  7635F} ;
  7636F
  7637Funion XBANK_REG
  7638F{
  7639F  Uint16 all ;
  7640F  struct XBANK_BITS bit ;
  7641F} ;
  7642F
  7643Fstruct XRESET_BITS
  7644F{
  7645F  Uint16 XHARDRESET : 1 ;
  7646F  Uint16 rsvd1 : 15 ;
  7647F} ;
  7648F
  7649Funion XRESET_REG
  7650F{
  7651F  Uint16 all ;
  7652F  struct XRESET_BITS bit ;
  7653F} ;
  7654F//---------------------------------------------------------------------------
  7655F// XINTF Register File:
  7656F//
  7657F
  7658Fstruct XINTF_REGS
  7659F{
  7660F  union XTIMING_REG XTIMING0 ;
  7661F  Uint32 rsvd1 [ 5 ] ;
  7662F  union XTIMING_REG XTIMING6 ;
  7663F  union XTIMING_REG XTIMING7 ;
  7664F  Uint32 rsvd2 [ 2 ] ;
  7665F  union XINTCNF2_REG XINTCNF2 ;
  7666F  Uint32 rsvd3 ;
  7667F  union XBANK_REG XBANK ;
  7668F  Uint16 rsvd4 ;
  7669F  Uint16 XREVISION ;
  7670F  Uint16 rsvd5 [ 2 ] ;
  7671F  union XRESET_REG XRESET ;
  7672F} ;
  7673F//---------------------------------------------------------------------------
  7674F// XINTF External References & Function Declarations:
  7675F//
  7676F
  7677Fextern volatile struct XINTF_REGS
  7678F  XintfRegs ;
  7679F       /* extern "C" */
  7680F       // end of DSP2833x_XINTF_H definition
  7681F//===========================================================================
  7682F// No more.
  7683F//===========================================================================
  7684F 
  7685F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Xintf.h*/
  7686F/*   CLOSE_FILE Include File */
  7687F 
  7688F              // XINTF External Interface
  7689F#define DSP28_EPWM1 1
  7690F#define DSP28_EPWM2 1
  7691F#define DSP28_EPWM3 1
  7692F#define DSP28_EPWM4 1
  7693F#define DSP28_EPWM5 1
  7694F#define DSP28_EPWM6 1
  7695F#define DSP28_ECAP1 1
  7696F#define DSP28_ECAP2 1
  7697F#define DSP28_ECAP3 1
  7698F#define DSP28_ECAP4 1
  7699F#define DSP28_ECAP5 1
  7700F#define DSP28_ECAP6 1
  7701F#define DSP28_EQEP1 1
  7702F#define DSP28_EQEP2 1
  7703F#define DSP28_ECANA 1
  7704F#define DSP28_ECANB 1
  7705F#define DSP28_MCBSPA 1
  7706F#define DSP28_MCBSPB 1
  7707F#define DSP28_SPIA 1
  7708F#define DSP28_SCIA 1
  7709F#define DSP28_SCIB 1
  7710F#define DSP28_SCIC 1
  7711F#define DSP28_I2CA 1
  7712F       // end DSP28_28335
  7713F       // end DSP28_28334
  7714F       // end DSP28_28332
  7715F       /* extern "C" */
  7716F       // end of DSP2833x_DEVICE_H definition
  7717F//===========================================================================
  7718F// End of file.
  7719F//===========================================================================
  7720F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Device.h*/
  7721F/*   CLOSE_FILE Include File */
  7722F 
  7723F/* LDRA REMOVE #include "DSP2833x_Gpio.h" */
  7724F
  7725Fuint8_t *
  7726F  SCI_TX_Message ;
  7727F
  7728Fuint8_t
  7729F  SciTxQtd ;      // quantity to be send
  7730F
  7731Fuint8_t
  7732F  SciTxStatus ;
  7733F
  7734Fuint16_t
  7735F  SpiTxQtd ;
  7736F
  7737Fuint8_t
  7738F  SpiTxStatus ;
  7739F/******************************************************************************
  7740F* FUNCTION NAME : SCIA_Init
  7741F* INPUT : None
  7742F* OUTPUT : None
  7743F* RETURN : No return
  7744F* DESCRIPTION : Configure UART SCI-A.
  7745F******************************************************************************/
  7746F
  7747Fvoid
  7748T  scia_init()
  7749F  {
  7750T    SciaRegs.SCICCR.all = 0x0007 ;
  7751F                                  /* 1 stop bit, No loopback
  7752F                                               No parity,8 uint8_t bits,
  7753F                                                 async mode, idle-line protocol */
  7754T    SciaRegs.SCICTL1.all = 0x0003 ;
  7755F                                   /* enable TX, RX, internal SCICLK,
  7756F                                               Disable RX ERR, SLEEP, TXWAKE */
  7757F    /* SYSCLOCKOUT = 150MHz;
  7758F     * LSPCLK = 1/4 = 37.5 MHz
  7759F     * BRR = (LSPCLK / (9600 x 8)) -1
  7760F     * BRR = 487 gives 9605 Baud
  7761F     * BRR = 121 gives 38422 Baud
  7762F     * BRR = 40 gives 114329 Baud */
  7763T    SciaRegs.SCIHBAUD = 40 >> 8U ;/* Highbyte */
  7764T    SciaRegs.SCILBAUD = 40 & 0x00FF ;/* Lowbyte */
  7765T    SciaRegs.SCICTL2.bit.TXINTENA = 0U ;/* Disable SCI-A Tx-ISR buffer */
  7766T    SciaRegs.SCICTL2.bit.RXBKINTENA = 1U ;/* Disable SCI_A Rx-ISR buffer */
  7767T    SciaRegs.SCIFFTX.all = 0xC060U ;
  7768F                                    /* bit 15 = 1 : relinquish from Reset */
  7769F                                            /* bit 14 = 1 : Enable FIFO */
  7770F                                            /* bit 6 = 1 : CLR TXFFINT-Flag */
  7771F                                            /* bit 5 = 1 : enable TX FIFO match */
  7772F                                            /* bit 4-0 : TX-ISR, if TX FIFO is 0(empty) */
  7773T    SciaRegs.SCIFFCT.all = 0x0000U ;/* Set FIFO transfer delay to 0 */
  7774T    SciaRegs.SCIFFRX.all = 0xE070U ;/* Rx interrupt level = 16 */
  7775T    SciaRegs.SCICTL1.all = 0x0023U ;/* Relinquish SCI from Reset */
  7776T  }
  7777F/******************************************************************************
  7778F* FUNCTION NAME : SPIA_Init
  7779F* INPUT : None
  7780F* OUTPUT : None
  7781F* RETURN : No return
  7782F* DESCRIPTION : Configure SPI-A.
  7783F******************************************************************************/
  7784F
  7785Fvoid
  7786T  spia_init()
  7787F  {
  7788F    // InitSpiaGpio();
  7789F    /* Reset SPI => Initialize SPI FIFO registers */
  7790T    SpiaRegs.SPICCR.bit.SPISWRESET = 0U ;
  7791F    /* SPICCR: SPI-A Configuration Control Register */
  7792T    SpiaRegs.SPICCR.bit.SPICHAR = 0x7 ;/* 8-bit uint8_tacter */
  7793T    SpiaRegs.SPICCR.bit.CLKPOLARITY = 1 ;
  7794F                                         /* Falling edge data transfer */
  7795F    /* SPICTL: SPI-A Operation Control Register */
  7796T    SpiaRegs.SPICTL.all = 0U ;
  7797T    SpiaRegs.SPICTL.bit.SPIINTENA = 1 ;/* Disable interrupt */
  7798T    SpiaRegs.SPICTL.bit.TALK = 1 ;/* Transmission enabled */
  7799T    SpiaRegs.SPICTL.bit.MASTER_SLAVE = 0U ;/* Slave */
  7800T    SpiaRegs.SPICTL.bit.CLK_PHASE = 0U ;/* No clock delay */
  7801T    SpiaRegs.SPICTL.bit.OVERRUNINTENA = 0U ;/* Disable overrun interrupt */
  7802T    SpiaRegs.SPISTS.all = 0x0000U ;
  7803F                                   /* SPISTS: SPI-A Status Register */
  7804F    /* SPIFFTX: SPI-A FIFO Transmit Register */
  7805T    SpiaRegs.SPIFFTX.all = 0U ;/* Reset TX FIFO */
  7806T    SpiaRegs.SPIFFTX.bit.TXFFIL = 0U ;/* TX-ISR, if TX FIFO is 0 (empty) */
  7807T    SpiaRegs.SPIFFTX.bit.TXFFIENA = 1U ;
  7808F                                        /* Do not enable TX FIFO interrupt... */
  7809F                                            /* ...until there is something to send */
  7810F                                            /* ...enable interrupt on TX FIFO match */
  7811T    SpiaRegs.SPIFFTX.bit.TXFFINTCLR = 1U ;/* Clear TXFFINT flag */
  7812T    SpiaRegs.SPIFFTX.bit.TXFIFO = 0U ;/* Reset TX FIFO (pointer to 0) */
  7813T    SpiaRegs.SPIFFTX.bit.SPIFFENA = 1U ;/* Enable SPI FIFO Enhancements */
  7814T    SpiaRegs.SPIFFTX.bit.SPIRST = 1U ;
  7815F                                      /* Resumes SPI FIFO for transmit and receive */
  7816F    /* SPIFFRX: SPI-A FIFO Receive Register*/
  7817T    SpiaRegs.SPIFFRX.all = 0U ;/* Reset RX FIFO */
  7818T    SpiaRegs.SPIFFRX.bit.RXFFIL = 16U ;/* RX-ISR, if RX FIFO is 16 (full) */
  7819T    SpiaRegs.SPIFFRX.bit.RXFFIENA = 1U ;/* Enable interrupt on RX FIFO match */
  7820T    SpiaRegs.SPIFFRX.bit.RXFFINTCLR = 1U ;/* Clear RXFFINT flag */
  7821T    SpiaRegs.SPIFFRX.bit.RXFIFORESET = 1U ;/* Reset RX FIFO (pointer to 0) */
  7822T    SpiaRegs.SPIFFRX.bit.RXFFOVFCLR = 1U ;
  7823F                                          /* Clear RXFFOVF flag */
  7824F    /* SPIFFCT: SPI-A FIFO Control Register */
  7825T    SpiaRegs.SPIFFCT.all = 0x00U ;
  7826F                                    /* Set FIFO transmit delay to 0 */
  7827F    /* SPIPRI: SPI-A Priority Control Register */
  7828T    SpiaRegs.SPIPRI.bit.FREE = 1U ;/* Halts due emulation don't stop transmission...*/
  7829T    SpiaRegs.SPIPRI.bit.SOFT = 1U ;/* ...of bytes or FIFOs */
  7830T    SpiaRegs.SPICCR.bit.SPISWRESET = 1U ;/* Enable SPI */
  7831T    SpiaRegs.SPIFFTX.bit.SPIRST = 0U ;/* Reset the TX & RX Buffers */
  7832T    SpiaRegs.SPIFFTX.bit.SPIRST = 1U ;
  7833T    SpiaRegs.SPIFFTX.bit.TXFIFO = 1U ;/* Re-enable TX FIFO operation */
  7834T  }
  7835F/******************************************************************************
  7836F* FUNCTION NAME : I2CA_Init
  7837F* INPUT : None
  7838F* OUTPUT : None
  7839F* RETURN : No return
  7840F* DESCRIPTION : Configure I2C-A.
  7841F******************************************************************************/
  7842F
  7843Fvoid
  7844T  i2ca_init ( void )
  7845F  {
  7846T    I2caRegs.I2CMDR.bit.IRS = 0U ;
  7847F                                  /* Reset the I2C module */
  7848F    /* I2C Prescale Register */
  7849T    I2caRegs.I2CPSC.all = 14U ;
  7850F                               /* Internal I2C module clock = SYSCLK/(PSC +1) */
  7851F                                    /* = 10 MHz */
  7852T    I2caRegs.I2CCLKL = 45U ;/* Tmaster = (PSC +1)[ICCL + 5 + ICCH + 5] / 150MHz */
  7853T    I2caRegs.I2CCLKH = 45U ;
  7854F                            /* Tmaster = 15 [ICCL + ICCH + 10] / 150 MHz
  7855F                                     * d = 5 for IPSC > 1
  7856F                                     * for I2C 10 kHz:
  7857F                                     * Tmaster = 100 µs * 150 MHz / 15
  7858F                                     * = 1000
  7859F                                     * = (ICCL + ICCH +10)
  7860F                                     * ICCL + ICCH = 990
  7861F                                     * ICCL = ICH = 990/2 = 495
  7862F                                     * for I2C 50 kHz:
  7863F                                     * Tmaster = 20 µs * 150 MHz / 15
  7864F                                               = 200
  7865F                                               = (ICCL + ICCH +10)
  7866F                                     * ICCL + ICCH = 190
  7867F                                     * ICCL = ICH = 190/2 = 95
  7868F                                     * for I2C 100 kHz:
  7869F                                     * Tmaster = 10 µs * 150 MHz / 15
  7870F                                     * = 100
  7871F                                     * = (ICCL + ICCH +10)
  7872F                                     * ICCL + ICCH = 90
  7873F                                     * ICCL = ICH = 90/2 = 45
  7874F                                     * for I2C 400 kHz:
  7875F                                     * Tmaster = 2.5 µs * 150 MHz / 15
  7876F                                     * = 25
  7877F                                     * = (ICCL + ICCH +10)
  7878F                                     * ICCL + ICCH = 15
  7879F                                     * ICCL = 10
  7880F                                     * ICH = 5
  7881F                                     */
  7882T    I2caRegs.I2CMDR.bit.IRS = 1U ;/* Take I2C out of reset */
  7883T  }
  7884F 
