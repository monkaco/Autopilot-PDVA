     1F/*
     2FC TESTBED VERSION  : 9.4.4                                                                                               
     3FFILE UNDER TEST  : "F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\src\usr\dsp_i2c_adxl345.c"    
     4FDATE OF ANALYSIS : Fri Nov 07 10:51:31 2014                          
     5F*/
     6F/******************************************************************************
     7F* FILENAME: dsp_i2c_adxl345.h
     8F*
     9F* DESCRIPTION:
    10F* Function prototypes and defines of ADXL345 driver.
    11F*
    12F* FUNCTIONS:
    13F* int32_t ADXL_init (uint8_t*);
    14F* int32_t ADXL_self_test (uint8_t*);
    15F* int32_t ADXL_get_data (void);
    16F*
    17F* NOTES:
    18F* Functions and defines configure and gather data from the digital accelerometer ADXL345.
    19F*
    20F* REFERENCES:
    21F* Adapted from CH Robotics
    22F*
    23F* START DATE: 05 Set 2011
    24F*
    25F* CHANGES :
    26F*
    27F* VERSION DATE WHO DETAIL
    28F* 1.0 05 Set 2011 Rogerio Lima Start-up coding.
    29F* Plínio Pereira
    30F* -----------------------------------------------------------------------------
    31F* 2.0 30 Aug 2014 Rogerio Lima Improving code quality rewriting the
    32F* code and correcting errors.
    33F******************************************************************************/
    34F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Device.h */
    35F// TI File $Revision: /main/5 $
    36F// Checkin $Date: January 22, 2008 16:55:35 $
    37F//###########################################################################
    38F//
    39F// FILE: DSP2833x_Device.h
    40F//
    41F// TITLE: DSP2833x Device Definitions.
    42F//
    43F//###########################################################################
    44F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
    45F// $Release Date: August 4, 2009 $
    46F//###########################################################################
    47F#ifndef DSP2833x_DEVICE_H
    48F#define DSP2833x_DEVICE_H
    49F#define TARGET 1
    50F//---------------------------------------------------------------------------
    51F// User To Select Target Device:
    52F#define DSP28_28335 TARGET
    53F#define DSP28_28334 0
    54F#define DSP28_28332 0
    55F//---------------------------------------------------------------------------
    56F// Common CPU Definitions:
    57F//
    58F
    59Fextern cregister volatile unsigned int
    60F  IFR ;
    61F
    62Fextern cregister volatile unsigned int
    63F  IER ;
    64F#define EINT asm (" clrc INTM")
    65F#define DINT asm (" setc INTM")
    66F#define ERTM asm (" clrc DBGM")
    67F#define DRTM asm (" setc DBGM")
    68F#define EALLOW asm (" EALLOW")
    69F#define EDIS asm (" EDIS")
    70F#define ESTOP0 asm (" ESTOP0")
    71F#define M_INT1 0x0001
    72F#define M_INT2 0x0002
    73F#define M_INT3 0x0004
    74F#define M_INT4 0x0008
    75F#define M_INT5 0x0010
    76F#define M_INT6 0x0020
    77F#define M_INT7 0x0040
    78F#define M_INT8 0x0080
    79F#define M_INT9 0x0100
    80F#define M_INT10 0x0200
    81F#define M_INT11 0x0400
    82F#define M_INT12 0x0800
    83F#define M_INT13 0x1000
    84F#define M_INT14 0x2000
    85F#define M_DLOG 0x4000
    86F#define M_RTOS 0x8000
    87F#define BIT0 0x0001
    88F#define BIT1 0x0002
    89F#define BIT2 0x0004
    90F#define BIT3 0x0008
    91F#define BIT4 0x0010
    92F#define BIT5 0x0020
    93F#define BIT6 0x0040
    94F#define BIT7 0x0080
    95F#define BIT8 0x0100
    96F#define BIT9 0x0200
    97F#define BIT10 0x0400
    98F#define BIT11 0x0800
    99F#define BIT12 0x1000
   100F#define BIT13 0x2000
   101F#define BIT14 0x4000
   102F#define BIT15 0x8000
   103F//---------------------------------------------------------------------------
   104F// For Portability, User Is Recommended To Use Following Data Type Size
   105F// Definitions For 16-bit and 32-Bit Signed/Unsigned Integers:
   106F//
   107F#define DSP28_DATA_TYPES
   108F
   109Ftypedef
   110Fchar
   111F  int8 ;
   112F
   113Ftypedef
   114Fint
   115F  int16 ;
   116F
   117Ftypedef
   118Flong
   119F  int32 ;
   120F
   121Ftypedef
   122Flong long
   123F  int64 ;
   124F
   125Ftypedef
   126Funsigned char
   127F  Uint8 ;
   128F
   129Ftypedef
   130Funsigned int
   131F  Uint16 ;
   132F
   133Ftypedef
   134Funsigned long
   135F  Uint32 ;
   136F
   137Ftypedef
   138Funsigned long long
   139F  Uint64 ;
   140F
   141Ftypedef
   142Ffloat
   143F  float32 ;
   144F
   145Ftypedef
   146Flong double
   147F  float64 ;
   148F//---------------------------------------------------------------------------
   149F// Include All Peripheral Header Files:
   150F//
   151F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Adc.h */
   152F// TI File $Revision: /main/1 $
   153F// Checkin $Date: August 18, 2006 13:51:50 $
   154F//###########################################################################
   155F//
   156F// FILE: DSP2833x_Adc.h
   157F//
   158F// TITLE: DSP2833x Device ADC Register Definitions.
   159F//
   160F//###########################################################################
   161F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   162F// $Release Date: August 4, 2009 $
   163F//###########################################################################
   164F#ifndef DSP2833x_ADC_H
   165F#define DSP2833x_ADC_H
   166F//---------------------------------------------------------------------------
   167F// ADC Individual Register Bit Definitions:
   168F
   169Fstruct ADCTRL1_BITS
   170F{                     // bits description
   171F  Uint16 rsvd1 : 4 ;// 3:0 reserved
   172F  Uint16 SEQ_CASC : 1 ;// 4 Cascaded sequencer mode
   173F  Uint16 SEQ_OVRD : 1 ;// 5 Sequencer override
   174F  Uint16 CONT_RUN : 1 ;// 6 Continuous run
   175F  Uint16 CPS : 1 ;// 7 ADC core clock pre-scalar
   176F  Uint16 ACQ_PS : 4 ;// 11:8 Acquisition window size
   177F  Uint16 SUSMOD : 2 ;// 13:12 Emulation suspend mode
   178F  Uint16 RESET : 1 ;// 14 ADC reset
   179F  Uint16 rsvd2 : 1 ;// 15 reserved
   180F} ;
   181F
   182Funion ADCTRL1_REG
   183F{
   184F  Uint16 all ;
   185F  struct ADCTRL1_BITS bit ;
   186F} ;
   187F
   188Fstruct ADCTRL2_BITS
   189F{                     // bits description
   190F  Uint16 EPWM_SOCB_SEQ2 : 1 ;// 0 EPWM compare B SOC mask for SEQ2
   191F  Uint16 rsvd1 : 1 ;// 1 reserved
   192F  Uint16 INT_MOD_SEQ2 : 1 ;// 2 SEQ2 Interrupt mode
   193F  Uint16 INT_ENA_SEQ2 : 1 ;// 3 SEQ2 Interrupt enable
   194F  Uint16 rsvd2 : 1 ;// 4 reserved
   195F  Uint16 SOC_SEQ2 : 1 ;// 5 Start of conversion for SEQ2
   196F  Uint16 RST_SEQ2 : 1 ;// 6 Reset SEQ2
   197F  Uint16 EXT_SOC_SEQ1 : 1 ;// 7 External start of conversion for SEQ1
   198F  Uint16 EPWM_SOCA_SEQ1 : 1 ;// 8 EPWM compare B SOC mask for SEQ1
   199F  Uint16 rsvd3 : 1 ;// 9 reserved
   200F  Uint16 INT_MOD_SEQ1 : 1 ;// 10 SEQ1 Interrupt mode
   201F  Uint16 INT_ENA_SEQ1 : 1 ;// 11 SEQ1 Interrupt enable
   202F  Uint16 rsvd4 : 1 ;// 12 reserved
   203F  Uint16 SOC_SEQ1 : 1 ;// 13 Start of conversion trigger for SEQ1
   204F  Uint16 RST_SEQ1 : 1 ;// 14 Restart sequencer 1
   205F  Uint16 EPWM_SOCB_SEQ : 1 ;// 15 EPWM compare B SOC enable
   206F} ;
   207F
   208Funion ADCTRL2_REG
   209F{
   210F  Uint16 all ;
   211F  struct ADCTRL2_BITS bit ;
   212F} ;
   213F
   214Fstruct ADCASEQSR_BITS
   215F{                       // bits description
   216F  Uint16 SEQ1_STATE : 4 ;// 3:0 SEQ1 state
   217F  Uint16 SEQ2_STATE : 3 ;// 6:4 SEQ2 state
   218F  Uint16 rsvd1 : 1 ;// 7 reserved
   219F  Uint16 SEQ_CNTR : 4 ;// 11:8 Sequencing counter status
   220F  Uint16 rsvd2 : 4 ;// 15:12 reserved
   221F} ;
   222F
   223Funion ADCASEQSR_REG
   224F{
   225F  Uint16 all ;
   226F  struct ADCASEQSR_BITS bit ;
   227F} ;
   228F
   229Fstruct ADCMAXCONV_BITS
   230F{                        // bits description
   231F  Uint16 MAX_CONV1 : 4 ;// 3:0 Max number of conversions
   232F  Uint16 MAX_CONV2 : 3 ;// 6:4 Max number of conversions
   233F  Uint16 rsvd1 : 9 ;// 15:7 reserved
   234F} ;
   235F
   236Funion ADCMAXCONV_REG
   237F{
   238F  Uint16 all ;
   239F  struct ADCMAXCONV_BITS bit ;
   240F} ;
   241F
   242Fstruct ADCCHSELSEQ1_BITS
   243F{                          // bits description
   244F  Uint16 CONV00 : 4 ;// 3:0 Conversion selection 00
   245F  Uint16 CONV01 : 4 ;// 7:4 Conversion selection 01
   246F  Uint16 CONV02 : 4 ;// 11:8 Conversion selection 02
   247F  Uint16 CONV03 : 4 ;// 15:12 Conversion selection 03
   248F} ;
   249F
   250Funion ADCCHSELSEQ1_REG
   251F{
   252F  Uint16 all ;
   253F  struct ADCCHSELSEQ1_BITS bit ;
   254F} ;
   255F
   256Fstruct ADCCHSELSEQ2_BITS
   257F{                          // bits description
   258F  Uint16 CONV04 : 4 ;// 3:0 Conversion selection 04
   259F  Uint16 CONV05 : 4 ;// 7:4 Conversion selection 05
   260F  Uint16 CONV06 : 4 ;// 11:8 Conversion selection 06
   261F  Uint16 CONV07 : 4 ;// 15:12 Conversion selection 07
   262F} ;
   263F
   264Funion ADCCHSELSEQ2_REG
   265F{
   266F  Uint16 all ;
   267F  struct ADCCHSELSEQ2_BITS bit ;
   268F} ;
   269F
   270Fstruct ADCCHSELSEQ3_BITS
   271F{                          // bits description
   272F  Uint16 CONV08 : 4 ;// 3:0 Conversion selection 08
   273F  Uint16 CONV09 : 4 ;// 7:4 Conversion selection 09
   274F  Uint16 CONV10 : 4 ;// 11:8 Conversion selection 10
   275F  Uint16 CONV11 : 4 ;// 15:12 Conversion selection 11
   276F} ;
   277F
   278Funion ADCCHSELSEQ3_REG
   279F{
   280F  Uint16 all ;
   281F  struct ADCCHSELSEQ3_BITS bit ;
   282F} ;
   283F
   284Fstruct ADCCHSELSEQ4_BITS
   285F{                          // bits description
   286F  Uint16 CONV12 : 4 ;// 3:0 Conversion selection 12
   287F  Uint16 CONV13 : 4 ;// 7:4 Conversion selection 13
   288F  Uint16 CONV14 : 4 ;// 11:8 Conversion selection 14
   289F  Uint16 CONV15 : 4 ;// 15:12 Conversion selection 15
   290F} ;
   291F
   292Funion ADCCHSELSEQ4_REG
   293F{
   294F  Uint16 all ;
   295F  struct ADCCHSELSEQ4_BITS bit ;
   296F} ;
   297F
   298Fstruct ADCTRL3_BITS
   299F{                     // bits description
   300F  Uint16 SMODE_SEL : 1 ;// 0 Sampling mode select
   301F  Uint16 ADCCLKPS : 4 ;// 4:1 ADC core clock divider
   302F  Uint16 ADCPWDN : 1 ;// 5 ADC powerdown
   303F  Uint16 ADCBGRFDN : 2 ;// 7:6 ADC bandgap/ref power down
   304F  Uint16 rsvd1 : 8 ;// 15:8 reserved
   305F} ;
   306F
   307Funion ADCTRL3_REG
   308F{
   309F  Uint16 all ;
   310F  struct ADCTRL3_BITS bit ;
   311F} ;
   312F
   313Fstruct ADCST_BITS
   314F{                   // bits description
   315F  Uint16 INT_SEQ1 : 1 ;// 0 SEQ1 Interrupt flag
   316F  Uint16 INT_SEQ2 : 1 ;// 1 SEQ2 Interrupt flag
   317F  Uint16 SEQ1_BSY : 1 ;// 2 SEQ1 busy status
   318F  Uint16 SEQ2_BSY : 1 ;// 3 SEQ2 busy status
   319F  Uint16 INT_SEQ1_CLR : 1 ;// 4 SEQ1 Interrupt clear
   320F  Uint16 INT_SEQ2_CLR : 1 ;// 5 SEQ2 Interrupt clear
   321F  Uint16 EOS_BUF1 : 1 ;// 6 End of sequence buffer1
   322F  Uint16 EOS_BUF2 : 1 ;// 7 End of sequence buffer2
   323F  Uint16 rsvd1 : 8 ;// 15:8 reserved
   324F} ;
   325F
   326Funion ADCST_REG
   327F{
   328F  Uint16 all ;
   329F  struct ADCST_BITS bit ;
   330F} ;
   331F
   332Fstruct ADCREFSEL_BITS
   333F{                       // bits description
   334F  Uint16 rsvd1 : 14 ;    // 13:0 reserved
   335F  Uint16 REF_SEL : 2 ;    // 15:14 Reference select
   336F} ;
   337F
   338Funion ADCREFSEL_REG
   339F{
   340F  Uint16 all ;
   341F  struct ADCREFSEL_BITS bit ;
   342F} ;
   343F
   344Fstruct ADCOFFTRIM_BITS
   345F{                       // bits description
   346F  int16 OFFSET_TRIM : 9 ;    // 8:0 Offset Trim
   347F  Uint16 rsvd1 : 7 ;    // 15:9 reserved
   348F} ;
   349F
   350Funion ADCOFFTRIM_REG
   351F{
   352F  Uint16 all ;
   353F  struct ADCOFFTRIM_BITS bit ;
   354F} ;
   355F
   356Fstruct ADC_REGS
   357F{
   358F  union ADCTRL1_REG ADCTRL1 ;  // ADC Control 1
   359F  union ADCTRL2_REG ADCTRL2 ;  // ADC Control 2
   360F  union ADCMAXCONV_REG ADCMAXCONV ;  // Max conversions
   361F  union ADCCHSELSEQ1_REG ADCCHSELSEQ1 ;  // Channel select sequencing control 1
   362F  union ADCCHSELSEQ2_REG ADCCHSELSEQ2 ;  // Channel select sequencing control 2
   363F  union ADCCHSELSEQ3_REG ADCCHSELSEQ3 ;  // Channel select sequencing control 3
   364F  union ADCCHSELSEQ4_REG ADCCHSELSEQ4 ;  // Channel select sequencing control 4
   365F  union ADCASEQSR_REG ADCASEQSR ;  // Autosequence status register
   366F  Uint16 ADCRESULT0 ;  // Conversion Result Buffer 0
   367F  Uint16 ADCRESULT1 ;  // Conversion Result Buffer 1
   368F  Uint16 ADCRESULT2 ;  // Conversion Result Buffer 2
   369F  Uint16 ADCRESULT3 ;  // Conversion Result Buffer 3
   370F  Uint16 ADCRESULT4 ;  // Conversion Result Buffer 4
   371F  Uint16 ADCRESULT5 ;  // Conversion Result Buffer 5
   372F  Uint16 ADCRESULT6 ;  // Conversion Result Buffer 6
   373F  Uint16 ADCRESULT7 ;  // Conversion Result Buffer 7
   374F  Uint16 ADCRESULT8 ;  // Conversion Result Buffer 8
   375F  Uint16 ADCRESULT9 ;  // Conversion Result Buffer 9
   376F  Uint16 ADCRESULT10 ;  // Conversion Result Buffer 10
   377F  Uint16 ADCRESULT11 ;  // Conversion Result Buffer 11
   378F  Uint16 ADCRESULT12 ;  // Conversion Result Buffer 12
   379F  Uint16 ADCRESULT13 ;  // Conversion Result Buffer 13
   380F  Uint16 ADCRESULT14 ;  // Conversion Result Buffer 14
   381F  Uint16 ADCRESULT15 ;  // Conversion Result Buffer 15
   382F  union ADCTRL3_REG ADCTRL3 ;  // ADC Control 3
   383F  union ADCST_REG ADCST ;  // ADC Status Register
   384F  Uint16 rsvd1 ;
   385F  Uint16 rsvd2 ;
   386F  union ADCREFSEL_REG ADCREFSEL ;  // Reference Select Register
   387F  union ADCOFFTRIM_REG ADCOFFTRIM ;  // Offset Trim Register
   388F} ;
   389F
   390Fstruct ADC_RESULT_MIRROR_REGS
   391F{
   392F  Uint16 ADCRESULT0 ;  // Conversion Result Buffer 0
   393F  Uint16 ADCRESULT1 ;  // Conversion Result Buffer 1
   394F  Uint16 ADCRESULT2 ;  // Conversion Result Buffer 2
   395F  Uint16 ADCRESULT3 ;  // Conversion Result Buffer 3
   396F  Uint16 ADCRESULT4 ;  // Conversion Result Buffer 4
   397F  Uint16 ADCRESULT5 ;  // Conversion Result Buffer 5
   398F  Uint16 ADCRESULT6 ;  // Conversion Result Buffer 6
   399F  Uint16 ADCRESULT7 ;  // Conversion Result Buffer 7
   400F  Uint16 ADCRESULT8 ;  // Conversion Result Buffer 8
   401F  Uint16 ADCRESULT9 ;  // Conversion Result Buffer 9
   402F  Uint16 ADCRESULT10 ;  // Conversion Result Buffer 10
   403F  Uint16 ADCRESULT11 ;  // Conversion Result Buffer 11
   404F  Uint16 ADCRESULT12 ;  // Conversion Result Buffer 12
   405F  Uint16 ADCRESULT13 ;  // Conversion Result Buffer 13
   406F  Uint16 ADCRESULT14 ;  // Conversion Result Buffer 14
   407F  Uint16 ADCRESULT15 ;  // Conversion Result Buffer 15
   408F} ;
   409F//---------------------------------------------------------------------------
   410F// ADC External References & Function Declarations:
   411F//
   412F
   413Fextern volatile struct ADC_REGS
   414F  AdcRegs ;
   415F
   416Fextern volatile struct ADC_RESULT_MIRROR_REGS
   417F  AdcMirror ;
   418F       /* extern "C" */
   419F       // end of DSP2833x_ADC_H definition
   420F//===========================================================================
   421F// End of file.
   422F//===========================================================================
   423F 
   424F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Adc.h*/
   425F/*   CLOSE_FILE Include File */
   426F 
   427F                // ADC Registers
   428F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DevEmu.h */
   429F// TI File $Revision: /main/4 $
   430F// Checkin $Date: April 15, 2009 10:05:17 $
   431F//###########################################################################
   432F//
   433F// FILE: DSP2833x_DevEmu.h
   434F//
   435F// TITLE: DSP2833x Device Emulation Register Definitions.
   436F//
   437F//###########################################################################
   438F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   439F// $Release Date: August 4, 2009 $
   440F//###########################################################################
   441F#ifndef DSP2833x_DEV_EMU_H
   442F#define DSP2833x_DEV_EMU_H
   443F//---------------------------------------------------------------------------
   444F// Device Emulation Register Bit Definitions:
   445F//
   446F// Device Configuration Register Bit Definitions
   447F
   448Fstruct DEVICECNF_BITS
   449F{                       // bits description
   450F  Uint16 rsvd1 : 3 ;
   451F                   // 2:0 reserved
   452F  Uint16 VMAPS : 1 ;
   453F                   // 3 VMAP Status
   454F  Uint16 rsvd2 : 1 ;
   455F                   // 4 reserved
   456F  Uint16 XRSn : 1 ;
   457F                  // 5 XRSn Signal Status
   458F  Uint16 rsvd3 : 10 ;
   459F                    // 15:6
   460F  Uint16 rsvd4 : 3 ;
   461F                   // 18:16
   462F  Uint16 ENPROT : 1 ;
   463F                    // 19 Enable/Disable pipeline protection
   464F  Uint16 rsvd5 : 7 ;
   465F                   // 26:20 reserved
   466F  Uint16 TRSTN : 1 ;
   467F                   // 27 Status of TRSTn signal
   468F  Uint16 rsvd6 : 4 ;
   469F                   // 31:28 reserved
   470F} ;
   471F
   472Funion DEVICECNF_REG
   473F{
   474F  Uint32 all ;
   475F  struct DEVICECNF_BITS bit ;
   476F} ;
   477F// CLASSID
   478F
   479Fstruct CLASSID_BITS
   480F{                     // bits description
   481F  Uint16 CLASSNO : 8 ;
   482F                     // 7:0 Class Number
   483F  Uint16 PARTTYPE : 8 ;
   484F                      // 15:8 Part Type
   485F} ;
   486F
   487Funion CLASSID_REG
   488F{
   489F  Uint16 all ;
   490F  struct CLASSID_BITS bit ;
   491F} ;
   492F
   493Fstruct DEV_EMU_REGS
   494F{
   495F  union DEVICECNF_REG DEVICECNF ; // device configuration
   496F  union CLASSID_REG CLASSID ; // Class ID
   497F  Uint16 REVID ; // Device ID
   498F  Uint16 PROTSTART ; // Write-Read protection start
   499F  Uint16 PROTRANGE ; // Write-Read protection range
   500F  Uint16 rsvd2 [ 202 ] ;
   501F} ;
   502F// PARTID
   503F
   504Fstruct PARTID_BITS
   505F{                    // bits description
   506F  Uint16 PARTNO : 8 ;
   507F                    // 7:0 Part Number
   508F  Uint16 PARTTYPE : 8 ;
   509F                      // 15:8 Part Type
   510F} ;
   511F
   512Funion PARTID_REG
   513F{
   514F  Uint16 all ;
   515F  struct PARTID_BITS bit ;
   516F} ;
   517F
   518Fstruct PARTID_REGS
   519F{
   520F  union PARTID_REG PARTID ; // Part ID
   521F} ;
   522F//---------------------------------------------------------------------------
   523F// Device Emulation Register References & Function Declarations:
   524F//
   525F
   526Fextern volatile struct DEV_EMU_REGS
   527F  DevEmuRegs ;
   528F
   529Fextern volatile struct PARTID_REGS
   530F  PartIdRegs ;
   531F       /* extern "C" */
   532F       // end of DSP2833x_DEV_EMU_H definition
   533F//===========================================================================
   534F// End of file.
   535F//===========================================================================
   536F 
   537F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DevEmu.h*/
   538F/*   CLOSE_FILE Include File */
   539F 
   540F             // Device Emulation Registers
   541F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_CpuTimers.h */
   542F// TI File $Revision: /main/4 $
   543F// Checkin $Date: March 20, 2007 15:33:42 $
   544F//###########################################################################
   545F//
   546F// FILE: DSP2833x_CpuTimers.h
   547F//
   548F// TITLE: DSP2833x CPU 32-bit Timers Register Definitions.
   549F//
   550F// NOTES: CpuTimer1 and CpuTimer2 are reserved for use with DSP BIOS and
   551F// other realtime operating systems.
   552F//
   553F// Do not use these two timers in your application if you ever plan
   554F// on integrating DSP-BIOS or another realtime OS.
   555F//
   556F// For this reason, comment out the code to manipulate these two timers
   557F// if using DSP-BIOS or another realtime OS.
   558F//
   559F//###########################################################################
   560F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   561F// $Release Date: August 4, 2009 $
   562F//###########################################################################
   563F#ifndef DSP2833x_CPU_TIMERS_H
   564F#define DSP2833x_CPU_TIMERS_H
   565F//---------------------------------------------------------------------------
   566F// CPU Timer Register Bit Definitions:
   567F//
   568F//
   569F// TCR: Control register bit definitions:
   570F
   571Fstruct TCR_BITS
   572F{                 // bits description
   573F  Uint16 rsvd1 : 4 ;
   574F                   // 3:0 reserved
   575F  Uint16 TSS : 1 ;
   576F                 // 4 Timer Start/Stop
   577F  Uint16 TRB : 1 ;
   578F                 // 5 Timer reload
   579F  Uint16 rsvd2 : 4 ;
   580F                   // 9:6 reserved
   581F  Uint16 SOFT : 1 ;
   582F                  // 10 Emulation modes
   583F  Uint16 FREE : 1 ;
   584F                  // 11
   585F  Uint16 rsvd3 : 2 ;
   586F                   // 12:13 reserved
   587F  Uint16 TIE : 1 ;
   588F                 // 14 Output enable
   589F  Uint16 TIF : 1 ;
   590F                 // 15 Interrupt flag
   591F} ;
   592F
   593Funion TCR_REG
   594F{
   595F  Uint16 all ;
   596F  struct TCR_BITS bit ;
   597F} ;
   598F// TPR: Pre-scale low bit definitions:
   599F
   600Fstruct TPR_BITS
   601F{                 // bits description
   602F  Uint16 TDDR : 8 ;
   603F                  // 7:0 Divide-down low
   604F  Uint16 PSC : 8 ;
   605F                 // 15:8 Prescale counter low
   606F} ;
   607F
   608Funion TPR_REG
   609F{
   610F  Uint16 all ;
   611F  struct TPR_BITS bit ;
   612F} ;
   613F// TPRH: Pre-scale high bit definitions:
   614F
   615Fstruct TPRH_BITS
   616F{                  // bits description
   617F  Uint16 TDDRH : 8 ;
   618F                   // 7:0 Divide-down high
   619F  Uint16 PSCH : 8 ;
   620F                  // 15:8 Prescale counter high
   621F} ;
   622F
   623Funion TPRH_REG
   624F{
   625F  Uint16 all ;
   626F  struct TPRH_BITS bit ;
   627F} ;
   628F// TIM, TIMH: Timer register definitions:
   629F
   630Fstruct TIM_REG
   631F{
   632F  Uint16 LSW ;
   633F  Uint16 MSW ;
   634F} ;
   635F
   636Funion TIM_GROUP
   637F{
   638F  Uint32 all ;
   639F  struct TIM_REG half ;
   640F} ;
   641F// PRD, PRDH: Period register definitions:
   642F
   643Fstruct PRD_REG
   644F{
   645F  Uint16 LSW ;
   646F  Uint16 MSW ;
   647F} ;
   648F
   649Funion PRD_GROUP
   650F{
   651F  Uint32 all ;
   652F  struct PRD_REG half ;
   653F} ;
   654F//---------------------------------------------------------------------------
   655F// CPU Timer Register File:
   656F//
   657F
   658Fstruct CPUTIMER_REGS
   659F{
   660F  union TIM_GROUP TIM ; // Timer counter register
   661F  union PRD_GROUP PRD ; // Period register
   662F  union TCR_REG TCR ; // Timer control register
   663F  Uint16 rsvd1 ; // reserved
   664F  union TPR_REG TPR ; // Timer pre-scale low
   665F  union TPRH_REG TPRH ; // Timer pre-scale high
   666F} ;
   667F//---------------------------------------------------------------------------
   668F// CPU Timer Support Variables:
   669F//
   670F
   671Fstruct CPUTIMER_VARS
   672F{
   673F  volatile struct CPUTIMER_REGS * RegsAddr ;
   674F  Uint32 InterruptCount ;
   675F  float CPUFreqInMHz ;
   676F  float PeriodInUSec ;
   677F} ;
   678F//---------------------------------------------------------------------------
   679F// Function prototypes and external definitions:
   680F//
   681F
   682Fvoid
   683F  InitCpuTimers ( void ) ;
   684F
   685Fvoid
   686T  ConfigCpuTimer (
   687F  struct CPUTIMER_VARS * Timer ,
   688F  float Freq ,
   689F  float Period ) ;
   690F
   691Fextern volatile struct CPUTIMER_REGS
   692F  CpuTimer0Regs ;
   693F
   694Fextern struct CPUTIMER_VARS
   695F  CpuTimer0 ;
   696F// CpuTimer 1 and CpuTimer2 are reserved for DSP BIOS & other RTOS. Comment out CpuTimer1 and CpuTimer2 if using DSP BIOS or other RTOS
   697F
   698Fextern volatile struct CPUTIMER_REGS
   699F  CpuTimer1Regs ;
   700F
   701Fextern volatile struct CPUTIMER_REGS
   702F  CpuTimer2Regs ;
   703F
   704Fextern struct CPUTIMER_VARS
   705F  CpuTimer1 ;
   706F
   707Fextern struct CPUTIMER_VARS
   708F  CpuTimer2 ;
   709F//---------------------------------------------------------------------------
   710F// Usefull Timer Operations:
   711F//
   712F// Start Timer:
   713F#define StartCpuTimer0( ) CpuTimer0Regs . TCR . bit . TSS = 0
   714F// Stop Timer:
   715F#define StopCpuTimer0( ) CpuTimer0Regs . TCR . bit . TSS = 1
   716F// Reload Timer With period Value:
   717F#define ReloadCpuTimer0( ) CpuTimer0Regs . TCR . bit . TRB = 1
   718F// Read 32-Bit Timer Value:
   719F#define ReadCpuTimer0Counter( ) CpuTimer0Regs . TIM . all
   720F// Read 32-Bit Period Value:
   721F#define ReadCpuTimer0Period( ) CpuTimer0Regs . PRD . all
   722F// CpuTimer 1 and CpuTimer2 are reserved for DSP BIOS & other RTOS
   723F// Do not use these two timers if you ever plan on integrating
   724F// DSP-BIOS or another realtime OS.
   725F//
   726F// For this reason, comment out the code to manipulate these two timers
   727F// if using DSP-BIOS or another realtime OS.
   728F// Start Timer:
   729F#define StartCpuTimer1( ) CpuTimer1Regs . TCR . bit . TSS = 0
   730F#define StartCpuTimer2( ) CpuTimer2Regs . TCR . bit . TSS = 0
   731F// Stop Timer:
   732F#define StopCpuTimer1( ) CpuTimer1Regs . TCR . bit . TSS = 1
   733F#define StopCpuTimer2( ) CpuTimer2Regs . TCR . bit . TSS = 1
   734F// Reload Timer With period Value:
   735F#define ReloadCpuTimer1( ) CpuTimer1Regs . TCR . bit . TRB = 1
   736F#define ReloadCpuTimer2( ) CpuTimer2Regs . TCR . bit . TRB = 1
   737F// Read 32-Bit Timer Value:
   738F#define ReadCpuTimer1Counter( ) CpuTimer1Regs . TIM . all
   739F#define ReadCpuTimer2Counter( ) CpuTimer2Regs . TIM . all
   740F// Read 32-Bit Period Value:
   741F#define ReadCpuTimer1Period( ) CpuTimer1Regs . PRD . all
   742F#define ReadCpuTimer2Period( ) CpuTimer2Regs . PRD . all
   743F       /* extern "C" */
   744F       // end of DSP2833x_CPU_TIMERS_H definition
   745F//===========================================================================
   746F// End of file.
   747F//===========================================================================
   748F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_CpuTimers.h*/
   749F/*   CLOSE_FILE Include File */
   750F 
   751F          // 32-bit CPU Timers
   752F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECan.h */
   753F// TI File $Revision: /main/2 $
   754F// Checkin $Date: May 7, 2007 16:05:39 $
   755F//###########################################################################
   756F//
   757F// FILE: DSP2833x_ECan.h
   758F//
   759F// TITLE: DSP2833x Device eCAN Register Definitions.
   760F//
   761F//###########################################################################
   762F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   763F// $Release Date: August 4, 2009 $
   764F//###########################################################################
   765F#ifndef DSP2833x_ECAN_H
   766F#define DSP2833x_ECAN_H
   767F/* --------------------------------------------------- */
   768F/* eCAN Control & Status Registers */
   769F/* ----------------------------------------------------*/
   770F/* eCAN Mailbox enable register (CANME) bit definitions */
   771F
   772Fstruct CANME_BITS
   773F{                   // bit description
   774F  Uint16 ME0 : 1 ;
   775F                 // 0 Enable Mailbox 0
   776F  Uint16 ME1 : 1 ;
   777F                 // 1 Enable Mailbox 1
   778F  Uint16 ME2 : 1 ;
   779F                 // 2 Enable Mailbox 2
   780F  Uint16 ME3 : 1 ;
   781F                 // 3 Enable Mailbox 3
   782F  Uint16 ME4 : 1 ;
   783F                 // 4 Enable Mailbox 4
   784F  Uint16 ME5 : 1 ;
   785F                 // 5 Enable Mailbox 5
   786F  Uint16 ME6 : 1 ;
   787F                 // 6 Enable Mailbox 6
   788F  Uint16 ME7 : 1 ;
   789F                 // 7 Enable Mailbox 7
   790F  Uint16 ME8 : 1 ;
   791F                 // 8 Enable Mailbox 8
   792F  Uint16 ME9 : 1 ;
   793F                 // 9 Enable Mailbox 9
   794F  Uint16 ME10 : 1 ;
   795F                  // 10 Enable Mailbox 10
   796F  Uint16 ME11 : 1 ;
   797F                  // 11 Enable Mailbox 11
   798F  Uint16 ME12 : 1 ;
   799F                  // 12 Enable Mailbox 12
   800F  Uint16 ME13 : 1 ;
   801F                  // 13 Enable Mailbox 13
   802F  Uint16 ME14 : 1 ;
   803F                  // 14 Enable Mailbox 14
   804F  Uint16 ME15 : 1 ;
   805F                  // 15 Enable Mailbox 15
   806F  Uint16 ME16 : 1 ;
   807F                  // 16 Enable Mailbox 16
   808F  Uint16 ME17 : 1 ;
   809F                  // 17 Enable Mailbox 17
   810F  Uint16 ME18 : 1 ;
   811F                  // 18 Enable Mailbox 18
   812F  Uint16 ME19 : 1 ;
   813F                  // 19 Enable Mailbox 19
   814F  Uint16 ME20 : 1 ;
   815F                  // 20 Enable Mailbox 20
   816F  Uint16 ME21 : 1 ;
   817F                  // 21 Enable Mailbox 21
   818F  Uint16 ME22 : 1 ;
   819F                  // 22 Enable Mailbox 22
   820F  Uint16 ME23 : 1 ;
   821F                  // 23 Enable Mailbox 23
   822F  Uint16 ME24 : 1 ;
   823F                  // 24 Enable Mailbox 24
   824F  Uint16 ME25 : 1 ;
   825F                  // 25 Enable Mailbox 25
   826F  Uint16 ME26 : 1 ;
   827F                  // 26 Enable Mailbox 26
   828F  Uint16 ME27 : 1 ;
   829F                  // 27 Enable Mailbox 27
   830F  Uint16 ME28 : 1 ;
   831F                  // 28 Enable Mailbox 28
   832F  Uint16 ME29 : 1 ;
   833F                  // 29 Enable Mailbox 29
   834F  Uint16 ME30 : 1 ;
   835F                  // 30 Enable Mailbox 30
   836F  Uint16 ME31 : 1 ;
   837F                  // 31 Enable Mailbox 31
   838F} ;
   839F/* Allow access to the bit fields or entire register */
   840F
   841Funion CANME_REG
   842F{
   843F  Uint32 all ;
   844F  struct CANME_BITS bit ;
   845F} ;
   846F/* eCAN Mailbox direction register (CANMD) bit definitions */
   847F
   848Fstruct CANMD_BITS
   849F{                   // bit description
   850F  Uint16 MD0 : 1 ;
   851F                 // 0 0 -> Tx 1 -> Rx
   852F  Uint16 MD1 : 1 ;
   853F                 // 1 0 -> Tx 1 -> Rx
   854F  Uint16 MD2 : 1 ;
   855F                 // 2 0 -> Tx 1 -> Rx
   856F  Uint16 MD3 : 1 ;
   857F                 // 3 0 -> Tx 1 -> Rx
   858F  Uint16 MD4 : 1 ;
   859F                 // 4 0 -> Tx 1 -> Rx
   860F  Uint16 MD5 : 1 ;
   861F                 // 5 0 -> Tx 1 -> Rx
   862F  Uint16 MD6 : 1 ;
   863F                 // 6 0 -> Tx 1 -> Rx
   864F  Uint16 MD7 : 1 ;
   865F                 // 7 0 -> Tx 1 -> Rx
   866F  Uint16 MD8 : 1 ;
   867F                 // 8 0 -> Tx 1 -> Rx
   868F  Uint16 MD9 : 1 ;
   869F                 // 9 0 -> Tx 1 -> Rx
   870F  Uint16 MD10 : 1 ;
   871F                  // 10 0 -> Tx 1 -> Rx
   872F  Uint16 MD11 : 1 ;
   873F                  // 11 0 -> Tx 1 -> Rx
   874F  Uint16 MD12 : 1 ;
   875F                  // 12 0 -> Tx 1 -> Rx
   876F  Uint16 MD13 : 1 ;
   877F                  // 13 0 -> Tx 1 -> Rx
   878F  Uint16 MD14 : 1 ;
   879F                  // 14 0 -> Tx 1 -> Rx
   880F  Uint16 MD15 : 1 ;
   881F                  // 15 0 -> Tx 1 -> Rx
   882F  Uint16 MD16 : 1 ;
   883F                  // 16 0 -> Tx 1 -> Rx
   884F  Uint16 MD17 : 1 ;
   885F                  // 17 0 -> Tx 1 -> Rx
   886F  Uint16 MD18 : 1 ;
   887F                  // 18 0 -> Tx 1 -> Rx
   888F  Uint16 MD19 : 1 ;
   889F                  // 19 0 -> Tx 1 -> Rx
   890F  Uint16 MD20 : 1 ;
   891F                  // 20 0 -> Tx 1 -> Rx
   892F  Uint16 MD21 : 1 ;
   893F                  // 21 0 -> Tx 1 -> Rx
   894F  Uint16 MD22 : 1 ;
   895F                  // 22 0 -> Tx 1 -> Rx
   896F  Uint16 MD23 : 1 ;
   897F                  // 23 0 -> Tx 1 -> Rx
   898F  Uint16 MD24 : 1 ;
   899F                  // 24 0 -> Tx 1 -> Rx
   900F  Uint16 MD25 : 1 ;
   901F                  // 25 0 -> Tx 1 -> Rx
   902F  Uint16 MD26 : 1 ;
   903F                  // 26 0 -> Tx 1 -> Rx
   904F  Uint16 MD27 : 1 ;
   905F                  // 27 0 -> Tx 1 -> Rx
   906F  Uint16 MD28 : 1 ;
   907F                  // 28 0 -> Tx 1 -> Rx
   908F  Uint16 MD29 : 1 ;
   909F                  // 29 0 -> Tx 1 -> Rx
   910F  Uint16 MD30 : 1 ;
   911F                  // 30 0 -> Tx 1 -> Rx
   912F  Uint16 MD31 : 1 ;
   913F                  // 31 0 -> Tx 1 -> Rx
   914F} ;
   915F/* Allow access to the bit fields or entire register */
   916F
   917Funion CANMD_REG
   918F{
   919F  Uint32 all ;
   920F  struct CANMD_BITS bit ;
   921F} ;
   922F/* eCAN Transmit Request Set register (CANTRS) bit definitions */
   923F
   924Fstruct CANTRS_BITS
   925F{                    // bit description
   926F  Uint16 TRS0 : 1 ;
   927F                  // 0 TRS for Mailbox 0
   928F  Uint16 TRS1 : 1 ;
   929F                  // 1 TRS for Mailbox 1
   930F  Uint16 TRS2 : 1 ;
   931F                  // 2 TRS for Mailbox 2
   932F  Uint16 TRS3 : 1 ;
   933F                  // 3 TRS for Mailbox 3
   934F  Uint16 TRS4 : 1 ;
   935F                  // 4 TRS for Mailbox 4
   936F  Uint16 TRS5 : 1 ;
   937F                  // 5 TRS for Mailbox 5
   938F  Uint16 TRS6 : 1 ;
   939F                  // 6 TRS for Mailbox 6
   940F  Uint16 TRS7 : 1 ;
   941F                  // 7 TRS for Mailbox 7
   942F  Uint16 TRS8 : 1 ;
   943F                  // 8 TRS for Mailbox 8
   944F  Uint16 TRS9 : 1 ;
   945F                  // 9 TRS for Mailbox 9
   946F  Uint16 TRS10 : 1 ;
   947F                   // 10 TRS for Mailbox 10
   948F  Uint16 TRS11 : 1 ;
   949F                   // 11 TRS for Mailbox 11
   950F  Uint16 TRS12 : 1 ;
   951F                   // 12 TRS for Mailbox 12
   952F  Uint16 TRS13 : 1 ;
   953F                   // 13 TRS for Mailbox 13
   954F  Uint16 TRS14 : 1 ;
   955F                   // 14 TRS for Mailbox 14
   956F  Uint16 TRS15 : 1 ;
   957F                   // 15 TRS for Mailbox 15
   958F  Uint16 TRS16 : 1 ;
   959F                   // 16 TRS for Mailbox 16
   960F  Uint16 TRS17 : 1 ;
   961F                   // 17 TRS for Mailbox 17
   962F  Uint16 TRS18 : 1 ;
   963F                   // 18 TRS for Mailbox 18
   964F  Uint16 TRS19 : 1 ;
   965F                   // 19 TRS for Mailbox 19
   966F  Uint16 TRS20 : 1 ;
   967F                   // 20 TRS for Mailbox 20
   968F  Uint16 TRS21 : 1 ;
   969F                   // 21 TRS for Mailbox 21
   970F  Uint16 TRS22 : 1 ;
   971F                   // 22 TRS for Mailbox 22
   972F  Uint16 TRS23 : 1 ;
   973F                   // 23 TRS for Mailbox 23
   974F  Uint16 TRS24 : 1 ;
   975F                   // 24 TRS for Mailbox 24
   976F  Uint16 TRS25 : 1 ;
   977F                   // 25 TRS for Mailbox 25
   978F  Uint16 TRS26 : 1 ;
   979F                   // 26 TRS for Mailbox 26
   980F  Uint16 TRS27 : 1 ;
   981F                   // 27 TRS for Mailbox 27
   982F  Uint16 TRS28 : 1 ;
   983F                   // 28 TRS for Mailbox 28
   984F  Uint16 TRS29 : 1 ;
   985F                   // 29 TRS for Mailbox 29
   986F  Uint16 TRS30 : 1 ;
   987F                   // 30 TRS for Mailbox 30
   988F  Uint16 TRS31 : 1 ;
   989F                   // 31 TRS for Mailbox 31
   990F} ;
   991F/* Allow access to the bit fields or entire register */
   992F
   993Funion CANTRS_REG
   994F{
   995F  Uint32 all ;
   996F  struct CANTRS_BITS bit ;
   997F} ;
   998F/* eCAN Transmit Request Reset register (CANTRR) bit definitions */
   999F
  1000Fstruct CANTRR_BITS
  1001F{                    // bit description
  1002F  Uint16 TRR0 : 1 ;
  1003F                  // 0 TRR for Mailbox 0
  1004F  Uint16 TRR1 : 1 ;
  1005F                  // 1 TRR for Mailbox 1
  1006F  Uint16 TRR2 : 1 ;
  1007F                  // 2 TRR for Mailbox 2
  1008F  Uint16 TRR3 : 1 ;
  1009F                  // 3 TRR for Mailbox 3
  1010F  Uint16 TRR4 : 1 ;
  1011F                  // 4 TRR for Mailbox 4
  1012F  Uint16 TRR5 : 1 ;
  1013F                  // 5 TRR for Mailbox 5
  1014F  Uint16 TRR6 : 1 ;
  1015F                  // 6 TRR for Mailbox 6
  1016F  Uint16 TRR7 : 1 ;
  1017F                  // 7 TRR for Mailbox 7
  1018F  Uint16 TRR8 : 1 ;
  1019F                  // 8 TRR for Mailbox 8
  1020F  Uint16 TRR9 : 1 ;
  1021F                  // 9 TRR for Mailbox 9
  1022F  Uint16 TRR10 : 1 ;
  1023F                   // 10 TRR for Mailbox 10
  1024F  Uint16 TRR11 : 1 ;
  1025F                   // 11 TRR for Mailbox 11
  1026F  Uint16 TRR12 : 1 ;
  1027F                   // 12 TRR for Mailbox 12
  1028F  Uint16 TRR13 : 1 ;
  1029F                   // 13 TRR for Mailbox 13
  1030F  Uint16 TRR14 : 1 ;
  1031F                   // 14 TRR for Mailbox 14
  1032F  Uint16 TRR15 : 1 ;
  1033F                   // 15 TRR for Mailbox 15
  1034F  Uint16 TRR16 : 1 ;
  1035F                   // 16 TRR for Mailbox 16
  1036F  Uint16 TRR17 : 1 ;
  1037F                   // 17 TRR for Mailbox 17
  1038F  Uint16 TRR18 : 1 ;
  1039F                   // 18 TRR for Mailbox 18
  1040F  Uint16 TRR19 : 1 ;
  1041F                   // 19 TRR for Mailbox 19
  1042F  Uint16 TRR20 : 1 ;
  1043F                   // 20 TRR for Mailbox 20
  1044F  Uint16 TRR21 : 1 ;
  1045F                   // 21 TRR for Mailbox 21
  1046F  Uint16 TRR22 : 1 ;
  1047F                   // 22 TRR for Mailbox 22
  1048F  Uint16 TRR23 : 1 ;
  1049F                   // 23 TRR for Mailbox 23
  1050F  Uint16 TRR24 : 1 ;
  1051F                   // 24 TRR for Mailbox 24
  1052F  Uint16 TRR25 : 1 ;
  1053F                   // 25 TRR for Mailbox 25
  1054F  Uint16 TRR26 : 1 ;
  1055F                   // 26 TRR for Mailbox 26
  1056F  Uint16 TRR27 : 1 ;
  1057F                   // 27 TRR for Mailbox 27
  1058F  Uint16 TRR28 : 1 ;
  1059F                   // 28 TRR for Mailbox 28
  1060F  Uint16 TRR29 : 1 ;
  1061F                   // 29 TRR for Mailbox 29
  1062F  Uint16 TRR30 : 1 ;
  1063F                   // 30 TRR for Mailbox 30
  1064F  Uint16 TRR31 : 1 ;
  1065F                   // 31 TRR for Mailbox 31
  1066F} ;
  1067F/* Allow access to the bit fields or entire register */
  1068F
  1069Funion CANTRR_REG
  1070F{
  1071F  Uint32 all ;
  1072F  struct CANTRR_BITS bit ;
  1073F} ;
  1074F/* eCAN Transmit Acknowledge register (CANTA) bit definitions */
  1075F
  1076Fstruct CANTA_BITS
  1077F{                   // bit description
  1078F  Uint16 TA0 : 1 ;
  1079F                 // 0 TA for Mailbox 0
  1080F  Uint16 TA1 : 1 ;
  1081F                 // 1 TA for Mailbox 1
  1082F  Uint16 TA2 : 1 ;
  1083F                 // 2 TA for Mailbox 2
  1084F  Uint16 TA3 : 1 ;
  1085F                 // 3 TA for Mailbox 3
  1086F  Uint16 TA4 : 1 ;
  1087F                 // 4 TA for Mailbox 4
  1088F  Uint16 TA5 : 1 ;
  1089F                 // 5 TA for Mailbox 5
  1090F  Uint16 TA6 : 1 ;
  1091F                 // 6 TA for Mailbox 6
  1092F  Uint16 TA7 : 1 ;
  1093F                 // 7 TA for Mailbox 7
  1094F  Uint16 TA8 : 1 ;
  1095F                 // 8 TA for Mailbox 8
  1096F  Uint16 TA9 : 1 ;
  1097F                 // 9 TA for Mailbox 9
  1098F  Uint16 TA10 : 1 ;
  1099F                  // 10 TA for Mailbox 10
  1100F  Uint16 TA11 : 1 ;
  1101F                  // 11 TA for Mailbox 11
  1102F  Uint16 TA12 : 1 ;
  1103F                  // 12 TA for Mailbox 12
  1104F  Uint16 TA13 : 1 ;
  1105F                  // 13 TA for Mailbox 13
  1106F  Uint16 TA14 : 1 ;
  1107F                  // 14 TA for Mailbox 14
  1108F  Uint16 TA15 : 1 ;
  1109F                  // 15 TA for Mailbox 15
  1110F  Uint16 TA16 : 1 ;
  1111F                  // 16 TA for Mailbox 16
  1112F  Uint16 TA17 : 1 ;
  1113F                  // 17 TA for Mailbox 17
  1114F  Uint16 TA18 : 1 ;
  1115F                  // 18 TA for Mailbox 18
  1116F  Uint16 TA19 : 1 ;
  1117F                  // 19 TA for Mailbox 19
  1118F  Uint16 TA20 : 1 ;
  1119F                  // 20 TA for Mailbox 20
  1120F  Uint16 TA21 : 1 ;
  1121F                  // 21 TA for Mailbox 21
  1122F  Uint16 TA22 : 1 ;
  1123F                  // 22 TA for Mailbox 22
  1124F  Uint16 TA23 : 1 ;
  1125F                  // 23 TA for Mailbox 23
  1126F  Uint16 TA24 : 1 ;
  1127F                  // 24 TA for Mailbox 24
  1128F  Uint16 TA25 : 1 ;
  1129F                  // 25 TA for Mailbox 25
  1130F  Uint16 TA26 : 1 ;
  1131F                  // 26 TA for Mailbox 26
  1132F  Uint16 TA27 : 1 ;
  1133F                  // 27 TA for Mailbox 27
  1134F  Uint16 TA28 : 1 ;
  1135F                  // 28 TA for Mailbox 28
  1136F  Uint16 TA29 : 1 ;
  1137F                  // 29 TA for Mailbox 29
  1138F  Uint16 TA30 : 1 ;
  1139F                  // 30 TA for Mailbox 30
  1140F  Uint16 TA31 : 1 ;
  1141F                  // 31 TA for Mailbox 31
  1142F} ;
  1143F/* Allow access to the bit fields or entire register */
  1144F
  1145Funion CANTA_REG
  1146F{
  1147F  Uint32 all ;
  1148F  struct CANTA_BITS bit ;
  1149F} ;
  1150F/* eCAN Transmit Abort Acknowledge register (CANAA) bit definitions */
  1151F
  1152Fstruct CANAA_BITS
  1153F{                   // bit description
  1154F  Uint16 AA0 : 1 ;
  1155F                 // 0 AA for Mailbox 0
  1156F  Uint16 AA1 : 1 ;
  1157F                 // 1 AA for Mailbox 1
  1158F  Uint16 AA2 : 1 ;
  1159F                 // 2 AA for Mailbox 2
  1160F  Uint16 AA3 : 1 ;
  1161F                 // 3 AA for Mailbox 3
  1162F  Uint16 AA4 : 1 ;
  1163F                 // 4 AA for Mailbox 4
  1164F  Uint16 AA5 : 1 ;
  1165F                 // 5 AA for Mailbox 5
  1166F  Uint16 AA6 : 1 ;
  1167F                 // 6 AA for Mailbox 6
  1168F  Uint16 AA7 : 1 ;
  1169F                 // 7 AA for Mailbox 7
  1170F  Uint16 AA8 : 1 ;
  1171F                 // 8 AA for Mailbox 8
  1172F  Uint16 AA9 : 1 ;
  1173F                 // 9 AA for Mailbox 9
  1174F  Uint16 AA10 : 1 ;
  1175F                  // 10 AA for Mailbox 10
  1176F  Uint16 AA11 : 1 ;
  1177F                  // 11 AA for Mailbox 11
  1178F  Uint16 AA12 : 1 ;
  1179F                  // 12 AA for Mailbox 12
  1180F  Uint16 AA13 : 1 ;
  1181F                  // 13 AA for Mailbox 13
  1182F  Uint16 AA14 : 1 ;
  1183F                  // 14 AA for Mailbox 14
  1184F  Uint16 AA15 : 1 ;
  1185F                  // 15 AA for Mailbox 15
  1186F  Uint16 AA16 : 1 ;
  1187F                  // 16 AA for Mailbox 16
  1188F  Uint16 AA17 : 1 ;
  1189F                  // 17 AA for Mailbox 17
  1190F  Uint16 AA18 : 1 ;
  1191F                  // 18 AA for Mailbox 18
  1192F  Uint16 AA19 : 1 ;
  1193F                  // 19 AA for Mailbox 19
  1194F  Uint16 AA20 : 1 ;
  1195F                  // 20 AA for Mailbox 20
  1196F  Uint16 AA21 : 1 ;
  1197F                  // 21 AA for Mailbox 21
  1198F  Uint16 AA22 : 1 ;
  1199F                  // 22 AA for Mailbox 22
  1200F  Uint16 AA23 : 1 ;
  1201F                  // 23 AA for Mailbox 23
  1202F  Uint16 AA24 : 1 ;
  1203F                  // 24 AA for Mailbox 24
  1204F  Uint16 AA25 : 1 ;
  1205F                  // 25 AA for Mailbox 25
  1206F  Uint16 AA26 : 1 ;
  1207F                  // 26 AA for Mailbox 26
  1208F  Uint16 AA27 : 1 ;
  1209F                  // 27 AA for Mailbox 27
  1210F  Uint16 AA28 : 1 ;
  1211F                  // 28 AA for Mailbox 28
  1212F  Uint16 AA29 : 1 ;
  1213F                  // 29 AA for Mailbox 29
  1214F  Uint16 AA30 : 1 ;
  1215F                  // 30 AA for Mailbox 30
  1216F  Uint16 AA31 : 1 ;
  1217F                  // 31 AA for Mailbox 31
  1218F} ;
  1219F/* Allow access to the bit fields or entire register */
  1220F
  1221Funion CANAA_REG
  1222F{
  1223F  Uint32 all ;
  1224F  struct CANAA_BITS bit ;
  1225F} ;
  1226F/* eCAN Received Message Pending register (CANRMP) bit definitions */
  1227F
  1228Fstruct CANRMP_BITS
  1229F{                    // bit description
  1230F  Uint16 RMP0 : 1 ;
  1231F                  // 0 RMP for Mailbox 0
  1232F  Uint16 RMP1 : 1 ;
  1233F                  // 1 RMP for Mailbox 1
  1234F  Uint16 RMP2 : 1 ;
  1235F                  // 2 RMP for Mailbox 2
  1236F  Uint16 RMP3 : 1 ;
  1237F                  // 3 RMP for Mailbox 3
  1238F  Uint16 RMP4 : 1 ;
  1239F                  // 4 RMP for Mailbox 4
  1240F  Uint16 RMP5 : 1 ;
  1241F                  // 5 RMP for Mailbox 5
  1242F  Uint16 RMP6 : 1 ;
  1243F                  // 6 RMP for Mailbox 6
  1244F  Uint16 RMP7 : 1 ;
  1245F                  // 7 RMP for Mailbox 7
  1246F  Uint16 RMP8 : 1 ;
  1247F                  // 8 RMP for Mailbox 8
  1248F  Uint16 RMP9 : 1 ;
  1249F                  // 9 RMP for Mailbox 9
  1250F  Uint16 RMP10 : 1 ;
  1251F                   // 10 RMP for Mailbox 10
  1252F  Uint16 RMP11 : 1 ;
  1253F                   // 11 RMP for Mailbox 11
  1254F  Uint16 RMP12 : 1 ;
  1255F                   // 12 RMP for Mailbox 12
  1256F  Uint16 RMP13 : 1 ;
  1257F                   // 13 RMP for Mailbox 13
  1258F  Uint16 RMP14 : 1 ;
  1259F                   // 14 RMP for Mailbox 14
  1260F  Uint16 RMP15 : 1 ;
  1261F                   // 15 RMP for Mailbox 15
  1262F  Uint16 RMP16 : 1 ;
  1263F                   // 16 RMP for Mailbox 16
  1264F  Uint16 RMP17 : 1 ;
  1265F                   // 17 RMP for Mailbox 17
  1266F  Uint16 RMP18 : 1 ;
  1267F                   // 18 RMP for Mailbox 18
  1268F  Uint16 RMP19 : 1 ;
  1269F                   // 19 RMP for Mailbox 19
  1270F  Uint16 RMP20 : 1 ;
  1271F                   // 20 RMP for Mailbox 20
  1272F  Uint16 RMP21 : 1 ;
  1273F                   // 21 RMP for Mailbox 21
  1274F  Uint16 RMP22 : 1 ;
  1275F                   // 22 RMP for Mailbox 22
  1276F  Uint16 RMP23 : 1 ;
  1277F                   // 23 RMP for Mailbox 23
  1278F  Uint16 RMP24 : 1 ;
  1279F                   // 24 RMP for Mailbox 24
  1280F  Uint16 RMP25 : 1 ;
  1281F                   // 25 RMP for Mailbox 25
  1282F  Uint16 RMP26 : 1 ;
  1283F                   // 26 RMP for Mailbox 26
  1284F  Uint16 RMP27 : 1 ;
  1285F                   // 27 RMP for Mailbox 27
  1286F  Uint16 RMP28 : 1 ;
  1287F                   // 28 RMP for Mailbox 28
  1288F  Uint16 RMP29 : 1 ;
  1289F                   // 29 RMP for Mailbox 29
  1290F  Uint16 RMP30 : 1 ;
  1291F                   // 30 RMP for Mailbox 30
  1292F  Uint16 RMP31 : 1 ;
  1293F                   // 31 RMP for Mailbox 31
  1294F} ;
  1295F/* Allow access to the bit fields or entire register */
  1296F
  1297Funion CANRMP_REG
  1298F{
  1299F  Uint32 all ;
  1300F  struct CANRMP_BITS bit ;
  1301F} ;
  1302F/* eCAN Received Message Lost register (CANRML) bit definitions */
  1303F
  1304Fstruct CANRML_BITS
  1305F{                    // bit description
  1306F  Uint16 RML0 : 1 ;
  1307F                  // 0 RML for Mailbox 0
  1308F  Uint16 RML1 : 1 ;
  1309F                  // 1 RML for Mailbox 1
  1310F  Uint16 RML2 : 1 ;
  1311F                  // 2 RML for Mailbox 2
  1312F  Uint16 RML3 : 1 ;
  1313F                  // 3 RML for Mailbox 3
  1314F  Uint16 RML4 : 1 ;
  1315F                  // 4 RML for Mailbox 4
  1316F  Uint16 RML5 : 1 ;
  1317F                  // 5 RML for Mailbox 5
  1318F  Uint16 RML6 : 1 ;
  1319F                  // 6 RML for Mailbox 6
  1320F  Uint16 RML7 : 1 ;
  1321F                  // 7 RML for Mailbox 7
  1322F  Uint16 RML8 : 1 ;
  1323F                  // 8 RML for Mailbox 8
  1324F  Uint16 RML9 : 1 ;
  1325F                  // 9 RML for Mailbox 9
  1326F  Uint16 RML10 : 1 ;
  1327F                   // 10 RML for Mailbox 10
  1328F  Uint16 RML11 : 1 ;
  1329F                   // 11 RML for Mailbox 11
  1330F  Uint16 RML12 : 1 ;
  1331F                   // 12 RML for Mailbox 12
  1332F  Uint16 RML13 : 1 ;
  1333F                   // 13 RML for Mailbox 13
  1334F  Uint16 RML14 : 1 ;
  1335F                   // 14 RML for Mailbox 14
  1336F  Uint16 RML15 : 1 ;
  1337F                   // 15 RML for Mailbox 15
  1338F  Uint16 RML16 : 1 ;
  1339F                   // 16 RML for Mailbox 16
  1340F  Uint16 RML17 : 1 ;
  1341F                   // 17 RML for Mailbox 17
  1342F  Uint16 RML18 : 1 ;
  1343F                   // 18 RML for Mailbox 18
  1344F  Uint16 RML19 : 1 ;
  1345F                   // 19 RML for Mailbox 19
  1346F  Uint16 RML20 : 1 ;
  1347F                   // 20 RML for Mailbox 20
  1348F  Uint16 RML21 : 1 ;
  1349F                   // 21 RML for Mailbox 21
  1350F  Uint16 RML22 : 1 ;
  1351F                   // 22 RML for Mailbox 22
  1352F  Uint16 RML23 : 1 ;
  1353F                   // 23 RML for Mailbox 23
  1354F  Uint16 RML24 : 1 ;
  1355F                   // 24 RML for Mailbox 24
  1356F  Uint16 RML25 : 1 ;
  1357F                   // 25 RML for Mailbox 25
  1358F  Uint16 RML26 : 1 ;
  1359F                   // 26 RML for Mailbox 26
  1360F  Uint16 RML27 : 1 ;
  1361F                   // 27 RML for Mailbox 27
  1362F  Uint16 RML28 : 1 ;
  1363F                   // 28 RML for Mailbox 28
  1364F  Uint16 RML29 : 1 ;
  1365F                   // 29 RML for Mailbox 29
  1366F  Uint16 RML30 : 1 ;
  1367F                   // 30 RML for Mailbox 30
  1368F  Uint16 RML31 : 1 ;
  1369F                   // 31 RML for Mailbox 31
  1370F} ;
  1371F/* Allow access to the bit fields or entire register */
  1372F
  1373Funion CANRML_REG
  1374F{
  1375F  Uint32 all ;
  1376F  struct CANRML_BITS bit ;
  1377F} ;
  1378F/* eCAN Remote Frame Pending register (CANRFP) bit definitions */
  1379F
  1380Fstruct CANRFP_BITS
  1381F{                    // bit description
  1382F  Uint16 RFP0 : 1 ;
  1383F                  // 0 RFP for Mailbox 0
  1384F  Uint16 RFP1 : 1 ;
  1385F                  // 1 RFP for Mailbox 1
  1386F  Uint16 RFP2 : 1 ;
  1387F                  // 2 RFP for Mailbox 2
  1388F  Uint16 RFP3 : 1 ;
  1389F                  // 3 RFP for Mailbox 3
  1390F  Uint16 RFP4 : 1 ;
  1391F                  // 4 RFP for Mailbox 4
  1392F  Uint16 RFP5 : 1 ;
  1393F                  // 5 RFP for Mailbox 5
  1394F  Uint16 RFP6 : 1 ;
  1395F                  // 6 RFP for Mailbox 6
  1396F  Uint16 RFP7 : 1 ;
  1397F                  // 7 RFP for Mailbox 7
  1398F  Uint16 RFP8 : 1 ;
  1399F                  // 8 RFP for Mailbox 8
  1400F  Uint16 RFP9 : 1 ;
  1401F                  // 9 RFP for Mailbox 9
  1402F  Uint16 RFP10 : 1 ;
  1403F                   // 10 RFP for Mailbox 10
  1404F  Uint16 RFP11 : 1 ;
  1405F                   // 11 RFP for Mailbox 11
  1406F  Uint16 RFP12 : 1 ;
  1407F                   // 12 RFP for Mailbox 12
  1408F  Uint16 RFP13 : 1 ;
  1409F                   // 13 RFP for Mailbox 13
  1410F  Uint16 RFP14 : 1 ;
  1411F                   // 14 RFP for Mailbox 14
  1412F  Uint16 RFP15 : 1 ;
  1413F                   // 15 RFP for Mailbox 15
  1414F  Uint16 RFP16 : 1 ;
  1415F                   // 16 RFP for Mailbox 16
  1416F  Uint16 RFP17 : 1 ;
  1417F                   // 17 RFP for Mailbox 17
  1418F  Uint16 RFP18 : 1 ;
  1419F                   // 18 RFP for Mailbox 18
  1420F  Uint16 RFP19 : 1 ;
  1421F                   // 19 RFP for Mailbox 19
  1422F  Uint16 RFP20 : 1 ;
  1423F                   // 20 RFP for Mailbox 20
  1424F  Uint16 RFP21 : 1 ;
  1425F                   // 21 RFP for Mailbox 21
  1426F  Uint16 RFP22 : 1 ;
  1427F                   // 22 RFP for Mailbox 22
  1428F  Uint16 RFP23 : 1 ;
  1429F                   // 23 RFP for Mailbox 23
  1430F  Uint16 RFP24 : 1 ;
  1431F                   // 24 RFP for Mailbox 24
  1432F  Uint16 RFP25 : 1 ;
  1433F                   // 25 RFP for Mailbox 25
  1434F  Uint16 RFP26 : 1 ;
  1435F                   // 26 RFP for Mailbox 26
  1436F  Uint16 RFP27 : 1 ;
  1437F                   // 27 RFP for Mailbox 27
  1438F  Uint16 RFP28 : 1 ;
  1439F                   // 28 RFP for Mailbox 28
  1440F  Uint16 RFP29 : 1 ;
  1441F                   // 29 RFP for Mailbox 29
  1442F  Uint16 RFP30 : 1 ;
  1443F                   // 30 RFP for Mailbox 30
  1444F  Uint16 RFP31 : 1 ;
  1445F                   // 31 RFP for Mailbox 31
  1446F} ;
  1447F/* Allow access to the bit fields or entire register */
  1448F
  1449Funion CANRFP_REG
  1450F{
  1451F  Uint32 all ;
  1452F  struct CANRFP_BITS bit ;
  1453F} ;
  1454F/* eCAN Global Acceptance Mask register (CANGAM) bit definitions */
  1455F
  1456Fstruct CANGAM_BITS
  1457F{                    // bits description
  1458F  Uint16 GAM150 : 16 ;
  1459F                     // 15:0 Global acceptance mask bits 0-15
  1460F  Uint16 GAM2816 : 13 ;
  1461F                      // 28:16 Global acceptance mask bits 16-28
  1462F  Uint16 rsvd : 2 ;
  1463F                  // 30:29 reserved
  1464F  Uint16 AMI : 1 ;
  1465F                 // 31 AMI bit
  1466F} ;
  1467F/* Allow access to the bit fields or entire register */
  1468F
  1469Funion CANGAM_REG
  1470F{
  1471F  Uint32 all ;
  1472F  struct CANGAM_BITS bit ;
  1473F} ;
  1474F/* eCAN Master Control register (CANMC) bit definitions */
  1475F
  1476Fstruct CANMC_BITS
  1477F{                   // bits description
  1478F  Uint16 MBNR : 5 ;
  1479F                  // 4:0 MBX #for CDR bit
  1480F  Uint16 SRES : 1 ;
  1481F                  // 5 Soft reset
  1482F  Uint16 STM : 1 ;
  1483F                 // 6 Self-test mode
  1484F  Uint16 ABO : 1 ;
  1485F                 // 7 Auto bus-on
  1486F  Uint16 CDR : 1 ;
  1487F                 // 8 Change data request
  1488F  Uint16 WUBA : 1 ;
  1489F                  // 9 Wake-up on bus activity
  1490F  Uint16 DBO : 1 ;
  1491F                 // 10 Data-byte order
  1492F  Uint16 PDR : 1 ;
  1493F                 // 11 Power-down mode request
  1494F  Uint16 CCR : 1 ;
  1495F                 // 12 Change configuration request
  1496F  Uint16 SCB : 1 ;
  1497F                 // 13 SCC compatibility bit
  1498F  Uint16 TCC : 1 ;
  1499F                 // 14 TSC MSB clear bit
  1500F  Uint16 MBCC : 1 ;
  1501F                  // 15 TSC clear bit thru mailbox 16
  1502F  Uint16 SUSP : 1 ;
  1503F                  // 16 SUSPEND free/soft bit
  1504F  Uint16 rsvd : 15 ;
  1505F                   // 31:17 reserved
  1506F} ;
  1507F/* Allow access to the bit fields or entire register */
  1508F
  1509Funion CANMC_REG
  1510F{
  1511F  Uint32 all ;
  1512F  struct CANMC_BITS bit ;
  1513F} ;
  1514F/* eCAN Bit -timing configuration register (CANBTC) bit definitions */
  1515F
  1516Fstruct CANBTC_BITS
  1517F{                    // bits description
  1518F  Uint16 TSEG2REG : 3 ;
  1519F                      // 2:0 TSEG2 register value
  1520F  Uint16 TSEG1REG : 4 ;
  1521F                      // 6:3 TSEG1 register value
  1522F  Uint16 SAM : 1 ;
  1523F                 // 7 Sample-point setting
  1524F  Uint16 SJWREG : 2 ;
  1525F                    // 9:8 Synchroniztion Jump Width register value
  1526F  Uint16 rsvd1 : 6 ;
  1527F                   // 15:10 reserved
  1528F  Uint16 BRPREG : 8 ;
  1529F                    // 23:16 Baudrate prescaler register value
  1530F  Uint16 rsvd2 : 8 ;
  1531F                   // 31:24 reserved
  1532F} ;
  1533F/* Allow access to the bit fields or entire register */
  1534F
  1535Funion CANBTC_REG
  1536F{
  1537F  Uint32 all ;
  1538F  struct CANBTC_BITS bit ;
  1539F} ;
  1540F/* eCAN Error & Status register (CANES) bit definitions */
  1541F
  1542Fstruct CANES_BITS
  1543F{                   // bits description
  1544F  Uint16 TM : 1 ;
  1545F                // 0 Transmit Mode
  1546F  Uint16 RM : 1 ;
  1547F                // 1 Receive Mode
  1548F  Uint16 rsvd1 : 1 ;
  1549F                   // 2 reserved
  1550F  Uint16 PDA : 1 ;
  1551F                 // 3 Power-down acknowledge
  1552F  Uint16 CCE : 1 ;
  1553F                 // 4 Change Configuration Enable
  1554F  Uint16 SMA : 1 ;
  1555F                 // 5 Suspend Mode Acknowledge
  1556F  Uint16 rsvd2 : 10 ;
  1557F                    // 15:6 reserved
  1558F  Uint16 EW : 1 ;
  1559F                // 16 Warning status
  1560F  Uint16 EP : 1 ;
  1561F                // 17 Error Passive status
  1562F  Uint16 BO : 1 ;
  1563F                // 18 Bus-off status
  1564F  Uint16 ACKE : 1 ;
  1565F                  // 19 Acknowledge error
  1566F  Uint16 SE : 1 ;
  1567F                // 20 Stuff error
  1568F  Uint16 CRCE : 1 ;
  1569F                  // 21 CRC error
  1570F  Uint16 SA1 : 1 ;
  1571F                 // 22 Stuck at Dominant error
  1572F  Uint16 BE : 1 ;
  1573F                // 23 Bit error
  1574F  Uint16 FE : 1 ;
  1575F                // 24 Framing error
  1576F  Uint16 rsvd3 : 7 ;
  1577F                   // 31:25 reserved
  1578F} ;
  1579F/* Allow access to the bit fields or entire register */
  1580F
  1581Funion CANES_REG
  1582F{
  1583F  Uint32 all ;
  1584F  struct CANES_BITS bit ;
  1585F} ;
  1586F/* eCAN Transmit Error Counter register (CANTEC) bit definitions */
  1587F
  1588Fstruct CANTEC_BITS
  1589F{                    // bits description
  1590F  Uint16 TEC : 8 ;
  1591F                 // 7:0 TEC
  1592F  Uint16 rsvd1 : 8 ;
  1593F                   // 15:8 reserved
  1594F  Uint16 rsvd2 : 16 ;
  1595F                    // 31:16 reserved
  1596F} ;
  1597F/* Allow access to the bit fields or entire register */
  1598F
  1599Funion CANTEC_REG
  1600F{
  1601F  Uint32 all ;
  1602F  struct CANTEC_BITS bit ;
  1603F} ;
  1604F/* eCAN Receive Error Counter register (CANREC) bit definitions */
  1605F
  1606Fstruct CANREC_BITS
  1607F{                    // bits description
  1608F  Uint16 REC : 8 ;
  1609F                 // 7:0 REC
  1610F  Uint16 rsvd1 : 8 ;
  1611F                   // 15:8 reserved
  1612F  Uint16 rsvd2 : 16 ;
  1613F                    // 31:16 reserved
  1614F} ;
  1615F/* Allow access to the bit fields or entire register */
  1616F
  1617Funion CANREC_REG
  1618F{
  1619F  Uint32 all ;
  1620F  struct CANREC_BITS bit ;
  1621F} ;
  1622F/* eCAN Global Interrupt Flag 0 (CANGIF0) bit definitions */
  1623F
  1624Fstruct CANGIF0_BITS
  1625F{                     // bits description
  1626F  Uint16 MIV0 : 5 ;
  1627F                  // 4:0 Mailbox Interrupt Vector
  1628F  Uint16 rsvd1 : 3 ;
  1629F                   // 7:5 reserved
  1630F  Uint16 WLIF0 : 1 ;
  1631F                   // 8 Warning level interrupt flag
  1632F  Uint16 EPIF0 : 1 ;
  1633F                   // 9 Error-passive interrupt flag
  1634F  Uint16 BOIF0 : 1 ;
  1635F                   // 10 Bus-off interrupt flag
  1636F  Uint16 RMLIF0 : 1 ;
  1637F                    // 11 Received message lost interrupt flag
  1638F  Uint16 WUIF0 : 1 ;
  1639F                   // 12 Wakeup interrupt flag
  1640F  Uint16 WDIF0 : 1 ;
  1641F                   // 13 Write denied interrupt flag
  1642F  Uint16 AAIF0 : 1 ;
  1643F                   // 14 Abort Ack interrupt flag
  1644F  Uint16 GMIF0 : 1 ;
  1645F                   // 15 Global MBX interrupt flag
  1646F  Uint16 TCOF0 : 1 ;
  1647F                   // 16 TSC Overflow flag
  1648F  Uint16 MTOF0 : 1 ;
  1649F                   // 17 Mailbox Timeout flag
  1650F  Uint16 rsvd2 : 14 ;
  1651F                    // 31:18 reserved
  1652F} ;
  1653F/* Allow access to the bit fields or entire register */
  1654F
  1655Funion CANGIF0_REG
  1656F{
  1657F  Uint32 all ;
  1658F  struct CANGIF0_BITS bit ;
  1659F} ;
  1660F/* eCAN Global Interrupt Mask register (CANGIM) bit definitions */
  1661F
  1662Fstruct CANGIM_BITS
  1663F{                    // bits description
  1664F  Uint16 I0EN : 1 ;
  1665F                  // 0 Interrupt 0 enable
  1666F  Uint16 I1EN : 1 ;
  1667F                  // 1 Interrupt 1 enable
  1668F  Uint16 GIL : 1 ;
  1669F                 // 2 Global Interrupt Level
  1670F  Uint16 rsvd1 : 5 ;
  1671F                   // 7:3 reserved
  1672F  Uint16 WLIM : 1 ;
  1673F                  // 8 Warning level interrupt mask
  1674F  Uint16 EPIM : 1 ;
  1675F                  // 9 Error-passive interrupt mask
  1676F  Uint16 BOIM : 1 ;
  1677F                  // 10 Bus-off interrupt mask
  1678F  Uint16 RMLIM : 1 ;
  1679F                   // 11 Received message lost interrupt mask
  1680F  Uint16 WUIM : 1 ;
  1681F                  // 12 Wakeup interrupt mask
  1682F  Uint16 WDIM : 1 ;
  1683F                  // 13 Write denied interrupt mask
  1684F  Uint16 AAIM : 1 ;
  1685F                  // 14 Abort Ack interrupt mask
  1686F  Uint16 rsvd2 : 1 ;
  1687F                   // 15 reserved
  1688F  Uint16 TCOM : 1 ;
  1689F                  // 16 TSC overflow interrupt mask
  1690F  Uint16 MTOM : 1 ;
  1691F                  // 17 MBX Timeout interrupt mask
  1692F  Uint16 rsvd3 : 14 ;
  1693F                    // 31:18 reserved
  1694F} ;
  1695F/* Allow access to the bit fields or entire register */
  1696F
  1697Funion CANGIM_REG
  1698F{
  1699F  Uint32 all ;
  1700F  struct CANGIM_BITS bit ;
  1701F} ;
  1702F/* eCAN Global Interrupt Flag 1 (eCANGIF1) bit definitions */
  1703F
  1704Fstruct CANGIF1_BITS
  1705F{                     // bits description
  1706F  Uint16 MIV1 : 5 ;
  1707F                  // 4:0 Mailbox Interrupt Vector
  1708F  Uint16 rsvd1 : 3 ;
  1709F                   // 7:5 reserved
  1710F  Uint16 WLIF1 : 1 ;
  1711F                   // 8 Warning level interrupt flag
  1712F  Uint16 EPIF1 : 1 ;
  1713F                   // 9 Error-passive interrupt flag
  1714F  Uint16 BOIF1 : 1 ;
  1715F                   // 10 Bus-off interrupt flag
  1716F  Uint16 RMLIF1 : 1 ;
  1717F                    // 11 Received message lost interrupt flag
  1718F  Uint16 WUIF1 : 1 ;
  1719F                   // 12 Wakeup interrupt flag
  1720F  Uint16 WDIF1 : 1 ;
  1721F                   // 13 Write denied interrupt flag
  1722F  Uint16 AAIF1 : 1 ;
  1723F                   // 14 Abort Ack interrupt flag
  1724F  Uint16 GMIF1 : 1 ;
  1725F                   // 15 Global MBX interrupt flag
  1726F  Uint16 TCOF1 : 1 ;
  1727F                   // 16 TSC Overflow flag
  1728F  Uint16 MTOF1 : 1 ;
  1729F                   // 17 Mailbox Timeout flag
  1730F  Uint16 rsvd2 : 14 ;
  1731F                    // 31:18 reserved
  1732F} ;
  1733F/* Allow access to the bit fields or entire register */
  1734F
  1735Funion CANGIF1_REG
  1736F{
  1737F  Uint32 all ;
  1738F  struct CANGIF1_BITS bit ;
  1739F} ;
  1740F/* eCAN Mailbox Interrupt Mask register (CANMIM) bit definitions */
  1741F
  1742Fstruct CANMIM_BITS
  1743F{                    // bit description
  1744F  Uint16 MIM0 : 1 ;
  1745F                  // 0 MIM for Mailbox 0
  1746F  Uint16 MIM1 : 1 ;
  1747F                  // 1 MIM for Mailbox 1
  1748F  Uint16 MIM2 : 1 ;
  1749F                  // 2 MIM for Mailbox 2
  1750F  Uint16 MIM3 : 1 ;
  1751F                  // 3 MIM for Mailbox 3
  1752F  Uint16 MIM4 : 1 ;
  1753F                  // 4 MIM for Mailbox 4
  1754F  Uint16 MIM5 : 1 ;
  1755F                  // 5 MIM for Mailbox 5
  1756F  Uint16 MIM6 : 1 ;
  1757F                  // 6 MIM for Mailbox 6
  1758F  Uint16 MIM7 : 1 ;
  1759F                  // 7 MIM for Mailbox 7
  1760F  Uint16 MIM8 : 1 ;
  1761F                  // 8 MIM for Mailbox 8
  1762F  Uint16 MIM9 : 1 ;
  1763F                  // 9 MIM for Mailbox 9
  1764F  Uint16 MIM10 : 1 ;
  1765F                   // 10 MIM for Mailbox 10
  1766F  Uint16 MIM11 : 1 ;
  1767F                   // 11 MIM for Mailbox 11
  1768F  Uint16 MIM12 : 1 ;
  1769F                   // 12 MIM for Mailbox 12
  1770F  Uint16 MIM13 : 1 ;
  1771F                   // 13 MIM for Mailbox 13
  1772F  Uint16 MIM14 : 1 ;
  1773F                   // 14 MIM for Mailbox 14
  1774F  Uint16 MIM15 : 1 ;
  1775F                   // 15 MIM for Mailbox 15
  1776F  Uint16 MIM16 : 1 ;
  1777F                   // 16 MIM for Mailbox 16
  1778F  Uint16 MIM17 : 1 ;
  1779F                   // 17 MIM for Mailbox 17
  1780F  Uint16 MIM18 : 1 ;
  1781F                   // 18 MIM for Mailbox 18
  1782F  Uint16 MIM19 : 1 ;
  1783F                   // 19 MIM for Mailbox 19
  1784F  Uint16 MIM20 : 1 ;
  1785F                   // 20 MIM for Mailbox 20
  1786F  Uint16 MIM21 : 1 ;
  1787F                   // 21 MIM for Mailbox 21
  1788F  Uint16 MIM22 : 1 ;
  1789F                   // 22 MIM for Mailbox 22
  1790F  Uint16 MIM23 : 1 ;
  1791F                   // 23 MIM for Mailbox 23
  1792F  Uint16 MIM24 : 1 ;
  1793F                   // 24 MIM for Mailbox 24
  1794F  Uint16 MIM25 : 1 ;
  1795F                   // 25 MIM for Mailbox 25
  1796F  Uint16 MIM26 : 1 ;
  1797F                   // 26 MIM for Mailbox 26
  1798F  Uint16 MIM27 : 1 ;
  1799F                   // 27 MIM for Mailbox 27
  1800F  Uint16 MIM28 : 1 ;
  1801F                   // 28 MIM for Mailbox 28
  1802F  Uint16 MIM29 : 1 ;
  1803F                   // 29 MIM for Mailbox 29
  1804F  Uint16 MIM30 : 1 ;
  1805F                   // 30 MIM for Mailbox 30
  1806F  Uint16 MIM31 : 1 ;
  1807F                   // 31 MIM for Mailbox 31
  1808F} ;
  1809F/* Allow access to the bit fields or entire register */
  1810F
  1811Funion CANMIM_REG
  1812F{
  1813F  Uint32 all ;
  1814F  struct CANMIM_BITS bit ;
  1815F} ;
  1816F/* eCAN Mailbox Interrupt Level register (CANMIL) bit definitions */
  1817F
  1818Fstruct CANMIL_BITS
  1819F{                    // bit description
  1820F  Uint16 MIL0 : 1 ;
  1821F                  // 0 0 -> Int 9.5 1 -> Int 9.6
  1822F  Uint16 MIL1 : 1 ;
  1823F                  // 1 0 -> Int 9.5 1 -> Int 9.6
  1824F  Uint16 MIL2 : 1 ;
  1825F                  // 2 0 -> Int 9.5 1 -> Int 9.6
  1826F  Uint16 MIL3 : 1 ;
  1827F                  // 3 0 -> Int 9.5 1 -> Int 9.6
  1828F  Uint16 MIL4 : 1 ;
  1829F                  // 4 0 -> Int 9.5 1 -> Int 9.6
  1830F  Uint16 MIL5 : 1 ;
  1831F                  // 5 0 -> Int 9.5 1 -> Int 9.6
  1832F  Uint16 MIL6 : 1 ;
  1833F                  // 6 0 -> Int 9.5 1 -> Int 9.6
  1834F  Uint16 MIL7 : 1 ;
  1835F                  // 7 0 -> Int 9.5 1 -> Int 9.6
  1836F  Uint16 MIL8 : 1 ;
  1837F                  // 8 0 -> Int 9.5 1 -> Int 9.6
  1838F  Uint16 MIL9 : 1 ;
  1839F                  // 9 0 -> Int 9.5 1 -> Int 9.6
  1840F  Uint16 MIL10 : 1 ;
  1841F                   // 10 0 -> Int 9.5 1 -> Int 9.6
  1842F  Uint16 MIL11 : 1 ;
  1843F                   // 11 0 -> Int 9.5 1 -> Int 9.6
  1844F  Uint16 MIL12 : 1 ;
  1845F                   // 12 0 -> Int 9.5 1 -> Int 9.6
  1846F  Uint16 MIL13 : 1 ;
  1847F                   // 13 0 -> Int 9.5 1 -> Int 9.6
  1848F  Uint16 MIL14 : 1 ;
  1849F                   // 14 0 -> Int 9.5 1 -> Int 9.6
  1850F  Uint16 MIL15 : 1 ;
  1851F                   // 15 0 -> Int 9.5 1 -> Int 9.6
  1852F  Uint16 MIL16 : 1 ;
  1853F                   // 16 0 -> Int 9.5 1 -> Int 9.6
  1854F  Uint16 MIL17 : 1 ;
  1855F                   // 17 0 -> Int 9.5 1 -> Int 9.6
  1856F  Uint16 MIL18 : 1 ;
  1857F                   // 18 0 -> Int 9.5 1 -> Int 9.6
  1858F  Uint16 MIL19 : 1 ;
  1859F                   // 19 0 -> Int 9.5 1 -> Int 9.6
  1860F  Uint16 MIL20 : 1 ;
  1861F                   // 20 0 -> Int 9.5 1 -> Int 9.6
  1862F  Uint16 MIL21 : 1 ;
  1863F                   // 21 0 -> Int 9.5 1 -> Int 9.6
  1864F  Uint16 MIL22 : 1 ;
  1865F                   // 22 0 -> Int 9.5 1 -> Int 9.6
  1866F  Uint16 MIL23 : 1 ;
  1867F                   // 23 0 -> Int 9.5 1 -> Int 9.6
  1868F  Uint16 MIL24 : 1 ;
  1869F                   // 24 0 -> Int 9.5 1 -> Int 9.6
  1870F  Uint16 MIL25 : 1 ;
  1871F                   // 25 0 -> Int 9.5 1 -> Int 9.6
  1872F  Uint16 MIL26 : 1 ;
  1873F                   // 26 0 -> Int 9.5 1 -> Int 9.6
  1874F  Uint16 MIL27 : 1 ;
  1875F                   // 27 0 -> Int 9.5 1 -> Int 9.6
  1876F  Uint16 MIL28 : 1 ;
  1877F                   // 28 0 -> Int 9.5 1 -> Int 9.6
  1878F  Uint16 MIL29 : 1 ;
  1879F                   // 29 0 -> Int 9.5 1 -> Int 9.6
  1880F  Uint16 MIL30 : 1 ;
  1881F                   // 30 0 -> Int 9.5 1 -> Int 9.6
  1882F  Uint16 MIL31 : 1 ;
  1883F                   // 31 0 -> Int 9.5 1 -> Int 9.6
  1884F} ;
  1885F/* Allow access to the bit fields or entire register */
  1886F
  1887Funion CANMIL_REG
  1888F{
  1889F  Uint32 all ;
  1890F  struct CANMIL_BITS bit ;
  1891F} ;
  1892F/* eCAN Overwrite Protection Control register (CANOPC) bit definitions */
  1893F
  1894Fstruct CANOPC_BITS
  1895F{                    // bit description
  1896F  Uint16 OPC0 : 1 ;
  1897F                  // 0 OPC for Mailbox 0
  1898F  Uint16 OPC1 : 1 ;
  1899F                  // 1 OPC for Mailbox 1
  1900F  Uint16 OPC2 : 1 ;
  1901F                  // 2 OPC for Mailbox 2
  1902F  Uint16 OPC3 : 1 ;
  1903F                  // 3 OPC for Mailbox 3
  1904F  Uint16 OPC4 : 1 ;
  1905F                  // 4 OPC for Mailbox 4
  1906F  Uint16 OPC5 : 1 ;
  1907F                  // 5 OPC for Mailbox 5
  1908F  Uint16 OPC6 : 1 ;
  1909F                  // 6 OPC for Mailbox 6
  1910F  Uint16 OPC7 : 1 ;
  1911F                  // 7 OPC for Mailbox 7
  1912F  Uint16 OPC8 : 1 ;
  1913F                  // 8 OPC for Mailbox 8
  1914F  Uint16 OPC9 : 1 ;
  1915F                  // 9 OPC for Mailbox 9
  1916F  Uint16 OPC10 : 1 ;
  1917F                   // 10 OPC for Mailbox 10
  1918F  Uint16 OPC11 : 1 ;
  1919F                   // 11 OPC for Mailbox 11
  1920F  Uint16 OPC12 : 1 ;
  1921F                   // 12 OPC for Mailbox 12
  1922F  Uint16 OPC13 : 1 ;
  1923F                   // 13 OPC for Mailbox 13
  1924F  Uint16 OPC14 : 1 ;
  1925F                   // 14 OPC for Mailbox 14
  1926F  Uint16 OPC15 : 1 ;
  1927F                   // 15 OPC for Mailbox 15
  1928F  Uint16 OPC16 : 1 ;
  1929F                   // 16 OPC for Mailbox 16
  1930F  Uint16 OPC17 : 1 ;
  1931F                   // 17 OPC for Mailbox 17
  1932F  Uint16 OPC18 : 1 ;
  1933F                   // 18 OPC for Mailbox 18
  1934F  Uint16 OPC19 : 1 ;
  1935F                   // 19 OPC for Mailbox 19
  1936F  Uint16 OPC20 : 1 ;
  1937F                   // 20 OPC for Mailbox 20
  1938F  Uint16 OPC21 : 1 ;
  1939F                   // 21 OPC for Mailbox 21
  1940F  Uint16 OPC22 : 1 ;
  1941F                   // 22 OPC for Mailbox 22
  1942F  Uint16 OPC23 : 1 ;
  1943F                   // 23 OPC for Mailbox 23
  1944F  Uint16 OPC24 : 1 ;
  1945F                   // 24 OPC for Mailbox 24
  1946F  Uint16 OPC25 : 1 ;
  1947F                   // 25 OPC for Mailbox 25
  1948F  Uint16 OPC26 : 1 ;
  1949F                   // 26 OPC for Mailbox 26
  1950F  Uint16 OPC27 : 1 ;
  1951F                   // 27 OPC for Mailbox 27
  1952F  Uint16 OPC28 : 1 ;
  1953F                   // 28 OPC for Mailbox 28
  1954F  Uint16 OPC29 : 1 ;
  1955F                   // 29 OPC for Mailbox 29
  1956F  Uint16 OPC30 : 1 ;
  1957F                   // 30 OPC for Mailbox 30
  1958F  Uint16 OPC31 : 1 ;
  1959F                   // 31 OPC for Mailbox 31
  1960F} ;
  1961F/* Allow access to the bit fields or entire register */
  1962F
  1963Funion CANOPC_REG
  1964F{
  1965F  Uint32 all ;
  1966F  struct CANOPC_BITS bit ;
  1967F} ;
  1968F/* eCAN TX I/O Control Register (CANTIOC) bit definitions */
  1969F
  1970Fstruct CANTIOC_BITS
  1971F{                     // bits description
  1972F  Uint16 rsvd1 : 3 ;
  1973F                   // 2:0 reserved
  1974F  Uint16 TXFUNC : 1 ;
  1975F                    // 3 TXFUNC
  1976F  Uint16 rsvd2 : 12 ;
  1977F                    // 15:4 reserved
  1978F  Uint16 rsvd3 : 16 ;
  1979F                    // 31:16 reserved
  1980F} ;
  1981F/* Allow access to the bit fields or entire register */
  1982F
  1983Funion CANTIOC_REG
  1984F{
  1985F  Uint32 all ;
  1986F  struct CANTIOC_BITS bit ;
  1987F} ;
  1988F/* eCAN RX I/O Control Register (CANRIOC) bit definitions */
  1989F
  1990Fstruct CANRIOC_BITS
  1991F{                     // bits description
  1992F  Uint16 rsvd1 : 3 ;
  1993F                   // 2:0 reserved
  1994F  Uint16 RXFUNC : 1 ;
  1995F                    // 3 RXFUNC
  1996F  Uint16 rsvd2 : 12 ;
  1997F                    // 15:4 reserved
  1998F  Uint16 rsvd3 : 16 ;
  1999F                    // 31:16 reserved
  2000F} ;
  2001F/* Allow access to the bit fields or entire register */
  2002F
  2003Funion CANRIOC_REG
  2004F{
  2005F  Uint32 all ;
  2006F  struct CANRIOC_BITS bit ;
  2007F} ;
  2008F/* eCAN Time-out Control register (CANTOC) bit definitions */
  2009F
  2010Fstruct CANTOC_BITS
  2011F{                    // bit description
  2012F  Uint16 TOC0 : 1 ;
  2013F                  // 0 TOC for Mailbox 0
  2014F  Uint16 TOC1 : 1 ;
  2015F                  // 1 TOC for Mailbox 1
  2016F  Uint16 TOC2 : 1 ;
  2017F                  // 2 TOC for Mailbox 2
  2018F  Uint16 TOC3 : 1 ;
  2019F                  // 3 TOC for Mailbox 3
  2020F  Uint16 TOC4 : 1 ;
  2021F                  // 4 TOC for Mailbox 4
  2022F  Uint16 TOC5 : 1 ;
  2023F                  // 5 TOC for Mailbox 5
  2024F  Uint16 TOC6 : 1 ;
  2025F                  // 6 TOC for Mailbox 6
  2026F  Uint16 TOC7 : 1 ;
  2027F                  // 7 TOC for Mailbox 7
  2028F  Uint16 TOC8 : 1 ;
  2029F                  // 8 TOC for Mailbox 8
  2030F  Uint16 TOC9 : 1 ;
  2031F                  // 9 TOC for Mailbox 9
  2032F  Uint16 TOC10 : 1 ;
  2033F                   // 10 TOC for Mailbox 10
  2034F  Uint16 TOC11 : 1 ;
  2035F                   // 11 TOC for Mailbox 11
  2036F  Uint16 TOC12 : 1 ;
  2037F                   // 12 TOC for Mailbox 12
  2038F  Uint16 TOC13 : 1 ;
  2039F                   // 13 TOC for Mailbox 13
  2040F  Uint16 TOC14 : 1 ;
  2041F                   // 14 TOC for Mailbox 14
  2042F  Uint16 TOC15 : 1 ;
  2043F                   // 15 TOC for Mailbox 15
  2044F  Uint16 TOC16 : 1 ;
  2045F                   // 16 TOC for Mailbox 16
  2046F  Uint16 TOC17 : 1 ;
  2047F                   // 17 TOC for Mailbox 17
  2048F  Uint16 TOC18 : 1 ;
  2049F                   // 18 TOC for Mailbox 18
  2050F  Uint16 TOC19 : 1 ;
  2051F                   // 19 TOC for Mailbox 19
  2052F  Uint16 TOC20 : 1 ;
  2053F                   // 20 TOC for Mailbox 20
  2054F  Uint16 TOC21 : 1 ;
  2055F                   // 21 TOC for Mailbox 21
  2056F  Uint16 TOC22 : 1 ;
  2057F                   // 22 TOC for Mailbox 22
  2058F  Uint16 TOC23 : 1 ;
  2059F                   // 23 TOC for Mailbox 23
  2060F  Uint16 TOC24 : 1 ;
  2061F                   // 24 TOC for Mailbox 24
  2062F  Uint16 TOC25 : 1 ;
  2063F                   // 25 TOC for Mailbox 25
  2064F  Uint16 TOC26 : 1 ;
  2065F                   // 26 TOC for Mailbox 26
  2066F  Uint16 TOC27 : 1 ;
  2067F                   // 27 TOC for Mailbox 27
  2068F  Uint16 TOC28 : 1 ;
  2069F                   // 28 TOC for Mailbox 28
  2070F  Uint16 TOC29 : 1 ;
  2071F                   // 29 TOC for Mailbox 29
  2072F  Uint16 TOC30 : 1 ;
  2073F                   // 30 TOC for Mailbox 30
  2074F  Uint16 TOC31 : 1 ;
  2075F                   // 31 TOC for Mailbox 31
  2076F} ;
  2077F/* Allow access to the bit fields or entire register */
  2078F
  2079Funion CANTOC_REG
  2080F{
  2081F  Uint32 all ;
  2082F  struct CANTOC_BITS bit ;
  2083F} ;
  2084F/* eCAN Time-out Status register (CANTOS) bit definitions */
  2085F
  2086Fstruct CANTOS_BITS
  2087F{                    // bit description
  2088F  Uint16 TOS0 : 1 ;
  2089F                  // 0 TOS for Mailbox 0
  2090F  Uint16 TOS1 : 1 ;
  2091F                  // 1 TOS for Mailbox 1
  2092F  Uint16 TOS2 : 1 ;
  2093F                  // 2 TOS for Mailbox 2
  2094F  Uint16 TOS3 : 1 ;
  2095F                  // 3 TOS for Mailbox 3
  2096F  Uint16 TOS4 : 1 ;
  2097F                  // 4 TOS for Mailbox 4
  2098F  Uint16 TOS5 : 1 ;
  2099F                  // 5 TOS for Mailbox 5
  2100F  Uint16 TOS6 : 1 ;
  2101F                  // 6 TOS for Mailbox 6
  2102F  Uint16 TOS7 : 1 ;
  2103F                  // 7 TOS for Mailbox 7
  2104F  Uint16 TOS8 : 1 ;
  2105F                  // 8 TOS for Mailbox 8
  2106F  Uint16 TOS9 : 1 ;
  2107F                  // 9 TOS for Mailbox 9
  2108F  Uint16 TOS10 : 1 ;
  2109F                   // 10 TOS for Mailbox 10
  2110F  Uint16 TOS11 : 1 ;
  2111F                   // 11 TOS for Mailbox 11
  2112F  Uint16 TOS12 : 1 ;
  2113F                   // 12 TOS for Mailbox 12
  2114F  Uint16 TOS13 : 1 ;
  2115F                   // 13 TOS for Mailbox 13
  2116F  Uint16 TOS14 : 1 ;
  2117F                   // 14 TOS for Mailbox 14
  2118F  Uint16 TOS15 : 1 ;
  2119F                   // 15 TOS for Mailbox 15
  2120F  Uint16 TOS16 : 1 ;
  2121F                   // 16 TOS for Mailbox 16
  2122F  Uint16 TOS17 : 1 ;
  2123F                   // 17 TOS for Mailbox 17
  2124F  Uint16 TOS18 : 1 ;
  2125F                   // 18 TOS for Mailbox 18
  2126F  Uint16 TOS19 : 1 ;
  2127F                   // 19 TOS for Mailbox 19
  2128F  Uint16 TOS20 : 1 ;
  2129F                   // 20 TOS for Mailbox 20
  2130F  Uint16 TOS21 : 1 ;
  2131F                   // 21 TOS for Mailbox 21
  2132F  Uint16 TOS22 : 1 ;
  2133F                   // 22 TOS for Mailbox 22
  2134F  Uint16 TOS23 : 1 ;
  2135F                   // 23 TOS for Mailbox 23
  2136F  Uint16 TOS24 : 1 ;
  2137F                   // 24 TOS for Mailbox 24
  2138F  Uint16 TOS25 : 1 ;
  2139F                   // 25 TOS for Mailbox 25
  2140F  Uint16 TOS26 : 1 ;
  2141F                   // 26 TOS for Mailbox 26
  2142F  Uint16 TOS27 : 1 ;
  2143F                   // 27 TOS for Mailbox 27
  2144F  Uint16 TOS28 : 1 ;
  2145F                   // 28 TOS for Mailbox 28
  2146F  Uint16 TOS29 : 1 ;
  2147F                   // 29 TOS for Mailbox 29
  2148F  Uint16 TOS30 : 1 ;
  2149F                   // 30 TOS for Mailbox 30
  2150F  Uint16 TOS31 : 1 ;
  2151F                   // 31 TOS for Mailbox 31
  2152F} ;
  2153F/* Allow access to the bit fields or entire register */
  2154F
  2155Funion CANTOS_REG
  2156F{
  2157F  Uint32 all ;
  2158F  struct CANTOS_BITS bit ;
  2159F} ;
  2160F/**************************************/
  2161F/* eCAN Control & Status register file */
  2162F/**************************************/
  2163F
  2164Fstruct ECAN_REGS
  2165F{
  2166F  union CANME_REG CANME ; // Mailbox Enable
  2167F  union CANMD_REG CANMD ; // Mailbox Direction
  2168F  union CANTRS_REG CANTRS ; // Transmit Request Set
  2169F  union CANTRR_REG CANTRR ; // Transmit Request Reset
  2170F  union CANTA_REG CANTA ; // Transmit Acknowledge
  2171F  union CANAA_REG CANAA ; // Abort Acknowledge
  2172F  union CANRMP_REG CANRMP ; // Received Message Pending
  2173F  union CANRML_REG CANRML ; // Received Message Lost
  2174F  union CANRFP_REG CANRFP ; // Remote Frame Pending
  2175F  union CANGAM_REG CANGAM ; // Global Acceptance Mask
  2176F  union CANMC_REG CANMC ; // Master Control
  2177F  union CANBTC_REG CANBTC ; // Bit Timing
  2178F  union CANES_REG CANES ; // Error Status
  2179F  union CANTEC_REG CANTEC ; // Transmit Error Counter
  2180F  union CANREC_REG CANREC ; // Receive Error Counter
  2181F  union CANGIF0_REG CANGIF0 ; // Global Interrupt Flag 0
  2182F  union CANGIM_REG CANGIM ; // Global Interrupt Mask 0
  2183F  union CANGIF1_REG CANGIF1 ; // Global Interrupt Flag 1
  2184F  union CANMIM_REG CANMIM ; // Mailbox Interrupt Mask
  2185F  union CANMIL_REG CANMIL ; // Mailbox Interrupt Level
  2186F  union CANOPC_REG CANOPC ; // Overwrite Protection Control
  2187F  union CANTIOC_REG CANTIOC ; // TX I/O Control
  2188F  union CANRIOC_REG CANRIOC ; // RX I/O Control
  2189F  Uint32 CANTSC ; // Time-stamp counter
  2190F  union CANTOC_REG CANTOC ; // Time-out Control
  2191F  union CANTOS_REG CANTOS ; // Time-out Status
  2192F} ;
  2193F/* --------------------------------------------------- */
  2194F/* eCAN Mailbox Registers */
  2195F/* ----------------------------------------------------*/
  2196F/* eCAN Message ID (MSGID) bit definitions */
  2197F
  2198Fstruct CANMSGID_BITS
  2199F{                      // bits description
  2200F  Uint16 EXTMSGID_L : 16 ;
  2201F                         // 0:15
  2202F  Uint16 EXTMSGID_H : 2 ;
  2203F                        // 16:17
  2204F  Uint16 STDMSGID : 11 ;
  2205F                       // 18:28
  2206F  Uint16 AAM : 1 ;
  2207F                 // 29
  2208F  Uint16 AME : 1 ;
  2209F                 // 30
  2210F  Uint16 IDE : 1 ;
  2211F                 // 31
  2212F} ;
  2213F/* Allow access to the bit fields or entire register */
  2214F
  2215Funion CANMSGID_REG
  2216F{
  2217F  Uint32 all ;
  2218F  struct CANMSGID_BITS bit ;
  2219F} ;
  2220F/* eCAN Message Control Register (MSGCTRL) bit definitions */
  2221F
  2222Fstruct CANMSGCTRL_BITS
  2223F{                        // bits description
  2224F  Uint16 DLC : 4 ;
  2225F                 // 0:3
  2226F  Uint16 RTR : 1 ;
  2227F                 // 4
  2228F  Uint16 rsvd1 : 3 ;
  2229F                   // 7:5 reserved
  2230F  Uint16 TPL : 5 ;
  2231F                 // 12:8
  2232F  Uint16 rsvd2 : 3 ;
  2233F                   // 15:13 reserved
  2234F  Uint16 rsvd3 : 16 ;
  2235F                    // 31:16 reserved
  2236F} ;
  2237F/* Allow access to the bit fields or entire register */
  2238F
  2239Funion CANMSGCTRL_REG
  2240F{
  2241F  Uint32 all ;
  2242F  struct CANMSGCTRL_BITS bit ;
  2243F} ;
  2244F/* eCAN Message Data Register low (MDR_L) word definitions */
  2245F
  2246Fstruct CANMDL_WORDS
  2247F{                     // bits description
  2248F  Uint16 LOW_WORD : 16 ;
  2249F                       // 0:15
  2250F  Uint16 HI_WORD : 16 ;
  2251F                      // 31:16
  2252F} ;
  2253F/* eCAN Message Data Register low (MDR_L) byte definitions */
  2254F
  2255Fstruct CANMDL_BYTES
  2256F{                     // bits description
  2257F  Uint16 BYTE3 : 8 ;
  2258F                   // 31:24
  2259F  Uint16 BYTE2 : 8 ;
  2260F                   // 23:16
  2261F  Uint16 BYTE1 : 8 ;
  2262F                   // 15:8
  2263F  Uint16 BYTE0 : 8 ;
  2264F                   // 7:0
  2265F} ;
  2266F/* Allow access to the bit fields or entire register */
  2267F
  2268Funion CANMDL_REG
  2269F{
  2270F  Uint32 all ;
  2271F  struct CANMDL_WORDS word ;
  2272F  struct CANMDL_BYTES byte ;
  2273F} ;
  2274F/* eCAN Message Data Register high (MDR_H) word definitions */
  2275F
  2276Fstruct CANMDH_WORDS
  2277F{                     // bits description
  2278F  Uint16 LOW_WORD : 16 ;
  2279F                       // 0:15
  2280F  Uint16 HI_WORD : 16 ;
  2281F                      // 31:16
  2282F} ;
  2283F/* eCAN Message Data Register low (MDR_H) byte definitions */
  2284F
  2285Fstruct CANMDH_BYTES
  2286F{                     // bits description
  2287F  Uint16 BYTE7 : 8 ;
  2288F                   // 63:56
  2289F  Uint16 BYTE6 : 8 ;
  2290F                   // 55:48
  2291F  Uint16 BYTE5 : 8 ;
  2292F                   // 47:40
  2293F  Uint16 BYTE4 : 8 ;
  2294F                   // 39:32
  2295F} ;
  2296F/* Allow access to the bit fields or entire register */
  2297F
  2298Funion CANMDH_REG
  2299F{
  2300F  Uint32 all ;
  2301F  struct CANMDH_WORDS word ;
  2302F  struct CANMDH_BYTES byte ;
  2303F} ;
  2304F
  2305Fstruct MBOX
  2306F{
  2307F  union CANMSGID_REG MSGID ;
  2308F  union CANMSGCTRL_REG MSGCTRL ;
  2309F  union CANMDL_REG MDL ;
  2310F  union CANMDH_REG MDH ;
  2311F} ;
  2312F/**************************************/
  2313F/* eCAN Mailboxes */
  2314F/**************************************/
  2315F
  2316Fstruct ECAN_MBOXES
  2317F{
  2318F  struct MBOX MBOX0 ;
  2319F  struct MBOX MBOX1 ;
  2320F  struct MBOX MBOX2 ;
  2321F  struct MBOX MBOX3 ;
  2322F  struct MBOX MBOX4 ;
  2323F  struct MBOX MBOX5 ;
  2324F  struct MBOX MBOX6 ;
  2325F  struct MBOX MBOX7 ;
  2326F  struct MBOX MBOX8 ;
  2327F  struct MBOX MBOX9 ;
  2328F  struct MBOX MBOX10 ;
  2329F  struct MBOX MBOX11 ;
  2330F  struct MBOX MBOX12 ;
  2331F  struct MBOX MBOX13 ;
  2332F  struct MBOX MBOX14 ;
  2333F  struct MBOX MBOX15 ;
  2334F  struct MBOX MBOX16 ;
  2335F  struct MBOX MBOX17 ;
  2336F  struct MBOX MBOX18 ;
  2337F  struct MBOX MBOX19 ;
  2338F  struct MBOX MBOX20 ;
  2339F  struct MBOX MBOX21 ;
  2340F  struct MBOX MBOX22 ;
  2341F  struct MBOX MBOX23 ;
  2342F  struct MBOX MBOX24 ;
  2343F  struct MBOX MBOX25 ;
  2344F  struct MBOX MBOX26 ;
  2345F  struct MBOX MBOX27 ;
  2346F  struct MBOX MBOX28 ;
  2347F  struct MBOX MBOX29 ;
  2348F  struct MBOX MBOX30 ;
  2349F  struct MBOX MBOX31 ;
  2350F} ;
  2351F/* eCAN Local Acceptance Mask (LAM) bit definitions */
  2352F
  2353Fstruct CANLAM_BITS
  2354F{                    // bits description
  2355F  Uint16 LAM_L : 16 ;
  2356F                    // 0:15
  2357F  Uint16 LAM_H : 13 ;
  2358F                    // 16:28
  2359F  Uint16 rsvd1 : 2 ;
  2360F                   // 29:30 reserved
  2361F  Uint16 LAMI : 1 ;
  2362F                  // 31
  2363F} ;
  2364F/* Allow access to the bit fields or entire register */
  2365F
  2366Funion CANLAM_REG
  2367F{
  2368F  Uint32 all ;
  2369F  struct CANLAM_BITS bit ;
  2370F} ;
  2371F/**************************************/
  2372F/* eCAN Local Acceptance Masks */
  2373F/**************************************/
  2374F/* eCAN LAM File */
  2375F
  2376Fstruct LAM_REGS
  2377F{
  2378F  union CANLAM_REG LAM0 ;
  2379F  union CANLAM_REG LAM1 ;
  2380F  union CANLAM_REG LAM2 ;
  2381F  union CANLAM_REG LAM3 ;
  2382F  union CANLAM_REG LAM4 ;
  2383F  union CANLAM_REG LAM5 ;
  2384F  union CANLAM_REG LAM6 ;
  2385F  union CANLAM_REG LAM7 ;
  2386F  union CANLAM_REG LAM8 ;
  2387F  union CANLAM_REG LAM9 ;
  2388F  union CANLAM_REG LAM10 ;
  2389F  union CANLAM_REG LAM11 ;
  2390F  union CANLAM_REG LAM12 ;
  2391F  union CANLAM_REG LAM13 ;
  2392F  union CANLAM_REG LAM14 ;
  2393F  union CANLAM_REG LAM15 ;
  2394F  union CANLAM_REG LAM16 ;
  2395F  union CANLAM_REG LAM17 ;
  2396F  union CANLAM_REG LAM18 ;
  2397F  union CANLAM_REG LAM19 ;
  2398F  union CANLAM_REG LAM20 ;
  2399F  union CANLAM_REG LAM21 ;
  2400F  union CANLAM_REG LAM22 ;
  2401F  union CANLAM_REG LAM23 ;
  2402F  union CANLAM_REG LAM24 ;
  2403F  union CANLAM_REG LAM25 ;
  2404F  union CANLAM_REG LAM26 ;
  2405F  union CANLAM_REG LAM27 ;
  2406F  union CANLAM_REG LAM28 ;
  2407F  union CANLAM_REG LAM29 ;
  2408F  union CANLAM_REG LAM30 ;
  2409F  union CANLAM_REG LAM31 ;
  2410F} ;
  2411F/* Mailbox MOTS File */
  2412F
  2413Fstruct MOTS_REGS
  2414F{
  2415F  Uint32 MOTS0 ;
  2416F  Uint32 MOTS1 ;
  2417F  Uint32 MOTS2 ;
  2418F  Uint32 MOTS3 ;
  2419F  Uint32 MOTS4 ;
  2420F  Uint32 MOTS5 ;
  2421F  Uint32 MOTS6 ;
  2422F  Uint32 MOTS7 ;
  2423F  Uint32 MOTS8 ;
  2424F  Uint32 MOTS9 ;
  2425F  Uint32 MOTS10 ;
  2426F  Uint32 MOTS11 ;
  2427F  Uint32 MOTS12 ;
  2428F  Uint32 MOTS13 ;
  2429F  Uint32 MOTS14 ;
  2430F  Uint32 MOTS15 ;
  2431F  Uint32 MOTS16 ;
  2432F  Uint32 MOTS17 ;
  2433F  Uint32 MOTS18 ;
  2434F  Uint32 MOTS19 ;
  2435F  Uint32 MOTS20 ;
  2436F  Uint32 MOTS21 ;
  2437F  Uint32 MOTS22 ;
  2438F  Uint32 MOTS23 ;
  2439F  Uint32 MOTS24 ;
  2440F  Uint32 MOTS25 ;
  2441F  Uint32 MOTS26 ;
  2442F  Uint32 MOTS27 ;
  2443F  Uint32 MOTS28 ;
  2444F  Uint32 MOTS29 ;
  2445F  Uint32 MOTS30 ;
  2446F  Uint32 MOTS31 ;
  2447F} ;
  2448F/* Mailbox MOTO File */
  2449F
  2450Fstruct MOTO_REGS
  2451F{
  2452F  Uint32 MOTO0 ;
  2453F  Uint32 MOTO1 ;
  2454F  Uint32 MOTO2 ;
  2455F  Uint32 MOTO3 ;
  2456F  Uint32 MOTO4 ;
  2457F  Uint32 MOTO5 ;
  2458F  Uint32 MOTO6 ;
  2459F  Uint32 MOTO7 ;
  2460F  Uint32 MOTO8 ;
  2461F  Uint32 MOTO9 ;
  2462F  Uint32 MOTO10 ;
  2463F  Uint32 MOTO11 ;
  2464F  Uint32 MOTO12 ;
  2465F  Uint32 MOTO13 ;
  2466F  Uint32 MOTO14 ;
  2467F  Uint32 MOTO15 ;
  2468F  Uint32 MOTO16 ;
  2469F  Uint32 MOTO17 ;
  2470F  Uint32 MOTO18 ;
  2471F  Uint32 MOTO19 ;
  2472F  Uint32 MOTO20 ;
  2473F  Uint32 MOTO21 ;
  2474F  Uint32 MOTO22 ;
  2475F  Uint32 MOTO23 ;
  2476F  Uint32 MOTO24 ;
  2477F  Uint32 MOTO25 ;
  2478F  Uint32 MOTO26 ;
  2479F  Uint32 MOTO27 ;
  2480F  Uint32 MOTO28 ;
  2481F  Uint32 MOTO29 ;
  2482F  Uint32 MOTO30 ;
  2483F  Uint32 MOTO31 ;
  2484F} ;
  2485F//---------------------------------------------------------------------------
  2486F// eCAN External References & Function Declarations:
  2487F//
  2488F
  2489Fextern volatile struct ECAN_REGS
  2490F  ECanaRegs ;
  2491F
  2492Fextern volatile struct ECAN_MBOXES
  2493F  ECanaMboxes ;
  2494F
  2495Fextern volatile struct LAM_REGS
  2496F  ECanaLAMRegs ;
  2497F
  2498Fextern volatile struct MOTO_REGS
  2499F  ECanaMOTORegs ;
  2500F
  2501Fextern volatile struct MOTS_REGS
  2502F  ECanaMOTSRegs ;
  2503F
  2504Fextern volatile struct ECAN_REGS
  2505F  ECanbRegs ;
  2506F
  2507Fextern volatile struct ECAN_MBOXES
  2508F  ECanbMboxes ;
  2509F
  2510Fextern volatile struct LAM_REGS
  2511F  ECanbLAMRegs ;
  2512F
  2513Fextern volatile struct MOTO_REGS
  2514F  ECanbMOTORegs ;
  2515F
  2516Fextern volatile struct MOTS_REGS
  2517F  ECanbMOTSRegs ;
  2518F       /* extern "C" */
  2519F       // end of DSP2833x_ECAN.H definition
  2520F//===========================================================================
  2521F// End of file.
  2522F//===========================================================================
  2523F 
  2524F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECan.h*/
  2525F/*   CLOSE_FILE Include File */
  2526F 
  2527F               // Enhanced eCAN Registers
  2528F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECap.h */
  2529F// TI File $Revision: /main/1 $
  2530F// Checkin $Date: August 18, 2006 13:52:07 $
  2531F//###########################################################################
  2532F//
  2533F// FILE: DSP2833x_ECap.h
  2534F//
  2535F// TITLE: DSP2833x Enhanced Capture Module Register Bit Definitions.
  2536F//
  2537F//###########################################################################
  2538F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  2539F// $Release Date: August 4, 2009 $
  2540F//###########################################################################
  2541F#ifndef DSP2833x_ECAP_H
  2542F#define DSP2833x_ECAP_H
  2543F//----------------------------------------------------
  2544F// Capture control register 1 bit definitions */
  2545F
  2546Fstruct ECCTL1_BITS
  2547F{                    // bits description
  2548F  Uint16 CAP1POL : 1 ;
  2549F                     // 0 Capture Event 1 Polarity select
  2550F  Uint16 CTRRST1 : 1 ;
  2551F                     // 1 Counter Reset on Capture Event 1
  2552F  Uint16 CAP2POL : 1 ;
  2553F                     // 2 Capture Event 2 Polarity select
  2554F  Uint16 CTRRST2 : 1 ;
  2555F                     // 3 Counter Reset on Capture Event 2
  2556F  Uint16 CAP3POL : 1 ;
  2557F                     // 4 Capture Event 3 Polarity select
  2558F  Uint16 CTRRST3 : 1 ;
  2559F                     // 5 Counter Reset on Capture Event 3
  2560F  Uint16 CAP4POL : 1 ;
  2561F                     // 6 Capture Event 4 Polarity select
  2562F  Uint16 CTRRST4 : 1 ;
  2563F                     // 7 Counter Reset on Capture Event 4
  2564F  Uint16 CAPLDEN : 1 ;
  2565F                     // 8 Enable Loading CAP1-4 regs on a Cap Event
  2566F  Uint16 PRESCALE : 5 ;
  2567F                      // 13:9 Event Filter prescale select
  2568F  Uint16 FREE_SOFT : 2 ;
  2569F                       // 15:14 Emulation mode
  2570F} ;
  2571F
  2572Funion ECCTL1_REG
  2573F{
  2574F  Uint16 all ;
  2575F  struct ECCTL1_BITS bit ;
  2576F} ;
  2577F// In V1.1 the STOPVALUE bit field was changed to
  2578F// STOP_WRAP. This correlated to a silicon change from
  2579F// F2833x Rev 0 to Rev A.
  2580F//----------------------------------------------------
  2581F// Capture control register 2 bit definitions */
  2582F
  2583Fstruct ECCTL2_BITS
  2584F{                    // bits description
  2585F  Uint16 CONT_ONESHT : 1 ;
  2586F                         // 0 Continuous or one-shot
  2587F  Uint16 STOP_WRAP : 2 ;
  2588F                       // 2:1 Stop value for one-shot, Wrap for continuous
  2589F  Uint16 REARM : 1 ;
  2590F                   // 3 One-shot re-arm
  2591F  Uint16 TSCTRSTOP : 1 ;
  2592F                       // 4 TSCNT counter stop
  2593F  Uint16 SYNCI_EN : 1 ;
  2594F                      // 5 Counter sync-in select
  2595F  Uint16 SYNCO_SEL : 2 ;
  2596F                       // 7:6 Sync-out mode
  2597F  Uint16 SWSYNC : 1 ;
  2598F                    // 8 SW forced counter sync
  2599F  Uint16 CAP_APWM : 1 ;
  2600F                      // 9 CAP/APWM operating mode select
  2601F  Uint16 APWMPOL : 1 ;
  2602F                     // 10 APWM output polarity select
  2603F  Uint16 rsvd1 : 5 ;
  2604F                   // 15:11
  2605F} ;
  2606F
  2607Funion ECCTL2_REG
  2608F{
  2609F  Uint16 all ;
  2610F  struct ECCTL2_BITS bit ;
  2611F} ;
  2612F//----------------------------------------------------
  2613F// ECAP interrupt enable register bit definitions */
  2614F
  2615Fstruct ECEINT_BITS
  2616F{                    // bits description
  2617F  Uint16 rsvd1 : 1 ;
  2618F                   // 0 reserved
  2619F  Uint16 CEVT1 : 1 ;
  2620F                   // 1 Capture Event 1 Interrupt Enable
  2621F  Uint16 CEVT2 : 1 ;
  2622F                   // 2 Capture Event 2 Interrupt Enable
  2623F  Uint16 CEVT3 : 1 ;
  2624F                   // 3 Capture Event 3 Interrupt Enable
  2625F  Uint16 CEVT4 : 1 ;
  2626F                   // 4 Capture Event 4 Interrupt Enable
  2627F  Uint16 CTROVF : 1 ;
  2628F                    // 5 Counter Overflow Interrupt Enable
  2629F  Uint16 CTR_EQ_PRD : 1 ;
  2630F                        // 6 Period Equal Interrupt Enable
  2631F  Uint16 CTR_EQ_CMP : 1 ;
  2632F                        // 7 Compare Equal Interrupt Enable
  2633F  Uint16 rsvd2 : 8 ;
  2634F                   // 15:8 reserved
  2635F} ;
  2636F
  2637Funion ECEINT_REG
  2638F{
  2639F  Uint16 all ;
  2640F  struct ECEINT_BITS bit ;
  2641F} ;
  2642F//----------------------------------------------------
  2643F// ECAP interrupt flag register bit definitions */
  2644F
  2645Fstruct ECFLG_BITS
  2646F{                   // bits description
  2647F  Uint16 INT : 1 ;
  2648F                 // 0 Global Flag
  2649F  Uint16 CEVT1 : 1 ;
  2650F                   // 1 Capture Event 1 Interrupt Flag
  2651F  Uint16 CEVT2 : 1 ;
  2652F                   // 2 Capture Event 2 Interrupt Flag
  2653F  Uint16 CEVT3 : 1 ;
  2654F                   // 3 Capture Event 3 Interrupt Flag
  2655F  Uint16 CEVT4 : 1 ;
  2656F                   // 4 Capture Event 4 Interrupt Flag
  2657F  Uint16 CTROVF : 1 ;
  2658F                    // 5 Counter Overflow Interrupt Flag
  2659F  Uint16 CTR_EQ_PRD : 1 ;
  2660F                        // 6 Period Equal Interrupt Flag
  2661F  Uint16 CTR_EQ_CMP : 1 ;
  2662F                        // 7 Compare Equal Interrupt Flag
  2663F  Uint16 rsvd2 : 8 ;
  2664F                   // 15:8 reserved
  2665F} ;
  2666F
  2667Funion ECFLG_REG
  2668F{
  2669F  Uint16 all ;
  2670F  struct ECFLG_BITS bit ;
  2671F} ;
  2672F//----------------------------------------------------
  2673F
  2674Fstruct ECAP_REGS
  2675F{
  2676F  Uint32 TSCTR ; // Time stamp counter
  2677F  Uint32 CTRPHS ; // Counter phase
  2678F  Uint32 CAP1 ; // Capture 1
  2679F  Uint32 CAP2 ; // Capture 2
  2680F  Uint32 CAP3 ; // Capture 3
  2681F  Uint32 CAP4 ; // Capture 4
  2682F  Uint16 rsvd1 [ 8 ] ;
  2683F                    // reserved
  2684F  union ECCTL1_REG ECCTL1 ; // Capture Control Reg 1
  2685F  union ECCTL2_REG ECCTL2 ; // Capture Control Reg 2
  2686F  union ECEINT_REG ECEINT ; // ECAP interrupt enable
  2687F  union ECFLG_REG ECFLG ; // ECAP interrupt flags
  2688F  union ECFLG_REG ECCLR ; // ECAP interrupt clear
  2689F  union ECEINT_REG ECFRC ; // ECAP interrupt force
  2690F  Uint16 rsvd2 [ 6 ] ;
  2691F                    // reserved
  2692F} ;
  2693F//---------------------------------------------------------------------------
  2694F// GPI/O External References & Function Declarations:
  2695F//
  2696F
  2697Fextern volatile struct ECAP_REGS
  2698F  ECap1Regs ;
  2699F
  2700Fextern volatile struct ECAP_REGS
  2701F  ECap2Regs ;
  2702F
  2703Fextern volatile struct ECAP_REGS
  2704F  ECap3Regs ;
  2705F
  2706Fextern volatile struct ECAP_REGS
  2707F  ECap4Regs ;
  2708F
  2709Fextern volatile struct ECAP_REGS
  2710F  ECap5Regs ;
  2711F
  2712Fextern volatile struct ECAP_REGS
  2713F  ECap6Regs ;
  2714F       /* extern "C" */
  2715F       // end of DSP2833x_ECAP_H definition
  2716F//===========================================================================
  2717F// End of file.
  2718F//===========================================================================
  2719F 
  2720F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECap.h*/
  2721F/*   CLOSE_FILE Include File */
  2722F 
  2723F               // Enhanced Capture
  2724F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DMA.h */
  2725F// TI File $Revision: /main/11 $
  2726F// Checkin $Date: June 23, 2008 11:34:15 $
  2727F//###########################################################################
  2728F//
  2729F// FILE: DSP2833x_DMA.h
  2730F//
  2731F// TITLE: DSP2833x DMA Module Register Bit Definitions.
  2732F//
  2733F//###########################################################################
  2734F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  2735F// $Release Date: August 4, 2009 $
  2736F//###########################################################################
  2737F#ifndef DSP2833x_DMA_H
  2738F#define DSP2833x_DMA_H
  2739F//----------------------------------------------------
  2740F// Channel MODE register bit definitions:
  2741F
  2742Fstruct MODE_BITS
  2743F{                  // bits description
  2744F  Uint16 PERINTSEL : 5 ;
  2745F                       // 4:0 Peripheral Interrupt and Sync Select Bits (R/W):
  2746F                             // 0 no interrupt
  2747F               // 1 SEQ1INT & ADCSYNC
  2748F                             // 2 SEQ2INT
  2749F               // 3 XINT1
  2750F               // 4 XINT2
  2751F               // 5 XINT3
  2752F               // 6 XINT4
  2753F               // 7 XINT5
  2754F               // 8 XINT6
  2755F               // 9 XINT7
  2756F               // 10 XINT13
  2757F               // 11 TINT0
  2758F               // 12 TINT1
  2759F               // 13 TINT2
  2760F               // 14 MXEVTA & MXSYNCA
  2761F               // 15 MREVTA & MRSYNCA
  2762F               // 16 MXEVTB & MXSYNCB
  2763F               // 17 MREVTB & MRSYNCB
  2764F                                 // 18 ePWM1SOCA
  2765F                                 // 19 ePWM1SOCB
  2766F                                 // 20 ePWM2SOCA
  2767F                                 // 21 ePWM2SOCB
  2768F                                 // 22 ePWM3SOCA
  2769F                                 // 23 ePWM3SOCB
  2770F                                 // 24 ePWM4SOCA
  2771F                                 // 25 ePWM4SOCB
  2772F                                 // 26 ePWM5SOCA
  2773F                                 // 27 ePWM5SOCB
  2774F                                 // 28 ePWM6SOCA
  2775F                                 // 29 ePWM6SOCB
  2776F                                 // 30:31 no interrupt
  2777F  Uint16 rsvd1 : 2 ;
  2778F                   // 6:5 (R=0:0)
  2779F  Uint16 OVRINTE : 1 ;
  2780F                     // 7 Overflow Interrupt Enable (R/W):
  2781F                             // 0 overflow interrupt disabled
  2782F                             // 1 overflow interrupt enabled
  2783F  Uint16 PERINTE : 1 ;
  2784F                     // 8 Peripheral Interrupt Enable Bit (R/W):
  2785F                             // 0 peripheral interrupt disabled
  2786F                             // 1 peripheral interrupt enabled
  2787F  Uint16 CHINTMODE : 1 ;
  2788F                       // 9 Channel Interrupt Mode Bit (R/W):
  2789F                             // 0 generate interrupt at beginning of new transfer
  2790F                             // 1 generate interrupt at end of transfer
  2791F  Uint16 ONESHOT : 1 ;
  2792F                     // 10 One Shot Mode Bit (R/W):
  2793F                             // 0 only interrupt event triggers single burst transfer
  2794F                             // 1 first interrupt triggers burst, continue until transfer count is zero
  2795F  Uint16 CONTINUOUS : 1 ;
  2796F                        // 11 Continous Mode Bit (R/W):
  2797F                             // 0 stop when transfer count is zero
  2798F                             // 1 re-initialize when transfer count is zero
  2799F  Uint16 SYNCE : 1 ;
  2800F                   // 12 Sync Enable Bit (R/W):
  2801F                             // 0 ignore selected interrupt sync signal
  2802F                             // 1 enable selected interrupt sync signal
  2803F  Uint16 SYNCSEL : 1 ;
  2804F                     // 13 Sync Select Bit (R/W):
  2805F                             // 0 sync signal controls source wrap counter
  2806F                             // 1 sync signal controls destination wrap counter
  2807F  Uint16 DATASIZE : 1 ;
  2808F                      // 14 Data Size Mode Bit (R/W):
  2809F                             // 0 16-bit data transfer size
  2810F                             // 1 32-bit data transfer size
  2811F  Uint16 CHINTE : 1 ;
  2812F                    // 15 Channel Interrupt Enable Bit (R/W):
  2813F                             // 0 channel interrupt disabled
  2814F                             // 1 channel interrupt enabled
  2815F} ;
  2816F
  2817Funion MODE_REG
  2818F{
  2819F  Uint16 all ;
  2820F  struct MODE_BITS bit ;
  2821F} ;
  2822F//----------------------------------------------------
  2823F// Channel CONTROL register bit definitions:
  2824F
  2825Fstruct CONTROL_BITS
  2826F{                     // bits description
  2827F  Uint16 RUN : 1 ;
  2828F                 // 0 Run Bit (R=0/W=1)
  2829F  Uint16 HALT : 1 ;
  2830F                  // 1 Halt Bit (R=0/W=1)
  2831F  Uint16 SOFTRESET : 1 ;
  2832F                       // 2 Soft Reset Bit (R=0/W=1)
  2833F  Uint16 PERINTFRC : 1 ;
  2834F                       // 3 Interrupt Force Bit (R=0/W=1)
  2835F  Uint16 PERINTCLR : 1 ;
  2836F                       // 4 Interrupt Clear Bit (R=0/W=1)
  2837F  Uint16 SYNCFRC : 1 ;
  2838F                     // 5 Sync Force Bit (R=0/W=1)
  2839F  Uint16 SYNCCLR : 1 ;
  2840F                     // 6 Sync Clear Bit (R=0/W=1)
  2841F  Uint16 ERRCLR : 1 ;
  2842F                    // 7 Error Clear Bit (R=0/W=1)
  2843F  Uint16 PERINTFLG : 1 ;
  2844F                       // 8 Interrupt Flag Bit (R):
  2845F                             // 0 no interrupt pending
  2846F                             // 1 interrupt pending
  2847F  Uint16 SYNCFLG : 1 ;
  2848F                     // 9 Sync Flag Bit (R):
  2849F                             // 0 no sync pending
  2850F                             // 1 sync pending
  2851F  Uint16 SYNCERR : 1 ;
  2852F                     // 10 Sync Error Flag Bit (R):
  2853F                             // 0 no sync error
  2854F                             // 1 sync error detected
  2855F  Uint16 TRANSFERSTS : 1 ;
  2856F                         // 11 Transfer Status Bit (R):
  2857F                             // 0 no transfer in progress or pending
  2858F                             // 1 transfer in progress or pending
  2859F  Uint16 BURSTSTS : 1 ;
  2860F                      // 12 Burst Status Bit (R):
  2861F                             // 0 no burst in progress or pending
  2862F                             // 1 burst in progress or pending
  2863F  Uint16 RUNSTS : 1 ;
  2864F                    // 13 Run Status Bit (R):
  2865F                             // 0 channel not running or halted
  2866F                             // 1 channel running
  2867F  Uint16 OVRFLG : 1 ;
  2868F                    // 14 Overflow Flag Bit(R)
  2869F                             // 0 no overflow event
  2870F                             // 1 overflow event
  2871F  Uint16 rsvd1 : 1 ;
  2872F                   // 15 (R=0)
  2873F} ;
  2874F
  2875Funion CONTROL_REG
  2876F{
  2877F  Uint16 all ;
  2878F  struct CONTROL_BITS bit ;
  2879F} ;
  2880F//----------------------------------------------------
  2881F// DMACTRL register bit definitions:
  2882F
  2883Fstruct DMACTRL_BITS
  2884F{                     // bits description
  2885F  Uint16 HARDRESET : 1 ;
  2886F                       // 0 Hard Reset Bit (R=0/W=1)
  2887F  Uint16 PRIORITYRESET : 1 ;
  2888F                           // 1 Priority Reset Bit (R=0/W=1)
  2889F  Uint16 rsvd1 : 14 ;
  2890F                    // 15:2 (R=0:0)
  2891F} ;
  2892F
  2893Funion DMACTRL_REG
  2894F{
  2895F  Uint16 all ;
  2896F  struct DMACTRL_BITS bit ;
  2897F} ;
  2898F//----------------------------------------------------
  2899F// DEBUGCTRL register bit definitions:
  2900F
  2901Fstruct DEBUGCTRL_BITS
  2902F{                       // bits description
  2903F  Uint16 rsvd1 : 15 ;
  2904F                    // 14:0 (R=0:0)
  2905F  Uint16 FREE : 1 ;
  2906F                  // 15 Debug Mode Bit (R/W):
  2907F                             // 0 halt after current read-write operation
  2908F                             // 1 continue running
  2909F} ;
  2910F
  2911Funion DEBUGCTRL_REG
  2912F{
  2913F  Uint16 all ;
  2914F  struct DEBUGCTRL_BITS bit ;
  2915F} ;
  2916F//----------------------------------------------------
  2917F// PRIORITYCTRL1 register bit definitions:
  2918F
  2919Fstruct PRIORITYCTRL1_BITS
  2920F{                           // bits description
  2921F  Uint16 CH1PRIORITY : 1 ;
  2922F                         // 0 Ch1 Priority Bit (R/W):
  2923F                             // 0 same priority as all other channels
  2924F                             // 1 highest priority channel
  2925F  Uint16 rsvd1 : 15 ;
  2926F                    // 15:1 (R=0:0)
  2927F} ;
  2928F
  2929Funion PRIORITYCTRL1_REG
  2930F{
  2931F  Uint16 all ;
  2932F  struct PRIORITYCTRL1_BITS bit ;
  2933F} ;
  2934F//----------------------------------------------------
  2935F// PRIORITYSTAT register bit definitions:
  2936F
  2937Fstruct PRIORITYSTAT_BITS
  2938F{                          // bits description
  2939F  Uint16 ACTIVESTS : 3 ;
  2940F                       // 2:0 Active Channel Status Bits (R):
  2941F                              // 0,0,0 no channel active
  2942F                              // 0,0,1 Ch1 channel active
  2943F                              // 0,1,0 Ch2 channel active
  2944F                              // 0,1,1 Ch3 channel active
  2945F                              // 1,0,0 Ch4 channel active
  2946F                              // 1,0,1 Ch5 channel active
  2947F                              // 1,1,0 Ch6 channel active
  2948F  Uint16 rsvd1 : 1 ;
  2949F                   // 3 (R=0)
  2950F  Uint16 ACTIVESTS_SHADOW : 3 ;
  2951F                              // 6:4 Active Channel Status Shadow Bits (R):
  2952F                              // 0,0,0 no channel active and interrupted by Ch1
  2953F                              // 0,0,1 cannot occur
  2954F                              // 0,1,0 Ch2 was active and interrupted by Ch1
  2955F                              // 0,1,1 Ch3 was active and interrupted by Ch1
  2956F                              // 1,0,0 Ch4 was active and interrupted by Ch1
  2957F                              // 1,0,1 Ch5 was active and interrupted by Ch1
  2958F                              // 1,1,0 Ch6 was active and interrupted by Ch1
  2959F  Uint16 rsvd2 : 9 ;
  2960F                   // 15:7 (R=0:0)
  2961F} ;
  2962F
  2963Funion PRIORITYSTAT_REG
  2964F{
  2965F  Uint16 all ;
  2966F  struct PRIORITYSTAT_BITS bit ;
  2967F} ;
  2968F// Burst Size
  2969F
  2970Fstruct BURST_SIZE_BITS
  2971F{                        // bits description
  2972F  Uint16 BURSTSIZE : 5 ;
  2973F                       // 4:0 Burst transfer size
  2974F  Uint16 rsvd1 : 11 ;
  2975F                    // 15:5 reserved
  2976F} ;
  2977F
  2978Funion BURST_SIZE_REG
  2979F{
  2980F  Uint16 all ;
  2981F  struct BURST_SIZE_BITS bit ;
  2982F} ;
  2983F// Burst Count
  2984F
  2985Fstruct BURST_COUNT_BITS
  2986F{                         // bits description
  2987F  Uint16 BURSTCOUNT : 5 ;
  2988F                        // 4:0 Burst transfer size
  2989F  Uint16 rsvd1 : 11 ;
  2990F                    // 15:5 reserved
  2991F} ;
  2992F
  2993Funion BURST_COUNT_REG
  2994F{
  2995F  Uint16 all ;
  2996F  struct BURST_COUNT_BITS bit ;
  2997F} ;
  2998F//----------------------------------------------------
  2999F// DMA Channel Registers:
  3000F
  3001Fstruct CH_REGS
  3002F{
  3003F  union MODE_REG MODE ; // Mode Register
  3004F  union CONTROL_REG CONTROL ; // Control Register
  3005F  union BURST_SIZE_REG BURST_SIZE ; // Burst Size Register
  3006F  union BURST_COUNT_REG BURST_COUNT ; // Burst Count Register
  3007F  int16 SRC_BURST_STEP ; // Source Burst Step Register
  3008F  int16 DST_BURST_STEP ; // Destination Burst Step Register
  3009F  Uint16 TRANSFER_SIZE ; // Transfer Size Register
  3010F  Uint16 TRANSFER_COUNT ; // Transfer Count Register
  3011F  int16 SRC_TRANSFER_STEP ; // Source Transfer Step Register
  3012F  int16 DST_TRANSFER_STEP ; // Destination Transfer Step Register
  3013F  Uint16 SRC_WRAP_SIZE ; // Source Wrap Size Register
  3014F  Uint16 SRC_WRAP_COUNT ; // Source Wrap Count Register
  3015F  int16 SRC_WRAP_STEP ; // Source Wrap Step Register
  3016F  Uint16 DST_WRAP_SIZE ; // Destination Wrap Size Register
  3017F  Uint16 DST_WRAP_COUNT ; // Destination Wrap Count Register
  3018F  int16 DST_WRAP_STEP ; // Destination Wrap Step Register
  3019F  Uint32 SRC_BEG_ADDR_SHADOW ; // Source Begin Address Shadow Register
  3020F  Uint32 SRC_ADDR_SHADOW ; // Source Address Shadow Register
  3021F  Uint32 SRC_BEG_ADDR_ACTIVE ; // Source Begin Address Active Register
  3022F  Uint32 SRC_ADDR_ACTIVE ; // Source Address Active Register
  3023F  Uint32 DST_BEG_ADDR_SHADOW ; // Destination Begin Address Shadow Register
  3024F  Uint32 DST_ADDR_SHADOW ; // Destination Address Shadow Register
  3025F  Uint32 DST_BEG_ADDR_ACTIVE ; // Destination Begin Address Active Register
  3026F  Uint32 DST_ADDR_ACTIVE ; // Destination Address Active Register
  3027F} ;
  3028F//----------------------------------------------------
  3029F// DMA Registers:
  3030F
  3031Fstruct DMA_REGS
  3032F{
  3033F  union DMACTRL_REG DMACTRL ; // DMA Control Register
  3034F  union DEBUGCTRL_REG DEBUGCTRL ; // Debug Control Register
  3035F  Uint16 rsvd0 ; // reserved
  3036F  Uint16 rsvd1 ; //
  3037F  union PRIORITYCTRL1_REG PRIORITYCTRL1 ; // Priority Control 1 Register
  3038F  Uint16 rsvd2 ; //
  3039F  union PRIORITYSTAT_REG PRIORITYSTAT ; // Priority Status Register
  3040F  Uint16 rsvd3 [ 25 ] ;
  3041F                     //
  3042F  struct CH_REGS CH1 ; // DMA Channel 1 Registers
  3043F  struct CH_REGS CH2 ; // DMA Channel 2 Registers
  3044F  struct CH_REGS CH3 ; // DMA Channel 3 Registers
  3045F  struct CH_REGS CH4 ; // DMA Channel 4 Registers
  3046F  struct CH_REGS CH5 ; // DMA Channel 5 Registers
  3047F  struct CH_REGS CH6 ; // DMA Channel 6 Registers
  3048F} ;
  3049F//---------------------------------------------------------------------------
  3050F// External References & Function Declarations:
  3051F//
  3052F
  3053Fextern volatile struct DMA_REGS
  3054F  DmaRegs ;
  3055F       /* extern "C" */
  3056F       // end of DSP2833x_DMA_H definition
  3057F//===========================================================================
  3058F// End of file.
  3059F//===========================================================================
  3060F 
  3061F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DMA.h*/
  3062F/*   CLOSE_FILE Include File */
  3063F 
  3064F                // DMA Registers
  3065F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EPwm.h */
  3066F// TI File $Revision: /main/1 $
  3067F// Checkin $Date: August 18, 2006 13:52:10 $
  3068F//###########################################################################
  3069F//
  3070F// FILE: DSP2833x_EPwm.h
  3071F//
  3072F// TITLE: DSP2833x Enhanced PWM Module Register Bit Definitions.
  3073F//
  3074F//###########################################################################
  3075F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  3076F// $Release Date: August 4, 2009 $
  3077F//###########################################################################
  3078F#ifndef DSP2833x_EPWM_H
  3079F#define DSP2833x_EPWM_H
  3080F//----------------------------------------------------
  3081F// Time base control register bit definitions */
  3082F
  3083Fstruct TBCTL_BITS
  3084F{                   // bits description
  3085F  Uint16 CTRMODE : 2 ;
  3086F                     // 1:0 Counter Mode
  3087F  Uint16 PHSEN : 1 ;
  3088F                   // 2 Phase load enable
  3089F  Uint16 PRDLD : 1 ;
  3090F                   // 3 Active period load
  3091F  Uint16 SYNCOSEL : 2 ;
  3092F                      // 5:4 Sync output select
  3093F  Uint16 SWFSYNC : 1 ;
  3094F                     // 6 Software force sync pulse
  3095F  Uint16 HSPCLKDIV : 3 ;
  3096F                       // 9:7 High speed time pre-scale
  3097F  Uint16 CLKDIV : 3 ;
  3098F                    // 12:10 Timebase clock pre-scale
  3099F  Uint16 PHSDIR : 1 ;
  3100F                    // 13 Phase Direction
  3101F  Uint16 FREE_SOFT : 2 ;
  3102F                       // 15:14 Emulation mode
  3103F} ;
  3104F
  3105Funion TBCTL_REG
  3106F{
  3107F  Uint16 all ;
  3108F  struct TBCTL_BITS bit ;
  3109F} ;
  3110F//----------------------------------------------------
  3111F// Time base status register bit definitions */
  3112F
  3113Fstruct TBSTS_BITS
  3114F{                   // bits description
  3115F  Uint16 CTRDIR : 1 ;
  3116F                    // 0 Counter direction status
  3117F  Uint16 SYNCI : 1 ;
  3118F                   // 1 External input sync status
  3119F  Uint16 CTRMAX : 1 ;
  3120F                    // 2 Counter max latched status
  3121F  Uint16 rsvd1 : 13 ;
  3122F                    // 15:3 reserved
  3123F} ;
  3124F
  3125Funion TBSTS_REG
  3126F{
  3127F  Uint16 all ;
  3128F  struct TBSTS_BITS bit ;
  3129F} ;
  3130F//----------------------------------------------------
  3131F// Compare control register bit definitions */
  3132F
  3133Fstruct CMPCTL_BITS
  3134F{                    // bits description
  3135F  Uint16 LOADAMODE : 2 ;
  3136F                       // 0:1 Active compare A
  3137F  Uint16 LOADBMODE : 2 ;
  3138F                       // 3:2 Active compare B
  3139F  Uint16 SHDWAMODE : 1 ;
  3140F                       // 4 Compare A block operating mode
  3141F  Uint16 rsvd1 : 1 ;
  3142F                   // 5 reserved
  3143F  Uint16 SHDWBMODE : 1 ;
  3144F                       // 6 Compare B block operating mode
  3145F  Uint16 rsvd2 : 1 ;
  3146F                   // 7 reserved
  3147F  Uint16 SHDWAFULL : 1 ;
  3148F                       // 8 Compare A Shadow registers full Status
  3149F  Uint16 SHDWBFULL : 1 ;
  3150F                       // 9 Compare B Shadow registers full Status
  3151F  Uint16 rsvd3 : 6 ;
  3152F                   // 15:10 reserved
  3153F} ;
  3154F
  3155Funion CMPCTL_REG
  3156F{
  3157F  Uint16 all ;
  3158F  struct CMPCTL_BITS bit ;
  3159F} ;
  3160F//----------------------------------------------------
  3161F// Action qualifier register bit definitions */
  3162F
  3163Fstruct AQCTL_BITS
  3164F{                   // bits description
  3165F  Uint16 ZRO : 2 ;
  3166F                 // 1:0 Action Counter = Zero
  3167F  Uint16 PRD : 2 ;
  3168F                 // 3:2 Action Counter = Period
  3169F  Uint16 CAU : 2 ;
  3170F                 // 5:4 Action Counter = Compare A up
  3171F  Uint16 CAD : 2 ;
  3172F                 // 7:6 Action Counter = Compare A down
  3173F  Uint16 CBU : 2 ;
  3174F                 // 9:8 Action Counter = Compare B up
  3175F  Uint16 CBD : 2 ;
  3176F                 // 11:10 Action Counter = Compare B down
  3177F  Uint16 rsvd : 4 ;
  3178F                  // 15:12 reserved
  3179F} ;
  3180F
  3181Funion AQCTL_REG
  3182F{
  3183F  Uint16 all ;
  3184F  struct AQCTL_BITS bit ;
  3185F} ;
  3186F//----------------------------------------------------
  3187F// Action qualifier SW force register bit definitions */
  3188F
  3189Fstruct AQSFRC_BITS
  3190F{                    // bits description
  3191F  Uint16 ACTSFA : 2 ;
  3192F                    // 1:0 Action when One-time SW Force A invoked
  3193F  Uint16 OTSFA : 1 ;
  3194F                   // 2 One-time SW Force A output
  3195F  Uint16 ACTSFB : 2 ;
  3196F                    // 4:3 Action when One-time SW Force B invoked
  3197F  Uint16 OTSFB : 1 ;
  3198F                   // 5 One-time SW Force A output
  3199F  Uint16 RLDCSF : 2 ;
  3200F                    // 7:6 Reload from Shadow options
  3201F  Uint16 rsvd1 : 8 ;
  3202F                   // 15:8 reserved
  3203F} ;
  3204F
  3205Funion AQSFRC_REG
  3206F{
  3207F  Uint16 all ;
  3208F  struct AQSFRC_BITS bit ;
  3209F} ;
  3210F//----------------------------------------------------
  3211F// Action qualifier continuous SW force register bit definitions */
  3212F
  3213Fstruct AQCSFRC_BITS
  3214F{                     // bits description
  3215F  Uint16 CSFA : 2 ;
  3216F                  // 1:0 Continuous Software Force on output A
  3217F  Uint16 CSFB : 2 ;
  3218F                  // 3:2 Continuous Software Force on output B
  3219F  Uint16 rsvd1 : 12 ;
  3220F                    // 15:4 reserved
  3221F} ;
  3222F
  3223Funion AQCSFRC_REG
  3224F{
  3225F  Uint16 all ;
  3226F  struct AQCSFRC_BITS bit ;
  3227F} ;
  3228F// As of version 1.1
  3229F// Changed the MODE bit-field to OUT_MODE
  3230F// Added the bit-field IN_MODE
  3231F// This corresponds to changes in silicon as of F2833x devices
  3232F// Rev A silicon.
  3233F//----------------------------------------------------
  3234F// Dead-band generator control register bit definitions
  3235F
  3236Fstruct DBCTL_BITS
  3237F{                   // bits description
  3238F  Uint16 OUT_MODE : 2 ;  // 1:0 Dead Band Output Mode Control
  3239F  Uint16 POLSEL : 2 ;
  3240F                    // 3:2 Polarity Select Control
  3241F  Uint16 IN_MODE : 2 ;
  3242F                     // 5:4 Dead Band Input Select Mode Control
  3243F  Uint16 rsvd1 : 10 ;
  3244F                    // 15:4 reserved
  3245F} ;
  3246F
  3247Funion DBCTL_REG
  3248F{
  3249F  Uint16 all ;
  3250F  struct DBCTL_BITS bit ;
  3251F} ;
  3252F//----------------------------------------------------
  3253F// Trip zone select register bit definitions
  3254F
  3255Fstruct TZSEL_BITS
  3256F{                   // bits description
  3257F  Uint16 CBC1 : 1 ;
  3258F                  // 0 TZ1 CBC select
  3259F  Uint16 CBC2 : 1 ;
  3260F                  // 1 TZ2 CBC select
  3261F  Uint16 CBC3 : 1 ;
  3262F                  // 2 TZ3 CBC select
  3263F  Uint16 CBC4 : 1 ;
  3264F                  // 3 TZ4 CBC select
  3265F  Uint16 CBC5 : 1 ;
  3266F                  // 4 TZ5 CBC select
  3267F  Uint16 CBC6 : 1 ;
  3268F                  // 5 TZ6 CBC select
  3269F  Uint16 rsvd1 : 2 ;
  3270F                   // 7:6 reserved
  3271F  Uint16 OSHT1 : 1 ;
  3272F                   // 8 One-shot TZ1 select
  3273F  Uint16 OSHT2 : 1 ;
  3274F                   // 9 One-shot TZ2 select
  3275F  Uint16 OSHT3 : 1 ;
  3276F                   // 10 One-shot TZ3 select
  3277F  Uint16 OSHT4 : 1 ;
  3278F                   // 11 One-shot TZ4 select
  3279F  Uint16 OSHT5 : 1 ;
  3280F                   // 12 One-shot TZ5 select
  3281F  Uint16 OSHT6 : 1 ;
  3282F                   // 13 One-shot TZ6 select
  3283F  Uint16 rsvd2 : 2 ;
  3284F                   // 15:14 reserved
  3285F} ;
  3286F
  3287Funion TZSEL_REG
  3288F{
  3289F  Uint16 all ;
  3290F  struct TZSEL_BITS bit ;
  3291F} ;
  3292F//----------------------------------------------------
  3293F// Trip zone control register bit definitions */
  3294F
  3295Fstruct TZCTL_BITS
  3296F{                   // bits description
  3297F  Uint16 TZA : 2 ;
  3298F                 // 1:0 TZ1 to TZ6 Trip Action On EPWMxA
  3299F  Uint16 TZB : 2 ;
  3300F                 // 3:2 TZ1 to TZ6 Trip Action On EPWMxB
  3301F  Uint16 rsvd : 12 ;
  3302F                   // 15:4 reserved
  3303F} ;
  3304F
  3305Funion TZCTL_REG
  3306F{
  3307F  Uint16 all ;
  3308F  struct TZCTL_BITS bit ;
  3309F} ;
  3310F//----------------------------------------------------
  3311F// Trip zone control register bit definitions */
  3312F
  3313Fstruct TZEINT_BITS
  3314F{                    // bits description
  3315F  Uint16 rsvd1 : 1 ;
  3316F                   // 0 reserved
  3317F  Uint16 CBC : 1 ;
  3318F                 // 1 Trip Zones Cycle By Cycle Int Enable
  3319F  Uint16 OST : 1 ;
  3320F                 // 2 Trip Zones One Shot Int Enable
  3321F  Uint16 rsvd2 : 13 ;
  3322F                    // 15:3 reserved
  3323F} ;
  3324F
  3325Funion TZEINT_REG
  3326F{
  3327F  Uint16 all ;
  3328F  struct TZEINT_BITS bit ;
  3329F} ;
  3330F//----------------------------------------------------
  3331F// Trip zone flag register bit definitions */
  3332F
  3333Fstruct TZFLG_BITS
  3334F{                   // bits description
  3335F  Uint16 INT : 1 ;
  3336F                 // 0 Global status
  3337F  Uint16 CBC : 1 ;
  3338F                 // 1 Trip Zones Cycle By Cycle Int
  3339F  Uint16 OST : 1 ;
  3340F                 // 2 Trip Zones One Shot Int
  3341F  Uint16 rsvd2 : 13 ;
  3342F                    // 15:3 reserved
  3343F} ;
  3344F
  3345Funion TZFLG_REG
  3346F{
  3347F  Uint16 all ;
  3348F  struct TZFLG_BITS bit ;
  3349F} ;
  3350F//----------------------------------------------------
  3351F// Trip zone flag clear register bit definitions */
  3352F
  3353Fstruct TZCLR_BITS
  3354F{                   // bits description
  3355F  Uint16 INT : 1 ;
  3356F                 // 0 Global status
  3357F  Uint16 CBC : 1 ;
  3358F                 // 1 Trip Zones Cycle By Cycle Int
  3359F  Uint16 OST : 1 ;
  3360F                 // 2 Trip Zones One Shot Int
  3361F  Uint16 rsvd2 : 13 ;
  3362F                    // 15:3 reserved
  3363F} ;
  3364F
  3365Funion TZCLR_REG
  3366F{
  3367F  Uint16 all ;
  3368F  struct TZCLR_BITS bit ;
  3369F} ;
  3370F//----------------------------------------------------
  3371F// Trip zone flag force register bit definitions */
  3372F
  3373Fstruct TZFRC_BITS
  3374F{                   // bits description
  3375F  Uint16 rsvd1 : 1 ;
  3376F                   // 0 reserved
  3377F  Uint16 CBC : 1 ;
  3378F                 // 1 Trip Zones Cycle By Cycle Int
  3379F  Uint16 OST : 1 ;
  3380F                 // 2 Trip Zones One Shot Int
  3381F  Uint16 rsvd2 : 13 ;
  3382F                    // 15:3 reserved
  3383F} ;
  3384F
  3385Funion TZFRC_REG
  3386F{
  3387F  Uint16 all ;
  3388F  struct TZFRC_BITS bit ;
  3389F} ;
  3390F//----------------------------------------------------
  3391F// Event trigger select register bit definitions */
  3392F
  3393Fstruct ETSEL_BITS
  3394F{                   // bits description
  3395F  Uint16 INTSEL : 3 ;
  3396F                    // 2:0 EPWMxINTn Select
  3397F  Uint16 INTEN : 1 ;
  3398F                   // 3 EPWMxINTn Enable
  3399F  Uint16 rsvd1 : 4 ;
  3400F                   // 7:4 reserved
  3401F  Uint16 SOCASEL : 3 ;
  3402F                     // 10:8 Start of conversion A Select
  3403F  Uint16 SOCAEN : 1 ;
  3404F                    // 11 Start of conversion A Enable
  3405F  Uint16 SOCBSEL : 3 ;
  3406F                     // 14:12 Start of conversion B Select
  3407F  Uint16 SOCBEN : 1 ;
  3408F                    // 15 Start of conversion B Enable
  3409F} ;
  3410F
  3411Funion ETSEL_REG
  3412F{
  3413F  Uint16 all ;
  3414F  struct ETSEL_BITS bit ;
  3415F} ;
  3416F//----------------------------------------------------
  3417F// Event trigger pre-scale register bit definitions */
  3418F
  3419Fstruct ETPS_BITS
  3420F{                  // bits description
  3421F  Uint16 INTPRD : 2 ;
  3422F                    // 1:0 EPWMxINTn Period Select
  3423F  Uint16 INTCNT : 2 ;
  3424F                    // 3:2 EPWMxINTn Counter Register
  3425F  Uint16 rsvd1 : 4 ;
  3426F                   // 7:4 reserved
  3427F  Uint16 SOCAPRD : 2 ;
  3428F                     // 9:8 EPWMxSOCA Period Select
  3429F  Uint16 SOCACNT : 2 ;
  3430F                     // 11:10 EPWMxSOCA Counter Register
  3431F  Uint16 SOCBPRD : 2 ;
  3432F                     // 13:12 EPWMxSOCB Period Select
  3433F  Uint16 SOCBCNT : 2 ;
  3434F                     // 15:14 EPWMxSOCB Counter Register
  3435F} ;
  3436F
  3437Funion ETPS_REG
  3438F{
  3439F  Uint16 all ;
  3440F  struct ETPS_BITS bit ;
  3441F} ;
  3442F//----------------------------------------------------
  3443F// Event trigger Flag register bit definitions */
  3444F
  3445Fstruct ETFLG_BITS
  3446F{                   // bits description
  3447F  Uint16 INT : 1 ;
  3448F                 // 0   EPWMxINTn Flag
  3449F  Uint16 rsvd1 : 1 ;
  3450F                   // 1 reserved
  3451F  Uint16 SOCA : 1 ;
  3452F                  // 2  EPWMxSOCA Flag
  3453F  Uint16 SOCB : 1 ;
  3454F                  // 3  EPWMxSOCB Flag
  3455F  Uint16 rsvd2 : 12 ;
  3456F                    // 15:4     reserved
  3457F} ;
  3458F
  3459Funion ETFLG_REG
  3460F{
  3461F  Uint16 all ;
  3462F  struct ETFLG_BITS bit ;
  3463F} ;
  3464F//----------------------------------------------------
  3465F// Event trigger Clear register bit definitions */
  3466F
  3467Fstruct ETCLR_BITS
  3468F{                   // bits description
  3469F  Uint16 INT : 1 ;
  3470F                 // 0   EPWMxINTn Clear
  3471F  Uint16 rsvd1 : 1 ;
  3472F                   // 1 reserved
  3473F  Uint16 SOCA : 1 ;
  3474F                  // 2  EPWMxSOCA Clear
  3475F  Uint16 SOCB : 1 ;
  3476F                  // 3  EPWMxSOCB Clear
  3477F  Uint16 rsvd2 : 12 ;
  3478F                    // 15:4     reserved
  3479F} ;
  3480F
  3481Funion ETCLR_REG
  3482F{
  3483F  Uint16 all ;
  3484F  struct ETCLR_BITS bit ;
  3485F} ;
  3486F//----------------------------------------------------
  3487F// Event trigger Force register bit definitions */
  3488F
  3489Fstruct ETFRC_BITS
  3490F{                   // bits description
  3491F  Uint16 INT : 1 ;
  3492F                 // 0   EPWMxINTn Force
  3493F  Uint16 rsvd1 : 1 ;
  3494F                   // 1 reserved
  3495F  Uint16 SOCA : 1 ;
  3496F                  // 2  EPWMxSOCA Force
  3497F  Uint16 SOCB : 1 ;
  3498F                  // 3  EPWMxSOCB Force
  3499F  Uint16 rsvd2 : 12 ;
  3500F                    // 15:4     reserved
  3501F} ;
  3502F
  3503Funion ETFRC_REG
  3504F{
  3505F  Uint16 all ;
  3506F  struct ETFRC_BITS bit ;
  3507F} ;
  3508F//----------------------------------------------------
  3509F// PWM chopper control register bit definitions */
  3510F
  3511Fstruct PCCTL_BITS
  3512F{                   // bits description
  3513F  Uint16 CHPEN : 1 ;
  3514F                   // 0 PWM chopping enable
  3515F  Uint16 OSHTWTH : 4 ;
  3516F                     // 4:1 One-shot pulse width
  3517F  Uint16 CHPFREQ : 3 ;
  3518F                     // 7:5 Chopping clock frequency
  3519F  Uint16 CHPDUTY : 3 ;
  3520F                     // 10:8 Chopping clock Duty cycle
  3521F  Uint16 rsvd1 : 5 ;
  3522F                   // 15:11 reserved
  3523F} ;
  3524F
  3525Funion PCCTL_REG
  3526F{
  3527F  Uint16 all ;
  3528F  struct PCCTL_BITS bit ;
  3529F} ;
  3530F
  3531Fstruct HRCNFG_BITS
  3532F{                       // bits description
  3533F  Uint16 EDGMODE : 2 ;  // 1:0 Edge Mode select Bits
  3534F  Uint16 CTLMODE : 1 ;  // 2 Control mode Select Bit
  3535F  Uint16 HRLOAD : 1 ;   // 3 Shadow mode Select Bit
  3536F  Uint16 rsvd1 : 12 ;   // 15:4 reserved
  3537F} ;
  3538F
  3539Funion HRCNFG_REG
  3540F{
  3541F  Uint16 all ;
  3542F  struct HRCNFG_BITS bit ;
  3543F} ;
  3544F
  3545Fstruct TBPHS_HRPWM_REG
  3546F{                               // bits description
  3547F  Uint16 TBPHSHR ;      // 15:0 Extension register for HRPWM Phase (8 bits)
  3548F  Uint16 TBPHS ; // 31:16 Phase offset register
  3549F} ;
  3550F
  3551Funion TBPHS_HRPWM_GROUP
  3552F{
  3553F  Uint32 all ;
  3554F  struct TBPHS_HRPWM_REG half ;
  3555F} ;
  3556F
  3557Fstruct CMPA_HRPWM_REG
  3558F{                               // bits description
  3559F  Uint16 CMPAHR ;        // 15:0 Extension register for HRPWM compare (8 bits)
  3560F  Uint16 CMPA ; // 31:16 Compare A reg
  3561F} ;
  3562F
  3563Funion CMPA_HRPWM_GROUP
  3564F{
  3565F  Uint32 all ;
  3566F  struct CMPA_HRPWM_REG half ;
  3567F} ;
  3568F
  3569Fstruct EPWM_REGS
  3570F{
  3571F  union TBCTL_REG TBCTL ; //
  3572F  union TBSTS_REG TBSTS ; //
  3573F  union TBPHS_HRPWM_GROUP TBPHS ; // Union of TBPHS:TBPHSHR
  3574F  Uint16 TBCTR ; // Counter
  3575F  Uint16 TBPRD ; // Period register set
  3576F  Uint16 rsvd1 ; //
  3577F  union CMPCTL_REG CMPCTL ; // Compare control
  3578F  union CMPA_HRPWM_GROUP CMPA ; // Union of CMPA:CMPAHR
  3579F  Uint16 CMPB ; // Compare B reg
  3580F  union AQCTL_REG AQCTLA ; // Action qual output A
  3581F  union AQCTL_REG AQCTLB ; // Action qual output B
  3582F  union AQSFRC_REG AQSFRC ; // Action qual SW force
  3583F  union AQCSFRC_REG AQCSFRC ; // Action qualifier continuous SW force
  3584F  union DBCTL_REG DBCTL ; // Dead-band control
  3585F  Uint16 DBRED ; // Dead-band rising edge delay
  3586F  Uint16 DBFED ; // Dead-band falling edge delay
  3587F  union TZSEL_REG TZSEL ; // Trip zone select
  3588F  Uint16 rsvd2 ;
  3589F  union TZCTL_REG TZCTL ; // Trip zone control
  3590F  union TZEINT_REG TZEINT ; // Trip zone interrupt enable
  3591F  union TZFLG_REG TZFLG ; // Trip zone interrupt flags
  3592F  union TZCLR_REG TZCLR ; // Trip zone clear
  3593F  union TZFRC_REG TZFRC ;       // Trip zone force interrupt
  3594F  union ETSEL_REG ETSEL ; // Event trigger selection
  3595F  union ETPS_REG ETPS ; // Event trigger pre-scaler
  3596F  union ETFLG_REG ETFLG ; // Event trigger flags
  3597F  union ETCLR_REG ETCLR ; // Event trigger clear
  3598F  union ETFRC_REG ETFRC ; // Event trigger force
  3599F  union PCCTL_REG PCCTL ; // PWM chopper control
  3600F  Uint16 rsvd3 ; //
  3601F  union HRCNFG_REG HRCNFG ; // HRPWM Config Reg
  3602F} ;
  3603F//---------------------------------------------------------------------------
  3604F// External References & Function Declarations:
  3605F//
  3606F
  3607Fextern volatile struct EPWM_REGS
  3608F  EPwm1Regs ;
  3609F
  3610Fextern volatile struct EPWM_REGS
  3611F  EPwm2Regs ;
  3612F
  3613Fextern volatile struct EPWM_REGS
  3614F  EPwm3Regs ;
  3615F
  3616Fextern volatile struct EPWM_REGS
  3617F  EPwm4Regs ;
  3618F
  3619Fextern volatile struct EPWM_REGS
  3620F  EPwm5Regs ;
  3621F
  3622Fextern volatile struct EPWM_REGS
  3623F  EPwm6Regs ;
  3624F       /* extern "C" */
  3625F       // end of DSP2833x_EPWM_H definition
  3626F//===========================================================================
  3627F// End of file.
  3628F//===========================================================================
  3629F 
  3630F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EPwm.h*/
  3631F/*   CLOSE_FILE Include File */
  3632F 
  3633F               // Enhanced PWM
  3634F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EQep.h */
  3635F// TI File $Revision: /main/1 $
  3636F// Checkin $Date: August 18, 2006 13:52:13 $
  3637F//###########################################################################
  3638F//
  3639F// FILE: DSP2833x_EQep.h
  3640F//
  3641F// TITLE: DSP2833x Enhanced Quadrature Encoder Pulse Module
  3642F// Register Bit Definitions.
  3643F//
  3644F//###########################################################################
  3645F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  3646F// $Release Date: August 4, 2009 $
  3647F//###########################################################################
  3648F#ifndef DSP2833x_EQEP_H
  3649F#define DSP2833x_EQEP_H
  3650F//----------------------------------------------------
  3651F// Capture decoder control register bit definitions */
  3652F
  3653Fstruct QDECCTL_BITS
  3654F{                     // bits description
  3655F  Uint16 rsvd1 : 5 ;
  3656F                   // 4:0 reserved
  3657F  Uint16 QSP : 1 ;
  3658F                 // 5 QEPS input polarity
  3659F  Uint16 QIP : 1 ;
  3660F                 // 6 QEPI input polarity
  3661F  Uint16 QBP : 1 ;
  3662F                 // 7 QEPB input polarity
  3663F  Uint16 QAP : 1 ;
  3664F                 // 8 QEPA input polarity
  3665F  Uint16 IGATE : 1 ;
  3666F                   // 9 Index pulse gating option
  3667F  Uint16 SWAP : 1 ;
  3668F                  // 10 CLK/DIR signal source for Position Counter
  3669F  Uint16 XCR : 1 ;
  3670F                 // 11 External clock rate
  3671F  Uint16 SPSEL : 1 ;
  3672F                   // 12 Sync output pin select
  3673F  Uint16 SOEN : 1 ;
  3674F                  // 13 Enable position compare sync
  3675F  Uint16 QSRC : 2 ;
  3676F                  // 15:14 Position counter source
  3677F} ;
  3678F
  3679Funion QDECCTL_REG
  3680F{
  3681F  Uint16 all ;
  3682F  struct QDECCTL_BITS bit ;
  3683F} ;
  3684F//----------------------------------------------------
  3685F// QEP control register bit definitions */
  3686F
  3687Fstruct QEPCTL_BITS
  3688F{                    // bits description
  3689F  Uint16 WDE : 1 ;
  3690F                 // 0 QEP watchdog enable
  3691F  Uint16 UTE : 1 ;
  3692F                 // 1 QEP unit timer enable
  3693F  Uint16 QCLM : 1 ;
  3694F                  // 2 QEP capture latch mode
  3695F  Uint16 QPEN : 1 ;
  3696F                  // 3 Quadrature position counter enable
  3697F  Uint16 IEL : 2 ;
  3698F                 // 5:4 Index event latch
  3699F  Uint16 SEL : 1 ;
  3700F                 // 6 Strobe event latch
  3701F  Uint16 SWI : 1 ;
  3702F                 // 7 Software init position counter
  3703F  Uint16 IEI : 2 ;
  3704F                 // 9:8 Index event init of position count
  3705F  Uint16 SEI : 2 ;
  3706F                 // 11:10 Strobe event init
  3707F  Uint16 PCRM : 2 ;
  3708F                  // 13:12 Position counter reset
  3709F  Uint16 FREE_SOFT : 2 ;
  3710F                       // 15:14 Emulation mode
  3711F} ;
  3712F
  3713Funion QEPCTL_REG
  3714F{
  3715F  Uint16 all ;
  3716F  struct QEPCTL_BITS bit ;
  3717F} ;
  3718F//----------------------------------------------------
  3719F// Quadrature capture control register bit definitions */
  3720F
  3721Fstruct QCAPCTL_BITS
  3722F{                     // bits description
  3723F  Uint16 UPPS : 4 ;
  3724F                  // 3:0 Unit position pre-scale
  3725F  Uint16 CCPS : 3 ;
  3726F                  // 6:4 QEP capture timer pre-scale
  3727F  Uint16 rsvd1 : 8 ;
  3728F                   // 14:7 reserved
  3729F  Uint16 CEN : 1 ;
  3730F                 // 15 Enable QEP capture
  3731F} ;
  3732F
  3733Funion QCAPCTL_REG
  3734F{
  3735F  Uint16 all ;
  3736F  struct QCAPCTL_BITS bit ;
  3737F} ;
  3738F//----------------------------------------------------
  3739F// Position compare control register bit definitions */
  3740F
  3741Fstruct QPOSCTL_BITS
  3742F{                     // bits description
  3743F  Uint16 PCSPW : 12 ;
  3744F                    // 11:0 Position compare sync pulse width
  3745F  Uint16 PCE : 1 ;
  3746F                 // 12 Position compare enable/disable
  3747F  Uint16 PCPOL : 1 ;
  3748F                   // 13 Polarity of sync output
  3749F  Uint16 PCLOAD : 1 ;
  3750F                    // 14 Position compare of shadow load
  3751F  Uint16 PCSHDW : 1 ;
  3752F                    // 15 Position compare shadow enable
  3753F} ;
  3754F
  3755Funion QPOSCTL_REG
  3756F{
  3757F  Uint16 all ;
  3758F  struct QPOSCTL_BITS bit ;
  3759F} ;
  3760F//----------------------------------------------------
  3761F// QEP interrupt control register bit definitions */
  3762F
  3763Fstruct QEINT_BITS
  3764F{                   // bits description
  3765F  Uint16 rsvd1 : 1 ;
  3766F                   // 0 reserved
  3767F  Uint16 PCE : 1 ;
  3768F                 // 1 Position counter error
  3769F  Uint16 QPE : 1 ;
  3770F                 // 2 Quadrature phase error
  3771F  Uint16 QDC : 1 ;
  3772F                 // 3 Quadrature dir change
  3773F  Uint16 WTO : 1 ;
  3774F                 // 4 Watchdog timeout
  3775F  Uint16 PCU : 1 ;
  3776F                 // 5 Position counter underflow
  3777F  Uint16 PCO : 1 ;
  3778F                 // 6 Position counter overflow
  3779F  Uint16 PCR : 1 ;
  3780F                 // 7 Position compare ready
  3781F  Uint16 PCM : 1 ;
  3782F                 // 8 Position compare match
  3783F  Uint16 SEL : 1 ;
  3784F                 // 9 Strobe event latch
  3785F  Uint16 IEL : 1 ;
  3786F                 // 10 Event latch
  3787F  Uint16 UTO : 1 ;
  3788F                 // 11 Unit timeout
  3789F  Uint16 rsvd2 : 4 ;
  3790F                   // 15:12 reserved
  3791F} ;
  3792F
  3793Funion QEINT_REG
  3794F{
  3795F  Uint16 all ;
  3796F  struct QEINT_BITS bit ;
  3797F} ;
  3798F//----------------------------------------------------
  3799F// QEP interrupt status register bit definitions */
  3800F
  3801Fstruct QFLG_BITS
  3802F{                  // bits description
  3803F  Uint16 INT : 1 ;
  3804F                 // 0 Global interrupt
  3805F  Uint16 PCE : 1 ;
  3806F                 // 1 Position counter error
  3807F  Uint16 PHE : 1 ;
  3808F                 // 2 Quadrature phase error
  3809F  Uint16 QDC : 1 ;
  3810F                 // 3 Quadrature dir change
  3811F  Uint16 WTO : 1 ;
  3812F                 // 4 Watchdog timeout
  3813F  Uint16 PCU : 1 ;
  3814F                 // 5 Position counter underflow
  3815F  Uint16 PCO : 1 ;
  3816F                 // 6 Position counter overflow
  3817F  Uint16 PCR : 1 ;
  3818F                 // 7 Position compare ready
  3819F  Uint16 PCM : 1 ;
  3820F                 // 8 Position compare match
  3821F  Uint16 SEL : 1 ;
  3822F                 // 9 Strobe event latch
  3823F  Uint16 IEL : 1 ;
  3824F                 // 10 Event latch
  3825F  Uint16 UTO : 1 ;
  3826F                 // 11 Unit timeout
  3827F  Uint16 rsvd2 : 4 ;
  3828F                   // 15:12 reserved
  3829F} ;
  3830F
  3831Funion QFLG_REG
  3832F{
  3833F  Uint16 all ;
  3834F  struct QFLG_BITS bit ;
  3835F} ;
  3836F//----------------------------------------------------
  3837F// QEP interrupt force register bit definitions */
  3838F
  3839Fstruct QFRC_BITS
  3840F{                  // bits description
  3841F  Uint16 reserved : 1 ;
  3842F                      // 0 Reserved
  3843F  Uint16 PCE : 1 ;
  3844F                 // 1 Position counter error
  3845F  Uint16 PHE : 1 ;
  3846F                 // 2 Quadrature phase error
  3847F  Uint16 QDC : 1 ;
  3848F                 // 3 Quadrature dir change
  3849F  Uint16 WTO : 1 ;
  3850F                 // 4 Watchdog timeout
  3851F  Uint16 PCU : 1 ;
  3852F                 // 5 Position counter underflow
  3853F  Uint16 PCO : 1 ;
  3854F                 // 6 Position counter overflow
  3855F  Uint16 PCR : 1 ;
  3856F                 // 7 Position compare ready
  3857F  Uint16 PCM : 1 ;
  3858F                 // 8 Position compare match
  3859F  Uint16 SEL : 1 ;
  3860F                 // 9 Strobe event latch
  3861F  Uint16 IEL : 1 ;
  3862F                 // 10 Event latch
  3863F  Uint16 UTO : 1 ;
  3864F                 // 11 Unit timeout
  3865F  Uint16 rsvd2 : 4 ;
  3866F                   // 15:12 reserved
  3867F} ;
  3868F
  3869Funion QFRC_REG
  3870F{
  3871F  Uint16 all ;
  3872F  struct QFRC_BITS bit ;
  3873F} ;
  3874F// V1.1 Added UPEVNT (bit 7) This reflects changes
  3875F// made as of F2833x Rev A devices
  3876F//----------------------------------------------------
  3877F// QEP status register bit definitions */
  3878F
  3879Fstruct QEPSTS_BITS
  3880F{                    // bits description
  3881F  Uint16 PCEF : 1 ;
  3882F                  // 0 Position counter error
  3883F  Uint16 FIMF : 1 ;
  3884F                  // 1 First index marker
  3885F  Uint16 CDEF : 1 ;
  3886F                  // 2 Capture direction error
  3887F  Uint16 COEF : 1 ;
  3888F                  // 3 Capture overflow error
  3889F  Uint16 QDLF : 1 ;
  3890F                  // 4 QEP direction latch
  3891F  Uint16 QDF : 1 ;
  3892F                 // 5 Quadrature direction
  3893F  Uint16 FIDF : 1 ;
  3894F                  // 6 Direction on first index marker
  3895F  Uint16 UPEVNT : 1 ;
  3896F                    // 7 Unit position event flag
  3897F  Uint16 rsvd1 : 8 ;
  3898F                   // 15:8 reserved
  3899F} ;
  3900F
  3901Funion QEPSTS_REG
  3902F{
  3903F  Uint16 all ;
  3904F  struct QEPSTS_BITS bit ;
  3905F} ;
  3906F//----------------------------------------------------
  3907F
  3908Fstruct EQEP_REGS
  3909F{
  3910F  Uint32 QPOSCNT ; // Position counter
  3911F  Uint32 QPOSINIT ; // Position counter init
  3912F  Uint32 QPOSMAX ; // Maximum position count
  3913F  Uint32 QPOSCMP ; // Position compare
  3914F  Uint32 QPOSILAT ; // Index position latch
  3915F  Uint32 QPOSSLAT ; // Strobe position latch
  3916F  Uint32 QPOSLAT ; // Position latch
  3917F  Uint32 QUTMR ; // Unit timer
  3918F  Uint32 QUPRD ; // Unit period
  3919F  Uint16 QWDTMR ; // QEP watchdog timer
  3920F  Uint16 QWDPRD ; // QEP watchdog period
  3921F  union QDECCTL_REG QDECCTL ; // Quadrature decoder control
  3922F  union QEPCTL_REG QEPCTL ; // QEP control
  3923F  union QCAPCTL_REG QCAPCTL ; // Quadrature capture control
  3924F  union QPOSCTL_REG QPOSCTL ; // Position compare control
  3925F  union QEINT_REG QEINT ; // QEP interrupt control
  3926F  union QFLG_REG QFLG ; // QEP interrupt flag
  3927F  union QFLG_REG QCLR ; // QEP interrupt clear
  3928F  union QFRC_REG QFRC ; // QEP interrupt force
  3929F  union QEPSTS_REG QEPSTS ; // QEP status
  3930F  Uint16 QCTMR ; // QEP capture timer
  3931F  Uint16 QCPRD ; // QEP capture period
  3932F  Uint16 QCTMRLAT ; // QEP capture latch
  3933F  Uint16 QCPRDLAT ; // QEP capture period latch
  3934F  Uint16 rsvd1 [ 30 ] ;
  3935F                     // reserved
  3936F} ;
  3937F//---------------------------------------------------------------------------
  3938F// GPI/O External References & Function Declarations:
  3939F//
  3940F
  3941Fextern volatile struct EQEP_REGS
  3942F  EQep1Regs ;
  3943F
  3944Fextern volatile struct EQEP_REGS
  3945F  EQep2Regs ;
  3946F       /* extern "C" */
  3947F       // end of DSP2833x_EQEP_H definition
  3948F//===========================================================================
  3949F// End of file.
  3950F//===========================================================================
  3951F 
  3952F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EQep.h*/
  3953F/*   CLOSE_FILE Include File */
  3954F 
  3955F               // Enhanced QEP
  3956F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Gpio.h */
  3957F// TI File $Revision: /main/4 $
  3958F// Checkin $Date: November 15, 2007 09:58:53 $
  3959F//###########################################################################
  3960F//
  3961F// FILE: DSP2833x_Gpio.h
  3962F//
  3963F// TITLE: DSP2833x General Purpose I/O Definitions.
  3964F//
  3965F//###########################################################################
  3966F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  3967F// $Release Date: August 4, 2009 $
  3968F//###########################################################################
  3969F#ifndef DSP2833x_GPIO_H
  3970F#define DSP2833x_GPIO_H
  3971F//----------------------------------------------------
  3972F// GPIO A control register bit definitions */
  3973F
  3974Ftypedef
  3975Fstruct GPACTRL_BITS
  3976F{                             // bits description
  3977F  Uint16 QUALPRD0 : 8 ;
  3978F                      // 7:0 Qual period
  3979F  Uint16 QUALPRD1 : 8 ;
  3980F                      // 15:8 Qual period
  3981F  Uint16 QUALPRD2 : 8 ;
  3982F                      // 23:16 Qual period
  3983F  Uint16 QUALPRD3 : 8 ;
  3984F                      // 31:24 Qual period
  3985F} GPACTRL_BITS ;
  3986F
  3987Ftypedef
  3988Funion GPACTRL_REG
  3989F{
  3990F  Uint32 all ;
  3991F  struct GPACTRL_BITS bit ;
  3992F} GPACTRL_REG ;
  3993F//----------------------------------------------------
  3994F// GPIO B control register bit definitions */
  3995F
  3996Ftypedef
  3997Fstruct GPBCTRL_BITS
  3998F{                             // bits description
  3999F  Uint16 QUALPRD0 : 8 ;
  4000F                      // 7:0 Qual period
  4001F  Uint16 QUALPRD1 : 8 ;
  4002F                      // 15:8 Qual period
  4003F  Uint16 QUALPRD2 : 8 ;
  4004F                      // 23:16 Qual period
  4005F  Uint16 QUALPRD3 : 8 ;
  4006F                      // 31:24
  4007F} GPBCTRL_BITS ;
  4008F
  4009Ftypedef
  4010Funion GPBCTRL_REG
  4011F{
  4012F  Uint32 all ;
  4013F  struct GPBCTRL_BITS bit ;
  4014F} GPBCTRL_REG ;
  4015F//----------------------------------------------------
  4016F// GPIO A Qual/MUX select register bit definitions */
  4017F
  4018Ftypedef
  4019Fstruct GPA1_BITS
  4020F{                          // bits description
  4021F  Uint16 GPIO0 : 2 ;
  4022F                   // 1:0 GPIO0
  4023F  Uint16 GPIO1 : 2 ;
  4024F                   // 3:2 GPIO1
  4025F  Uint16 GPIO2 : 2 ;
  4026F                   // 5:4 GPIO2
  4027F  Uint16 GPIO3 : 2 ;
  4028F                   // 7:6 GPIO3
  4029F  Uint16 GPIO4 : 2 ;
  4030F                   // 9:8 GPIO4
  4031F  Uint16 GPIO5 : 2 ;
  4032F                   // 11:10 GPIO5
  4033F  Uint16 GPIO6 : 2 ;
  4034F                   // 13:12 GPIO6
  4035F  Uint16 GPIO7 : 2 ;
  4036F                   // 15:14 GPIO7
  4037F  Uint16 GPIO8 : 2 ;
  4038F                   // 17:16 GPIO8
  4039F  Uint16 GPIO9 : 2 ;
  4040F                   // 19:18 GPIO9
  4041F  Uint16 GPIO10 : 2 ;
  4042F                    // 21:20 GPIO10
  4043F  Uint16 GPIO11 : 2 ;
  4044F                    // 23:22 GPIO11
  4045F  Uint16 GPIO12 : 2 ;
  4046F                    // 25:24 GPIO12
  4047F  Uint16 GPIO13 : 2 ;
  4048F                    // 27:26 GPIO13
  4049F  Uint16 GPIO14 : 2 ;
  4050F                    // 29:28 GPIO14
  4051F  Uint16 GPIO15 : 2 ;
  4052F                    // 31:30 GPIO15
  4053F} GPA1_BITS ;
  4054F
  4055Ftypedef
  4056Fstruct GPA2_BITS
  4057F{                          // bits description
  4058F  Uint16 GPIO16 : 2 ;
  4059F                    // 1:0 GPIO16
  4060F  Uint16 GPIO17 : 2 ;
  4061F                    // 3:2 GPIO17
  4062F  Uint16 GPIO18 : 2 ;
  4063F                    // 5:4 GPIO18
  4064F  Uint16 GPIO19 : 2 ;
  4065F                    // 7:6 GPIO19
  4066F  Uint16 GPIO20 : 2 ;
  4067F                    // 9:8 GPIO20
  4068F  Uint16 GPIO21 : 2 ;
  4069F                    // 11:10 GPIO21
  4070F  Uint16 GPIO22 : 2 ;
  4071F                    // 13:12 GPIO22
  4072F  Uint16 GPIO23 : 2 ;
  4073F                    // 15:14 GPIO23
  4074F  Uint16 GPIO24 : 2 ;
  4075F                    // 17:16 GPIO24
  4076F  Uint16 GPIO25 : 2 ;
  4077F                    // 19:18 GPIO25
  4078F  Uint16 GPIO26 : 2 ;
  4079F                    // 21:20 GPIO26
  4080F  Uint16 GPIO27 : 2 ;
  4081F                    // 23:22 GPIO27
  4082F  Uint16 GPIO28 : 2 ;
  4083F                    // 25:24 GPIO28
  4084F  Uint16 GPIO29 : 2 ;
  4085F                    // 27:26 GPIO29
  4086F  Uint16 GPIO30 : 2 ;
  4087F                    // 29:28 GPIO30
  4088F  Uint16 GPIO31 : 2 ;
  4089F                    // 31:30 GPIO31
  4090F} GPA2_BITS ;
  4091F
  4092Ftypedef
  4093Fstruct GPB1_BITS
  4094F{                          // bits description
  4095F  Uint16 GPIO32 : 2 ;
  4096F                    // 1:0 GPIO32
  4097F  Uint16 GPIO33 : 2 ;
  4098F                    // 3:2 GPIO33
  4099F  Uint16 GPIO34 : 2 ;
  4100F                    // 5:4 GPIO34
  4101F  Uint16 GPIO35 : 2 ;
  4102F                    // 7:6 GPIO35
  4103F  Uint16 GPIO36 : 2 ;
  4104F                    // 9:8 GPIO36
  4105F  Uint16 GPIO37 : 2 ;
  4106F                    // 11:10 GPIO37
  4107F  Uint16 GPIO38 : 2 ;
  4108F                    // 13:12 GPIO38
  4109F  Uint16 GPIO39 : 2 ;
  4110F                    // 15:14 GPIO39
  4111F  Uint16 GPIO40 : 2 ;
  4112F                    // 17:16 GPIO40
  4113F  Uint16 GPIO41 : 2 ;
  4114F                    // 19:16 GPIO41
  4115F  Uint16 GPIO42 : 2 ;
  4116F                    // 21:20 GPIO42
  4117F  Uint16 GPIO43 : 2 ;
  4118F                    // 23:22 GPIO43
  4119F  Uint16 GPIO44 : 2 ;
  4120F                    // 25:24 GPIO44
  4121F  Uint16 GPIO45 : 2 ;
  4122F                    // 27:26 GPIO45
  4123F  Uint16 GPIO46 : 2 ;
  4124F                    // 29:28 GPIO46
  4125F  Uint16 GPIO47 : 2 ;
  4126F                    // 31:30 GPIO47
  4127F} GPB1_BITS ;
  4128F
  4129Ftypedef
  4130Fstruct GPB2_BITS
  4131F{                          // bits description
  4132F  Uint16 GPIO48 : 2 ;
  4133F                    // 1:0 GPIO48
  4134F  Uint16 GPIO49 : 2 ;
  4135F                    // 3:2 GPIO49
  4136F  Uint16 GPIO50 : 2 ;
  4137F                    // 5:4 GPIO50
  4138F  Uint16 GPIO51 : 2 ;
  4139F                    // 7:6 GPIO51
  4140F  Uint16 GPIO52 : 2 ;
  4141F                    // 9:8 GPIO52
  4142F  Uint16 GPIO53 : 2 ;
  4143F                    // 11:10 GPIO53
  4144F  Uint16 GPIO54 : 2 ;
  4145F                    // 13:12 GPIO54
  4146F  Uint16 GPIO55 : 2 ;
  4147F                    // 15:14 GPIO55
  4148F  Uint16 GPIO56 : 2 ;
  4149F                    // 17:16 GPIO56
  4150F  Uint16 GPIO57 : 2 ;
  4151F                    // 19:18 GPIO57
  4152F  Uint16 GPIO58 : 2 ;
  4153F                    // 21:20 GPIO58
  4154F  Uint16 GPIO59 : 2 ;
  4155F                    // 23:22 GPIO59
  4156F  Uint16 GPIO60 : 2 ;
  4157F                    // 25:24 GPIO60
  4158F  Uint16 GPIO61 : 2 ;
  4159F                    // 27:26 GPIO61
  4160F  Uint16 GPIO62 : 2 ;
  4161F                    // 29:28 GPIO62
  4162F  Uint16 GPIO63 : 2 ;
  4163F                    // 31:30 GPIO63
  4164F} GPB2_BITS ;
  4165F
  4166Ftypedef
  4167Fstruct GPC1_BITS
  4168F{                          // bits description
  4169F  Uint16 GPIO64 : 2 ;
  4170F                    // 1:0 GPIO64
  4171F  Uint16 GPIO65 : 2 ;
  4172F                    // 3:2 GPIO65
  4173F  Uint16 GPIO66 : 2 ;
  4174F                    // 5:4 GPIO66
  4175F  Uint16 GPIO67 : 2 ;
  4176F                    // 7:6 GPIO67
  4177F  Uint16 GPIO68 : 2 ;
  4178F                    // 9:8 GPIO68
  4179F  Uint16 GPIO69 : 2 ;
  4180F                    // 11:10 GPIO69
  4181F  Uint16 GPIO70 : 2 ;
  4182F                    // 13:12 GPIO70
  4183F  Uint16 GPIO71 : 2 ;
  4184F                    // 15:14 GPIO71
  4185F  Uint16 GPIO72 : 2 ;
  4186F                    // 17:16 GPIO72
  4187F  Uint16 GPIO73 : 2 ;
  4188F                    // 19:18 GPIO73
  4189F  Uint16 GPIO74 : 2 ;
  4190F                    // 21:20 GPIO74
  4191F  Uint16 GPIO75 : 2 ;
  4192F                    // 23:22 GPIO75
  4193F  Uint16 GPIO76 : 2 ;
  4194F                    // 25:24 GPIO76
  4195F  Uint16 GPIO77 : 2 ;
  4196F                    // 27:26 GPIO77
  4197F  Uint16 GPIO78 : 2 ;
  4198F                    // 29:28 GPIO78
  4199F  Uint16 GPIO79 : 2 ;
  4200F                    // 31:30 GPIO79
  4201F} GPC1_BITS ;
  4202F
  4203Ftypedef
  4204Fstruct GPC2_BITS
  4205F{                          // bits description
  4206F  Uint16 GPIO80 : 2 ;
  4207F                    // 1:0 GPIO80
  4208F  Uint16 GPIO81 : 2 ;
  4209F                    // 3:2 GPIO81
  4210F  Uint16 GPIO82 : 2 ;
  4211F                    // 5:4 GPIO82
  4212F  Uint16 GPIO83 : 2 ;
  4213F                    // 7:6 GPIO83
  4214F  Uint16 GPIO84 : 2 ;
  4215F                    // 9:8 GPIO84
  4216F  Uint16 GPIO85 : 2 ;
  4217F                    // 11:10 GPIO85
  4218F  Uint16 GPIO86 : 2 ;
  4219F                    // 13:12 GPIO86
  4220F  Uint16 GPIO87 : 2 ;
  4221F                    // 15:14 GPIO87
  4222F  Uint16 rsvd : 16 ;
  4223F                   // 31:16 reserved
  4224F} GPC2_BITS ;
  4225F
  4226Ftypedef
  4227Funion GPA1_REG
  4228F{
  4229F  Uint32 all ;
  4230F  struct GPA1_BITS bit ;
  4231F} GPA1_REG ;
  4232F
  4233Ftypedef
  4234Funion GPA2_REG
  4235F{
  4236F  Uint32 all ;
  4237F  struct GPA2_BITS bit ;
  4238F} GPA2_REG ;
  4239F
  4240Ftypedef
  4241Funion GPB1_REG
  4242F{
  4243F  Uint32 all ;
  4244F  struct GPB1_BITS bit ;
  4245F} GPB1_REG ;
  4246F
  4247Ftypedef
  4248Funion GPB2_REG
  4249F{
  4250F  Uint32 all ;
  4251F  struct GPB2_BITS bit ;
  4252F} GPB2_REG ;
  4253F
  4254Ftypedef
  4255Funion GPC1_REG
  4256F{
  4257F  Uint32 all ;
  4258F  struct GPC1_BITS bit ;
  4259F} GPC1_REG ;
  4260F
  4261Ftypedef
  4262Funion GPC2_REG
  4263F{
  4264F  Uint32 all ;
  4265F  struct GPC2_BITS bit ;
  4266F} GPC2_REG ;
  4267F//----------------------------------------------------
  4268F// GPIO A DIR/TOGGLE/SET/CLEAR register bit definitions */
  4269F
  4270Ftypedef
  4271Fstruct GPADAT_BITS
  4272F{                            // bits description
  4273F  Uint16 GPIO0 : 1 ;
  4274F                   // 0 GPIO0
  4275F  Uint16 GPIO1 : 1 ;
  4276F                   // 1 GPIO1
  4277F  Uint16 GPIO2 : 1 ;
  4278F                   // 2 GPIO2
  4279F  Uint16 GPIO3 : 1 ;
  4280F                   // 3 GPIO3
  4281F  Uint16 GPIO4 : 1 ;
  4282F                   // 4 GPIO4
  4283F  Uint16 GPIO5 : 1 ;
  4284F                   // 5 GPIO5
  4285F  Uint16 GPIO6 : 1 ;
  4286F                   // 6 GPIO6
  4287F  Uint16 GPIO7 : 1 ;
  4288F                   // 7 GPIO7
  4289F  Uint16 GPIO8 : 1 ;
  4290F                   // 8 GPIO8
  4291F  Uint16 GPIO9 : 1 ;
  4292F                   // 9 GPIO9
  4293F  Uint16 GPIO10 : 1 ;
  4294F                    // 10 GPIO10
  4295F  Uint16 GPIO11 : 1 ;
  4296F                    // 11 GPIO11
  4297F  Uint16 GPIO12 : 1 ;
  4298F                    // 12 GPIO12
  4299F  Uint16 GPIO13 : 1 ;
  4300F                    // 13 GPIO13
  4301F  Uint16 GPIO14 : 1 ;
  4302F                    // 14 GPIO14
  4303F  Uint16 GPIO15 : 1 ;
  4304F                    // 15 GPIO15
  4305F  Uint16 GPIO16 : 1 ;
  4306F                    // 16 GPIO16
  4307F  Uint16 GPIO17 : 1 ;
  4308F                    // 17 GPIO17
  4309F  Uint16 GPIO18 : 1 ;
  4310F                    // 18 GPIO18
  4311F  Uint16 GPIO19 : 1 ;
  4312F                    // 19 GPIO19
  4313F  Uint16 GPIO20 : 1 ;
  4314F                    // 20 GPIO20
  4315F  Uint16 GPIO21 : 1 ;
  4316F                    // 21 GPIO21
  4317F  Uint16 GPIO22 : 1 ;
  4318F                    // 22 GPIO22
  4319F  Uint16 GPIO23 : 1 ;
  4320F                    // 23 GPIO23
  4321F  Uint16 GPIO24 : 1 ;
  4322F                    // 24 GPIO24
  4323F  Uint16 GPIO25 : 1 ;
  4324F                    // 25 GPIO25
  4325F  Uint16 GPIO26 : 1 ;
  4326F                    // 26 GPIO26
  4327F  Uint16 GPIO27 : 1 ;
  4328F                    // 27 GPIO27
  4329F  Uint16 GPIO28 : 1 ;
  4330F                    // 28 GPIO28
  4331F  Uint16 GPIO29 : 1 ;
  4332F                    // 29 GPIO29
  4333F  Uint16 GPIO30 : 1 ;
  4334F                    // 30 GPIO30
  4335F  Uint16 GPIO31 : 1 ;
  4336F                    // 31 GPIO31
  4337F} GPADAT_BITS ;
  4338F
  4339Ftypedef
  4340Fstruct GPBDAT_BITS
  4341F{                            // bits description
  4342F  Uint16 GPIO32 : 1 ;
  4343F                    // 0 GPIO32
  4344F  Uint16 GPIO33 : 1 ;
  4345F                    // 1 GPIO33
  4346F  Uint16 GPIO34 : 1 ;
  4347F                    // 2 GPIO34
  4348F  Uint16 GPIO35 : 1 ;
  4349F                    // 3 GPIO35
  4350F  Uint16 GPIO36 : 1 ;
  4351F                    // 4 GPIO36
  4352F  Uint16 GPIO37 : 1 ;
  4353F                    // 5 GPIO37
  4354F  Uint16 GPIO38 : 1 ;
  4355F                    // 6 GPIO38
  4356F  Uint16 GPIO39 : 1 ;
  4357F                    // 7 GPIO39
  4358F  Uint16 GPIO40 : 1 ;
  4359F                    // 8 GPIO40
  4360F  Uint16 GPIO41 : 1 ;
  4361F                    // 9 GPIO41
  4362F  Uint16 GPIO42 : 1 ;
  4363F                    // 10 GPIO42
  4364F  Uint16 GPIO43 : 1 ;
  4365F                    // 11 GPIO43
  4366F  Uint16 GPIO44 : 1 ;
  4367F                    // 12 GPIO44
  4368F  Uint16 GPIO45 : 1 ;
  4369F                    // 13 GPIO45
  4370F  Uint16 GPIO46 : 1 ;
  4371F                    // 14 GPIO46
  4372F  Uint16 GPIO47 : 1 ;
  4373F                    // 15 GPIO47
  4374F  Uint16 GPIO48 : 1 ;
  4375F                    // 16 GPIO48
  4376F  Uint16 GPIO49 : 1 ;
  4377F                    // 17 GPIO49
  4378F  Uint16 GPIO50 : 1 ;
  4379F                    // 18 GPIO50
  4380F  Uint16 GPIO51 : 1 ;
  4381F                    // 19 GPIO51
  4382F  Uint16 GPIO52 : 1 ;
  4383F                    // 20 GPIO52
  4384F  Uint16 GPIO53 : 1 ;
  4385F                    // 21 GPIO53
  4386F  Uint16 GPIO54 : 1 ;
  4387F                    // 22 GPIO54
  4388F  Uint16 GPIO55 : 1 ;
  4389F                    // 23 GPIO55
  4390F  Uint16 GPIO56 : 1 ;
  4391F                    // 24 GPIO56
  4392F  Uint16 GPIO57 : 1 ;
  4393F                    // 25 GPIO57
  4394F  Uint16 GPIO58 : 1 ;
  4395F                    // 26 GPIO58
  4396F  Uint16 GPIO59 : 1 ;
  4397F                    // 27 GPIO59
  4398F  Uint16 GPIO60 : 1 ;
  4399F                    // 28 GPIO60
  4400F  Uint16 GPIO61 : 1 ;
  4401F                    // 29 GPIO61
  4402F  Uint16 GPIO62 : 1 ;
  4403F                    // 30 GPIO62
  4404F  Uint16 GPIO63 : 1 ;
  4405F                    // 31 GPIO63
  4406F} GPBDAT_BITS ;
  4407F
  4408Ftypedef
  4409Fstruct GPCDAT_BITS
  4410F{                            // bits description
  4411F  Uint16 GPIO64 : 1 ;
  4412F                    // 0 GPIO64
  4413F  Uint16 GPIO65 : 1 ;
  4414F                    // 1 GPIO65
  4415F  Uint16 GPIO66 : 1 ;
  4416F                    // 2 GPIO66
  4417F  Uint16 GPIO67 : 1 ;
  4418F                    // 3 GPIO67
  4419F  Uint16 GPIO68 : 1 ;
  4420F                    // 4 GPIO68
  4421F  Uint16 GPIO69 : 1 ;
  4422F                    // 5 GPIO69
  4423F  Uint16 GPIO70 : 1 ;
  4424F                    // 6 GPIO70
  4425F  Uint16 GPIO71 : 1 ;
  4426F                    // 7 GPIO71
  4427F  Uint16 GPIO72 : 1 ;
  4428F                    // 8 GPIO72
  4429F  Uint16 GPIO73 : 1 ;
  4430F                    // 9 GPIO73
  4431F  Uint16 GPIO74 : 1 ;
  4432F                    // 10 GPIO74
  4433F  Uint16 GPIO75 : 1 ;
  4434F                    // 11 GPIO75
  4435F  Uint16 GPIO76 : 1 ;
  4436F                    // 12 GPIO76
  4437F  Uint16 GPIO77 : 1 ;
  4438F                    // 13 GPIO77
  4439F  Uint16 GPIO78 : 1 ;
  4440F                    // 14 GPIO78
  4441F  Uint16 GPIO79 : 1 ;
  4442F                    // 15 GPIO79
  4443F  Uint16 GPIO80 : 1 ;
  4444F                    // 16 GPIO80
  4445F  Uint16 GPIO81 : 1 ;
  4446F                    // 17 GPIO81
  4447F  Uint16 GPIO82 : 1 ;
  4448F                    // 18 GPIO82
  4449F  Uint16 GPIO83 : 1 ;
  4450F                    // 19 GPIO83
  4451F  Uint16 GPIO84 : 1 ;
  4452F                    // 20 GPIO84
  4453F  Uint16 GPIO85 : 1 ;
  4454F                    // 21 GPIO85
  4455F  Uint16 GPIO86 : 1 ;
  4456F                    // 22 GPIO86
  4457F  Uint16 GPIO87 : 1 ;
  4458F                    // 23 GPIO87
  4459F  Uint16 rsvd1 : 8 ;
  4460F                   // 31:24 reserved
  4461F} GPCDAT_BITS ;
  4462F
  4463Ftypedef
  4464Funion GPADAT_REG
  4465F{
  4466F  Uint32 all ;
  4467F  struct GPADAT_BITS bit ;
  4468F} GPADAT_REG ;
  4469F
  4470Ftypedef
  4471Funion GPBDAT_REG
  4472F{
  4473F  Uint32 all ;
  4474F  struct GPBDAT_BITS bit ;
  4475F} GPBDAT_REG ;
  4476F
  4477Ftypedef
  4478Funion GPCDAT_REG
  4479F{
  4480F  Uint32 all ;
  4481F  struct GPCDAT_BITS bit ;
  4482F} GPCDAT_REG ;
  4483F//----------------------------------------------------
  4484F// GPIO Xint1/XINT2/XNMI select register bit definitions */
  4485F
  4486Ftypedef
  4487Fstruct GPIOXINT_BITS
  4488F{                              // bits description
  4489F  Uint16 GPIOSEL : 5 ;// 4:0 Select GPIO interrupt input source
  4490F  Uint16 rsvd1 : 11 ;// 15:5 reserved
  4491F} GPIOXINT_BITS ;
  4492F
  4493Ftypedef
  4494Funion GPIOXINT_REG
  4495F{
  4496F  Uint16 all ;
  4497F  struct GPIOXINT_BITS bit ;
  4498F} GPIOXINT_REG ;
  4499F
  4500Ftypedef
  4501Fstruct GPIO_CTRL_REGS
  4502F{
  4503F  union GPACTRL_REG GPACTRL ; // GPIO A Control Register (GPIO0 to 31)
  4504F  union GPA1_REG GPAQSEL1 ; // GPIO A Qualifier Select 1 Register (GPIO0 to 15)
  4505F  union GPA2_REG GPAQSEL2 ; // GPIO A Qualifier Select 2 Register (GPIO16 to 31)
  4506F  union GPA1_REG GPAMUX1 ; // GPIO A Mux 1 Register (GPIO0 to 15)
  4507F  union GPA2_REG GPAMUX2 ; // GPIO A Mux 2 Register (GPIO16 to 31)
  4508F  union GPADAT_REG GPADIR ; // GPIO A Direction Register (GPIO0 to 31)
  4509F  union GPADAT_REG GPAPUD ; // GPIO A Pull Up Disable Register (GPIO0 to 31)
  4510F  Uint32 rsvd1 ;
  4511F  union GPBCTRL_REG GPBCTRL ; // GPIO B Control Register (GPIO32 to 63)
  4512F  union GPB1_REG GPBQSEL1 ; // GPIO B Qualifier Select 1 Register (GPIO32 to 47)
  4513F  union GPB2_REG GPBQSEL2 ; // GPIO B Qualifier Select 2 Register (GPIO48 to 63)
  4514F  union GPB1_REG GPBMUX1 ; // GPIO B Mux 1 Register (GPIO32 to 47)
  4515F  union GPB2_REG GPBMUX2 ; // GPIO B Mux 2 Register (GPIO48 to 63)
  4516F  union GPBDAT_REG GPBDIR ; // GPIO B Direction Register (GPIO32 to 63)
  4517F  union GPBDAT_REG GPBPUD ; // GPIO B Pull Up Disable Register (GPIO32 to 63)
  4518F  Uint16 rsvd2 [ 8 ] ;
  4519F  union GPC1_REG GPCMUX1 ; // GPIO C Mux 1 Register (GPIO64 to 79)
  4520F  union GPC2_REG GPCMUX2 ; // GPIO C Mux 2 Register (GPIO80 to 95)
  4521F  union GPCDAT_REG GPCDIR ; // GPIO C Direction Register (GPIO64 to 95)
  4522F  union GPCDAT_REG GPCPUD ; // GPIO C Pull Up Disable Register (GPIO64 to 95)
  4523F} GPIO_CTRL_REGS ;
  4524F
  4525Ftypedef
  4526Fstruct GPIO_DATA_REGS
  4527F{
  4528F  union GPADAT_REG GPADAT ; // GPIO Data Register (GPIO0 to 31)
  4529F  union GPADAT_REG GPASET ; // GPIO Data Set Register (GPIO0 to 31)
  4530F  union GPADAT_REG GPACLEAR ; // GPIO Data Clear Register (GPIO0 to 31)
  4531F  union GPADAT_REG GPATOGGLE ; // GPIO Data Toggle Register (GPIO0 to 31)
  4532F  union GPBDAT_REG GPBDAT ; // GPIO Data Register (GPIO32 to 63)
  4533F  union GPBDAT_REG GPBSET ; // GPIO Data Set Register (GPIO32 to 63)
  4534F  union GPBDAT_REG GPBCLEAR ; // GPIO Data Clear Register (GPIO32 to 63)
  4535F  union GPBDAT_REG GPBTOGGLE ; // GPIO Data Toggle Register (GPIO32 to 63)
  4536F  union GPCDAT_REG GPCDAT ; // GPIO Data Register (GPIO64 to 95)
  4537F  union GPCDAT_REG GPCSET ; // GPIO Data Set Register (GPIO64 to 95)
  4538F  union GPCDAT_REG GPCCLEAR ; // GPIO Data Clear Register (GPIO64 to 95)
  4539F  union GPCDAT_REG GPCTOGGLE ; // GPIO Data Toggle Register (GPIO64 to 95)
  4540F  Uint16 rsvd1 [ 8 ] ;
  4541F} GPIO_DATA_REGS ;
  4542F
  4543Ftypedef
  4544Fstruct GPIO_INT_REGS
  4545F{
  4546F  union GPIOXINT_REG GPIOXINT1SEL ; // XINT1 GPIO Input Selection
  4547F  union GPIOXINT_REG GPIOXINT2SEL ; // XINT2 GPIO Input Selection
  4548F  union GPIOXINT_REG GPIOXNMISEL ; // XNMI_Xint13 GPIO Input Selection
  4549F  union GPIOXINT_REG GPIOXINT3SEL ; // XINT3 GPIO Input Selection
  4550F  union GPIOXINT_REG GPIOXINT4SEL ; // XINT4 GPIO Input Selection
  4551F  union GPIOXINT_REG GPIOXINT5SEL ; // XINT5 GPIO Input Selection
  4552F  union GPIOXINT_REG GPIOXINT6SEL ; // XINT6 GPIO Input Selection
  4553F  union GPIOXINT_REG GPIOXINT7SEL ; // XINT7 GPIO Input Selection
  4554F  union GPADAT_REG GPIOLPMSEL ; // Low power modes GP I/O input select
  4555F} GPIO_INT_REGS ;
  4556F//---------------------------------------------------------------------------
  4557F// GPI/O External References & Function Declarations:
  4558F//
  4559F
  4560Fextern volatile struct GPIO_CTRL_REGS
  4561F  GpioCtrlRegs ;
  4562F
  4563Fextern volatile struct GPIO_DATA_REGS
  4564F  GpioDataRegs ;
  4565F
  4566Fextern volatile struct GPIO_INT_REGS
  4567F  GpioIntRegs ;
  4568F       // end of DSP2833x_GPIO_H definition
  4569F//===========================================================================
  4570F// End of file.
  4571F//===========================================================================
  4572F 
  4573F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Gpio.h*/
  4574F/*   CLOSE_FILE Include File */
  4575F 
  4576F               // General Purpose I/O Registers
  4577F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_I2c.h */
  4578F// TI File $Revision: /main/2 $
  4579F// Checkin $Date: March 22, 2007 10:40:22 $
  4580F//###########################################################################
  4581F//
  4582F// FILE: DSP2833x_I2c.h
  4583F//
  4584F// TITLE: DSP2833x Enhanced Quadrature Encoder Pulse Module
  4585F// Register Bit Definitions.
  4586F//
  4587F//###########################################################################
  4588F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  4589F// $Release Date: August 4, 2009 $
  4590F//###########################################################################
  4591F#ifndef DSP2833x_I2C_H
  4592F#define DSP2833x_I2C_H
  4593F//----------------------------------------------------
  4594F// I2C interrupt vector register bit definitions */
  4595F
  4596Fstruct I2CISRC_BITS
  4597F{                     // bits description
  4598F  Uint16 INTCODE : 3 ;
  4599F                     // 2:0 Interrupt code
  4600F  Uint16 rsvd1 : 13 ;
  4601F                    // 15:3 reserved
  4602F} ;
  4603F
  4604Funion I2CISRC_REG
  4605F{
  4606F  Uint16 all ;
  4607F  struct I2CISRC_BITS bit ;
  4608F} ;
  4609F//----------------------------------------------------
  4610F// I2C interrupt mask register bit definitions */
  4611F
  4612Fstruct I2CIER_BITS
  4613F{                    // bits description
  4614F  Uint16 ARBL : 1 ;
  4615F                  // 0 Arbitration lost interrupt
  4616F  Uint16 NACK : 1 ;
  4617F                  // 1 No ack interrupt
  4618F  Uint16 ARDY : 1 ;
  4619F                  // 2 Register access ready interrupt
  4620F  Uint16 RRDY : 1 ;
  4621F                  // 3 Recieve data ready interrupt
  4622F  Uint16 XRDY : 1 ;
  4623F                  // 4 Transmit data ready interrupt
  4624F  Uint16 SCD : 1 ;
  4625F                 // 5 Stop condition detection
  4626F  Uint16 AAS : 1 ;
  4627F                 // 6 Address as slave
  4628F  Uint16 rsvd : 9 ;
  4629F                  // 15:7 reserved
  4630F} ;
  4631F
  4632Funion I2CIER_REG
  4633F{
  4634F  Uint16 all ;
  4635F  struct I2CIER_BITS bit ;
  4636F} ;
  4637F//----------------------------------------------------
  4638F// I2C status register bit definitions */
  4639F
  4640Fstruct I2CSTR_BITS
  4641F{                    // bits description
  4642F  Uint16 ARBL : 1 ;
  4643F                  // 0 Arbitration lost interrupt
  4644F  Uint16 NACK : 1 ;
  4645F                  // 1 No ack interrupt
  4646F  Uint16 ARDY : 1 ;
  4647F                  // 2 Register access ready interrupt
  4648F  Uint16 RRDY : 1 ;
  4649F                  // 3 Recieve data ready interrupt
  4650F  Uint16 XRDY : 1 ;
  4651F                  // 4 Transmit data ready interrupt
  4652F  Uint16 SCD : 1 ;
  4653F                 // 5 Stop condition detection
  4654F  Uint16 rsvd1 : 2 ;
  4655F                   // 7:6 reserved
  4656F  Uint16 AD0 : 1 ;
  4657F                 // 8 Address Zero
  4658F  Uint16 AAS : 1 ;
  4659F                 // 9 Address as slave
  4660F  Uint16 XSMT : 1 ;
  4661F                  // 10 XMIT shift empty
  4662F  Uint16 RSFULL : 1 ;
  4663F                    // 11 Recieve shift full
  4664F  Uint16 BB : 1 ;
  4665F                // 12 Bus busy
  4666F  Uint16 NACKSNT : 1 ;
  4667F                     // 13 A no ack sent
  4668F  Uint16 SDIR : 1 ;
  4669F                  // 14 Slave direction
  4670F  Uint16 rsvd2 : 1 ;
  4671F                   // 15 reserved
  4672F} ;
  4673F
  4674Funion I2CSTR_REG
  4675F{
  4676F  Uint16 all ;
  4677F  struct I2CSTR_BITS bit ;
  4678F} ;
  4679F//----------------------------------------------------
  4680F// I2C mode control register bit definitions */
  4681F
  4682Fstruct I2CMDR_BITS
  4683F{                    // bits description
  4684F  Uint16 BC : 3 ;
  4685F                // 2:0 Bit count
  4686F  Uint16 FDF : 1 ;
  4687F                 // 3 Free data format
  4688F  Uint16 STB : 1 ;
  4689F                 // 4 Start byte
  4690F  Uint16 IRS : 1 ;
  4691F                 // 5 I2C Reset not
  4692F  Uint16 DLB : 1 ;
  4693F                 // 6 Digital loopback
  4694F  Uint16 RM : 1 ;
  4695F                // 7 Repeat mode
  4696F  Uint16 XA : 1 ;
  4697F                // 8 Expand address
  4698F  Uint16 TRX : 1 ;
  4699F                 // 9 Transmitter/reciever
  4700F  Uint16 MST : 1 ;
  4701F                 // 10 Master/slave
  4702F  Uint16 STP : 1 ;
  4703F                 // 11 Stop condition
  4704F  Uint16 rsvd1 : 1 ;
  4705F                   // 12 reserved
  4706F  Uint16 STT : 1 ;
  4707F                 // 13 Start condition
  4708F  Uint16 FREE : 1 ;
  4709F                  // 14 Emulation mode
  4710F  Uint16 NACKMOD : 1 ;
  4711F                     // 15 No Ack mode
  4712F} ;
  4713F
  4714Funion I2CMDR_REG
  4715F{
  4716F  Uint16 all ;
  4717F  struct I2CMDR_BITS bit ;
  4718F} ;
  4719F//----------------------------------------------------
  4720F// I2C pre-scaler register bit definitions */
  4721F
  4722Fstruct I2CPSC_BITS
  4723F{                    // bits description
  4724F  Uint16 IPSC : 8 ;
  4725F                  // 7:0 pre-scaler
  4726F  Uint16 rsvd1 : 8 ;
  4727F                   // 15:8 reserved
  4728F} ;
  4729F
  4730Funion I2CPSC_REG
  4731F{
  4732F  Uint16 all ;
  4733F  struct I2CPSC_BITS bit ;
  4734F} ;
  4735F//----------------------------------------------------
  4736F// TX FIFO control register bit definitions */
  4737F
  4738Fstruct I2CFFTX_BITS
  4739F{                     // bits description
  4740F  Uint16 TXFFIL : 5 ;
  4741F                    // 4:0 FIFO interrupt level
  4742F  Uint16 TXFFIENA : 1 ;
  4743F                      // 5 FIFO interrupt enable/disable
  4744F  Uint16 TXFFINTCLR : 1 ;
  4745F                        // 6 FIFO clear
  4746F  Uint16 TXFFINT : 1 ;
  4747F                     // 7 FIFO interrupt flag
  4748F  Uint16 TXFFST : 5 ;
  4749F                    // 12:8 FIFO level status
  4750F  Uint16 TXFFRST : 1 ;
  4751F                     // 13 FIFO reset
  4752F  Uint16 I2CFFEN : 1 ;
  4753F                     // 14 enable/disable TX & RX FIFOs
  4754F  Uint16 rsvd1 : 1 ;
  4755F                   // 15 reserved
  4756F} ;
  4757F
  4758Funion I2CFFTX_REG
  4759F{
  4760F  Uint16 all ;
  4761F  struct I2CFFTX_BITS bit ;
  4762F} ;
  4763F//----------------------------------------------------
  4764F// RX FIFO control register bit definitions */
  4765F
  4766Fstruct I2CFFRX_BITS
  4767F{                     // bits description
  4768F  Uint16 RXFFIL : 5 ;
  4769F                    // 4:0 FIFO interrupt level
  4770F  Uint16 RXFFIENA : 1 ;
  4771F                      // 5 FIFO interrupt enable/disable
  4772F  Uint16 RXFFINTCLR : 1 ;
  4773F                        // 6 FIFO clear
  4774F  Uint16 RXFFINT : 1 ;
  4775F                     // 7 FIFO interrupt flag
  4776F  Uint16 RXFFST : 5 ;
  4777F                    // 12:8 FIFO level
  4778F  Uint16 RXFFRST : 1 ;
  4779F                     // 13 FIFO reset
  4780F  Uint16 rsvd1 : 2 ;
  4781F                   // 15:14 reserved
  4782F} ;
  4783F
  4784Funion I2CFFRX_REG
  4785F{
  4786F  Uint16 all ;
  4787F  struct I2CFFRX_BITS bit ;
  4788F} ;
  4789F//----------------------------------------------------
  4790F
  4791Fstruct I2C_REGS
  4792F{
  4793F  Uint16 I2COAR ; // Own address register
  4794F  union I2CIER_REG I2CIER ; // Interrupt enable
  4795F  union I2CSTR_REG I2CSTR ; // Interrupt status
  4796F  Uint16 I2CCLKL ; // Clock divider low
  4797F  Uint16 I2CCLKH ; // Clock divider high
  4798F  Uint16 I2CCNT ; // Data count
  4799F  Uint16 I2CDRR ; // Data recieve
  4800F  Uint16 I2CSAR ; // Slave address
  4801F  Uint16 I2CDXR ; // Data transmit
  4802F  union I2CMDR_REG I2CMDR ; // Mode
  4803F  union I2CISRC_REG I2CISRC ; // Interrupt source
  4804F  Uint16 rsvd1 ; // reserved
  4805F  union I2CPSC_REG I2CPSC ; // Pre-scaler
  4806F  Uint16 rsvd2 [ 19 ] ;
  4807F                     // reserved
  4808F  union I2CFFTX_REG I2CFFTX ; // Transmit FIFO
  4809F  union I2CFFRX_REG I2CFFRX ; // Recieve FIFO
  4810F} ;
  4811F//---------------------------------------------------------------------------
  4812F// External References & Function Declarations:
  4813F//
  4814F
  4815Fextern volatile struct I2C_REGS
  4816F  I2caRegs ;
  4817F       /* extern "C" */
  4818F       // end of DSP2833x_I2C_H definition
  4819F//===========================================================================
  4820F// End of file.
  4821F//===========================================================================
  4822F 
  4823F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_I2c.h*/
  4824F/*   CLOSE_FILE Include File */
  4825F 
  4826F                // I2C Registers
  4827F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_McBSP.h */
  4828F// TI File $Revision: /main/5 $
  4829F// Checkin $Date: May 14, 2008 16:30:31 $
  4830F//###########################################################################
  4831F//
  4832F// FILE: DSP2833x_Mcbsp.h
  4833F//
  4834F// TITLE: DSP2833x Device McBSP Register Definitions.
  4835F//
  4836F//###########################################################################
  4837F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  4838F// $Release Date: August 4, 2009 $
  4839F//###########################################################################
  4840F#ifndef DSP2833x_MCBSP_H
  4841F#define DSP2833x_MCBSP_H
  4842F//---------------------------------------------------------------------------
  4843F// McBSP Individual Register Bit Definitions:
  4844F//
  4845F// McBSP DRR2 register bit definitions:
  4846F
  4847Fstruct DRR2_BITS
  4848F{                  // bit description
  4849F  Uint16 HWLB : 8 ;
  4850F                  // 16:23 High word low byte
  4851F  Uint16 HWHB : 8 ;
  4852F                  // 24:31 High word high byte
  4853F} ;
  4854F
  4855Funion DRR2_REG
  4856F{
  4857F  Uint16 all ;
  4858F  struct DRR2_BITS bit ;
  4859F} ;
  4860F// McBSP DRR1 register bit definitions:
  4861F
  4862Fstruct DRR1_BITS
  4863F{                  // bit description
  4864F  Uint16 LWLB : 8 ;
  4865F                  // 16:23 Low word low byte
  4866F  Uint16 LWHB : 8 ;
  4867F                  // 24:31 low word high byte
  4868F} ;
  4869F
  4870Funion DRR1_REG
  4871F{
  4872F  Uint16 all ;
  4873F  struct DRR1_BITS bit ;
  4874F} ;
  4875F// McBSP DXR2 register bit definitions:
  4876F
  4877Fstruct DXR2_BITS
  4878F{                  // bit description
  4879F  Uint16 HWLB : 8 ;
  4880F                  // 16:23 High word low byte
  4881F  Uint16 HWHB : 8 ;
  4882F                  // 24:31 High word high byte
  4883F} ;
  4884F
  4885Funion DXR2_REG
  4886F{
  4887F  Uint16 all ;
  4888F  struct DXR2_BITS bit ;
  4889F} ;
  4890F// McBSP DXR1 register bit definitions:
  4891F
  4892Fstruct DXR1_BITS
  4893F{                  // bit description
  4894F  Uint16 LWLB : 8 ;
  4895F                  // 16:23 Low word low byte
  4896F  Uint16 LWHB : 8 ;
  4897F                  // 24:31 low word high byte
  4898F} ;
  4899F
  4900Funion DXR1_REG
  4901F{
  4902F  Uint16 all ;
  4903F  struct DXR1_BITS bit ;
  4904F} ;
  4905F// SPCR2 control register bit definitions:
  4906F
  4907Fstruct SPCR2_BITS
  4908F{                   // bit description
  4909F  Uint16 XRST : 1 ;
  4910F                  // 0 transmit reset
  4911F  Uint16 XRDY : 1 ;
  4912F                  // 1 transmit ready
  4913F  Uint16 XEMPTY : 1 ;
  4914F                    // 2 Transmit empty
  4915F  Uint16 XSYNCERR : 1 ;
  4916F                      // 3 Transmit syn errorINT flag
  4917F  Uint16 XINTM : 2 ;
  4918F                   // 5:4 Transmit interrupt types
  4919F  Uint16 GRST : 1 ;
  4920F                  // 6 CLKG reset
  4921F  Uint16 FRST : 1 ;
  4922F                  // 7 Frame sync reset
  4923F  Uint16 SOFT : 1 ;
  4924F                  // 8 SOFT bit
  4925F  Uint16 FREE : 1 ;
  4926F                  // 9 FREE bit
  4927F  Uint16 rsvd : 6 ;
  4928F                  // 15:10 reserved
  4929F} ;
  4930F
  4931Funion SPCR2_REG
  4932F{
  4933F  Uint16 all ;
  4934F  struct SPCR2_BITS bit ;
  4935F} ;
  4936F// SPCR1 control register bit definitions:
  4937F
  4938Fstruct SPCR1_BITS
  4939F{                   // bit description
  4940F  Uint16 RRST : 1 ;
  4941F                  // 0 Receive reset
  4942F  Uint16 RRDY : 1 ;
  4943F                  // 1 Receive ready
  4944F  Uint16 RFULL : 1 ;
  4945F                   // 2 Receive full
  4946F  Uint16 RSYNCERR : 1 ;
  4947F                      // 7 Receive syn error
  4948F  Uint16 RINTM : 2 ;
  4949F                   // 5:4 Receive interrupt types
  4950F  Uint16 ABIS : 1 ;
  4951F                  // 6 ABIS mode select
  4952F  Uint16 DXENA : 1 ;
  4953F                   // 7 DX hi-z enable
  4954F  Uint16 rsvd : 3 ;
  4955F                  // 10:8 reserved
  4956F  Uint16 CLKSTP : 2 ;
  4957F                    // 12:11 CLKSTOP mode bit
  4958F  Uint16 RJUST : 2 ;
  4959F                   // 13:14 Right justified
  4960F  Uint16 DLB : 1 ;
  4961F                 // 15 Digital loop back
  4962F} ;
  4963F
  4964Funion SPCR1_REG
  4965F{
  4966F  Uint16 all ;
  4967F  struct SPCR1_BITS bit ;
  4968F} ;
  4969F// RCR2 control register bit definitions:
  4970F
  4971Fstruct RCR2_BITS
  4972F{                  // bit description
  4973F  Uint16 RDATDLY : 2 ;
  4974F                     // 1:0 Receive data delay
  4975F  Uint16 RFIG : 1 ;
  4976F                  // 2 Receive frame sync ignore
  4977F  Uint16 RCOMPAND : 2 ;
  4978F                      // 4:3 Receive Companding Mode selects
  4979F  Uint16 RWDLEN2 : 3 ;
  4980F                     // 7:5 Receive word length
  4981F  Uint16 RFRLEN2 : 7 ;
  4982F                     // 14:8 Receive Frame sync
  4983F  Uint16 RPHASE : 1 ;
  4984F                    // 15 Receive Phase
  4985F} ;
  4986F
  4987Funion RCR2_REG
  4988F{
  4989F  Uint16 all ;
  4990F  struct RCR2_BITS bit ;
  4991F} ;
  4992F// RCR1 control register bit definitions:
  4993F
  4994Fstruct RCR1_BITS
  4995F{                  // bit description
  4996F  Uint16 rsvd1 : 5 ;
  4997F                   // 4:0 reserved
  4998F  Uint16 RWDLEN1 : 3 ;
  4999F                     // 7:5 Receive word length
  5000F  Uint16 RFRLEN1 : 7 ;
  5001F                     // 14:8 Receive frame length
  5002F  Uint16 rsvd2 : 1 ;
  5003F                   // 15 reserved
  5004F} ;
  5005F
  5006Funion RCR1_REG
  5007F{
  5008F  Uint16 all ;
  5009F  struct RCR1_BITS bit ;
  5010F} ;
  5011F// XCR2 control register bit definitions:
  5012F
  5013Fstruct XCR2_BITS
  5014F{                  // bit description
  5015F  Uint16 XDATDLY : 2 ;
  5016F                     // 1:0 Transmit data delay
  5017F  Uint16 XFIG : 1 ;
  5018F                  // 2 Transmit frame sync ignore
  5019F  Uint16 XCOMPAND : 2 ;
  5020F                      // 4:3 Transmit Companding Mode selects
  5021F  Uint16 XWDLEN2 : 3 ;
  5022F                     // 7:5 Transmit word length
  5023F  Uint16 XFRLEN2 : 7 ;
  5024F                     // 14:8 Transmit Frame sync
  5025F  Uint16 XPHASE : 1 ;
  5026F                    // 15 Transmit Phase
  5027F} ;
  5028F
  5029Funion XCR2_REG
  5030F{
  5031F  Uint16 all ;
  5032F  struct XCR2_BITS bit ;
  5033F} ;
  5034F// XCR1 control register bit definitions:
  5035F
  5036Fstruct XCR1_BITS
  5037F{                  // bit description
  5038F  Uint16 rsvd1 : 5 ;
  5039F                   // 4:0 reserved
  5040F  Uint16 XWDLEN1 : 3 ;
  5041F                     // 7:5 Transmit word length
  5042F  Uint16 XFRLEN1 : 7 ;
  5043F                     // 14:8 Transmit frame length
  5044F  Uint16 rsvd2 : 1 ;
  5045F                   // 15 reserved
  5046F} ;
  5047F
  5048Funion XCR1_REG
  5049F{
  5050F  Uint16 all ;
  5051F  struct XCR1_BITS bit ;
  5052F} ;
  5053F// SRGR2 Sample rate generator control register bit definitions:
  5054F
  5055Fstruct SRGR2_BITS
  5056F{                   // bit description
  5057F  Uint16 FPER : 12 ;
  5058F                   // 11:0 Frame period
  5059F  Uint16 FSGM : 1 ;
  5060F                  // 12 Frame sync generator mode
  5061F  Uint16 CLKSM : 1 ;
  5062F                   // 13 Sample rate generator mode
  5063F  Uint16 rsvd : 1 ;
  5064F                  // 14 reserved
  5065F  Uint16 GSYNC : 1 ;
  5066F                   // 15 CLKG sync
  5067F} ;
  5068F
  5069Funion SRGR2_REG
  5070F{
  5071F  Uint16 all ;
  5072F  struct SRGR2_BITS bit ;
  5073F} ;
  5074F// SRGR1 control register bit definitions:
  5075F
  5076Fstruct SRGR1_BITS
  5077F{                   // bit description
  5078F  Uint16 CLKGDV : 8 ;
  5079F                    // 7:0 CLKG divider
  5080F  Uint16 FWID : 8 ;
  5081F                  // 15:8 Frame width
  5082F} ;
  5083F
  5084Funion SRGR1_REG
  5085F{
  5086F  Uint16 all ;
  5087F  struct SRGR1_BITS bit ;
  5088F} ;
  5089F// MCR2 Multichannel control register bit definitions:
  5090F
  5091Fstruct MCR2_BITS
  5092F{                  // bit description
  5093F  Uint16 XMCM : 2 ;
  5094F                  // 1:0 Transmit multichannel mode
  5095F  Uint16 XCBLK : 3 ;
  5096F                   // 2:4 Transmit current block
  5097F  Uint16 XPABLK : 2 ;
  5098F                    // 5:6 Transmit partition A Block
  5099F  Uint16 XPBBLK : 2 ;
  5100F                    // 7:8 Transmit partition B Block
  5101F  Uint16 XMCME : 1 ;
  5102F                   // 9 Transmit multi-channel enhance mode
  5103F  Uint16 rsvd : 6 ;
  5104F                  // 15:10 reserved
  5105F} ;
  5106F
  5107Funion MCR2_REG
  5108F{
  5109F  Uint16 all ;
  5110F  struct MCR2_BITS bit ;
  5111F} ;
  5112F// MCR1 Multichannel control register bit definitions:
  5113F
  5114Fstruct MCR1_BITS
  5115F{                  // bit description
  5116F  Uint16 RMCM : 1 ;
  5117F                  // 0 Receive multichannel mode
  5118F  Uint16 rsvd : 1 ;
  5119F                  // 1 reserved
  5120F  Uint16 RCBLK : 3 ;
  5121F                   // 4:2 Receive current block
  5122F  Uint16 RPABLK : 2 ;
  5123F                    // 6:5 Receive partition A Block
  5124F  Uint16 RPBBLK : 2 ;
  5125F                    // 7:8 Receive partition B Block
  5126F  Uint16 RMCME : 1 ;
  5127F                   // 9 Receive multi-channel enhance mode
  5128F  Uint16 rsvd1 : 6 ;
  5129F                   // 15:10 reserved
  5130F} ;
  5131F
  5132Funion MCR1_REG
  5133F{
  5134F  Uint16 all ;
  5135F  struct MCR1_BITS bit ;
  5136F} ;
  5137F// RCERA control register bit definitions:
  5138F
  5139Fstruct RCERA_BITS
  5140F{                   // bit description
  5141F  Uint16 RCEA0 : 1 ;
  5142F                   // 0 Receive Channel enable bit
  5143F  Uint16 RCEA1 : 1 ;
  5144F                   // 1 Receive Channel enable bit
  5145F  Uint16 RCEA2 : 1 ;
  5146F                   // 2 Receive Channel enable bit
  5147F  Uint16 RCEA3 : 1 ;
  5148F                   // 3 Receive Channel enable bit
  5149F  Uint16 RCEA4 : 1 ;
  5150F                   // 4 Receive Channel enable bit
  5151F  Uint16 RCEA5 : 1 ;
  5152F                   // 5 Receive Channel enable bit
  5153F  Uint16 RCEA6 : 1 ;
  5154F                   // 6 Receive Channel enable bit
  5155F  Uint16 RCEA7 : 1 ;
  5156F                   // 7 Receive Channel enable bit
  5157F  Uint16 RCEA8 : 1 ;
  5158F                   // 8 Receive Channel enable bit
  5159F  Uint16 RCEA9 : 1 ;
  5160F                   // 9 Receive Channel enable bit
  5161F  Uint16 RCEA10 : 1 ;
  5162F                    // 10 Receive Channel enable bit
  5163F  Uint16 RCEA11 : 1 ;
  5164F                    // 11 Receive Channel enable bit
  5165F  Uint16 RCEA12 : 1 ;
  5166F                    // 12 Receive Channel enable bit
  5167F  Uint16 RCEA13 : 1 ;
  5168F                    // 13 Receive Channel enable bit
  5169F  Uint16 RCEA14 : 1 ;
  5170F                    // 14 Receive Channel enable bit
  5171F  Uint16 RCEA15 : 1 ;
  5172F                    // 15 Receive Channel enable bit
  5173F} ;
  5174F
  5175Funion RCERA_REG
  5176F{
  5177F  Uint16 all ;
  5178F  struct RCERA_BITS bit ;
  5179F} ;
  5180F// RCERB control register bit definitions:
  5181F
  5182Fstruct RCERB_BITS
  5183F{                   // bit description
  5184F  Uint16 RCEB0 : 1 ;
  5185F                   // 0 Receive Channel enable bit
  5186F  Uint16 RCEB1 : 1 ;
  5187F                   // 1 Receive Channel enable bit
  5188F  Uint16 RCEB2 : 1 ;
  5189F                   // 2 Receive Channel enable bit
  5190F  Uint16 RCEB3 : 1 ;
  5191F                   // 3 Receive Channel enable bit
  5192F  Uint16 RCEB4 : 1 ;
  5193F                   // 4 Receive Channel enable bit
  5194F  Uint16 RCEB5 : 1 ;
  5195F                   // 5 Receive Channel enable bit
  5196F  Uint16 RCEB6 : 1 ;
  5197F                   // 6 Receive Channel enable bit
  5198F  Uint16 RCEB7 : 1 ;
  5199F                   // 7 Receive Channel enable bit
  5200F  Uint16 RCEB8 : 1 ;
  5201F                   // 8 Receive Channel enable bit
  5202F  Uint16 RCEB9 : 1 ;
  5203F                   // 9 Receive Channel enable bit
  5204F  Uint16 RCEB10 : 1 ;
  5205F                    // 10 Receive Channel enable bit
  5206F  Uint16 RCEB11 : 1 ;
  5207F                    // 11 Receive Channel enable bit
  5208F  Uint16 RCEB12 : 1 ;
  5209F                    // 12 Receive Channel enable bit
  5210F  Uint16 RCEB13 : 1 ;
  5211F                    // 13 Receive Channel enable bit
  5212F  Uint16 RCEB14 : 1 ;
  5213F                    // 14 Receive Channel enable bit
  5214F  Uint16 RCEB15 : 1 ;
  5215F                    // 15 Receive Channel enable bit
  5216F} ;
  5217F
  5218Funion RCERB_REG
  5219F{
  5220F  Uint16 all ;
  5221F  struct RCERB_BITS bit ;
  5222F} ;
  5223F// XCERA control register bit definitions:
  5224F
  5225Fstruct XCERA_BITS
  5226F{                   // bit description
  5227F  Uint16 XCERA0 : 1 ;
  5228F                    // 0 Receive Channel enable bit
  5229F  Uint16 XCERA1 : 1 ;
  5230F                    // 1 Receive Channel enable bit
  5231F  Uint16 XCERA2 : 1 ;
  5232F                    // 2 Receive Channel enable bit
  5233F  Uint16 XCERA3 : 1 ;
  5234F                    // 3 Receive Channel enable bit
  5235F  Uint16 XCERA4 : 1 ;
  5236F                    // 4 Receive Channel enable bit
  5237F  Uint16 XCERA5 : 1 ;
  5238F                    // 5 Receive Channel enable bit
  5239F  Uint16 XCERA6 : 1 ;
  5240F                    // 6 Receive Channel enable bit
  5241F  Uint16 XCERA7 : 1 ;
  5242F                    // 7 Receive Channel enable bit
  5243F  Uint16 XCERA8 : 1 ;
  5244F                    // 8 Receive Channel enable bit
  5245F  Uint16 XCERA9 : 1 ;
  5246F                    // 9 Receive Channel enable bit
  5247F  Uint16 XCERA10 : 1 ;
  5248F                     // 10 Receive Channel enable bit
  5249F  Uint16 XCERA11 : 1 ;
  5250F                     // 11 Receive Channel enable bit
  5251F  Uint16 XCERA12 : 1 ;
  5252F                     // 12 Receive Channel enable bit
  5253F  Uint16 XCERA13 : 1 ;
  5254F                     // 13 Receive Channel enable bit
  5255F  Uint16 XCERA14 : 1 ;
  5256F                     // 14 Receive Channel enable bit
  5257F  Uint16 XCERA15 : 1 ;
  5258F                     // 15 Receive Channel enable bit
  5259F} ;
  5260F
  5261Funion XCERA_REG
  5262F{
  5263F  Uint16 all ;
  5264F  struct XCERA_BITS bit ;
  5265F} ;
  5266F// XCERB control register bit definitions:
  5267F
  5268Fstruct XCERB_BITS
  5269F{                   // bit description
  5270F  Uint16 XCERB0 : 1 ;
  5271F                    // 0 Receive Channel enable bit
  5272F  Uint16 XCERB1 : 1 ;
  5273F                    // 1 Receive Channel enable bit
  5274F  Uint16 XCERB2 : 1 ;
  5275F                    // 2 Receive Channel enable bit
  5276F  Uint16 XCERB3 : 1 ;
  5277F                    // 3 Receive Channel enable bit
  5278F  Uint16 XCERB4 : 1 ;
  5279F                    // 4 Receive Channel enable bit
  5280F  Uint16 XCERB5 : 1 ;
  5281F                    // 5 Receive Channel enable bit
  5282F  Uint16 XCERB6 : 1 ;
  5283F                    // 6 Receive Channel enable bit
  5284F  Uint16 XCERB7 : 1 ;
  5285F                    // 7 Receive Channel enable bit
  5286F  Uint16 XCERB8 : 1 ;
  5287F                    // 8 Receive Channel enable bit
  5288F  Uint16 XCERB9 : 1 ;
  5289F                    // 9 Receive Channel enable bit
  5290F  Uint16 XCERB10 : 1 ;
  5291F                     // 10 Receive Channel enable bit
  5292F  Uint16 XCERB11 : 1 ;
  5293F                     // 11 Receive Channel enable bit
  5294F  Uint16 XCERB12 : 1 ;
  5295F                     // 12 Receive Channel enable bit
  5296F  Uint16 XCERB13 : 1 ;
  5297F                     // 13 Receive Channel enable bit
  5298F  Uint16 XCERB14 : 1 ;
  5299F                     // 14 Receive Channel enable bit
  5300F  Uint16 XCERB15 : 1 ;
  5301F                     // 15 Receive Channel enable bit
  5302F} ;
  5303F
  5304Funion XCERB_REG
  5305F{
  5306F  Uint16 all ;
  5307F  struct XCERB_BITS bit ;
  5308F} ;
  5309F// PCR control register bit definitions:
  5310F
  5311Fstruct PCR_BITS
  5312F{                 // bit description
  5313F  Uint16 CLKRP : 1 ;
  5314F                   // 0 Receive Clock polarity
  5315F  Uint16 CLKXP : 1 ;
  5316F                   // 1 Transmit clock polarity
  5317F  Uint16 FSRP : 1 ;
  5318F                  // 2 Receive Frame synchronization polarity
  5319F  Uint16 FSXP : 1 ;
  5320F                  // 3 Transmit Frame synchronization polarity
  5321F  Uint16 DR_STAT : 1 ;
  5322F                     // 4 DR pin status - reserved for this McBSP
  5323F  Uint16 DX_STAT : 1 ;
  5324F                     // 5 DX pin status - reserved for this McBSP
  5325F  Uint16 CLKS_STAT : 1 ;
  5326F                       // 6 CLKS pin status - reserved for 28x -McBSP
  5327F  Uint16 SCLKME : 1 ;
  5328F                    // 7 Enhanced sample clock mode selection bit.
  5329F  Uint16 CLKRM : 1 ;
  5330F                   // 8 Receiver Clock Mode
  5331F  Uint16 CLKXM : 1 ;
  5332F                   // 9 Transmitter Clock Mode.
  5333F  Uint16 FSRM : 1 ;
  5334F                  // 10 Receive Frame Synchronization Mode
  5335F  Uint16 FSXM : 1 ;
  5336F                  // 11 Transmit Frame Synchronization Mode
  5337F  Uint16 RIOEN : 1 ;
  5338F                   // 12 General Purpose I/O Mode - reserved in this 28x-McBSP
  5339F  Uint16 XIOEN : 1 ;
  5340F                   // 13 General Purpose I/O Mode - reserved in this 28x-McBSP
  5341F  Uint16 IDEL_EN : 1 ;
  5342F                     // 14 reserved in this 28x-McBSP
  5343F  Uint16 rsvd : 1 ;// 15 reserved
  5344F} ;
  5345F
  5346Funion PCR_REG
  5347F{
  5348F  Uint16 all ;
  5349F  struct PCR_BITS bit ;
  5350F} ;
  5351F// RCERC control register bit definitions:
  5352F
  5353Fstruct RCERC_BITS
  5354F{                   // bit description
  5355F  Uint16 RCEC0 : 1 ;
  5356F                   // 0 Receive Channel enable bit
  5357F  Uint16 RCEC1 : 1 ;
  5358F                   // 1 Receive Channel enable bit
  5359F  Uint16 RCEC2 : 1 ;
  5360F                   // 2 Receive Channel enable bit
  5361F  Uint16 RCEC3 : 1 ;
  5362F                   // 3 Receive Channel enable bit
  5363F  Uint16 RCEC4 : 1 ;
  5364F                   // 4 Receive Channel enable bit
  5365F  Uint16 RCEC5 : 1 ;
  5366F                   // 5 Receive Channel enable bit
  5367F  Uint16 RCEC6 : 1 ;
  5368F                   // 6 Receive Channel enable bit
  5369F  Uint16 RCEC7 : 1 ;
  5370F                   // 7 Receive Channel enable bit
  5371F  Uint16 RCEC8 : 1 ;
  5372F                   // 8 Receive Channel enable bit
  5373F  Uint16 RCEC9 : 1 ;
  5374F                   // 9 Receive Channel enable bit
  5375F  Uint16 RCEC10 : 1 ;
  5376F                    // 10 Receive Channel enable bit
  5377F  Uint16 RCEC11 : 1 ;
  5378F                    // 11 Receive Channel enable bit
  5379F  Uint16 RCEC12 : 1 ;
  5380F                    // 12 Receive Channel enable bit
  5381F  Uint16 RCEC13 : 1 ;
  5382F                    // 13 Receive Channel enable bit
  5383F  Uint16 RCEC14 : 1 ;
  5384F                    // 14 Receive Channel enable bit
  5385F  Uint16 RCEC15 : 1 ;
  5386F                    // 15 Receive Channel enable bit
  5387F} ;
  5388F
  5389Funion RCERC_REG
  5390F{
  5391F  Uint16 all ;
  5392F  struct RCERC_BITS bit ;
  5393F} ;
  5394F// RCERD control register bit definitions:
  5395F
  5396Fstruct RCERD_BITS
  5397F{                   // bit description
  5398F  Uint16 RCED0 : 1 ;
  5399F                   // 0 Receive Channel enable bit
  5400F  Uint16 RCED1 : 1 ;
  5401F                   // 1 Receive Channel enable bit
  5402F  Uint16 RCED2 : 1 ;
  5403F                   // 2 Receive Channel enable bit
  5404F  Uint16 RCED3 : 1 ;
  5405F                   // 3 Receive Channel enable bit
  5406F  Uint16 RCED4 : 1 ;
  5407F                   // 4 Receive Channel enable bit
  5408F  Uint16 RCED5 : 1 ;
  5409F                   // 5 Receive Channel enable bit
  5410F  Uint16 RCED6 : 1 ;
  5411F                   // 6 Receive Channel enable bit
  5412F  Uint16 RCED7 : 1 ;
  5413F                   // 7 Receive Channel enable bit
  5414F  Uint16 RCED8 : 1 ;
  5415F                   // 8 Receive Channel enable bit
  5416F  Uint16 RCED9 : 1 ;
  5417F                   // 9 Receive Channel enable bit
  5418F  Uint16 RCED10 : 1 ;
  5419F                    // 10 Receive Channel enable bit
  5420F  Uint16 RCED11 : 1 ;
  5421F                    // 11 Receive Channel enable bit
  5422F  Uint16 RCED12 : 1 ;
  5423F                    // 12 Receive Channel enable bit
  5424F  Uint16 RCED13 : 1 ;
  5425F                    // 13 Receive Channel enable bit
  5426F  Uint16 RCED14 : 1 ;
  5427F                    // 14 Receive Channel enable bit
  5428F  Uint16 RCED15 : 1 ;
  5429F                    // 15 Receive Channel enable bit
  5430F} ;
  5431F
  5432Funion RCERD_REG
  5433F{
  5434F  Uint16 all ;
  5435F  struct RCERD_BITS bit ;
  5436F} ;
  5437F// XCERC control register bit definitions:
  5438F
  5439Fstruct XCERC_BITS
  5440F{                   // bit description
  5441F  Uint16 XCERC0 : 1 ;
  5442F                    // 0 Receive Channel enable bit
  5443F  Uint16 XCERC1 : 1 ;
  5444F                    // 1 Receive Channel enable bit
  5445F  Uint16 XCERC2 : 1 ;
  5446F                    // 2 Receive Channel enable bit
  5447F  Uint16 XCERC3 : 1 ;
  5448F                    // 3 Receive Channel enable bit
  5449F  Uint16 XCERC4 : 1 ;
  5450F                    // 4 Receive Channel enable bit
  5451F  Uint16 XCERC5 : 1 ;
  5452F                    // 5 Receive Channel enable bit
  5453F  Uint16 XCERC6 : 1 ;
  5454F                    // 6 Receive Channel enable bit
  5455F  Uint16 XCERC7 : 1 ;
  5456F                    // 7 Receive Channel enable bit
  5457F  Uint16 XCERC8 : 1 ;
  5458F                    // 8 Receive Channel enable bit
  5459F  Uint16 XCERC9 : 1 ;
  5460F                    // 9 Receive Channel enable bit
  5461F  Uint16 XCERC10 : 1 ;
  5462F                     // 10 Receive Channel enable bit
  5463F  Uint16 XCERC11 : 1 ;
  5464F                     // 11 Receive Channel enable bit
  5465F  Uint16 XCERC12 : 1 ;
  5466F                     // 12 Receive Channel enable bit
  5467F  Uint16 XCERC13 : 1 ;
  5468F                     // 13 Receive Channel enable bit
  5469F  Uint16 XCERC14 : 1 ;
  5470F                     // 14 Receive Channel enable bit
  5471F  Uint16 XCERC15 : 1 ;
  5472F                     // 15 Receive Channel enable bit
  5473F} ;
  5474F
  5475Funion XCERC_REG
  5476F{
  5477F  Uint16 all ;
  5478F  struct XCERC_BITS bit ;
  5479F} ;
  5480F// XCERD control register bit definitions:
  5481F
  5482Fstruct XCERD_BITS
  5483F{                   // bit description
  5484F  Uint16 XCERD0 : 1 ;
  5485F                    // 0 Receive Channel enable bit
  5486F  Uint16 XCERD1 : 1 ;
  5487F                    // 1 Receive Channel enable bit
  5488F  Uint16 XCERD2 : 1 ;
  5489F                    // 2 Receive Channel enable bit
  5490F  Uint16 XCERD3 : 1 ;
  5491F                    // 3 Receive Channel enable bit
  5492F  Uint16 XCERD4 : 1 ;
  5493F                    // 4 Receive Channel enable bit
  5494F  Uint16 XCERD5 : 1 ;
  5495F                    // 5 Receive Channel enable bit
  5496F  Uint16 XCERD6 : 1 ;
  5497F                    // 6 Receive Channel enable bit
  5498F  Uint16 XCERD7 : 1 ;
  5499F                    // 7 Receive Channel enable bit
  5500F  Uint16 XCERD8 : 1 ;
  5501F                    // 8 Receive Channel enable bit
  5502F  Uint16 XCERD9 : 1 ;
  5503F                    // 9 Receive Channel enable bit
  5504F  Uint16 XCERD10 : 1 ;
  5505F                     // 10 Receive Channel enable bit
  5506F  Uint16 XCERD11 : 1 ;
  5507F                     // 11 Receive Channel enable bit
  5508F  Uint16 XCERD12 : 1 ;
  5509F                     // 12 Receive Channel enable bit
  5510F  Uint16 XCERD13 : 1 ;
  5511F                     // 13 Receive Channel enable bit
  5512F  Uint16 XCERD14 : 1 ;
  5513F                     // 14 Receive Channel enable bit
  5514F  Uint16 XCERD15 : 1 ;
  5515F                     // 15 Receive Channel enable bit
  5516F} ;
  5517F
  5518Funion XCERD_REG
  5519F{
  5520F  Uint16 all ;
  5521F  struct XCERD_BITS bit ;
  5522F} ;
  5523F// RCERE control register bit definitions:
  5524F
  5525Fstruct RCERE_BITS
  5526F{                   // bit description
  5527F  Uint16 RCEE0 : 1 ;
  5528F                   // 0 Receive Channel enable bit
  5529F  Uint16 RCEE1 : 1 ;
  5530F                   // 1 Receive Channel enable bit
  5531F  Uint16 RCEE2 : 1 ;
  5532F                   // 2 Receive Channel enable bit
  5533F  Uint16 RCEE3 : 1 ;
  5534F                   // 3 Receive Channel enable bit
  5535F  Uint16 RCEE4 : 1 ;
  5536F                   // 4 Receive Channel enable bit
  5537F  Uint16 RCEE5 : 1 ;
  5538F                   // 5 Receive Channel enable bit
  5539F  Uint16 RCEE6 : 1 ;
  5540F                   // 6 Receive Channel enable bit
  5541F  Uint16 RCEE7 : 1 ;
  5542F                   // 7 Receive Channel enable bit
  5543F  Uint16 RCEE8 : 1 ;
  5544F                   // 8 Receive Channel enable bit
  5545F  Uint16 RCEE9 : 1 ;
  5546F                   // 9 Receive Channel enable bit
  5547F  Uint16 RCEE10 : 1 ;
  5548F                    // 10 Receive Channel enable bit
  5549F  Uint16 RCEE11 : 1 ;
  5550F                    // 11 Receive Channel enable bit
  5551F  Uint16 RCEE12 : 1 ;
  5552F                    // 12 Receive Channel enable bit
  5553F  Uint16 RCEE13 : 1 ;
  5554F                    // 13 Receive Channel enable bit
  5555F  Uint16 RCEE14 : 1 ;
  5556F                    // 14 Receive Channel enable bit
  5557F  Uint16 RCEE15 : 1 ;
  5558F                    // 15 Receive Channel enable bit
  5559F} ;
  5560F
  5561Funion RCERE_REG
  5562F{
  5563F  Uint16 all ;
  5564F  struct RCERE_BITS bit ;
  5565F} ;
  5566F// RCERF control register bit definitions:
  5567F
  5568Fstruct RCERF_BITS
  5569F{                   // bit description
  5570F  Uint16 RCEF0 : 1 ;
  5571F                   // 0 Receive Channel enable bit
  5572F  Uint16 RCEF1 : 1 ;
  5573F                   // 1 Receive Channel enable bit
  5574F  Uint16 RCEF2 : 1 ;
  5575F                   // 2 Receive Channel enable bit
  5576F  Uint16 RCEF3 : 1 ;
  5577F                   // 3 Receive Channel enable bit
  5578F  Uint16 RCEF4 : 1 ;
  5579F                   // 4 Receive Channel enable bit
  5580F  Uint16 RCEF5 : 1 ;
  5581F                   // 5 Receive Channel enable bit
  5582F  Uint16 RCEF6 : 1 ;
  5583F                   // 6 Receive Channel enable bit
  5584F  Uint16 RCEF7 : 1 ;
  5585F                   // 7 Receive Channel enable bit
  5586F  Uint16 RCEF8 : 1 ;
  5587F                   // 8 Receive Channel enable bit
  5588F  Uint16 RCEF9 : 1 ;
  5589F                   // 9 Receive Channel enable bit
  5590F  Uint16 RCEF10 : 1 ;
  5591F                    // 10 Receive Channel enable bit
  5592F  Uint16 RCEF11 : 1 ;
  5593F                    // 11 Receive Channel enable bit
  5594F  Uint16 RCEF12 : 1 ;
  5595F                    // 12 Receive Channel enable bit
  5596F  Uint16 RCEF13 : 1 ;
  5597F                    // 13 Receive Channel enable bit
  5598F  Uint16 RCEF14 : 1 ;
  5599F                    // 14 Receive Channel enable bit
  5600F  Uint16 RCEF15 : 1 ;
  5601F                    // 15 Receive Channel enable bit
  5602F} ;
  5603F
  5604Funion RCERF_REG
  5605F{
  5606F  Uint16 all ;
  5607F  struct RCERF_BITS bit ;
  5608F} ;
  5609F// XCERE control register bit definitions:
  5610F
  5611Fstruct XCERE_BITS
  5612F{                   // bit description
  5613F  Uint16 XCERE0 : 1 ;
  5614F                    // 0 Receive Channel enable bit
  5615F  Uint16 XCERE1 : 1 ;
  5616F                    // 1 Receive Channel enable bit
  5617F  Uint16 XCERE2 : 1 ;
  5618F                    // 2 Receive Channel enable bit
  5619F  Uint16 XCERE3 : 1 ;
  5620F                    // 3 Receive Channel enable bit
  5621F  Uint16 XCERE4 : 1 ;
  5622F                    // 4 Receive Channel enable bit
  5623F  Uint16 XCERE5 : 1 ;
  5624F                    // 5 Receive Channel enable bit
  5625F  Uint16 XCERE6 : 1 ;
  5626F                    // 6 Receive Channel enable bit
  5627F  Uint16 XCERE7 : 1 ;
  5628F                    // 7 Receive Channel enable bit
  5629F  Uint16 XCERE8 : 1 ;
  5630F                    // 8 Receive Channel enable bit
  5631F  Uint16 XCERE9 : 1 ;
  5632F                    // 9 Receive Channel enable bit
  5633F  Uint16 XCERE10 : 1 ;
  5634F                     // 10 Receive Channel enable bit
  5635F  Uint16 XCERE11 : 1 ;
  5636F                     // 11 Receive Channel enable bit
  5637F  Uint16 XCERE12 : 1 ;
  5638F                     // 12 Receive Channel enable bit
  5639F  Uint16 XCERE13 : 1 ;
  5640F                     // 13 Receive Channel enable bit
  5641F  Uint16 XCERE14 : 1 ;
  5642F                     // 14 Receive Channel enable bit
  5643F  Uint16 XCERE15 : 1 ;
  5644F                     // 15 Receive Channel enable bit
  5645F} ;
  5646F
  5647Funion XCERE_REG
  5648F{
  5649F  Uint16 all ;
  5650F  struct XCERE_BITS bit ;
  5651F} ;
  5652F// XCERF control register bit definitions:
  5653F
  5654Fstruct XCERF_BITS
  5655F{                   // bit description
  5656F  Uint16 XCERF0 : 1 ;
  5657F                    // 0 Receive Channel enable bit
  5658F  Uint16 XCERF1 : 1 ;
  5659F                    // 1 Receive Channel enable bit
  5660F  Uint16 XCERF2 : 1 ;
  5661F                    // 2 Receive Channel enable bit
  5662F  Uint16 XCERF3 : 1 ;
  5663F                    // 3 Receive Channel enable bit
  5664F  Uint16 XCERF4 : 1 ;
  5665F                    // 4 Receive Channel enable bit
  5666F  Uint16 XCERF5 : 1 ;
  5667F                    // 5 Receive Channel enable bit
  5668F  Uint16 XCERF6 : 1 ;
  5669F                    // 6 Receive Channel enable bit
  5670F  Uint16 XCERF7 : 1 ;
  5671F                    // 7 Receive Channel enable bit
  5672F  Uint16 XCERF8 : 1 ;
  5673F                    // 8 Receive Channel enable bit
  5674F  Uint16 XCERF9 : 1 ;
  5675F                    // 9 Receive Channel enable bit
  5676F  Uint16 XCERF10 : 1 ;
  5677F                     // 10 Receive Channel enable bit
  5678F  Uint16 XCERF11 : 1 ;
  5679F                     // 11 Receive Channel enable bit
  5680F  Uint16 XCERF12 : 1 ;
  5681F                     // 12 Receive Channel enable bit
  5682F  Uint16 XCERF13 : 1 ;
  5683F                     // 13 Receive Channel enable bit
  5684F  Uint16 XCERF14 : 1 ;
  5685F                     // 14 Receive Channel enable bit
  5686F  Uint16 XCERF15 : 1 ;
  5687F                     // 15 Receive Channel enable bit
  5688F} ;
  5689F
  5690Funion XCERF_REG
  5691F{
  5692F  Uint16 all ;
  5693F  struct XCERF_BITS bit ;
  5694F} ;
  5695F// RCERG control register bit definitions:
  5696F
  5697Fstruct RCERG_BITS
  5698F{                   // bit description
  5699F  Uint16 RCEG0 : 1 ;
  5700F                   // 0 Receive Channel enable bit
  5701F  Uint16 RCEG1 : 1 ;
  5702F                   // 1 Receive Channel enable bit
  5703F  Uint16 RCEG2 : 1 ;
  5704F                   // 2 Receive Channel enable bit
  5705F  Uint16 RCEG3 : 1 ;
  5706F                   // 3 Receive Channel enable bit
  5707F  Uint16 RCEG4 : 1 ;
  5708F                   // 4 Receive Channel enable bit
  5709F  Uint16 RCEG5 : 1 ;
  5710F                   // 5 Receive Channel enable bit
  5711F  Uint16 RCEG6 : 1 ;
  5712F                   // 6 Receive Channel enable bit
  5713F  Uint16 RCEG7 : 1 ;
  5714F                   // 7 Receive Channel enable bit
  5715F  Uint16 RCEG8 : 1 ;
  5716F                   // 8 Receive Channel enable bit
  5717F  Uint16 RCEG9 : 1 ;
  5718F                   // 9 Receive Channel enable bit
  5719F  Uint16 RCEG10 : 1 ;
  5720F                    // 10 Receive Channel enable bit
  5721F  Uint16 RCEG11 : 1 ;
  5722F                    // 11 Receive Channel enable bit
  5723F  Uint16 RCEG12 : 1 ;
  5724F                    // 12 Receive Channel enable bit
  5725F  Uint16 RCEG13 : 1 ;
  5726F                    // 13 Receive Channel enable bit
  5727F  Uint16 RCEG14 : 1 ;
  5728F                    // 14 Receive Channel enable bit
  5729F  Uint16 RCEG15 : 1 ;
  5730F                    // 15 Receive Channel enable bit
  5731F} ;
  5732F
  5733Funion RCERG_REG
  5734F{
  5735F  Uint16 all ;
  5736F  struct RCERG_BITS bit ;
  5737F} ;
  5738F// RCERH control register bit definitions:
  5739F
  5740Fstruct RCERH_BITS
  5741F{                   // bit description
  5742F  Uint16 RCEH0 : 1 ;
  5743F                   // 0 Receive Channel enable bit
  5744F  Uint16 RCEH1 : 1 ;
  5745F                   // 1 Receive Channel enable bit
  5746F  Uint16 RCEH2 : 1 ;
  5747F                   // 2 Receive Channel enable bit
  5748F  Uint16 RCEH3 : 1 ;
  5749F                   // 3 Receive Channel enable bit
  5750F  Uint16 RCEH4 : 1 ;
  5751F                   // 4 Receive Channel enable bit
  5752F  Uint16 RCEH5 : 1 ;
  5753F                   // 5 Receive Channel enable bit
  5754F  Uint16 RCEH6 : 1 ;
  5755F                   // 6 Receive Channel enable bit
  5756F  Uint16 RCEH7 : 1 ;
  5757F                   // 7 Receive Channel enable bit
  5758F  Uint16 RCEH8 : 1 ;
  5759F                   // 8 Receive Channel enable bit
  5760F  Uint16 RCEH9 : 1 ;
  5761F                   // 9 Receive Channel enable bit
  5762F  Uint16 RCEH10 : 1 ;
  5763F                    // 10 Receive Channel enable bit
  5764F  Uint16 RCEH11 : 1 ;
  5765F                    // 11 Receive Channel enable bit
  5766F  Uint16 RCEH12 : 1 ;
  5767F                    // 12 Receive Channel enable bit
  5768F  Uint16 RCEH13 : 1 ;
  5769F                    // 13 Receive Channel enable bit
  5770F  Uint16 RCEH14 : 1 ;
  5771F                    // 14 Receive Channel enable bit
  5772F  Uint16 RCEH15 : 1 ;
  5773F                    // 15 Receive Channel enable bit
  5774F} ;
  5775F
  5776Funion RCERH_REG
  5777F{
  5778F  Uint16 all ;
  5779F  struct RCERH_BITS bit ;
  5780F} ;
  5781F// XCERG control register bit definitions:
  5782F
  5783Fstruct XCERG_BITS
  5784F{                   // bit description
  5785F  Uint16 XCERG0 : 1 ;
  5786F                    // 0 Receive Channel enable bit
  5787F  Uint16 XCERG1 : 1 ;
  5788F                    // 1 Receive Channel enable bit
  5789F  Uint16 XCERG2 : 1 ;
  5790F                    // 2 Receive Channel enable bit
  5791F  Uint16 XCERG3 : 1 ;
  5792F                    // 3 Receive Channel enable bit
  5793F  Uint16 XCERG4 : 1 ;
  5794F                    // 4 Receive Channel enable bit
  5795F  Uint16 XCERG5 : 1 ;
  5796F                    // 5 Receive Channel enable bit
  5797F  Uint16 XCERG6 : 1 ;
  5798F                    // 6 Receive Channel enable bit
  5799F  Uint16 XCERG7 : 1 ;
  5800F                    // 7 Receive Channel enable bit
  5801F  Uint16 XCERG8 : 1 ;
  5802F                    // 8 Receive Channel enable bit
  5803F  Uint16 XCERG9 : 1 ;
  5804F                    // 9 Receive Channel enable bit
  5805F  Uint16 XCERG10 : 1 ;
  5806F                     // 10 Receive Channel enable bit
  5807F  Uint16 XCERG11 : 1 ;
  5808F                     // 11 Receive Channel enable bit
  5809F  Uint16 XCERG12 : 1 ;
  5810F                     // 12 Receive Channel enable bit
  5811F  Uint16 XCERG13 : 1 ;
  5812F                     // 13 Receive Channel enable bit
  5813F  Uint16 XCERG14 : 1 ;
  5814F                     // 14 Receive Channel enable bit
  5815F  Uint16 XCERG15 : 1 ;
  5816F                     // 15 Receive Channel enable bit
  5817F} ;
  5818F
  5819Funion XCERG_REG
  5820F{
  5821F  Uint16 all ;
  5822F  struct XCERG_BITS bit ;
  5823F} ;
  5824F// XCERH control register bit definitions:
  5825F
  5826Fstruct XCERH_BITS
  5827F{                   // bit description
  5828F  Uint16 XCEH0 : 1 ;
  5829F                   // 0 Receive Channel enable bit
  5830F  Uint16 XCEH1 : 1 ;
  5831F                   // 1 Receive Channel enable bit
  5832F  Uint16 XCEH2 : 1 ;
  5833F                   // 2 Receive Channel enable bit
  5834F  Uint16 XCEH3 : 1 ;
  5835F                   // 3 Receive Channel enable bit
  5836F  Uint16 XCEH4 : 1 ;
  5837F                   // 4 Receive Channel enable bit
  5838F  Uint16 XCEH5 : 1 ;
  5839F                   // 5 Receive Channel enable bit
  5840F  Uint16 XCEH6 : 1 ;
  5841F                   // 6 Receive Channel enable bit
  5842F  Uint16 XCEH7 : 1 ;
  5843F                   // 7 Receive Channel enable bit
  5844F  Uint16 XCEH8 : 1 ;
  5845F                   // 8 Receive Channel enable bit
  5846F  Uint16 XCEH9 : 1 ;
  5847F                   // 9 Receive Channel enable bit
  5848F  Uint16 XCEH10 : 1 ;
  5849F                    // 10 Receive Channel enable bit
  5850F  Uint16 XCEH11 : 1 ;
  5851F                    // 11 Receive Channel enable bit
  5852F  Uint16 XCEH12 : 1 ;
  5853F                    // 12 Receive Channel enable bit
  5854F  Uint16 XCEH13 : 1 ;
  5855F                    // 13 Receive Channel enable bit
  5856F  Uint16 XCEH14 : 1 ;
  5857F                    // 14 Receive Channel enable bit
  5858F  Uint16 XCEH15 : 1 ;
  5859F                    // 15 Receive Channel enable bit
  5860F} ;
  5861F
  5862Funion XCERH_REG
  5863F{
  5864F  Uint16 all ;
  5865F  struct XCERH_BITS bit ;
  5866F} ;
  5867F// McBSP Interrupt enable register for RINT/XINT
  5868F
  5869Fstruct MFFINT_BITS
  5870F{                    // bits description
  5871F  Uint16 XINT : 1 ;// 0 XINT interrupt enable
  5872F  Uint16 rsvd1 : 1 ;// 1 reserved
  5873F  Uint16 RINT : 1 ;// 2 RINT interrupt enable
  5874F  Uint16 rsvd2 : 13 ;// 15:3 reserved
  5875F} ;
  5876F
  5877Funion MFFINT_REG
  5878F{
  5879F  Uint16 all ;
  5880F  struct MFFINT_BITS bit ;
  5881F} ;
  5882F//---------------------------------------------------------------------------
  5883F// McBSP Register File:
  5884F//
  5885F
  5886Fstruct MCBSP_REGS
  5887F{
  5888F  union DRR2_REG DRR2 ; // MCBSP Data receive register bits 31-16
  5889F  union DRR1_REG DRR1 ; // MCBSP Data receive register bits 15-0
  5890F  union DXR2_REG DXR2 ; // MCBSP Data transmit register bits 31-16
  5891F  union DXR1_REG DXR1 ; // MCBSP Data transmit register bits 15-0
  5892F  union SPCR2_REG SPCR2 ; // MCBSP control register bits 31-16
  5893F  union SPCR1_REG SPCR1 ; // MCBSP control register bits 15-0
  5894F  union RCR2_REG RCR2 ; // MCBSP receive control register bits 31-16
  5895F  union RCR1_REG RCR1 ; // MCBSP receive control register bits 15-0
  5896F  union XCR2_REG XCR2 ; // MCBSP transmit control register bits 31-16
  5897F  union XCR1_REG XCR1 ; // MCBSP transmit control register bits 15-0
  5898F  union SRGR2_REG SRGR2 ; // MCBSP sample rate gen register bits 31-16
  5899F  union SRGR1_REG SRGR1 ; // MCBSP sample rate gen register bits 15-0
  5900F  union MCR2_REG MCR2 ; // MCBSP multichannel register bits 31-16
  5901F  union MCR1_REG MCR1 ; // MCBSP multichannel register bits 15-0
  5902F  union RCERA_REG RCERA ; // MCBSP Receive channel enable partition A
  5903F  union RCERB_REG RCERB ; // MCBSP Receive channel enable partition B
  5904F  union XCERA_REG XCERA ; // MCBSP Transmit channel enable partition A
  5905F  union XCERB_REG XCERB ; // MCBSP Transmit channel enable partition B
  5906F  union PCR_REG PCR ; // MCBSP Pin control register bits 15-0
  5907F  union RCERC_REG RCERC ; // MCBSP Receive channel enable partition C
  5908F  union RCERD_REG RCERD ; // MCBSP Receive channel enable partition D
  5909F  union XCERC_REG XCERC ; // MCBSP Transmit channel enable partition C
  5910F  union XCERD_REG XCERD ; // MCBSP Transmit channel enable partition D
  5911F  union RCERE_REG RCERE ; // MCBSP Receive channel enable partition E
  5912F  union RCERF_REG RCERF ; // MCBSP Receive channel enable partition F
  5913F  union XCERE_REG XCERE ; // MCBSP Transmit channel enable partition E
  5914F  union XCERF_REG XCERF ; // MCBSP Transmit channel enable partition F
  5915F  union RCERG_REG RCERG ; // MCBSP Receive channel enable partition G
  5916F  union RCERH_REG RCERH ; // MCBSP Receive channel enable partition H
  5917F  union XCERG_REG XCERG ; // MCBSP Transmit channel enable partition G
  5918F  union XCERH_REG XCERH ; // MCBSP Transmit channel enable partition H
  5919F  Uint16 rsvd1 [ 4 ] ;
  5920F                    // reserved
  5921F  union MFFINT_REG MFFINT ; // MCBSP Interrupt enable register for RINT/XINT
  5922F  Uint16 rsvd2 ; // reserved
  5923F} ;
  5924F//---------------------------------------------------------------------------
  5925F// McBSP External References & Function Declarations:
  5926F//
  5927F
  5928Fextern volatile struct MCBSP_REGS
  5929F  McbspaRegs ;
  5930F
  5931Fextern volatile struct MCBSP_REGS
  5932F  McbspbRegs ;
  5933F       /* extern "C" */
  5934F       // end of DSP2833x_MCBSP_H definition
  5935F//===========================================================================
  5936F// No more.
  5937F//===========================================================================
  5938F 
  5939F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_McBSP.h*/
  5940F/*   CLOSE_FILE Include File */
  5941F 
  5942F              // McBSP
  5943F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieCtrl.h */
  5944F// TI File $Revision: /main/1 $
  5945F// Checkin $Date: August 18, 2006 13:52:24 $
  5946F//###########################################################################
  5947F//
  5948F// FILE: DSP2833x_PieCtrl.h
  5949F//
  5950F// TITLE: DSP2833x Device PIE Control Register Definitions.
  5951F//
  5952F//###########################################################################
  5953F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  5954F// $Release Date: August 4, 2009 $
  5955F//###########################################################################
  5956F#ifndef DSP2833x_PIE_CTRL_H
  5957F#define DSP2833x_PIE_CTRL_H
  5958F//---------------------------------------------------------------------------
  5959F// PIE Control Register Bit Definitions:
  5960F//
  5961F// PIECTRL: Register bit definitions:
  5962F
  5963Ftypedef
  5964Fstruct PIECTRL_BITS
  5965F{                            // bits description
  5966F  Uint16 ENPIE : 1 ;
  5967F                   // 0 Enable PIE block
  5968F  Uint16 PIEVECT : 15 ;
  5969F                      // 15:1 Fetched vector address
  5970F} PIECTRL_BITS ;
  5971F
  5972Ftypedef
  5973Funion PIECTRL_REG
  5974F{
  5975F  Uint16 all ;
  5976F  struct PIECTRL_BITS bit ;
  5977F} PIECTRL_REG ;
  5978F// PIEIER: Register bit definitions:
  5979F
  5980Ftypedef
  5981Fstruct PIEIER_BITS
  5982F{                            // bits description
  5983F  Uint16 INTx1 : 1 ;
  5984F                   // 0 INTx.1
  5985F  Uint16 INTx2 : 1 ;
  5986F                   // 1 INTx.2
  5987F  Uint16 INTx3 : 1 ;
  5988F                   // 2 INTx.3
  5989F  Uint16 INTx4 : 1 ;
  5990F                   // 3 INTx.4
  5991F  Uint16 INTx5 : 1 ;
  5992F                   // 4 INTx.5
  5993F  Uint16 INTx6 : 1 ;
  5994F                   // 5 INTx.6
  5995F  Uint16 INTx7 : 1 ;
  5996F                   // 6 INTx.7
  5997F  Uint16 INTx8 : 1 ;
  5998F                   // 7 INTx.8
  5999F  Uint16 rsvd : 8 ;
  6000F                  // 15:8 reserved
  6001F} PIEIER_BITS ;
  6002F
  6003Ftypedef
  6004Funion PIEIER_REG
  6005F{
  6006F  Uint16 all ;
  6007F  struct PIEIER_BITS bit ;
  6008F} PIEIER_REG ;
  6009F// PIEIFR: Register bit definitions:
  6010F
  6011Ftypedef
  6012Fstruct PIEIFR_BITS
  6013F{                            // bits description
  6014F  Uint16 INTx1 : 1 ;
  6015F                   // 0 INTx.1
  6016F  Uint16 INTx2 : 1 ;
  6017F                   // 1 INTx.2
  6018F  Uint16 INTx3 : 1 ;
  6019F                   // 2 INTx.3
  6020F  Uint16 INTx4 : 1 ;
  6021F                   // 3 INTx.4
  6022F  Uint16 INTx5 : 1 ;
  6023F                   // 4 INTx.5
  6024F  Uint16 INTx6 : 1 ;
  6025F                   // 5 INTx.6
  6026F  Uint16 INTx7 : 1 ;
  6027F                   // 6 INTx.7
  6028F  Uint16 INTx8 : 1 ;
  6029F                   // 7 INTx.8
  6030F  Uint16 rsvd : 8 ;
  6031F                  // 15:8 reserved
  6032F} PIEIFR_BITS ;
  6033F
  6034Ftypedef
  6035Funion PIEIFR_REG
  6036F{
  6037F  Uint16 all ;
  6038F  struct PIEIFR_BITS bit ;
  6039F} PIEIFR_REG ;
  6040F// PIEACK: Register bit definitions:
  6041F
  6042Ftypedef
  6043Fstruct PIEACK_BITS
  6044F{                            // bits description
  6045F  Uint16 ACK1 : 1 ;
  6046F                  // 0 Acknowledge PIE interrupt group 1
  6047F  Uint16 ACK2 : 1 ;
  6048F                  // 1 Acknowledge PIE interrupt group 2
  6049F  Uint16 ACK3 : 1 ;
  6050F                  // 2 Acknowledge PIE interrupt group 3
  6051F  Uint16 ACK4 : 1 ;
  6052F                  // 3 Acknowledge PIE interrupt group 4
  6053F  Uint16 ACK5 : 1 ;
  6054F                  // 4 Acknowledge PIE interrupt group 5
  6055F  Uint16 ACK6 : 1 ;
  6056F                  // 5 Acknowledge PIE interrupt group 6
  6057F  Uint16 ACK7 : 1 ;
  6058F                  // 6 Acknowledge PIE interrupt group 7
  6059F  Uint16 ACK8 : 1 ;
  6060F                  // 7 Acknowledge PIE interrupt group 8
  6061F  Uint16 ACK9 : 1 ;
  6062F                  // 8 Acknowledge PIE interrupt group 9
  6063F  Uint16 ACK10 : 1 ;
  6064F                   // 9 Acknowledge PIE interrupt group 10
  6065F  Uint16 ACK11 : 1 ;
  6066F                   // 10 Acknowledge PIE interrupt group 11
  6067F  Uint16 ACK12 : 1 ;
  6068F                   // 11 Acknowledge PIE interrupt group 12
  6069F  Uint16 rsvd : 4 ;
  6070F                  // 15:12 reserved
  6071F} PIEACK_BITS ;
  6072F
  6073Ftypedef
  6074Funion PIEACK_REG
  6075F{
  6076F  Uint16 all ;
  6077F  struct PIEACK_BITS bit ;
  6078F} PIEACK_REG ;
  6079F//---------------------------------------------------------------------------
  6080F// PIE Control Register File:
  6081F//
  6082F
  6083Ftypedef
  6084Fstruct PIE_CTRL_REGS
  6085F{
  6086F  union PIECTRL_REG PIECTRL ; // PIE control register
  6087F  union PIEACK_REG PIEACK ; // PIE acknowledge
  6088F  union PIEIER_REG PIEIER1 ; // PIE int1 IER register
  6089F  union PIEIFR_REG PIEIFR1 ; // PIE int1 IFR register
  6090F  union PIEIER_REG PIEIER2 ; // PIE INT2 IER register
  6091F  union PIEIFR_REG PIEIFR2 ; // PIE INT2 IFR register
  6092F  union PIEIER_REG PIEIER3 ; // PIE INT3 IER register
  6093F  union PIEIFR_REG PIEIFR3 ; // PIE INT3 IFR register
  6094F  union PIEIER_REG PIEIER4 ; // PIE INT4 IER register
  6095F  union PIEIFR_REG PIEIFR4 ; // PIE INT4 IFR register
  6096F  union PIEIER_REG PIEIER5 ; // PIE INT5 IER register
  6097F  union PIEIFR_REG PIEIFR5 ; // PIE INT5 IFR register
  6098F  union PIEIER_REG PIEIER6 ; // PIE INT6 IER register
  6099F  union PIEIFR_REG PIEIFR6 ; // PIE INT6 IFR register
  6100F  union PIEIER_REG PIEIER7 ; // PIE INT7 IER register
  6101F  union PIEIFR_REG PIEIFR7 ; // PIE INT7 IFR register
  6102F  union PIEIER_REG PIEIER8 ; // PIE INT8 IER register
  6103F  union PIEIFR_REG PIEIFR8 ; // PIE INT8 IFR register
  6104F  union PIEIER_REG PIEIER9 ; // PIE INT9 IER register
  6105F  union PIEIFR_REG PIEIFR9 ; // PIE INT9 IFR register
  6106F  union PIEIER_REG PIEIER10 ; // PIE int10 IER register
  6107F  union PIEIFR_REG PIEIFR10 ; // PIE int10 IFR register
  6108F  union PIEIER_REG PIEIER11 ; // PIE int11 IER register
  6109F  union PIEIFR_REG PIEIFR11 ; // PIE int11 IFR register
  6110F  union PIEIER_REG PIEIER12 ; // PIE int12 IER register
  6111F  union PIEIFR_REG PIEIFR12 ; // PIE int12 IFR register
  6112F} PIE_CTRL_REGS ;
  6113F#define PIEACK_GROUP1 0x0001
  6114F#define PIEACK_GROUP2 0x0002
  6115F#define PIEACK_GROUP3 0x0004
  6116F#define PIEACK_GROUP4 0x0008
  6117F#define PIEACK_GROUP5 0x0010
  6118F#define PIEACK_GROUP6 0x0020
  6119F#define PIEACK_GROUP7 0x0040
  6120F#define PIEACK_GROUP8 0x0080
  6121F#define PIEACK_GROUP9 0x0100
  6122F#define PIEACK_GROUP10 0x0200
  6123F#define PIEACK_GROUP11 0x0400
  6124F#define PIEACK_GROUP12 0x0800
  6125F//---------------------------------------------------------------------------
  6126F// PIE Control Registers External References & Function Declarations:
  6127F//
  6128F
  6129Fextern volatile struct PIE_CTRL_REGS
  6130F  PieCtrlRegs ;
  6131F       // end of DSP2833x_PIE_CTRL_H definition
  6132F//===========================================================================
  6133F// End of file.
  6134F//===========================================================================
  6135F 
  6136F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieCtrl.h*/
  6137F/*   CLOSE_FILE Include File */
  6138F 
  6139F            // PIE Control Registers
  6140F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieVect.h */
  6141F// TI File $Revision: /main/2 $
  6142F// Checkin $Date: March 16, 2007 09:00:21 $
  6143F//###########################################################################
  6144F//
  6145F// FILE: DSP2833x_PieVect.h
  6146F//
  6147F// TITLE: DSP2833x Devices PIE Vector Table Definitions.
  6148F//
  6149F//###########################################################################
  6150F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6151F// $Release Date: August 4, 2009 $
  6152F//###########################################################################
  6153F#ifndef DSP2833x_PIE_VECT_H
  6154F#define DSP2833x_PIE_VECT_H
  6155F//---------------------------------------------------------------------------
  6156F// PIE Interrupt Vector Table Definition:
  6157F//
  6158F// Create a user type called PINT (pointer to interrupt):
  6159F
  6160Ftypedef
  6161Fconst
  6162Finterrupt void ( * PINT ) ( void ) ;
  6163F// Define Vector Table:
  6164F
  6165Ftypedef
  6166Fstruct PIE_VECT_TABLE
  6167F{
  6168F// Reset is never fetched from this table.
  6169F// It will always be fetched from 0x3FFFC0 in
  6170F// boot ROM
  6171F  PINT PIE1_RESERVED ;
  6172F  PINT PIE2_RESERVED ;
  6173F  PINT PIE3_RESERVED ;
  6174F  PINT PIE4_RESERVED ;
  6175F  PINT PIE5_RESERVED ;
  6176F  PINT PIE6_RESERVED ;
  6177F  PINT PIE7_RESERVED ;
  6178F  PINT PIE8_RESERVED ;
  6179F  PINT PIE9_RESERVED ;
  6180F  PINT PIE10_RESERVED ;
  6181F  PINT PIE11_RESERVED ;
  6182F  PINT PIE12_RESERVED ;
  6183F  PINT PIE13_RESERVED ;
  6184F// Non-Peripheral Interrupts:
  6185F  PINT XINT13 ;    // XINT13 / CPU-Timer1
  6186F  PINT TINT2 ;    // CPU-Timer2
  6187F  PINT DATALOG ;    // Datalogging interrupt
  6188F  PINT RTOSINT ;    // RTOS interrupt
  6189F  PINT EMUINT ;    // Emulation interrupt
  6190F  PINT XNMI ;    // Non-maskable interrupt
  6191F  PINT ILLEGAL ;    // Illegal operation TRAP
  6192F  PINT USER1 ;    // User Defined trap 1
  6193F  PINT USER2 ;    // User Defined trap 2
  6194F  PINT USER3 ;    // User Defined trap 3
  6195F  PINT USER4 ;    // User Defined trap 4
  6196F  PINT USER5 ;    // User Defined trap 5
  6197F  PINT USER6 ;    // User Defined trap 6
  6198F  PINT USER7 ;    // User Defined trap 7
  6199F  PINT USER8 ;    // User Defined trap 8
  6200F  PINT USER9 ;    // User Defined trap 9
  6201F  PINT USER10 ;    // User Defined trap 10
  6202F  PINT USER11 ;    // User Defined trap 11
  6203F  PINT USER12 ;    // User Defined trap 12
  6204F// Group 1 PIE Peripheral Vectors:
  6205F  PINT SEQ1INT ;
  6206F  PINT SEQ2INT ;
  6207F  PINT rsvd1_3 ;
  6208F  PINT XINT1 ;
  6209F  PINT XINT2 ;
  6210F  PINT ADCINT ;    // ADC
  6211F  PINT TINT0 ;    // Timer 0
  6212F  PINT WAKEINT ;    // WD
  6213F// Group 2 PIE Peripheral Vectors:
  6214F  PINT EPWM1_TZINT ;    // EPWM-1
  6215F  PINT EPWM2_TZINT ;    // EPWM-2
  6216F  PINT EPWM3_TZINT ;    // EPWM-3
  6217F  PINT EPWM4_TZINT ;    // EPWM-4
  6218F  PINT EPWM5_TZINT ;    // EPWM-5
  6219F  PINT EPWM6_TZINT ;    // EPWM-6
  6220F  PINT rsvd2_7 ;
  6221F  PINT rsvd2_8 ;
  6222F// Group 3 PIE Peripheral Vectors:
  6223F  PINT EPWM1_INT ;    // EPWM-1
  6224F  PINT EPWM2_INT ;    // EPWM-2
  6225F  PINT EPWM3_INT ;    // EPWM-3
  6226F  PINT EPWM4_INT ;    // EPWM-4
  6227F  PINT EPWM5_INT ;    // EPWM-5
  6228F  PINT EPWM6_INT ;    // EPWM-6
  6229F  PINT rsvd3_7 ;
  6230F  PINT rsvd3_8 ;
  6231F// Group 4 PIE Peripheral Vectors:
  6232F  PINT ECAP1_INT ;    // ECAP-1
  6233F  PINT ECAP2_INT ;    // ECAP-2
  6234F  PINT ECAP3_INT ;    // ECAP-3
  6235F  PINT ECAP4_INT ;    // ECAP-4
  6236F  PINT ECAP5_INT ;    // ECAP-5
  6237F  PINT ECAP6_INT ;    // ECAP-6
  6238F  PINT rsvd4_7 ;
  6239F  PINT rsvd4_8 ;
  6240F// Group 5 PIE Peripheral Vectors:
  6241F  PINT EQEP1_INT ;    // EQEP-1
  6242F  PINT EQEP2_INT ;    // EQEP-2
  6243F  PINT rsvd5_3 ;
  6244F  PINT rsvd5_4 ;
  6245F  PINT rsvd5_5 ;
  6246F  PINT rsvd5_6 ;
  6247F  PINT rsvd5_7 ;
  6248F  PINT rsvd5_8 ;
  6249F// Group 6 PIE Peripheral Vectors:
  6250F  PINT SPIRXINTA ;    // SPI-A
  6251F  PINT SPITXINTA ;    // SPI-A
  6252F  PINT MRINTB ;    // McBSP-B
  6253F  PINT MXINTB ;    // McBSP-B
  6254F  PINT MRINTA ;        // McBSP-A
  6255F  PINT MXINTA ;    // McBSP-A
  6256F  PINT rsvd6_7 ;
  6257F  PINT rsvd6_8 ;
  6258F// Group 7 PIE Peripheral Vectors:
  6259F  PINT DINTCH1 ;    // DMA
  6260F  PINT DINTCH2 ;    // DMA
  6261F  PINT DINTCH3 ;    // DMA
  6262F  PINT DINTCH4 ;    // DMA
  6263F  PINT DINTCH5 ;    // DMA
  6264F  PINT DINTCH6 ;    // DMA
  6265F  PINT rsvd7_7 ;
  6266F  PINT rsvd7_8 ;
  6267F// Group 8 PIE Peripheral Vectors:
  6268F  PINT I2CINT1A ;    // I2C-A
  6269F  PINT I2CINT2A ;    // I2C-A
  6270F  PINT rsvd8_3 ;
  6271F  PINT rsvd8_4 ;
  6272F  PINT SCIRXINTC ;    // SCI-C
  6273F  PINT SCITXINTC ;    // SCI-C
  6274F  PINT rsvd8_7 ;
  6275F  PINT rsvd8_8 ;
  6276F// Group 9 PIE Peripheral Vectors:
  6277F  PINT SCIRXINTA ;    // SCI-A
  6278F  PINT SCITXINTA ;    // SCI-A
  6279F  PINT SCIRXINTB ;    // SCI-B
  6280F  PINT SCITXINTB ;    // SCI-B
  6281F  PINT ECAN0INTA ;    // eCAN-A
  6282F  PINT ECAN1INTA ;    // eCAN-A
  6283F  PINT ECAN0INTB ;    // eCAN-B
  6284F  PINT ECAN1INTB ;    // eCAN-B
  6285F// Group 10 PIE Peripheral Vectors:
  6286F  PINT rsvd10_1 ;
  6287F  PINT rsvd10_2 ;
  6288F  PINT rsvd10_3 ;
  6289F  PINT rsvd10_4 ;
  6290F  PINT rsvd10_5 ;
  6291F  PINT rsvd10_6 ;
  6292F  PINT rsvd10_7 ;
  6293F  PINT rsvd10_8 ;
  6294F// Group 11 PIE Peripheral Vectors:
  6295F  PINT rsvd11_1 ;
  6296F  PINT rsvd11_2 ;
  6297F  PINT rsvd11_3 ;
  6298F  PINT rsvd11_4 ;
  6299F  PINT rsvd11_5 ;
  6300F  PINT rsvd11_6 ;
  6301F  PINT rsvd11_7 ;
  6302F  PINT rsvd11_8 ;
  6303F// Group 12 PIE Peripheral Vectors:
  6304F  PINT XINT3 ;    // External interrupt
  6305F  PINT XINT4 ;
  6306F  PINT XINT5 ;
  6307F  PINT XINT6 ;
  6308F  PINT XINT7 ;
  6309F  PINT rsvd12_6 ;
  6310F  PINT LVF ;    // Latched overflow
  6311F  PINT LUF ;    // Latched underflow
  6312F} PIE_VECT_TABLE ;
  6313F//---------------------------------------------------------------------------
  6314F// PIE Interrupt Vector Table External References & Function Declarations:
  6315F//
  6316F
  6317Fextern struct PIE_VECT_TABLE
  6318F  PieVectTable ;
  6319F       // end of DSP2833x_PIE_VECT_H definition
  6320F//===========================================================================
  6321F// End of file.
  6322F//===========================================================================
  6323F 
  6324F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieVect.h*/
  6325F/*   CLOSE_FILE Include File */
  6326F 
  6327F            // PIE Vector Table
  6328F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Spi.h */
  6329F// TI File $Revision: /main/3 $
  6330F// Checkin $Date: April 17, 2008 11:08:27 $
  6331F//###########################################################################
  6332F//
  6333F// FILE: DSP2833x_Spi.h
  6334F//
  6335F// TITLE: DSP2833x Device SPI Register Definitions.
  6336F//
  6337F//###########################################################################
  6338F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6339F// $Release Date: August 4, 2009 $
  6340F//###########################################################################
  6341F#ifndef DSP2833x_SPI_H
  6342F#define DSP2833x_SPI_H
  6343F//---------------------------------------------------------------------------
  6344F// SPI Individual Register Bit Definitions:
  6345F//
  6346F// SPI FIFO Transmit register bit definitions:
  6347F
  6348Fstruct SPIFFTX_BITS
  6349F{                     // bit description
  6350F  Uint16 TXFFIL : 5 ;
  6351F                    // 4:0 Interrupt level
  6352F  Uint16 TXFFIENA : 1 ;
  6353F                      // 5 Interrupt enable
  6354F  Uint16 TXFFINTCLR : 1 ;
  6355F                        // 6 Clear INT flag
  6356F  Uint16 TXFFINT : 1 ;
  6357F                     // 7 INT flag
  6358F  Uint16 TXFFST : 5 ;
  6359F                    // 12:8 FIFO status
  6360F  Uint16 TXFIFO : 1 ;
  6361F                    // 13 FIFO reset
  6362F  Uint16 SPIFFENA : 1 ;
  6363F                      // 14 Enhancement enable
  6364F  Uint16 SPIRST : 1 ;
  6365F                    // 15 Reset SPI
  6366F} ;
  6367F
  6368Funion SPIFFTX_REG
  6369F{
  6370F  Uint16 all ;
  6371F  struct SPIFFTX_BITS bit ;
  6372F} ;
  6373F//--------------------------------------------
  6374F// SPI FIFO recieve register bit definitions:
  6375F//
  6376F//
  6377F
  6378Fstruct SPIFFRX_BITS
  6379F{                     // bits description
  6380F  Uint16 RXFFIL : 5 ;
  6381F                    // 4:0 Interrupt level
  6382F  Uint16 RXFFIENA : 1 ;
  6383F                      // 5 Interrupt enable
  6384F  Uint16 RXFFINTCLR : 1 ;
  6385F                        // 6 Clear INT flag
  6386F  Uint16 RXFFINT : 1 ;
  6387F                     // 7 INT flag
  6388F  Uint16 RXFFST : 5 ;
  6389F                    // 12:8 FIFO status
  6390F  Uint16 RXFIFORESET : 1 ;
  6391F                         // 13 FIFO reset
  6392F  Uint16 RXFFOVFCLR : 1 ;
  6393F                        // 14 Clear overflow
  6394F  Uint16 RXFFOVF : 1 ;
  6395F                     // 15 FIFO overflow
  6396F} ;
  6397F
  6398Funion SPIFFRX_REG
  6399F{
  6400F  Uint16 all ;
  6401F  struct SPIFFRX_BITS bit ;
  6402F} ;
  6403F//--------------------------------------------
  6404F// SPI FIFO control register bit definitions:
  6405F//
  6406F//
  6407F
  6408Fstruct SPIFFCT_BITS
  6409F{                     // bits description
  6410F  Uint16 TXDLY : 8 ;
  6411F                   // 7:0 FIFO transmit delay
  6412F  Uint16 rsvd : 8 ;
  6413F                  // 15:8 reserved
  6414F} ;
  6415F
  6416Funion SPIFFCT_REG
  6417F{
  6418F  Uint16 all ;
  6419F  struct SPIFFCT_BITS bit ;
  6420F} ;
  6421F//---------------------------------------------
  6422F// SPI configuration register bit definitions:
  6423F//
  6424F//
  6425F
  6426Fstruct SPICCR_BITS
  6427F{                    // bits description
  6428F  Uint16 SPICHAR : 4 ;
  6429F                     // 3:0 Character length control
  6430F  Uint16 SPILBK : 1 ;
  6431F                    // 4 Loop-back enable/disable
  6432F  Uint16 rsvd1 : 1 ;
  6433F                   // 5 reserved
  6434F  Uint16 CLKPOLARITY : 1 ;
  6435F                         // 6 Clock polarity
  6436F  Uint16 SPISWRESET : 1 ;
  6437F                        // 7 SPI SW Reset
  6438F  Uint16 rsvd2 : 8 ;
  6439F                   // 15:8 reserved
  6440F} ;
  6441F
  6442Funion SPICCR_REG
  6443F{
  6444F  Uint16 all ;
  6445F  struct SPICCR_BITS bit ;
  6446F} ;
  6447F//-------------------------------------------------
  6448F// SPI operation control register bit definitions:
  6449F//
  6450F//
  6451F
  6452Fstruct SPICTL_BITS
  6453F{                    // bits description
  6454F  Uint16 SPIINTENA : 1 ;
  6455F                       // 0 Interrupt enable
  6456F  Uint16 TALK : 1 ;
  6457F                  // 1 Master/Slave transmit enable
  6458F  Uint16 MASTER_SLAVE : 1 ;
  6459F                          // 2 Network control mode
  6460F  Uint16 CLK_PHASE : 1 ;
  6461F                       // 3 Clock phase select
  6462F  Uint16 OVERRUNINTENA : 1 ;
  6463F                           // 4 Overrun interrupt enable
  6464F  Uint16 rsvd : 11 ;
  6465F                   // 15:5 reserved
  6466F} ;
  6467F
  6468Funion SPICTL_REG
  6469F{
  6470F  Uint16 all ;
  6471F  struct SPICTL_BITS bit ;
  6472F} ;
  6473F//--------------------------------------
  6474F// SPI status register bit definitions:
  6475F//
  6476F//
  6477F
  6478Fstruct SPISTS_BITS
  6479F{                    // bits description
  6480F  Uint16 rsvd1 : 5 ;
  6481F                   // 4:0 reserved
  6482F  Uint16 BUFFULL_FLAG : 1 ;
  6483F                          // 5 SPI transmit buffer full flag
  6484F  Uint16 INT_FLAG : 1 ;
  6485F                      // 6 SPI interrupt flag
  6486F  Uint16 OVERRUN_FLAG : 1 ;
  6487F                          // 7 SPI reciever overrun flag
  6488F  Uint16 rsvd2 : 8 ;
  6489F                   // 15:8 reserved
  6490F} ;
  6491F
  6492Funion SPISTS_REG
  6493F{
  6494F  Uint16 all ;
  6495F  struct SPISTS_BITS bit ;
  6496F} ;
  6497F//------------------------------------------------
  6498F// SPI priority control register bit definitions:
  6499F//
  6500F//
  6501F
  6502Fstruct SPIPRI_BITS
  6503F{                    // bits description
  6504F  Uint16 rsvd1 : 4 ;
  6505F                   // 3:0 reserved
  6506F  Uint16 FREE : 1 ;
  6507F                  // 4 Free emulation mode control
  6508F  Uint16 SOFT : 1 ;
  6509F                  // 5 Soft emulation mode control
  6510F  Uint16 rsvd2 : 1 ;
  6511F                   // 6 reserved
  6512F  Uint16 rsvd3 : 9 ;
  6513F                   // 15:7 reserved
  6514F} ;
  6515F
  6516Funion SPIPRI_REG
  6517F{
  6518F  Uint16 all ;
  6519F  struct SPIPRI_BITS bit ;
  6520F} ;
  6521F//---------------------------------------------------------------------------
  6522F// SPI Register File:
  6523F//
  6524F
  6525Fstruct SPI_REGS
  6526F{
  6527F  union SPICCR_REG SPICCR ; // Configuration register
  6528F  union SPICTL_REG SPICTL ; // Operation control register
  6529F  union SPISTS_REG SPISTS ; // Status register
  6530F  Uint16 rsvd1 ; // reserved
  6531F  Uint16 SPIBRR ; // Baud Rate
  6532F  Uint16 rsvd2 ; // reserved
  6533F  Uint16 SPIRXEMU ; // Emulation buffer
  6534F  Uint16 SPIRXBUF ; // Serial input buffer
  6535F  Uint16 SPITXBUF ; // Serial output buffer
  6536F  Uint16 SPIDAT ; // Serial data
  6537F  union SPIFFTX_REG SPIFFTX ; // FIFO transmit register
  6538F  union SPIFFRX_REG SPIFFRX ; // FIFO recieve register
  6539F  union SPIFFCT_REG SPIFFCT ; // FIFO control register
  6540F  Uint16 rsvd3 [ 2 ] ;
  6541F                    // reserved
  6542F  union SPIPRI_REG SPIPRI ; // FIFO Priority control
  6543F} ;
  6544F//---------------------------------------------------------------------------
  6545F// SPI External References & Function Declarations:
  6546F//
  6547F
  6548Fextern volatile struct SPI_REGS
  6549F  SpiaRegs ;
  6550F       /* extern "C" */
  6551F       // end of DSP2833x_SPI_H definition
  6552F//===========================================================================
  6553F// End of file.
  6554F//===========================================================================
  6555F 
  6556F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Spi.h*/
  6557F/*   CLOSE_FILE Include File */
  6558F 
  6559F                // SPI Registers
  6560F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Sci.h */
  6561F// TI File $Revision: /main/2 $
  6562F// Checkin $Date: March 1, 2007 15:57:02 $
  6563F//###########################################################################
  6564F//
  6565F// FILE:        DSP2833x_Sci.h
  6566F//
  6567F// TITLE:       DSP2833x Device SCI Register Definitions.
  6568F//
  6569F//###########################################################################
  6570F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6571F// $Release Date: August 4, 2009 $
  6572F//###########################################################################
  6573F#ifndef DSP2833x_SCI_H
  6574F#define DSP2833x_SCI_H
  6575F//---------------------------------------------------------------------------
  6576F// SCI Individual Register Bit Definitions
  6577F//----------------------------------------------------------
  6578F// SCICCR communication control register bit definitions:
  6579F//
  6580F
  6581Fstruct SCICCR_BITS
  6582F{                    // bit description
  6583F  Uint16 SCICHAR : 3 ;
  6584F                     // 2:0 Character length control
  6585F  Uint16 ADDRIDLE_MODE : 1 ;
  6586F                           // 3 ADDR/IDLE Mode control
  6587F  Uint16 LOOPBKENA : 1 ;
  6588F                       // 4 Loop Back enable
  6589F  Uint16 PARITYENA : 1 ;
  6590F                       // 5 Parity enable
  6591F  Uint16 PARITY : 1 ;
  6592F                    // 6 Even or Odd Parity
  6593F  Uint16 STOPBITS : 1 ;
  6594F                      // 7 Number of Stop Bits
  6595F  Uint16 rsvd1 : 8 ;
  6596F                   // 15:8 reserved
  6597F} ;
  6598F
  6599Funion SCICCR_REG
  6600F{
  6601F  Uint16 all ;
  6602F  struct SCICCR_BITS bit ;
  6603F} ;
  6604F//-------------------------------------------
  6605F// SCICTL1 control register 1 bit definitions:
  6606F//
  6607F
  6608Fstruct SCICTL1_BITS
  6609F{                     // bit description
  6610F  Uint16 RXENA : 1 ;
  6611F                   // 0 SCI receiver enable
  6612F  Uint16 TXENA : 1 ;
  6613F                   // 1 SCI transmitter enable
  6614F  Uint16 SLEEP : 1 ;
  6615F                   // 2 SCI sleep
  6616F  Uint16 TXWAKE : 1 ;
  6617F                    // 3 Transmitter wakeup method
  6618F  Uint16 rsvd : 1 ;
  6619F                  // 4 reserved
  6620F  Uint16 SWRESET : 1 ;
  6621F                     // 5 Software reset
  6622F  Uint16 RXERRINTENA : 1 ;
  6623F                         // 6 Recieve interrupt enable
  6624F  Uint16 rsvd1 : 9 ;
  6625F                   // 15:7 reserved
  6626F} ;
  6627F
  6628Funion SCICTL1_REG
  6629F{
  6630F  Uint16 all ;
  6631F  struct SCICTL1_BITS bit ;
  6632F} ;
  6633F//---------------------------------------------
  6634F// SCICTL2 control register 2 bit definitions:
  6635F//
  6636F
  6637Fstruct SCICTL2_BITS
  6638F{                     // bit description
  6639F  Uint16 TXINTENA : 1 ;
  6640F                      // 0 Transmit interrupt enable
  6641F  Uint16 RXBKINTENA : 1 ;
  6642F                        // 1 Receiver-buffer break enable
  6643F  Uint16 rsvd : 4 ;
  6644F                  // 5:2 reserved
  6645F  Uint16 TXEMPTY : 1 ;
  6646F                     // 6 Transmitter empty flag
  6647F  Uint16 TXRDY : 1 ;
  6648F                   // 7 Transmitter ready flag
  6649F  Uint16 rsvd1 : 8 ;
  6650F                   // 15:8 reserved
  6651F} ;
  6652F
  6653Funion SCICTL2_REG
  6654F{
  6655F  Uint16 all ;
  6656F  struct SCICTL2_BITS bit ;
  6657F} ;
  6658F//---------------------------------------------------
  6659F// SCIRXST Receiver status register bit definitions:
  6660F//
  6661F
  6662Fstruct SCIRXST_BITS
  6663F{                     // bit description
  6664F  Uint16 rsvd : 1 ;
  6665F                  // 0 reserved
  6666F  Uint16 RXWAKE : 1 ;
  6667F                    // 1 Receiver wakeup detect flag
  6668F  Uint16 PE : 1 ;
  6669F                // 2 Parity error flag
  6670F  Uint16 OE : 1 ;
  6671F                // 3 Overrun error flag
  6672F  Uint16 FE : 1 ;
  6673F                // 4 Framing error flag
  6674F  Uint16 BRKDT : 1 ;
  6675F                   // 5 Break-detect flag
  6676F  Uint16 RXRDY : 1 ;
  6677F                   // 6 Receiver ready flag
  6678F  Uint16 RXERROR : 1 ;
  6679F                     // 7 Receiver error flag
  6680F} ;
  6681F
  6682Funion SCIRXST_REG
  6683F{
  6684F  Uint16 all ;
  6685F  struct SCIRXST_BITS bit ;
  6686F} ;
  6687F//----------------------------------------------------
  6688F// SCIRXBUF Receiver Data Buffer with FIFO bit definitions:
  6689F//
  6690F
  6691Fstruct SCIRXBUF_BITS
  6692F{                      // bits description
  6693F  Uint16 RXDT : 8 ;
  6694F                  // 7:0 Receive word
  6695F  Uint16 rsvd : 6 ;
  6696F                  // 13:8 reserved
  6697F  Uint16 SCIFFPE : 1 ;
  6698F                     // 14 SCI PE error in FIFO mode
  6699F  Uint16 SCIFFFE : 1 ;
  6700F                     // 15 SCI FE error in FIFO mode
  6701F} ;
  6702F
  6703Funion SCIRXBUF_REG
  6704F{
  6705F  Uint16 all ;
  6706F  struct SCIRXBUF_BITS bit ;
  6707F} ;
  6708F//--------------------------------------------------
  6709F// SCIPRI Priority control register bit definitions:
  6710F//
  6711F//
  6712F
  6713Fstruct SCIPRI_BITS
  6714F{                    // bit description
  6715F  Uint16 rsvd : 3 ;
  6716F                  // 2:0 reserved
  6717F  Uint16 FREE : 1 ;
  6718F                  // 3 Free emulation suspend mode
  6719F  Uint16 SOFT : 1 ;
  6720F                  // 4 Soft emulation suspend mode
  6721F  Uint16 rsvd1 : 3 ;
  6722F                   // 7:5 reserved
  6723F} ;
  6724F
  6725Funion SCIPRI_REG
  6726F{
  6727F  Uint16 all ;
  6728F  struct SCIPRI_BITS bit ;
  6729F} ;
  6730F//-------------------------------------------------
  6731F// SCI FIFO Transmit register bit definitions:
  6732F//
  6733F//
  6734F
  6735Fstruct SCIFFTX_BITS
  6736F{                     // bit description
  6737F  Uint16 TXFFIL : 5 ;
  6738F                    // 4:0 Interrupt level
  6739F  Uint16 TXFFIENA : 1 ;
  6740F                      // 5 Interrupt enable
  6741F  Uint16 TXFFINTCLR : 1 ;
  6742F                        // 6 Clear INT flag
  6743F  Uint16 TXFFINT : 1 ;
  6744F                     // 7 INT flag
  6745F  Uint16 TXFFST : 5 ;
  6746F                    // 12:8 FIFO status
  6747F  Uint16 TXFIFOXRESET : 1 ;
  6748F                          // 13 FIFO reset
  6749F  Uint16 SCIFFENA : 1 ;
  6750F                      // 14 Enhancement enable
  6751F  Uint16 SCIRST : 1 ;
  6752F                    // 15 SCI reset rx/tx channels
  6753F} ;
  6754F
  6755Funion SCIFFTX_REG
  6756F{
  6757F  Uint16 all ;
  6758F  struct SCIFFTX_BITS bit ;
  6759F} ;
  6760F//------------------------------------------------
  6761F// SCI FIFO recieve register bit definitions:
  6762F//
  6763F//
  6764F
  6765Fstruct SCIFFRX_BITS
  6766F{                     // bits description
  6767F  Uint16 RXFFIL : 5 ;
  6768F                    // 4:0 Interrupt level
  6769F  Uint16 RXFFIENA : 1 ;
  6770F                      // 5 Interrupt enable
  6771F  Uint16 RXFFINTCLR : 1 ;
  6772F                        // 6 Clear INT flag
  6773F  Uint16 RXFFINT : 1 ;
  6774F                     // 7 INT flag
  6775F  Uint16 RXFFST : 5 ;
  6776F                    // 12:8 FIFO status
  6777F  Uint16 RXFIFORESET : 1 ;
  6778F                         // 13 FIFO reset
  6779F  Uint16 RXFFOVRCLR : 1 ;
  6780F                        // 14 Clear overflow
  6781F  Uint16 RXFFOVF : 1 ;
  6782F                     // 15 FIFO overflow
  6783F} ;
  6784F
  6785Funion SCIFFRX_REG
  6786F{
  6787F  Uint16 all ;
  6788F  struct SCIFFRX_BITS bit ;
  6789F} ;
  6790F// SCI FIFO control register bit definitions:
  6791F
  6792Fstruct SCIFFCT_BITS
  6793F{                     // bits description
  6794F  Uint16 FFTXDLY : 8 ;
  6795F                     // 7:0 FIFO transmit delay
  6796F  Uint16 rsvd : 5 ;
  6797F                  // 12:8 reserved
  6798F  Uint16 CDC : 1 ;
  6799F                 // 13 Auto baud mode enable
  6800F  Uint16 ABDCLR : 1 ;
  6801F                    // 14 Auto baud clear
  6802F  Uint16 ABD : 1 ;
  6803F                 // 15 Auto baud detect
  6804F} ;
  6805F
  6806Funion SCIFFCT_REG
  6807F{
  6808F  Uint16 all ;
  6809F  struct SCIFFCT_BITS bit ;
  6810F} ;
  6811F//---------------------------------------------------------------------------
  6812F// SCI Register File:
  6813F//
  6814F
  6815Fstruct SCI_REGS
  6816F{
  6817F  union SCICCR_REG SCICCR ; // Communications control register
  6818F  union SCICTL1_REG SCICTL1 ; // Control register 1
  6819F  Uint16 SCIHBAUD ; // Baud rate (high) register
  6820F  Uint16 SCILBAUD ; // Baud rate (low) register
  6821F  union SCICTL2_REG SCICTL2 ; // Control register 2
  6822F  union SCIRXST_REG SCIRXST ; // Recieve status register
  6823F  Uint16 SCIRXEMU ; // Recieve emulation buffer register
  6824F  union SCIRXBUF_REG SCIRXBUF ; // Recieve data buffer
  6825F  Uint16 rsvd1 ; // reserved
  6826F  Uint16 SCITXBUF ; // Transmit data buffer
  6827F  union SCIFFTX_REG SCIFFTX ; // FIFO transmit register
  6828F  union SCIFFRX_REG SCIFFRX ; // FIFO recieve register
  6829F  union SCIFFCT_REG SCIFFCT ; // FIFO control register
  6830F  Uint16 rsvd2 ; // reserved
  6831F  Uint16 rsvd3 ; // reserved
  6832F  union SCIPRI_REG SCIPRI ; // FIFO Priority control
  6833F} ;
  6834F//---------------------------------------------------------------------------
  6835F// SCI External References & Function Declarations:
  6836F//
  6837F
  6838Fextern volatile struct SCI_REGS
  6839F  SciaRegs ;
  6840F
  6841Fextern volatile struct SCI_REGS
  6842F  ScibRegs ;
  6843F
  6844Fextern volatile struct SCI_REGS
  6845F  ScicRegs ;
  6846F       /* extern "C" */
  6847F       // end of DSP2833x_SCI_H definition
  6848F//===========================================================================
  6849F// End of file.
  6850F//===========================================================================
  6851F 
  6852F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Sci.h*/
  6853F/*   CLOSE_FILE Include File */
  6854F 
  6855F                // SCI Registers
  6856F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_SysCtrl.h */
  6857F// TI File $Revision: /main/5 $
  6858F// Checkin $Date: May 12, 2008 09:34:58 $
  6859F//###########################################################################
  6860F//
  6861F// FILE: DSP2833x_SysCtrl.h
  6862F//
  6863F// TITLE: DSP2833x Device System Control Register Definitions.
  6864F//
  6865F//###########################################################################
  6866F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6867F// $Release Date: August 4, 2009 $
  6868F//###########################################################################
  6869F#ifndef DSP2833x_SYS_CTRL_H
  6870F#define DSP2833x_SYS_CTRL_H
  6871F//---------------------------------------------------------------------------
  6872F// System Control Individual Register Bit Definitions:
  6873F//
  6874F// PLL Status Register
  6875F
  6876Ftypedef
  6877Fstruct PLLSTS_BITS
  6878F{                            // bits description
  6879F  Uint16 PLLLOCKS : 1 ;
  6880F                      // 0 PLL lock status
  6881F  Uint16 rsvd1 : 1 ;
  6882F                   // 1 reserved
  6883F  Uint16 PLLOFF : 1 ;
  6884F                    // 2 PLL off bit
  6885F  Uint16 MCLKSTS : 1 ;
  6886F                     // 3 Missing clock status bit
  6887F  Uint16 MCLKCLR : 1 ;
  6888F                     // 4 Missing clock clear bit
  6889F  Uint16 OSCOFF : 1 ;
  6890F                    // 5 Oscillator clock off
  6891F  Uint16 MCLKOFF : 1 ;
  6892F                     // 6 Missing clock detect
  6893F  Uint16 DIVSEL : 2 ;
  6894F                    // 7 Divide Select
  6895F  Uint16 rsvd2 : 7 ;
  6896F                   // 15:7 reserved
  6897F} PLLSTS_BITS ;
  6898F
  6899Ftypedef
  6900Funion PLLSTS_REG
  6901F{
  6902F  Uint16 all ;
  6903F  struct PLLSTS_BITS bit ;
  6904F} PLLSTS_REG ;
  6905F// High speed peripheral clock register bit definitions:
  6906F
  6907Ftypedef
  6908Fstruct HISPCP_BITS
  6909F{                            // bits description
  6910F  Uint16 HSPCLK : 3 ;
  6911F                    // 2:0 Rate relative to SYSCLKOUT
  6912F  Uint16 rsvd1 : 13 ;
  6913F                    // 15:3 reserved
  6914F} HISPCP_BITS ;
  6915F
  6916Ftypedef
  6917Funion HISPCP_REG
  6918F{
  6919F  Uint16 all ;
  6920F  struct HISPCP_BITS bit ;
  6921F} HISPCP_REG ;
  6922F// Low speed peripheral clock register bit definitions:
  6923F
  6924Ftypedef
  6925Fstruct LOSPCP_BITS
  6926F{                            // bits description
  6927F  Uint16 LSPCLK : 3 ;
  6928F                    // 2:0 Rate relative to SYSCLKOUT
  6929F  Uint16 rsvd1 : 13 ;
  6930F                    // 15:3 reserved
  6931F} LOSPCP_BITS ;
  6932F
  6933Ftypedef
  6934Funion LOSPCP_REG
  6935F{
  6936F  Uint16 all ;
  6937F  struct LOSPCP_BITS bit ;
  6938F} LOSPCP_REG ;
  6939F// Peripheral clock control register 0 bit definitions:
  6940F
  6941Ftypedef
  6942Fstruct PCLKCR0_BITS
  6943F{                             // bits description
  6944F  Uint16 rsvd1 : 2 ;
  6945F                   // 1:0 reserved
  6946F  Uint16 TBCLKSYNC : 1 ;
  6947F                       // 2 EWPM Module TBCLK enable/sync
  6948F  Uint16 ADCENCLK : 1 ;
  6949F                      // 3 Enable high speed clk to ADC
  6950F  Uint16 I2CAENCLK : 1 ;
  6951F                       // 4 Enable SYSCLKOUT to I2C-A
  6952F  Uint16 SCICENCLK : 1 ;
  6953F                       // 5 Enalbe low speed clk to SCI-C
  6954F  Uint16 rsvd2 : 2 ;
  6955F                   // 7:6 reserved
  6956F  Uint16 SPIAENCLK : 1 ;
  6957F                       // 8 Enable low speed clk to SPI-A
  6958F  Uint16 rsvd3 : 1 ;
  6959F                   // 9 reserved
  6960F  Uint16 SCIAENCLK : 1 ;
  6961F                       // 10 Enable low speed clk to SCI-A
  6962F  Uint16 SCIBENCLK : 1 ;
  6963F                       // 11 Enable low speed clk to SCI-B
  6964F  Uint16 MCBSPAENCLK : 1 ;
  6965F                         // 12 Enable low speed clk to McBSP-A
  6966F  Uint16 MCBSPBENCLK : 1 ;
  6967F                         // 13 Enable low speed clk to McBSP-B
  6968F  Uint16 ECANAENCLK : 1 ;
  6969F                        // 14 Enable system clk to eCAN-A
  6970F  Uint16 ECANBENCLK : 1 ;
  6971F                        // 15 Enable system clk to eCAN-B
  6972F} PCLKCR0_BITS ;
  6973F
  6974Ftypedef
  6975Funion PCLKCR0_REG
  6976F{
  6977F  Uint16 all ;
  6978F  struct PCLKCR0_BITS bit ;
  6979F} PCLKCR0_REG ;
  6980F// Peripheral clock control register 1 bit definitions:
  6981F
  6982Ftypedef
  6983Fstruct PCLKCR1_BITS
  6984F{                             // bits description
  6985F  Uint16 EPWM1ENCLK : 1 ;
  6986F                        // 0 Enable SYSCLKOUT to EPWM1
  6987F  Uint16 EPWM2ENCLK : 1 ;
  6988F                        // 1 Enable SYSCLKOUT to EPWM2
  6989F  Uint16 EPWM3ENCLK : 1 ;
  6990F                        // 2 Enable SYSCLKOUT to EPWM3
  6991F  Uint16 EPWM4ENCLK : 1 ;
  6992F                        // 3 Enable SYSCLKOUT to EPWM4
  6993F  Uint16 EPWM5ENCLK : 1 ;
  6994F                        // 4 Enable SYSCLKOUT to EPWM5
  6995F  Uint16 EPWM6ENCLK : 1 ;
  6996F                        // 5 Enable SYSCLKOUT to EPWM6
  6997F  Uint16 rsvd1 : 2 ;
  6998F                   // 7:6 reserved
  6999F  Uint16 ECAP1ENCLK : 1 ;
  7000F                        // 8 Enable SYSCLKOUT to ECAP1
  7001F  Uint16 ECAP2ENCLK : 1 ;
  7002F                        // 9 Enable SYSCLKOUT to ECAP2
  7003F  Uint16 ECAP3ENCLK : 1 ;
  7004F                        // 10 Enable SYSCLKOUT to ECAP3
  7005F  Uint16 ECAP4ENCLK : 1 ;
  7006F                        // 11 Enable SYSCLKOUT to ECAP4
  7007F  Uint16 ECAP5ENCLK : 1 ;
  7008F                        // 12 Enable SYSCLKOUT to ECAP5
  7009F  Uint16 ECAP6ENCLK : 1 ;
  7010F                        // 13 Enable SYSCLKOUT to ECAP6
  7011F  Uint16 EQEP1ENCLK : 1 ;
  7012F                        // 14 Enable SYSCLKOUT to EQEP1
  7013F  Uint16 EQEP2ENCLK : 1 ;
  7014F                        // 15 Enable SYSCLKOUT to EQEP2
  7015F} PCLKCR1_BITS ;
  7016F
  7017Ftypedef
  7018Funion PCLKCR1_REG
  7019F{
  7020F  Uint16 all ;
  7021F  struct PCLKCR1_BITS bit ;
  7022F} PCLKCR1_REG ;
  7023F// Peripheral clock control register 2 bit definitions:
  7024F
  7025Ftypedef
  7026Fstruct PCLKCR3_BITS
  7027F{                             // bits description
  7028F  Uint16 rsvd1 : 8 ;
  7029F                   // 7:0 reserved
  7030F  Uint16 CPUTIMER0ENCLK : 1 ;
  7031F                            // 8 Enable SYSCLKOUT to CPU-Timer 0
  7032F  Uint16 CPUTIMER1ENCLK : 1 ;
  7033F                            // 9 Enable SYSCLKOUT to CPU-Timer 1
  7034F  Uint16 CPUTIMER2ENCLK : 1 ;
  7035F                            // 10 Enable SYSCLKOUT to CPU-Timer 2
  7036F  Uint16 DMAENCLK : 1 ;
  7037F                      // 11 Enable the DMA clock
  7038F  Uint16 XINTFENCLK : 1 ;
  7039F                        // 12 Enable SYSCLKOUT to XINTF
  7040F  Uint16 GPIOINENCLK : 1 ;
  7041F                         // Enable GPIO input clock
  7042F  Uint16 rsvd2 : 2 ;
  7043F                   // 15:14 reserved
  7044F} PCLKCR3_BITS ;
  7045F
  7046Ftypedef
  7047Funion PCLKCR3_REG
  7048F{
  7049F  Uint16 all ;
  7050F  struct PCLKCR3_BITS bit ;
  7051F} PCLKCR3_REG ;
  7052F// PLL control register bit definitions:
  7053F
  7054Ftypedef
  7055Fstruct PLLCR_BITS
  7056F{                           // bits description
  7057F  Uint16 DIV : 4 ;
  7058F                 // 3:0 Set clock ratio for the PLL
  7059F  Uint16 rsvd1 : 12 ;
  7060F                    // 15:4 reserved
  7061F} PLLCR_BITS ;
  7062F
  7063Ftypedef
  7064Funion PLLCR_REG
  7065F{
  7066F  Uint16 all ;
  7067F  struct PLLCR_BITS bit ;
  7068F} PLLCR_REG ;
  7069F// Low Power Mode 0 control register bit definitions:
  7070F
  7071Ftypedef
  7072Fstruct LPMCR0_BITS
  7073F{                            // bits description
  7074F  Uint16 LPM : 2 ;
  7075F                 // 1:0 Set the low power mode
  7076F  Uint16 QUALSTDBY : 6 ;
  7077F                       // 7:2 Qualification
  7078F  Uint16 rsvd1 : 7 ;
  7079F                   // 14:8 reserved
  7080F  Uint16 WDINTE : 1 ;
  7081F                    // 15 Enables WD to wake the device from STANDBY
  7082F} LPMCR0_BITS ;
  7083F
  7084Ftypedef
  7085Funion LPMCR0_REG
  7086F{
  7087F  Uint16 all ;
  7088F  struct LPMCR0_BITS bit ;
  7089F} LPMCR0_REG ;
  7090F// Dual-mapping configuration register bit definitions:
  7091F
  7092Ftypedef
  7093Fstruct MAPCNF_BITS
  7094F{                            // bits description
  7095F  Uint16 MAPEPWM : 1 ;// 0 EPWM dual-map enable
  7096F  Uint16 rsvd1 : 15 ;// 15:1 reserved
  7097F} MAPCNF_BITS ;
  7098F
  7099Ftypedef
  7100Funion MAPCNF_REG
  7101F{
  7102F  Uint16 all ;
  7103F  struct MAPCNF_BITS bit ;
  7104F} MAPCNF_REG ;
  7105F//---------------------------------------------------------------------------
  7106F// System Control Register File:
  7107F//
  7108F
  7109Ftypedef
  7110Fstruct SYS_CTRL_REGS
  7111F{
  7112F  Uint16 rsvd1 ; // 0
  7113F  union PLLSTS_REG PLLSTS ; // 1
  7114F  Uint16 rsvd2 [ 8 ] ;
  7115F                    // 2-9
  7116F  union HISPCP_REG HISPCP ; // 10: High-speed peripheral clock pre-scaler
  7117F  union LOSPCP_REG LOSPCP ; // 11: Low-speed peripheral clock pre-scaler
  7118F  union PCLKCR0_REG PCLKCR0 ; // 12: Peripheral clock control register
  7119F  union PCLKCR1_REG PCLKCR1 ; // 13: Peripheral clock control register
  7120F  union LPMCR0_REG LPMCR0 ; // 14: Low-power mode control register 0
  7121F  Uint16 rsvd3 ; // 15: reserved
  7122F  union PCLKCR3_REG PCLKCR3 ; // 16: Peripheral clock control register
  7123F  union PLLCR_REG PLLCR ;
  7124F                          // 17: PLL control register
  7125F   // No bit definitions are defined for SCSR because
  7126F   // a read-modify-write instruction can clear the WDOVERRIDE bit
  7127F  Uint16 SCSR ; // 18: System control and status register
  7128F  Uint16 WDCNTR ; // 19: WD counter register
  7129F  Uint16 rsvd4 ; // 20
  7130F  Uint16 WDKEY ; // 21: WD reset key register
  7131F  Uint16 rsvd5 [ 3 ] ;
  7132F                    // 22-24
  7133F   // No bit definitions are defined for WDCR because
  7134F   // the proper value must be written to the WDCHK field
  7135F   // whenever writing to this register.
  7136F  Uint16 WDCR ; // 25: WD timer control register
  7137F  Uint16 rsvd6 [ 4 ] ;
  7138F                    // 26-29
  7139F  union MAPCNF_REG MAPCNF ; // 30: Dual-mapping configuration register
  7140F  Uint16 rsvd7 [ 1 ] ;
  7141F                    // 31
  7142F} SYS_CTRL_REGS ;
  7143F/* --------------------------------------------------- */
  7144F/* CSM Registers */
  7145F/* */
  7146F/* ----------------------------------------------------*/
  7147F/* CSM Status & Control register bit definitions */
  7148F
  7149Ftypedef
  7150Fstruct CSMSCR_BITS
  7151F{                            // bit description
  7152F  Uint16 SECURE : 1 ;
  7153F                    // 0 Secure flag
  7154F  Uint16 rsvd1 : 14 ;
  7155F                    // 14-1 reserved
  7156F  Uint16 FORCESEC : 1 ;
  7157F                      // 15 Force Secure control bit
  7158F} CSMSCR_BITS ;
  7159F/* Allow access to the bit fields or entire register */
  7160F
  7161Ftypedef
  7162Funion CSMSCR_REG
  7163F{
  7164F  Uint16 all ;
  7165F  struct CSMSCR_BITS bit ;
  7166F} CSMSCR_REG ;
  7167F/* CSM Register File */
  7168F
  7169Ftypedef
  7170Fstruct CSM_REGS
  7171F{
  7172F  Uint16 KEY0 ; // KEY reg bits 15-0
  7173F  Uint16 KEY1 ; // KEY reg bits 31-16
  7174F  Uint16 KEY2 ; // KEY reg bits 47-32
  7175F  Uint16 KEY3 ; // KEY reg bits 63-48
  7176F  Uint16 KEY4 ; // KEY reg bits 79-64
  7177F  Uint16 KEY5 ; // KEY reg bits 95-80
  7178F  Uint16 KEY6 ; // KEY reg bits 111-96
  7179F  Uint16 KEY7 ; // KEY reg bits 127-112
  7180F  Uint16 rsvd1 ; // reserved
  7181F  Uint16 rsvd2 ; // reserved
  7182F  Uint16 rsvd3 ; // reserved
  7183F  Uint16 rsvd4 ; // reserved
  7184F  Uint16 rsvd5 ; // reserved
  7185F  Uint16 rsvd6 ; // reserved
  7186F  Uint16 rsvd7 ; // reserved
  7187F  union CSMSCR_REG CSMSCR ; // CSM Status & Control register
  7188F} CSM_REGS ;
  7189F/* Password locations */
  7190F
  7191Ftypedef
  7192Fstruct CSM_PWL
  7193F{
  7194F  Uint16 PSWD0 ; // PSWD bits 15-0
  7195F  Uint16 PSWD1 ; // PSWD bits 31-16
  7196F  Uint16 PSWD2 ; // PSWD bits 47-32
  7197F  Uint16 PSWD3 ; // PSWD bits 63-48
  7198F  Uint16 PSWD4 ; // PSWD bits 79-64
  7199F  Uint16 PSWD5 ; // PSWD bits 95-80
  7200F  Uint16 PSWD6 ; // PSWD bits 111-96
  7201F  Uint16 PSWD7 ; // PSWD bits 127-112
  7202F} CSM_PWL ;
  7203F/* Flash Registers */
  7204F#define FLASH_SLEEP 0x0000 ;
  7205F#define FLASH_STANDBY 0x0001 ;
  7206F#define FLASH_ACTIVE 0x0003 ;
  7207F/* Flash Option Register bit definitions */
  7208F
  7209Ftypedef
  7210Fstruct FOPT_BITS
  7211F{                          // bit description
  7212F  Uint16 ENPIPE : 1 ;
  7213F                    // 0 Enable Pipeline Mode
  7214F  Uint16 rsvd : 15 ;
  7215F                   // 1-15 reserved
  7216F} FOPT_BITS ;
  7217F/* Allow access to the bit fields or entire register */
  7218F
  7219Ftypedef
  7220Funion FOPT_REG
  7221F{
  7222F  Uint16 all ;
  7223F  struct FOPT_BITS bit ;
  7224F} FOPT_REG ;
  7225F/* Flash Power Modes Register bit definitions */
  7226F
  7227Ftypedef
  7228Fstruct FPWR_BITS
  7229F{                          // bit description
  7230F  Uint16 PWR : 2 ;
  7231F                 // 0-1 Power Mode bits
  7232F  Uint16 rsvd : 14 ;
  7233F                   // 2-15 reserved
  7234F} FPWR_BITS ;
  7235F/* Allow access to the bit fields or entire register */
  7236F
  7237Ftypedef
  7238Funion FPWR_REG
  7239F{
  7240F  Uint16 all ;
  7241F  struct FPWR_BITS bit ;
  7242F} FPWR_REG ;
  7243F/* Flash Status Register bit definitions */
  7244F
  7245Ftypedef
  7246Fstruct FSTATUS_BITS
  7247F{                             // bit description
  7248F  Uint16 PWRS : 2 ;
  7249F                  // 0-1 Power Mode Status bits
  7250F  Uint16 STDBYWAITS : 1 ;
  7251F                        // 2 Bank/Pump Sleep to Standby Wait Counter Status bits
  7252F  Uint16 ACTIVEWAITS : 1 ;
  7253F                         // 3 Bank/Pump Standby to Active Wait Counter Status bits
  7254F  Uint16 rsvd1 : 4 ;
  7255F                   // 4-7 reserved
  7256F  Uint16 V3STAT : 1 ;
  7257F                    // 8 VDD3V Status Latch bit
  7258F  Uint16 rsvd2 : 7 ;
  7259F                   // 9-15 reserved
  7260F} FSTATUS_BITS ;
  7261F/* Allow access to the bit fields or entire register */
  7262F
  7263Ftypedef
  7264Funion FSTATUS_REG
  7265F{
  7266F  Uint16 all ;
  7267F  struct FSTATUS_BITS bit ;
  7268F} FSTATUS_REG ;
  7269F/* Flash Sleep to Standby Wait Counter Register bit definitions */
  7270F
  7271Ftypedef
  7272Fstruct FSTDBYWAIT_BITS
  7273F{                                // bit description
  7274F  Uint16 STDBYWAIT : 9 ;
  7275F                       // 0-8 Bank/Pump Sleep to Standby Wait Count bits
  7276F  Uint16 rsvd : 7 ;
  7277F                  // 9-15 reserved
  7278F} FSTDBYWAIT_BITS ;
  7279F/* Allow access to the bit fields or entire register */
  7280F
  7281Ftypedef
  7282Funion FSTDBYWAIT_REG
  7283F{
  7284F  Uint16 all ;
  7285F  struct FSTDBYWAIT_BITS bit ;
  7286F} FSTDBYWAIT_REG ;
  7287F/* Flash Standby to Active Wait Counter Register bit definitions */
  7288F
  7289Ftypedef
  7290Fstruct FACTIVEWAIT_BITS
  7291F{                                 // bit description
  7292F  Uint16 ACTIVEWAIT : 9 ;
  7293F                        // 0-8 Bank/Pump Standby to Active Wait Count bits
  7294F  Uint16 rsvd : 7 ;
  7295F                  // 9-15 reserved
  7296F} FACTIVEWAIT_BITS ;
  7297F/* Allow access to the bit fields or entire register */
  7298F
  7299Ftypedef
  7300Funion FACTIVEWAIT_REG
  7301F{
  7302F  Uint16 all ;
  7303F  struct FACTIVEWAIT_BITS bit ;
  7304F} FACTIVEWAIT_REG ;
  7305F/* Bank Read Access Wait State Register bit definitions */
  7306F
  7307Ftypedef
  7308Fstruct FBANKWAIT_BITS
  7309F{                               // bit description
  7310F  Uint16 RANDWAIT : 4 ;
  7311F                      // 0-3 Flash Random Read Wait State bits
  7312F  Uint16 rsvd1 : 4 ;
  7313F                   // 4-7 reserved
  7314F  Uint16 PAGEWAIT : 4 ;
  7315F                      // 8-11 Flash Paged Read Wait State bits
  7316F  Uint16 rsvd2 : 4 ;
  7317F                   // 12-15 reserved
  7318F} FBANKWAIT_BITS ;
  7319F/* Allow access to the bit fields or entire register */
  7320F
  7321Ftypedef
  7322Funion FBANKWAIT_REG
  7323F{
  7324F  Uint16 all ;
  7325F  struct FBANKWAIT_BITS bit ;
  7326F} FBANKWAIT_REG ;
  7327F/* OTP Read Access Wait State Register bit definitions */
  7328F
  7329Ftypedef
  7330Fstruct FOTPWAIT_BITS
  7331F{                              // bit description
  7332F  Uint16 OTPWAIT : 5 ;
  7333F                     // 0-4 OTP Read Wait State bits
  7334F  Uint16 rsvd : 11 ;
  7335F                   // 5-15 reserved
  7336F} FOTPWAIT_BITS ;
  7337F/* Allow access to the bit fields or entire register */
  7338F
  7339Ftypedef
  7340Funion FOTPWAIT_REG
  7341F{
  7342F  Uint16 all ;
  7343F  struct FOTPWAIT_BITS bit ;
  7344F} FOTPWAIT_REG ;
  7345F
  7346Ftypedef
  7347Fstruct FLASH_REGS
  7348F{
  7349F  union FOPT_REG FOPT ; // Option Register
  7350F  Uint16 rsvd1 ; // reserved
  7351F  union FPWR_REG FPWR ; // Power Modes Register
  7352F  union FSTATUS_REG FSTATUS ; // Status Register
  7353F  union FSTDBYWAIT_REG FSTDBYWAIT ; // Pump/Bank Sleep to Standby Wait State Register
  7354F  union FACTIVEWAIT_REG FACTIVEWAIT ; // Pump/Bank Standby to Active Wait State Register
  7355F  union FBANKWAIT_REG FBANKWAIT ; // Bank Read Access Wait State Register
  7356F  union FOTPWAIT_REG FOTPWAIT ; // OTP Read Access Wait State Register
  7357F} FLASH_REGS ;
  7358F//---------------------------------------------------------------------------
  7359F// System Control External References & Function Declarations:
  7360F//
  7361F
  7362Fextern volatile struct SYS_CTRL_REGS
  7363F  SysCtrlRegs ;
  7364F
  7365Fextern volatile struct CSM_REGS
  7366F  CsmRegs ;
  7367F
  7368Fextern volatile struct CSM_PWL
  7369F  CsmPwl ;
  7370F
  7371Fextern volatile struct FLASH_REGS
  7372F  FlashRegs ;
  7373F       // end of DSP2833x_SYS_CTRL_H definition
  7374F//===========================================================================
  7375F// End of file.
  7376F//===========================================================================
  7377F 
  7378F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_SysCtrl.h*/
  7379F/*   CLOSE_FILE Include File */
  7380F 
  7381F            // System Control/Power Modes
  7382F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_XIntrupt.h */
  7383F// TI File $Revision: /main/1 $
  7384F// Checkin $Date: August 18, 2006 13:52:39 $
  7385F//###########################################################################
  7386F//
  7387F// FILE: DSP2833x_XIntrupt.h
  7388F//
  7389F// TITLE: DSP2833x Device External Interrupt Register Definitions.
  7390F//
  7391F//###########################################################################
  7392F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  7393F// $Release Date: August 4, 2009 $
  7394F//###########################################################################
  7395F#ifndef DSP2833x_XINTRUPT_H
  7396F#define DSP2833x_XINTRUPT_H
  7397F//---------------------------------------------------------------------------
  7398F
  7399Fstruct XINTCR_BITS
  7400F{
  7401F  Uint16 ENABLE : 1 ;// 0 enable/disable
  7402F  Uint16 rsvd1 : 1 ;// 1 reserved
  7403F  Uint16 POLARITY : 2 ;// 3:2 pos/neg, both triggered
  7404F  Uint16 rsvd2 : 12 ;//15:4 reserved
  7405F} ;
  7406F
  7407Funion XINTCR_REG
  7408F{
  7409F  Uint16 all ;
  7410F  struct XINTCR_BITS bit ;
  7411F} ;
  7412F
  7413Fstruct XNMICR_BITS
  7414F{
  7415F  Uint16 ENABLE : 1 ;// 0 enable/disable
  7416F  Uint16 SELECT : 1 ;// 1 Timer 1 or XNMI connected to int13
  7417F  Uint16 POLARITY : 2 ;// 3:2 pos/neg, or both triggered
  7418F  Uint16 rsvd2 : 12 ;// 15:4 reserved
  7419F} ;
  7420F
  7421Funion XNMICR_REG
  7422F{
  7423F  Uint16 all ;
  7424F  struct XNMICR_BITS bit ;
  7425F} ;
  7426F//---------------------------------------------------------------------------
  7427F// External Interrupt Register File:
  7428F//
  7429F
  7430Fstruct XINTRUPT_REGS
  7431F{
  7432F  union XINTCR_REG XINT1CR ;
  7433F  union XINTCR_REG XINT2CR ;
  7434F  union XINTCR_REG XINT3CR ;
  7435F  union XINTCR_REG XINT4CR ;
  7436F  union XINTCR_REG XINT5CR ;
  7437F  union XINTCR_REG XINT6CR ;
  7438F  union XINTCR_REG XINT7CR ;
  7439F  union XNMICR_REG XNMICR ;
  7440F  Uint16 XINT1CTR ;
  7441F  Uint16 XINT2CTR ;
  7442F  Uint16 rsvd [ 5 ] ;
  7443F  Uint16 XNMICTR ;
  7444F} ;
  7445F//---------------------------------------------------------------------------
  7446F// External Interrupt References & Function Declarations:
  7447F//
  7448F
  7449Fextern volatile struct XINTRUPT_REGS
  7450F  XIntruptRegs ;
  7451F       /* extern "C" */
  7452F       // end of DSP2833x_XINTF_H definition
  7453F//===========================================================================
  7454F// End of file.
  7455F//===========================================================================
  7456F 
  7457F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_XIntrupt.h*/
  7458F/*   CLOSE_FILE Include File */
  7459F 
  7460F           // External Interrupts
  7461F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Xintf.h */
  7462F// TI File $Revision: /main/4 $
  7463F// Checkin $Date: July 27, 2009 13:57:25 $
  7464F//###########################################################################
  7465F//
  7466F// FILE: DSP2833x_Xintf.h
  7467F//
  7468F// TITLE: DSP2833x Device External Interface Register Definitions.
  7469F//
  7470F//###########################################################################
  7471F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  7472F// $Release Date: August 4, 2009 $
  7473F//###########################################################################
  7474F#ifndef DSP2833x_XINTF_H
  7475F#define DSP2833x_XINTF_H
  7476F// XINTF timing register bit definitions:
  7477F
  7478Fstruct XTIMING_BITS
  7479F{                     // bits description
  7480F  Uint16 XWRTRAIL : 2 ;
  7481F                      // 1:0 Write access trail timing
  7482F  Uint16 XWRACTIVE : 3 ;
  7483F                       // 4:2 Write access active timing
  7484F  Uint16 XWRLEAD : 2 ;
  7485F                     // 6:5 Write access lead timing
  7486F  Uint16 XRDTRAIL : 2 ;
  7487F                      // 8:7 Read access trail timing
  7488F  Uint16 XRDACTIVE : 3 ;
  7489F                       // 11:9 Read access active timing
  7490F  Uint16 XRDLEAD : 2 ;
  7491F                     // 13:12 Read access lead timing
  7492F  Uint16 USEREADY : 1 ;
  7493F                      // 14 Extend access using HW waitstates
  7494F  Uint16 READYMODE : 1 ;
  7495F                       // 15 Ready mode
  7496F  Uint16 XSIZE : 2 ;
  7497F                   // 17:16 XINTF bus width - must be written as 11b
  7498F  Uint16 rsvd1 : 4 ;
  7499F                   // 21:18 reserved
  7500F  Uint16 X2TIMING : 1 ;
  7501F                      // 22 Double lead/active/trail timing
  7502F  Uint16 rsvd3 : 9 ;
  7503F                   // 31:23 reserved
  7504F} ;
  7505F
  7506Funion XTIMING_REG
  7507F{
  7508F  Uint32 all ;
  7509F  struct XTIMING_BITS bit ;
  7510F} ;
  7511F// XINTF control register bit definitions:
  7512F
  7513Fstruct XINTCNF2_BITS
  7514F{                      // bits description
  7515F  Uint16 WRBUFF : 2 ;
  7516F                    // 1:0 Write buffer depth
  7517F  Uint16 CLKMODE : 1 ;
  7518F                     // 2 Ratio for XCLKOUT with respect to XTIMCLK
  7519F  Uint16 CLKOFF : 1 ;
  7520F                    // 3 Disable XCLKOUT
  7521F  Uint16 rsvd1 : 2 ;
  7522F                   // 5:4 reserved
  7523F  Uint16 WLEVEL : 2 ;
  7524F                    // 7:6 Current level of the write buffer
  7525F  Uint16 rsvd2 : 1 ;
  7526F                   // 8 reserved
  7527F  Uint16 HOLD : 1 ;
  7528F                  // 9 Hold enable/disable
  7529F  Uint16 HOLDS : 1 ;
  7530F                   // 10 Current state of HOLDn input
  7531F  Uint16 HOLDAS : 1 ;
  7532F                    // 11 Current state of HOLDAn output
  7533F  Uint16 rsvd3 : 4 ;
  7534F                   // 15:12 reserved
  7535F  Uint16 XTIMCLK : 3 ;
  7536F                     // 18:16 Ratio for XTIMCLK
  7537F  Uint16 rsvd4 : 13 ;
  7538F                    // 31:19 reserved
  7539F} ;
  7540F
  7541Funion XINTCNF2_REG
  7542F{
  7543F  Uint32 all ;
  7544F  struct XINTCNF2_BITS bit ;
  7545F} ;
  7546F// XINTF bank switching register bit definitions:
  7547F
  7548Fstruct XBANK_BITS
  7549F{                   // bits description
  7550F  Uint16 BANK : 3 ;
  7551F                  // 2:0 Zone for which banking is enabled
  7552F  Uint16 BCYC : 3 ;
  7553F                  // 5:3 XTIMCLK cycles to add
  7554F  Uint16 rsvd : 10 ;
  7555F                   // 15:6 reserved
  7556F} ;
  7557F
  7558Funion XBANK_REG
  7559F{
  7560F  Uint16 all ;
  7561F  struct XBANK_BITS bit ;
  7562F} ;
  7563F
  7564Fstruct XRESET_BITS
  7565F{
  7566F  Uint16 XHARDRESET : 1 ;
  7567F  Uint16 rsvd1 : 15 ;
  7568F} ;
  7569F
  7570Funion XRESET_REG
  7571F{
  7572F  Uint16 all ;
  7573F  struct XRESET_BITS bit ;
  7574F} ;
  7575F//---------------------------------------------------------------------------
  7576F// XINTF Register File:
  7577F//
  7578F
  7579Fstruct XINTF_REGS
  7580F{
  7581F  union XTIMING_REG XTIMING0 ;
  7582F  Uint32 rsvd1 [ 5 ] ;
  7583F  union XTIMING_REG XTIMING6 ;
  7584F  union XTIMING_REG XTIMING7 ;
  7585F  Uint32 rsvd2 [ 2 ] ;
  7586F  union XINTCNF2_REG XINTCNF2 ;
  7587F  Uint32 rsvd3 ;
  7588F  union XBANK_REG XBANK ;
  7589F  Uint16 rsvd4 ;
  7590F  Uint16 XREVISION ;
  7591F  Uint16 rsvd5 [ 2 ] ;
  7592F  union XRESET_REG XRESET ;
  7593F} ;
  7594F//---------------------------------------------------------------------------
  7595F// XINTF External References & Function Declarations:
  7596F//
  7597F
  7598Fextern volatile struct XINTF_REGS
  7599F  XintfRegs ;
  7600F       /* extern "C" */
  7601F       // end of DSP2833x_XINTF_H definition
  7602F//===========================================================================
  7603F// No more.
  7604F//===========================================================================
  7605F 
  7606F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Xintf.h*/
  7607F/*   CLOSE_FILE Include File */
  7608F 
  7609F              // XINTF External Interface
  7610F#define DSP28_EPWM1 1
  7611F#define DSP28_EPWM2 1
  7612F#define DSP28_EPWM3 1
  7613F#define DSP28_EPWM4 1
  7614F#define DSP28_EPWM5 1
  7615F#define DSP28_EPWM6 1
  7616F#define DSP28_ECAP1 1
  7617F#define DSP28_ECAP2 1
  7618F#define DSP28_ECAP3 1
  7619F#define DSP28_ECAP4 1
  7620F#define DSP28_ECAP5 1
  7621F#define DSP28_ECAP6 1
  7622F#define DSP28_EQEP1 1
  7623F#define DSP28_EQEP2 1
  7624F#define DSP28_ECANA 1
  7625F#define DSP28_ECANB 1
  7626F#define DSP28_MCBSPA 1
  7627F#define DSP28_MCBSPB 1
  7628F#define DSP28_SPIA 1
  7629F#define DSP28_SCIA 1
  7630F#define DSP28_SCIB 1
  7631F#define DSP28_SCIC 1
  7632F#define DSP28_I2CA 1
  7633F       // end DSP28_28335
  7634F       // end DSP28_28334
  7635F       // end DSP28_28332
  7636F       /* extern "C" */
  7637F       // end of DSP2833x_DEVICE_H definition
  7638F//===========================================================================
  7639F// End of file.
  7640F//===========================================================================
  7641F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Device.h*/
  7642F/*   CLOSE_FILE Include File */
  7643F 
  7644F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Examples.h */
  7645F// TI File $Revision: /main/9 $
  7646F// Checkin $Date: July 2, 2008 14:31:12 $
  7647F//###########################################################################
  7648F//
  7649F// FILE: DSP2833x_Examples.h
  7650F//
  7651F// TITLE: DSP2833x Device Definitions.
  7652F//
  7653F//###########################################################################
  7654F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  7655F// $Release Date: August 4, 2009 $
  7656F//###########################################################################
  7657F#ifndef DSP2833x_EXAMPLES_H
  7658F#define DSP2833x_EXAMPLES_H
  7659F/*-----------------------------------------------------------------------------
  7660F      Specify the PLL control register (PLLCR) and divide select (DIVSEL) value.
  7661F-----------------------------------------------------------------------------*/
  7662F//#define DSP28_DIVSEL 0 // Enable /4 for SYSCLKOUT
  7663F//#define DSP28_DIVSEL 1 // Enable /4 for SYSCKOUT
  7664F#define DSP28_DIVSEL 2
  7665F//#define DSP28_DIVSEL 3 // Enable /1 for SYSCLKOUT
  7666F#define DSP28_PLLCR 10
  7667F//#define DSP28_PLLCR 9
  7668F//#define DSP28_PLLCR 8
  7669F//#define DSP28_PLLCR 7
  7670F//#define DSP28_PLLCR 6
  7671F//#define DSP28_PLLCR 5
  7672F//#define DSP28_PLLCR 4
  7673F//#define DSP28_PLLCR 3
  7674F//#define DSP28_PLLCR 2
  7675F//#define DSP28_PLLCR 1
  7676F//#define DSP28_PLLCR 0 // PLL is bypassed in this mode
  7677F//----------------------------------------------------------------------------
  7678F/*-----------------------------------------------------------------------------
  7679F      Specify the clock rate of the CPU (SYSCLKOUT) in nS.
  7680F      Take into account the input clock frequency and the PLL multiplier
  7681F      selected in step 1.
  7682F      Use one of the values provided, or define your own.
  7683F      The trailing L is required tells the compiler to treat
  7684F      the number as a 64-bit value.
  7685F      Only one statement should be uncommented.
  7686F      Example 1:150 MHz devices:
  7687F                CLKIN is a 30MHz crystal.
  7688F                In step 1 the user specified PLLCR = 0xA for a
  7689F                150Mhz CPU clock (SYSCLKOUT = 150MHz).
  7690F                In this case, the CPU_RATE will be 6.667L
  7691F                Uncomment the line: #define CPU_RATE 6.667L
  7692F      Example 2: 100 MHz devices:
  7693F                  CLKIN is a 20MHz crystal.
  7694F                      In step 1 the user specified PLLCR = 0xA for a
  7695F                      100Mhz CPU clock (SYSCLKOUT = 100MHz).
  7696F                      In this case, the CPU_RATE will be 10.000L
  7697F                  Uncomment the line: #define CPU_RATE 10.000L
  7698F-----------------------------------------------------------------------------*/
  7699F#define CPU_RATE 6.667L
  7700F//#define CPU_RATE 7.143L // for a 140MHz CPU clock speed (SYSCLKOUT)
  7701F//#define CPU_RATE 8.333L // for a 120MHz CPU clock speed (SYSCLKOUT)
  7702F//#define CPU_RATE 10.000L // for a 100MHz CPU clock speed (SYSCLKOUT)
  7703F//#define CPU_RATE 13.330L // for a 75MHz CPU clock speed (SYSCLKOUT)
  7704F//#define CPU_RATE 20.000L // for a 50MHz CPU clock speed (SYSCLKOUT)
  7705F//#define CPU_RATE 33.333L // for a 30MHz CPU clock speed (SYSCLKOUT)
  7706F//#define CPU_RATE 41.667L // for a 24MHz CPU clock speed (SYSCLKOUT)
  7707F//#define CPU_RATE 50.000L // for a 20MHz CPU clock speed (SYSCLKOUT)
  7708F//#define CPU_RATE 66.667L // for a 15MHz CPU clock speed (SYSCLKOUT)
  7709F//#define CPU_RATE 100.000L // for a 10MHz CPU clock speed (SYSCLKOUT)
  7710F//----------------------------------------------------------------------------
  7711F/*-----------------------------------------------------------------------------
  7712F      Target device (in DSP2833x_Device.h) determines CPU frequency
  7713F      (for examples) - either 150 MHz (for 28335 and 28334) or 100 MHz
  7714F      (for 28332). User does not have to change anything here.
  7715F-----------------------------------------------------------------------------*/
  7716F#define CPU_FRQ_100MHZ 0
  7717F#define CPU_FRQ_150MHZ 1
  7718F//---------------------------------------------------------------------------
  7719F// Include Example Header Files:
  7720F//
  7721F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_GlobalPrototypes.h */
  7722F// TI File $Revision: /main/11 $
  7723F// Checkin $Date: May 12, 2008 14:30:08 $
  7724F//###########################################################################
  7725F//
  7726F// FILE: DSP2833x_GlobalPrototypes.h
  7727F//
  7728F// TITLE: Global prototypes for DSP2833x Examples
  7729F//
  7730F//###########################################################################
  7731F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  7732F// $Release Date: August 4, 2009 $
  7733F//###########################################################################
  7734F#ifndef DSP2833x_GLOBALPROTOTYPES_H
  7735F#define DSP2833x_GLOBALPROTOTYPES_H
  7736F/*---- shared global function prototypes -----------------------------------*/
  7737F
  7738Fextern void
  7739F  InitAdc ( void ) ;
  7740F
  7741Fextern void
  7742F  DMAInitialize ( void ) ;
  7743F// DMA Channel 1
  7744F
  7745Fextern void
  7746T  DMACH1AddrConfig (
  7747F  volatile Uint16 * DMA_Dest ,
  7748F  volatile Uint16 * DMA_Source ) ;
  7749F
  7750Fextern void
  7751T  DMACH1BurstConfig (
  7752F  Uint16 bsize ,
  7753F  int16 srcbstep ,
  7754F  int16 desbstep ) ;
  7755F
  7756Fextern void
  7757T  DMACH1TransferConfig (
  7758F  Uint16 tsize ,
  7759F  int16 srctstep ,
  7760F  int16 deststep ) ;
  7761F
  7762Fextern void
  7763T  DMACH1WrapConfig (
  7764F  Uint16 srcwsize ,
  7765F  int16 srcwstep ,
  7766F  Uint16 deswsize ,
  7767F  int16 deswstep ) ;
  7768F
  7769Fextern void
  7770T  DMACH1ModeConfig (
  7771F  Uint16 persel ,
  7772F  Uint16 perinte ,
  7773F  Uint16 oneshot ,
  7774F  Uint16 cont ,
  7775F  Uint16 synce ,
  7776F  Uint16 syncsel ,
  7777F  Uint16 ovrinte ,
  7778F  Uint16 datasize ,
  7779F  Uint16 chintmode ,
  7780F  Uint16 chinte ) ;
  7781F
  7782Fextern void
  7783F  StartDMACH1 ( void ) ;
  7784F// DMA Channel 2
  7785F
  7786Fextern void
  7787T  DMACH2AddrConfig (
  7788F  volatile Uint16 * DMA_Dest ,
  7789F  volatile Uint16 * DMA_Source ) ;
  7790F
  7791Fextern void
  7792T  DMACH2BurstConfig (
  7793F  Uint16 bsize ,
  7794F  int16 srcbstep ,
  7795F  int16 desbstep ) ;
  7796F
  7797Fextern void
  7798T  DMACH2TransferConfig (
  7799F  Uint16 tsize ,
  7800F  int16 srctstep ,
  7801F  int16 deststep ) ;
  7802F
  7803Fextern void
  7804T  DMACH2WrapConfig (
  7805F  Uint16 srcwsize ,
  7806F  int16 srcwstep ,
  7807F  Uint16 deswsize ,
  7808F  int16 deswstep ) ;
  7809F
  7810Fextern void
  7811T  DMACH2ModeConfig (
  7812F  Uint16 persel ,
  7813F  Uint16 perinte ,
  7814F  Uint16 oneshot ,
  7815F  Uint16 cont ,
  7816F  Uint16 synce ,
  7817F  Uint16 syncsel ,
  7818F  Uint16 ovrinte ,
  7819F  Uint16 datasize ,
  7820F  Uint16 chintmode ,
  7821F  Uint16 chinte ) ;
  7822F
  7823Fextern void
  7824F  StartDMACH2 ( void ) ;
  7825F// DMA Channel 3
  7826F
  7827Fextern void
  7828T  DMACH3AddrConfig (
  7829F  volatile Uint16 * DMA_Dest ,
  7830F  volatile Uint16 * DMA_Source ) ;
  7831F
  7832Fextern void
  7833T  DMACH3BurstConfig (
  7834F  Uint16 bsize ,
  7835F  int16 srcbstep ,
  7836F  int16 desbstep ) ;
  7837F
  7838Fextern void
  7839T  DMACH3TransferConfig (
  7840F  Uint16 tsize ,
  7841F  int16 srctstep ,
  7842F  int16 deststep ) ;
  7843F
  7844Fextern void
  7845T  DMACH3WrapConfig (
  7846F  Uint16 srcwsize ,
  7847F  int16 srcwstep ,
  7848F  Uint16 deswsize ,
  7849F  int16 deswstep ) ;
  7850F
  7851Fextern void
  7852T  DMACH3ModeConfig (
  7853F  Uint16 persel ,
  7854F  Uint16 perinte ,
  7855F  Uint16 oneshot ,
  7856F  Uint16 cont ,
  7857F  Uint16 synce ,
  7858F  Uint16 syncsel ,
  7859F  Uint16 ovrinte ,
  7860F  Uint16 datasize ,
  7861F  Uint16 chintmode ,
  7862F  Uint16 chinte ) ;
  7863F
  7864Fextern void
  7865F  StartDMACH3 ( void ) ;
  7866F// DMA Channel 4
  7867F
  7868Fextern void
  7869T  DMACH4AddrConfig (
  7870F  volatile Uint16 * DMA_Dest ,
  7871F  volatile Uint16 * DMA_Source ) ;
  7872F
  7873Fextern void
  7874T  DMACH4BurstConfig (
  7875F  Uint16 bsize ,
  7876F  int16 srcbstep ,
  7877F  int16 desbstep ) ;
  7878F
  7879Fextern void
  7880T  DMACH4TransferConfig (
  7881F  Uint16 tsize ,
  7882F  int16 srctstep ,
  7883F  int16 deststep ) ;
  7884F
  7885Fextern void
  7886T  DMACH4WrapConfig (
  7887F  Uint16 srcwsize ,
  7888F  int16 srcwstep ,
  7889F  Uint16 deswsize ,
  7890F  int16 deswstep ) ;
  7891F
  7892Fextern void
  7893T  DMACH4ModeConfig (
  7894F  Uint16 persel ,
  7895F  Uint16 perinte ,
  7896F  Uint16 oneshot ,
  7897F  Uint16 cont ,
  7898F  Uint16 synce ,
  7899F  Uint16 syncsel ,
  7900F  Uint16 ovrinte ,
  7901F  Uint16 datasize ,
  7902F  Uint16 chintmode ,
  7903F  Uint16 chinte ) ;
  7904F
  7905Fextern void
  7906F  StartDMACH4 ( void ) ;
  7907F// DMA Channel 5
  7908F
  7909Fextern void
  7910T  DMACH5AddrConfig (
  7911F  volatile Uint16 * DMA_Dest ,
  7912F  volatile Uint16 * DMA_Source ) ;
  7913F
  7914Fextern void
  7915T  DMACH5BurstConfig (
  7916F  Uint16 bsize ,
  7917F  int16 srcbstep ,
  7918F  int16 desbstep ) ;
  7919F
  7920Fextern void
  7921T  DMACH5TransferConfig (
  7922F  Uint16 tsize ,
  7923F  int16 srctstep ,
  7924F  int16 deststep ) ;
  7925F
  7926Fextern void
  7927T  DMACH5WrapConfig (
  7928F  Uint16 srcwsize ,
  7929F  int16 srcwstep ,
  7930F  Uint16 deswsize ,
  7931F  int16 deswstep ) ;
  7932F
  7933Fextern void
  7934T  DMACH5ModeConfig (
  7935F  Uint16 persel ,
  7936F  Uint16 perinte ,
  7937F  Uint16 oneshot ,
  7938F  Uint16 cont ,
  7939F  Uint16 synce ,
  7940F  Uint16 syncsel ,
  7941F  Uint16 ovrinte ,
  7942F  Uint16 datasize ,
  7943F  Uint16 chintmode ,
  7944F  Uint16 chinte ) ;
  7945F
  7946Fextern void
  7947F  StartDMACH5 ( void ) ;
  7948F// DMA Channel 6
  7949F
  7950Fextern void
  7951T  DMACH6AddrConfig (
  7952F  volatile Uint16 * DMA_Dest ,
  7953F  volatile Uint16 * DMA_Source ) ;
  7954F
  7955Fextern void
  7956T  DMACH6BurstConfig (
  7957F  Uint16 bsize ,
  7958F  Uint16 srcbstep ,
  7959F  int16 desbstep ) ;
  7960F
  7961Fextern void
  7962T  DMACH6TransferConfig (
  7963F  Uint16 tsize ,
  7964F  int16 srctstep ,
  7965F  int16 deststep ) ;
  7966F
  7967Fextern void
  7968T  DMACH6WrapConfig (
  7969F  Uint16 srcwsize ,
  7970F  int16 srcwstep ,
  7971F  Uint16 deswsize ,
  7972F  int16 deswstep ) ;
  7973F
  7974Fextern void
  7975T  DMACH6ModeConfig (
  7976F  Uint16 persel ,
  7977F  Uint16 perinte ,
  7978F  Uint16 oneshot ,
  7979F  Uint16 cont ,
  7980F  Uint16 synce ,
  7981F  Uint16 syncsel ,
  7982F  Uint16 ovrinte ,
  7983F  Uint16 datasize ,
  7984F  Uint16 chintmode ,
  7985F  Uint16 chinte ) ;
  7986F
  7987Fextern void
  7988F  StartDMACH6 ( void ) ;
  7989F
  7990Fextern void
  7991F  InitPeripherals ( void ) ;
  7992F
  7993Fextern void
  7994F  InitECan ( void ) ;
  7995F
  7996Fextern void
  7997F  InitECana ( void ) ;
  7998F
  7999Fextern void
  8000F  InitECanGpio ( void ) ;
  8001F
  8002Fextern void
  8003F  InitECanaGpio ( void ) ;
  8004F       // endif DSP28_ECANA
  8005F
  8006Fextern void
  8007F  InitECanb ( void ) ;
  8008F
  8009Fextern void
  8010F  InitECanbGpio ( void ) ;
  8011F       // endif DSP28_ECANB
  8012F
  8013Fextern void
  8014F  InitECap ( void ) ;
  8015F
  8016Fextern void
  8017F  InitECapGpio ( void ) ;
  8018F
  8019Fextern void
  8020F  InitECap1Gpio ( void ) ;
  8021F
  8022Fextern void
  8023F  InitECap2Gpio ( void ) ;
  8024F
  8025Fextern void
  8026F  InitECap3Gpio ( void ) ;
  8027F       // endif DSP28_ECAP3
  8028F
  8029Fextern void
  8030F  InitECap4Gpio ( void ) ;
  8031F       // endif DSP28_ECAP4
  8032F
  8033Fextern void
  8034F  InitECap5Gpio ( void ) ;
  8035F       // endif DSP28_ECAP5
  8036F
  8037Fextern void
  8038F  InitECap6Gpio ( void ) ;
  8039F       // endif DSP28_ECAP6
  8040F
  8041Fextern void
  8042F  InitEPwm ( void ) ;
  8043F
  8044Fextern void
  8045F  InitEPwmGpio ( void ) ;
  8046F
  8047Fextern void
  8048F  InitEPwm1Gpio ( void ) ;
  8049F
  8050Fextern void
  8051F  InitEPwm2Gpio ( void ) ;
  8052F
  8053Fextern void
  8054F  InitEPwm3Gpio ( void ) ;
  8055F
  8056Fextern void
  8057F  InitEPwm4Gpio ( void ) ;
  8058F       // endif DSP28_EPWM4
  8059F
  8060Fextern void
  8061F  InitEPwm5Gpio ( void ) ;
  8062F       // endif DSP28_EPWM5
  8063F
  8064Fextern void
  8065F  InitEPwm6Gpio ( void ) ;
  8066F       // endif DSP28_EPWM6
  8067F
  8068Fextern void
  8069F  InitEQep ( void ) ;
  8070F
  8071Fextern void
  8072F  InitEQepGpio ( void ) ;
  8073F
  8074Fextern void
  8075F  InitEQep1Gpio ( void ) ;
  8076F       // if DSP28_EQEP1
  8077F
  8078Fextern void
  8079F  InitEQep2Gpio ( void ) ;
  8080F       // endif DSP28_EQEP2
  8081F
  8082Fextern void
  8083F  InitGpio ( void ) ;
  8084F
  8085Fextern void
  8086F  InitI2CGpio ( void ) ;
  8087F
  8088Fextern void
  8089F  InitMcbsp ( void ) ;
  8090F
  8091Fextern void
  8092F  InitMcbspa ( void ) ;
  8093F
  8094Fextern void
  8095F  delay_loop ( void ) ;
  8096F
  8097Fextern void
  8098F  InitMcbspaGpio ( void ) ;
  8099F
  8100Fextern void
  8101F  InitMcbspa8bit ( void ) ;
  8102F
  8103Fextern void
  8104F  InitMcbspa12bit ( void ) ;
  8105F
  8106Fextern void
  8107F  InitMcbspa16bit ( void ) ;
  8108F
  8109Fextern void
  8110F  InitMcbspa20bit ( void ) ;
  8111F
  8112Fextern void
  8113F  InitMcbspa24bit ( void ) ;
  8114F
  8115Fextern void
  8116F  InitMcbspa32bit ( void ) ;
  8117F
  8118Fextern void
  8119F  InitMcbspb ( void ) ;
  8120F
  8121Fextern void
  8122F  InitMcbspbGpio ( void ) ;
  8123F
  8124Fextern void
  8125F  InitMcbspb8bit ( void ) ;
  8126F
  8127Fextern void
  8128F  InitMcbspb12bit ( void ) ;
  8129F
  8130Fextern void
  8131F  InitMcbspb16bit ( void ) ;
  8132F
  8133Fextern void
  8134F  InitMcbspb20bit ( void ) ;
  8135F
  8136Fextern void
  8137F  InitMcbspb24bit ( void ) ;
  8138F
  8139Fextern void
  8140F  InitMcbspb32bit ( void ) ;
  8141F       // endif DSP28_MCBSPB
  8142F
  8143Fextern void
  8144F  InitPieCtrl ( void ) ;
  8145F
  8146Fextern void
  8147F  InitPieVectTable ( void ) ;
  8148F
  8149Fextern void
  8150F  InitSci ( void ) ;
  8151F
  8152Fextern void
  8153F  InitSciGpio ( void ) ;
  8154F
  8155Fextern void
  8156F  InitSciaGpio ( void ) ;
  8157F
  8158Fextern void
  8159F  InitScibGpio ( void ) ;
  8160F       // endif DSP28_SCIB
  8161F
  8162Fextern void
  8163F  InitScicGpio ( void ) ;
  8164F
  8165Fextern void
  8166F  InitSpi ( void ) ;
  8167F
  8168Fextern void
  8169F  InitSpiGpio ( void ) ;
  8170F
  8171Fextern void
  8172F  InitSpiaGpio ( void ) ;
  8173F
  8174Fextern void
  8175F  InitSysCtrl ( void ) ;
  8176F
  8177Fextern void
  8178F  InitTzGpio ( void ) ;
  8179F
  8180Fextern void
  8181F  InitXIntrupt ( void ) ;
  8182F
  8183Fextern void
  8184F  XintfInit ( void ) ;
  8185F
  8186Fextern void
  8187F  InitXintf16Gpio() ;
  8188F
  8189Fextern void
  8190F  InitXintf32Gpio() ;
  8191F
  8192Fextern void
  8193T  InitPll (
  8194F  Uint16 pllcr ,
  8195F  Uint16 clkindiv ) ;
  8196F
  8197Fextern void
  8198F  InitPeripheralClocks ( void ) ;
  8199F
  8200Fextern void
  8201F  EnableInterrupts ( void ) ;
  8202F
  8203Fextern void
  8204T  DSP28x_usDelay (
  8205F  Uint32 Count ) ;
  8206F
  8207Fextern void
  8208F  ADC_cal ( void ) ;
  8209F#define KickDog ServiceDog
  8210F
  8211Fextern void
  8212F  ServiceDog ( void ) ;
  8213F
  8214Fextern void
  8215F  DisableDog ( void ) ;
  8216F
  8217Fextern Uint16
  8218F  CsmUnlock ( void ) ;
  8219F// DSP28_DBGIER.asm
  8220F
  8221Fextern void
  8222T  SetDBGIER (
  8223F  Uint16 dbgier ) ;
  8224F// CAUTION
  8225F// This function MUST be executed out of RAM. Executing it
  8226F// out of OTP/Flash will yield unpredictable results
  8227F
  8228Fextern void
  8229F  InitFlash ( void ) ;
  8230F
  8231Fvoid
  8232T  MemCopy (
  8233F  Uint16 * SourceAddr ,
  8234F  Uint16 * SourceEndAddr ,
  8235F  Uint16 * DestAddr ) ;
  8236F//---------------------------------------------------------------------------
  8237F// External symbols created by the linker cmd file
  8238F// DSP28 examples will use these to relocate code from one LOAD location
  8239F// in either Flash or XINTF to a different RUN location in internal
  8240F// RAM
  8241F
  8242Fextern Uint16
  8243F  RamfuncsLoadStart ;
  8244F
  8245Fextern Uint16
  8246F  RamfuncsLoadEnd ;
  8247F
  8248Fextern Uint16
  8249F  RamfuncsRunStart ;
  8250F
  8251Fextern Uint16
  8252F  XintffuncsLoadStart ;
  8253F
  8254Fextern Uint16
  8255F  XintffuncsLoadEnd ;
  8256F
  8257Fextern Uint16
  8258F  XintffuncsRunStart ;
  8259F       /* extern "C" */
  8260F       // - end of DSP2833x_GLOBALPROTOTYPES_H
  8261F//===========================================================================
  8262F// End of file.
  8263F//===========================================================================
  8264F 
  8265F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_GlobalPrototypes.h*/
  8266F/*   CLOSE_FILE Include File */
  8267F 
  8268F         // Prototypes for global functions within the
  8269F                                              // .c files.
  8270F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ePwm_defines.h */
  8271F// TI File $Revision: /main/1 $
  8272F// Checkin $Date: August 18, 2006 13:45:39 $
  8273F//###########################################################################
  8274F//
  8275F// FILE: DSP2833x_EPwm_defines.h
  8276F//
  8277F// TITLE: #defines used in ePWM examples examples
  8278F//
  8279F//###########################################################################
  8280F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  8281F// $Release Date: August 4, 2009 $
  8282F//###########################################################################
  8283F#ifndef DSP2833x_EPWM_DEFINES_H
  8284F#define DSP2833x_EPWM_DEFINES_H
  8285F// TBCTL (Time-Base Control)
  8286F//==========================
  8287F// CTRMODE bits
  8288F#define TB_COUNT_UP 0x0
  8289F#define TB_COUNT_DOWN 0x1
  8290F#define TB_COUNT_UPDOWN 0x2
  8291F#define TB_FREEZE 0x3
  8292F// PHSEN bit
  8293F#define TB_DISABLE 0x0
  8294F#define TB_ENABLE 0x1
  8295F// PRDLD bit
  8296F#define TB_SHADOW 0x0
  8297F#define TB_IMMEDIATE 0x1
  8298F// SYNCOSEL bits
  8299F#define TB_SYNC_IN 0x0
  8300F#define TB_CTR_ZERO 0x1
  8301F#define TB_CTR_CMPB 0x2
  8302F#define TB_SYNC_DISABLE 0x3
  8303F// HSPCLKDIV and CLKDIV bits
  8304F#define TB_DIV1 0x0
  8305F#define TB_DIV2 0x1
  8306F#define TB_DIV4 0x2
  8307F// PHSDIR bit
  8308F#define TB_DOWN 0x0
  8309F#define TB_UP 0x1
  8310F// CMPCTL (Compare Control)
  8311F//==========================
  8312F// LOADAMODE and LOADBMODE bits
  8313F#define CC_CTR_ZERO 0x0
  8314F#define CC_CTR_PRD 0x1
  8315F#define CC_CTR_ZERO_PRD 0x2
  8316F#define CC_LD_DISABLE 0x3
  8317F// SHDWAMODE and SHDWBMODE bits
  8318F#define CC_SHADOW 0x0
  8319F#define CC_IMMEDIATE 0x1
  8320F// AQCTLA and AQCTLB (Action Qualifier Control)
  8321F//=============================================
  8322F// ZRO, PRD, CAU, CAD, CBU, CBD bits
  8323F#define AQ_NO_ACTION 0x0
  8324F#define AQ_CLEAR 0x1
  8325F#define AQ_SET 0x2
  8326F#define AQ_TOGGLE 0x3
  8327F// DBCTL (Dead-Band Control)
  8328F//==========================
  8329F// OUT MODE bits
  8330F#define DB_DISABLE 0x0
  8331F#define DBA_ENABLE 0x1
  8332F#define DBB_ENABLE 0x2
  8333F#define DB_FULL_ENABLE 0x3
  8334F// POLSEL bits
  8335F#define DB_ACTV_HI 0x0
  8336F#define DB_ACTV_LOC 0x1
  8337F#define DB_ACTV_HIC 0x2
  8338F#define DB_ACTV_LO 0x3
  8339F// IN MODE
  8340F#define DBA_ALL 0x0
  8341F#define DBB_RED_DBA_FED 0x1
  8342F#define DBA_RED_DBB_FED 0x2
  8343F#define DBB_ALL 0x3
  8344F// CHPCTL (chopper control)
  8345F//==========================
  8346F// CHPEN bit
  8347F#define CHP_DISABLE 0x0
  8348F#define CHP_ENABLE 0x1
  8349F// CHPFREQ bits
  8350F#define CHP_DIV1 0x0
  8351F#define CHP_DIV2 0x1
  8352F#define CHP_DIV3 0x2
  8353F#define CHP_DIV4 0x3
  8354F#define CHP_DIV5 0x4
  8355F#define CHP_DIV6 0x5
  8356F#define CHP_DIV7 0x6
  8357F#define CHP_DIV8 0x7
  8358F// CHPDUTY bits
  8359F#define CHP1_8TH 0x0
  8360F#define CHP2_8TH 0x1
  8361F#define CHP3_8TH 0x2
  8362F#define CHP4_8TH 0x3
  8363F#define CHP5_8TH 0x4
  8364F#define CHP6_8TH 0x5
  8365F#define CHP7_8TH 0x6
  8366F// TZSEL (Trip Zone Select)
  8367F//==========================
  8368F// CBCn and OSHTn bits
  8369F#define TZ_DISABLE 0x0
  8370F#define TZ_ENABLE 0x1
  8371F// TZCTL (Trip Zone Control)
  8372F//==========================
  8373F// TZA and TZB bits
  8374F#define TZ_HIZ 0x0
  8375F#define TZ_FORCE_HI 0x1
  8376F#define TZ_FORCE_LO 0x2
  8377F#define TZ_NO_CHANGE 0x3
  8378F// ETSEL (Event Trigger Select)
  8379F//=============================
  8380F#define ET_CTR_ZERO 0x1
  8381F#define ET_CTR_PRD 0x2
  8382F#define ET_CTRU_CMPA 0x4
  8383F#define ET_CTRD_CMPA 0x5
  8384F#define ET_CTRU_CMPB 0x6
  8385F#define ET_CTRD_CMPB 0x7
  8386F// ETPS (Event Trigger Pre-scale)
  8387F//===============================
  8388F// INTPRD, SOCAPRD, SOCBPRD bits
  8389F#define ET_DISABLE 0x0
  8390F#define ET_1ST 0x1
  8391F#define ET_2ND 0x2
  8392F#define ET_3RD 0x3
  8393F//--------------------------------
  8394F// HRPWM (High Resolution PWM)
  8395F//================================
  8396F// HRCNFG
  8397F#define HR_Disable 0x0
  8398F#define HR_REP 0x1
  8399F#define HR_FEP 0x2
  8400F#define HR_BEP 0x3
  8401F#define HR_CMP 0x0
  8402F#define HR_PHS 0x1
  8403F#define HR_CTR_ZERO 0x0
  8404F#define HR_CTR_PRD 0x1
  8405F       /* extern "C" */
  8406F       // - end of DSP2833x_EPWM_DEFINES_H
  8407F//===========================================================================
  8408F// End of file.
  8409F//===========================================================================
  8410F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ePwm_defines.h*/
  8411F/*   CLOSE_FILE Include File */
  8412F 
  8413F             // Macros used for PWM examples.
  8414F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Dma_defines.h */
  8415F// TI File $Revision: /main/2 $
  8416F// Checkin $Date: August 14, 2007 16:32:29 $
  8417F//###########################################################################
  8418F//
  8419F// FILE: DSP2833x_Dma_defines.h
  8420F//
  8421F// TITLE: #defines used in DMA examples
  8422F//
  8423F//###########################################################################
  8424F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  8425F// $Release Date: August 4, 2009 $
  8426F//###########################################################################
  8427F#ifndef DSP2833x_DMA_DEFINES_H
  8428F#define DSP2833x_DMA_DEFINES_H
  8429F// MODE
  8430F//==========================
  8431F// PERINTSEL bits
  8432F#define DMA_SEQ1INT 1
  8433F#define DMA_SEQ2INT 2
  8434F#define DMA_XINT1 3
  8435F#define DMA_XINT2 4
  8436F#define DMA_XINT3 5
  8437F#define DMA_XINT4 6
  8438F#define DMA_XINT5 7
  8439F#define DMA_XINT6 8
  8440F#define DMA_XINT7 9
  8441F#define DMA_XINT13 10
  8442F#define DMA_TINT0 11
  8443F#define DMA_TINT1 12
  8444F#define DMA_TINT2 13
  8445F#define DMA_MXEVTA 14
  8446F#define DMA_MREVTA 15
  8447F#define DMA_MXREVTB 16
  8448F#define DMA_MREVTB 17
  8449F// OVERINTE bit
  8450F#define OVRFLOW_DISABLE 0x0
  8451F#define OVEFLOW_ENABLE 0x1
  8452F// PERINTE bit
  8453F#define PERINT_DISABLE 0x0
  8454F#define PERINT_ENABLE 0x1
  8455F// CHINTMODE bits
  8456F#define CHINT_BEGIN 0x0
  8457F#define CHINT_END 0x1
  8458F// ONESHOT bits
  8459F#define ONESHOT_DISABLE 0x0
  8460F#define ONESHOT_ENABLE 0x1
  8461F// CONTINOUS bit
  8462F#define CONT_DISABLE 0x0
  8463F#define CONT_ENABLE 0x1
  8464F// SYNCE bit
  8465F#define SYNC_DISABLE 0x0
  8466F#define SYNC_ENABLE 0x1
  8467F// SYNCSEL bit
  8468F#define SYNC_SRC 0x0
  8469F#define SYNC_DST 0x1
  8470F// DATASIZE bit
  8471F#define SIXTEEN_BIT 0x0
  8472F#define THIRTYTWO_BIT 0x1
  8473F// CHINTE bit
  8474F#define CHINT_DISABLE 0x0
  8475F#define CHINT_ENABLE 0x1
  8476F       /* extern "C" */
  8477F       // - end of DSP2833x_EPWM_DEFINES_H
  8478F//===========================================================================
  8479F// End of file.
  8480F//===========================================================================
  8481F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Dma_defines.h*/
  8482F/*   CLOSE_FILE Include File */
  8483F 
  8484F              // Macros used for DMA examples.
  8485F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_I2C_defines.h */
  8486F// TI File $Revision: /main/2 $
  8487F// Checkin $Date: April 16, 2008 17:16:47 $
  8488F//###########################################################################
  8489F//
  8490F// FILE:        DSP2833x_I2cExample.h
  8491F//
  8492F// TITLE:       2833x I2C Example Code Definitions.
  8493F//
  8494F//###########################################################################
  8495F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  8496F// $Release Date: August 4, 2009 $
  8497F//###########################################################################
  8498F#ifndef DSP2833x_I2C_DEFINES_H
  8499F#define DSP2833x_I2C_DEFINES_H
  8500F//--------------------------------------------
  8501F// Defines
  8502F//--------------------------------------------
  8503F// Error Messages
  8504F#define I2C_ERROR 0xFFFF
  8505F#define I2C_ARB_LOST_ERROR 0x0001
  8506F#define I2C_NACK_ERROR 0x0002
  8507F#define I2C_BUS_BUSY_ERROR 0x1000
  8508F#define I2C_STP_NOT_READY_ERROR 0x5555
  8509F#define I2C_NO_FLAGS 0xAAAA
  8510F#define I2C_SUCCESS 0x0000
  8511F// Clear Status Flags
  8512F#define I2C_CLR_AL_BIT 0x0001
  8513F#define I2C_CLR_NACK_BIT 0x0002
  8514F#define I2C_CLR_ARDY_BIT 0x0004
  8515F#define I2C_CLR_RRDY_BIT 0x0008
  8516F#define I2C_CLR_SCD_BIT 0x0020
  8517F// Interrupt Source Messages
  8518F#define I2C_NO_ISRC 0x0000
  8519F#define I2C_ARB_ISRC 0x0001
  8520F#define I2C_NACK_ISRC 0x0002
  8521F#define I2C_ARDY_ISRC 0x0003
  8522F#define I2C_RX_ISRC 0x0004
  8523F#define I2C_TX_ISRC 0x0005
  8524F#define I2C_SCD_ISRC 0x0006
  8525F#define I2C_AAS_ISRC 0x0007
  8526F// I2CMSG structure defines
  8527F#define I2C_NO_STOP 0
  8528F#define I2C_YES_STOP 1
  8529F#define I2C_RECEIVE 0
  8530F#define I2C_TRANSMIT 1
  8531F#define I2C_MAX_BUFFER_SIZE 16
  8532F// I2C Slave State defines
  8533F#define I2C_NOTSLAVE 0
  8534F#define I2C_ADDR_AS_SLAVE 1
  8535F#define I2C_ST_MSG_READY 2
  8536F// I2C Slave Receiver messages defines
  8537F#define I2C_SND_MSG1 1
  8538F#define I2C_SND_MSG2 2
  8539F// I2C State defines
  8540F#define I2C_IDLE 0
  8541F#define I2C_SLAVE_RECEIVER 1
  8542F#define I2C_SLAVE_TRANSMITTER 2
  8543F#define I2C_MASTER_RECEIVER 3
  8544F#define I2C_MASTER_TRANSMITTER 4
  8545F// I2C Message Commands for I2CMSG struct
  8546F#define I2C_MSGSTAT_INACTIVE 0x0000
  8547F#define I2C_MSGSTAT_SEND_WITHSTOP 0x0010
  8548F#define I2C_MSGSTAT_WRITE_BUSY 0x0011
  8549F#define I2C_MSGSTAT_SEND_NOSTOP 0x0020
  8550F#define I2C_MSGSTAT_SEND_NOSTOP_BUSY 0x0021
  8551F#define I2C_MSGSTAT_RESTART 0x0022
  8552F#define I2C_MSGSTAT_READ_BUSY 0x0023
  8553F// Generic defines
  8554F#define I2C_TRUE 1
  8555F#define I2C_FALSE 0
  8556F#define I2C_YES 1
  8557F#define I2C_NO 0
  8558F#define I2C_DUMMY_BYTE 0
  8559F//--------------------------------------------
  8560F// Structures
  8561F//--------------------------------------------
  8562F// I2C Message Structure
  8563F
  8564Fstruct I2CMSG
  8565F{
  8566F  Uint16 MsgStatus ;
  8567F                         // Word stating what state msg is in:
  8568F               // I2C_MSGCMD_INACTIVE = do not send msg
  8569F               // I2C_MSGCMD_BUSY = msg start has been sent,
  8570F               // awaiting stop
  8571F               // I2C_MSGCMD_SEND_WITHSTOP = command to send
  8572F               // master trans msg complete with a stop bit
  8573F               // I2C_MSGCMD_SEND_NOSTOP = command to send
  8574F               // master trans msg without the stop bit
  8575F               // I2C_MSGCMD_RESTART = command to send a restart
  8576F               // as a master receiver with a stop bit
  8577F  Uint16 SlaveAddress ;  // I2C address of slave msg is intended for
  8578F  Uint16 NumOfBytes ;    // Num of valid bytes in (or to be put in MsgBuffer)
  8579F  Uint16 MemoryHighAddr ;        // EEPROM address of data associated with msg (high byte)
  8580F  Uint16 MemoryLowAddr ; // EEPROM address of data associated with msg (low byte)
  8581F  Uint16 MsgBuffer [ 16 ] ;
  8582F                                                // Array holding msg data - max that
  8583F                     // MAX_BUFFER_SIZE can be is 16 due to
  8584F                     // the FIFO's
  8585F} ;
  8586F       // end of DSP2833x_I2C_DEFINES_H definition
  8587F//===========================================================================
  8588F// End of file.
  8589F//===========================================================================
  8590F 
  8591F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_I2C_defines.h*/
  8592F/*   CLOSE_FILE Include File */
  8593F 
  8594F              // Macros used for I2C examples.
  8595F#define PARTNO_28335 0xEF
  8596F#define PARTNO_28334 0xEE
  8597F#define PARTNO_28332 0xED
  8598F#define PARTNO_28235 0xE8
  8599F#define PARTNO_28234 0xE7
  8600F#define PARTNO_28232 0xE6
  8601F// Include files not used with DSP/BIOS
  8602F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DefaultISR.h */
  8603F// TI File $Revision: /main/1 $
  8604F// Checkin $Date: August 18, 2006 13:45:37 $
  8605F//###########################################################################
  8606F//
  8607F// FILE: DSP2833x_DefaultIsr.h
  8608F//
  8609F// TITLE: DSP2833x Devices Default Interrupt Service Routines Definitions.
  8610F//
  8611F//###########################################################################
  8612F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  8613F// $Release Date: August 4, 2009 $
  8614F//###########################################################################
  8615F#ifndef DSP2833x_DEFAULT_ISR_H
  8616F#define DSP2833x_DEFAULT_ISR_H
  8617F//---------------------------------------------------------------------------
  8618F// Default Interrupt Service Routine Declarations:
  8619F//
  8620F// The following function prototypes are for the
  8621F// default ISR routines used with the default PIE vector table.
  8622F// This default vector table is found in the DSP2833x_PieVect.h
  8623F// file.
  8624F//
  8625F// Non-Peripheral Interrupts:
  8626F
  8627Finterrupt void
  8628F  INT13_ISR ( void ) ;          // XINT13 or CPU-Timer 1
  8629T  interrupt void
  8630F  INT14_ISR ( void ) ;          // CPU-Timer2
  8631T  interrupt void
  8632F  DATALOG_ISR ( void ) ;          // Datalogging interrupt
  8633T  interrupt void
  8634F  RTOSINT_ISR ( void ) ;          // RTOS interrupt
  8635T  interrupt void
  8636F  EMUINT_ISR ( void ) ;          // Emulation interrupt
  8637T  interrupt void
  8638F  NMI_ISR ( void ) ;          // Non-maskable interrupt
  8639T  interrupt void
  8640F  ILLEGAL_ISR ( void ) ;          // Illegal operation TRAP
  8641F// Group 1 PIE Interrupt Service Routines:
  8642T  interrupt void
  8643F  SEQ1INT_ISR ( void ) ;          // ADC Sequencer 1 ISR
  8644T  interrupt void
  8645F  SEQ2INT_ISR ( void ) ;          // ADC Sequencer 2 ISR
  8646T  interrupt void
  8647F  XINT1_ISR ( void ) ;          // External interrupt 1
  8648T  interrupt void
  8649F  XINT2_ISR ( void ) ;          // External interrupt 2
  8650T  interrupt void
  8651F  ADCINT_ISR ( void ) ;          // ADC
  8652T  interrupt void
  8653F  TINT0_ISR ( void ) ;          // Timer 0
  8654T  interrupt void
  8655F  WAKEINT_ISR ( void ) ;          // WD
  8656F// Group 6 PIE Interrupt Service Routines:
  8657T  interrupt void
  8658F  SPIRXINTA_ISR ( void ) ;          // SPI-A
  8659T  interrupt void
  8660F  SPITXINTA_ISR ( void ) ;          // SPI-A
  8661T  interrupt void
  8662F  MRINTA_ISR ( void ) ;          // McBSP-A
  8663T  interrupt void
  8664F  MXINTA_ISR ( void ) ;          // McBSP-A
  8665T  interrupt void
  8666F  MRINTB_ISR ( void ) ;          // McBSP-B
  8667T  interrupt void
  8668F  MXINTB_ISR ( void ) ;          // McBSP-B
  8669F// Group 7 PIE Interrupt Service Routines:
  8670T  interrupt void
  8671F  DINTCH1_ISR ( void ) ;          // DMA-Channel 1
  8672T  interrupt void
  8673F  DINTCH2_ISR ( void ) ;          // DMA-Channel 2
  8674T  interrupt void
  8675F  DINTCH3_ISR ( void ) ;          // DMA-Channel 3
  8676T  interrupt void
  8677F  DINTCH4_ISR ( void ) ;          // DMA-Channel 4
  8678T  interrupt void
  8679F  DINTCH5_ISR ( void ) ;          // DMA-Channel 5
  8680T  interrupt void
  8681F  DINTCH6_ISR ( void ) ;          // DMA-Channel 6
  8682F// Group 8 PIE Interrupt Service Routines:
  8683T  interrupt void
  8684F  I2CINT1A_ISR ( void ) ;          // I2C-A
  8685T  interrupt void
  8686F  I2CINT2A_ISR ( void ) ;          // I2C-A
  8687T  interrupt void
  8688F  SCIRXINTC_ISR ( void ) ;          // SCI-C
  8689T  interrupt void
  8690F  SCITXINTC_ISR ( void ) ;          // SCI-C
  8691F// Group 9 PIE Interrupt Service Routines:
  8692T  interrupt void
  8693F  SCIRXINTA_ISR ( void ) ;          // SCI-A
  8694T  interrupt void
  8695F  SCITXINTA_ISR ( void ) ;          // SCI-A
  8696T  interrupt void
  8697F  SCIRXINTB_ISR ( void ) ;          // SCI-B
  8698T  interrupt void
  8699F  SCITXINTB_ISR ( void ) ;          // SCI-B
  8700T  interrupt void
  8701F  ECAN0INTA_ISR ( void ) ;          // eCAN-A
  8702T  interrupt void
  8703F  ECAN1INTA_ISR ( void ) ;          // eCAN-A
  8704T  interrupt void
  8705F  ECAN0INTB_ISR ( void ) ;          // eCAN-B
  8706T  interrupt void
  8707F  ECAN1INTB_ISR ( void ) ;
  8708F                                    // eCAN-B
  8709F// Group 10 PIE Interrupt Service Routines:
  8710F// Group 11 PIE Interrupt Service Routines:
  8711F// Group 12 PIE Interrupt Service Routines:
  8712T  interrupt void
  8713F  XINT3_ISR ( void ) ;          // External interrupt 3
  8714T  interrupt void
  8715F  XINT4_ISR ( void ) ;          // External interrupt 4
  8716T  interrupt void
  8717F  XINT5_ISR ( void ) ;          // External interrupt 5
  8718T  interrupt void
  8719F  XINT6_ISR ( void ) ;          // External interrupt 6
  8720T  interrupt void
  8721F  XINT7_ISR ( void ) ;          // External interrupt 7
  8722T  interrupt void
  8723F  LVF_ISR ( void ) ;          // Latched overflow flag
  8724T  interrupt void
  8725F  LUF_ISR ( void ) ;          // Latched underflow flag
  8726F// Catch-all for Reserved Locations For testing purposes:
  8727T  interrupt void
  8728F  PIE_RESERVED ( void ) ;          // Reserved for test
  8729T  interrupt void
  8730F  rsvd_ISR ( void ) ;          // for test
  8731T  interrupt void
  8732F  INT_NOTUSED_ISR ( void ) ;
  8733F                                      // for unused interrupts
  8734F       /* extern "C" */
  8735F       // end of DSP2833x_DEFAULT_ISR_H definition
  8736F//===========================================================================
  8737F// End of file.
  8738F//===========================================================================
  8739F 
  8740F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DefaultISR.h*/
  8741F/*   CLOSE_FILE Include File */
  8742F 
  8743F// DO NOT MODIFY THIS LINE.
  8744F#define DELAY_US( A ) DSP28x_usDelay ( ( ( ( ( long double ) A * 1000.0L ) / ( long double ) CPU_RATE ) - 9.0L ) / 5.0L )
  8745F       /* extern "C" */
  8746F       // end of DSP2833x_EXAMPLES_H definition
  8747F//===========================================================================
  8748F// End of file.
  8749F//===========================================================================
  8750F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Examples.h*/
  8751F/*   CLOSE_FILE Include File */
  8752F 
  8753F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\my_stdint.h */
  8754F/*****************************************************************************/
  8755F/* STDINT.H v6.2.0 */
  8756F/* */
  8757F/* Copyright (c) 2002-2013 Texas Instruments Incorporated */
  8758F/* http://www.ti.com/ */
  8759F/* */
  8760F/* Redistribution and use in source and binary forms, with or without */
  8761F/* modification, are permitted provided that the following conditions */
  8762F/* are met: */
  8763F/* */
  8764F/* Redistributions of source code must retain the above copyright */
  8765F/* notice, this list of conditions and the following disclaimer. */
  8766F/* */
  8767F/* Redistributions in binary form must reproduce the above copyright */
  8768F/* notice, this list of conditions and the following disclaimer in */
  8769F/* the documentation and/or other materials provided with the */
  8770F/* distribution. */
  8771F/* */
  8772F/* Neither the name of Texas Instruments Incorporated nor the names */
  8773F/* of its contributors may be used to endorse or promote products */
  8774F/* derived from this software without specific prior written */
  8775F/* permission. */
  8776F/* */
  8777F/* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS */
  8778F/* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT */
  8779F/* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR */
  8780F/* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT */
  8781F/* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, */
  8782F/* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT */
  8783F/* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, */
  8784F/* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY */
  8785F/* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT */
  8786F/* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE */
  8787F/* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
  8788F/* */
  8789F/*****************************************************************************/
  8790F#ifndef _MY_STDINT_H_
  8791F#define _MY_STDINT_H_
  8792F/* These definitions might not be 8-bit wide */
  8793F
  8794Ftypedef
  8795Fsigned char
  8796F  int8_t ;
  8797F
  8798Ftypedef
  8799Funsigned char
  8800F  uint8_t ;
  8801F  /* 7.18.1.1 Exact-width integer types */
  8802F
  8803Ftypedef
  8804Fshort
  8805F  int16_t ;
  8806F
  8807Ftypedef
  8808Funsigned short
  8809F  uint16_t ;
  8810F
  8811Ftypedef
  8812Flong
  8813F  int32_t ;
  8814F
  8815Ftypedef
  8816Funsigned long
  8817F  uint32_t ;
  8818F  /* 7.18.1.2 Minimum-width integer types */
  8819F
  8820Ftypedef
  8821Fint16_t
  8822F  int_least8_t ;
  8823F
  8824Ftypedef
  8825Fuint16_t
  8826F  uint_least8_t ;
  8827F
  8828Ftypedef
  8829Fint16_t
  8830F  int_least16_t ;
  8831F
  8832Ftypedef
  8833Fuint16_t
  8834F  uint_least16_t ;
  8835F
  8836Ftypedef
  8837Fint32_t
  8838F  int_least32_t ;
  8839F
  8840Ftypedef
  8841Fuint32_t
  8842F  uint_least32_t ;
  8843F/* sorry, [u]int_least64_t not implemented for C27X, CLA */
  8844F/* 7.18.1.3 Fastest minimum-width integer types */
  8845F
  8846Ftypedef
  8847Fint16_t
  8848F  int_fast8_t ;
  8849F
  8850Ftypedef
  8851Fuint16_t
  8852F  uint_fast8_t ;
  8853F
  8854Ftypedef
  8855Fint16_t
  8856F  int_fast16_t ;
  8857F
  8858Ftypedef
  8859Fuint16_t
  8860F  uint_fast16_t ;
  8861F
  8862Ftypedef
  8863Fint32_t
  8864F  int_fast32_t ;
  8865F
  8866Ftypedef
  8867Fuint32_t
  8868F  uint_fast32_t ;
  8869F/* sorry, [u]int_fast64_t not implemented for C27X, CLA */
  8870F/* 7.18.1.4 Integer types capable of holding object pointers */
  8871F
  8872Ftypedef
  8873Flong
  8874F  intptr_t ;
  8875F
  8876Ftypedef
  8877Funsigned long
  8878F  uintptr_t ;
  8879F/* 7.18.1.5 Greatest-width integer types */
  8880F      /* C27X or CLA */
  8881F
  8882Ftypedef
  8883Flong
  8884F  intmax_t ;
  8885F
  8886Ftypedef
  8887Funsigned long
  8888F  uintmax_t ;
  8889F/*
  8890F According to footnotes in the 1999 C standard, "C++ implementations
  8891F should define these macros only when __STDC_LIMIT_MACROS is defined
  8892F before <stdint.h> is included."
  8893F*/
  8894F/* 7.18.2 Limits of specified width integer types */
  8895F#define INT16_MAX 0x7fff
  8896F#define INT16_MIN ( - INT16_MAX - 1 )
  8897F#define UINT16_MAX 0xffff
  8898F#define INT32_MAX 0x7fffffff
  8899F#define INT32_MIN ( - INT32_MAX - 1 )
  8900F#define UINT32_MAX 0xffffffff
  8901F#define INT_LEAST8_MAX ( INT16_MAX )
  8902F#define INT_LEAST8_MIN ( INT16_MIN )
  8903F#define UINT_LEAST8_MAX ( UINT16_MAX )
  8904F#define INT_LEAST16_MAX ( INT16_MAX )
  8905F#define INT_LEAST16_MIN ( INT16_MIN )
  8906F#define UINT_LEAST16_MAX ( UINT16_MAX )
  8907F#define INT_LEAST32_MAX ( INT32_MAX )
  8908F#define INT_LEAST32_MIN ( INT32_MIN )
  8909F#define UINT_LEAST32_MAX ( UINT32_MAX )
  8910F#define INT_FAST8_MAX ( INT16_MAX )
  8911F#define INT_FAST8_MIN ( INT16_MIN )
  8912F#define UINT_FAST8_MAX ( UINT16_MAX )
  8913F#define INT_FAST16_MAX ( INT16_MAX )
  8914F#define INT_FAST16_MIN ( INT16_MIN )
  8915F#define UINT_FAST16_MAX ( UINT16_MAX )
  8916F#define INT_FAST32_MAX ( INT32_MAX )
  8917F#define INT_FAST32_MIN ( INT32_MIN )
  8918F#define UINT_FAST32_MAX ( UINT32_MAX )
  8919F#define INTPTR_MAX ( INT32_MAX )
  8920F#define INTPTR_MIN ( INT32_MIN )
  8921F#define UINTPTR_MAX ( UINT32_MAX )
  8922F#define INTMAX_MIN ( INT32_MIN )
  8923F#define INTMAX_MAX ( INT32_MAX )
  8924F#define UINTMAX_MAX ( UINT32_MAX )
  8925F/* 7.18.3 Limits of other integer types */
  8926F#define PTRDIFF_MAX ( INT32_MAX )
  8927F#define PTRDIFF_MIN ( INT32_MIN )
  8928F#define SIG_ATOMIC_MIN ( INT32_MIN )
  8929F#define SIG_ATOMIC_MAX ( INT32_MAX )
  8930F#define SIZE_MAX ( INT32_MAX )
  8931F#define WCHAR_MAX 0xffffu
  8932F#define WCHAR_MIN 0
  8933F#define WINT_MIN ( INT32_MIN )
  8934F#define WINT_MAX ( INT32_MAX )
  8935F/* 7.18.4.1 Macros for minimum-width integer constants */
  8936F/*
  8937F There is a defect report filed against the C99 standard concerning how
  8938F the (U)INTN_C macros should be implemented. Please refer to --
  8939F http://wwwold.dkuug.dk/JTC1/SC22/WG14/www/docs/dr_209.htm
  8940F for more information. These macros are implemented according to the
  8941F suggestion given at this web site.
  8942F*/
  8943F#define INT8_C( value ) ( ( int_least8_t ) ( value ) )
  8944F#define UINT8_C( value ) ( ( uint_least8_t ) ( value ) )
  8945F#define INT16_C( value ) ( ( int_least16_t ) ( value ) )
  8946F#define UINT16_C( value ) ( ( uint_least16_t ) ( value ) )
  8947F#define INT32_C( value ) ( ( int_least32_t ) ( value ) )
  8948F#define UINT32_C( value ) ( ( uint_least32_t ) ( value ) )
  8949F/* 7.18.4.2 Macros for greatest-width integer constants */
  8950F#define INTMAX_C( value ) ( ( intmax_t ) ( value ) )
  8951F#define UINTMAX_C( value ) ( ( uintmax_t ) ( value ) )
  8952F       /* !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS) */
  8953F       /* _STDINT_H_ */
  8954F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\my_stdint.h*/
  8955F/*   CLOSE_FILE Include File */
  8956F 
  8957F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_sensorhead_types.h */
  8958F//############################################################################
  8959F//
  8960F// File:         dsp_sensorhead_types.h
  8961F// Version:      0.1
  8962F//
  8963F// Description: Structure and variable definitions.
  8964F//
  8965F//############################################################################
  8966F// Author: Rogério Lima
  8967F// Release Date: July 2012
  8968F//############################################################################
  8969F#ifndef DSP_SENSORHEAD_TYPES_H
  8970F#define DSP_SENSORHEAD_TYPES_H
  8971F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_types.h */
  8972F//############################################################################
  8973F//
  8974F// File:         dsp_types.h
  8975F// Version:      0.1
  8976F//
  8977F// Description: Structure and variable definitions.
  8978F//
  8979F//############################################################################
  8980F// Author: Rogério Lima
  8981F// Release Date: July 2012
  8982F//############################################################################
  8983F#ifndef DSP_TYPES_H
  8984F#define DSP_TYPES_H
  8985F/* These definitions might not be 8-bit wide */
  8986F
  8987Ftypedef
  8988Fsigned char
  8989F  int8_t ;
  8990F
  8991Ftypedef
  8992Funsigned char
  8993F  uint8_t ;
  8994F  /* 7.18.1.1 Exact-width integer types */
  8995F
  8996Ftypedef
  8997Fshort
  8998F  int16_t ;
  8999F
  9000Ftypedef
  9001Funsigned short
  9002F  uint16_t ;
  9003F
  9004Ftypedef
  9005Flong
  9006F  int32_t ;
  9007F
  9008Ftypedef
  9009Funsigned long
  9010F  uint32_t ;
  9011F       /* DSP_TYPES_H */
  9012F 
  9013F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_types.h*/
  9014F/*   CLOSE_FILE Include File */
  9015F 
  9016F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_quat.h */
  9017F//############################################################################
  9018F//
  9019F// File:         EKF_Quat.h
  9020F// Version:      0.1
  9021F//
  9022F// Description: Preprocessor definitions and function declarations for quater-
  9023F//       nion calculations.
  9024F//
  9025F//############################################################################
  9026F// Author: Rogério Lima
  9027F// Release Date: July 2012
  9028F//############################################################################
  9029F#ifndef __EKF_quat_h
  9030F#define __EKF_quat_h
  9031F
  9032Ftypedef
  9033Fstruct _quat
  9034F{
  9035F  float a ,
  9036F  b ,
  9037F  c ,
  9038F  d ;
  9039F} quat ;
  9040F
  9041Fint16_t
  9042T  quat_mult (
  9043F  quat * src1 ,
  9044F  quat * src2 ,
  9045F  quat * dest ) ;
  9046F
  9047Fint16_t
  9048T  quat_conj (
  9049F  quat * src ,
  9050F  quat * dest ) ;
  9051F
  9052Fint16_t
  9053T  quat_norm (
  9054F  quat * src ) ;
  9055F
  9056Fint16_t
  9057T  quat_add (
  9058F  quat * src1 ,
  9059F  quat * src2 ,
  9060F  quat * dest ) ;
  9061F
  9062Fint16_t
  9063T  quat_subtract (
  9064F  quat * src1 ,
  9065F  quat * src2 ,
  9066F  quat * dest ) ;
  9067F
  9068Fint16_t
  9069T  quat_scalar_mult (
  9070F  quat * qsrc ,
  9071F  float scalar ,
  9072F  quat * dest ) ;
  9073F 
  9074F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_quat.h*/
  9075F/*   CLOSE_FILE Include File */
  9076F 
  9077F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_matrix.h */
  9078F//############################################################################
  9079F//
  9080F// File: dsp_matrix.h
  9081F// Version: 0.1
  9082F//
  9083F// Description: Preprocessor definitions and function declarations for matrix
  9084F// calculations.
  9085F//
  9086F//############################################################################
  9087F// Author: Rogério Lima
  9088F// Release Date: July 2012
  9089F//############################################################################
  9090F#ifndef DSP_MATRIX_H
  9091F#define DSP_MATRIX_H
  9092F#define MATRIX_MAX_ROWS 12
  9093F#define MATRIX_MAX_COLUMNS 12
  9094F
  9095Ftypedef
  9096Fstruct _fMatrix
  9097F{
  9098F  int rows ;
  9099F  int columns ;
  9100F  float data [ 12 ] [ 12 ] ;
  9101F} fMatrix ;
  9102F// Matrix operations
  9103F
  9104Fint
  9105T  mat_add (
  9106F  fMatrix * src1 ,
  9107F  fMatrix * src2 ,
  9108F  fMatrix * dest ) ;
  9109F
  9110Fint
  9111T  mat_mult (
  9112F  fMatrix * src1 ,
  9113F  fMatrix * src2 ,
  9114F  fMatrix * dest ) ;
  9115F
  9116Fint
  9117T  mat_scalar_mult (
  9118F  float scalar ,
  9119F  fMatrix * src ,
  9120F  fMatrix * dest ) ;
  9121F
  9122Fint
  9123T  mat_determinant (
  9124F  fMatrix * src ,
  9125F  float * det ) ;
  9126F
  9127Fint
  9128T  mat_transpose (
  9129F  fMatrix * src ,
  9130F  fMatrix * dest ) ;
  9131F
  9132Fint
  9133T  mat_create_identity (
  9134F  fMatrix * dest ,
  9135F  int rows ,
  9136F  int columns ) ;
  9137F
  9138Fint
  9139T  mat_zero (
  9140F  fMatrix * dest ,
  9141F  int rows ,
  9142F  int columns ) ;
  9143F
  9144Fint
  9145T  mat_copy (
  9146F  fMatrix * src ,
  9147F  fMatrix * dest ) ;
  9148F//int mat_print( fMatrix* matrix );
  9149F//void hexPrint16( short byte );
  9150F 
  9151F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_matrix.h*/
  9152F/*   CLOSE_FILE Include File */
  9153F 
  9154F#define SUCCESS ( 1 == 1 )
  9155F#define FAIL ( 0 == 1 )
  9156F#define MAG_UPDATE 0
  9157F#define ACCEL_UPDATE 1
  9158F         // Original values
  9159F#define ACCEL_VARIANCE 223.59E-4f
  9160F#define GYRO_VARIANCE 68.81E-5f
  9161F#define GYRO_BIAS_VARIANCE 201.93E-3f
  9162F#define MAGNETO_VARIANCE 48.12E-5f
  9163F#define GPS_VARIANCE 1.6E-3f
  9164F#define QUATERNION_NORM_VARIANCE 1.0E-9f
  9165F#define ACCEL_SCALE_FACTOR 0.03830859375f
  9166F#define GYRO_SCALE_FACTOR_DEG 0.06956521739f
  9167F#define GYRO_SCALE_FACTOR_RAD 0.00121414208f
  9168F#define MAG_SCALE_FACTOR 0.00151515151f
  9169F#define RAD2DEG 57.2957795130f
  9170F#define DEG2RAD 0.01745329251f
  9171F#define KM2M 0.27777777778f
  9172F//#define       ABS_PRESSURE_SCALE_FACTOR // -> Transfer function
  9173F//#define       DIFF_PRESSURE_SCALE_FACTOR // -> Transfer function
  9174F/* Structure for holding raw sensor data */
  9175F
  9176Ftypedef
  9177Fstruct sensor_data_raw
  9178F{
  9179F  int16_t gyro_x ;
  9180F  int16_t gyro_y ;
  9181F  int16_t gyro_z ;
  9182F  int16_t new_gyro_data ;
  9183F  int16_t accel_x ;
  9184F  int16_t accel_y ;
  9185F  int16_t accel_z ;
  9186F        // Flag specifies whether there is new accel data in the sensor data structure
  9187F  int16_t new_accel_data ;
  9188F  int16_t mag_x ;
  9189F  int16_t mag_y ;
  9190F  int16_t mag_z ;
  9191F        // Flag specifies whether there is new magnetometer data in the sensor data structure
  9192F  int16_t new_mag_data ;
  9193F        // Rate gyro temperature measurement
  9194F  int16_t gyro_temperature ;
  9195F  int32_t abs_pressure ;
  9196F  int16_t new_abs_pressure_data ;
  9197F  int16_t diff_pressure ;
  9198F  int16_t new_diff_pressure_data ;
  9199F} sensor_data_raw_t ;
  9200F/* Structure for holding scaled sensor data */
  9201F
  9202Ftypedef
  9203F  struct
  9204F  {
  9205F    float gyro_x ;
  9206F    float gyro_y ;
  9207F    float gyro_z ;
  9208F    float accel_x ;
  9209F    float accel_y ;
  9210F    float accel_z ;
  9211F    float mag_x ;
  9212F    float mag_y ;
  9213F    float mag_z ;
  9214F    float gyro_temperature ;
  9215F    float abs_pressure ;
  9216F    float baro_altitude ;
  9217F    float diff_pressure ;
  9218F    float airspeed ;
  9219F        /* GPS data */
  9220F        /* Latitude */
  9221F    int16_t gps_lat_deg ;
  9222F    uint32_t gps_lat_min ;
  9223F    uint8_t gps_lat_sector ;
  9224F        /* Longitude */
  9225F    int16_t gps_lon_deg ;
  9226F    uint32_t gps_lon_min ;
  9227F    uint8_t gps_lon_sector ;
  9228F        /* Altitude */
  9229F    int32_t gps_alt ;
  9230F        /* Speed */
  9231F    int32_t gps_speed ;
  9232F    int32_t gps_course ;
  9233F        /* Time */
  9234F    uint16_t gps_hour ;
  9235F    uint16_t gps_min ;
  9236F    float gps_sec ;
  9237F        // Status
  9238F    uint16_t gps_position_fix_status ;
  9239F    uint16_t gps_no_sv ;
  9240F    float gps_hdop ;
  9241F    uint16_t gps_new_message ;
  9242F  } sensor_data_scaled_t ;
  9243F// Structure for storing AHRS states and other data related to state computation
  9244F// This structure is, in a way, redundant because all this data is also stored in the
  9245F// UM6_config or UM6_data structures. However, in the config and data strucutres, the
  9246F// data is packaged as UInt32 entries into an array for convenience with communication.
  9247F// To use the data as floats, special formatting is required. This structure provides
  9248F// a place to store that data in the expected format, which makes accessing it easier.
  9249F
  9250Ftypedef
  9251F  struct
  9252F  {
  9253F        /* Attitude states */
  9254F    float psi ;
  9255F    float theta ;
  9256F    float phi ;
  9257F        /* Angle rate states */
  9258F    float psi_dot ;
  9259F    float theta_dot ;
  9260F    float phi_dot ;
  9261F        /* Quaternion states "qib" = Quaternion from Inertial to Body */
  9262F    quat qib ;
  9263F    quat quat_debug ;
  9264F        /* Gyro biases */
  9265F    float bias_p ;
  9266F    float bias_q ;
  9267F    float bias_r ;
  9268F        /* Accelerometer biases */
  9269F    float bias_accel_x ;
  9270F    float bias_accel_y ;
  9271F    float bias_accel_z ;
  9272F        /* Magnetometer biases */
  9273F    float bias_mag_x ;
  9274F    float bias_mag_y ;
  9275F    float bias_mag_z ;
  9276F        /* State Transition Matrix (jacobian of system matrix 'f') */
  9277F    fMatrix jac_f ;
  9278F        /* Linearized measurement equation (jacobian of output equation 'h') */
  9279F    fMatrix jac_h ;
  9280F        /* Measurement noise matrix */
  9281F    fMatrix R ;
  9282F        /* Auxiliary construction measurement matrix for phi and theta angles. */
  9283F    fMatrix R_phi_theta ;
  9284F        /* Auxiliary construction measurement matrix for psi angle. */
  9285F    fMatrix R_psi ;
  9286F        /* Process noise matrix */
  9287F    fMatrix Q ;
  9288F        /* Accelerometer alignment matrix */
  9289F    fMatrix accel_align_mat ;
  9290F        /* Gyro alignment matrix */
  9291F    fMatrix gyro_align_mat ;
  9292F        /* Magnetometer calibration matrix */
  9293F    fMatrix mag_align_mat ;
  9294F        // Error covariance matrix
  9295F    fMatrix P ;
  9296F        /* Magnetic field reference vector */
  9297F    float mag_ref_x ;
  9298F    float mag_ref_y ;
  9299F    float mag_ref_z ;
  9300F        /* Accelerometer reference vector */
  9301F    float accel_ref_x ;
  9302F    float accel_ref_y ;
  9303F    float accel_ref_z ;
  9304F        /* Accelerometer variance */
  9305F    float accel_var ;
  9306F        /* Gyrometer variance */
  9307F    float gyro_var ;
  9308F        /* Gyro bias variance */
  9309F    float gyro_bias_var ;
  9310F        /* Magnetometer variance */
  9311F    float mag_var ;
  9312F        /* GPS velocity variance */
  9313F    float gps_var ;
  9314F    float U ;
  9315F    float V ;
  9316F    float W ;
  9317F    float U_ant ;
  9318F    float V_ant ;
  9319F    float W_ant ;
  9320F    float U_dot ;
  9321F    float V_dot ;
  9322F    float W_dot ;
  9323F    float temperature ;
  9324F        // Time sampling
  9325F    float Ts ;    // In seconds
  9326F    float debug_misc [ 5 ] ;
  9327F        // GPS stuffs
  9328F    float GPS_north ;    // In meters
  9329F    float GPS_east ;
  9330F    float GPS_h ;
  9331F    float GPS_h_ant ;
  9332F    float GPS_speed ;    // In m/s
  9333F    float GPS_speed_ant ;    // past speed
  9334F    float GPS_heading ;    // In m/s
  9335F    float GPS_Ts ;
  9336F    float GPS_lat_home ;
  9337F    float GPS_lon_home ;
  9338F    float GPS_alt_home ;
  9339F  } ahrs_states_t ;
  9340F// Structure for holding raw sensor data
  9341F
  9342Ftypedef
  9343F  struct
  9344F  {
  9345F        // input
  9346F    float xk [ 9 ] ;
  9347F    float xk_1 [ 9 ] ;
  9348F    float xk_2 [ 9 ] ;
  9349F        // output
  9350F    float yk [ 9 ] ;
  9351F    float yk_1 [ 9 ] ;
  9352F    float yk_2 [ 9 ] ;
  9353F    float a [ 5 ] ; // denominator coefficient
  9354F    float b [ 5 ] ; // numerator coefficient
  9355F  } digital_filter_data_t ;
  9356F
  9357Fvoid
  9358T  compute_euler_angles (
  9359F  ahrs_states_t * estimated_states ) ;
  9360F
  9361Fvoid
  9362T  unroll_states (
  9363F  ahrs_states_t * states ) ;
  9364F 
  9365F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_sensorhead_types.h*/
  9366F/*   CLOSE_FILE Include File */
  9367F 
  9368F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_i2c.h */
  9369F/******************************************************************************
  9370F* FILENAME: dsp_i2c.h
  9371F*
  9372F* DESCRIPTION:
  9373F* High-level functions for I2C module..
  9374F*
  9375F* FUNCTIONS:
  9376F* uint8_t i2cBatchWrite ( uint8_t, uint8_t*, uint8_t)
  9377F* uint8_t i2cBatchRead ( uint8_t, uint8_t, uint8_t*, uint8_t)
  9378F* void I2C_get_data (I2C_RawSensorData*)
  9379F* void I2C_init_sensors (void)
  9380F*
  9381F* VERSION DATE WHO DETAIL
  9382F* 1.0 05 Set 2011 Rogerio Lima Start-up coding.
  9383F* Plínio Pereira
  9384F* -----------------------------------------------------------------------------
  9385F* 2.0 30 Aug 2014 Rogerio Lima Improving code quality rewriting the
  9386F* code and correcting errors.
  9387F******************************************************************************/
  9388F/*
  9389F * SECTION ORDER
  9390F * 1. Comment block
  9391F * 2. Include statements
  9392F * 3. Definitions: data type, constants, macros
  9393F * 4. Static data declarations
  9394F * 5. Private functions prototypes
  9395F * 6. Public function bodies
  9396F * 7. Private function bodies
  9397F *
  9398F */
  9399F#ifndef DSP_I2C_H
  9400F#define DSP_I2C_H
  9401F#define I2C_TX_BUFSIZE 16U
  9402F#define I2C_RX_BUFSIZE 24U
  9403F#define I2C_ACK_ATTEMPTS 5000U
  9404F#define MAX_RETRIES 10000U
  9405F#define I2C_TRANSMITTER I2C_Direction_Transmitter
  9406F#define I2C_RECEIVER I2C_Direction_Receiver
  9407F#define I2C_BIT_SET 1U
  9408F#define I2C_BIT_CLEAR 0U
  9409F#define I2C_ACK_DISABLE 1U
  9410F#define I2C_ACK_ENABLE 0U
  9411F#define I2C_SEND_START 1U
  9412F#define I2C_NO_START 0U
  9413F#define I2C_SEND_STOP 1U
  9414F#define I2C_NO_STOP 0U
  9415F#define I2C_SCL_PIN GPIO_Pin_6
  9416F#define I2C_SDA_PIN GPIO_Pin_7
  9417F#define I2C_PORT GPIOB
  9418F#define I2C_ARBITRATION_LOST 10U
  9419F#define I2C_NACK 1U
  9420F#define I2C_TIMEOUT 11U
  9421F/*------------------------------------------------------------------------------
  9422F F28335 Register I2CMDR
  9423F------------------------------------------------------------------------------*/
  9424F// BC Bits
  9425F#define I2C_BC_8BITS 0x0000
  9426F#define I2C_BC_1BITS 0x0001
  9427F#define I2C_BC_2BITS 0x0002
  9428F#define I2C_BC_3BITS 0x0003
  9429F#define I2C_BC_4BITS 0x0004
  9430F#define I2C_BC_5BITS 0x0005
  9431F#define I2C_BC_6BITS 0x0006
  9432F#define I2C_BC_7BITS 0x0007
  9433F// FDF
  9434F#define I2C_NO_FREE_DATA_FORMAT 0x0000
  9435F#define I2C_FREE_DATA_FORMAT 0x0008
  9436F// STB
  9437F#define I2C_NO_START_BYTE 0x0000
  9438F#define I2C_START_BYTE 0x0010
  9439F// IRS
  9440F#define I2C_RESET 0x0000
  9441F#define I2C_ENABLED 0x0020
  9442F// DLB
  9443F#define I2C_NO_LOOPBACK 0x0000
  9444F#define I2C_LOOPBACK 0x0040
  9445F// RM
  9446F#define I2C_NO_REPEAT 0x0000
  9447F#define I2C_REPEAT 0x0080
  9448F/* Defines the length of time the i2c software will wait for clock stretching *
  9449F * the number of attempts simply corresponds with the number of iterations *
  9450F * through a for loop. */
  9451F#define I2C_MAX_ATTEMPTS 1000
  9452F/* Macro definitions */
  9453F#define I2C_DELAY_INIT( ) int16_t _counter ;
  9454F#define I2C_DELAY( ) for ( _counter = 0 ; _counter < 5 ; _counter ++ ) { asm volatile("mov r0, r0")   ; }
  9455F#define I2C_DELAY_SHORT( ) asm volatile("mov r0, r0")
  9456F/* Structure for holding raw sensor data from I2C bus
  9457Ftypedef struct __I2CData {
  9458F Gyrometers
  9459F int16_t W_x;
  9460F int16_t W_y;
  9461F int16_t W_z;
  9462F int16_t new_gyro_data;
  9463F Accelerometers
  9464F int16_t A_x;
  9465F int16_t A_y;
  9466F int16_t A_z;
  9467F Flag specifies whether there is new accel data in the sensor data structure
  9468F int16_t new_accel_data;
  9469F Magnetometers
  9470F int16_t H_x;
  9471F int16_t H_y;
  9472F int16_t H_z;
  9473F Flag specifies whether there is new magnetometer data in the sensor data structure
  9474F int16_t new_mag_data;
  9475F 
  9476F Rate gyro temperature measurement
  9477F int16_t gyro_temperature;
  9478F Differential pressure
  9479F int16_t diff_press;
  9480F Flag specifies whether there is new differential pressure data in the sensor data structure
  9481F int16_t new_diff_press_data;
  9482F Absolute pressure
  9483F int16_t abs_press;
  9484F Flag specifies whether there is new differential pressure data in the sensor data structure
  9485F int16_t new_abs_press_data;
  9486F} I2C_RawSensorData;*/
  9487F// Prototype statements for functions found within this file.
  9488F
  9489Fvoid
  9490F  Gpio_select_I2C ( void ) ;
  9491F// Software-emulated i2c function calls. Use these ones.
  9492F
  9493Fuint8_t
  9494T  i2cBatchWrite (
  9495F  const uint8_t address7 ,
  9496F  uint8_t * txBuffer ,
  9497F  const uint8_t bytesToWrite ) ;
  9498F
  9499Fuint8_t
  9500T  i2cBatchRead (
  9501F  const uint8_t address7 ,
  9502F  const uint8_t device_start_address ,
  9503F  uint8_t * rxBuffer ,
  9504F  const uint8_t bytesToRead ) ;
  9505F
  9506Fvoid
  9507T  i2c_get_data (
  9508F  sensor_data_raw_t * raw_data ) ;
  9509F
  9510Fvoid
  9511F  i2c_init_sensors ( void ) ;
  9512F 
  9513F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_i2c.h*/
  9514F/*   CLOSE_FILE Include File */
  9515F 
  9516F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_i2c_adxl345.h */
  9517F/******************************************************************************
  9518F* FILENAME: dsp_i2c_adxl345.h
  9519F*
  9520F* DESCRIPTION:
  9521F* Function prototypes and defines of ADXL345 driver.
  9522F*
  9523F* FUNCTIONS:
  9524F* int32_t ADXL_init (uint8_t*)U
  9525F* int32_t ADXL_self_test (uint8_t*)U
  9526F* int32_t ADXL_get_data (void)U
  9527F*
  9528F* VERSION DATE WHO DETAIL
  9529F* 1.0 05 Set 2011 Rogerio Lima Start-up coding.
  9530F* Plínio Pereira
  9531F* -----------------------------------------------------------------------------
  9532F* 2.0 30 Aug 2014 Rogerio Lima Improving code quality rewriting the
  9533F* code and correcting errors.
  9534F******************************************************************************/
  9535F#ifndef DSP_I2C_ADXL345_H
  9536F#define DSP_I2C_ADXL345_H
  9537F/* ADXL345 function prototypes */
  9538F
  9539Fuint8_t
  9540F  adxl_init ( void ) ;
  9541F
  9542Fuint8_t
  9543F  adxl_self_test ( void ) ;
  9544F
  9545Fuint8_t
  9546F  adxl_get_data ( void ) ;
  9547F  /*Register addresses for the ADXL345 */
  9548F#define ADXL_SLAVE_ADDRESS7 0x53U
  9549F#define ADXL_ODR_6_25HZ 0x06U
  9550F#define ADXL_ODR_12_50HZ 0x07U
  9551F#define ADXL_ODR_25HZ 0x08U
  9552F#define ADXL_ODR_50HZ 0x09U
  9553F#define ADXL_ODR_100HZ 0x0AU
  9554F#define ADXL_ODR_200HZ 0x0BU
  9555F#define ADXL_ODR_400HZ 0x0CU
  9556F#define ADXL_ODR_800HZ 0x0DU
  9557F#define ADXL_ODR_1600HZ 0x0EU
  9558F#define ADXL_ODR_3200HZ 0x0FU
  9559F#define ADXL_DEVID 0x00U
  9560F#define ADXL_THRESH_TAP 0x1DU
  9561F#define ADXL_OFSX 0x1EU
  9562F#define ADXL_OFSY 0x1FU
  9563F#define ADXL_OFSZ 0x20U
  9564F#define ADXL_DUR 0x21U
  9565F#define ADXL_Latent 0x22U
  9566F#define ADXL_Window 0x23U
  9567F#define ADXL_THRESH_ACT 0x24U
  9568F#define ADXL_THRESH_INACT 0x25U
  9569F#define ADXL_TIME_INACT 0x26U
  9570F#define ADXL_ACT_INACT_CTL 0x27U
  9571F#define ADXL_THRESH_FF 0x28U
  9572F#define ADXL_TIME_FF 0x29U
  9573F#define ADXL_TAP_AXES 0x2AU
  9574F#define ADXL_ACT_TAP_STATU 0x2BU
  9575F#define ADXL_BW_RATE 0x2CU
  9576F#define ADXL_POWER_CTL 0x2DU
  9577F#define ADXL_INT_ENABLE 0x2EU
  9578F#define ADXL_INT_MAP 0x2FU
  9579F#define ADXL_INT_SOURCE 0x30U
  9580F#define ADXL_DATA_FORMAT 0x31U
  9581F#define ADXL_DATAX0 0x32U
  9582F#define ADXL_DATAX1 0x33U
  9583F#define ADXL_DATAY0 0x34U
  9584F#define ADXL_DATAY1 0x35U
  9585F#define ADXL_DATAZ0 0x36U
  9586F#define ADXL_DATAZ1 0x37U
  9587F#define ADXL_FIFO_CTL 0x38U
  9588F#define ADXL_FIFO_STATUS 0x39U
  9589F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_i2c_adxl345.h*/
  9590F/*   CLOSE_FILE Include File */
  9591F 
  9592F
  9593Fuint8_t
  9594F  g_ADXL_Initialized = 0 ;
  9595F
  9596Fuint8_t
  9597F  g_ADXL_Tested = 0 ;
  9598F
  9599Fextern uint8_t
  9600F  g_i2cTxBuf [ 16U ] ;
  9601F
  9602Fextern uint8_t
  9603F  g_i2cRxBuf [ 24U ] ;
  9604F/*******************************************************************************
  9605F* Function Name : ADXL_init
  9606F* Input : None
  9607F* Output : uint8_t* status_flag
  9608F* Return : 1 if success, 0 if fail
  9609F* Description : Initializes the ADXL345 accelerometer
  9610F*******************************************************************************/
  9611F
  9612Fuint8_t
  9613T  adxl_init()
  9614F  {
  9615F    uint8_t
  9616F      returnval ;
  9617T    g_i2cTxBuf [ 0 ] = 0x2DU ;      /* Power-saving features control */
  9618T    g_i2cTxBuf [ 1 ] = 0x00U ;/* Go into standby mode to configure the device. */
  9619T    returnval = i2cBatchWrite ( 0x53U , g_i2cTxBuf , 2 ) ;
  9620T    DSP28x_usDelay (
  9621T    (
  9622T    (
  9623T    (
  9624T    ( long double ) 5 * 1000.0L ) /
  9625T    ( long double ) 6.667L ) - 9.0L ) /
  9626T    5.0L ) ;
  9627T    if
  9628T      (
  9629T      returnval != 0
  9630T      )                 /* Return 0 if occur an error */
  9631T      {
  9632T        g_i2cTxBuf [ 0 ] = 0x31U ;        /* Data format control */
  9633T        g_i2cTxBuf [ 1 ] = 0x08U ;
  9634F                               // +/-2g, right justified, full resolution, self-test disabled */
  9635T        returnval = i2cBatchWrite ( 0x53U , g_i2cTxBuf , 2 ) ;
  9636T        DSP28x_usDelay (
  9637T        (
  9638T        (
  9639T        (
  9640T        ( long double ) 5 * 1000.0L ) /
  9641T        ( long double ) 6.667L ) - 9.0L ) /
  9642T        5.0L ) ;
  9643T      }
  9644T    else
  9645T      {
  9646T        if
  9647T          (
  9648T          returnval != 0
  9649T          )                  /* Return 0 if occur an error */
  9650T          {
  9651T            g_i2cTxBuf [ 0 ] = 0x1EU ;/* Configura offset dos 3 eixos */
  9652T            g_i2cTxBuf [ 1 ] = 0x00U ;/* Offset-x */
  9653T            g_i2cTxBuf [ 2 ] = 0x00U ;/* Offset-y */
  9654T            g_i2cTxBuf [ 3 ] = 0x00U ;/* Offset-z */
  9655T            returnval = i2cBatchWrite ( 0x53U , g_i2cTxBuf , 4 ) ;
  9656T          }
  9657T        else
  9658T          {
  9659T            if
  9660T              (
  9661T              returnval != 0U
  9662T              )               /* Return 0 if occur an error */
  9663T              {
  9664T                g_i2cTxBuf [ 0 ] = 0x2CU ;/* Data rate and power mode control */
  9665T                g_i2cTxBuf [ 1 ] = 0x09U ;/* 50.00 Hz output data rate */
  9666T                returnval = i2cBatchWrite ( 0x53U , g_i2cTxBuf , 2 ) ;
  9667T                DSP28x_usDelay (
  9668T                (
  9669T                (
  9670T                (
  9671T                ( long double ) 5 * 1000.0L ) /
  9672T                ( long double ) 6.667L ) - 9.0L ) /
  9673T                5.0L ) ;
  9674T              }
  9675T            else
  9676T              {
  9677T                if
  9678T                  (
  9679T                  returnval != 0U
  9680T                  )             /* Return 0 if occur an error */
  9681T                  {
  9682T                    g_i2cTxBuf [ 0 ] = 0x2DU ;/* Power-saving features control */
  9683T                    g_i2cTxBuf [ 1 ] = 0x08U ;/* Places the accel into measurement mode */
  9684T                    returnval = i2cBatchWrite ( 0x53U , g_i2cTxBuf , 2 ) ;
  9685T                    DSP28x_usDelay (
  9686T                    (
  9687T                    (
  9688T                    (
  9689T                    ( long double ) 5 * 1000.0L ) /
  9690T                    ( long double ) 6.667L ) - 9.0L ) /
  9691T                    5.0L ) ;
  9692T                  }
  9693T              }
  9694T          }
  9695T      }
  9696T    return
  9697T    ( returnval ) ;
  9698F  }
  9699F/* ...+++SHALL BE STANDARDIZED+++... */
  9700F/*******************************************************************************
  9701F* Function Name : ADXL_self_test
  9702F* Input : None
  9703F* Output : None
  9704F* Return : 1 if success, 0 if fail
  9705F* Description :
  9706F*******************************************************************************/
  9707F
  9708Fuint8_t
  9709T  adxl_self_test()
  9710F  {
  9711F    static uint16_t
  9712F      i ;
  9713F    static uint8_t
  9714F      returnval ;
  9715F    static int16_t
  9716F      X_ST ;
  9717F    static int16_t
  9718F      Y_ST ;
  9719F    static int16_t
  9720F      Z_ST ;
  9721F    static int16_t
  9722F      X_ST_ON [ 100 ] ;
  9723F    static int16_t
  9724F      Y_ST_ON [ 100 ] ;
  9725F    static int16_t
  9726F      Z_ST_ON [ 100 ] ;
  9727F    static int16_t
  9728F      X_ST_OFF [ 100 ] ;
  9729F    static int16_t
  9730F      Y_ST_OFF [ 100 ] ;
  9731F    static int16_t
  9732F      Z_ST_OFF [ 100 ] ;
  9733F    static int32_t
  9734F      X_ON ;
  9735F    static int32_t
  9736F      Y_ON ;
  9737F    static int32_t
  9738F      Z_ON ;
  9739F    static int32_t
  9740F      X_OFF ;
  9741F    static int32_t
  9742F      Y_OFF ;
  9743F    static int32_t
  9744F      Z_OFF ;
  9745F      /* Standby mode: goes to configuration mode */
  9746T    g_i2cTxBuf [ 0 ] = 0x2DU ;      /* Power-saving features control */
  9747T    g_i2cTxBuf [ 1 ] = 0x00U ;/* Go into standby mode to configure the device */
  9748T    returnval = i2cBatchWrite ( 0x53U , g_i2cTxBuf , 2U ) ;
  9749T    DSP28x_usDelay (
  9750T    (
  9751T    (
  9752T    (
  9753T    ( long double ) 5 * 1000.0L ) /
  9754T    ( long double ) 6.667L ) - 9.0L ) /
  9755T    5.0L ) ;
  9756T    if
  9757T      (
  9758T      returnval != 0U
  9759T      )
  9760T      {
  9761T        g_i2cTxBuf [ 0 ] = 0x31U ;        /* Data format control */
  9762T        g_i2cTxBuf [ 1 ] = 0x8CU ;/* +/-16g, right justified, full resolution, self-test enabled */
  9763T        returnval = i2cBatchWrite ( 0x53U , g_i2cTxBuf , 2U ) ;
  9764T        DSP28x_usDelay (
  9765T        (
  9766T        (
  9767T        (
  9768T        ( long double ) 5 * 1000.0L ) /
  9769T        ( long double ) 6.667L ) - 9.0L ) /
  9770T        5.0L ) ;
  9771T      }
  9772T    else
  9773T      {
  9774T        if
  9775T          (
  9776T          returnval != 0U
  9777T          )                   /* Return 0 if occur an error */
  9778T          {
  9779T            g_i2cTxBuf [ 0 ] = 0x2CU ;/* Data rate and power mode control */
  9780T            g_i2cTxBuf [ 1 ] = 0x0EU ;   /* Normal power mode, 1600.00 Hz output data rate */
  9781T            returnval = i2cBatchWrite ( 0x53U , g_i2cTxBuf , 2U ) ;
  9782T            DSP28x_usDelay (
  9783T            (
  9784T            (
  9785T            (
  9786T            ( long double ) 5 * 1000.0L ) /
  9787T            ( long double ) 6.667L ) - 9.0L ) /
  9788T            5.0L ) ;
  9789T          }
  9790T        else
  9791T          {
  9792T            if
  9793T              (
  9794T              returnval != 0U
  9795T              )               /* Return 0 if occur an error */
  9796T              {
  9797T                g_i2cTxBuf [ 0 ] = 0x38U ;/* FIFO control */
  9798T                g_i2cTxBuf [ 1 ] = 0x00U ;/* Bypass FIFO MODE don't require set the register */
  9799T                returnval = i2cBatchWrite ( 0x53U , g_i2cTxBuf , 2 ) ;
  9800T                DSP28x_usDelay (
  9801T                (
  9802T                (
  9803T                (
  9804T                ( long double ) 5 * 1000.0L ) /
  9805T                ( long double ) 6.667L ) - 9.0L ) /
  9806T                5.0L ) ;
  9807T              }
  9808T            else
  9809T              {
  9810T                if
  9811T                  (
  9812T                  returnval != 0U
  9813T                  )           /* Return 0 if occur an error */
  9814T                  {
  9815F                  /* Measuremente mode: exits from configuration mode */
  9816T                    g_i2cTxBuf [ 0 ] = 0x2DU ;/* Power-saving features control */
  9817T                    g_i2cTxBuf [ 1 ] = 0x08U ;/* Places the accel into measurement mode */
  9818T                    returnval = i2cBatchWrite ( 0x53U , g_i2cTxBuf , 2 ) ;
  9819T                    DSP28x_usDelay (
  9820T                    (
  9821T                    (
  9822T                    (
  9823T                    ( long double ) 5 * 1000.0L ) /
  9824T                    ( long double ) 6.667L ) - 9.0L ) /
  9825T                    5.0L ) ;
  9826T                  }
  9827T                else
  9828T                  {
  9829T                    if
  9830T                      (
  9831T                      returnval != 0U
  9832T                      )       /* Return 0 if occur an error */
  9833T                      {
  9834T                        for
  9835T                          (
  9836T                          i = 0
  9837T                          ;
  9838T                          i < 100
  9839T                          ;
  9840T                          i ++
  9841T                          )
  9842T                          {
  9843T                            returnval = i2cBatchRead ( 0x53U , 0x32U , g_i2cRxBuf , 6U ) ;
  9844T                            if
  9845T                              (
  9846T                              returnval != 0U
  9847T                              )
  9848T                              {
  9849T                                X_ST_ON [ i ] = (
  9850T                                ( g_i2cRxBuf [ 1 ] << 8 ) | g_i2cRxBuf [ 0 ] ) ;
  9851T                                Y_ST_ON [ i ] = (
  9852T                                ( g_i2cRxBuf [ 3 ] << 8 ) | g_i2cRxBuf [ 2 ] ) ;
  9853T                                Z_ST_ON [ i ] = (
  9854T                                ( g_i2cRxBuf [ 5 ] << 8 ) | g_i2cRxBuf [ 4 ] ) ;
  9855T                              }
  9856T                          }
  9857T                      }
  9858T                    else
  9859T                      {
  9860T                        if
  9861T                          (
  9862T                          returnval != 0U
  9863T                          )   /* Return 0 if occur an error */
  9864T                          {
  9865F                          /* Standby mode: goes to configuration mode */
  9866T                            g_i2cTxBuf [ 0 ] = 0x2DU ;/* Power-saving features control */
  9867T                            g_i2cTxBuf [ 1 ] = 0x00U ;/* Go into standby mode to configure the device */
  9868T                            returnval = i2cBatchWrite ( 0x53U , g_i2cTxBuf , 2U ) ;
  9869T                            DSP28x_usDelay (
  9870T                            (
  9871T                            (
  9872T                            (
  9873T                            ( long double ) 5 * 1000.0L ) /
  9874T                            ( long double ) 6.667L ) - 9.0L ) /
  9875T                            5.0L ) ;
  9876T                          }
  9877T                        else
  9878T                          {
  9879T                            if
  9880T                              (
  9881T                              returnval != 0U
  9882T                              )/* Return 0 if occur an error */
  9883T                              {
  9884T                                g_i2cTxBuf [ 0 ] = 0x31U ;/* Data format control */
  9885T                                g_i2cTxBuf [ 1 ] = 0x0CU ;/* +/-16g, right justified, full resolution, self-test disabled */
  9886T                                returnval = i2cBatchWrite ( 0x53U , g_i2cTxBuf , 2U ) ;
  9887T                                DSP28x_usDelay (
  9888T                                (
  9889T                                (
  9890T                                (
  9891T                                ( long double ) 5 * 1000.0L ) /
  9892T                                ( long double ) 6.667L ) - 9.0L ) /
  9893T                                5.0L ) ;
  9894T                              }
  9895T                            else
  9896T                              {
  9897T                                if
  9898T                                  (
  9899T                                  returnval != 0U
  9900T                                  )/* Return 0 if occur an error */
  9901T                                  {
  9902T                                    for
  9903T                                      (
  9904T                                      i = 0
  9905T                                      ;
  9906T                                      i < 100
  9907T                                      ;
  9908T                                      i ++
  9909T                                      )
  9910T                                      {
  9911T                                        returnval = i2cBatchRead ( 0x53U , 0x32U , g_i2cRxBuf , 6U ) ;
  9912T                                        if
  9913T                                          (
  9914T                                          returnval != 0U
  9915T                                          )
  9916T                                          {
  9917T                                            X_ST_OFF [ i ] = (
  9918T                                            ( g_i2cRxBuf [ 1 ] << 8U ) | g_i2cRxBuf [ 0 ] ) ;
  9919T                                            Y_ST_OFF [ i ] = (
  9920T                                            ( g_i2cRxBuf [ 3 ] << 8U ) | g_i2cRxBuf [ 2 ] ) ;
  9921T                                            Z_ST_OFF [ i ] = (
  9922T                                            ( g_i2cRxBuf [ 5 ] << 8U ) | g_i2cRxBuf [ 4 ] ) ;
  9923T                                          }
  9924T                                      }
  9925T                                  }
  9926T                                else
  9927T                                  {
  9928T                                    if
  9929T                                      (
  9930T                                      returnval != 0U
  9931T                                      )/* Return 0 if occur an error */
  9932T                                      {
  9933T                                        for
  9934T                                          (
  9935T                                          i = 0
  9936T                                          ;
  9937T                                          i < 100
  9938T                                          ;
  9939T                                          i ++
  9940T                                          )
  9941T                                          {
  9942T                                            X_ON += X_ST_ON [ i ] ;
  9943T                                            Y_ON += Y_ST_ON [ i ] ;
  9944T                                            Z_ON += Z_ST_ON [ i ] ;
  9945T                                            X_OFF += X_ST_OFF [ i ] ;
  9946T                                            Y_OFF += Y_ST_OFF [ i ] ;
  9947T                                            Z_OFF += Z_ST_OFF [ i ] ;
  9948T                                          }
  9949T                                        X_ON = X_ON /
  9950T                                        100 ;
  9951T                                        Y_ON = Y_ON /
  9952T                                        100 ;
  9953T                                        Z_ON = Z_ON /
  9954T                                        100 ;
  9955T                                        X_OFF = X_OFF /
  9956T                                        100 ;
  9957T                                        Y_OFF = Y_OFF /
  9958T                                        100 ;
  9959T                                        Z_OFF = Z_OFF /
  9960T                                        100 ;
  9961T                                        X_ST = ( int16_t ) X_ON - ( int16_t ) X_OFF ;
  9962T                                        Y_ST = ( int16_t ) Y_ON - ( int16_t ) Y_OFF ;
  9963T                                        Z_ST = ( int16_t ) Z_ON - ( int16_t ) Z_OFF ;
  9964T                                        if
  9965T                                          (
  9966T                                          (
  9967T                                          X_ST < 50
  9968T                                          )
  9969T                                          ||
  9970T                                          ( X_ST > 540
  9971T                                          )
  9972T                                          )
  9973T                                          {
  9974T                                            g_ADXL_Tested = 0x00U ;
  9975T                                          }
  9976T                                        else
  9977T                                          {
  9978T                                            if
  9979T                                              (
  9980T                                              (
  9981T                                              Y_ST < - 540
  9982T                                              )
  9983T                                              ||
  9984T                                              ( Y_ST > - 50
  9985T                                              )
  9986T                                              )
  9987T                                              {
  9988T                                                g_ADXL_Tested = 0x00U ;
  9989T                                              }
  9990T                                            else
  9991T                                              {
  9992T                                                if
  9993T                                                  (
  9994T                                                  (
  9995T                                                  Z_ST < 75
  9996T                                                  )
  9997T                                                  ||
  9998T                                                  ( Z_ST > 875
  9999T                                                  )
 10000T                                                  )
 10001T                                                  {
 10002T                                                    g_ADXL_Tested = 0x00U ;
 10003T                                                  }
 10004T                                                else
 10005T                                                  {
 10006T                                                    g_ADXL_Tested = 0x01U ;
 10007T                                                  }
 10008T                                              }
 10009T                                          }
 10010T                                      }
 10011T                                  }
 10012T                              }
 10013T                          }
 10014T                      }
 10015T                  }
 10016T              }
 10017T          }
 10018T      }
 10019T    return
 10020T    ( returnval ) ;
 10021F  }
 10022F/*******************************************************************************
 10023F* Function Name : ADXL_get_data
 10024F* Input : None
 10025F* Output : uint8_t* i2cBuf
 10026F* Return : 1 if success, 0 if fail
 10027F* Description :
 10028F*******************************************************************************/
 10029F
 10030Fuint8_t
 10031T  adxl_get_data()
 10032F  {
 10033F    uint8_t
 10034F      returnval ;
 10035T    returnval = i2cBatchRead ( 0x53U , 0x32U , g_i2cRxBuf , 6U ) ;
 10036T    return
 10037T    ( returnval ) ;
 10038F  }
 10039F 
