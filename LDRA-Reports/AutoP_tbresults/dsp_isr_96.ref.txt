     1F/*
     2FC TESTBED VERSION  : 9.4.4                                                                                               
     3FFILE UNDER TEST  : "F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\src\usr\dsp_isr.c"            
     4FDATE OF ANALYSIS : Fri Nov 07 10:50:29 2014                          
     5F*/
     6F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_types.h */
     7F//############################################################################
     8F//
     9F// File:         dsp_types.h
    10F// Version:      0.1
    11F//
    12F// Description: Structure and variable definitions.
    13F//
    14F//############################################################################
    15F// Author: Rogério Lima
    16F// Release Date: July 2012
    17F//############################################################################
    18F#ifndef DSP_TYPES_H
    19F#define DSP_TYPES_H
    20F/* These definitions might not be 8-bit wide */
    21F
    22Ftypedef
    23Fsigned char
    24F  int8_t ;
    25F
    26Ftypedef
    27Funsigned char
    28F  uint8_t ;
    29F  /* 7.18.1.1 Exact-width integer types */
    30F
    31Ftypedef
    32Fshort
    33F  int16_t ;
    34F
    35Ftypedef
    36Funsigned short
    37F  uint16_t ;
    38F
    39Ftypedef
    40Flong
    41F  int32_t ;
    42F
    43Ftypedef
    44Funsigned long
    45F  uint32_t ;
    46F       /* DSP_TYPES_H */
    47F 
    48F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_types.h*/
    49F/*   CLOSE_FILE Include File */
    50F 
    51F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\dsp_isr.h */
    52F#ifndef DSP_ISR_H
    53F#define DSP_ISR_H
    54F/* SCI-A Transmit Interrupt Service */
    55F
    56Finterrupt void
    57F  SCIA_TX_isr ( void ) ;
    58F  /* SCI-A Receive Interrupt Service */
    59T  interrupt void
    60F  SCIA_RX_isr ( void ) ;
    61F       // DSP_ISR_H
    62F 
    63F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\dsp_isr.h*/
    64F/*   CLOSE_FILE Include File */
    65F 
    66F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Device.h */
    67F// TI File $Revision: /main/5 $
    68F// Checkin $Date: January 22, 2008 16:55:35 $
    69F//###########################################################################
    70F//
    71F// FILE: DSP2833x_Device.h
    72F//
    73F// TITLE: DSP2833x Device Definitions.
    74F//
    75F//###########################################################################
    76F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
    77F// $Release Date: August 4, 2009 $
    78F//###########################################################################
    79F#ifndef DSP2833x_DEVICE_H
    80F#define DSP2833x_DEVICE_H
    81F#define TARGET 1
    82F//---------------------------------------------------------------------------
    83F// User To Select Target Device:
    84F#define DSP28_28335 TARGET
    85F#define DSP28_28334 0
    86F#define DSP28_28332 0
    87F//---------------------------------------------------------------------------
    88F// Common CPU Definitions:
    89F//
    90F
    91Fextern cregister volatile unsigned int
    92F  IFR ;
    93F
    94Fextern cregister volatile unsigned int
    95F  IER ;
    96F#define EINT asm (" clrc INTM")
    97F#define DINT asm (" setc INTM")
    98F#define ERTM asm (" clrc DBGM")
    99F#define DRTM asm (" setc DBGM")
   100F#define EALLOW asm (" EALLOW")
   101F#define EDIS asm (" EDIS")
   102F#define ESTOP0 asm (" ESTOP0")
   103F#define M_INT1 0x0001
   104F#define M_INT2 0x0002
   105F#define M_INT3 0x0004
   106F#define M_INT4 0x0008
   107F#define M_INT5 0x0010
   108F#define M_INT6 0x0020
   109F#define M_INT7 0x0040
   110F#define M_INT8 0x0080
   111F#define M_INT9 0x0100
   112F#define M_INT10 0x0200
   113F#define M_INT11 0x0400
   114F#define M_INT12 0x0800
   115F#define M_INT13 0x1000
   116F#define M_INT14 0x2000
   117F#define M_DLOG 0x4000
   118F#define M_RTOS 0x8000
   119F#define BIT0 0x0001
   120F#define BIT1 0x0002
   121F#define BIT2 0x0004
   122F#define BIT3 0x0008
   123F#define BIT4 0x0010
   124F#define BIT5 0x0020
   125F#define BIT6 0x0040
   126F#define BIT7 0x0080
   127F#define BIT8 0x0100
   128F#define BIT9 0x0200
   129F#define BIT10 0x0400
   130F#define BIT11 0x0800
   131F#define BIT12 0x1000
   132F#define BIT13 0x2000
   133F#define BIT14 0x4000
   134F#define BIT15 0x8000
   135F//---------------------------------------------------------------------------
   136F// For Portability, User Is Recommended To Use Following Data Type Size
   137F// Definitions For 16-bit and 32-Bit Signed/Unsigned Integers:
   138F//
   139F#define DSP28_DATA_TYPES
   140F
   141Ftypedef
   142Fchar
   143F  int8 ;
   144F
   145Ftypedef
   146Fint
   147F  int16 ;
   148F
   149Ftypedef
   150Flong
   151F  int32 ;
   152F
   153Ftypedef
   154Flong long
   155F  int64 ;
   156F
   157Ftypedef
   158Funsigned char
   159F  Uint8 ;
   160F
   161Ftypedef
   162Funsigned int
   163F  Uint16 ;
   164F
   165Ftypedef
   166Funsigned long
   167F  Uint32 ;
   168F
   169Ftypedef
   170Funsigned long long
   171F  Uint64 ;
   172F
   173Ftypedef
   174Ffloat
   175F  float32 ;
   176F
   177Ftypedef
   178Flong double
   179F  float64 ;
   180F//---------------------------------------------------------------------------
   181F// Include All Peripheral Header Files:
   182F//
   183F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Adc.h */
   184F// TI File $Revision: /main/1 $
   185F// Checkin $Date: August 18, 2006 13:51:50 $
   186F//###########################################################################
   187F//
   188F// FILE: DSP2833x_Adc.h
   189F//
   190F// TITLE: DSP2833x Device ADC Register Definitions.
   191F//
   192F//###########################################################################
   193F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   194F// $Release Date: August 4, 2009 $
   195F//###########################################################################
   196F#ifndef DSP2833x_ADC_H
   197F#define DSP2833x_ADC_H
   198F//---------------------------------------------------------------------------
   199F// ADC Individual Register Bit Definitions:
   200F
   201Fstruct ADCTRL1_BITS
   202F{                     // bits description
   203F  Uint16 rsvd1 : 4 ;// 3:0 reserved
   204F  Uint16 SEQ_CASC : 1 ;// 4 Cascaded sequencer mode
   205F  Uint16 SEQ_OVRD : 1 ;// 5 Sequencer override
   206F  Uint16 CONT_RUN : 1 ;// 6 Continuous run
   207F  Uint16 CPS : 1 ;// 7 ADC core clock pre-scalar
   208F  Uint16 ACQ_PS : 4 ;// 11:8 Acquisition window size
   209F  Uint16 SUSMOD : 2 ;// 13:12 Emulation suspend mode
   210F  Uint16 RESET : 1 ;// 14 ADC reset
   211F  Uint16 rsvd2 : 1 ;// 15 reserved
   212F} ;
   213F
   214Funion ADCTRL1_REG
   215F{
   216F  Uint16 all ;
   217F  struct ADCTRL1_BITS bit ;
   218F} ;
   219F
   220Fstruct ADCTRL2_BITS
   221F{                     // bits description
   222F  Uint16 EPWM_SOCB_SEQ2 : 1 ;// 0 EPWM compare B SOC mask for SEQ2
   223F  Uint16 rsvd1 : 1 ;// 1 reserved
   224F  Uint16 INT_MOD_SEQ2 : 1 ;// 2 SEQ2 Interrupt mode
   225F  Uint16 INT_ENA_SEQ2 : 1 ;// 3 SEQ2 Interrupt enable
   226F  Uint16 rsvd2 : 1 ;// 4 reserved
   227F  Uint16 SOC_SEQ2 : 1 ;// 5 Start of conversion for SEQ2
   228F  Uint16 RST_SEQ2 : 1 ;// 6 Reset SEQ2
   229F  Uint16 EXT_SOC_SEQ1 : 1 ;// 7 External start of conversion for SEQ1
   230F  Uint16 EPWM_SOCA_SEQ1 : 1 ;// 8 EPWM compare B SOC mask for SEQ1
   231F  Uint16 rsvd3 : 1 ;// 9 reserved
   232F  Uint16 INT_MOD_SEQ1 : 1 ;// 10 SEQ1 Interrupt mode
   233F  Uint16 INT_ENA_SEQ1 : 1 ;// 11 SEQ1 Interrupt enable
   234F  Uint16 rsvd4 : 1 ;// 12 reserved
   235F  Uint16 SOC_SEQ1 : 1 ;// 13 Start of conversion trigger for SEQ1
   236F  Uint16 RST_SEQ1 : 1 ;// 14 Restart sequencer 1
   237F  Uint16 EPWM_SOCB_SEQ : 1 ;// 15 EPWM compare B SOC enable
   238F} ;
   239F
   240Funion ADCTRL2_REG
   241F{
   242F  Uint16 all ;
   243F  struct ADCTRL2_BITS bit ;
   244F} ;
   245F
   246Fstruct ADCASEQSR_BITS
   247F{                       // bits description
   248F  Uint16 SEQ1_STATE : 4 ;// 3:0 SEQ1 state
   249F  Uint16 SEQ2_STATE : 3 ;// 6:4 SEQ2 state
   250F  Uint16 rsvd1 : 1 ;// 7 reserved
   251F  Uint16 SEQ_CNTR : 4 ;// 11:8 Sequencing counter status
   252F  Uint16 rsvd2 : 4 ;// 15:12 reserved
   253F} ;
   254F
   255Funion ADCASEQSR_REG
   256F{
   257F  Uint16 all ;
   258F  struct ADCASEQSR_BITS bit ;
   259F} ;
   260F
   261Fstruct ADCMAXCONV_BITS
   262F{                        // bits description
   263F  Uint16 MAX_CONV1 : 4 ;// 3:0 Max number of conversions
   264F  Uint16 MAX_CONV2 : 3 ;// 6:4 Max number of conversions
   265F  Uint16 rsvd1 : 9 ;// 15:7 reserved
   266F} ;
   267F
   268Funion ADCMAXCONV_REG
   269F{
   270F  Uint16 all ;
   271F  struct ADCMAXCONV_BITS bit ;
   272F} ;
   273F
   274Fstruct ADCCHSELSEQ1_BITS
   275F{                          // bits description
   276F  Uint16 CONV00 : 4 ;// 3:0 Conversion selection 00
   277F  Uint16 CONV01 : 4 ;// 7:4 Conversion selection 01
   278F  Uint16 CONV02 : 4 ;// 11:8 Conversion selection 02
   279F  Uint16 CONV03 : 4 ;// 15:12 Conversion selection 03
   280F} ;
   281F
   282Funion ADCCHSELSEQ1_REG
   283F{
   284F  Uint16 all ;
   285F  struct ADCCHSELSEQ1_BITS bit ;
   286F} ;
   287F
   288Fstruct ADCCHSELSEQ2_BITS
   289F{                          // bits description
   290F  Uint16 CONV04 : 4 ;// 3:0 Conversion selection 04
   291F  Uint16 CONV05 : 4 ;// 7:4 Conversion selection 05
   292F  Uint16 CONV06 : 4 ;// 11:8 Conversion selection 06
   293F  Uint16 CONV07 : 4 ;// 15:12 Conversion selection 07
   294F} ;
   295F
   296Funion ADCCHSELSEQ2_REG
   297F{
   298F  Uint16 all ;
   299F  struct ADCCHSELSEQ2_BITS bit ;
   300F} ;
   301F
   302Fstruct ADCCHSELSEQ3_BITS
   303F{                          // bits description
   304F  Uint16 CONV08 : 4 ;// 3:0 Conversion selection 08
   305F  Uint16 CONV09 : 4 ;// 7:4 Conversion selection 09
   306F  Uint16 CONV10 : 4 ;// 11:8 Conversion selection 10
   307F  Uint16 CONV11 : 4 ;// 15:12 Conversion selection 11
   308F} ;
   309F
   310Funion ADCCHSELSEQ3_REG
   311F{
   312F  Uint16 all ;
   313F  struct ADCCHSELSEQ3_BITS bit ;
   314F} ;
   315F
   316Fstruct ADCCHSELSEQ4_BITS
   317F{                          // bits description
   318F  Uint16 CONV12 : 4 ;// 3:0 Conversion selection 12
   319F  Uint16 CONV13 : 4 ;// 7:4 Conversion selection 13
   320F  Uint16 CONV14 : 4 ;// 11:8 Conversion selection 14
   321F  Uint16 CONV15 : 4 ;// 15:12 Conversion selection 15
   322F} ;
   323F
   324Funion ADCCHSELSEQ4_REG
   325F{
   326F  Uint16 all ;
   327F  struct ADCCHSELSEQ4_BITS bit ;
   328F} ;
   329F
   330Fstruct ADCTRL3_BITS
   331F{                     // bits description
   332F  Uint16 SMODE_SEL : 1 ;// 0 Sampling mode select
   333F  Uint16 ADCCLKPS : 4 ;// 4:1 ADC core clock divider
   334F  Uint16 ADCPWDN : 1 ;// 5 ADC powerdown
   335F  Uint16 ADCBGRFDN : 2 ;// 7:6 ADC bandgap/ref power down
   336F  Uint16 rsvd1 : 8 ;// 15:8 reserved
   337F} ;
   338F
   339Funion ADCTRL3_REG
   340F{
   341F  Uint16 all ;
   342F  struct ADCTRL3_BITS bit ;
   343F} ;
   344F
   345Fstruct ADCST_BITS
   346F{                   // bits description
   347F  Uint16 INT_SEQ1 : 1 ;// 0 SEQ1 Interrupt flag
   348F  Uint16 INT_SEQ2 : 1 ;// 1 SEQ2 Interrupt flag
   349F  Uint16 SEQ1_BSY : 1 ;// 2 SEQ1 busy status
   350F  Uint16 SEQ2_BSY : 1 ;// 3 SEQ2 busy status
   351F  Uint16 INT_SEQ1_CLR : 1 ;// 4 SEQ1 Interrupt clear
   352F  Uint16 INT_SEQ2_CLR : 1 ;// 5 SEQ2 Interrupt clear
   353F  Uint16 EOS_BUF1 : 1 ;// 6 End of sequence buffer1
   354F  Uint16 EOS_BUF2 : 1 ;// 7 End of sequence buffer2
   355F  Uint16 rsvd1 : 8 ;// 15:8 reserved
   356F} ;
   357F
   358Funion ADCST_REG
   359F{
   360F  Uint16 all ;
   361F  struct ADCST_BITS bit ;
   362F} ;
   363F
   364Fstruct ADCREFSEL_BITS
   365F{                       // bits description
   366F  Uint16 rsvd1 : 14 ;    // 13:0 reserved
   367F  Uint16 REF_SEL : 2 ;    // 15:14 Reference select
   368F} ;
   369F
   370Funion ADCREFSEL_REG
   371F{
   372F  Uint16 all ;
   373F  struct ADCREFSEL_BITS bit ;
   374F} ;
   375F
   376Fstruct ADCOFFTRIM_BITS
   377F{                       // bits description
   378F  int16 OFFSET_TRIM : 9 ;    // 8:0 Offset Trim
   379F  Uint16 rsvd1 : 7 ;    // 15:9 reserved
   380F} ;
   381F
   382Funion ADCOFFTRIM_REG
   383F{
   384F  Uint16 all ;
   385F  struct ADCOFFTRIM_BITS bit ;
   386F} ;
   387F
   388Fstruct ADC_REGS
   389F{
   390F  union ADCTRL1_REG ADCTRL1 ;  // ADC Control 1
   391F  union ADCTRL2_REG ADCTRL2 ;  // ADC Control 2
   392F  union ADCMAXCONV_REG ADCMAXCONV ;  // Max conversions
   393F  union ADCCHSELSEQ1_REG ADCCHSELSEQ1 ;  // Channel select sequencing control 1
   394F  union ADCCHSELSEQ2_REG ADCCHSELSEQ2 ;  // Channel select sequencing control 2
   395F  union ADCCHSELSEQ3_REG ADCCHSELSEQ3 ;  // Channel select sequencing control 3
   396F  union ADCCHSELSEQ4_REG ADCCHSELSEQ4 ;  // Channel select sequencing control 4
   397F  union ADCASEQSR_REG ADCASEQSR ;  // Autosequence status register
   398F  Uint16 ADCRESULT0 ;  // Conversion Result Buffer 0
   399F  Uint16 ADCRESULT1 ;  // Conversion Result Buffer 1
   400F  Uint16 ADCRESULT2 ;  // Conversion Result Buffer 2
   401F  Uint16 ADCRESULT3 ;  // Conversion Result Buffer 3
   402F  Uint16 ADCRESULT4 ;  // Conversion Result Buffer 4
   403F  Uint16 ADCRESULT5 ;  // Conversion Result Buffer 5
   404F  Uint16 ADCRESULT6 ;  // Conversion Result Buffer 6
   405F  Uint16 ADCRESULT7 ;  // Conversion Result Buffer 7
   406F  Uint16 ADCRESULT8 ;  // Conversion Result Buffer 8
   407F  Uint16 ADCRESULT9 ;  // Conversion Result Buffer 9
   408F  Uint16 ADCRESULT10 ;  // Conversion Result Buffer 10
   409F  Uint16 ADCRESULT11 ;  // Conversion Result Buffer 11
   410F  Uint16 ADCRESULT12 ;  // Conversion Result Buffer 12
   411F  Uint16 ADCRESULT13 ;  // Conversion Result Buffer 13
   412F  Uint16 ADCRESULT14 ;  // Conversion Result Buffer 14
   413F  Uint16 ADCRESULT15 ;  // Conversion Result Buffer 15
   414F  union ADCTRL3_REG ADCTRL3 ;  // ADC Control 3
   415F  union ADCST_REG ADCST ;  // ADC Status Register
   416F  Uint16 rsvd1 ;
   417F  Uint16 rsvd2 ;
   418F  union ADCREFSEL_REG ADCREFSEL ;  // Reference Select Register
   419F  union ADCOFFTRIM_REG ADCOFFTRIM ;  // Offset Trim Register
   420F} ;
   421F
   422Fstruct ADC_RESULT_MIRROR_REGS
   423F{
   424F  Uint16 ADCRESULT0 ;  // Conversion Result Buffer 0
   425F  Uint16 ADCRESULT1 ;  // Conversion Result Buffer 1
   426F  Uint16 ADCRESULT2 ;  // Conversion Result Buffer 2
   427F  Uint16 ADCRESULT3 ;  // Conversion Result Buffer 3
   428F  Uint16 ADCRESULT4 ;  // Conversion Result Buffer 4
   429F  Uint16 ADCRESULT5 ;  // Conversion Result Buffer 5
   430F  Uint16 ADCRESULT6 ;  // Conversion Result Buffer 6
   431F  Uint16 ADCRESULT7 ;  // Conversion Result Buffer 7
   432F  Uint16 ADCRESULT8 ;  // Conversion Result Buffer 8
   433F  Uint16 ADCRESULT9 ;  // Conversion Result Buffer 9
   434F  Uint16 ADCRESULT10 ;  // Conversion Result Buffer 10
   435F  Uint16 ADCRESULT11 ;  // Conversion Result Buffer 11
   436F  Uint16 ADCRESULT12 ;  // Conversion Result Buffer 12
   437F  Uint16 ADCRESULT13 ;  // Conversion Result Buffer 13
   438F  Uint16 ADCRESULT14 ;  // Conversion Result Buffer 14
   439F  Uint16 ADCRESULT15 ;  // Conversion Result Buffer 15
   440F} ;
   441F//---------------------------------------------------------------------------
   442F// ADC External References & Function Declarations:
   443F//
   444F
   445Fextern volatile struct ADC_REGS
   446F  AdcRegs ;
   447F
   448Fextern volatile struct ADC_RESULT_MIRROR_REGS
   449F  AdcMirror ;
   450F       /* extern "C" */
   451F       // end of DSP2833x_ADC_H definition
   452F//===========================================================================
   453F// End of file.
   454F//===========================================================================
   455F 
   456F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Adc.h*/
   457F/*   CLOSE_FILE Include File */
   458F 
   459F                // ADC Registers
   460F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DevEmu.h */
   461F// TI File $Revision: /main/4 $
   462F// Checkin $Date: April 15, 2009 10:05:17 $
   463F//###########################################################################
   464F//
   465F// FILE: DSP2833x_DevEmu.h
   466F//
   467F// TITLE: DSP2833x Device Emulation Register Definitions.
   468F//
   469F//###########################################################################
   470F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   471F// $Release Date: August 4, 2009 $
   472F//###########################################################################
   473F#ifndef DSP2833x_DEV_EMU_H
   474F#define DSP2833x_DEV_EMU_H
   475F//---------------------------------------------------------------------------
   476F// Device Emulation Register Bit Definitions:
   477F//
   478F// Device Configuration Register Bit Definitions
   479F
   480Fstruct DEVICECNF_BITS
   481F{                       // bits description
   482F  Uint16 rsvd1 : 3 ;
   483F                   // 2:0 reserved
   484F  Uint16 VMAPS : 1 ;
   485F                   // 3 VMAP Status
   486F  Uint16 rsvd2 : 1 ;
   487F                   // 4 reserved
   488F  Uint16 XRSn : 1 ;
   489F                  // 5 XRSn Signal Status
   490F  Uint16 rsvd3 : 10 ;
   491F                    // 15:6
   492F  Uint16 rsvd4 : 3 ;
   493F                   // 18:16
   494F  Uint16 ENPROT : 1 ;
   495F                    // 19 Enable/Disable pipeline protection
   496F  Uint16 rsvd5 : 7 ;
   497F                   // 26:20 reserved
   498F  Uint16 TRSTN : 1 ;
   499F                   // 27 Status of TRSTn signal
   500F  Uint16 rsvd6 : 4 ;
   501F                   // 31:28 reserved
   502F} ;
   503F
   504Funion DEVICECNF_REG
   505F{
   506F  Uint32 all ;
   507F  struct DEVICECNF_BITS bit ;
   508F} ;
   509F// CLASSID
   510F
   511Fstruct CLASSID_BITS
   512F{                     // bits description
   513F  Uint16 CLASSNO : 8 ;
   514F                     // 7:0 Class Number
   515F  Uint16 PARTTYPE : 8 ;
   516F                      // 15:8 Part Type
   517F} ;
   518F
   519Funion CLASSID_REG
   520F{
   521F  Uint16 all ;
   522F  struct CLASSID_BITS bit ;
   523F} ;
   524F
   525Fstruct DEV_EMU_REGS
   526F{
   527F  union DEVICECNF_REG DEVICECNF ; // device configuration
   528F  union CLASSID_REG CLASSID ; // Class ID
   529F  Uint16 REVID ; // Device ID
   530F  Uint16 PROTSTART ; // Write-Read protection start
   531F  Uint16 PROTRANGE ; // Write-Read protection range
   532F  Uint16 rsvd2 [ 202 ] ;
   533F} ;
   534F// PARTID
   535F
   536Fstruct PARTID_BITS
   537F{                    // bits description
   538F  Uint16 PARTNO : 8 ;
   539F                    // 7:0 Part Number
   540F  Uint16 PARTTYPE : 8 ;
   541F                      // 15:8 Part Type
   542F} ;
   543F
   544Funion PARTID_REG
   545F{
   546F  Uint16 all ;
   547F  struct PARTID_BITS bit ;
   548F} ;
   549F
   550Fstruct PARTID_REGS
   551F{
   552F  union PARTID_REG PARTID ; // Part ID
   553F} ;
   554F//---------------------------------------------------------------------------
   555F// Device Emulation Register References & Function Declarations:
   556F//
   557F
   558Fextern volatile struct DEV_EMU_REGS
   559F  DevEmuRegs ;
   560F
   561Fextern volatile struct PARTID_REGS
   562F  PartIdRegs ;
   563F       /* extern "C" */
   564F       // end of DSP2833x_DEV_EMU_H definition
   565F//===========================================================================
   566F// End of file.
   567F//===========================================================================
   568F 
   569F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DevEmu.h*/
   570F/*   CLOSE_FILE Include File */
   571F 
   572F             // Device Emulation Registers
   573F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_CpuTimers.h */
   574F// TI File $Revision: /main/4 $
   575F// Checkin $Date: March 20, 2007 15:33:42 $
   576F//###########################################################################
   577F//
   578F// FILE: DSP2833x_CpuTimers.h
   579F//
   580F// TITLE: DSP2833x CPU 32-bit Timers Register Definitions.
   581F//
   582F// NOTES: CpuTimer1 and CpuTimer2 are reserved for use with DSP BIOS and
   583F// other realtime operating systems.
   584F//
   585F// Do not use these two timers in your application if you ever plan
   586F// on integrating DSP-BIOS or another realtime OS.
   587F//
   588F// For this reason, comment out the code to manipulate these two timers
   589F// if using DSP-BIOS or another realtime OS.
   590F//
   591F//###########################################################################
   592F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   593F// $Release Date: August 4, 2009 $
   594F//###########################################################################
   595F#ifndef DSP2833x_CPU_TIMERS_H
   596F#define DSP2833x_CPU_TIMERS_H
   597F//---------------------------------------------------------------------------
   598F// CPU Timer Register Bit Definitions:
   599F//
   600F//
   601F// TCR: Control register bit definitions:
   602F
   603Fstruct TCR_BITS
   604F{                 // bits description
   605F  Uint16 rsvd1 : 4 ;
   606F                   // 3:0 reserved
   607F  Uint16 TSS : 1 ;
   608F                 // 4 Timer Start/Stop
   609F  Uint16 TRB : 1 ;
   610F                 // 5 Timer reload
   611F  Uint16 rsvd2 : 4 ;
   612F                   // 9:6 reserved
   613F  Uint16 SOFT : 1 ;
   614F                  // 10 Emulation modes
   615F  Uint16 FREE : 1 ;
   616F                  // 11
   617F  Uint16 rsvd3 : 2 ;
   618F                   // 12:13 reserved
   619F  Uint16 TIE : 1 ;
   620F                 // 14 Output enable
   621F  Uint16 TIF : 1 ;
   622F                 // 15 Interrupt flag
   623F} ;
   624F
   625Funion TCR_REG
   626F{
   627F  Uint16 all ;
   628F  struct TCR_BITS bit ;
   629F} ;
   630F// TPR: Pre-scale low bit definitions:
   631F
   632Fstruct TPR_BITS
   633F{                 // bits description
   634F  Uint16 TDDR : 8 ;
   635F                  // 7:0 Divide-down low
   636F  Uint16 PSC : 8 ;
   637F                 // 15:8 Prescale counter low
   638F} ;
   639F
   640Funion TPR_REG
   641F{
   642F  Uint16 all ;
   643F  struct TPR_BITS bit ;
   644F} ;
   645F// TPRH: Pre-scale high bit definitions:
   646F
   647Fstruct TPRH_BITS
   648F{                  // bits description
   649F  Uint16 TDDRH : 8 ;
   650F                   // 7:0 Divide-down high
   651F  Uint16 PSCH : 8 ;
   652F                  // 15:8 Prescale counter high
   653F} ;
   654F
   655Funion TPRH_REG
   656F{
   657F  Uint16 all ;
   658F  struct TPRH_BITS bit ;
   659F} ;
   660F// TIM, TIMH: Timer register definitions:
   661F
   662Fstruct TIM_REG
   663F{
   664F  Uint16 LSW ;
   665F  Uint16 MSW ;
   666F} ;
   667F
   668Funion TIM_GROUP
   669F{
   670F  Uint32 all ;
   671F  struct TIM_REG half ;
   672F} ;
   673F// PRD, PRDH: Period register definitions:
   674F
   675Fstruct PRD_REG
   676F{
   677F  Uint16 LSW ;
   678F  Uint16 MSW ;
   679F} ;
   680F
   681Funion PRD_GROUP
   682F{
   683F  Uint32 all ;
   684F  struct PRD_REG half ;
   685F} ;
   686F//---------------------------------------------------------------------------
   687F// CPU Timer Register File:
   688F//
   689F
   690Fstruct CPUTIMER_REGS
   691F{
   692F  union TIM_GROUP TIM ; // Timer counter register
   693F  union PRD_GROUP PRD ; // Period register
   694F  union TCR_REG TCR ; // Timer control register
   695F  Uint16 rsvd1 ; // reserved
   696F  union TPR_REG TPR ; // Timer pre-scale low
   697F  union TPRH_REG TPRH ; // Timer pre-scale high
   698F} ;
   699F//---------------------------------------------------------------------------
   700F// CPU Timer Support Variables:
   701F//
   702F
   703Fstruct CPUTIMER_VARS
   704F{
   705F  volatile struct CPUTIMER_REGS * RegsAddr ;
   706F  Uint32 InterruptCount ;
   707F  float CPUFreqInMHz ;
   708F  float PeriodInUSec ;
   709F} ;
   710F//---------------------------------------------------------------------------
   711F// Function prototypes and external definitions:
   712F//
   713F
   714Fvoid
   715F  InitCpuTimers ( void ) ;
   716F
   717Fvoid
   718T  ConfigCpuTimer (
   719F  struct CPUTIMER_VARS * Timer ,
   720F  float Freq ,
   721F  float Period ) ;
   722F
   723Fextern volatile struct CPUTIMER_REGS
   724F  CpuTimer0Regs ;
   725F
   726Fextern struct CPUTIMER_VARS
   727F  CpuTimer0 ;
   728F// CpuTimer 1 and CpuTimer2 are reserved for DSP BIOS & other RTOS. Comment out CpuTimer1 and CpuTimer2 if using DSP BIOS or other RTOS
   729F
   730Fextern volatile struct CPUTIMER_REGS
   731F  CpuTimer1Regs ;
   732F
   733Fextern volatile struct CPUTIMER_REGS
   734F  CpuTimer2Regs ;
   735F
   736Fextern struct CPUTIMER_VARS
   737F  CpuTimer1 ;
   738F
   739Fextern struct CPUTIMER_VARS
   740F  CpuTimer2 ;
   741F//---------------------------------------------------------------------------
   742F// Usefull Timer Operations:
   743F//
   744F// Start Timer:
   745F#define StartCpuTimer0( ) CpuTimer0Regs . TCR . bit . TSS = 0
   746F// Stop Timer:
   747F#define StopCpuTimer0( ) CpuTimer0Regs . TCR . bit . TSS = 1
   748F// Reload Timer With period Value:
   749F#define ReloadCpuTimer0( ) CpuTimer0Regs . TCR . bit . TRB = 1
   750F// Read 32-Bit Timer Value:
   751F#define ReadCpuTimer0Counter( ) CpuTimer0Regs . TIM . all
   752F// Read 32-Bit Period Value:
   753F#define ReadCpuTimer0Period( ) CpuTimer0Regs . PRD . all
   754F// CpuTimer 1 and CpuTimer2 are reserved for DSP BIOS & other RTOS
   755F// Do not use these two timers if you ever plan on integrating
   756F// DSP-BIOS or another realtime OS.
   757F//
   758F// For this reason, comment out the code to manipulate these two timers
   759F// if using DSP-BIOS or another realtime OS.
   760F// Start Timer:
   761F#define StartCpuTimer1( ) CpuTimer1Regs . TCR . bit . TSS = 0
   762F#define StartCpuTimer2( ) CpuTimer2Regs . TCR . bit . TSS = 0
   763F// Stop Timer:
   764F#define StopCpuTimer1( ) CpuTimer1Regs . TCR . bit . TSS = 1
   765F#define StopCpuTimer2( ) CpuTimer2Regs . TCR . bit . TSS = 1
   766F// Reload Timer With period Value:
   767F#define ReloadCpuTimer1( ) CpuTimer1Regs . TCR . bit . TRB = 1
   768F#define ReloadCpuTimer2( ) CpuTimer2Regs . TCR . bit . TRB = 1
   769F// Read 32-Bit Timer Value:
   770F#define ReadCpuTimer1Counter( ) CpuTimer1Regs . TIM . all
   771F#define ReadCpuTimer2Counter( ) CpuTimer2Regs . TIM . all
   772F// Read 32-Bit Period Value:
   773F#define ReadCpuTimer1Period( ) CpuTimer1Regs . PRD . all
   774F#define ReadCpuTimer2Period( ) CpuTimer2Regs . PRD . all
   775F       /* extern "C" */
   776F       // end of DSP2833x_CPU_TIMERS_H definition
   777F//===========================================================================
   778F// End of file.
   779F//===========================================================================
   780F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_CpuTimers.h*/
   781F/*   CLOSE_FILE Include File */
   782F 
   783F          // 32-bit CPU Timers
   784F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECan.h */
   785F// TI File $Revision: /main/2 $
   786F// Checkin $Date: May 7, 2007 16:05:39 $
   787F//###########################################################################
   788F//
   789F// FILE: DSP2833x_ECan.h
   790F//
   791F// TITLE: DSP2833x Device eCAN Register Definitions.
   792F//
   793F//###########################################################################
   794F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   795F// $Release Date: August 4, 2009 $
   796F//###########################################################################
   797F#ifndef DSP2833x_ECAN_H
   798F#define DSP2833x_ECAN_H
   799F/* --------------------------------------------------- */
   800F/* eCAN Control & Status Registers */
   801F/* ----------------------------------------------------*/
   802F/* eCAN Mailbox enable register (CANME) bit definitions */
   803F
   804Fstruct CANME_BITS
   805F{                   // bit description
   806F  Uint16 ME0 : 1 ;
   807F                 // 0 Enable Mailbox 0
   808F  Uint16 ME1 : 1 ;
   809F                 // 1 Enable Mailbox 1
   810F  Uint16 ME2 : 1 ;
   811F                 // 2 Enable Mailbox 2
   812F  Uint16 ME3 : 1 ;
   813F                 // 3 Enable Mailbox 3
   814F  Uint16 ME4 : 1 ;
   815F                 // 4 Enable Mailbox 4
   816F  Uint16 ME5 : 1 ;
   817F                 // 5 Enable Mailbox 5
   818F  Uint16 ME6 : 1 ;
   819F                 // 6 Enable Mailbox 6
   820F  Uint16 ME7 : 1 ;
   821F                 // 7 Enable Mailbox 7
   822F  Uint16 ME8 : 1 ;
   823F                 // 8 Enable Mailbox 8
   824F  Uint16 ME9 : 1 ;
   825F                 // 9 Enable Mailbox 9
   826F  Uint16 ME10 : 1 ;
   827F                  // 10 Enable Mailbox 10
   828F  Uint16 ME11 : 1 ;
   829F                  // 11 Enable Mailbox 11
   830F  Uint16 ME12 : 1 ;
   831F                  // 12 Enable Mailbox 12
   832F  Uint16 ME13 : 1 ;
   833F                  // 13 Enable Mailbox 13
   834F  Uint16 ME14 : 1 ;
   835F                  // 14 Enable Mailbox 14
   836F  Uint16 ME15 : 1 ;
   837F                  // 15 Enable Mailbox 15
   838F  Uint16 ME16 : 1 ;
   839F                  // 16 Enable Mailbox 16
   840F  Uint16 ME17 : 1 ;
   841F                  // 17 Enable Mailbox 17
   842F  Uint16 ME18 : 1 ;
   843F                  // 18 Enable Mailbox 18
   844F  Uint16 ME19 : 1 ;
   845F                  // 19 Enable Mailbox 19
   846F  Uint16 ME20 : 1 ;
   847F                  // 20 Enable Mailbox 20
   848F  Uint16 ME21 : 1 ;
   849F                  // 21 Enable Mailbox 21
   850F  Uint16 ME22 : 1 ;
   851F                  // 22 Enable Mailbox 22
   852F  Uint16 ME23 : 1 ;
   853F                  // 23 Enable Mailbox 23
   854F  Uint16 ME24 : 1 ;
   855F                  // 24 Enable Mailbox 24
   856F  Uint16 ME25 : 1 ;
   857F                  // 25 Enable Mailbox 25
   858F  Uint16 ME26 : 1 ;
   859F                  // 26 Enable Mailbox 26
   860F  Uint16 ME27 : 1 ;
   861F                  // 27 Enable Mailbox 27
   862F  Uint16 ME28 : 1 ;
   863F                  // 28 Enable Mailbox 28
   864F  Uint16 ME29 : 1 ;
   865F                  // 29 Enable Mailbox 29
   866F  Uint16 ME30 : 1 ;
   867F                  // 30 Enable Mailbox 30
   868F  Uint16 ME31 : 1 ;
   869F                  // 31 Enable Mailbox 31
   870F} ;
   871F/* Allow access to the bit fields or entire register */
   872F
   873Funion CANME_REG
   874F{
   875F  Uint32 all ;
   876F  struct CANME_BITS bit ;
   877F} ;
   878F/* eCAN Mailbox direction register (CANMD) bit definitions */
   879F
   880Fstruct CANMD_BITS
   881F{                   // bit description
   882F  Uint16 MD0 : 1 ;
   883F                 // 0 0 -> Tx 1 -> Rx
   884F  Uint16 MD1 : 1 ;
   885F                 // 1 0 -> Tx 1 -> Rx
   886F  Uint16 MD2 : 1 ;
   887F                 // 2 0 -> Tx 1 -> Rx
   888F  Uint16 MD3 : 1 ;
   889F                 // 3 0 -> Tx 1 -> Rx
   890F  Uint16 MD4 : 1 ;
   891F                 // 4 0 -> Tx 1 -> Rx
   892F  Uint16 MD5 : 1 ;
   893F                 // 5 0 -> Tx 1 -> Rx
   894F  Uint16 MD6 : 1 ;
   895F                 // 6 0 -> Tx 1 -> Rx
   896F  Uint16 MD7 : 1 ;
   897F                 // 7 0 -> Tx 1 -> Rx
   898F  Uint16 MD8 : 1 ;
   899F                 // 8 0 -> Tx 1 -> Rx
   900F  Uint16 MD9 : 1 ;
   901F                 // 9 0 -> Tx 1 -> Rx
   902F  Uint16 MD10 : 1 ;
   903F                  // 10 0 -> Tx 1 -> Rx
   904F  Uint16 MD11 : 1 ;
   905F                  // 11 0 -> Tx 1 -> Rx
   906F  Uint16 MD12 : 1 ;
   907F                  // 12 0 -> Tx 1 -> Rx
   908F  Uint16 MD13 : 1 ;
   909F                  // 13 0 -> Tx 1 -> Rx
   910F  Uint16 MD14 : 1 ;
   911F                  // 14 0 -> Tx 1 -> Rx
   912F  Uint16 MD15 : 1 ;
   913F                  // 15 0 -> Tx 1 -> Rx
   914F  Uint16 MD16 : 1 ;
   915F                  // 16 0 -> Tx 1 -> Rx
   916F  Uint16 MD17 : 1 ;
   917F                  // 17 0 -> Tx 1 -> Rx
   918F  Uint16 MD18 : 1 ;
   919F                  // 18 0 -> Tx 1 -> Rx
   920F  Uint16 MD19 : 1 ;
   921F                  // 19 0 -> Tx 1 -> Rx
   922F  Uint16 MD20 : 1 ;
   923F                  // 20 0 -> Tx 1 -> Rx
   924F  Uint16 MD21 : 1 ;
   925F                  // 21 0 -> Tx 1 -> Rx
   926F  Uint16 MD22 : 1 ;
   927F                  // 22 0 -> Tx 1 -> Rx
   928F  Uint16 MD23 : 1 ;
   929F                  // 23 0 -> Tx 1 -> Rx
   930F  Uint16 MD24 : 1 ;
   931F                  // 24 0 -> Tx 1 -> Rx
   932F  Uint16 MD25 : 1 ;
   933F                  // 25 0 -> Tx 1 -> Rx
   934F  Uint16 MD26 : 1 ;
   935F                  // 26 0 -> Tx 1 -> Rx
   936F  Uint16 MD27 : 1 ;
   937F                  // 27 0 -> Tx 1 -> Rx
   938F  Uint16 MD28 : 1 ;
   939F                  // 28 0 -> Tx 1 -> Rx
   940F  Uint16 MD29 : 1 ;
   941F                  // 29 0 -> Tx 1 -> Rx
   942F  Uint16 MD30 : 1 ;
   943F                  // 30 0 -> Tx 1 -> Rx
   944F  Uint16 MD31 : 1 ;
   945F                  // 31 0 -> Tx 1 -> Rx
   946F} ;
   947F/* Allow access to the bit fields or entire register */
   948F
   949Funion CANMD_REG
   950F{
   951F  Uint32 all ;
   952F  struct CANMD_BITS bit ;
   953F} ;
   954F/* eCAN Transmit Request Set register (CANTRS) bit definitions */
   955F
   956Fstruct CANTRS_BITS
   957F{                    // bit description
   958F  Uint16 TRS0 : 1 ;
   959F                  // 0 TRS for Mailbox 0
   960F  Uint16 TRS1 : 1 ;
   961F                  // 1 TRS for Mailbox 1
   962F  Uint16 TRS2 : 1 ;
   963F                  // 2 TRS for Mailbox 2
   964F  Uint16 TRS3 : 1 ;
   965F                  // 3 TRS for Mailbox 3
   966F  Uint16 TRS4 : 1 ;
   967F                  // 4 TRS for Mailbox 4
   968F  Uint16 TRS5 : 1 ;
   969F                  // 5 TRS for Mailbox 5
   970F  Uint16 TRS6 : 1 ;
   971F                  // 6 TRS for Mailbox 6
   972F  Uint16 TRS7 : 1 ;
   973F                  // 7 TRS for Mailbox 7
   974F  Uint16 TRS8 : 1 ;
   975F                  // 8 TRS for Mailbox 8
   976F  Uint16 TRS9 : 1 ;
   977F                  // 9 TRS for Mailbox 9
   978F  Uint16 TRS10 : 1 ;
   979F                   // 10 TRS for Mailbox 10
   980F  Uint16 TRS11 : 1 ;
   981F                   // 11 TRS for Mailbox 11
   982F  Uint16 TRS12 : 1 ;
   983F                   // 12 TRS for Mailbox 12
   984F  Uint16 TRS13 : 1 ;
   985F                   // 13 TRS for Mailbox 13
   986F  Uint16 TRS14 : 1 ;
   987F                   // 14 TRS for Mailbox 14
   988F  Uint16 TRS15 : 1 ;
   989F                   // 15 TRS for Mailbox 15
   990F  Uint16 TRS16 : 1 ;
   991F                   // 16 TRS for Mailbox 16
   992F  Uint16 TRS17 : 1 ;
   993F                   // 17 TRS for Mailbox 17
   994F  Uint16 TRS18 : 1 ;
   995F                   // 18 TRS for Mailbox 18
   996F  Uint16 TRS19 : 1 ;
   997F                   // 19 TRS for Mailbox 19
   998F  Uint16 TRS20 : 1 ;
   999F                   // 20 TRS for Mailbox 20
  1000F  Uint16 TRS21 : 1 ;
  1001F                   // 21 TRS for Mailbox 21
  1002F  Uint16 TRS22 : 1 ;
  1003F                   // 22 TRS for Mailbox 22
  1004F  Uint16 TRS23 : 1 ;
  1005F                   // 23 TRS for Mailbox 23
  1006F  Uint16 TRS24 : 1 ;
  1007F                   // 24 TRS for Mailbox 24
  1008F  Uint16 TRS25 : 1 ;
  1009F                   // 25 TRS for Mailbox 25
  1010F  Uint16 TRS26 : 1 ;
  1011F                   // 26 TRS for Mailbox 26
  1012F  Uint16 TRS27 : 1 ;
  1013F                   // 27 TRS for Mailbox 27
  1014F  Uint16 TRS28 : 1 ;
  1015F                   // 28 TRS for Mailbox 28
  1016F  Uint16 TRS29 : 1 ;
  1017F                   // 29 TRS for Mailbox 29
  1018F  Uint16 TRS30 : 1 ;
  1019F                   // 30 TRS for Mailbox 30
  1020F  Uint16 TRS31 : 1 ;
  1021F                   // 31 TRS for Mailbox 31
  1022F} ;
  1023F/* Allow access to the bit fields or entire register */
  1024F
  1025Funion CANTRS_REG
  1026F{
  1027F  Uint32 all ;
  1028F  struct CANTRS_BITS bit ;
  1029F} ;
  1030F/* eCAN Transmit Request Reset register (CANTRR) bit definitions */
  1031F
  1032Fstruct CANTRR_BITS
  1033F{                    // bit description
  1034F  Uint16 TRR0 : 1 ;
  1035F                  // 0 TRR for Mailbox 0
  1036F  Uint16 TRR1 : 1 ;
  1037F                  // 1 TRR for Mailbox 1
  1038F  Uint16 TRR2 : 1 ;
  1039F                  // 2 TRR for Mailbox 2
  1040F  Uint16 TRR3 : 1 ;
  1041F                  // 3 TRR for Mailbox 3
  1042F  Uint16 TRR4 : 1 ;
  1043F                  // 4 TRR for Mailbox 4
  1044F  Uint16 TRR5 : 1 ;
  1045F                  // 5 TRR for Mailbox 5
  1046F  Uint16 TRR6 : 1 ;
  1047F                  // 6 TRR for Mailbox 6
  1048F  Uint16 TRR7 : 1 ;
  1049F                  // 7 TRR for Mailbox 7
  1050F  Uint16 TRR8 : 1 ;
  1051F                  // 8 TRR for Mailbox 8
  1052F  Uint16 TRR9 : 1 ;
  1053F                  // 9 TRR for Mailbox 9
  1054F  Uint16 TRR10 : 1 ;
  1055F                   // 10 TRR for Mailbox 10
  1056F  Uint16 TRR11 : 1 ;
  1057F                   // 11 TRR for Mailbox 11
  1058F  Uint16 TRR12 : 1 ;
  1059F                   // 12 TRR for Mailbox 12
  1060F  Uint16 TRR13 : 1 ;
  1061F                   // 13 TRR for Mailbox 13
  1062F  Uint16 TRR14 : 1 ;
  1063F                   // 14 TRR for Mailbox 14
  1064F  Uint16 TRR15 : 1 ;
  1065F                   // 15 TRR for Mailbox 15
  1066F  Uint16 TRR16 : 1 ;
  1067F                   // 16 TRR for Mailbox 16
  1068F  Uint16 TRR17 : 1 ;
  1069F                   // 17 TRR for Mailbox 17
  1070F  Uint16 TRR18 : 1 ;
  1071F                   // 18 TRR for Mailbox 18
  1072F  Uint16 TRR19 : 1 ;
  1073F                   // 19 TRR for Mailbox 19
  1074F  Uint16 TRR20 : 1 ;
  1075F                   // 20 TRR for Mailbox 20
  1076F  Uint16 TRR21 : 1 ;
  1077F                   // 21 TRR for Mailbox 21
  1078F  Uint16 TRR22 : 1 ;
  1079F                   // 22 TRR for Mailbox 22
  1080F  Uint16 TRR23 : 1 ;
  1081F                   // 23 TRR for Mailbox 23
  1082F  Uint16 TRR24 : 1 ;
  1083F                   // 24 TRR for Mailbox 24
  1084F  Uint16 TRR25 : 1 ;
  1085F                   // 25 TRR for Mailbox 25
  1086F  Uint16 TRR26 : 1 ;
  1087F                   // 26 TRR for Mailbox 26
  1088F  Uint16 TRR27 : 1 ;
  1089F                   // 27 TRR for Mailbox 27
  1090F  Uint16 TRR28 : 1 ;
  1091F                   // 28 TRR for Mailbox 28
  1092F  Uint16 TRR29 : 1 ;
  1093F                   // 29 TRR for Mailbox 29
  1094F  Uint16 TRR30 : 1 ;
  1095F                   // 30 TRR for Mailbox 30
  1096F  Uint16 TRR31 : 1 ;
  1097F                   // 31 TRR for Mailbox 31
  1098F} ;
  1099F/* Allow access to the bit fields or entire register */
  1100F
  1101Funion CANTRR_REG
  1102F{
  1103F  Uint32 all ;
  1104F  struct CANTRR_BITS bit ;
  1105F} ;
  1106F/* eCAN Transmit Acknowledge register (CANTA) bit definitions */
  1107F
  1108Fstruct CANTA_BITS
  1109F{                   // bit description
  1110F  Uint16 TA0 : 1 ;
  1111F                 // 0 TA for Mailbox 0
  1112F  Uint16 TA1 : 1 ;
  1113F                 // 1 TA for Mailbox 1
  1114F  Uint16 TA2 : 1 ;
  1115F                 // 2 TA for Mailbox 2
  1116F  Uint16 TA3 : 1 ;
  1117F                 // 3 TA for Mailbox 3
  1118F  Uint16 TA4 : 1 ;
  1119F                 // 4 TA for Mailbox 4
  1120F  Uint16 TA5 : 1 ;
  1121F                 // 5 TA for Mailbox 5
  1122F  Uint16 TA6 : 1 ;
  1123F                 // 6 TA for Mailbox 6
  1124F  Uint16 TA7 : 1 ;
  1125F                 // 7 TA for Mailbox 7
  1126F  Uint16 TA8 : 1 ;
  1127F                 // 8 TA for Mailbox 8
  1128F  Uint16 TA9 : 1 ;
  1129F                 // 9 TA for Mailbox 9
  1130F  Uint16 TA10 : 1 ;
  1131F                  // 10 TA for Mailbox 10
  1132F  Uint16 TA11 : 1 ;
  1133F                  // 11 TA for Mailbox 11
  1134F  Uint16 TA12 : 1 ;
  1135F                  // 12 TA for Mailbox 12
  1136F  Uint16 TA13 : 1 ;
  1137F                  // 13 TA for Mailbox 13
  1138F  Uint16 TA14 : 1 ;
  1139F                  // 14 TA for Mailbox 14
  1140F  Uint16 TA15 : 1 ;
  1141F                  // 15 TA for Mailbox 15
  1142F  Uint16 TA16 : 1 ;
  1143F                  // 16 TA for Mailbox 16
  1144F  Uint16 TA17 : 1 ;
  1145F                  // 17 TA for Mailbox 17
  1146F  Uint16 TA18 : 1 ;
  1147F                  // 18 TA for Mailbox 18
  1148F  Uint16 TA19 : 1 ;
  1149F                  // 19 TA for Mailbox 19
  1150F  Uint16 TA20 : 1 ;
  1151F                  // 20 TA for Mailbox 20
  1152F  Uint16 TA21 : 1 ;
  1153F                  // 21 TA for Mailbox 21
  1154F  Uint16 TA22 : 1 ;
  1155F                  // 22 TA for Mailbox 22
  1156F  Uint16 TA23 : 1 ;
  1157F                  // 23 TA for Mailbox 23
  1158F  Uint16 TA24 : 1 ;
  1159F                  // 24 TA for Mailbox 24
  1160F  Uint16 TA25 : 1 ;
  1161F                  // 25 TA for Mailbox 25
  1162F  Uint16 TA26 : 1 ;
  1163F                  // 26 TA for Mailbox 26
  1164F  Uint16 TA27 : 1 ;
  1165F                  // 27 TA for Mailbox 27
  1166F  Uint16 TA28 : 1 ;
  1167F                  // 28 TA for Mailbox 28
  1168F  Uint16 TA29 : 1 ;
  1169F                  // 29 TA for Mailbox 29
  1170F  Uint16 TA30 : 1 ;
  1171F                  // 30 TA for Mailbox 30
  1172F  Uint16 TA31 : 1 ;
  1173F                  // 31 TA for Mailbox 31
  1174F} ;
  1175F/* Allow access to the bit fields or entire register */
  1176F
  1177Funion CANTA_REG
  1178F{
  1179F  Uint32 all ;
  1180F  struct CANTA_BITS bit ;
  1181F} ;
  1182F/* eCAN Transmit Abort Acknowledge register (CANAA) bit definitions */
  1183F
  1184Fstruct CANAA_BITS
  1185F{                   // bit description
  1186F  Uint16 AA0 : 1 ;
  1187F                 // 0 AA for Mailbox 0
  1188F  Uint16 AA1 : 1 ;
  1189F                 // 1 AA for Mailbox 1
  1190F  Uint16 AA2 : 1 ;
  1191F                 // 2 AA for Mailbox 2
  1192F  Uint16 AA3 : 1 ;
  1193F                 // 3 AA for Mailbox 3
  1194F  Uint16 AA4 : 1 ;
  1195F                 // 4 AA for Mailbox 4
  1196F  Uint16 AA5 : 1 ;
  1197F                 // 5 AA for Mailbox 5
  1198F  Uint16 AA6 : 1 ;
  1199F                 // 6 AA for Mailbox 6
  1200F  Uint16 AA7 : 1 ;
  1201F                 // 7 AA for Mailbox 7
  1202F  Uint16 AA8 : 1 ;
  1203F                 // 8 AA for Mailbox 8
  1204F  Uint16 AA9 : 1 ;
  1205F                 // 9 AA for Mailbox 9
  1206F  Uint16 AA10 : 1 ;
  1207F                  // 10 AA for Mailbox 10
  1208F  Uint16 AA11 : 1 ;
  1209F                  // 11 AA for Mailbox 11
  1210F  Uint16 AA12 : 1 ;
  1211F                  // 12 AA for Mailbox 12
  1212F  Uint16 AA13 : 1 ;
  1213F                  // 13 AA for Mailbox 13
  1214F  Uint16 AA14 : 1 ;
  1215F                  // 14 AA for Mailbox 14
  1216F  Uint16 AA15 : 1 ;
  1217F                  // 15 AA for Mailbox 15
  1218F  Uint16 AA16 : 1 ;
  1219F                  // 16 AA for Mailbox 16
  1220F  Uint16 AA17 : 1 ;
  1221F                  // 17 AA for Mailbox 17
  1222F  Uint16 AA18 : 1 ;
  1223F                  // 18 AA for Mailbox 18
  1224F  Uint16 AA19 : 1 ;
  1225F                  // 19 AA for Mailbox 19
  1226F  Uint16 AA20 : 1 ;
  1227F                  // 20 AA for Mailbox 20
  1228F  Uint16 AA21 : 1 ;
  1229F                  // 21 AA for Mailbox 21
  1230F  Uint16 AA22 : 1 ;
  1231F                  // 22 AA for Mailbox 22
  1232F  Uint16 AA23 : 1 ;
  1233F                  // 23 AA for Mailbox 23
  1234F  Uint16 AA24 : 1 ;
  1235F                  // 24 AA for Mailbox 24
  1236F  Uint16 AA25 : 1 ;
  1237F                  // 25 AA for Mailbox 25
  1238F  Uint16 AA26 : 1 ;
  1239F                  // 26 AA for Mailbox 26
  1240F  Uint16 AA27 : 1 ;
  1241F                  // 27 AA for Mailbox 27
  1242F  Uint16 AA28 : 1 ;
  1243F                  // 28 AA for Mailbox 28
  1244F  Uint16 AA29 : 1 ;
  1245F                  // 29 AA for Mailbox 29
  1246F  Uint16 AA30 : 1 ;
  1247F                  // 30 AA for Mailbox 30
  1248F  Uint16 AA31 : 1 ;
  1249F                  // 31 AA for Mailbox 31
  1250F} ;
  1251F/* Allow access to the bit fields or entire register */
  1252F
  1253Funion CANAA_REG
  1254F{
  1255F  Uint32 all ;
  1256F  struct CANAA_BITS bit ;
  1257F} ;
  1258F/* eCAN Received Message Pending register (CANRMP) bit definitions */
  1259F
  1260Fstruct CANRMP_BITS
  1261F{                    // bit description
  1262F  Uint16 RMP0 : 1 ;
  1263F                  // 0 RMP for Mailbox 0
  1264F  Uint16 RMP1 : 1 ;
  1265F                  // 1 RMP for Mailbox 1
  1266F  Uint16 RMP2 : 1 ;
  1267F                  // 2 RMP for Mailbox 2
  1268F  Uint16 RMP3 : 1 ;
  1269F                  // 3 RMP for Mailbox 3
  1270F  Uint16 RMP4 : 1 ;
  1271F                  // 4 RMP for Mailbox 4
  1272F  Uint16 RMP5 : 1 ;
  1273F                  // 5 RMP for Mailbox 5
  1274F  Uint16 RMP6 : 1 ;
  1275F                  // 6 RMP for Mailbox 6
  1276F  Uint16 RMP7 : 1 ;
  1277F                  // 7 RMP for Mailbox 7
  1278F  Uint16 RMP8 : 1 ;
  1279F                  // 8 RMP for Mailbox 8
  1280F  Uint16 RMP9 : 1 ;
  1281F                  // 9 RMP for Mailbox 9
  1282F  Uint16 RMP10 : 1 ;
  1283F                   // 10 RMP for Mailbox 10
  1284F  Uint16 RMP11 : 1 ;
  1285F                   // 11 RMP for Mailbox 11
  1286F  Uint16 RMP12 : 1 ;
  1287F                   // 12 RMP for Mailbox 12
  1288F  Uint16 RMP13 : 1 ;
  1289F                   // 13 RMP for Mailbox 13
  1290F  Uint16 RMP14 : 1 ;
  1291F                   // 14 RMP for Mailbox 14
  1292F  Uint16 RMP15 : 1 ;
  1293F                   // 15 RMP for Mailbox 15
  1294F  Uint16 RMP16 : 1 ;
  1295F                   // 16 RMP for Mailbox 16
  1296F  Uint16 RMP17 : 1 ;
  1297F                   // 17 RMP for Mailbox 17
  1298F  Uint16 RMP18 : 1 ;
  1299F                   // 18 RMP for Mailbox 18
  1300F  Uint16 RMP19 : 1 ;
  1301F                   // 19 RMP for Mailbox 19
  1302F  Uint16 RMP20 : 1 ;
  1303F                   // 20 RMP for Mailbox 20
  1304F  Uint16 RMP21 : 1 ;
  1305F                   // 21 RMP for Mailbox 21
  1306F  Uint16 RMP22 : 1 ;
  1307F                   // 22 RMP for Mailbox 22
  1308F  Uint16 RMP23 : 1 ;
  1309F                   // 23 RMP for Mailbox 23
  1310F  Uint16 RMP24 : 1 ;
  1311F                   // 24 RMP for Mailbox 24
  1312F  Uint16 RMP25 : 1 ;
  1313F                   // 25 RMP for Mailbox 25
  1314F  Uint16 RMP26 : 1 ;
  1315F                   // 26 RMP for Mailbox 26
  1316F  Uint16 RMP27 : 1 ;
  1317F                   // 27 RMP for Mailbox 27
  1318F  Uint16 RMP28 : 1 ;
  1319F                   // 28 RMP for Mailbox 28
  1320F  Uint16 RMP29 : 1 ;
  1321F                   // 29 RMP for Mailbox 29
  1322F  Uint16 RMP30 : 1 ;
  1323F                   // 30 RMP for Mailbox 30
  1324F  Uint16 RMP31 : 1 ;
  1325F                   // 31 RMP for Mailbox 31
  1326F} ;
  1327F/* Allow access to the bit fields or entire register */
  1328F
  1329Funion CANRMP_REG
  1330F{
  1331F  Uint32 all ;
  1332F  struct CANRMP_BITS bit ;
  1333F} ;
  1334F/* eCAN Received Message Lost register (CANRML) bit definitions */
  1335F
  1336Fstruct CANRML_BITS
  1337F{                    // bit description
  1338F  Uint16 RML0 : 1 ;
  1339F                  // 0 RML for Mailbox 0
  1340F  Uint16 RML1 : 1 ;
  1341F                  // 1 RML for Mailbox 1
  1342F  Uint16 RML2 : 1 ;
  1343F                  // 2 RML for Mailbox 2
  1344F  Uint16 RML3 : 1 ;
  1345F                  // 3 RML for Mailbox 3
  1346F  Uint16 RML4 : 1 ;
  1347F                  // 4 RML for Mailbox 4
  1348F  Uint16 RML5 : 1 ;
  1349F                  // 5 RML for Mailbox 5
  1350F  Uint16 RML6 : 1 ;
  1351F                  // 6 RML for Mailbox 6
  1352F  Uint16 RML7 : 1 ;
  1353F                  // 7 RML for Mailbox 7
  1354F  Uint16 RML8 : 1 ;
  1355F                  // 8 RML for Mailbox 8
  1356F  Uint16 RML9 : 1 ;
  1357F                  // 9 RML for Mailbox 9
  1358F  Uint16 RML10 : 1 ;
  1359F                   // 10 RML for Mailbox 10
  1360F  Uint16 RML11 : 1 ;
  1361F                   // 11 RML for Mailbox 11
  1362F  Uint16 RML12 : 1 ;
  1363F                   // 12 RML for Mailbox 12
  1364F  Uint16 RML13 : 1 ;
  1365F                   // 13 RML for Mailbox 13
  1366F  Uint16 RML14 : 1 ;
  1367F                   // 14 RML for Mailbox 14
  1368F  Uint16 RML15 : 1 ;
  1369F                   // 15 RML for Mailbox 15
  1370F  Uint16 RML16 : 1 ;
  1371F                   // 16 RML for Mailbox 16
  1372F  Uint16 RML17 : 1 ;
  1373F                   // 17 RML for Mailbox 17
  1374F  Uint16 RML18 : 1 ;
  1375F                   // 18 RML for Mailbox 18
  1376F  Uint16 RML19 : 1 ;
  1377F                   // 19 RML for Mailbox 19
  1378F  Uint16 RML20 : 1 ;
  1379F                   // 20 RML for Mailbox 20
  1380F  Uint16 RML21 : 1 ;
  1381F                   // 21 RML for Mailbox 21
  1382F  Uint16 RML22 : 1 ;
  1383F                   // 22 RML for Mailbox 22
  1384F  Uint16 RML23 : 1 ;
  1385F                   // 23 RML for Mailbox 23
  1386F  Uint16 RML24 : 1 ;
  1387F                   // 24 RML for Mailbox 24
  1388F  Uint16 RML25 : 1 ;
  1389F                   // 25 RML for Mailbox 25
  1390F  Uint16 RML26 : 1 ;
  1391F                   // 26 RML for Mailbox 26
  1392F  Uint16 RML27 : 1 ;
  1393F                   // 27 RML for Mailbox 27
  1394F  Uint16 RML28 : 1 ;
  1395F                   // 28 RML for Mailbox 28
  1396F  Uint16 RML29 : 1 ;
  1397F                   // 29 RML for Mailbox 29
  1398F  Uint16 RML30 : 1 ;
  1399F                   // 30 RML for Mailbox 30
  1400F  Uint16 RML31 : 1 ;
  1401F                   // 31 RML for Mailbox 31
  1402F} ;
  1403F/* Allow access to the bit fields or entire register */
  1404F
  1405Funion CANRML_REG
  1406F{
  1407F  Uint32 all ;
  1408F  struct CANRML_BITS bit ;
  1409F} ;
  1410F/* eCAN Remote Frame Pending register (CANRFP) bit definitions */
  1411F
  1412Fstruct CANRFP_BITS
  1413F{                    // bit description
  1414F  Uint16 RFP0 : 1 ;
  1415F                  // 0 RFP for Mailbox 0
  1416F  Uint16 RFP1 : 1 ;
  1417F                  // 1 RFP for Mailbox 1
  1418F  Uint16 RFP2 : 1 ;
  1419F                  // 2 RFP for Mailbox 2
  1420F  Uint16 RFP3 : 1 ;
  1421F                  // 3 RFP for Mailbox 3
  1422F  Uint16 RFP4 : 1 ;
  1423F                  // 4 RFP for Mailbox 4
  1424F  Uint16 RFP5 : 1 ;
  1425F                  // 5 RFP for Mailbox 5
  1426F  Uint16 RFP6 : 1 ;
  1427F                  // 6 RFP for Mailbox 6
  1428F  Uint16 RFP7 : 1 ;
  1429F                  // 7 RFP for Mailbox 7
  1430F  Uint16 RFP8 : 1 ;
  1431F                  // 8 RFP for Mailbox 8
  1432F  Uint16 RFP9 : 1 ;
  1433F                  // 9 RFP for Mailbox 9
  1434F  Uint16 RFP10 : 1 ;
  1435F                   // 10 RFP for Mailbox 10
  1436F  Uint16 RFP11 : 1 ;
  1437F                   // 11 RFP for Mailbox 11
  1438F  Uint16 RFP12 : 1 ;
  1439F                   // 12 RFP for Mailbox 12
  1440F  Uint16 RFP13 : 1 ;
  1441F                   // 13 RFP for Mailbox 13
  1442F  Uint16 RFP14 : 1 ;
  1443F                   // 14 RFP for Mailbox 14
  1444F  Uint16 RFP15 : 1 ;
  1445F                   // 15 RFP for Mailbox 15
  1446F  Uint16 RFP16 : 1 ;
  1447F                   // 16 RFP for Mailbox 16
  1448F  Uint16 RFP17 : 1 ;
  1449F                   // 17 RFP for Mailbox 17
  1450F  Uint16 RFP18 : 1 ;
  1451F                   // 18 RFP for Mailbox 18
  1452F  Uint16 RFP19 : 1 ;
  1453F                   // 19 RFP for Mailbox 19
  1454F  Uint16 RFP20 : 1 ;
  1455F                   // 20 RFP for Mailbox 20
  1456F  Uint16 RFP21 : 1 ;
  1457F                   // 21 RFP for Mailbox 21
  1458F  Uint16 RFP22 : 1 ;
  1459F                   // 22 RFP for Mailbox 22
  1460F  Uint16 RFP23 : 1 ;
  1461F                   // 23 RFP for Mailbox 23
  1462F  Uint16 RFP24 : 1 ;
  1463F                   // 24 RFP for Mailbox 24
  1464F  Uint16 RFP25 : 1 ;
  1465F                   // 25 RFP for Mailbox 25
  1466F  Uint16 RFP26 : 1 ;
  1467F                   // 26 RFP for Mailbox 26
  1468F  Uint16 RFP27 : 1 ;
  1469F                   // 27 RFP for Mailbox 27
  1470F  Uint16 RFP28 : 1 ;
  1471F                   // 28 RFP for Mailbox 28
  1472F  Uint16 RFP29 : 1 ;
  1473F                   // 29 RFP for Mailbox 29
  1474F  Uint16 RFP30 : 1 ;
  1475F                   // 30 RFP for Mailbox 30
  1476F  Uint16 RFP31 : 1 ;
  1477F                   // 31 RFP for Mailbox 31
  1478F} ;
  1479F/* Allow access to the bit fields or entire register */
  1480F
  1481Funion CANRFP_REG
  1482F{
  1483F  Uint32 all ;
  1484F  struct CANRFP_BITS bit ;
  1485F} ;
  1486F/* eCAN Global Acceptance Mask register (CANGAM) bit definitions */
  1487F
  1488Fstruct CANGAM_BITS
  1489F{                    // bits description
  1490F  Uint16 GAM150 : 16 ;
  1491F                     // 15:0 Global acceptance mask bits 0-15
  1492F  Uint16 GAM2816 : 13 ;
  1493F                      // 28:16 Global acceptance mask bits 16-28
  1494F  Uint16 rsvd : 2 ;
  1495F                  // 30:29 reserved
  1496F  Uint16 AMI : 1 ;
  1497F                 // 31 AMI bit
  1498F} ;
  1499F/* Allow access to the bit fields or entire register */
  1500F
  1501Funion CANGAM_REG
  1502F{
  1503F  Uint32 all ;
  1504F  struct CANGAM_BITS bit ;
  1505F} ;
  1506F/* eCAN Master Control register (CANMC) bit definitions */
  1507F
  1508Fstruct CANMC_BITS
  1509F{                   // bits description
  1510F  Uint16 MBNR : 5 ;
  1511F                  // 4:0 MBX #for CDR bit
  1512F  Uint16 SRES : 1 ;
  1513F                  // 5 Soft reset
  1514F  Uint16 STM : 1 ;
  1515F                 // 6 Self-test mode
  1516F  Uint16 ABO : 1 ;
  1517F                 // 7 Auto bus-on
  1518F  Uint16 CDR : 1 ;
  1519F                 // 8 Change data request
  1520F  Uint16 WUBA : 1 ;
  1521F                  // 9 Wake-up on bus activity
  1522F  Uint16 DBO : 1 ;
  1523F                 // 10 Data-byte order
  1524F  Uint16 PDR : 1 ;
  1525F                 // 11 Power-down mode request
  1526F  Uint16 CCR : 1 ;
  1527F                 // 12 Change configuration request
  1528F  Uint16 SCB : 1 ;
  1529F                 // 13 SCC compatibility bit
  1530F  Uint16 TCC : 1 ;
  1531F                 // 14 TSC MSB clear bit
  1532F  Uint16 MBCC : 1 ;
  1533F                  // 15 TSC clear bit thru mailbox 16
  1534F  Uint16 SUSP : 1 ;
  1535F                  // 16 SUSPEND free/soft bit
  1536F  Uint16 rsvd : 15 ;
  1537F                   // 31:17 reserved
  1538F} ;
  1539F/* Allow access to the bit fields or entire register */
  1540F
  1541Funion CANMC_REG
  1542F{
  1543F  Uint32 all ;
  1544F  struct CANMC_BITS bit ;
  1545F} ;
  1546F/* eCAN Bit -timing configuration register (CANBTC) bit definitions */
  1547F
  1548Fstruct CANBTC_BITS
  1549F{                    // bits description
  1550F  Uint16 TSEG2REG : 3 ;
  1551F                      // 2:0 TSEG2 register value
  1552F  Uint16 TSEG1REG : 4 ;
  1553F                      // 6:3 TSEG1 register value
  1554F  Uint16 SAM : 1 ;
  1555F                 // 7 Sample-point setting
  1556F  Uint16 SJWREG : 2 ;
  1557F                    // 9:8 Synchroniztion Jump Width register value
  1558F  Uint16 rsvd1 : 6 ;
  1559F                   // 15:10 reserved
  1560F  Uint16 BRPREG : 8 ;
  1561F                    // 23:16 Baudrate prescaler register value
  1562F  Uint16 rsvd2 : 8 ;
  1563F                   // 31:24 reserved
  1564F} ;
  1565F/* Allow access to the bit fields or entire register */
  1566F
  1567Funion CANBTC_REG
  1568F{
  1569F  Uint32 all ;
  1570F  struct CANBTC_BITS bit ;
  1571F} ;
  1572F/* eCAN Error & Status register (CANES) bit definitions */
  1573F
  1574Fstruct CANES_BITS
  1575F{                   // bits description
  1576F  Uint16 TM : 1 ;
  1577F                // 0 Transmit Mode
  1578F  Uint16 RM : 1 ;
  1579F                // 1 Receive Mode
  1580F  Uint16 rsvd1 : 1 ;
  1581F                   // 2 reserved
  1582F  Uint16 PDA : 1 ;
  1583F                 // 3 Power-down acknowledge
  1584F  Uint16 CCE : 1 ;
  1585F                 // 4 Change Configuration Enable
  1586F  Uint16 SMA : 1 ;
  1587F                 // 5 Suspend Mode Acknowledge
  1588F  Uint16 rsvd2 : 10 ;
  1589F                    // 15:6 reserved
  1590F  Uint16 EW : 1 ;
  1591F                // 16 Warning status
  1592F  Uint16 EP : 1 ;
  1593F                // 17 Error Passive status
  1594F  Uint16 BO : 1 ;
  1595F                // 18 Bus-off status
  1596F  Uint16 ACKE : 1 ;
  1597F                  // 19 Acknowledge error
  1598F  Uint16 SE : 1 ;
  1599F                // 20 Stuff error
  1600F  Uint16 CRCE : 1 ;
  1601F                  // 21 CRC error
  1602F  Uint16 SA1 : 1 ;
  1603F                 // 22 Stuck at Dominant error
  1604F  Uint16 BE : 1 ;
  1605F                // 23 Bit error
  1606F  Uint16 FE : 1 ;
  1607F                // 24 Framing error
  1608F  Uint16 rsvd3 : 7 ;
  1609F                   // 31:25 reserved
  1610F} ;
  1611F/* Allow access to the bit fields or entire register */
  1612F
  1613Funion CANES_REG
  1614F{
  1615F  Uint32 all ;
  1616F  struct CANES_BITS bit ;
  1617F} ;
  1618F/* eCAN Transmit Error Counter register (CANTEC) bit definitions */
  1619F
  1620Fstruct CANTEC_BITS
  1621F{                    // bits description
  1622F  Uint16 TEC : 8 ;
  1623F                 // 7:0 TEC
  1624F  Uint16 rsvd1 : 8 ;
  1625F                   // 15:8 reserved
  1626F  Uint16 rsvd2 : 16 ;
  1627F                    // 31:16 reserved
  1628F} ;
  1629F/* Allow access to the bit fields or entire register */
  1630F
  1631Funion CANTEC_REG
  1632F{
  1633F  Uint32 all ;
  1634F  struct CANTEC_BITS bit ;
  1635F} ;
  1636F/* eCAN Receive Error Counter register (CANREC) bit definitions */
  1637F
  1638Fstruct CANREC_BITS
  1639F{                    // bits description
  1640F  Uint16 REC : 8 ;
  1641F                 // 7:0 REC
  1642F  Uint16 rsvd1 : 8 ;
  1643F                   // 15:8 reserved
  1644F  Uint16 rsvd2 : 16 ;
  1645F                    // 31:16 reserved
  1646F} ;
  1647F/* Allow access to the bit fields or entire register */
  1648F
  1649Funion CANREC_REG
  1650F{
  1651F  Uint32 all ;
  1652F  struct CANREC_BITS bit ;
  1653F} ;
  1654F/* eCAN Global Interrupt Flag 0 (CANGIF0) bit definitions */
  1655F
  1656Fstruct CANGIF0_BITS
  1657F{                     // bits description
  1658F  Uint16 MIV0 : 5 ;
  1659F                  // 4:0 Mailbox Interrupt Vector
  1660F  Uint16 rsvd1 : 3 ;
  1661F                   // 7:5 reserved
  1662F  Uint16 WLIF0 : 1 ;
  1663F                   // 8 Warning level interrupt flag
  1664F  Uint16 EPIF0 : 1 ;
  1665F                   // 9 Error-passive interrupt flag
  1666F  Uint16 BOIF0 : 1 ;
  1667F                   // 10 Bus-off interrupt flag
  1668F  Uint16 RMLIF0 : 1 ;
  1669F                    // 11 Received message lost interrupt flag
  1670F  Uint16 WUIF0 : 1 ;
  1671F                   // 12 Wakeup interrupt flag
  1672F  Uint16 WDIF0 : 1 ;
  1673F                   // 13 Write denied interrupt flag
  1674F  Uint16 AAIF0 : 1 ;
  1675F                   // 14 Abort Ack interrupt flag
  1676F  Uint16 GMIF0 : 1 ;
  1677F                   // 15 Global MBX interrupt flag
  1678F  Uint16 TCOF0 : 1 ;
  1679F                   // 16 TSC Overflow flag
  1680F  Uint16 MTOF0 : 1 ;
  1681F                   // 17 Mailbox Timeout flag
  1682F  Uint16 rsvd2 : 14 ;
  1683F                    // 31:18 reserved
  1684F} ;
  1685F/* Allow access to the bit fields or entire register */
  1686F
  1687Funion CANGIF0_REG
  1688F{
  1689F  Uint32 all ;
  1690F  struct CANGIF0_BITS bit ;
  1691F} ;
  1692F/* eCAN Global Interrupt Mask register (CANGIM) bit definitions */
  1693F
  1694Fstruct CANGIM_BITS
  1695F{                    // bits description
  1696F  Uint16 I0EN : 1 ;
  1697F                  // 0 Interrupt 0 enable
  1698F  Uint16 I1EN : 1 ;
  1699F                  // 1 Interrupt 1 enable
  1700F  Uint16 GIL : 1 ;
  1701F                 // 2 Global Interrupt Level
  1702F  Uint16 rsvd1 : 5 ;
  1703F                   // 7:3 reserved
  1704F  Uint16 WLIM : 1 ;
  1705F                  // 8 Warning level interrupt mask
  1706F  Uint16 EPIM : 1 ;
  1707F                  // 9 Error-passive interrupt mask
  1708F  Uint16 BOIM : 1 ;
  1709F                  // 10 Bus-off interrupt mask
  1710F  Uint16 RMLIM : 1 ;
  1711F                   // 11 Received message lost interrupt mask
  1712F  Uint16 WUIM : 1 ;
  1713F                  // 12 Wakeup interrupt mask
  1714F  Uint16 WDIM : 1 ;
  1715F                  // 13 Write denied interrupt mask
  1716F  Uint16 AAIM : 1 ;
  1717F                  // 14 Abort Ack interrupt mask
  1718F  Uint16 rsvd2 : 1 ;
  1719F                   // 15 reserved
  1720F  Uint16 TCOM : 1 ;
  1721F                  // 16 TSC overflow interrupt mask
  1722F  Uint16 MTOM : 1 ;
  1723F                  // 17 MBX Timeout interrupt mask
  1724F  Uint16 rsvd3 : 14 ;
  1725F                    // 31:18 reserved
  1726F} ;
  1727F/* Allow access to the bit fields or entire register */
  1728F
  1729Funion CANGIM_REG
  1730F{
  1731F  Uint32 all ;
  1732F  struct CANGIM_BITS bit ;
  1733F} ;
  1734F/* eCAN Global Interrupt Flag 1 (eCANGIF1) bit definitions */
  1735F
  1736Fstruct CANGIF1_BITS
  1737F{                     // bits description
  1738F  Uint16 MIV1 : 5 ;
  1739F                  // 4:0 Mailbox Interrupt Vector
  1740F  Uint16 rsvd1 : 3 ;
  1741F                   // 7:5 reserved
  1742F  Uint16 WLIF1 : 1 ;
  1743F                   // 8 Warning level interrupt flag
  1744F  Uint16 EPIF1 : 1 ;
  1745F                   // 9 Error-passive interrupt flag
  1746F  Uint16 BOIF1 : 1 ;
  1747F                   // 10 Bus-off interrupt flag
  1748F  Uint16 RMLIF1 : 1 ;
  1749F                    // 11 Received message lost interrupt flag
  1750F  Uint16 WUIF1 : 1 ;
  1751F                   // 12 Wakeup interrupt flag
  1752F  Uint16 WDIF1 : 1 ;
  1753F                   // 13 Write denied interrupt flag
  1754F  Uint16 AAIF1 : 1 ;
  1755F                   // 14 Abort Ack interrupt flag
  1756F  Uint16 GMIF1 : 1 ;
  1757F                   // 15 Global MBX interrupt flag
  1758F  Uint16 TCOF1 : 1 ;
  1759F                   // 16 TSC Overflow flag
  1760F  Uint16 MTOF1 : 1 ;
  1761F                   // 17 Mailbox Timeout flag
  1762F  Uint16 rsvd2 : 14 ;
  1763F                    // 31:18 reserved
  1764F} ;
  1765F/* Allow access to the bit fields or entire register */
  1766F
  1767Funion CANGIF1_REG
  1768F{
  1769F  Uint32 all ;
  1770F  struct CANGIF1_BITS bit ;
  1771F} ;
  1772F/* eCAN Mailbox Interrupt Mask register (CANMIM) bit definitions */
  1773F
  1774Fstruct CANMIM_BITS
  1775F{                    // bit description
  1776F  Uint16 MIM0 : 1 ;
  1777F                  // 0 MIM for Mailbox 0
  1778F  Uint16 MIM1 : 1 ;
  1779F                  // 1 MIM for Mailbox 1
  1780F  Uint16 MIM2 : 1 ;
  1781F                  // 2 MIM for Mailbox 2
  1782F  Uint16 MIM3 : 1 ;
  1783F                  // 3 MIM for Mailbox 3
  1784F  Uint16 MIM4 : 1 ;
  1785F                  // 4 MIM for Mailbox 4
  1786F  Uint16 MIM5 : 1 ;
  1787F                  // 5 MIM for Mailbox 5
  1788F  Uint16 MIM6 : 1 ;
  1789F                  // 6 MIM for Mailbox 6
  1790F  Uint16 MIM7 : 1 ;
  1791F                  // 7 MIM for Mailbox 7
  1792F  Uint16 MIM8 : 1 ;
  1793F                  // 8 MIM for Mailbox 8
  1794F  Uint16 MIM9 : 1 ;
  1795F                  // 9 MIM for Mailbox 9
  1796F  Uint16 MIM10 : 1 ;
  1797F                   // 10 MIM for Mailbox 10
  1798F  Uint16 MIM11 : 1 ;
  1799F                   // 11 MIM for Mailbox 11
  1800F  Uint16 MIM12 : 1 ;
  1801F                   // 12 MIM for Mailbox 12
  1802F  Uint16 MIM13 : 1 ;
  1803F                   // 13 MIM for Mailbox 13
  1804F  Uint16 MIM14 : 1 ;
  1805F                   // 14 MIM for Mailbox 14
  1806F  Uint16 MIM15 : 1 ;
  1807F                   // 15 MIM for Mailbox 15
  1808F  Uint16 MIM16 : 1 ;
  1809F                   // 16 MIM for Mailbox 16
  1810F  Uint16 MIM17 : 1 ;
  1811F                   // 17 MIM for Mailbox 17
  1812F  Uint16 MIM18 : 1 ;
  1813F                   // 18 MIM for Mailbox 18
  1814F  Uint16 MIM19 : 1 ;
  1815F                   // 19 MIM for Mailbox 19
  1816F  Uint16 MIM20 : 1 ;
  1817F                   // 20 MIM for Mailbox 20
  1818F  Uint16 MIM21 : 1 ;
  1819F                   // 21 MIM for Mailbox 21
  1820F  Uint16 MIM22 : 1 ;
  1821F                   // 22 MIM for Mailbox 22
  1822F  Uint16 MIM23 : 1 ;
  1823F                   // 23 MIM for Mailbox 23
  1824F  Uint16 MIM24 : 1 ;
  1825F                   // 24 MIM for Mailbox 24
  1826F  Uint16 MIM25 : 1 ;
  1827F                   // 25 MIM for Mailbox 25
  1828F  Uint16 MIM26 : 1 ;
  1829F                   // 26 MIM for Mailbox 26
  1830F  Uint16 MIM27 : 1 ;
  1831F                   // 27 MIM for Mailbox 27
  1832F  Uint16 MIM28 : 1 ;
  1833F                   // 28 MIM for Mailbox 28
  1834F  Uint16 MIM29 : 1 ;
  1835F                   // 29 MIM for Mailbox 29
  1836F  Uint16 MIM30 : 1 ;
  1837F                   // 30 MIM for Mailbox 30
  1838F  Uint16 MIM31 : 1 ;
  1839F                   // 31 MIM for Mailbox 31
  1840F} ;
  1841F/* Allow access to the bit fields or entire register */
  1842F
  1843Funion CANMIM_REG
  1844F{
  1845F  Uint32 all ;
  1846F  struct CANMIM_BITS bit ;
  1847F} ;
  1848F/* eCAN Mailbox Interrupt Level register (CANMIL) bit definitions */
  1849F
  1850Fstruct CANMIL_BITS
  1851F{                    // bit description
  1852F  Uint16 MIL0 : 1 ;
  1853F                  // 0 0 -> Int 9.5 1 -> Int 9.6
  1854F  Uint16 MIL1 : 1 ;
  1855F                  // 1 0 -> Int 9.5 1 -> Int 9.6
  1856F  Uint16 MIL2 : 1 ;
  1857F                  // 2 0 -> Int 9.5 1 -> Int 9.6
  1858F  Uint16 MIL3 : 1 ;
  1859F                  // 3 0 -> Int 9.5 1 -> Int 9.6
  1860F  Uint16 MIL4 : 1 ;
  1861F                  // 4 0 -> Int 9.5 1 -> Int 9.6
  1862F  Uint16 MIL5 : 1 ;
  1863F                  // 5 0 -> Int 9.5 1 -> Int 9.6
  1864F  Uint16 MIL6 : 1 ;
  1865F                  // 6 0 -> Int 9.5 1 -> Int 9.6
  1866F  Uint16 MIL7 : 1 ;
  1867F                  // 7 0 -> Int 9.5 1 -> Int 9.6
  1868F  Uint16 MIL8 : 1 ;
  1869F                  // 8 0 -> Int 9.5 1 -> Int 9.6
  1870F  Uint16 MIL9 : 1 ;
  1871F                  // 9 0 -> Int 9.5 1 -> Int 9.6
  1872F  Uint16 MIL10 : 1 ;
  1873F                   // 10 0 -> Int 9.5 1 -> Int 9.6
  1874F  Uint16 MIL11 : 1 ;
  1875F                   // 11 0 -> Int 9.5 1 -> Int 9.6
  1876F  Uint16 MIL12 : 1 ;
  1877F                   // 12 0 -> Int 9.5 1 -> Int 9.6
  1878F  Uint16 MIL13 : 1 ;
  1879F                   // 13 0 -> Int 9.5 1 -> Int 9.6
  1880F  Uint16 MIL14 : 1 ;
  1881F                   // 14 0 -> Int 9.5 1 -> Int 9.6
  1882F  Uint16 MIL15 : 1 ;
  1883F                   // 15 0 -> Int 9.5 1 -> Int 9.6
  1884F  Uint16 MIL16 : 1 ;
  1885F                   // 16 0 -> Int 9.5 1 -> Int 9.6
  1886F  Uint16 MIL17 : 1 ;
  1887F                   // 17 0 -> Int 9.5 1 -> Int 9.6
  1888F  Uint16 MIL18 : 1 ;
  1889F                   // 18 0 -> Int 9.5 1 -> Int 9.6
  1890F  Uint16 MIL19 : 1 ;
  1891F                   // 19 0 -> Int 9.5 1 -> Int 9.6
  1892F  Uint16 MIL20 : 1 ;
  1893F                   // 20 0 -> Int 9.5 1 -> Int 9.6
  1894F  Uint16 MIL21 : 1 ;
  1895F                   // 21 0 -> Int 9.5 1 -> Int 9.6
  1896F  Uint16 MIL22 : 1 ;
  1897F                   // 22 0 -> Int 9.5 1 -> Int 9.6
  1898F  Uint16 MIL23 : 1 ;
  1899F                   // 23 0 -> Int 9.5 1 -> Int 9.6
  1900F  Uint16 MIL24 : 1 ;
  1901F                   // 24 0 -> Int 9.5 1 -> Int 9.6
  1902F  Uint16 MIL25 : 1 ;
  1903F                   // 25 0 -> Int 9.5 1 -> Int 9.6
  1904F  Uint16 MIL26 : 1 ;
  1905F                   // 26 0 -> Int 9.5 1 -> Int 9.6
  1906F  Uint16 MIL27 : 1 ;
  1907F                   // 27 0 -> Int 9.5 1 -> Int 9.6
  1908F  Uint16 MIL28 : 1 ;
  1909F                   // 28 0 -> Int 9.5 1 -> Int 9.6
  1910F  Uint16 MIL29 : 1 ;
  1911F                   // 29 0 -> Int 9.5 1 -> Int 9.6
  1912F  Uint16 MIL30 : 1 ;
  1913F                   // 30 0 -> Int 9.5 1 -> Int 9.6
  1914F  Uint16 MIL31 : 1 ;
  1915F                   // 31 0 -> Int 9.5 1 -> Int 9.6
  1916F} ;
  1917F/* Allow access to the bit fields or entire register */
  1918F
  1919Funion CANMIL_REG
  1920F{
  1921F  Uint32 all ;
  1922F  struct CANMIL_BITS bit ;
  1923F} ;
  1924F/* eCAN Overwrite Protection Control register (CANOPC) bit definitions */
  1925F
  1926Fstruct CANOPC_BITS
  1927F{                    // bit description
  1928F  Uint16 OPC0 : 1 ;
  1929F                  // 0 OPC for Mailbox 0
  1930F  Uint16 OPC1 : 1 ;
  1931F                  // 1 OPC for Mailbox 1
  1932F  Uint16 OPC2 : 1 ;
  1933F                  // 2 OPC for Mailbox 2
  1934F  Uint16 OPC3 : 1 ;
  1935F                  // 3 OPC for Mailbox 3
  1936F  Uint16 OPC4 : 1 ;
  1937F                  // 4 OPC for Mailbox 4
  1938F  Uint16 OPC5 : 1 ;
  1939F                  // 5 OPC for Mailbox 5
  1940F  Uint16 OPC6 : 1 ;
  1941F                  // 6 OPC for Mailbox 6
  1942F  Uint16 OPC7 : 1 ;
  1943F                  // 7 OPC for Mailbox 7
  1944F  Uint16 OPC8 : 1 ;
  1945F                  // 8 OPC for Mailbox 8
  1946F  Uint16 OPC9 : 1 ;
  1947F                  // 9 OPC for Mailbox 9
  1948F  Uint16 OPC10 : 1 ;
  1949F                   // 10 OPC for Mailbox 10
  1950F  Uint16 OPC11 : 1 ;
  1951F                   // 11 OPC for Mailbox 11
  1952F  Uint16 OPC12 : 1 ;
  1953F                   // 12 OPC for Mailbox 12
  1954F  Uint16 OPC13 : 1 ;
  1955F                   // 13 OPC for Mailbox 13
  1956F  Uint16 OPC14 : 1 ;
  1957F                   // 14 OPC for Mailbox 14
  1958F  Uint16 OPC15 : 1 ;
  1959F                   // 15 OPC for Mailbox 15
  1960F  Uint16 OPC16 : 1 ;
  1961F                   // 16 OPC for Mailbox 16
  1962F  Uint16 OPC17 : 1 ;
  1963F                   // 17 OPC for Mailbox 17
  1964F  Uint16 OPC18 : 1 ;
  1965F                   // 18 OPC for Mailbox 18
  1966F  Uint16 OPC19 : 1 ;
  1967F                   // 19 OPC for Mailbox 19
  1968F  Uint16 OPC20 : 1 ;
  1969F                   // 20 OPC for Mailbox 20
  1970F  Uint16 OPC21 : 1 ;
  1971F                   // 21 OPC for Mailbox 21
  1972F  Uint16 OPC22 : 1 ;
  1973F                   // 22 OPC for Mailbox 22
  1974F  Uint16 OPC23 : 1 ;
  1975F                   // 23 OPC for Mailbox 23
  1976F  Uint16 OPC24 : 1 ;
  1977F                   // 24 OPC for Mailbox 24
  1978F  Uint16 OPC25 : 1 ;
  1979F                   // 25 OPC for Mailbox 25
  1980F  Uint16 OPC26 : 1 ;
  1981F                   // 26 OPC for Mailbox 26
  1982F  Uint16 OPC27 : 1 ;
  1983F                   // 27 OPC for Mailbox 27
  1984F  Uint16 OPC28 : 1 ;
  1985F                   // 28 OPC for Mailbox 28
  1986F  Uint16 OPC29 : 1 ;
  1987F                   // 29 OPC for Mailbox 29
  1988F  Uint16 OPC30 : 1 ;
  1989F                   // 30 OPC for Mailbox 30
  1990F  Uint16 OPC31 : 1 ;
  1991F                   // 31 OPC for Mailbox 31
  1992F} ;
  1993F/* Allow access to the bit fields or entire register */
  1994F
  1995Funion CANOPC_REG
  1996F{
  1997F  Uint32 all ;
  1998F  struct CANOPC_BITS bit ;
  1999F} ;
  2000F/* eCAN TX I/O Control Register (CANTIOC) bit definitions */
  2001F
  2002Fstruct CANTIOC_BITS
  2003F{                     // bits description
  2004F  Uint16 rsvd1 : 3 ;
  2005F                   // 2:0 reserved
  2006F  Uint16 TXFUNC : 1 ;
  2007F                    // 3 TXFUNC
  2008F  Uint16 rsvd2 : 12 ;
  2009F                    // 15:4 reserved
  2010F  Uint16 rsvd3 : 16 ;
  2011F                    // 31:16 reserved
  2012F} ;
  2013F/* Allow access to the bit fields or entire register */
  2014F
  2015Funion CANTIOC_REG
  2016F{
  2017F  Uint32 all ;
  2018F  struct CANTIOC_BITS bit ;
  2019F} ;
  2020F/* eCAN RX I/O Control Register (CANRIOC) bit definitions */
  2021F
  2022Fstruct CANRIOC_BITS
  2023F{                     // bits description
  2024F  Uint16 rsvd1 : 3 ;
  2025F                   // 2:0 reserved
  2026F  Uint16 RXFUNC : 1 ;
  2027F                    // 3 RXFUNC
  2028F  Uint16 rsvd2 : 12 ;
  2029F                    // 15:4 reserved
  2030F  Uint16 rsvd3 : 16 ;
  2031F                    // 31:16 reserved
  2032F} ;
  2033F/* Allow access to the bit fields or entire register */
  2034F
  2035Funion CANRIOC_REG
  2036F{
  2037F  Uint32 all ;
  2038F  struct CANRIOC_BITS bit ;
  2039F} ;
  2040F/* eCAN Time-out Control register (CANTOC) bit definitions */
  2041F
  2042Fstruct CANTOC_BITS
  2043F{                    // bit description
  2044F  Uint16 TOC0 : 1 ;
  2045F                  // 0 TOC for Mailbox 0
  2046F  Uint16 TOC1 : 1 ;
  2047F                  // 1 TOC for Mailbox 1
  2048F  Uint16 TOC2 : 1 ;
  2049F                  // 2 TOC for Mailbox 2
  2050F  Uint16 TOC3 : 1 ;
  2051F                  // 3 TOC for Mailbox 3
  2052F  Uint16 TOC4 : 1 ;
  2053F                  // 4 TOC for Mailbox 4
  2054F  Uint16 TOC5 : 1 ;
  2055F                  // 5 TOC for Mailbox 5
  2056F  Uint16 TOC6 : 1 ;
  2057F                  // 6 TOC for Mailbox 6
  2058F  Uint16 TOC7 : 1 ;
  2059F                  // 7 TOC for Mailbox 7
  2060F  Uint16 TOC8 : 1 ;
  2061F                  // 8 TOC for Mailbox 8
  2062F  Uint16 TOC9 : 1 ;
  2063F                  // 9 TOC for Mailbox 9
  2064F  Uint16 TOC10 : 1 ;
  2065F                   // 10 TOC for Mailbox 10
  2066F  Uint16 TOC11 : 1 ;
  2067F                   // 11 TOC for Mailbox 11
  2068F  Uint16 TOC12 : 1 ;
  2069F                   // 12 TOC for Mailbox 12
  2070F  Uint16 TOC13 : 1 ;
  2071F                   // 13 TOC for Mailbox 13
  2072F  Uint16 TOC14 : 1 ;
  2073F                   // 14 TOC for Mailbox 14
  2074F  Uint16 TOC15 : 1 ;
  2075F                   // 15 TOC for Mailbox 15
  2076F  Uint16 TOC16 : 1 ;
  2077F                   // 16 TOC for Mailbox 16
  2078F  Uint16 TOC17 : 1 ;
  2079F                   // 17 TOC for Mailbox 17
  2080F  Uint16 TOC18 : 1 ;
  2081F                   // 18 TOC for Mailbox 18
  2082F  Uint16 TOC19 : 1 ;
  2083F                   // 19 TOC for Mailbox 19
  2084F  Uint16 TOC20 : 1 ;
  2085F                   // 20 TOC for Mailbox 20
  2086F  Uint16 TOC21 : 1 ;
  2087F                   // 21 TOC for Mailbox 21
  2088F  Uint16 TOC22 : 1 ;
  2089F                   // 22 TOC for Mailbox 22
  2090F  Uint16 TOC23 : 1 ;
  2091F                   // 23 TOC for Mailbox 23
  2092F  Uint16 TOC24 : 1 ;
  2093F                   // 24 TOC for Mailbox 24
  2094F  Uint16 TOC25 : 1 ;
  2095F                   // 25 TOC for Mailbox 25
  2096F  Uint16 TOC26 : 1 ;
  2097F                   // 26 TOC for Mailbox 26
  2098F  Uint16 TOC27 : 1 ;
  2099F                   // 27 TOC for Mailbox 27
  2100F  Uint16 TOC28 : 1 ;
  2101F                   // 28 TOC for Mailbox 28
  2102F  Uint16 TOC29 : 1 ;
  2103F                   // 29 TOC for Mailbox 29
  2104F  Uint16 TOC30 : 1 ;
  2105F                   // 30 TOC for Mailbox 30
  2106F  Uint16 TOC31 : 1 ;
  2107F                   // 31 TOC for Mailbox 31
  2108F} ;
  2109F/* Allow access to the bit fields or entire register */
  2110F
  2111Funion CANTOC_REG
  2112F{
  2113F  Uint32 all ;
  2114F  struct CANTOC_BITS bit ;
  2115F} ;
  2116F/* eCAN Time-out Status register (CANTOS) bit definitions */
  2117F
  2118Fstruct CANTOS_BITS
  2119F{                    // bit description
  2120F  Uint16 TOS0 : 1 ;
  2121F                  // 0 TOS for Mailbox 0
  2122F  Uint16 TOS1 : 1 ;
  2123F                  // 1 TOS for Mailbox 1
  2124F  Uint16 TOS2 : 1 ;
  2125F                  // 2 TOS for Mailbox 2
  2126F  Uint16 TOS3 : 1 ;
  2127F                  // 3 TOS for Mailbox 3
  2128F  Uint16 TOS4 : 1 ;
  2129F                  // 4 TOS for Mailbox 4
  2130F  Uint16 TOS5 : 1 ;
  2131F                  // 5 TOS for Mailbox 5
  2132F  Uint16 TOS6 : 1 ;
  2133F                  // 6 TOS for Mailbox 6
  2134F  Uint16 TOS7 : 1 ;
  2135F                  // 7 TOS for Mailbox 7
  2136F  Uint16 TOS8 : 1 ;
  2137F                  // 8 TOS for Mailbox 8
  2138F  Uint16 TOS9 : 1 ;
  2139F                  // 9 TOS for Mailbox 9
  2140F  Uint16 TOS10 : 1 ;
  2141F                   // 10 TOS for Mailbox 10
  2142F  Uint16 TOS11 : 1 ;
  2143F                   // 11 TOS for Mailbox 11
  2144F  Uint16 TOS12 : 1 ;
  2145F                   // 12 TOS for Mailbox 12
  2146F  Uint16 TOS13 : 1 ;
  2147F                   // 13 TOS for Mailbox 13
  2148F  Uint16 TOS14 : 1 ;
  2149F                   // 14 TOS for Mailbox 14
  2150F  Uint16 TOS15 : 1 ;
  2151F                   // 15 TOS for Mailbox 15
  2152F  Uint16 TOS16 : 1 ;
  2153F                   // 16 TOS for Mailbox 16
  2154F  Uint16 TOS17 : 1 ;
  2155F                   // 17 TOS for Mailbox 17
  2156F  Uint16 TOS18 : 1 ;
  2157F                   // 18 TOS for Mailbox 18
  2158F  Uint16 TOS19 : 1 ;
  2159F                   // 19 TOS for Mailbox 19
  2160F  Uint16 TOS20 : 1 ;
  2161F                   // 20 TOS for Mailbox 20
  2162F  Uint16 TOS21 : 1 ;
  2163F                   // 21 TOS for Mailbox 21
  2164F  Uint16 TOS22 : 1 ;
  2165F                   // 22 TOS for Mailbox 22
  2166F  Uint16 TOS23 : 1 ;
  2167F                   // 23 TOS for Mailbox 23
  2168F  Uint16 TOS24 : 1 ;
  2169F                   // 24 TOS for Mailbox 24
  2170F  Uint16 TOS25 : 1 ;
  2171F                   // 25 TOS for Mailbox 25
  2172F  Uint16 TOS26 : 1 ;
  2173F                   // 26 TOS for Mailbox 26
  2174F  Uint16 TOS27 : 1 ;
  2175F                   // 27 TOS for Mailbox 27
  2176F  Uint16 TOS28 : 1 ;
  2177F                   // 28 TOS for Mailbox 28
  2178F  Uint16 TOS29 : 1 ;
  2179F                   // 29 TOS for Mailbox 29
  2180F  Uint16 TOS30 : 1 ;
  2181F                   // 30 TOS for Mailbox 30
  2182F  Uint16 TOS31 : 1 ;
  2183F                   // 31 TOS for Mailbox 31
  2184F} ;
  2185F/* Allow access to the bit fields or entire register */
  2186F
  2187Funion CANTOS_REG
  2188F{
  2189F  Uint32 all ;
  2190F  struct CANTOS_BITS bit ;
  2191F} ;
  2192F/**************************************/
  2193F/* eCAN Control & Status register file */
  2194F/**************************************/
  2195F
  2196Fstruct ECAN_REGS
  2197F{
  2198F  union CANME_REG CANME ; // Mailbox Enable
  2199F  union CANMD_REG CANMD ; // Mailbox Direction
  2200F  union CANTRS_REG CANTRS ; // Transmit Request Set
  2201F  union CANTRR_REG CANTRR ; // Transmit Request Reset
  2202F  union CANTA_REG CANTA ; // Transmit Acknowledge
  2203F  union CANAA_REG CANAA ; // Abort Acknowledge
  2204F  union CANRMP_REG CANRMP ; // Received Message Pending
  2205F  union CANRML_REG CANRML ; // Received Message Lost
  2206F  union CANRFP_REG CANRFP ; // Remote Frame Pending
  2207F  union CANGAM_REG CANGAM ; // Global Acceptance Mask
  2208F  union CANMC_REG CANMC ; // Master Control
  2209F  union CANBTC_REG CANBTC ; // Bit Timing
  2210F  union CANES_REG CANES ; // Error Status
  2211F  union CANTEC_REG CANTEC ; // Transmit Error Counter
  2212F  union CANREC_REG CANREC ; // Receive Error Counter
  2213F  union CANGIF0_REG CANGIF0 ; // Global Interrupt Flag 0
  2214F  union CANGIM_REG CANGIM ; // Global Interrupt Mask 0
  2215F  union CANGIF1_REG CANGIF1 ; // Global Interrupt Flag 1
  2216F  union CANMIM_REG CANMIM ; // Mailbox Interrupt Mask
  2217F  union CANMIL_REG CANMIL ; // Mailbox Interrupt Level
  2218F  union CANOPC_REG CANOPC ; // Overwrite Protection Control
  2219F  union CANTIOC_REG CANTIOC ; // TX I/O Control
  2220F  union CANRIOC_REG CANRIOC ; // RX I/O Control
  2221F  Uint32 CANTSC ; // Time-stamp counter
  2222F  union CANTOC_REG CANTOC ; // Time-out Control
  2223F  union CANTOS_REG CANTOS ; // Time-out Status
  2224F} ;
  2225F/* --------------------------------------------------- */
  2226F/* eCAN Mailbox Registers */
  2227F/* ----------------------------------------------------*/
  2228F/* eCAN Message ID (MSGID) bit definitions */
  2229F
  2230Fstruct CANMSGID_BITS
  2231F{                      // bits description
  2232F  Uint16 EXTMSGID_L : 16 ;
  2233F                         // 0:15
  2234F  Uint16 EXTMSGID_H : 2 ;
  2235F                        // 16:17
  2236F  Uint16 STDMSGID : 11 ;
  2237F                       // 18:28
  2238F  Uint16 AAM : 1 ;
  2239F                 // 29
  2240F  Uint16 AME : 1 ;
  2241F                 // 30
  2242F  Uint16 IDE : 1 ;
  2243F                 // 31
  2244F} ;
  2245F/* Allow access to the bit fields or entire register */
  2246F
  2247Funion CANMSGID_REG
  2248F{
  2249F  Uint32 all ;
  2250F  struct CANMSGID_BITS bit ;
  2251F} ;
  2252F/* eCAN Message Control Register (MSGCTRL) bit definitions */
  2253F
  2254Fstruct CANMSGCTRL_BITS
  2255F{                        // bits description
  2256F  Uint16 DLC : 4 ;
  2257F                 // 0:3
  2258F  Uint16 RTR : 1 ;
  2259F                 // 4
  2260F  Uint16 rsvd1 : 3 ;
  2261F                   // 7:5 reserved
  2262F  Uint16 TPL : 5 ;
  2263F                 // 12:8
  2264F  Uint16 rsvd2 : 3 ;
  2265F                   // 15:13 reserved
  2266F  Uint16 rsvd3 : 16 ;
  2267F                    // 31:16 reserved
  2268F} ;
  2269F/* Allow access to the bit fields or entire register */
  2270F
  2271Funion CANMSGCTRL_REG
  2272F{
  2273F  Uint32 all ;
  2274F  struct CANMSGCTRL_BITS bit ;
  2275F} ;
  2276F/* eCAN Message Data Register low (MDR_L) word definitions */
  2277F
  2278Fstruct CANMDL_WORDS
  2279F{                     // bits description
  2280F  Uint16 LOW_WORD : 16 ;
  2281F                       // 0:15
  2282F  Uint16 HI_WORD : 16 ;
  2283F                      // 31:16
  2284F} ;
  2285F/* eCAN Message Data Register low (MDR_L) byte definitions */
  2286F
  2287Fstruct CANMDL_BYTES
  2288F{                     // bits description
  2289F  Uint16 BYTE3 : 8 ;
  2290F                   // 31:24
  2291F  Uint16 BYTE2 : 8 ;
  2292F                   // 23:16
  2293F  Uint16 BYTE1 : 8 ;
  2294F                   // 15:8
  2295F  Uint16 BYTE0 : 8 ;
  2296F                   // 7:0
  2297F} ;
  2298F/* Allow access to the bit fields or entire register */
  2299F
  2300Funion CANMDL_REG
  2301F{
  2302F  Uint32 all ;
  2303F  struct CANMDL_WORDS word ;
  2304F  struct CANMDL_BYTES byte ;
  2305F} ;
  2306F/* eCAN Message Data Register high (MDR_H) word definitions */
  2307F
  2308Fstruct CANMDH_WORDS
  2309F{                     // bits description
  2310F  Uint16 LOW_WORD : 16 ;
  2311F                       // 0:15
  2312F  Uint16 HI_WORD : 16 ;
  2313F                      // 31:16
  2314F} ;
  2315F/* eCAN Message Data Register low (MDR_H) byte definitions */
  2316F
  2317Fstruct CANMDH_BYTES
  2318F{                     // bits description
  2319F  Uint16 BYTE7 : 8 ;
  2320F                   // 63:56
  2321F  Uint16 BYTE6 : 8 ;
  2322F                   // 55:48
  2323F  Uint16 BYTE5 : 8 ;
  2324F                   // 47:40
  2325F  Uint16 BYTE4 : 8 ;
  2326F                   // 39:32
  2327F} ;
  2328F/* Allow access to the bit fields or entire register */
  2329F
  2330Funion CANMDH_REG
  2331F{
  2332F  Uint32 all ;
  2333F  struct CANMDH_WORDS word ;
  2334F  struct CANMDH_BYTES byte ;
  2335F} ;
  2336F
  2337Fstruct MBOX
  2338F{
  2339F  union CANMSGID_REG MSGID ;
  2340F  union CANMSGCTRL_REG MSGCTRL ;
  2341F  union CANMDL_REG MDL ;
  2342F  union CANMDH_REG MDH ;
  2343F} ;
  2344F/**************************************/
  2345F/* eCAN Mailboxes */
  2346F/**************************************/
  2347F
  2348Fstruct ECAN_MBOXES
  2349F{
  2350F  struct MBOX MBOX0 ;
  2351F  struct MBOX MBOX1 ;
  2352F  struct MBOX MBOX2 ;
  2353F  struct MBOX MBOX3 ;
  2354F  struct MBOX MBOX4 ;
  2355F  struct MBOX MBOX5 ;
  2356F  struct MBOX MBOX6 ;
  2357F  struct MBOX MBOX7 ;
  2358F  struct MBOX MBOX8 ;
  2359F  struct MBOX MBOX9 ;
  2360F  struct MBOX MBOX10 ;
  2361F  struct MBOX MBOX11 ;
  2362F  struct MBOX MBOX12 ;
  2363F  struct MBOX MBOX13 ;
  2364F  struct MBOX MBOX14 ;
  2365F  struct MBOX MBOX15 ;
  2366F  struct MBOX MBOX16 ;
  2367F  struct MBOX MBOX17 ;
  2368F  struct MBOX MBOX18 ;
  2369F  struct MBOX MBOX19 ;
  2370F  struct MBOX MBOX20 ;
  2371F  struct MBOX MBOX21 ;
  2372F  struct MBOX MBOX22 ;
  2373F  struct MBOX MBOX23 ;
  2374F  struct MBOX MBOX24 ;
  2375F  struct MBOX MBOX25 ;
  2376F  struct MBOX MBOX26 ;
  2377F  struct MBOX MBOX27 ;
  2378F  struct MBOX MBOX28 ;
  2379F  struct MBOX MBOX29 ;
  2380F  struct MBOX MBOX30 ;
  2381F  struct MBOX MBOX31 ;
  2382F} ;
  2383F/* eCAN Local Acceptance Mask (LAM) bit definitions */
  2384F
  2385Fstruct CANLAM_BITS
  2386F{                    // bits description
  2387F  Uint16 LAM_L : 16 ;
  2388F                    // 0:15
  2389F  Uint16 LAM_H : 13 ;
  2390F                    // 16:28
  2391F  Uint16 rsvd1 : 2 ;
  2392F                   // 29:30 reserved
  2393F  Uint16 LAMI : 1 ;
  2394F                  // 31
  2395F} ;
  2396F/* Allow access to the bit fields or entire register */
  2397F
  2398Funion CANLAM_REG
  2399F{
  2400F  Uint32 all ;
  2401F  struct CANLAM_BITS bit ;
  2402F} ;
  2403F/**************************************/
  2404F/* eCAN Local Acceptance Masks */
  2405F/**************************************/
  2406F/* eCAN LAM File */
  2407F
  2408Fstruct LAM_REGS
  2409F{
  2410F  union CANLAM_REG LAM0 ;
  2411F  union CANLAM_REG LAM1 ;
  2412F  union CANLAM_REG LAM2 ;
  2413F  union CANLAM_REG LAM3 ;
  2414F  union CANLAM_REG LAM4 ;
  2415F  union CANLAM_REG LAM5 ;
  2416F  union CANLAM_REG LAM6 ;
  2417F  union CANLAM_REG LAM7 ;
  2418F  union CANLAM_REG LAM8 ;
  2419F  union CANLAM_REG LAM9 ;
  2420F  union CANLAM_REG LAM10 ;
  2421F  union CANLAM_REG LAM11 ;
  2422F  union CANLAM_REG LAM12 ;
  2423F  union CANLAM_REG LAM13 ;
  2424F  union CANLAM_REG LAM14 ;
  2425F  union CANLAM_REG LAM15 ;
  2426F  union CANLAM_REG LAM16 ;
  2427F  union CANLAM_REG LAM17 ;
  2428F  union CANLAM_REG LAM18 ;
  2429F  union CANLAM_REG LAM19 ;
  2430F  union CANLAM_REG LAM20 ;
  2431F  union CANLAM_REG LAM21 ;
  2432F  union CANLAM_REG LAM22 ;
  2433F  union CANLAM_REG LAM23 ;
  2434F  union CANLAM_REG LAM24 ;
  2435F  union CANLAM_REG LAM25 ;
  2436F  union CANLAM_REG LAM26 ;
  2437F  union CANLAM_REG LAM27 ;
  2438F  union CANLAM_REG LAM28 ;
  2439F  union CANLAM_REG LAM29 ;
  2440F  union CANLAM_REG LAM30 ;
  2441F  union CANLAM_REG LAM31 ;
  2442F} ;
  2443F/* Mailbox MOTS File */
  2444F
  2445Fstruct MOTS_REGS
  2446F{
  2447F  Uint32 MOTS0 ;
  2448F  Uint32 MOTS1 ;
  2449F  Uint32 MOTS2 ;
  2450F  Uint32 MOTS3 ;
  2451F  Uint32 MOTS4 ;
  2452F  Uint32 MOTS5 ;
  2453F  Uint32 MOTS6 ;
  2454F  Uint32 MOTS7 ;
  2455F  Uint32 MOTS8 ;
  2456F  Uint32 MOTS9 ;
  2457F  Uint32 MOTS10 ;
  2458F  Uint32 MOTS11 ;
  2459F  Uint32 MOTS12 ;
  2460F  Uint32 MOTS13 ;
  2461F  Uint32 MOTS14 ;
  2462F  Uint32 MOTS15 ;
  2463F  Uint32 MOTS16 ;
  2464F  Uint32 MOTS17 ;
  2465F  Uint32 MOTS18 ;
  2466F  Uint32 MOTS19 ;
  2467F  Uint32 MOTS20 ;
  2468F  Uint32 MOTS21 ;
  2469F  Uint32 MOTS22 ;
  2470F  Uint32 MOTS23 ;
  2471F  Uint32 MOTS24 ;
  2472F  Uint32 MOTS25 ;
  2473F  Uint32 MOTS26 ;
  2474F  Uint32 MOTS27 ;
  2475F  Uint32 MOTS28 ;
  2476F  Uint32 MOTS29 ;
  2477F  Uint32 MOTS30 ;
  2478F  Uint32 MOTS31 ;
  2479F} ;
  2480F/* Mailbox MOTO File */
  2481F
  2482Fstruct MOTO_REGS
  2483F{
  2484F  Uint32 MOTO0 ;
  2485F  Uint32 MOTO1 ;
  2486F  Uint32 MOTO2 ;
  2487F  Uint32 MOTO3 ;
  2488F  Uint32 MOTO4 ;
  2489F  Uint32 MOTO5 ;
  2490F  Uint32 MOTO6 ;
  2491F  Uint32 MOTO7 ;
  2492F  Uint32 MOTO8 ;
  2493F  Uint32 MOTO9 ;
  2494F  Uint32 MOTO10 ;
  2495F  Uint32 MOTO11 ;
  2496F  Uint32 MOTO12 ;
  2497F  Uint32 MOTO13 ;
  2498F  Uint32 MOTO14 ;
  2499F  Uint32 MOTO15 ;
  2500F  Uint32 MOTO16 ;
  2501F  Uint32 MOTO17 ;
  2502F  Uint32 MOTO18 ;
  2503F  Uint32 MOTO19 ;
  2504F  Uint32 MOTO20 ;
  2505F  Uint32 MOTO21 ;
  2506F  Uint32 MOTO22 ;
  2507F  Uint32 MOTO23 ;
  2508F  Uint32 MOTO24 ;
  2509F  Uint32 MOTO25 ;
  2510F  Uint32 MOTO26 ;
  2511F  Uint32 MOTO27 ;
  2512F  Uint32 MOTO28 ;
  2513F  Uint32 MOTO29 ;
  2514F  Uint32 MOTO30 ;
  2515F  Uint32 MOTO31 ;
  2516F} ;
  2517F//---------------------------------------------------------------------------
  2518F// eCAN External References & Function Declarations:
  2519F//
  2520F
  2521Fextern volatile struct ECAN_REGS
  2522F  ECanaRegs ;
  2523F
  2524Fextern volatile struct ECAN_MBOXES
  2525F  ECanaMboxes ;
  2526F
  2527Fextern volatile struct LAM_REGS
  2528F  ECanaLAMRegs ;
  2529F
  2530Fextern volatile struct MOTO_REGS
  2531F  ECanaMOTORegs ;
  2532F
  2533Fextern volatile struct MOTS_REGS
  2534F  ECanaMOTSRegs ;
  2535F
  2536Fextern volatile struct ECAN_REGS
  2537F  ECanbRegs ;
  2538F
  2539Fextern volatile struct ECAN_MBOXES
  2540F  ECanbMboxes ;
  2541F
  2542Fextern volatile struct LAM_REGS
  2543F  ECanbLAMRegs ;
  2544F
  2545Fextern volatile struct MOTO_REGS
  2546F  ECanbMOTORegs ;
  2547F
  2548Fextern volatile struct MOTS_REGS
  2549F  ECanbMOTSRegs ;
  2550F       /* extern "C" */
  2551F       // end of DSP2833x_ECAN.H definition
  2552F//===========================================================================
  2553F// End of file.
  2554F//===========================================================================
  2555F 
  2556F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECan.h*/
  2557F/*   CLOSE_FILE Include File */
  2558F 
  2559F               // Enhanced eCAN Registers
  2560F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECap.h */
  2561F// TI File $Revision: /main/1 $
  2562F// Checkin $Date: August 18, 2006 13:52:07 $
  2563F//###########################################################################
  2564F//
  2565F// FILE: DSP2833x_ECap.h
  2566F//
  2567F// TITLE: DSP2833x Enhanced Capture Module Register Bit Definitions.
  2568F//
  2569F//###########################################################################
  2570F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  2571F// $Release Date: August 4, 2009 $
  2572F//###########################################################################
  2573F#ifndef DSP2833x_ECAP_H
  2574F#define DSP2833x_ECAP_H
  2575F//----------------------------------------------------
  2576F// Capture control register 1 bit definitions */
  2577F
  2578Fstruct ECCTL1_BITS
  2579F{                    // bits description
  2580F  Uint16 CAP1POL : 1 ;
  2581F                     // 0 Capture Event 1 Polarity select
  2582F  Uint16 CTRRST1 : 1 ;
  2583F                     // 1 Counter Reset on Capture Event 1
  2584F  Uint16 CAP2POL : 1 ;
  2585F                     // 2 Capture Event 2 Polarity select
  2586F  Uint16 CTRRST2 : 1 ;
  2587F                     // 3 Counter Reset on Capture Event 2
  2588F  Uint16 CAP3POL : 1 ;
  2589F                     // 4 Capture Event 3 Polarity select
  2590F  Uint16 CTRRST3 : 1 ;
  2591F                     // 5 Counter Reset on Capture Event 3
  2592F  Uint16 CAP4POL : 1 ;
  2593F                     // 6 Capture Event 4 Polarity select
  2594F  Uint16 CTRRST4 : 1 ;
  2595F                     // 7 Counter Reset on Capture Event 4
  2596F  Uint16 CAPLDEN : 1 ;
  2597F                     // 8 Enable Loading CAP1-4 regs on a Cap Event
  2598F  Uint16 PRESCALE : 5 ;
  2599F                      // 13:9 Event Filter prescale select
  2600F  Uint16 FREE_SOFT : 2 ;
  2601F                       // 15:14 Emulation mode
  2602F} ;
  2603F
  2604Funion ECCTL1_REG
  2605F{
  2606F  Uint16 all ;
  2607F  struct ECCTL1_BITS bit ;
  2608F} ;
  2609F// In V1.1 the STOPVALUE bit field was changed to
  2610F// STOP_WRAP. This correlated to a silicon change from
  2611F// F2833x Rev 0 to Rev A.
  2612F//----------------------------------------------------
  2613F// Capture control register 2 bit definitions */
  2614F
  2615Fstruct ECCTL2_BITS
  2616F{                    // bits description
  2617F  Uint16 CONT_ONESHT : 1 ;
  2618F                         // 0 Continuous or one-shot
  2619F  Uint16 STOP_WRAP : 2 ;
  2620F                       // 2:1 Stop value for one-shot, Wrap for continuous
  2621F  Uint16 REARM : 1 ;
  2622F                   // 3 One-shot re-arm
  2623F  Uint16 TSCTRSTOP : 1 ;
  2624F                       // 4 TSCNT counter stop
  2625F  Uint16 SYNCI_EN : 1 ;
  2626F                      // 5 Counter sync-in select
  2627F  Uint16 SYNCO_SEL : 2 ;
  2628F                       // 7:6 Sync-out mode
  2629F  Uint16 SWSYNC : 1 ;
  2630F                    // 8 SW forced counter sync
  2631F  Uint16 CAP_APWM : 1 ;
  2632F                      // 9 CAP/APWM operating mode select
  2633F  Uint16 APWMPOL : 1 ;
  2634F                     // 10 APWM output polarity select
  2635F  Uint16 rsvd1 : 5 ;
  2636F                   // 15:11
  2637F} ;
  2638F
  2639Funion ECCTL2_REG
  2640F{
  2641F  Uint16 all ;
  2642F  struct ECCTL2_BITS bit ;
  2643F} ;
  2644F//----------------------------------------------------
  2645F// ECAP interrupt enable register bit definitions */
  2646F
  2647Fstruct ECEINT_BITS
  2648F{                    // bits description
  2649F  Uint16 rsvd1 : 1 ;
  2650F                   // 0 reserved
  2651F  Uint16 CEVT1 : 1 ;
  2652F                   // 1 Capture Event 1 Interrupt Enable
  2653F  Uint16 CEVT2 : 1 ;
  2654F                   // 2 Capture Event 2 Interrupt Enable
  2655F  Uint16 CEVT3 : 1 ;
  2656F                   // 3 Capture Event 3 Interrupt Enable
  2657F  Uint16 CEVT4 : 1 ;
  2658F                   // 4 Capture Event 4 Interrupt Enable
  2659F  Uint16 CTROVF : 1 ;
  2660F                    // 5 Counter Overflow Interrupt Enable
  2661F  Uint16 CTR_EQ_PRD : 1 ;
  2662F                        // 6 Period Equal Interrupt Enable
  2663F  Uint16 CTR_EQ_CMP : 1 ;
  2664F                        // 7 Compare Equal Interrupt Enable
  2665F  Uint16 rsvd2 : 8 ;
  2666F                   // 15:8 reserved
  2667F} ;
  2668F
  2669Funion ECEINT_REG
  2670F{
  2671F  Uint16 all ;
  2672F  struct ECEINT_BITS bit ;
  2673F} ;
  2674F//----------------------------------------------------
  2675F// ECAP interrupt flag register bit definitions */
  2676F
  2677Fstruct ECFLG_BITS
  2678F{                   // bits description
  2679F  Uint16 INT : 1 ;
  2680F                 // 0 Global Flag
  2681F  Uint16 CEVT1 : 1 ;
  2682F                   // 1 Capture Event 1 Interrupt Flag
  2683F  Uint16 CEVT2 : 1 ;
  2684F                   // 2 Capture Event 2 Interrupt Flag
  2685F  Uint16 CEVT3 : 1 ;
  2686F                   // 3 Capture Event 3 Interrupt Flag
  2687F  Uint16 CEVT4 : 1 ;
  2688F                   // 4 Capture Event 4 Interrupt Flag
  2689F  Uint16 CTROVF : 1 ;
  2690F                    // 5 Counter Overflow Interrupt Flag
  2691F  Uint16 CTR_EQ_PRD : 1 ;
  2692F                        // 6 Period Equal Interrupt Flag
  2693F  Uint16 CTR_EQ_CMP : 1 ;
  2694F                        // 7 Compare Equal Interrupt Flag
  2695F  Uint16 rsvd2 : 8 ;
  2696F                   // 15:8 reserved
  2697F} ;
  2698F
  2699Funion ECFLG_REG
  2700F{
  2701F  Uint16 all ;
  2702F  struct ECFLG_BITS bit ;
  2703F} ;
  2704F//----------------------------------------------------
  2705F
  2706Fstruct ECAP_REGS
  2707F{
  2708F  Uint32 TSCTR ; // Time stamp counter
  2709F  Uint32 CTRPHS ; // Counter phase
  2710F  Uint32 CAP1 ; // Capture 1
  2711F  Uint32 CAP2 ; // Capture 2
  2712F  Uint32 CAP3 ; // Capture 3
  2713F  Uint32 CAP4 ; // Capture 4
  2714F  Uint16 rsvd1 [ 8 ] ;
  2715F                    // reserved
  2716F  union ECCTL1_REG ECCTL1 ; // Capture Control Reg 1
  2717F  union ECCTL2_REG ECCTL2 ; // Capture Control Reg 2
  2718F  union ECEINT_REG ECEINT ; // ECAP interrupt enable
  2719F  union ECFLG_REG ECFLG ; // ECAP interrupt flags
  2720F  union ECFLG_REG ECCLR ; // ECAP interrupt clear
  2721F  union ECEINT_REG ECFRC ; // ECAP interrupt force
  2722F  Uint16 rsvd2 [ 6 ] ;
  2723F                    // reserved
  2724F} ;
  2725F//---------------------------------------------------------------------------
  2726F// GPI/O External References & Function Declarations:
  2727F//
  2728F
  2729Fextern volatile struct ECAP_REGS
  2730F  ECap1Regs ;
  2731F
  2732Fextern volatile struct ECAP_REGS
  2733F  ECap2Regs ;
  2734F
  2735Fextern volatile struct ECAP_REGS
  2736F  ECap3Regs ;
  2737F
  2738Fextern volatile struct ECAP_REGS
  2739F  ECap4Regs ;
  2740F
  2741Fextern volatile struct ECAP_REGS
  2742F  ECap5Regs ;
  2743F
  2744Fextern volatile struct ECAP_REGS
  2745F  ECap6Regs ;
  2746F       /* extern "C" */
  2747F       // end of DSP2833x_ECAP_H definition
  2748F//===========================================================================
  2749F// End of file.
  2750F//===========================================================================
  2751F 
  2752F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECap.h*/
  2753F/*   CLOSE_FILE Include File */
  2754F 
  2755F               // Enhanced Capture
  2756F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DMA.h */
  2757F// TI File $Revision: /main/11 $
  2758F// Checkin $Date: June 23, 2008 11:34:15 $
  2759F//###########################################################################
  2760F//
  2761F// FILE: DSP2833x_DMA.h
  2762F//
  2763F// TITLE: DSP2833x DMA Module Register Bit Definitions.
  2764F//
  2765F//###########################################################################
  2766F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  2767F// $Release Date: August 4, 2009 $
  2768F//###########################################################################
  2769F#ifndef DSP2833x_DMA_H
  2770F#define DSP2833x_DMA_H
  2771F//----------------------------------------------------
  2772F// Channel MODE register bit definitions:
  2773F
  2774Fstruct MODE_BITS
  2775F{                  // bits description
  2776F  Uint16 PERINTSEL : 5 ;
  2777F                       // 4:0 Peripheral Interrupt and Sync Select Bits (R/W):
  2778F                             // 0 no interrupt
  2779F               // 1 SEQ1INT & ADCSYNC
  2780F                             // 2 SEQ2INT
  2781F               // 3 XINT1
  2782F               // 4 XINT2
  2783F               // 5 XINT3
  2784F               // 6 XINT4
  2785F               // 7 XINT5
  2786F               // 8 XINT6
  2787F               // 9 XINT7
  2788F               // 10 XINT13
  2789F               // 11 TINT0
  2790F               // 12 TINT1
  2791F               // 13 TINT2
  2792F               // 14 MXEVTA & MXSYNCA
  2793F               // 15 MREVTA & MRSYNCA
  2794F               // 16 MXEVTB & MXSYNCB
  2795F               // 17 MREVTB & MRSYNCB
  2796F                                 // 18 ePWM1SOCA
  2797F                                 // 19 ePWM1SOCB
  2798F                                 // 20 ePWM2SOCA
  2799F                                 // 21 ePWM2SOCB
  2800F                                 // 22 ePWM3SOCA
  2801F                                 // 23 ePWM3SOCB
  2802F                                 // 24 ePWM4SOCA
  2803F                                 // 25 ePWM4SOCB
  2804F                                 // 26 ePWM5SOCA
  2805F                                 // 27 ePWM5SOCB
  2806F                                 // 28 ePWM6SOCA
  2807F                                 // 29 ePWM6SOCB
  2808F                                 // 30:31 no interrupt
  2809F  Uint16 rsvd1 : 2 ;
  2810F                   // 6:5 (R=0:0)
  2811F  Uint16 OVRINTE : 1 ;
  2812F                     // 7 Overflow Interrupt Enable (R/W):
  2813F                             // 0 overflow interrupt disabled
  2814F                             // 1 overflow interrupt enabled
  2815F  Uint16 PERINTE : 1 ;
  2816F                     // 8 Peripheral Interrupt Enable Bit (R/W):
  2817F                             // 0 peripheral interrupt disabled
  2818F                             // 1 peripheral interrupt enabled
  2819F  Uint16 CHINTMODE : 1 ;
  2820F                       // 9 Channel Interrupt Mode Bit (R/W):
  2821F                             // 0 generate interrupt at beginning of new transfer
  2822F                             // 1 generate interrupt at end of transfer
  2823F  Uint16 ONESHOT : 1 ;
  2824F                     // 10 One Shot Mode Bit (R/W):
  2825F                             // 0 only interrupt event triggers single burst transfer
  2826F                             // 1 first interrupt triggers burst, continue until transfer count is zero
  2827F  Uint16 CONTINUOUS : 1 ;
  2828F                        // 11 Continous Mode Bit (R/W):
  2829F                             // 0 stop when transfer count is zero
  2830F                             // 1 re-initialize when transfer count is zero
  2831F  Uint16 SYNCE : 1 ;
  2832F                   // 12 Sync Enable Bit (R/W):
  2833F                             // 0 ignore selected interrupt sync signal
  2834F                             // 1 enable selected interrupt sync signal
  2835F  Uint16 SYNCSEL : 1 ;
  2836F                     // 13 Sync Select Bit (R/W):
  2837F                             // 0 sync signal controls source wrap counter
  2838F                             // 1 sync signal controls destination wrap counter
  2839F  Uint16 DATASIZE : 1 ;
  2840F                      // 14 Data Size Mode Bit (R/W):
  2841F                             // 0 16-bit data transfer size
  2842F                             // 1 32-bit data transfer size
  2843F  Uint16 CHINTE : 1 ;
  2844F                    // 15 Channel Interrupt Enable Bit (R/W):
  2845F                             // 0 channel interrupt disabled
  2846F                             // 1 channel interrupt enabled
  2847F} ;
  2848F
  2849Funion MODE_REG
  2850F{
  2851F  Uint16 all ;
  2852F  struct MODE_BITS bit ;
  2853F} ;
  2854F//----------------------------------------------------
  2855F// Channel CONTROL register bit definitions:
  2856F
  2857Fstruct CONTROL_BITS
  2858F{                     // bits description
  2859F  Uint16 RUN : 1 ;
  2860F                 // 0 Run Bit (R=0/W=1)
  2861F  Uint16 HALT : 1 ;
  2862F                  // 1 Halt Bit (R=0/W=1)
  2863F  Uint16 SOFTRESET : 1 ;
  2864F                       // 2 Soft Reset Bit (R=0/W=1)
  2865F  Uint16 PERINTFRC : 1 ;
  2866F                       // 3 Interrupt Force Bit (R=0/W=1)
  2867F  Uint16 PERINTCLR : 1 ;
  2868F                       // 4 Interrupt Clear Bit (R=0/W=1)
  2869F  Uint16 SYNCFRC : 1 ;
  2870F                     // 5 Sync Force Bit (R=0/W=1)
  2871F  Uint16 SYNCCLR : 1 ;
  2872F                     // 6 Sync Clear Bit (R=0/W=1)
  2873F  Uint16 ERRCLR : 1 ;
  2874F                    // 7 Error Clear Bit (R=0/W=1)
  2875F  Uint16 PERINTFLG : 1 ;
  2876F                       // 8 Interrupt Flag Bit (R):
  2877F                             // 0 no interrupt pending
  2878F                             // 1 interrupt pending
  2879F  Uint16 SYNCFLG : 1 ;
  2880F                     // 9 Sync Flag Bit (R):
  2881F                             // 0 no sync pending
  2882F                             // 1 sync pending
  2883F  Uint16 SYNCERR : 1 ;
  2884F                     // 10 Sync Error Flag Bit (R):
  2885F                             // 0 no sync error
  2886F                             // 1 sync error detected
  2887F  Uint16 TRANSFERSTS : 1 ;
  2888F                         // 11 Transfer Status Bit (R):
  2889F                             // 0 no transfer in progress or pending
  2890F                             // 1 transfer in progress or pending
  2891F  Uint16 BURSTSTS : 1 ;
  2892F                      // 12 Burst Status Bit (R):
  2893F                             // 0 no burst in progress or pending
  2894F                             // 1 burst in progress or pending
  2895F  Uint16 RUNSTS : 1 ;
  2896F                    // 13 Run Status Bit (R):
  2897F                             // 0 channel not running or halted
  2898F                             // 1 channel running
  2899F  Uint16 OVRFLG : 1 ;
  2900F                    // 14 Overflow Flag Bit(R)
  2901F                             // 0 no overflow event
  2902F                             // 1 overflow event
  2903F  Uint16 rsvd1 : 1 ;
  2904F                   // 15 (R=0)
  2905F} ;
  2906F
  2907Funion CONTROL_REG
  2908F{
  2909F  Uint16 all ;
  2910F  struct CONTROL_BITS bit ;
  2911F} ;
  2912F//----------------------------------------------------
  2913F// DMACTRL register bit definitions:
  2914F
  2915Fstruct DMACTRL_BITS
  2916F{                     // bits description
  2917F  Uint16 HARDRESET : 1 ;
  2918F                       // 0 Hard Reset Bit (R=0/W=1)
  2919F  Uint16 PRIORITYRESET : 1 ;
  2920F                           // 1 Priority Reset Bit (R=0/W=1)
  2921F  Uint16 rsvd1 : 14 ;
  2922F                    // 15:2 (R=0:0)
  2923F} ;
  2924F
  2925Funion DMACTRL_REG
  2926F{
  2927F  Uint16 all ;
  2928F  struct DMACTRL_BITS bit ;
  2929F} ;
  2930F//----------------------------------------------------
  2931F// DEBUGCTRL register bit definitions:
  2932F
  2933Fstruct DEBUGCTRL_BITS
  2934F{                       // bits description
  2935F  Uint16 rsvd1 : 15 ;
  2936F                    // 14:0 (R=0:0)
  2937F  Uint16 FREE : 1 ;
  2938F                  // 15 Debug Mode Bit (R/W):
  2939F                             // 0 halt after current read-write operation
  2940F                             // 1 continue running
  2941F} ;
  2942F
  2943Funion DEBUGCTRL_REG
  2944F{
  2945F  Uint16 all ;
  2946F  struct DEBUGCTRL_BITS bit ;
  2947F} ;
  2948F//----------------------------------------------------
  2949F// PRIORITYCTRL1 register bit definitions:
  2950F
  2951Fstruct PRIORITYCTRL1_BITS
  2952F{                           // bits description
  2953F  Uint16 CH1PRIORITY : 1 ;
  2954F                         // 0 Ch1 Priority Bit (R/W):
  2955F                             // 0 same priority as all other channels
  2956F                             // 1 highest priority channel
  2957F  Uint16 rsvd1 : 15 ;
  2958F                    // 15:1 (R=0:0)
  2959F} ;
  2960F
  2961Funion PRIORITYCTRL1_REG
  2962F{
  2963F  Uint16 all ;
  2964F  struct PRIORITYCTRL1_BITS bit ;
  2965F} ;
  2966F//----------------------------------------------------
  2967F// PRIORITYSTAT register bit definitions:
  2968F
  2969Fstruct PRIORITYSTAT_BITS
  2970F{                          // bits description
  2971F  Uint16 ACTIVESTS : 3 ;
  2972F                       // 2:0 Active Channel Status Bits (R):
  2973F                              // 0,0,0 no channel active
  2974F                              // 0,0,1 Ch1 channel active
  2975F                              // 0,1,0 Ch2 channel active
  2976F                              // 0,1,1 Ch3 channel active
  2977F                              // 1,0,0 Ch4 channel active
  2978F                              // 1,0,1 Ch5 channel active
  2979F                              // 1,1,0 Ch6 channel active
  2980F  Uint16 rsvd1 : 1 ;
  2981F                   // 3 (R=0)
  2982F  Uint16 ACTIVESTS_SHADOW : 3 ;
  2983F                              // 6:4 Active Channel Status Shadow Bits (R):
  2984F                              // 0,0,0 no channel active and interrupted by Ch1
  2985F                              // 0,0,1 cannot occur
  2986F                              // 0,1,0 Ch2 was active and interrupted by Ch1
  2987F                              // 0,1,1 Ch3 was active and interrupted by Ch1
  2988F                              // 1,0,0 Ch4 was active and interrupted by Ch1
  2989F                              // 1,0,1 Ch5 was active and interrupted by Ch1
  2990F                              // 1,1,0 Ch6 was active and interrupted by Ch1
  2991F  Uint16 rsvd2 : 9 ;
  2992F                   // 15:7 (R=0:0)
  2993F} ;
  2994F
  2995Funion PRIORITYSTAT_REG
  2996F{
  2997F  Uint16 all ;
  2998F  struct PRIORITYSTAT_BITS bit ;
  2999F} ;
  3000F// Burst Size
  3001F
  3002Fstruct BURST_SIZE_BITS
  3003F{                        // bits description
  3004F  Uint16 BURSTSIZE : 5 ;
  3005F                       // 4:0 Burst transfer size
  3006F  Uint16 rsvd1 : 11 ;
  3007F                    // 15:5 reserved
  3008F} ;
  3009F
  3010Funion BURST_SIZE_REG
  3011F{
  3012F  Uint16 all ;
  3013F  struct BURST_SIZE_BITS bit ;
  3014F} ;
  3015F// Burst Count
  3016F
  3017Fstruct BURST_COUNT_BITS
  3018F{                         // bits description
  3019F  Uint16 BURSTCOUNT : 5 ;
  3020F                        // 4:0 Burst transfer size
  3021F  Uint16 rsvd1 : 11 ;
  3022F                    // 15:5 reserved
  3023F} ;
  3024F
  3025Funion BURST_COUNT_REG
  3026F{
  3027F  Uint16 all ;
  3028F  struct BURST_COUNT_BITS bit ;
  3029F} ;
  3030F//----------------------------------------------------
  3031F// DMA Channel Registers:
  3032F
  3033Fstruct CH_REGS
  3034F{
  3035F  union MODE_REG MODE ; // Mode Register
  3036F  union CONTROL_REG CONTROL ; // Control Register
  3037F  union BURST_SIZE_REG BURST_SIZE ; // Burst Size Register
  3038F  union BURST_COUNT_REG BURST_COUNT ; // Burst Count Register
  3039F  int16 SRC_BURST_STEP ; // Source Burst Step Register
  3040F  int16 DST_BURST_STEP ; // Destination Burst Step Register
  3041F  Uint16 TRANSFER_SIZE ; // Transfer Size Register
  3042F  Uint16 TRANSFER_COUNT ; // Transfer Count Register
  3043F  int16 SRC_TRANSFER_STEP ; // Source Transfer Step Register
  3044F  int16 DST_TRANSFER_STEP ; // Destination Transfer Step Register
  3045F  Uint16 SRC_WRAP_SIZE ; // Source Wrap Size Register
  3046F  Uint16 SRC_WRAP_COUNT ; // Source Wrap Count Register
  3047F  int16 SRC_WRAP_STEP ; // Source Wrap Step Register
  3048F  Uint16 DST_WRAP_SIZE ; // Destination Wrap Size Register
  3049F  Uint16 DST_WRAP_COUNT ; // Destination Wrap Count Register
  3050F  int16 DST_WRAP_STEP ; // Destination Wrap Step Register
  3051F  Uint32 SRC_BEG_ADDR_SHADOW ; // Source Begin Address Shadow Register
  3052F  Uint32 SRC_ADDR_SHADOW ; // Source Address Shadow Register
  3053F  Uint32 SRC_BEG_ADDR_ACTIVE ; // Source Begin Address Active Register
  3054F  Uint32 SRC_ADDR_ACTIVE ; // Source Address Active Register
  3055F  Uint32 DST_BEG_ADDR_SHADOW ; // Destination Begin Address Shadow Register
  3056F  Uint32 DST_ADDR_SHADOW ; // Destination Address Shadow Register
  3057F  Uint32 DST_BEG_ADDR_ACTIVE ; // Destination Begin Address Active Register
  3058F  Uint32 DST_ADDR_ACTIVE ; // Destination Address Active Register
  3059F} ;
  3060F//----------------------------------------------------
  3061F// DMA Registers:
  3062F
  3063Fstruct DMA_REGS
  3064F{
  3065F  union DMACTRL_REG DMACTRL ; // DMA Control Register
  3066F  union DEBUGCTRL_REG DEBUGCTRL ; // Debug Control Register
  3067F  Uint16 rsvd0 ; // reserved
  3068F  Uint16 rsvd1 ; //
  3069F  union PRIORITYCTRL1_REG PRIORITYCTRL1 ; // Priority Control 1 Register
  3070F  Uint16 rsvd2 ; //
  3071F  union PRIORITYSTAT_REG PRIORITYSTAT ; // Priority Status Register
  3072F  Uint16 rsvd3 [ 25 ] ;
  3073F                     //
  3074F  struct CH_REGS CH1 ; // DMA Channel 1 Registers
  3075F  struct CH_REGS CH2 ; // DMA Channel 2 Registers
  3076F  struct CH_REGS CH3 ; // DMA Channel 3 Registers
  3077F  struct CH_REGS CH4 ; // DMA Channel 4 Registers
  3078F  struct CH_REGS CH5 ; // DMA Channel 5 Registers
  3079F  struct CH_REGS CH6 ; // DMA Channel 6 Registers
  3080F} ;
  3081F//---------------------------------------------------------------------------
  3082F// External References & Function Declarations:
  3083F//
  3084F
  3085Fextern volatile struct DMA_REGS
  3086F  DmaRegs ;
  3087F       /* extern "C" */
  3088F       // end of DSP2833x_DMA_H definition
  3089F//===========================================================================
  3090F// End of file.
  3091F//===========================================================================
  3092F 
  3093F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DMA.h*/
  3094F/*   CLOSE_FILE Include File */
  3095F 
  3096F                // DMA Registers
  3097F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EPwm.h */
  3098F// TI File $Revision: /main/1 $
  3099F// Checkin $Date: August 18, 2006 13:52:10 $
  3100F//###########################################################################
  3101F//
  3102F// FILE: DSP2833x_EPwm.h
  3103F//
  3104F// TITLE: DSP2833x Enhanced PWM Module Register Bit Definitions.
  3105F//
  3106F//###########################################################################
  3107F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  3108F// $Release Date: August 4, 2009 $
  3109F//###########################################################################
  3110F#ifndef DSP2833x_EPWM_H
  3111F#define DSP2833x_EPWM_H
  3112F//----------------------------------------------------
  3113F// Time base control register bit definitions */
  3114F
  3115Fstruct TBCTL_BITS
  3116F{                   // bits description
  3117F  Uint16 CTRMODE : 2 ;
  3118F                     // 1:0 Counter Mode
  3119F  Uint16 PHSEN : 1 ;
  3120F                   // 2 Phase load enable
  3121F  Uint16 PRDLD : 1 ;
  3122F                   // 3 Active period load
  3123F  Uint16 SYNCOSEL : 2 ;
  3124F                      // 5:4 Sync output select
  3125F  Uint16 SWFSYNC : 1 ;
  3126F                     // 6 Software force sync pulse
  3127F  Uint16 HSPCLKDIV : 3 ;
  3128F                       // 9:7 High speed time pre-scale
  3129F  Uint16 CLKDIV : 3 ;
  3130F                    // 12:10 Timebase clock pre-scale
  3131F  Uint16 PHSDIR : 1 ;
  3132F                    // 13 Phase Direction
  3133F  Uint16 FREE_SOFT : 2 ;
  3134F                       // 15:14 Emulation mode
  3135F} ;
  3136F
  3137Funion TBCTL_REG
  3138F{
  3139F  Uint16 all ;
  3140F  struct TBCTL_BITS bit ;
  3141F} ;
  3142F//----------------------------------------------------
  3143F// Time base status register bit definitions */
  3144F
  3145Fstruct TBSTS_BITS
  3146F{                   // bits description
  3147F  Uint16 CTRDIR : 1 ;
  3148F                    // 0 Counter direction status
  3149F  Uint16 SYNCI : 1 ;
  3150F                   // 1 External input sync status
  3151F  Uint16 CTRMAX : 1 ;
  3152F                    // 2 Counter max latched status
  3153F  Uint16 rsvd1 : 13 ;
  3154F                    // 15:3 reserved
  3155F} ;
  3156F
  3157Funion TBSTS_REG
  3158F{
  3159F  Uint16 all ;
  3160F  struct TBSTS_BITS bit ;
  3161F} ;
  3162F//----------------------------------------------------
  3163F// Compare control register bit definitions */
  3164F
  3165Fstruct CMPCTL_BITS
  3166F{                    // bits description
  3167F  Uint16 LOADAMODE : 2 ;
  3168F                       // 0:1 Active compare A
  3169F  Uint16 LOADBMODE : 2 ;
  3170F                       // 3:2 Active compare B
  3171F  Uint16 SHDWAMODE : 1 ;
  3172F                       // 4 Compare A block operating mode
  3173F  Uint16 rsvd1 : 1 ;
  3174F                   // 5 reserved
  3175F  Uint16 SHDWBMODE : 1 ;
  3176F                       // 6 Compare B block operating mode
  3177F  Uint16 rsvd2 : 1 ;
  3178F                   // 7 reserved
  3179F  Uint16 SHDWAFULL : 1 ;
  3180F                       // 8 Compare A Shadow registers full Status
  3181F  Uint16 SHDWBFULL : 1 ;
  3182F                       // 9 Compare B Shadow registers full Status
  3183F  Uint16 rsvd3 : 6 ;
  3184F                   // 15:10 reserved
  3185F} ;
  3186F
  3187Funion CMPCTL_REG
  3188F{
  3189F  Uint16 all ;
  3190F  struct CMPCTL_BITS bit ;
  3191F} ;
  3192F//----------------------------------------------------
  3193F// Action qualifier register bit definitions */
  3194F
  3195Fstruct AQCTL_BITS
  3196F{                   // bits description
  3197F  Uint16 ZRO : 2 ;
  3198F                 // 1:0 Action Counter = Zero
  3199F  Uint16 PRD : 2 ;
  3200F                 // 3:2 Action Counter = Period
  3201F  Uint16 CAU : 2 ;
  3202F                 // 5:4 Action Counter = Compare A up
  3203F  Uint16 CAD : 2 ;
  3204F                 // 7:6 Action Counter = Compare A down
  3205F  Uint16 CBU : 2 ;
  3206F                 // 9:8 Action Counter = Compare B up
  3207F  Uint16 CBD : 2 ;
  3208F                 // 11:10 Action Counter = Compare B down
  3209F  Uint16 rsvd : 4 ;
  3210F                  // 15:12 reserved
  3211F} ;
  3212F
  3213Funion AQCTL_REG
  3214F{
  3215F  Uint16 all ;
  3216F  struct AQCTL_BITS bit ;
  3217F} ;
  3218F//----------------------------------------------------
  3219F// Action qualifier SW force register bit definitions */
  3220F
  3221Fstruct AQSFRC_BITS
  3222F{                    // bits description
  3223F  Uint16 ACTSFA : 2 ;
  3224F                    // 1:0 Action when One-time SW Force A invoked
  3225F  Uint16 OTSFA : 1 ;
  3226F                   // 2 One-time SW Force A output
  3227F  Uint16 ACTSFB : 2 ;
  3228F                    // 4:3 Action when One-time SW Force B invoked
  3229F  Uint16 OTSFB : 1 ;
  3230F                   // 5 One-time SW Force A output
  3231F  Uint16 RLDCSF : 2 ;
  3232F                    // 7:6 Reload from Shadow options
  3233F  Uint16 rsvd1 : 8 ;
  3234F                   // 15:8 reserved
  3235F} ;
  3236F
  3237Funion AQSFRC_REG
  3238F{
  3239F  Uint16 all ;
  3240F  struct AQSFRC_BITS bit ;
  3241F} ;
  3242F//----------------------------------------------------
  3243F// Action qualifier continuous SW force register bit definitions */
  3244F
  3245Fstruct AQCSFRC_BITS
  3246F{                     // bits description
  3247F  Uint16 CSFA : 2 ;
  3248F                  // 1:0 Continuous Software Force on output A
  3249F  Uint16 CSFB : 2 ;
  3250F                  // 3:2 Continuous Software Force on output B
  3251F  Uint16 rsvd1 : 12 ;
  3252F                    // 15:4 reserved
  3253F} ;
  3254F
  3255Funion AQCSFRC_REG
  3256F{
  3257F  Uint16 all ;
  3258F  struct AQCSFRC_BITS bit ;
  3259F} ;
  3260F// As of version 1.1
  3261F// Changed the MODE bit-field to OUT_MODE
  3262F// Added the bit-field IN_MODE
  3263F// This corresponds to changes in silicon as of F2833x devices
  3264F// Rev A silicon.
  3265F//----------------------------------------------------
  3266F// Dead-band generator control register bit definitions
  3267F
  3268Fstruct DBCTL_BITS
  3269F{                   // bits description
  3270F  Uint16 OUT_MODE : 2 ;  // 1:0 Dead Band Output Mode Control
  3271F  Uint16 POLSEL : 2 ;
  3272F                    // 3:2 Polarity Select Control
  3273F  Uint16 IN_MODE : 2 ;
  3274F                     // 5:4 Dead Band Input Select Mode Control
  3275F  Uint16 rsvd1 : 10 ;
  3276F                    // 15:4 reserved
  3277F} ;
  3278F
  3279Funion DBCTL_REG
  3280F{
  3281F  Uint16 all ;
  3282F  struct DBCTL_BITS bit ;
  3283F} ;
  3284F//----------------------------------------------------
  3285F// Trip zone select register bit definitions
  3286F
  3287Fstruct TZSEL_BITS
  3288F{                   // bits description
  3289F  Uint16 CBC1 : 1 ;
  3290F                  // 0 TZ1 CBC select
  3291F  Uint16 CBC2 : 1 ;
  3292F                  // 1 TZ2 CBC select
  3293F  Uint16 CBC3 : 1 ;
  3294F                  // 2 TZ3 CBC select
  3295F  Uint16 CBC4 : 1 ;
  3296F                  // 3 TZ4 CBC select
  3297F  Uint16 CBC5 : 1 ;
  3298F                  // 4 TZ5 CBC select
  3299F  Uint16 CBC6 : 1 ;
  3300F                  // 5 TZ6 CBC select
  3301F  Uint16 rsvd1 : 2 ;
  3302F                   // 7:6 reserved
  3303F  Uint16 OSHT1 : 1 ;
  3304F                   // 8 One-shot TZ1 select
  3305F  Uint16 OSHT2 : 1 ;
  3306F                   // 9 One-shot TZ2 select
  3307F  Uint16 OSHT3 : 1 ;
  3308F                   // 10 One-shot TZ3 select
  3309F  Uint16 OSHT4 : 1 ;
  3310F                   // 11 One-shot TZ4 select
  3311F  Uint16 OSHT5 : 1 ;
  3312F                   // 12 One-shot TZ5 select
  3313F  Uint16 OSHT6 : 1 ;
  3314F                   // 13 One-shot TZ6 select
  3315F  Uint16 rsvd2 : 2 ;
  3316F                   // 15:14 reserved
  3317F} ;
  3318F
  3319Funion TZSEL_REG
  3320F{
  3321F  Uint16 all ;
  3322F  struct TZSEL_BITS bit ;
  3323F} ;
  3324F//----------------------------------------------------
  3325F// Trip zone control register bit definitions */
  3326F
  3327Fstruct TZCTL_BITS
  3328F{                   // bits description
  3329F  Uint16 TZA : 2 ;
  3330F                 // 1:0 TZ1 to TZ6 Trip Action On EPWMxA
  3331F  Uint16 TZB : 2 ;
  3332F                 // 3:2 TZ1 to TZ6 Trip Action On EPWMxB
  3333F  Uint16 rsvd : 12 ;
  3334F                   // 15:4 reserved
  3335F} ;
  3336F
  3337Funion TZCTL_REG
  3338F{
  3339F  Uint16 all ;
  3340F  struct TZCTL_BITS bit ;
  3341F} ;
  3342F//----------------------------------------------------
  3343F// Trip zone control register bit definitions */
  3344F
  3345Fstruct TZEINT_BITS
  3346F{                    // bits description
  3347F  Uint16 rsvd1 : 1 ;
  3348F                   // 0 reserved
  3349F  Uint16 CBC : 1 ;
  3350F                 // 1 Trip Zones Cycle By Cycle Int Enable
  3351F  Uint16 OST : 1 ;
  3352F                 // 2 Trip Zones One Shot Int Enable
  3353F  Uint16 rsvd2 : 13 ;
  3354F                    // 15:3 reserved
  3355F} ;
  3356F
  3357Funion TZEINT_REG
  3358F{
  3359F  Uint16 all ;
  3360F  struct TZEINT_BITS bit ;
  3361F} ;
  3362F//----------------------------------------------------
  3363F// Trip zone flag register bit definitions */
  3364F
  3365Fstruct TZFLG_BITS
  3366F{                   // bits description
  3367F  Uint16 INT : 1 ;
  3368F                 // 0 Global status
  3369F  Uint16 CBC : 1 ;
  3370F                 // 1 Trip Zones Cycle By Cycle Int
  3371F  Uint16 OST : 1 ;
  3372F                 // 2 Trip Zones One Shot Int
  3373F  Uint16 rsvd2 : 13 ;
  3374F                    // 15:3 reserved
  3375F} ;
  3376F
  3377Funion TZFLG_REG
  3378F{
  3379F  Uint16 all ;
  3380F  struct TZFLG_BITS bit ;
  3381F} ;
  3382F//----------------------------------------------------
  3383F// Trip zone flag clear register bit definitions */
  3384F
  3385Fstruct TZCLR_BITS
  3386F{                   // bits description
  3387F  Uint16 INT : 1 ;
  3388F                 // 0 Global status
  3389F  Uint16 CBC : 1 ;
  3390F                 // 1 Trip Zones Cycle By Cycle Int
  3391F  Uint16 OST : 1 ;
  3392F                 // 2 Trip Zones One Shot Int
  3393F  Uint16 rsvd2 : 13 ;
  3394F                    // 15:3 reserved
  3395F} ;
  3396F
  3397Funion TZCLR_REG
  3398F{
  3399F  Uint16 all ;
  3400F  struct TZCLR_BITS bit ;
  3401F} ;
  3402F//----------------------------------------------------
  3403F// Trip zone flag force register bit definitions */
  3404F
  3405Fstruct TZFRC_BITS
  3406F{                   // bits description
  3407F  Uint16 rsvd1 : 1 ;
  3408F                   // 0 reserved
  3409F  Uint16 CBC : 1 ;
  3410F                 // 1 Trip Zones Cycle By Cycle Int
  3411F  Uint16 OST : 1 ;
  3412F                 // 2 Trip Zones One Shot Int
  3413F  Uint16 rsvd2 : 13 ;
  3414F                    // 15:3 reserved
  3415F} ;
  3416F
  3417Funion TZFRC_REG
  3418F{
  3419F  Uint16 all ;
  3420F  struct TZFRC_BITS bit ;
  3421F} ;
  3422F//----------------------------------------------------
  3423F// Event trigger select register bit definitions */
  3424F
  3425Fstruct ETSEL_BITS
  3426F{                   // bits description
  3427F  Uint16 INTSEL : 3 ;
  3428F                    // 2:0 EPWMxINTn Select
  3429F  Uint16 INTEN : 1 ;
  3430F                   // 3 EPWMxINTn Enable
  3431F  Uint16 rsvd1 : 4 ;
  3432F                   // 7:4 reserved
  3433F  Uint16 SOCASEL : 3 ;
  3434F                     // 10:8 Start of conversion A Select
  3435F  Uint16 SOCAEN : 1 ;
  3436F                    // 11 Start of conversion A Enable
  3437F  Uint16 SOCBSEL : 3 ;
  3438F                     // 14:12 Start of conversion B Select
  3439F  Uint16 SOCBEN : 1 ;
  3440F                    // 15 Start of conversion B Enable
  3441F} ;
  3442F
  3443Funion ETSEL_REG
  3444F{
  3445F  Uint16 all ;
  3446F  struct ETSEL_BITS bit ;
  3447F} ;
  3448F//----------------------------------------------------
  3449F// Event trigger pre-scale register bit definitions */
  3450F
  3451Fstruct ETPS_BITS
  3452F{                  // bits description
  3453F  Uint16 INTPRD : 2 ;
  3454F                    // 1:0 EPWMxINTn Period Select
  3455F  Uint16 INTCNT : 2 ;
  3456F                    // 3:2 EPWMxINTn Counter Register
  3457F  Uint16 rsvd1 : 4 ;
  3458F                   // 7:4 reserved
  3459F  Uint16 SOCAPRD : 2 ;
  3460F                     // 9:8 EPWMxSOCA Period Select
  3461F  Uint16 SOCACNT : 2 ;
  3462F                     // 11:10 EPWMxSOCA Counter Register
  3463F  Uint16 SOCBPRD : 2 ;
  3464F                     // 13:12 EPWMxSOCB Period Select
  3465F  Uint16 SOCBCNT : 2 ;
  3466F                     // 15:14 EPWMxSOCB Counter Register
  3467F} ;
  3468F
  3469Funion ETPS_REG
  3470F{
  3471F  Uint16 all ;
  3472F  struct ETPS_BITS bit ;
  3473F} ;
  3474F//----------------------------------------------------
  3475F// Event trigger Flag register bit definitions */
  3476F
  3477Fstruct ETFLG_BITS
  3478F{                   // bits description
  3479F  Uint16 INT : 1 ;
  3480F                 // 0   EPWMxINTn Flag
  3481F  Uint16 rsvd1 : 1 ;
  3482F                   // 1 reserved
  3483F  Uint16 SOCA : 1 ;
  3484F                  // 2  EPWMxSOCA Flag
  3485F  Uint16 SOCB : 1 ;
  3486F                  // 3  EPWMxSOCB Flag
  3487F  Uint16 rsvd2 : 12 ;
  3488F                    // 15:4     reserved
  3489F} ;
  3490F
  3491Funion ETFLG_REG
  3492F{
  3493F  Uint16 all ;
  3494F  struct ETFLG_BITS bit ;
  3495F} ;
  3496F//----------------------------------------------------
  3497F// Event trigger Clear register bit definitions */
  3498F
  3499Fstruct ETCLR_BITS
  3500F{                   // bits description
  3501F  Uint16 INT : 1 ;
  3502F                 // 0   EPWMxINTn Clear
  3503F  Uint16 rsvd1 : 1 ;
  3504F                   // 1 reserved
  3505F  Uint16 SOCA : 1 ;
  3506F                  // 2  EPWMxSOCA Clear
  3507F  Uint16 SOCB : 1 ;
  3508F                  // 3  EPWMxSOCB Clear
  3509F  Uint16 rsvd2 : 12 ;
  3510F                    // 15:4     reserved
  3511F} ;
  3512F
  3513Funion ETCLR_REG
  3514F{
  3515F  Uint16 all ;
  3516F  struct ETCLR_BITS bit ;
  3517F} ;
  3518F//----------------------------------------------------
  3519F// Event trigger Force register bit definitions */
  3520F
  3521Fstruct ETFRC_BITS
  3522F{                   // bits description
  3523F  Uint16 INT : 1 ;
  3524F                 // 0   EPWMxINTn Force
  3525F  Uint16 rsvd1 : 1 ;
  3526F                   // 1 reserved
  3527F  Uint16 SOCA : 1 ;
  3528F                  // 2  EPWMxSOCA Force
  3529F  Uint16 SOCB : 1 ;
  3530F                  // 3  EPWMxSOCB Force
  3531F  Uint16 rsvd2 : 12 ;
  3532F                    // 15:4     reserved
  3533F} ;
  3534F
  3535Funion ETFRC_REG
  3536F{
  3537F  Uint16 all ;
  3538F  struct ETFRC_BITS bit ;
  3539F} ;
  3540F//----------------------------------------------------
  3541F// PWM chopper control register bit definitions */
  3542F
  3543Fstruct PCCTL_BITS
  3544F{                   // bits description
  3545F  Uint16 CHPEN : 1 ;
  3546F                   // 0 PWM chopping enable
  3547F  Uint16 OSHTWTH : 4 ;
  3548F                     // 4:1 One-shot pulse width
  3549F  Uint16 CHPFREQ : 3 ;
  3550F                     // 7:5 Chopping clock frequency
  3551F  Uint16 CHPDUTY : 3 ;
  3552F                     // 10:8 Chopping clock Duty cycle
  3553F  Uint16 rsvd1 : 5 ;
  3554F                   // 15:11 reserved
  3555F} ;
  3556F
  3557Funion PCCTL_REG
  3558F{
  3559F  Uint16 all ;
  3560F  struct PCCTL_BITS bit ;
  3561F} ;
  3562F
  3563Fstruct HRCNFG_BITS
  3564F{                       // bits description
  3565F  Uint16 EDGMODE : 2 ;  // 1:0 Edge Mode select Bits
  3566F  Uint16 CTLMODE : 1 ;  // 2 Control mode Select Bit
  3567F  Uint16 HRLOAD : 1 ;   // 3 Shadow mode Select Bit
  3568F  Uint16 rsvd1 : 12 ;   // 15:4 reserved
  3569F} ;
  3570F
  3571Funion HRCNFG_REG
  3572F{
  3573F  Uint16 all ;
  3574F  struct HRCNFG_BITS bit ;
  3575F} ;
  3576F
  3577Fstruct TBPHS_HRPWM_REG
  3578F{                               // bits description
  3579F  Uint16 TBPHSHR ;      // 15:0 Extension register for HRPWM Phase (8 bits)
  3580F  Uint16 TBPHS ; // 31:16 Phase offset register
  3581F} ;
  3582F
  3583Funion TBPHS_HRPWM_GROUP
  3584F{
  3585F  Uint32 all ;
  3586F  struct TBPHS_HRPWM_REG half ;
  3587F} ;
  3588F
  3589Fstruct CMPA_HRPWM_REG
  3590F{                               // bits description
  3591F  Uint16 CMPAHR ;        // 15:0 Extension register for HRPWM compare (8 bits)
  3592F  Uint16 CMPA ; // 31:16 Compare A reg
  3593F} ;
  3594F
  3595Funion CMPA_HRPWM_GROUP
  3596F{
  3597F  Uint32 all ;
  3598F  struct CMPA_HRPWM_REG half ;
  3599F} ;
  3600F
  3601Fstruct EPWM_REGS
  3602F{
  3603F  union TBCTL_REG TBCTL ; //
  3604F  union TBSTS_REG TBSTS ; //
  3605F  union TBPHS_HRPWM_GROUP TBPHS ; // Union of TBPHS:TBPHSHR
  3606F  Uint16 TBCTR ; // Counter
  3607F  Uint16 TBPRD ; // Period register set
  3608F  Uint16 rsvd1 ; //
  3609F  union CMPCTL_REG CMPCTL ; // Compare control
  3610F  union CMPA_HRPWM_GROUP CMPA ; // Union of CMPA:CMPAHR
  3611F  Uint16 CMPB ; // Compare B reg
  3612F  union AQCTL_REG AQCTLA ; // Action qual output A
  3613F  union AQCTL_REG AQCTLB ; // Action qual output B
  3614F  union AQSFRC_REG AQSFRC ; // Action qual SW force
  3615F  union AQCSFRC_REG AQCSFRC ; // Action qualifier continuous SW force
  3616F  union DBCTL_REG DBCTL ; // Dead-band control
  3617F  Uint16 DBRED ; // Dead-band rising edge delay
  3618F  Uint16 DBFED ; // Dead-band falling edge delay
  3619F  union TZSEL_REG TZSEL ; // Trip zone select
  3620F  Uint16 rsvd2 ;
  3621F  union TZCTL_REG TZCTL ; // Trip zone control
  3622F  union TZEINT_REG TZEINT ; // Trip zone interrupt enable
  3623F  union TZFLG_REG TZFLG ; // Trip zone interrupt flags
  3624F  union TZCLR_REG TZCLR ; // Trip zone clear
  3625F  union TZFRC_REG TZFRC ;       // Trip zone force interrupt
  3626F  union ETSEL_REG ETSEL ; // Event trigger selection
  3627F  union ETPS_REG ETPS ; // Event trigger pre-scaler
  3628F  union ETFLG_REG ETFLG ; // Event trigger flags
  3629F  union ETCLR_REG ETCLR ; // Event trigger clear
  3630F  union ETFRC_REG ETFRC ; // Event trigger force
  3631F  union PCCTL_REG PCCTL ; // PWM chopper control
  3632F  Uint16 rsvd3 ; //
  3633F  union HRCNFG_REG HRCNFG ; // HRPWM Config Reg
  3634F} ;
  3635F//---------------------------------------------------------------------------
  3636F// External References & Function Declarations:
  3637F//
  3638F
  3639Fextern volatile struct EPWM_REGS
  3640F  EPwm1Regs ;
  3641F
  3642Fextern volatile struct EPWM_REGS
  3643F  EPwm2Regs ;
  3644F
  3645Fextern volatile struct EPWM_REGS
  3646F  EPwm3Regs ;
  3647F
  3648Fextern volatile struct EPWM_REGS
  3649F  EPwm4Regs ;
  3650F
  3651Fextern volatile struct EPWM_REGS
  3652F  EPwm5Regs ;
  3653F
  3654Fextern volatile struct EPWM_REGS
  3655F  EPwm6Regs ;
  3656F       /* extern "C" */
  3657F       // end of DSP2833x_EPWM_H definition
  3658F//===========================================================================
  3659F// End of file.
  3660F//===========================================================================
  3661F 
  3662F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EPwm.h*/
  3663F/*   CLOSE_FILE Include File */
  3664F 
  3665F               // Enhanced PWM
  3666F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EQep.h */
  3667F// TI File $Revision: /main/1 $
  3668F// Checkin $Date: August 18, 2006 13:52:13 $
  3669F//###########################################################################
  3670F//
  3671F// FILE: DSP2833x_EQep.h
  3672F//
  3673F// TITLE: DSP2833x Enhanced Quadrature Encoder Pulse Module
  3674F// Register Bit Definitions.
  3675F//
  3676F//###########################################################################
  3677F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  3678F// $Release Date: August 4, 2009 $
  3679F//###########################################################################
  3680F#ifndef DSP2833x_EQEP_H
  3681F#define DSP2833x_EQEP_H
  3682F//----------------------------------------------------
  3683F// Capture decoder control register bit definitions */
  3684F
  3685Fstruct QDECCTL_BITS
  3686F{                     // bits description
  3687F  Uint16 rsvd1 : 5 ;
  3688F                   // 4:0 reserved
  3689F  Uint16 QSP : 1 ;
  3690F                 // 5 QEPS input polarity
  3691F  Uint16 QIP : 1 ;
  3692F                 // 6 QEPI input polarity
  3693F  Uint16 QBP : 1 ;
  3694F                 // 7 QEPB input polarity
  3695F  Uint16 QAP : 1 ;
  3696F                 // 8 QEPA input polarity
  3697F  Uint16 IGATE : 1 ;
  3698F                   // 9 Index pulse gating option
  3699F  Uint16 SWAP : 1 ;
  3700F                  // 10 CLK/DIR signal source for Position Counter
  3701F  Uint16 XCR : 1 ;
  3702F                 // 11 External clock rate
  3703F  Uint16 SPSEL : 1 ;
  3704F                   // 12 Sync output pin select
  3705F  Uint16 SOEN : 1 ;
  3706F                  // 13 Enable position compare sync
  3707F  Uint16 QSRC : 2 ;
  3708F                  // 15:14 Position counter source
  3709F} ;
  3710F
  3711Funion QDECCTL_REG
  3712F{
  3713F  Uint16 all ;
  3714F  struct QDECCTL_BITS bit ;
  3715F} ;
  3716F//----------------------------------------------------
  3717F// QEP control register bit definitions */
  3718F
  3719Fstruct QEPCTL_BITS
  3720F{                    // bits description
  3721F  Uint16 WDE : 1 ;
  3722F                 // 0 QEP watchdog enable
  3723F  Uint16 UTE : 1 ;
  3724F                 // 1 QEP unit timer enable
  3725F  Uint16 QCLM : 1 ;
  3726F                  // 2 QEP capture latch mode
  3727F  Uint16 QPEN : 1 ;
  3728F                  // 3 Quadrature position counter enable
  3729F  Uint16 IEL : 2 ;
  3730F                 // 5:4 Index event latch
  3731F  Uint16 SEL : 1 ;
  3732F                 // 6 Strobe event latch
  3733F  Uint16 SWI : 1 ;
  3734F                 // 7 Software init position counter
  3735F  Uint16 IEI : 2 ;
  3736F                 // 9:8 Index event init of position count
  3737F  Uint16 SEI : 2 ;
  3738F                 // 11:10 Strobe event init
  3739F  Uint16 PCRM : 2 ;
  3740F                  // 13:12 Position counter reset
  3741F  Uint16 FREE_SOFT : 2 ;
  3742F                       // 15:14 Emulation mode
  3743F} ;
  3744F
  3745Funion QEPCTL_REG
  3746F{
  3747F  Uint16 all ;
  3748F  struct QEPCTL_BITS bit ;
  3749F} ;
  3750F//----------------------------------------------------
  3751F// Quadrature capture control register bit definitions */
  3752F
  3753Fstruct QCAPCTL_BITS
  3754F{                     // bits description
  3755F  Uint16 UPPS : 4 ;
  3756F                  // 3:0 Unit position pre-scale
  3757F  Uint16 CCPS : 3 ;
  3758F                  // 6:4 QEP capture timer pre-scale
  3759F  Uint16 rsvd1 : 8 ;
  3760F                   // 14:7 reserved
  3761F  Uint16 CEN : 1 ;
  3762F                 // 15 Enable QEP capture
  3763F} ;
  3764F
  3765Funion QCAPCTL_REG
  3766F{
  3767F  Uint16 all ;
  3768F  struct QCAPCTL_BITS bit ;
  3769F} ;
  3770F//----------------------------------------------------
  3771F// Position compare control register bit definitions */
  3772F
  3773Fstruct QPOSCTL_BITS
  3774F{                     // bits description
  3775F  Uint16 PCSPW : 12 ;
  3776F                    // 11:0 Position compare sync pulse width
  3777F  Uint16 PCE : 1 ;
  3778F                 // 12 Position compare enable/disable
  3779F  Uint16 PCPOL : 1 ;
  3780F                   // 13 Polarity of sync output
  3781F  Uint16 PCLOAD : 1 ;
  3782F                    // 14 Position compare of shadow load
  3783F  Uint16 PCSHDW : 1 ;
  3784F                    // 15 Position compare shadow enable
  3785F} ;
  3786F
  3787Funion QPOSCTL_REG
  3788F{
  3789F  Uint16 all ;
  3790F  struct QPOSCTL_BITS bit ;
  3791F} ;
  3792F//----------------------------------------------------
  3793F// QEP interrupt control register bit definitions */
  3794F
  3795Fstruct QEINT_BITS
  3796F{                   // bits description
  3797F  Uint16 rsvd1 : 1 ;
  3798F                   // 0 reserved
  3799F  Uint16 PCE : 1 ;
  3800F                 // 1 Position counter error
  3801F  Uint16 QPE : 1 ;
  3802F                 // 2 Quadrature phase error
  3803F  Uint16 QDC : 1 ;
  3804F                 // 3 Quadrature dir change
  3805F  Uint16 WTO : 1 ;
  3806F                 // 4 Watchdog timeout
  3807F  Uint16 PCU : 1 ;
  3808F                 // 5 Position counter underflow
  3809F  Uint16 PCO : 1 ;
  3810F                 // 6 Position counter overflow
  3811F  Uint16 PCR : 1 ;
  3812F                 // 7 Position compare ready
  3813F  Uint16 PCM : 1 ;
  3814F                 // 8 Position compare match
  3815F  Uint16 SEL : 1 ;
  3816F                 // 9 Strobe event latch
  3817F  Uint16 IEL : 1 ;
  3818F                 // 10 Event latch
  3819F  Uint16 UTO : 1 ;
  3820F                 // 11 Unit timeout
  3821F  Uint16 rsvd2 : 4 ;
  3822F                   // 15:12 reserved
  3823F} ;
  3824F
  3825Funion QEINT_REG
  3826F{
  3827F  Uint16 all ;
  3828F  struct QEINT_BITS bit ;
  3829F} ;
  3830F//----------------------------------------------------
  3831F// QEP interrupt status register bit definitions */
  3832F
  3833Fstruct QFLG_BITS
  3834F{                  // bits description
  3835F  Uint16 INT : 1 ;
  3836F                 // 0 Global interrupt
  3837F  Uint16 PCE : 1 ;
  3838F                 // 1 Position counter error
  3839F  Uint16 PHE : 1 ;
  3840F                 // 2 Quadrature phase error
  3841F  Uint16 QDC : 1 ;
  3842F                 // 3 Quadrature dir change
  3843F  Uint16 WTO : 1 ;
  3844F                 // 4 Watchdog timeout
  3845F  Uint16 PCU : 1 ;
  3846F                 // 5 Position counter underflow
  3847F  Uint16 PCO : 1 ;
  3848F                 // 6 Position counter overflow
  3849F  Uint16 PCR : 1 ;
  3850F                 // 7 Position compare ready
  3851F  Uint16 PCM : 1 ;
  3852F                 // 8 Position compare match
  3853F  Uint16 SEL : 1 ;
  3854F                 // 9 Strobe event latch
  3855F  Uint16 IEL : 1 ;
  3856F                 // 10 Event latch
  3857F  Uint16 UTO : 1 ;
  3858F                 // 11 Unit timeout
  3859F  Uint16 rsvd2 : 4 ;
  3860F                   // 15:12 reserved
  3861F} ;
  3862F
  3863Funion QFLG_REG
  3864F{
  3865F  Uint16 all ;
  3866F  struct QFLG_BITS bit ;
  3867F} ;
  3868F//----------------------------------------------------
  3869F// QEP interrupt force register bit definitions */
  3870F
  3871Fstruct QFRC_BITS
  3872F{                  // bits description
  3873F  Uint16 reserved : 1 ;
  3874F                      // 0 Reserved
  3875F  Uint16 PCE : 1 ;
  3876F                 // 1 Position counter error
  3877F  Uint16 PHE : 1 ;
  3878F                 // 2 Quadrature phase error
  3879F  Uint16 QDC : 1 ;
  3880F                 // 3 Quadrature dir change
  3881F  Uint16 WTO : 1 ;
  3882F                 // 4 Watchdog timeout
  3883F  Uint16 PCU : 1 ;
  3884F                 // 5 Position counter underflow
  3885F  Uint16 PCO : 1 ;
  3886F                 // 6 Position counter overflow
  3887F  Uint16 PCR : 1 ;
  3888F                 // 7 Position compare ready
  3889F  Uint16 PCM : 1 ;
  3890F                 // 8 Position compare match
  3891F  Uint16 SEL : 1 ;
  3892F                 // 9 Strobe event latch
  3893F  Uint16 IEL : 1 ;
  3894F                 // 10 Event latch
  3895F  Uint16 UTO : 1 ;
  3896F                 // 11 Unit timeout
  3897F  Uint16 rsvd2 : 4 ;
  3898F                   // 15:12 reserved
  3899F} ;
  3900F
  3901Funion QFRC_REG
  3902F{
  3903F  Uint16 all ;
  3904F  struct QFRC_BITS bit ;
  3905F} ;
  3906F// V1.1 Added UPEVNT (bit 7) This reflects changes
  3907F// made as of F2833x Rev A devices
  3908F//----------------------------------------------------
  3909F// QEP status register bit definitions */
  3910F
  3911Fstruct QEPSTS_BITS
  3912F{                    // bits description
  3913F  Uint16 PCEF : 1 ;
  3914F                  // 0 Position counter error
  3915F  Uint16 FIMF : 1 ;
  3916F                  // 1 First index marker
  3917F  Uint16 CDEF : 1 ;
  3918F                  // 2 Capture direction error
  3919F  Uint16 COEF : 1 ;
  3920F                  // 3 Capture overflow error
  3921F  Uint16 QDLF : 1 ;
  3922F                  // 4 QEP direction latch
  3923F  Uint16 QDF : 1 ;
  3924F                 // 5 Quadrature direction
  3925F  Uint16 FIDF : 1 ;
  3926F                  // 6 Direction on first index marker
  3927F  Uint16 UPEVNT : 1 ;
  3928F                    // 7 Unit position event flag
  3929F  Uint16 rsvd1 : 8 ;
  3930F                   // 15:8 reserved
  3931F} ;
  3932F
  3933Funion QEPSTS_REG
  3934F{
  3935F  Uint16 all ;
  3936F  struct QEPSTS_BITS bit ;
  3937F} ;
  3938F//----------------------------------------------------
  3939F
  3940Fstruct EQEP_REGS
  3941F{
  3942F  Uint32 QPOSCNT ; // Position counter
  3943F  Uint32 QPOSINIT ; // Position counter init
  3944F  Uint32 QPOSMAX ; // Maximum position count
  3945F  Uint32 QPOSCMP ; // Position compare
  3946F  Uint32 QPOSILAT ; // Index position latch
  3947F  Uint32 QPOSSLAT ; // Strobe position latch
  3948F  Uint32 QPOSLAT ; // Position latch
  3949F  Uint32 QUTMR ; // Unit timer
  3950F  Uint32 QUPRD ; // Unit period
  3951F  Uint16 QWDTMR ; // QEP watchdog timer
  3952F  Uint16 QWDPRD ; // QEP watchdog period
  3953F  union QDECCTL_REG QDECCTL ; // Quadrature decoder control
  3954F  union QEPCTL_REG QEPCTL ; // QEP control
  3955F  union QCAPCTL_REG QCAPCTL ; // Quadrature capture control
  3956F  union QPOSCTL_REG QPOSCTL ; // Position compare control
  3957F  union QEINT_REG QEINT ; // QEP interrupt control
  3958F  union QFLG_REG QFLG ; // QEP interrupt flag
  3959F  union QFLG_REG QCLR ; // QEP interrupt clear
  3960F  union QFRC_REG QFRC ; // QEP interrupt force
  3961F  union QEPSTS_REG QEPSTS ; // QEP status
  3962F  Uint16 QCTMR ; // QEP capture timer
  3963F  Uint16 QCPRD ; // QEP capture period
  3964F  Uint16 QCTMRLAT ; // QEP capture latch
  3965F  Uint16 QCPRDLAT ; // QEP capture period latch
  3966F  Uint16 rsvd1 [ 30 ] ;
  3967F                     // reserved
  3968F} ;
  3969F//---------------------------------------------------------------------------
  3970F// GPI/O External References & Function Declarations:
  3971F//
  3972F
  3973Fextern volatile struct EQEP_REGS
  3974F  EQep1Regs ;
  3975F
  3976Fextern volatile struct EQEP_REGS
  3977F  EQep2Regs ;
  3978F       /* extern "C" */
  3979F       // end of DSP2833x_EQEP_H definition
  3980F//===========================================================================
  3981F// End of file.
  3982F//===========================================================================
  3983F 
  3984F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EQep.h*/
  3985F/*   CLOSE_FILE Include File */
  3986F 
  3987F               // Enhanced QEP
  3988F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Gpio.h */
  3989F// TI File $Revision: /main/4 $
  3990F// Checkin $Date: November 15, 2007 09:58:53 $
  3991F//###########################################################################
  3992F//
  3993F// FILE: DSP2833x_Gpio.h
  3994F//
  3995F// TITLE: DSP2833x General Purpose I/O Definitions.
  3996F//
  3997F//###########################################################################
  3998F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  3999F// $Release Date: August 4, 2009 $
  4000F//###########################################################################
  4001F#ifndef DSP2833x_GPIO_H
  4002F#define DSP2833x_GPIO_H
  4003F//----------------------------------------------------
  4004F// GPIO A control register bit definitions */
  4005F
  4006Ftypedef
  4007Fstruct GPACTRL_BITS
  4008F{                             // bits description
  4009F  Uint16 QUALPRD0 : 8 ;
  4010F                      // 7:0 Qual period
  4011F  Uint16 QUALPRD1 : 8 ;
  4012F                      // 15:8 Qual period
  4013F  Uint16 QUALPRD2 : 8 ;
  4014F                      // 23:16 Qual period
  4015F  Uint16 QUALPRD3 : 8 ;
  4016F                      // 31:24 Qual period
  4017F} GPACTRL_BITS ;
  4018F
  4019Ftypedef
  4020Funion GPACTRL_REG
  4021F{
  4022F  Uint32 all ;
  4023F  struct GPACTRL_BITS bit ;
  4024F} GPACTRL_REG ;
  4025F//----------------------------------------------------
  4026F// GPIO B control register bit definitions */
  4027F
  4028Ftypedef
  4029Fstruct GPBCTRL_BITS
  4030F{                             // bits description
  4031F  Uint16 QUALPRD0 : 8 ;
  4032F                      // 7:0 Qual period
  4033F  Uint16 QUALPRD1 : 8 ;
  4034F                      // 15:8 Qual period
  4035F  Uint16 QUALPRD2 : 8 ;
  4036F                      // 23:16 Qual period
  4037F  Uint16 QUALPRD3 : 8 ;
  4038F                      // 31:24
  4039F} GPBCTRL_BITS ;
  4040F
  4041Ftypedef
  4042Funion GPBCTRL_REG
  4043F{
  4044F  Uint32 all ;
  4045F  struct GPBCTRL_BITS bit ;
  4046F} GPBCTRL_REG ;
  4047F//----------------------------------------------------
  4048F// GPIO A Qual/MUX select register bit definitions */
  4049F
  4050Ftypedef
  4051Fstruct GPA1_BITS
  4052F{                          // bits description
  4053F  Uint16 GPIO0 : 2 ;
  4054F                   // 1:0 GPIO0
  4055F  Uint16 GPIO1 : 2 ;
  4056F                   // 3:2 GPIO1
  4057F  Uint16 GPIO2 : 2 ;
  4058F                   // 5:4 GPIO2
  4059F  Uint16 GPIO3 : 2 ;
  4060F                   // 7:6 GPIO3
  4061F  Uint16 GPIO4 : 2 ;
  4062F                   // 9:8 GPIO4
  4063F  Uint16 GPIO5 : 2 ;
  4064F                   // 11:10 GPIO5
  4065F  Uint16 GPIO6 : 2 ;
  4066F                   // 13:12 GPIO6
  4067F  Uint16 GPIO7 : 2 ;
  4068F                   // 15:14 GPIO7
  4069F  Uint16 GPIO8 : 2 ;
  4070F                   // 17:16 GPIO8
  4071F  Uint16 GPIO9 : 2 ;
  4072F                   // 19:18 GPIO9
  4073F  Uint16 GPIO10 : 2 ;
  4074F                    // 21:20 GPIO10
  4075F  Uint16 GPIO11 : 2 ;
  4076F                    // 23:22 GPIO11
  4077F  Uint16 GPIO12 : 2 ;
  4078F                    // 25:24 GPIO12
  4079F  Uint16 GPIO13 : 2 ;
  4080F                    // 27:26 GPIO13
  4081F  Uint16 GPIO14 : 2 ;
  4082F                    // 29:28 GPIO14
  4083F  Uint16 GPIO15 : 2 ;
  4084F                    // 31:30 GPIO15
  4085F} GPA1_BITS ;
  4086F
  4087Ftypedef
  4088Fstruct GPA2_BITS
  4089F{                          // bits description
  4090F  Uint16 GPIO16 : 2 ;
  4091F                    // 1:0 GPIO16
  4092F  Uint16 GPIO17 : 2 ;
  4093F                    // 3:2 GPIO17
  4094F  Uint16 GPIO18 : 2 ;
  4095F                    // 5:4 GPIO18
  4096F  Uint16 GPIO19 : 2 ;
  4097F                    // 7:6 GPIO19
  4098F  Uint16 GPIO20 : 2 ;
  4099F                    // 9:8 GPIO20
  4100F  Uint16 GPIO21 : 2 ;
  4101F                    // 11:10 GPIO21
  4102F  Uint16 GPIO22 : 2 ;
  4103F                    // 13:12 GPIO22
  4104F  Uint16 GPIO23 : 2 ;
  4105F                    // 15:14 GPIO23
  4106F  Uint16 GPIO24 : 2 ;
  4107F                    // 17:16 GPIO24
  4108F  Uint16 GPIO25 : 2 ;
  4109F                    // 19:18 GPIO25
  4110F  Uint16 GPIO26 : 2 ;
  4111F                    // 21:20 GPIO26
  4112F  Uint16 GPIO27 : 2 ;
  4113F                    // 23:22 GPIO27
  4114F  Uint16 GPIO28 : 2 ;
  4115F                    // 25:24 GPIO28
  4116F  Uint16 GPIO29 : 2 ;
  4117F                    // 27:26 GPIO29
  4118F  Uint16 GPIO30 : 2 ;
  4119F                    // 29:28 GPIO30
  4120F  Uint16 GPIO31 : 2 ;
  4121F                    // 31:30 GPIO31
  4122F} GPA2_BITS ;
  4123F
  4124Ftypedef
  4125Fstruct GPB1_BITS
  4126F{                          // bits description
  4127F  Uint16 GPIO32 : 2 ;
  4128F                    // 1:0 GPIO32
  4129F  Uint16 GPIO33 : 2 ;
  4130F                    // 3:2 GPIO33
  4131F  Uint16 GPIO34 : 2 ;
  4132F                    // 5:4 GPIO34
  4133F  Uint16 GPIO35 : 2 ;
  4134F                    // 7:6 GPIO35
  4135F  Uint16 GPIO36 : 2 ;
  4136F                    // 9:8 GPIO36
  4137F  Uint16 GPIO37 : 2 ;
  4138F                    // 11:10 GPIO37
  4139F  Uint16 GPIO38 : 2 ;
  4140F                    // 13:12 GPIO38
  4141F  Uint16 GPIO39 : 2 ;
  4142F                    // 15:14 GPIO39
  4143F  Uint16 GPIO40 : 2 ;
  4144F                    // 17:16 GPIO40
  4145F  Uint16 GPIO41 : 2 ;
  4146F                    // 19:16 GPIO41
  4147F  Uint16 GPIO42 : 2 ;
  4148F                    // 21:20 GPIO42
  4149F  Uint16 GPIO43 : 2 ;
  4150F                    // 23:22 GPIO43
  4151F  Uint16 GPIO44 : 2 ;
  4152F                    // 25:24 GPIO44
  4153F  Uint16 GPIO45 : 2 ;
  4154F                    // 27:26 GPIO45
  4155F  Uint16 GPIO46 : 2 ;
  4156F                    // 29:28 GPIO46
  4157F  Uint16 GPIO47 : 2 ;
  4158F                    // 31:30 GPIO47
  4159F} GPB1_BITS ;
  4160F
  4161Ftypedef
  4162Fstruct GPB2_BITS
  4163F{                          // bits description
  4164F  Uint16 GPIO48 : 2 ;
  4165F                    // 1:0 GPIO48
  4166F  Uint16 GPIO49 : 2 ;
  4167F                    // 3:2 GPIO49
  4168F  Uint16 GPIO50 : 2 ;
  4169F                    // 5:4 GPIO50
  4170F  Uint16 GPIO51 : 2 ;
  4171F                    // 7:6 GPIO51
  4172F  Uint16 GPIO52 : 2 ;
  4173F                    // 9:8 GPIO52
  4174F  Uint16 GPIO53 : 2 ;
  4175F                    // 11:10 GPIO53
  4176F  Uint16 GPIO54 : 2 ;
  4177F                    // 13:12 GPIO54
  4178F  Uint16 GPIO55 : 2 ;
  4179F                    // 15:14 GPIO55
  4180F  Uint16 GPIO56 : 2 ;
  4181F                    // 17:16 GPIO56
  4182F  Uint16 GPIO57 : 2 ;
  4183F                    // 19:18 GPIO57
  4184F  Uint16 GPIO58 : 2 ;
  4185F                    // 21:20 GPIO58
  4186F  Uint16 GPIO59 : 2 ;
  4187F                    // 23:22 GPIO59
  4188F  Uint16 GPIO60 : 2 ;
  4189F                    // 25:24 GPIO60
  4190F  Uint16 GPIO61 : 2 ;
  4191F                    // 27:26 GPIO61
  4192F  Uint16 GPIO62 : 2 ;
  4193F                    // 29:28 GPIO62
  4194F  Uint16 GPIO63 : 2 ;
  4195F                    // 31:30 GPIO63
  4196F} GPB2_BITS ;
  4197F
  4198Ftypedef
  4199Fstruct GPC1_BITS
  4200F{                          // bits description
  4201F  Uint16 GPIO64 : 2 ;
  4202F                    // 1:0 GPIO64
  4203F  Uint16 GPIO65 : 2 ;
  4204F                    // 3:2 GPIO65
  4205F  Uint16 GPIO66 : 2 ;
  4206F                    // 5:4 GPIO66
  4207F  Uint16 GPIO67 : 2 ;
  4208F                    // 7:6 GPIO67
  4209F  Uint16 GPIO68 : 2 ;
  4210F                    // 9:8 GPIO68
  4211F  Uint16 GPIO69 : 2 ;
  4212F                    // 11:10 GPIO69
  4213F  Uint16 GPIO70 : 2 ;
  4214F                    // 13:12 GPIO70
  4215F  Uint16 GPIO71 : 2 ;
  4216F                    // 15:14 GPIO71
  4217F  Uint16 GPIO72 : 2 ;
  4218F                    // 17:16 GPIO72
  4219F  Uint16 GPIO73 : 2 ;
  4220F                    // 19:18 GPIO73
  4221F  Uint16 GPIO74 : 2 ;
  4222F                    // 21:20 GPIO74
  4223F  Uint16 GPIO75 : 2 ;
  4224F                    // 23:22 GPIO75
  4225F  Uint16 GPIO76 : 2 ;
  4226F                    // 25:24 GPIO76
  4227F  Uint16 GPIO77 : 2 ;
  4228F                    // 27:26 GPIO77
  4229F  Uint16 GPIO78 : 2 ;
  4230F                    // 29:28 GPIO78
  4231F  Uint16 GPIO79 : 2 ;
  4232F                    // 31:30 GPIO79
  4233F} GPC1_BITS ;
  4234F
  4235Ftypedef
  4236Fstruct GPC2_BITS
  4237F{                          // bits description
  4238F  Uint16 GPIO80 : 2 ;
  4239F                    // 1:0 GPIO80
  4240F  Uint16 GPIO81 : 2 ;
  4241F                    // 3:2 GPIO81
  4242F  Uint16 GPIO82 : 2 ;
  4243F                    // 5:4 GPIO82
  4244F  Uint16 GPIO83 : 2 ;
  4245F                    // 7:6 GPIO83
  4246F  Uint16 GPIO84 : 2 ;
  4247F                    // 9:8 GPIO84
  4248F  Uint16 GPIO85 : 2 ;
  4249F                    // 11:10 GPIO85
  4250F  Uint16 GPIO86 : 2 ;
  4251F                    // 13:12 GPIO86
  4252F  Uint16 GPIO87 : 2 ;
  4253F                    // 15:14 GPIO87
  4254F  Uint16 rsvd : 16 ;
  4255F                   // 31:16 reserved
  4256F} GPC2_BITS ;
  4257F
  4258Ftypedef
  4259Funion GPA1_REG
  4260F{
  4261F  Uint32 all ;
  4262F  struct GPA1_BITS bit ;
  4263F} GPA1_REG ;
  4264F
  4265Ftypedef
  4266Funion GPA2_REG
  4267F{
  4268F  Uint32 all ;
  4269F  struct GPA2_BITS bit ;
  4270F} GPA2_REG ;
  4271F
  4272Ftypedef
  4273Funion GPB1_REG
  4274F{
  4275F  Uint32 all ;
  4276F  struct GPB1_BITS bit ;
  4277F} GPB1_REG ;
  4278F
  4279Ftypedef
  4280Funion GPB2_REG
  4281F{
  4282F  Uint32 all ;
  4283F  struct GPB2_BITS bit ;
  4284F} GPB2_REG ;
  4285F
  4286Ftypedef
  4287Funion GPC1_REG
  4288F{
  4289F  Uint32 all ;
  4290F  struct GPC1_BITS bit ;
  4291F} GPC1_REG ;
  4292F
  4293Ftypedef
  4294Funion GPC2_REG
  4295F{
  4296F  Uint32 all ;
  4297F  struct GPC2_BITS bit ;
  4298F} GPC2_REG ;
  4299F//----------------------------------------------------
  4300F// GPIO A DIR/TOGGLE/SET/CLEAR register bit definitions */
  4301F
  4302Ftypedef
  4303Fstruct GPADAT_BITS
  4304F{                            // bits description
  4305F  Uint16 GPIO0 : 1 ;
  4306F                   // 0 GPIO0
  4307F  Uint16 GPIO1 : 1 ;
  4308F                   // 1 GPIO1
  4309F  Uint16 GPIO2 : 1 ;
  4310F                   // 2 GPIO2
  4311F  Uint16 GPIO3 : 1 ;
  4312F                   // 3 GPIO3
  4313F  Uint16 GPIO4 : 1 ;
  4314F                   // 4 GPIO4
  4315F  Uint16 GPIO5 : 1 ;
  4316F                   // 5 GPIO5
  4317F  Uint16 GPIO6 : 1 ;
  4318F                   // 6 GPIO6
  4319F  Uint16 GPIO7 : 1 ;
  4320F                   // 7 GPIO7
  4321F  Uint16 GPIO8 : 1 ;
  4322F                   // 8 GPIO8
  4323F  Uint16 GPIO9 : 1 ;
  4324F                   // 9 GPIO9
  4325F  Uint16 GPIO10 : 1 ;
  4326F                    // 10 GPIO10
  4327F  Uint16 GPIO11 : 1 ;
  4328F                    // 11 GPIO11
  4329F  Uint16 GPIO12 : 1 ;
  4330F                    // 12 GPIO12
  4331F  Uint16 GPIO13 : 1 ;
  4332F                    // 13 GPIO13
  4333F  Uint16 GPIO14 : 1 ;
  4334F                    // 14 GPIO14
  4335F  Uint16 GPIO15 : 1 ;
  4336F                    // 15 GPIO15
  4337F  Uint16 GPIO16 : 1 ;
  4338F                    // 16 GPIO16
  4339F  Uint16 GPIO17 : 1 ;
  4340F                    // 17 GPIO17
  4341F  Uint16 GPIO18 : 1 ;
  4342F                    // 18 GPIO18
  4343F  Uint16 GPIO19 : 1 ;
  4344F                    // 19 GPIO19
  4345F  Uint16 GPIO20 : 1 ;
  4346F                    // 20 GPIO20
  4347F  Uint16 GPIO21 : 1 ;
  4348F                    // 21 GPIO21
  4349F  Uint16 GPIO22 : 1 ;
  4350F                    // 22 GPIO22
  4351F  Uint16 GPIO23 : 1 ;
  4352F                    // 23 GPIO23
  4353F  Uint16 GPIO24 : 1 ;
  4354F                    // 24 GPIO24
  4355F  Uint16 GPIO25 : 1 ;
  4356F                    // 25 GPIO25
  4357F  Uint16 GPIO26 : 1 ;
  4358F                    // 26 GPIO26
  4359F  Uint16 GPIO27 : 1 ;
  4360F                    // 27 GPIO27
  4361F  Uint16 GPIO28 : 1 ;
  4362F                    // 28 GPIO28
  4363F  Uint16 GPIO29 : 1 ;
  4364F                    // 29 GPIO29
  4365F  Uint16 GPIO30 : 1 ;
  4366F                    // 30 GPIO30
  4367F  Uint16 GPIO31 : 1 ;
  4368F                    // 31 GPIO31
  4369F} GPADAT_BITS ;
  4370F
  4371Ftypedef
  4372Fstruct GPBDAT_BITS
  4373F{                            // bits description
  4374F  Uint16 GPIO32 : 1 ;
  4375F                    // 0 GPIO32
  4376F  Uint16 GPIO33 : 1 ;
  4377F                    // 1 GPIO33
  4378F  Uint16 GPIO34 : 1 ;
  4379F                    // 2 GPIO34
  4380F  Uint16 GPIO35 : 1 ;
  4381F                    // 3 GPIO35
  4382F  Uint16 GPIO36 : 1 ;
  4383F                    // 4 GPIO36
  4384F  Uint16 GPIO37 : 1 ;
  4385F                    // 5 GPIO37
  4386F  Uint16 GPIO38 : 1 ;
  4387F                    // 6 GPIO38
  4388F  Uint16 GPIO39 : 1 ;
  4389F                    // 7 GPIO39
  4390F  Uint16 GPIO40 : 1 ;
  4391F                    // 8 GPIO40
  4392F  Uint16 GPIO41 : 1 ;
  4393F                    // 9 GPIO41
  4394F  Uint16 GPIO42 : 1 ;
  4395F                    // 10 GPIO42
  4396F  Uint16 GPIO43 : 1 ;
  4397F                    // 11 GPIO43
  4398F  Uint16 GPIO44 : 1 ;
  4399F                    // 12 GPIO44
  4400F  Uint16 GPIO45 : 1 ;
  4401F                    // 13 GPIO45
  4402F  Uint16 GPIO46 : 1 ;
  4403F                    // 14 GPIO46
  4404F  Uint16 GPIO47 : 1 ;
  4405F                    // 15 GPIO47
  4406F  Uint16 GPIO48 : 1 ;
  4407F                    // 16 GPIO48
  4408F  Uint16 GPIO49 : 1 ;
  4409F                    // 17 GPIO49
  4410F  Uint16 GPIO50 : 1 ;
  4411F                    // 18 GPIO50
  4412F  Uint16 GPIO51 : 1 ;
  4413F                    // 19 GPIO51
  4414F  Uint16 GPIO52 : 1 ;
  4415F                    // 20 GPIO52
  4416F  Uint16 GPIO53 : 1 ;
  4417F                    // 21 GPIO53
  4418F  Uint16 GPIO54 : 1 ;
  4419F                    // 22 GPIO54
  4420F  Uint16 GPIO55 : 1 ;
  4421F                    // 23 GPIO55
  4422F  Uint16 GPIO56 : 1 ;
  4423F                    // 24 GPIO56
  4424F  Uint16 GPIO57 : 1 ;
  4425F                    // 25 GPIO57
  4426F  Uint16 GPIO58 : 1 ;
  4427F                    // 26 GPIO58
  4428F  Uint16 GPIO59 : 1 ;
  4429F                    // 27 GPIO59
  4430F  Uint16 GPIO60 : 1 ;
  4431F                    // 28 GPIO60
  4432F  Uint16 GPIO61 : 1 ;
  4433F                    // 29 GPIO61
  4434F  Uint16 GPIO62 : 1 ;
  4435F                    // 30 GPIO62
  4436F  Uint16 GPIO63 : 1 ;
  4437F                    // 31 GPIO63
  4438F} GPBDAT_BITS ;
  4439F
  4440Ftypedef
  4441Fstruct GPCDAT_BITS
  4442F{                            // bits description
  4443F  Uint16 GPIO64 : 1 ;
  4444F                    // 0 GPIO64
  4445F  Uint16 GPIO65 : 1 ;
  4446F                    // 1 GPIO65
  4447F  Uint16 GPIO66 : 1 ;
  4448F                    // 2 GPIO66
  4449F  Uint16 GPIO67 : 1 ;
  4450F                    // 3 GPIO67
  4451F  Uint16 GPIO68 : 1 ;
  4452F                    // 4 GPIO68
  4453F  Uint16 GPIO69 : 1 ;
  4454F                    // 5 GPIO69
  4455F  Uint16 GPIO70 : 1 ;
  4456F                    // 6 GPIO70
  4457F  Uint16 GPIO71 : 1 ;
  4458F                    // 7 GPIO71
  4459F  Uint16 GPIO72 : 1 ;
  4460F                    // 8 GPIO72
  4461F  Uint16 GPIO73 : 1 ;
  4462F                    // 9 GPIO73
  4463F  Uint16 GPIO74 : 1 ;
  4464F                    // 10 GPIO74
  4465F  Uint16 GPIO75 : 1 ;
  4466F                    // 11 GPIO75
  4467F  Uint16 GPIO76 : 1 ;
  4468F                    // 12 GPIO76
  4469F  Uint16 GPIO77 : 1 ;
  4470F                    // 13 GPIO77
  4471F  Uint16 GPIO78 : 1 ;
  4472F                    // 14 GPIO78
  4473F  Uint16 GPIO79 : 1 ;
  4474F                    // 15 GPIO79
  4475F  Uint16 GPIO80 : 1 ;
  4476F                    // 16 GPIO80
  4477F  Uint16 GPIO81 : 1 ;
  4478F                    // 17 GPIO81
  4479F  Uint16 GPIO82 : 1 ;
  4480F                    // 18 GPIO82
  4481F  Uint16 GPIO83 : 1 ;
  4482F                    // 19 GPIO83
  4483F  Uint16 GPIO84 : 1 ;
  4484F                    // 20 GPIO84
  4485F  Uint16 GPIO85 : 1 ;
  4486F                    // 21 GPIO85
  4487F  Uint16 GPIO86 : 1 ;
  4488F                    // 22 GPIO86
  4489F  Uint16 GPIO87 : 1 ;
  4490F                    // 23 GPIO87
  4491F  Uint16 rsvd1 : 8 ;
  4492F                   // 31:24 reserved
  4493F} GPCDAT_BITS ;
  4494F
  4495Ftypedef
  4496Funion GPADAT_REG
  4497F{
  4498F  Uint32 all ;
  4499F  struct GPADAT_BITS bit ;
  4500F} GPADAT_REG ;
  4501F
  4502Ftypedef
  4503Funion GPBDAT_REG
  4504F{
  4505F  Uint32 all ;
  4506F  struct GPBDAT_BITS bit ;
  4507F} GPBDAT_REG ;
  4508F
  4509Ftypedef
  4510Funion GPCDAT_REG
  4511F{
  4512F  Uint32 all ;
  4513F  struct GPCDAT_BITS bit ;
  4514F} GPCDAT_REG ;
  4515F//----------------------------------------------------
  4516F// GPIO Xint1/XINT2/XNMI select register bit definitions */
  4517F
  4518Ftypedef
  4519Fstruct GPIOXINT_BITS
  4520F{                              // bits description
  4521F  Uint16 GPIOSEL : 5 ;// 4:0 Select GPIO interrupt input source
  4522F  Uint16 rsvd1 : 11 ;// 15:5 reserved
  4523F} GPIOXINT_BITS ;
  4524F
  4525Ftypedef
  4526Funion GPIOXINT_REG
  4527F{
  4528F  Uint16 all ;
  4529F  struct GPIOXINT_BITS bit ;
  4530F} GPIOXINT_REG ;
  4531F
  4532Ftypedef
  4533Fstruct GPIO_CTRL_REGS
  4534F{
  4535F  union GPACTRL_REG GPACTRL ; // GPIO A Control Register (GPIO0 to 31)
  4536F  union GPA1_REG GPAQSEL1 ; // GPIO A Qualifier Select 1 Register (GPIO0 to 15)
  4537F  union GPA2_REG GPAQSEL2 ; // GPIO A Qualifier Select 2 Register (GPIO16 to 31)
  4538F  union GPA1_REG GPAMUX1 ; // GPIO A Mux 1 Register (GPIO0 to 15)
  4539F  union GPA2_REG GPAMUX2 ; // GPIO A Mux 2 Register (GPIO16 to 31)
  4540F  union GPADAT_REG GPADIR ; // GPIO A Direction Register (GPIO0 to 31)
  4541F  union GPADAT_REG GPAPUD ; // GPIO A Pull Up Disable Register (GPIO0 to 31)
  4542F  Uint32 rsvd1 ;
  4543F  union GPBCTRL_REG GPBCTRL ; // GPIO B Control Register (GPIO32 to 63)
  4544F  union GPB1_REG GPBQSEL1 ; // GPIO B Qualifier Select 1 Register (GPIO32 to 47)
  4545F  union GPB2_REG GPBQSEL2 ; // GPIO B Qualifier Select 2 Register (GPIO48 to 63)
  4546F  union GPB1_REG GPBMUX1 ; // GPIO B Mux 1 Register (GPIO32 to 47)
  4547F  union GPB2_REG GPBMUX2 ; // GPIO B Mux 2 Register (GPIO48 to 63)
  4548F  union GPBDAT_REG GPBDIR ; // GPIO B Direction Register (GPIO32 to 63)
  4549F  union GPBDAT_REG GPBPUD ; // GPIO B Pull Up Disable Register (GPIO32 to 63)
  4550F  Uint16 rsvd2 [ 8 ] ;
  4551F  union GPC1_REG GPCMUX1 ; // GPIO C Mux 1 Register (GPIO64 to 79)
  4552F  union GPC2_REG GPCMUX2 ; // GPIO C Mux 2 Register (GPIO80 to 95)
  4553F  union GPCDAT_REG GPCDIR ; // GPIO C Direction Register (GPIO64 to 95)
  4554F  union GPCDAT_REG GPCPUD ; // GPIO C Pull Up Disable Register (GPIO64 to 95)
  4555F} GPIO_CTRL_REGS ;
  4556F
  4557Ftypedef
  4558Fstruct GPIO_DATA_REGS
  4559F{
  4560F  union GPADAT_REG GPADAT ; // GPIO Data Register (GPIO0 to 31)
  4561F  union GPADAT_REG GPASET ; // GPIO Data Set Register (GPIO0 to 31)
  4562F  union GPADAT_REG GPACLEAR ; // GPIO Data Clear Register (GPIO0 to 31)
  4563F  union GPADAT_REG GPATOGGLE ; // GPIO Data Toggle Register (GPIO0 to 31)
  4564F  union GPBDAT_REG GPBDAT ; // GPIO Data Register (GPIO32 to 63)
  4565F  union GPBDAT_REG GPBSET ; // GPIO Data Set Register (GPIO32 to 63)
  4566F  union GPBDAT_REG GPBCLEAR ; // GPIO Data Clear Register (GPIO32 to 63)
  4567F  union GPBDAT_REG GPBTOGGLE ; // GPIO Data Toggle Register (GPIO32 to 63)
  4568F  union GPCDAT_REG GPCDAT ; // GPIO Data Register (GPIO64 to 95)
  4569F  union GPCDAT_REG GPCSET ; // GPIO Data Set Register (GPIO64 to 95)
  4570F  union GPCDAT_REG GPCCLEAR ; // GPIO Data Clear Register (GPIO64 to 95)
  4571F  union GPCDAT_REG GPCTOGGLE ; // GPIO Data Toggle Register (GPIO64 to 95)
  4572F  Uint16 rsvd1 [ 8 ] ;
  4573F} GPIO_DATA_REGS ;
  4574F
  4575Ftypedef
  4576Fstruct GPIO_INT_REGS
  4577F{
  4578F  union GPIOXINT_REG GPIOXINT1SEL ; // XINT1 GPIO Input Selection
  4579F  union GPIOXINT_REG GPIOXINT2SEL ; // XINT2 GPIO Input Selection
  4580F  union GPIOXINT_REG GPIOXNMISEL ; // XNMI_Xint13 GPIO Input Selection
  4581F  union GPIOXINT_REG GPIOXINT3SEL ; // XINT3 GPIO Input Selection
  4582F  union GPIOXINT_REG GPIOXINT4SEL ; // XINT4 GPIO Input Selection
  4583F  union GPIOXINT_REG GPIOXINT5SEL ; // XINT5 GPIO Input Selection
  4584F  union GPIOXINT_REG GPIOXINT6SEL ; // XINT6 GPIO Input Selection
  4585F  union GPIOXINT_REG GPIOXINT7SEL ; // XINT7 GPIO Input Selection
  4586F  union GPADAT_REG GPIOLPMSEL ; // Low power modes GP I/O input select
  4587F} GPIO_INT_REGS ;
  4588F//---------------------------------------------------------------------------
  4589F// GPI/O External References & Function Declarations:
  4590F//
  4591F
  4592Fextern volatile struct GPIO_CTRL_REGS
  4593F  GpioCtrlRegs ;
  4594F
  4595Fextern volatile struct GPIO_DATA_REGS
  4596F  GpioDataRegs ;
  4597F
  4598Fextern volatile struct GPIO_INT_REGS
  4599F  GpioIntRegs ;
  4600F       // end of DSP2833x_GPIO_H definition
  4601F//===========================================================================
  4602F// End of file.
  4603F//===========================================================================
  4604F 
  4605F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Gpio.h*/
  4606F/*   CLOSE_FILE Include File */
  4607F 
  4608F               // General Purpose I/O Registers
  4609F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_I2c.h */
  4610F// TI File $Revision: /main/2 $
  4611F// Checkin $Date: March 22, 2007 10:40:22 $
  4612F//###########################################################################
  4613F//
  4614F// FILE: DSP2833x_I2c.h
  4615F//
  4616F// TITLE: DSP2833x Enhanced Quadrature Encoder Pulse Module
  4617F// Register Bit Definitions.
  4618F//
  4619F//###########################################################################
  4620F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  4621F// $Release Date: August 4, 2009 $
  4622F//###########################################################################
  4623F#ifndef DSP2833x_I2C_H
  4624F#define DSP2833x_I2C_H
  4625F//----------------------------------------------------
  4626F// I2C interrupt vector register bit definitions */
  4627F
  4628Fstruct I2CISRC_BITS
  4629F{                     // bits description
  4630F  Uint16 INTCODE : 3 ;
  4631F                     // 2:0 Interrupt code
  4632F  Uint16 rsvd1 : 13 ;
  4633F                    // 15:3 reserved
  4634F} ;
  4635F
  4636Funion I2CISRC_REG
  4637F{
  4638F  Uint16 all ;
  4639F  struct I2CISRC_BITS bit ;
  4640F} ;
  4641F//----------------------------------------------------
  4642F// I2C interrupt mask register bit definitions */
  4643F
  4644Fstruct I2CIER_BITS
  4645F{                    // bits description
  4646F  Uint16 ARBL : 1 ;
  4647F                  // 0 Arbitration lost interrupt
  4648F  Uint16 NACK : 1 ;
  4649F                  // 1 No ack interrupt
  4650F  Uint16 ARDY : 1 ;
  4651F                  // 2 Register access ready interrupt
  4652F  Uint16 RRDY : 1 ;
  4653F                  // 3 Recieve data ready interrupt
  4654F  Uint16 XRDY : 1 ;
  4655F                  // 4 Transmit data ready interrupt
  4656F  Uint16 SCD : 1 ;
  4657F                 // 5 Stop condition detection
  4658F  Uint16 AAS : 1 ;
  4659F                 // 6 Address as slave
  4660F  Uint16 rsvd : 9 ;
  4661F                  // 15:7 reserved
  4662F} ;
  4663F
  4664Funion I2CIER_REG
  4665F{
  4666F  Uint16 all ;
  4667F  struct I2CIER_BITS bit ;
  4668F} ;
  4669F//----------------------------------------------------
  4670F// I2C status register bit definitions */
  4671F
  4672Fstruct I2CSTR_BITS
  4673F{                    // bits description
  4674F  Uint16 ARBL : 1 ;
  4675F                  // 0 Arbitration lost interrupt
  4676F  Uint16 NACK : 1 ;
  4677F                  // 1 No ack interrupt
  4678F  Uint16 ARDY : 1 ;
  4679F                  // 2 Register access ready interrupt
  4680F  Uint16 RRDY : 1 ;
  4681F                  // 3 Recieve data ready interrupt
  4682F  Uint16 XRDY : 1 ;
  4683F                  // 4 Transmit data ready interrupt
  4684F  Uint16 SCD : 1 ;
  4685F                 // 5 Stop condition detection
  4686F  Uint16 rsvd1 : 2 ;
  4687F                   // 7:6 reserved
  4688F  Uint16 AD0 : 1 ;
  4689F                 // 8 Address Zero
  4690F  Uint16 AAS : 1 ;
  4691F                 // 9 Address as slave
  4692F  Uint16 XSMT : 1 ;
  4693F                  // 10 XMIT shift empty
  4694F  Uint16 RSFULL : 1 ;
  4695F                    // 11 Recieve shift full
  4696F  Uint16 BB : 1 ;
  4697F                // 12 Bus busy
  4698F  Uint16 NACKSNT : 1 ;
  4699F                     // 13 A no ack sent
  4700F  Uint16 SDIR : 1 ;
  4701F                  // 14 Slave direction
  4702F  Uint16 rsvd2 : 1 ;
  4703F                   // 15 reserved
  4704F} ;
  4705F
  4706Funion I2CSTR_REG
  4707F{
  4708F  Uint16 all ;
  4709F  struct I2CSTR_BITS bit ;
  4710F} ;
  4711F//----------------------------------------------------
  4712F// I2C mode control register bit definitions */
  4713F
  4714Fstruct I2CMDR_BITS
  4715F{                    // bits description
  4716F  Uint16 BC : 3 ;
  4717F                // 2:0 Bit count
  4718F  Uint16 FDF : 1 ;
  4719F                 // 3 Free data format
  4720F  Uint16 STB : 1 ;
  4721F                 // 4 Start byte
  4722F  Uint16 IRS : 1 ;
  4723F                 // 5 I2C Reset not
  4724F  Uint16 DLB : 1 ;
  4725F                 // 6 Digital loopback
  4726F  Uint16 RM : 1 ;
  4727F                // 7 Repeat mode
  4728F  Uint16 XA : 1 ;
  4729F                // 8 Expand address
  4730F  Uint16 TRX : 1 ;
  4731F                 // 9 Transmitter/reciever
  4732F  Uint16 MST : 1 ;
  4733F                 // 10 Master/slave
  4734F  Uint16 STP : 1 ;
  4735F                 // 11 Stop condition
  4736F  Uint16 rsvd1 : 1 ;
  4737F                   // 12 reserved
  4738F  Uint16 STT : 1 ;
  4739F                 // 13 Start condition
  4740F  Uint16 FREE : 1 ;
  4741F                  // 14 Emulation mode
  4742F  Uint16 NACKMOD : 1 ;
  4743F                     // 15 No Ack mode
  4744F} ;
  4745F
  4746Funion I2CMDR_REG
  4747F{
  4748F  Uint16 all ;
  4749F  struct I2CMDR_BITS bit ;
  4750F} ;
  4751F//----------------------------------------------------
  4752F// I2C pre-scaler register bit definitions */
  4753F
  4754Fstruct I2CPSC_BITS
  4755F{                    // bits description
  4756F  Uint16 IPSC : 8 ;
  4757F                  // 7:0 pre-scaler
  4758F  Uint16 rsvd1 : 8 ;
  4759F                   // 15:8 reserved
  4760F} ;
  4761F
  4762Funion I2CPSC_REG
  4763F{
  4764F  Uint16 all ;
  4765F  struct I2CPSC_BITS bit ;
  4766F} ;
  4767F//----------------------------------------------------
  4768F// TX FIFO control register bit definitions */
  4769F
  4770Fstruct I2CFFTX_BITS
  4771F{                     // bits description
  4772F  Uint16 TXFFIL : 5 ;
  4773F                    // 4:0 FIFO interrupt level
  4774F  Uint16 TXFFIENA : 1 ;
  4775F                      // 5 FIFO interrupt enable/disable
  4776F  Uint16 TXFFINTCLR : 1 ;
  4777F                        // 6 FIFO clear
  4778F  Uint16 TXFFINT : 1 ;
  4779F                     // 7 FIFO interrupt flag
  4780F  Uint16 TXFFST : 5 ;
  4781F                    // 12:8 FIFO level status
  4782F  Uint16 TXFFRST : 1 ;
  4783F                     // 13 FIFO reset
  4784F  Uint16 I2CFFEN : 1 ;
  4785F                     // 14 enable/disable TX & RX FIFOs
  4786F  Uint16 rsvd1 : 1 ;
  4787F                   // 15 reserved
  4788F} ;
  4789F
  4790Funion I2CFFTX_REG
  4791F{
  4792F  Uint16 all ;
  4793F  struct I2CFFTX_BITS bit ;
  4794F} ;
  4795F//----------------------------------------------------
  4796F// RX FIFO control register bit definitions */
  4797F
  4798Fstruct I2CFFRX_BITS
  4799F{                     // bits description
  4800F  Uint16 RXFFIL : 5 ;
  4801F                    // 4:0 FIFO interrupt level
  4802F  Uint16 RXFFIENA : 1 ;
  4803F                      // 5 FIFO interrupt enable/disable
  4804F  Uint16 RXFFINTCLR : 1 ;
  4805F                        // 6 FIFO clear
  4806F  Uint16 RXFFINT : 1 ;
  4807F                     // 7 FIFO interrupt flag
  4808F  Uint16 RXFFST : 5 ;
  4809F                    // 12:8 FIFO level
  4810F  Uint16 RXFFRST : 1 ;
  4811F                     // 13 FIFO reset
  4812F  Uint16 rsvd1 : 2 ;
  4813F                   // 15:14 reserved
  4814F} ;
  4815F
  4816Funion I2CFFRX_REG
  4817F{
  4818F  Uint16 all ;
  4819F  struct I2CFFRX_BITS bit ;
  4820F} ;
  4821F//----------------------------------------------------
  4822F
  4823Fstruct I2C_REGS
  4824F{
  4825F  Uint16 I2COAR ; // Own address register
  4826F  union I2CIER_REG I2CIER ; // Interrupt enable
  4827F  union I2CSTR_REG I2CSTR ; // Interrupt status
  4828F  Uint16 I2CCLKL ; // Clock divider low
  4829F  Uint16 I2CCLKH ; // Clock divider high
  4830F  Uint16 I2CCNT ; // Data count
  4831F  Uint16 I2CDRR ; // Data recieve
  4832F  Uint16 I2CSAR ; // Slave address
  4833F  Uint16 I2CDXR ; // Data transmit
  4834F  union I2CMDR_REG I2CMDR ; // Mode
  4835F  union I2CISRC_REG I2CISRC ; // Interrupt source
  4836F  Uint16 rsvd1 ; // reserved
  4837F  union I2CPSC_REG I2CPSC ; // Pre-scaler
  4838F  Uint16 rsvd2 [ 19 ] ;
  4839F                     // reserved
  4840F  union I2CFFTX_REG I2CFFTX ; // Transmit FIFO
  4841F  union I2CFFRX_REG I2CFFRX ; // Recieve FIFO
  4842F} ;
  4843F//---------------------------------------------------------------------------
  4844F// External References & Function Declarations:
  4845F//
  4846F
  4847Fextern volatile struct I2C_REGS
  4848F  I2caRegs ;
  4849F       /* extern "C" */
  4850F       // end of DSP2833x_I2C_H definition
  4851F//===========================================================================
  4852F// End of file.
  4853F//===========================================================================
  4854F 
  4855F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_I2c.h*/
  4856F/*   CLOSE_FILE Include File */
  4857F 
  4858F                // I2C Registers
  4859F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_McBSP.h */
  4860F// TI File $Revision: /main/5 $
  4861F// Checkin $Date: May 14, 2008 16:30:31 $
  4862F//###########################################################################
  4863F//
  4864F// FILE: DSP2833x_Mcbsp.h
  4865F//
  4866F// TITLE: DSP2833x Device McBSP Register Definitions.
  4867F//
  4868F//###########################################################################
  4869F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  4870F// $Release Date: August 4, 2009 $
  4871F//###########################################################################
  4872F#ifndef DSP2833x_MCBSP_H
  4873F#define DSP2833x_MCBSP_H
  4874F//---------------------------------------------------------------------------
  4875F// McBSP Individual Register Bit Definitions:
  4876F//
  4877F// McBSP DRR2 register bit definitions:
  4878F
  4879Fstruct DRR2_BITS
  4880F{                  // bit description
  4881F  Uint16 HWLB : 8 ;
  4882F                  // 16:23 High word low byte
  4883F  Uint16 HWHB : 8 ;
  4884F                  // 24:31 High word high byte
  4885F} ;
  4886F
  4887Funion DRR2_REG
  4888F{
  4889F  Uint16 all ;
  4890F  struct DRR2_BITS bit ;
  4891F} ;
  4892F// McBSP DRR1 register bit definitions:
  4893F
  4894Fstruct DRR1_BITS
  4895F{                  // bit description
  4896F  Uint16 LWLB : 8 ;
  4897F                  // 16:23 Low word low byte
  4898F  Uint16 LWHB : 8 ;
  4899F                  // 24:31 low word high byte
  4900F} ;
  4901F
  4902Funion DRR1_REG
  4903F{
  4904F  Uint16 all ;
  4905F  struct DRR1_BITS bit ;
  4906F} ;
  4907F// McBSP DXR2 register bit definitions:
  4908F
  4909Fstruct DXR2_BITS
  4910F{                  // bit description
  4911F  Uint16 HWLB : 8 ;
  4912F                  // 16:23 High word low byte
  4913F  Uint16 HWHB : 8 ;
  4914F                  // 24:31 High word high byte
  4915F} ;
  4916F
  4917Funion DXR2_REG
  4918F{
  4919F  Uint16 all ;
  4920F  struct DXR2_BITS bit ;
  4921F} ;
  4922F// McBSP DXR1 register bit definitions:
  4923F
  4924Fstruct DXR1_BITS
  4925F{                  // bit description
  4926F  Uint16 LWLB : 8 ;
  4927F                  // 16:23 Low word low byte
  4928F  Uint16 LWHB : 8 ;
  4929F                  // 24:31 low word high byte
  4930F} ;
  4931F
  4932Funion DXR1_REG
  4933F{
  4934F  Uint16 all ;
  4935F  struct DXR1_BITS bit ;
  4936F} ;
  4937F// SPCR2 control register bit definitions:
  4938F
  4939Fstruct SPCR2_BITS
  4940F{                   // bit description
  4941F  Uint16 XRST : 1 ;
  4942F                  // 0 transmit reset
  4943F  Uint16 XRDY : 1 ;
  4944F                  // 1 transmit ready
  4945F  Uint16 XEMPTY : 1 ;
  4946F                    // 2 Transmit empty
  4947F  Uint16 XSYNCERR : 1 ;
  4948F                      // 3 Transmit syn errorINT flag
  4949F  Uint16 XINTM : 2 ;
  4950F                   // 5:4 Transmit interrupt types
  4951F  Uint16 GRST : 1 ;
  4952F                  // 6 CLKG reset
  4953F  Uint16 FRST : 1 ;
  4954F                  // 7 Frame sync reset
  4955F  Uint16 SOFT : 1 ;
  4956F                  // 8 SOFT bit
  4957F  Uint16 FREE : 1 ;
  4958F                  // 9 FREE bit
  4959F  Uint16 rsvd : 6 ;
  4960F                  // 15:10 reserved
  4961F} ;
  4962F
  4963Funion SPCR2_REG
  4964F{
  4965F  Uint16 all ;
  4966F  struct SPCR2_BITS bit ;
  4967F} ;
  4968F// SPCR1 control register bit definitions:
  4969F
  4970Fstruct SPCR1_BITS
  4971F{                   // bit description
  4972F  Uint16 RRST : 1 ;
  4973F                  // 0 Receive reset
  4974F  Uint16 RRDY : 1 ;
  4975F                  // 1 Receive ready
  4976F  Uint16 RFULL : 1 ;
  4977F                   // 2 Receive full
  4978F  Uint16 RSYNCERR : 1 ;
  4979F                      // 7 Receive syn error
  4980F  Uint16 RINTM : 2 ;
  4981F                   // 5:4 Receive interrupt types
  4982F  Uint16 ABIS : 1 ;
  4983F                  // 6 ABIS mode select
  4984F  Uint16 DXENA : 1 ;
  4985F                   // 7 DX hi-z enable
  4986F  Uint16 rsvd : 3 ;
  4987F                  // 10:8 reserved
  4988F  Uint16 CLKSTP : 2 ;
  4989F                    // 12:11 CLKSTOP mode bit
  4990F  Uint16 RJUST : 2 ;
  4991F                   // 13:14 Right justified
  4992F  Uint16 DLB : 1 ;
  4993F                 // 15 Digital loop back
  4994F} ;
  4995F
  4996Funion SPCR1_REG
  4997F{
  4998F  Uint16 all ;
  4999F  struct SPCR1_BITS bit ;
  5000F} ;
  5001F// RCR2 control register bit definitions:
  5002F
  5003Fstruct RCR2_BITS
  5004F{                  // bit description
  5005F  Uint16 RDATDLY : 2 ;
  5006F                     // 1:0 Receive data delay
  5007F  Uint16 RFIG : 1 ;
  5008F                  // 2 Receive frame sync ignore
  5009F  Uint16 RCOMPAND : 2 ;
  5010F                      // 4:3 Receive Companding Mode selects
  5011F  Uint16 RWDLEN2 : 3 ;
  5012F                     // 7:5 Receive word length
  5013F  Uint16 RFRLEN2 : 7 ;
  5014F                     // 14:8 Receive Frame sync
  5015F  Uint16 RPHASE : 1 ;
  5016F                    // 15 Receive Phase
  5017F} ;
  5018F
  5019Funion RCR2_REG
  5020F{
  5021F  Uint16 all ;
  5022F  struct RCR2_BITS bit ;
  5023F} ;
  5024F// RCR1 control register bit definitions:
  5025F
  5026Fstruct RCR1_BITS
  5027F{                  // bit description
  5028F  Uint16 rsvd1 : 5 ;
  5029F                   // 4:0 reserved
  5030F  Uint16 RWDLEN1 : 3 ;
  5031F                     // 7:5 Receive word length
  5032F  Uint16 RFRLEN1 : 7 ;
  5033F                     // 14:8 Receive frame length
  5034F  Uint16 rsvd2 : 1 ;
  5035F                   // 15 reserved
  5036F} ;
  5037F
  5038Funion RCR1_REG
  5039F{
  5040F  Uint16 all ;
  5041F  struct RCR1_BITS bit ;
  5042F} ;
  5043F// XCR2 control register bit definitions:
  5044F
  5045Fstruct XCR2_BITS
  5046F{                  // bit description
  5047F  Uint16 XDATDLY : 2 ;
  5048F                     // 1:0 Transmit data delay
  5049F  Uint16 XFIG : 1 ;
  5050F                  // 2 Transmit frame sync ignore
  5051F  Uint16 XCOMPAND : 2 ;
  5052F                      // 4:3 Transmit Companding Mode selects
  5053F  Uint16 XWDLEN2 : 3 ;
  5054F                     // 7:5 Transmit word length
  5055F  Uint16 XFRLEN2 : 7 ;
  5056F                     // 14:8 Transmit Frame sync
  5057F  Uint16 XPHASE : 1 ;
  5058F                    // 15 Transmit Phase
  5059F} ;
  5060F
  5061Funion XCR2_REG
  5062F{
  5063F  Uint16 all ;
  5064F  struct XCR2_BITS bit ;
  5065F} ;
  5066F// XCR1 control register bit definitions:
  5067F
  5068Fstruct XCR1_BITS
  5069F{                  // bit description
  5070F  Uint16 rsvd1 : 5 ;
  5071F                   // 4:0 reserved
  5072F  Uint16 XWDLEN1 : 3 ;
  5073F                     // 7:5 Transmit word length
  5074F  Uint16 XFRLEN1 : 7 ;
  5075F                     // 14:8 Transmit frame length
  5076F  Uint16 rsvd2 : 1 ;
  5077F                   // 15 reserved
  5078F} ;
  5079F
  5080Funion XCR1_REG
  5081F{
  5082F  Uint16 all ;
  5083F  struct XCR1_BITS bit ;
  5084F} ;
  5085F// SRGR2 Sample rate generator control register bit definitions:
  5086F
  5087Fstruct SRGR2_BITS
  5088F{                   // bit description
  5089F  Uint16 FPER : 12 ;
  5090F                   // 11:0 Frame period
  5091F  Uint16 FSGM : 1 ;
  5092F                  // 12 Frame sync generator mode
  5093F  Uint16 CLKSM : 1 ;
  5094F                   // 13 Sample rate generator mode
  5095F  Uint16 rsvd : 1 ;
  5096F                  // 14 reserved
  5097F  Uint16 GSYNC : 1 ;
  5098F                   // 15 CLKG sync
  5099F} ;
  5100F
  5101Funion SRGR2_REG
  5102F{
  5103F  Uint16 all ;
  5104F  struct SRGR2_BITS bit ;
  5105F} ;
  5106F// SRGR1 control register bit definitions:
  5107F
  5108Fstruct SRGR1_BITS
  5109F{                   // bit description
  5110F  Uint16 CLKGDV : 8 ;
  5111F                    // 7:0 CLKG divider
  5112F  Uint16 FWID : 8 ;
  5113F                  // 15:8 Frame width
  5114F} ;
  5115F
  5116Funion SRGR1_REG
  5117F{
  5118F  Uint16 all ;
  5119F  struct SRGR1_BITS bit ;
  5120F} ;
  5121F// MCR2 Multichannel control register bit definitions:
  5122F
  5123Fstruct MCR2_BITS
  5124F{                  // bit description
  5125F  Uint16 XMCM : 2 ;
  5126F                  // 1:0 Transmit multichannel mode
  5127F  Uint16 XCBLK : 3 ;
  5128F                   // 2:4 Transmit current block
  5129F  Uint16 XPABLK : 2 ;
  5130F                    // 5:6 Transmit partition A Block
  5131F  Uint16 XPBBLK : 2 ;
  5132F                    // 7:8 Transmit partition B Block
  5133F  Uint16 XMCME : 1 ;
  5134F                   // 9 Transmit multi-channel enhance mode
  5135F  Uint16 rsvd : 6 ;
  5136F                  // 15:10 reserved
  5137F} ;
  5138F
  5139Funion MCR2_REG
  5140F{
  5141F  Uint16 all ;
  5142F  struct MCR2_BITS bit ;
  5143F} ;
  5144F// MCR1 Multichannel control register bit definitions:
  5145F
  5146Fstruct MCR1_BITS
  5147F{                  // bit description
  5148F  Uint16 RMCM : 1 ;
  5149F                  // 0 Receive multichannel mode
  5150F  Uint16 rsvd : 1 ;
  5151F                  // 1 reserved
  5152F  Uint16 RCBLK : 3 ;
  5153F                   // 4:2 Receive current block
  5154F  Uint16 RPABLK : 2 ;
  5155F                    // 6:5 Receive partition A Block
  5156F  Uint16 RPBBLK : 2 ;
  5157F                    // 7:8 Receive partition B Block
  5158F  Uint16 RMCME : 1 ;
  5159F                   // 9 Receive multi-channel enhance mode
  5160F  Uint16 rsvd1 : 6 ;
  5161F                   // 15:10 reserved
  5162F} ;
  5163F
  5164Funion MCR1_REG
  5165F{
  5166F  Uint16 all ;
  5167F  struct MCR1_BITS bit ;
  5168F} ;
  5169F// RCERA control register bit definitions:
  5170F
  5171Fstruct RCERA_BITS
  5172F{                   // bit description
  5173F  Uint16 RCEA0 : 1 ;
  5174F                   // 0 Receive Channel enable bit
  5175F  Uint16 RCEA1 : 1 ;
  5176F                   // 1 Receive Channel enable bit
  5177F  Uint16 RCEA2 : 1 ;
  5178F                   // 2 Receive Channel enable bit
  5179F  Uint16 RCEA3 : 1 ;
  5180F                   // 3 Receive Channel enable bit
  5181F  Uint16 RCEA4 : 1 ;
  5182F                   // 4 Receive Channel enable bit
  5183F  Uint16 RCEA5 : 1 ;
  5184F                   // 5 Receive Channel enable bit
  5185F  Uint16 RCEA6 : 1 ;
  5186F                   // 6 Receive Channel enable bit
  5187F  Uint16 RCEA7 : 1 ;
  5188F                   // 7 Receive Channel enable bit
  5189F  Uint16 RCEA8 : 1 ;
  5190F                   // 8 Receive Channel enable bit
  5191F  Uint16 RCEA9 : 1 ;
  5192F                   // 9 Receive Channel enable bit
  5193F  Uint16 RCEA10 : 1 ;
  5194F                    // 10 Receive Channel enable bit
  5195F  Uint16 RCEA11 : 1 ;
  5196F                    // 11 Receive Channel enable bit
  5197F  Uint16 RCEA12 : 1 ;
  5198F                    // 12 Receive Channel enable bit
  5199F  Uint16 RCEA13 : 1 ;
  5200F                    // 13 Receive Channel enable bit
  5201F  Uint16 RCEA14 : 1 ;
  5202F                    // 14 Receive Channel enable bit
  5203F  Uint16 RCEA15 : 1 ;
  5204F                    // 15 Receive Channel enable bit
  5205F} ;
  5206F
  5207Funion RCERA_REG
  5208F{
  5209F  Uint16 all ;
  5210F  struct RCERA_BITS bit ;
  5211F} ;
  5212F// RCERB control register bit definitions:
  5213F
  5214Fstruct RCERB_BITS
  5215F{                   // bit description
  5216F  Uint16 RCEB0 : 1 ;
  5217F                   // 0 Receive Channel enable bit
  5218F  Uint16 RCEB1 : 1 ;
  5219F                   // 1 Receive Channel enable bit
  5220F  Uint16 RCEB2 : 1 ;
  5221F                   // 2 Receive Channel enable bit
  5222F  Uint16 RCEB3 : 1 ;
  5223F                   // 3 Receive Channel enable bit
  5224F  Uint16 RCEB4 : 1 ;
  5225F                   // 4 Receive Channel enable bit
  5226F  Uint16 RCEB5 : 1 ;
  5227F                   // 5 Receive Channel enable bit
  5228F  Uint16 RCEB6 : 1 ;
  5229F                   // 6 Receive Channel enable bit
  5230F  Uint16 RCEB7 : 1 ;
  5231F                   // 7 Receive Channel enable bit
  5232F  Uint16 RCEB8 : 1 ;
  5233F                   // 8 Receive Channel enable bit
  5234F  Uint16 RCEB9 : 1 ;
  5235F                   // 9 Receive Channel enable bit
  5236F  Uint16 RCEB10 : 1 ;
  5237F                    // 10 Receive Channel enable bit
  5238F  Uint16 RCEB11 : 1 ;
  5239F                    // 11 Receive Channel enable bit
  5240F  Uint16 RCEB12 : 1 ;
  5241F                    // 12 Receive Channel enable bit
  5242F  Uint16 RCEB13 : 1 ;
  5243F                    // 13 Receive Channel enable bit
  5244F  Uint16 RCEB14 : 1 ;
  5245F                    // 14 Receive Channel enable bit
  5246F  Uint16 RCEB15 : 1 ;
  5247F                    // 15 Receive Channel enable bit
  5248F} ;
  5249F
  5250Funion RCERB_REG
  5251F{
  5252F  Uint16 all ;
  5253F  struct RCERB_BITS bit ;
  5254F} ;
  5255F// XCERA control register bit definitions:
  5256F
  5257Fstruct XCERA_BITS
  5258F{                   // bit description
  5259F  Uint16 XCERA0 : 1 ;
  5260F                    // 0 Receive Channel enable bit
  5261F  Uint16 XCERA1 : 1 ;
  5262F                    // 1 Receive Channel enable bit
  5263F  Uint16 XCERA2 : 1 ;
  5264F                    // 2 Receive Channel enable bit
  5265F  Uint16 XCERA3 : 1 ;
  5266F                    // 3 Receive Channel enable bit
  5267F  Uint16 XCERA4 : 1 ;
  5268F                    // 4 Receive Channel enable bit
  5269F  Uint16 XCERA5 : 1 ;
  5270F                    // 5 Receive Channel enable bit
  5271F  Uint16 XCERA6 : 1 ;
  5272F                    // 6 Receive Channel enable bit
  5273F  Uint16 XCERA7 : 1 ;
  5274F                    // 7 Receive Channel enable bit
  5275F  Uint16 XCERA8 : 1 ;
  5276F                    // 8 Receive Channel enable bit
  5277F  Uint16 XCERA9 : 1 ;
  5278F                    // 9 Receive Channel enable bit
  5279F  Uint16 XCERA10 : 1 ;
  5280F                     // 10 Receive Channel enable bit
  5281F  Uint16 XCERA11 : 1 ;
  5282F                     // 11 Receive Channel enable bit
  5283F  Uint16 XCERA12 : 1 ;
  5284F                     // 12 Receive Channel enable bit
  5285F  Uint16 XCERA13 : 1 ;
  5286F                     // 13 Receive Channel enable bit
  5287F  Uint16 XCERA14 : 1 ;
  5288F                     // 14 Receive Channel enable bit
  5289F  Uint16 XCERA15 : 1 ;
  5290F                     // 15 Receive Channel enable bit
  5291F} ;
  5292F
  5293Funion XCERA_REG
  5294F{
  5295F  Uint16 all ;
  5296F  struct XCERA_BITS bit ;
  5297F} ;
  5298F// XCERB control register bit definitions:
  5299F
  5300Fstruct XCERB_BITS
  5301F{                   // bit description
  5302F  Uint16 XCERB0 : 1 ;
  5303F                    // 0 Receive Channel enable bit
  5304F  Uint16 XCERB1 : 1 ;
  5305F                    // 1 Receive Channel enable bit
  5306F  Uint16 XCERB2 : 1 ;
  5307F                    // 2 Receive Channel enable bit
  5308F  Uint16 XCERB3 : 1 ;
  5309F                    // 3 Receive Channel enable bit
  5310F  Uint16 XCERB4 : 1 ;
  5311F                    // 4 Receive Channel enable bit
  5312F  Uint16 XCERB5 : 1 ;
  5313F                    // 5 Receive Channel enable bit
  5314F  Uint16 XCERB6 : 1 ;
  5315F                    // 6 Receive Channel enable bit
  5316F  Uint16 XCERB7 : 1 ;
  5317F                    // 7 Receive Channel enable bit
  5318F  Uint16 XCERB8 : 1 ;
  5319F                    // 8 Receive Channel enable bit
  5320F  Uint16 XCERB9 : 1 ;
  5321F                    // 9 Receive Channel enable bit
  5322F  Uint16 XCERB10 : 1 ;
  5323F                     // 10 Receive Channel enable bit
  5324F  Uint16 XCERB11 : 1 ;
  5325F                     // 11 Receive Channel enable bit
  5326F  Uint16 XCERB12 : 1 ;
  5327F                     // 12 Receive Channel enable bit
  5328F  Uint16 XCERB13 : 1 ;
  5329F                     // 13 Receive Channel enable bit
  5330F  Uint16 XCERB14 : 1 ;
  5331F                     // 14 Receive Channel enable bit
  5332F  Uint16 XCERB15 : 1 ;
  5333F                     // 15 Receive Channel enable bit
  5334F} ;
  5335F
  5336Funion XCERB_REG
  5337F{
  5338F  Uint16 all ;
  5339F  struct XCERB_BITS bit ;
  5340F} ;
  5341F// PCR control register bit definitions:
  5342F
  5343Fstruct PCR_BITS
  5344F{                 // bit description
  5345F  Uint16 CLKRP : 1 ;
  5346F                   // 0 Receive Clock polarity
  5347F  Uint16 CLKXP : 1 ;
  5348F                   // 1 Transmit clock polarity
  5349F  Uint16 FSRP : 1 ;
  5350F                  // 2 Receive Frame synchronization polarity
  5351F  Uint16 FSXP : 1 ;
  5352F                  // 3 Transmit Frame synchronization polarity
  5353F  Uint16 DR_STAT : 1 ;
  5354F                     // 4 DR pin status - reserved for this McBSP
  5355F  Uint16 DX_STAT : 1 ;
  5356F                     // 5 DX pin status - reserved for this McBSP
  5357F  Uint16 CLKS_STAT : 1 ;
  5358F                       // 6 CLKS pin status - reserved for 28x -McBSP
  5359F  Uint16 SCLKME : 1 ;
  5360F                    // 7 Enhanced sample clock mode selection bit.
  5361F  Uint16 CLKRM : 1 ;
  5362F                   // 8 Receiver Clock Mode
  5363F  Uint16 CLKXM : 1 ;
  5364F                   // 9 Transmitter Clock Mode.
  5365F  Uint16 FSRM : 1 ;
  5366F                  // 10 Receive Frame Synchronization Mode
  5367F  Uint16 FSXM : 1 ;
  5368F                  // 11 Transmit Frame Synchronization Mode
  5369F  Uint16 RIOEN : 1 ;
  5370F                   // 12 General Purpose I/O Mode - reserved in this 28x-McBSP
  5371F  Uint16 XIOEN : 1 ;
  5372F                   // 13 General Purpose I/O Mode - reserved in this 28x-McBSP
  5373F  Uint16 IDEL_EN : 1 ;
  5374F                     // 14 reserved in this 28x-McBSP
  5375F  Uint16 rsvd : 1 ;// 15 reserved
  5376F} ;
  5377F
  5378Funion PCR_REG
  5379F{
  5380F  Uint16 all ;
  5381F  struct PCR_BITS bit ;
  5382F} ;
  5383F// RCERC control register bit definitions:
  5384F
  5385Fstruct RCERC_BITS
  5386F{                   // bit description
  5387F  Uint16 RCEC0 : 1 ;
  5388F                   // 0 Receive Channel enable bit
  5389F  Uint16 RCEC1 : 1 ;
  5390F                   // 1 Receive Channel enable bit
  5391F  Uint16 RCEC2 : 1 ;
  5392F                   // 2 Receive Channel enable bit
  5393F  Uint16 RCEC3 : 1 ;
  5394F                   // 3 Receive Channel enable bit
  5395F  Uint16 RCEC4 : 1 ;
  5396F                   // 4 Receive Channel enable bit
  5397F  Uint16 RCEC5 : 1 ;
  5398F                   // 5 Receive Channel enable bit
  5399F  Uint16 RCEC6 : 1 ;
  5400F                   // 6 Receive Channel enable bit
  5401F  Uint16 RCEC7 : 1 ;
  5402F                   // 7 Receive Channel enable bit
  5403F  Uint16 RCEC8 : 1 ;
  5404F                   // 8 Receive Channel enable bit
  5405F  Uint16 RCEC9 : 1 ;
  5406F                   // 9 Receive Channel enable bit
  5407F  Uint16 RCEC10 : 1 ;
  5408F                    // 10 Receive Channel enable bit
  5409F  Uint16 RCEC11 : 1 ;
  5410F                    // 11 Receive Channel enable bit
  5411F  Uint16 RCEC12 : 1 ;
  5412F                    // 12 Receive Channel enable bit
  5413F  Uint16 RCEC13 : 1 ;
  5414F                    // 13 Receive Channel enable bit
  5415F  Uint16 RCEC14 : 1 ;
  5416F                    // 14 Receive Channel enable bit
  5417F  Uint16 RCEC15 : 1 ;
  5418F                    // 15 Receive Channel enable bit
  5419F} ;
  5420F
  5421Funion RCERC_REG
  5422F{
  5423F  Uint16 all ;
  5424F  struct RCERC_BITS bit ;
  5425F} ;
  5426F// RCERD control register bit definitions:
  5427F
  5428Fstruct RCERD_BITS
  5429F{                   // bit description
  5430F  Uint16 RCED0 : 1 ;
  5431F                   // 0 Receive Channel enable bit
  5432F  Uint16 RCED1 : 1 ;
  5433F                   // 1 Receive Channel enable bit
  5434F  Uint16 RCED2 : 1 ;
  5435F                   // 2 Receive Channel enable bit
  5436F  Uint16 RCED3 : 1 ;
  5437F                   // 3 Receive Channel enable bit
  5438F  Uint16 RCED4 : 1 ;
  5439F                   // 4 Receive Channel enable bit
  5440F  Uint16 RCED5 : 1 ;
  5441F                   // 5 Receive Channel enable bit
  5442F  Uint16 RCED6 : 1 ;
  5443F                   // 6 Receive Channel enable bit
  5444F  Uint16 RCED7 : 1 ;
  5445F                   // 7 Receive Channel enable bit
  5446F  Uint16 RCED8 : 1 ;
  5447F                   // 8 Receive Channel enable bit
  5448F  Uint16 RCED9 : 1 ;
  5449F                   // 9 Receive Channel enable bit
  5450F  Uint16 RCED10 : 1 ;
  5451F                    // 10 Receive Channel enable bit
  5452F  Uint16 RCED11 : 1 ;
  5453F                    // 11 Receive Channel enable bit
  5454F  Uint16 RCED12 : 1 ;
  5455F                    // 12 Receive Channel enable bit
  5456F  Uint16 RCED13 : 1 ;
  5457F                    // 13 Receive Channel enable bit
  5458F  Uint16 RCED14 : 1 ;
  5459F                    // 14 Receive Channel enable bit
  5460F  Uint16 RCED15 : 1 ;
  5461F                    // 15 Receive Channel enable bit
  5462F} ;
  5463F
  5464Funion RCERD_REG
  5465F{
  5466F  Uint16 all ;
  5467F  struct RCERD_BITS bit ;
  5468F} ;
  5469F// XCERC control register bit definitions:
  5470F
  5471Fstruct XCERC_BITS
  5472F{                   // bit description
  5473F  Uint16 XCERC0 : 1 ;
  5474F                    // 0 Receive Channel enable bit
  5475F  Uint16 XCERC1 : 1 ;
  5476F                    // 1 Receive Channel enable bit
  5477F  Uint16 XCERC2 : 1 ;
  5478F                    // 2 Receive Channel enable bit
  5479F  Uint16 XCERC3 : 1 ;
  5480F                    // 3 Receive Channel enable bit
  5481F  Uint16 XCERC4 : 1 ;
  5482F                    // 4 Receive Channel enable bit
  5483F  Uint16 XCERC5 : 1 ;
  5484F                    // 5 Receive Channel enable bit
  5485F  Uint16 XCERC6 : 1 ;
  5486F                    // 6 Receive Channel enable bit
  5487F  Uint16 XCERC7 : 1 ;
  5488F                    // 7 Receive Channel enable bit
  5489F  Uint16 XCERC8 : 1 ;
  5490F                    // 8 Receive Channel enable bit
  5491F  Uint16 XCERC9 : 1 ;
  5492F                    // 9 Receive Channel enable bit
  5493F  Uint16 XCERC10 : 1 ;
  5494F                     // 10 Receive Channel enable bit
  5495F  Uint16 XCERC11 : 1 ;
  5496F                     // 11 Receive Channel enable bit
  5497F  Uint16 XCERC12 : 1 ;
  5498F                     // 12 Receive Channel enable bit
  5499F  Uint16 XCERC13 : 1 ;
  5500F                     // 13 Receive Channel enable bit
  5501F  Uint16 XCERC14 : 1 ;
  5502F                     // 14 Receive Channel enable bit
  5503F  Uint16 XCERC15 : 1 ;
  5504F                     // 15 Receive Channel enable bit
  5505F} ;
  5506F
  5507Funion XCERC_REG
  5508F{
  5509F  Uint16 all ;
  5510F  struct XCERC_BITS bit ;
  5511F} ;
  5512F// XCERD control register bit definitions:
  5513F
  5514Fstruct XCERD_BITS
  5515F{                   // bit description
  5516F  Uint16 XCERD0 : 1 ;
  5517F                    // 0 Receive Channel enable bit
  5518F  Uint16 XCERD1 : 1 ;
  5519F                    // 1 Receive Channel enable bit
  5520F  Uint16 XCERD2 : 1 ;
  5521F                    // 2 Receive Channel enable bit
  5522F  Uint16 XCERD3 : 1 ;
  5523F                    // 3 Receive Channel enable bit
  5524F  Uint16 XCERD4 : 1 ;
  5525F                    // 4 Receive Channel enable bit
  5526F  Uint16 XCERD5 : 1 ;
  5527F                    // 5 Receive Channel enable bit
  5528F  Uint16 XCERD6 : 1 ;
  5529F                    // 6 Receive Channel enable bit
  5530F  Uint16 XCERD7 : 1 ;
  5531F                    // 7 Receive Channel enable bit
  5532F  Uint16 XCERD8 : 1 ;
  5533F                    // 8 Receive Channel enable bit
  5534F  Uint16 XCERD9 : 1 ;
  5535F                    // 9 Receive Channel enable bit
  5536F  Uint16 XCERD10 : 1 ;
  5537F                     // 10 Receive Channel enable bit
  5538F  Uint16 XCERD11 : 1 ;
  5539F                     // 11 Receive Channel enable bit
  5540F  Uint16 XCERD12 : 1 ;
  5541F                     // 12 Receive Channel enable bit
  5542F  Uint16 XCERD13 : 1 ;
  5543F                     // 13 Receive Channel enable bit
  5544F  Uint16 XCERD14 : 1 ;
  5545F                     // 14 Receive Channel enable bit
  5546F  Uint16 XCERD15 : 1 ;
  5547F                     // 15 Receive Channel enable bit
  5548F} ;
  5549F
  5550Funion XCERD_REG
  5551F{
  5552F  Uint16 all ;
  5553F  struct XCERD_BITS bit ;
  5554F} ;
  5555F// RCERE control register bit definitions:
  5556F
  5557Fstruct RCERE_BITS
  5558F{                   // bit description
  5559F  Uint16 RCEE0 : 1 ;
  5560F                   // 0 Receive Channel enable bit
  5561F  Uint16 RCEE1 : 1 ;
  5562F                   // 1 Receive Channel enable bit
  5563F  Uint16 RCEE2 : 1 ;
  5564F                   // 2 Receive Channel enable bit
  5565F  Uint16 RCEE3 : 1 ;
  5566F                   // 3 Receive Channel enable bit
  5567F  Uint16 RCEE4 : 1 ;
  5568F                   // 4 Receive Channel enable bit
  5569F  Uint16 RCEE5 : 1 ;
  5570F                   // 5 Receive Channel enable bit
  5571F  Uint16 RCEE6 : 1 ;
  5572F                   // 6 Receive Channel enable bit
  5573F  Uint16 RCEE7 : 1 ;
  5574F                   // 7 Receive Channel enable bit
  5575F  Uint16 RCEE8 : 1 ;
  5576F                   // 8 Receive Channel enable bit
  5577F  Uint16 RCEE9 : 1 ;
  5578F                   // 9 Receive Channel enable bit
  5579F  Uint16 RCEE10 : 1 ;
  5580F                    // 10 Receive Channel enable bit
  5581F  Uint16 RCEE11 : 1 ;
  5582F                    // 11 Receive Channel enable bit
  5583F  Uint16 RCEE12 : 1 ;
  5584F                    // 12 Receive Channel enable bit
  5585F  Uint16 RCEE13 : 1 ;
  5586F                    // 13 Receive Channel enable bit
  5587F  Uint16 RCEE14 : 1 ;
  5588F                    // 14 Receive Channel enable bit
  5589F  Uint16 RCEE15 : 1 ;
  5590F                    // 15 Receive Channel enable bit
  5591F} ;
  5592F
  5593Funion RCERE_REG
  5594F{
  5595F  Uint16 all ;
  5596F  struct RCERE_BITS bit ;
  5597F} ;
  5598F// RCERF control register bit definitions:
  5599F
  5600Fstruct RCERF_BITS
  5601F{                   // bit description
  5602F  Uint16 RCEF0 : 1 ;
  5603F                   // 0 Receive Channel enable bit
  5604F  Uint16 RCEF1 : 1 ;
  5605F                   // 1 Receive Channel enable bit
  5606F  Uint16 RCEF2 : 1 ;
  5607F                   // 2 Receive Channel enable bit
  5608F  Uint16 RCEF3 : 1 ;
  5609F                   // 3 Receive Channel enable bit
  5610F  Uint16 RCEF4 : 1 ;
  5611F                   // 4 Receive Channel enable bit
  5612F  Uint16 RCEF5 : 1 ;
  5613F                   // 5 Receive Channel enable bit
  5614F  Uint16 RCEF6 : 1 ;
  5615F                   // 6 Receive Channel enable bit
  5616F  Uint16 RCEF7 : 1 ;
  5617F                   // 7 Receive Channel enable bit
  5618F  Uint16 RCEF8 : 1 ;
  5619F                   // 8 Receive Channel enable bit
  5620F  Uint16 RCEF9 : 1 ;
  5621F                   // 9 Receive Channel enable bit
  5622F  Uint16 RCEF10 : 1 ;
  5623F                    // 10 Receive Channel enable bit
  5624F  Uint16 RCEF11 : 1 ;
  5625F                    // 11 Receive Channel enable bit
  5626F  Uint16 RCEF12 : 1 ;
  5627F                    // 12 Receive Channel enable bit
  5628F  Uint16 RCEF13 : 1 ;
  5629F                    // 13 Receive Channel enable bit
  5630F  Uint16 RCEF14 : 1 ;
  5631F                    // 14 Receive Channel enable bit
  5632F  Uint16 RCEF15 : 1 ;
  5633F                    // 15 Receive Channel enable bit
  5634F} ;
  5635F
  5636Funion RCERF_REG
  5637F{
  5638F  Uint16 all ;
  5639F  struct RCERF_BITS bit ;
  5640F} ;
  5641F// XCERE control register bit definitions:
  5642F
  5643Fstruct XCERE_BITS
  5644F{                   // bit description
  5645F  Uint16 XCERE0 : 1 ;
  5646F                    // 0 Receive Channel enable bit
  5647F  Uint16 XCERE1 : 1 ;
  5648F                    // 1 Receive Channel enable bit
  5649F  Uint16 XCERE2 : 1 ;
  5650F                    // 2 Receive Channel enable bit
  5651F  Uint16 XCERE3 : 1 ;
  5652F                    // 3 Receive Channel enable bit
  5653F  Uint16 XCERE4 : 1 ;
  5654F                    // 4 Receive Channel enable bit
  5655F  Uint16 XCERE5 : 1 ;
  5656F                    // 5 Receive Channel enable bit
  5657F  Uint16 XCERE6 : 1 ;
  5658F                    // 6 Receive Channel enable bit
  5659F  Uint16 XCERE7 : 1 ;
  5660F                    // 7 Receive Channel enable bit
  5661F  Uint16 XCERE8 : 1 ;
  5662F                    // 8 Receive Channel enable bit
  5663F  Uint16 XCERE9 : 1 ;
  5664F                    // 9 Receive Channel enable bit
  5665F  Uint16 XCERE10 : 1 ;
  5666F                     // 10 Receive Channel enable bit
  5667F  Uint16 XCERE11 : 1 ;
  5668F                     // 11 Receive Channel enable bit
  5669F  Uint16 XCERE12 : 1 ;
  5670F                     // 12 Receive Channel enable bit
  5671F  Uint16 XCERE13 : 1 ;
  5672F                     // 13 Receive Channel enable bit
  5673F  Uint16 XCERE14 : 1 ;
  5674F                     // 14 Receive Channel enable bit
  5675F  Uint16 XCERE15 : 1 ;
  5676F                     // 15 Receive Channel enable bit
  5677F} ;
  5678F
  5679Funion XCERE_REG
  5680F{
  5681F  Uint16 all ;
  5682F  struct XCERE_BITS bit ;
  5683F} ;
  5684F// XCERF control register bit definitions:
  5685F
  5686Fstruct XCERF_BITS
  5687F{                   // bit description
  5688F  Uint16 XCERF0 : 1 ;
  5689F                    // 0 Receive Channel enable bit
  5690F  Uint16 XCERF1 : 1 ;
  5691F                    // 1 Receive Channel enable bit
  5692F  Uint16 XCERF2 : 1 ;
  5693F                    // 2 Receive Channel enable bit
  5694F  Uint16 XCERF3 : 1 ;
  5695F                    // 3 Receive Channel enable bit
  5696F  Uint16 XCERF4 : 1 ;
  5697F                    // 4 Receive Channel enable bit
  5698F  Uint16 XCERF5 : 1 ;
  5699F                    // 5 Receive Channel enable bit
  5700F  Uint16 XCERF6 : 1 ;
  5701F                    // 6 Receive Channel enable bit
  5702F  Uint16 XCERF7 : 1 ;
  5703F                    // 7 Receive Channel enable bit
  5704F  Uint16 XCERF8 : 1 ;
  5705F                    // 8 Receive Channel enable bit
  5706F  Uint16 XCERF9 : 1 ;
  5707F                    // 9 Receive Channel enable bit
  5708F  Uint16 XCERF10 : 1 ;
  5709F                     // 10 Receive Channel enable bit
  5710F  Uint16 XCERF11 : 1 ;
  5711F                     // 11 Receive Channel enable bit
  5712F  Uint16 XCERF12 : 1 ;
  5713F                     // 12 Receive Channel enable bit
  5714F  Uint16 XCERF13 : 1 ;
  5715F                     // 13 Receive Channel enable bit
  5716F  Uint16 XCERF14 : 1 ;
  5717F                     // 14 Receive Channel enable bit
  5718F  Uint16 XCERF15 : 1 ;
  5719F                     // 15 Receive Channel enable bit
  5720F} ;
  5721F
  5722Funion XCERF_REG
  5723F{
  5724F  Uint16 all ;
  5725F  struct XCERF_BITS bit ;
  5726F} ;
  5727F// RCERG control register bit definitions:
  5728F
  5729Fstruct RCERG_BITS
  5730F{                   // bit description
  5731F  Uint16 RCEG0 : 1 ;
  5732F                   // 0 Receive Channel enable bit
  5733F  Uint16 RCEG1 : 1 ;
  5734F                   // 1 Receive Channel enable bit
  5735F  Uint16 RCEG2 : 1 ;
  5736F                   // 2 Receive Channel enable bit
  5737F  Uint16 RCEG3 : 1 ;
  5738F                   // 3 Receive Channel enable bit
  5739F  Uint16 RCEG4 : 1 ;
  5740F                   // 4 Receive Channel enable bit
  5741F  Uint16 RCEG5 : 1 ;
  5742F                   // 5 Receive Channel enable bit
  5743F  Uint16 RCEG6 : 1 ;
  5744F                   // 6 Receive Channel enable bit
  5745F  Uint16 RCEG7 : 1 ;
  5746F                   // 7 Receive Channel enable bit
  5747F  Uint16 RCEG8 : 1 ;
  5748F                   // 8 Receive Channel enable bit
  5749F  Uint16 RCEG9 : 1 ;
  5750F                   // 9 Receive Channel enable bit
  5751F  Uint16 RCEG10 : 1 ;
  5752F                    // 10 Receive Channel enable bit
  5753F  Uint16 RCEG11 : 1 ;
  5754F                    // 11 Receive Channel enable bit
  5755F  Uint16 RCEG12 : 1 ;
  5756F                    // 12 Receive Channel enable bit
  5757F  Uint16 RCEG13 : 1 ;
  5758F                    // 13 Receive Channel enable bit
  5759F  Uint16 RCEG14 : 1 ;
  5760F                    // 14 Receive Channel enable bit
  5761F  Uint16 RCEG15 : 1 ;
  5762F                    // 15 Receive Channel enable bit
  5763F} ;
  5764F
  5765Funion RCERG_REG
  5766F{
  5767F  Uint16 all ;
  5768F  struct RCERG_BITS bit ;
  5769F} ;
  5770F// RCERH control register bit definitions:
  5771F
  5772Fstruct RCERH_BITS
  5773F{                   // bit description
  5774F  Uint16 RCEH0 : 1 ;
  5775F                   // 0 Receive Channel enable bit
  5776F  Uint16 RCEH1 : 1 ;
  5777F                   // 1 Receive Channel enable bit
  5778F  Uint16 RCEH2 : 1 ;
  5779F                   // 2 Receive Channel enable bit
  5780F  Uint16 RCEH3 : 1 ;
  5781F                   // 3 Receive Channel enable bit
  5782F  Uint16 RCEH4 : 1 ;
  5783F                   // 4 Receive Channel enable bit
  5784F  Uint16 RCEH5 : 1 ;
  5785F                   // 5 Receive Channel enable bit
  5786F  Uint16 RCEH6 : 1 ;
  5787F                   // 6 Receive Channel enable bit
  5788F  Uint16 RCEH7 : 1 ;
  5789F                   // 7 Receive Channel enable bit
  5790F  Uint16 RCEH8 : 1 ;
  5791F                   // 8 Receive Channel enable bit
  5792F  Uint16 RCEH9 : 1 ;
  5793F                   // 9 Receive Channel enable bit
  5794F  Uint16 RCEH10 : 1 ;
  5795F                    // 10 Receive Channel enable bit
  5796F  Uint16 RCEH11 : 1 ;
  5797F                    // 11 Receive Channel enable bit
  5798F  Uint16 RCEH12 : 1 ;
  5799F                    // 12 Receive Channel enable bit
  5800F  Uint16 RCEH13 : 1 ;
  5801F                    // 13 Receive Channel enable bit
  5802F  Uint16 RCEH14 : 1 ;
  5803F                    // 14 Receive Channel enable bit
  5804F  Uint16 RCEH15 : 1 ;
  5805F                    // 15 Receive Channel enable bit
  5806F} ;
  5807F
  5808Funion RCERH_REG
  5809F{
  5810F  Uint16 all ;
  5811F  struct RCERH_BITS bit ;
  5812F} ;
  5813F// XCERG control register bit definitions:
  5814F
  5815Fstruct XCERG_BITS
  5816F{                   // bit description
  5817F  Uint16 XCERG0 : 1 ;
  5818F                    // 0 Receive Channel enable bit
  5819F  Uint16 XCERG1 : 1 ;
  5820F                    // 1 Receive Channel enable bit
  5821F  Uint16 XCERG2 : 1 ;
  5822F                    // 2 Receive Channel enable bit
  5823F  Uint16 XCERG3 : 1 ;
  5824F                    // 3 Receive Channel enable bit
  5825F  Uint16 XCERG4 : 1 ;
  5826F                    // 4 Receive Channel enable bit
  5827F  Uint16 XCERG5 : 1 ;
  5828F                    // 5 Receive Channel enable bit
  5829F  Uint16 XCERG6 : 1 ;
  5830F                    // 6 Receive Channel enable bit
  5831F  Uint16 XCERG7 : 1 ;
  5832F                    // 7 Receive Channel enable bit
  5833F  Uint16 XCERG8 : 1 ;
  5834F                    // 8 Receive Channel enable bit
  5835F  Uint16 XCERG9 : 1 ;
  5836F                    // 9 Receive Channel enable bit
  5837F  Uint16 XCERG10 : 1 ;
  5838F                     // 10 Receive Channel enable bit
  5839F  Uint16 XCERG11 : 1 ;
  5840F                     // 11 Receive Channel enable bit
  5841F  Uint16 XCERG12 : 1 ;
  5842F                     // 12 Receive Channel enable bit
  5843F  Uint16 XCERG13 : 1 ;
  5844F                     // 13 Receive Channel enable bit
  5845F  Uint16 XCERG14 : 1 ;
  5846F                     // 14 Receive Channel enable bit
  5847F  Uint16 XCERG15 : 1 ;
  5848F                     // 15 Receive Channel enable bit
  5849F} ;
  5850F
  5851Funion XCERG_REG
  5852F{
  5853F  Uint16 all ;
  5854F  struct XCERG_BITS bit ;
  5855F} ;
  5856F// XCERH control register bit definitions:
  5857F
  5858Fstruct XCERH_BITS
  5859F{                   // bit description
  5860F  Uint16 XCEH0 : 1 ;
  5861F                   // 0 Receive Channel enable bit
  5862F  Uint16 XCEH1 : 1 ;
  5863F                   // 1 Receive Channel enable bit
  5864F  Uint16 XCEH2 : 1 ;
  5865F                   // 2 Receive Channel enable bit
  5866F  Uint16 XCEH3 : 1 ;
  5867F                   // 3 Receive Channel enable bit
  5868F  Uint16 XCEH4 : 1 ;
  5869F                   // 4 Receive Channel enable bit
  5870F  Uint16 XCEH5 : 1 ;
  5871F                   // 5 Receive Channel enable bit
  5872F  Uint16 XCEH6 : 1 ;
  5873F                   // 6 Receive Channel enable bit
  5874F  Uint16 XCEH7 : 1 ;
  5875F                   // 7 Receive Channel enable bit
  5876F  Uint16 XCEH8 : 1 ;
  5877F                   // 8 Receive Channel enable bit
  5878F  Uint16 XCEH9 : 1 ;
  5879F                   // 9 Receive Channel enable bit
  5880F  Uint16 XCEH10 : 1 ;
  5881F                    // 10 Receive Channel enable bit
  5882F  Uint16 XCEH11 : 1 ;
  5883F                    // 11 Receive Channel enable bit
  5884F  Uint16 XCEH12 : 1 ;
  5885F                    // 12 Receive Channel enable bit
  5886F  Uint16 XCEH13 : 1 ;
  5887F                    // 13 Receive Channel enable bit
  5888F  Uint16 XCEH14 : 1 ;
  5889F                    // 14 Receive Channel enable bit
  5890F  Uint16 XCEH15 : 1 ;
  5891F                    // 15 Receive Channel enable bit
  5892F} ;
  5893F
  5894Funion XCERH_REG
  5895F{
  5896F  Uint16 all ;
  5897F  struct XCERH_BITS bit ;
  5898F} ;
  5899F// McBSP Interrupt enable register for RINT/XINT
  5900F
  5901Fstruct MFFINT_BITS
  5902F{                    // bits description
  5903F  Uint16 XINT : 1 ;// 0 XINT interrupt enable
  5904F  Uint16 rsvd1 : 1 ;// 1 reserved
  5905F  Uint16 RINT : 1 ;// 2 RINT interrupt enable
  5906F  Uint16 rsvd2 : 13 ;// 15:3 reserved
  5907F} ;
  5908F
  5909Funion MFFINT_REG
  5910F{
  5911F  Uint16 all ;
  5912F  struct MFFINT_BITS bit ;
  5913F} ;
  5914F//---------------------------------------------------------------------------
  5915F// McBSP Register File:
  5916F//
  5917F
  5918Fstruct MCBSP_REGS
  5919F{
  5920F  union DRR2_REG DRR2 ; // MCBSP Data receive register bits 31-16
  5921F  union DRR1_REG DRR1 ; // MCBSP Data receive register bits 15-0
  5922F  union DXR2_REG DXR2 ; // MCBSP Data transmit register bits 31-16
  5923F  union DXR1_REG DXR1 ; // MCBSP Data transmit register bits 15-0
  5924F  union SPCR2_REG SPCR2 ; // MCBSP control register bits 31-16
  5925F  union SPCR1_REG SPCR1 ; // MCBSP control register bits 15-0
  5926F  union RCR2_REG RCR2 ; // MCBSP receive control register bits 31-16
  5927F  union RCR1_REG RCR1 ; // MCBSP receive control register bits 15-0
  5928F  union XCR2_REG XCR2 ; // MCBSP transmit control register bits 31-16
  5929F  union XCR1_REG XCR1 ; // MCBSP transmit control register bits 15-0
  5930F  union SRGR2_REG SRGR2 ; // MCBSP sample rate gen register bits 31-16
  5931F  union SRGR1_REG SRGR1 ; // MCBSP sample rate gen register bits 15-0
  5932F  union MCR2_REG MCR2 ; // MCBSP multichannel register bits 31-16
  5933F  union MCR1_REG MCR1 ; // MCBSP multichannel register bits 15-0
  5934F  union RCERA_REG RCERA ; // MCBSP Receive channel enable partition A
  5935F  union RCERB_REG RCERB ; // MCBSP Receive channel enable partition B
  5936F  union XCERA_REG XCERA ; // MCBSP Transmit channel enable partition A
  5937F  union XCERB_REG XCERB ; // MCBSP Transmit channel enable partition B
  5938F  union PCR_REG PCR ; // MCBSP Pin control register bits 15-0
  5939F  union RCERC_REG RCERC ; // MCBSP Receive channel enable partition C
  5940F  union RCERD_REG RCERD ; // MCBSP Receive channel enable partition D
  5941F  union XCERC_REG XCERC ; // MCBSP Transmit channel enable partition C
  5942F  union XCERD_REG XCERD ; // MCBSP Transmit channel enable partition D
  5943F  union RCERE_REG RCERE ; // MCBSP Receive channel enable partition E
  5944F  union RCERF_REG RCERF ; // MCBSP Receive channel enable partition F
  5945F  union XCERE_REG XCERE ; // MCBSP Transmit channel enable partition E
  5946F  union XCERF_REG XCERF ; // MCBSP Transmit channel enable partition F
  5947F  union RCERG_REG RCERG ; // MCBSP Receive channel enable partition G
  5948F  union RCERH_REG RCERH ; // MCBSP Receive channel enable partition H
  5949F  union XCERG_REG XCERG ; // MCBSP Transmit channel enable partition G
  5950F  union XCERH_REG XCERH ; // MCBSP Transmit channel enable partition H
  5951F  Uint16 rsvd1 [ 4 ] ;
  5952F                    // reserved
  5953F  union MFFINT_REG MFFINT ; // MCBSP Interrupt enable register for RINT/XINT
  5954F  Uint16 rsvd2 ; // reserved
  5955F} ;
  5956F//---------------------------------------------------------------------------
  5957F// McBSP External References & Function Declarations:
  5958F//
  5959F
  5960Fextern volatile struct MCBSP_REGS
  5961F  McbspaRegs ;
  5962F
  5963Fextern volatile struct MCBSP_REGS
  5964F  McbspbRegs ;
  5965F       /* extern "C" */
  5966F       // end of DSP2833x_MCBSP_H definition
  5967F//===========================================================================
  5968F// No more.
  5969F//===========================================================================
  5970F 
  5971F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_McBSP.h*/
  5972F/*   CLOSE_FILE Include File */
  5973F 
  5974F              // McBSP
  5975F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieCtrl.h */
  5976F// TI File $Revision: /main/1 $
  5977F// Checkin $Date: August 18, 2006 13:52:24 $
  5978F//###########################################################################
  5979F//
  5980F// FILE: DSP2833x_PieCtrl.h
  5981F//
  5982F// TITLE: DSP2833x Device PIE Control Register Definitions.
  5983F//
  5984F//###########################################################################
  5985F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  5986F// $Release Date: August 4, 2009 $
  5987F//###########################################################################
  5988F#ifndef DSP2833x_PIE_CTRL_H
  5989F#define DSP2833x_PIE_CTRL_H
  5990F//---------------------------------------------------------------------------
  5991F// PIE Control Register Bit Definitions:
  5992F//
  5993F// PIECTRL: Register bit definitions:
  5994F
  5995Ftypedef
  5996Fstruct PIECTRL_BITS
  5997F{                            // bits description
  5998F  Uint16 ENPIE : 1 ;
  5999F                   // 0 Enable PIE block
  6000F  Uint16 PIEVECT : 15 ;
  6001F                      // 15:1 Fetched vector address
  6002F} PIECTRL_BITS ;
  6003F
  6004Ftypedef
  6005Funion PIECTRL_REG
  6006F{
  6007F  Uint16 all ;
  6008F  struct PIECTRL_BITS bit ;
  6009F} PIECTRL_REG ;
  6010F// PIEIER: Register bit definitions:
  6011F
  6012Ftypedef
  6013Fstruct PIEIER_BITS
  6014F{                            // bits description
  6015F  Uint16 INTx1 : 1 ;
  6016F                   // 0 INTx.1
  6017F  Uint16 INTx2 : 1 ;
  6018F                   // 1 INTx.2
  6019F  Uint16 INTx3 : 1 ;
  6020F                   // 2 INTx.3
  6021F  Uint16 INTx4 : 1 ;
  6022F                   // 3 INTx.4
  6023F  Uint16 INTx5 : 1 ;
  6024F                   // 4 INTx.5
  6025F  Uint16 INTx6 : 1 ;
  6026F                   // 5 INTx.6
  6027F  Uint16 INTx7 : 1 ;
  6028F                   // 6 INTx.7
  6029F  Uint16 INTx8 : 1 ;
  6030F                   // 7 INTx.8
  6031F  Uint16 rsvd : 8 ;
  6032F                  // 15:8 reserved
  6033F} PIEIER_BITS ;
  6034F
  6035Ftypedef
  6036Funion PIEIER_REG
  6037F{
  6038F  Uint16 all ;
  6039F  struct PIEIER_BITS bit ;
  6040F} PIEIER_REG ;
  6041F// PIEIFR: Register bit definitions:
  6042F
  6043Ftypedef
  6044Fstruct PIEIFR_BITS
  6045F{                            // bits description
  6046F  Uint16 INTx1 : 1 ;
  6047F                   // 0 INTx.1
  6048F  Uint16 INTx2 : 1 ;
  6049F                   // 1 INTx.2
  6050F  Uint16 INTx3 : 1 ;
  6051F                   // 2 INTx.3
  6052F  Uint16 INTx4 : 1 ;
  6053F                   // 3 INTx.4
  6054F  Uint16 INTx5 : 1 ;
  6055F                   // 4 INTx.5
  6056F  Uint16 INTx6 : 1 ;
  6057F                   // 5 INTx.6
  6058F  Uint16 INTx7 : 1 ;
  6059F                   // 6 INTx.7
  6060F  Uint16 INTx8 : 1 ;
  6061F                   // 7 INTx.8
  6062F  Uint16 rsvd : 8 ;
  6063F                  // 15:8 reserved
  6064F} PIEIFR_BITS ;
  6065F
  6066Ftypedef
  6067Funion PIEIFR_REG
  6068F{
  6069F  Uint16 all ;
  6070F  struct PIEIFR_BITS bit ;
  6071F} PIEIFR_REG ;
  6072F// PIEACK: Register bit definitions:
  6073F
  6074Ftypedef
  6075Fstruct PIEACK_BITS
  6076F{                            // bits description
  6077F  Uint16 ACK1 : 1 ;
  6078F                  // 0 Acknowledge PIE interrupt group 1
  6079F  Uint16 ACK2 : 1 ;
  6080F                  // 1 Acknowledge PIE interrupt group 2
  6081F  Uint16 ACK3 : 1 ;
  6082F                  // 2 Acknowledge PIE interrupt group 3
  6083F  Uint16 ACK4 : 1 ;
  6084F                  // 3 Acknowledge PIE interrupt group 4
  6085F  Uint16 ACK5 : 1 ;
  6086F                  // 4 Acknowledge PIE interrupt group 5
  6087F  Uint16 ACK6 : 1 ;
  6088F                  // 5 Acknowledge PIE interrupt group 6
  6089F  Uint16 ACK7 : 1 ;
  6090F                  // 6 Acknowledge PIE interrupt group 7
  6091F  Uint16 ACK8 : 1 ;
  6092F                  // 7 Acknowledge PIE interrupt group 8
  6093F  Uint16 ACK9 : 1 ;
  6094F                  // 8 Acknowledge PIE interrupt group 9
  6095F  Uint16 ACK10 : 1 ;
  6096F                   // 9 Acknowledge PIE interrupt group 10
  6097F  Uint16 ACK11 : 1 ;
  6098F                   // 10 Acknowledge PIE interrupt group 11
  6099F  Uint16 ACK12 : 1 ;
  6100F                   // 11 Acknowledge PIE interrupt group 12
  6101F  Uint16 rsvd : 4 ;
  6102F                  // 15:12 reserved
  6103F} PIEACK_BITS ;
  6104F
  6105Ftypedef
  6106Funion PIEACK_REG
  6107F{
  6108F  Uint16 all ;
  6109F  struct PIEACK_BITS bit ;
  6110F} PIEACK_REG ;
  6111F//---------------------------------------------------------------------------
  6112F// PIE Control Register File:
  6113F//
  6114F
  6115Ftypedef
  6116Fstruct PIE_CTRL_REGS
  6117F{
  6118F  union PIECTRL_REG PIECTRL ; // PIE control register
  6119F  union PIEACK_REG PIEACK ; // PIE acknowledge
  6120F  union PIEIER_REG PIEIER1 ; // PIE int1 IER register
  6121F  union PIEIFR_REG PIEIFR1 ; // PIE int1 IFR register
  6122F  union PIEIER_REG PIEIER2 ; // PIE INT2 IER register
  6123F  union PIEIFR_REG PIEIFR2 ; // PIE INT2 IFR register
  6124F  union PIEIER_REG PIEIER3 ; // PIE INT3 IER register
  6125F  union PIEIFR_REG PIEIFR3 ; // PIE INT3 IFR register
  6126F  union PIEIER_REG PIEIER4 ; // PIE INT4 IER register
  6127F  union PIEIFR_REG PIEIFR4 ; // PIE INT4 IFR register
  6128F  union PIEIER_REG PIEIER5 ; // PIE INT5 IER register
  6129F  union PIEIFR_REG PIEIFR5 ; // PIE INT5 IFR register
  6130F  union PIEIER_REG PIEIER6 ; // PIE INT6 IER register
  6131F  union PIEIFR_REG PIEIFR6 ; // PIE INT6 IFR register
  6132F  union PIEIER_REG PIEIER7 ; // PIE INT7 IER register
  6133F  union PIEIFR_REG PIEIFR7 ; // PIE INT7 IFR register
  6134F  union PIEIER_REG PIEIER8 ; // PIE INT8 IER register
  6135F  union PIEIFR_REG PIEIFR8 ; // PIE INT8 IFR register
  6136F  union PIEIER_REG PIEIER9 ; // PIE INT9 IER register
  6137F  union PIEIFR_REG PIEIFR9 ; // PIE INT9 IFR register
  6138F  union PIEIER_REG PIEIER10 ; // PIE int10 IER register
  6139F  union PIEIFR_REG PIEIFR10 ; // PIE int10 IFR register
  6140F  union PIEIER_REG PIEIER11 ; // PIE int11 IER register
  6141F  union PIEIFR_REG PIEIFR11 ; // PIE int11 IFR register
  6142F  union PIEIER_REG PIEIER12 ; // PIE int12 IER register
  6143F  union PIEIFR_REG PIEIFR12 ; // PIE int12 IFR register
  6144F} PIE_CTRL_REGS ;
  6145F#define PIEACK_GROUP1 0x0001
  6146F#define PIEACK_GROUP2 0x0002
  6147F#define PIEACK_GROUP3 0x0004
  6148F#define PIEACK_GROUP4 0x0008
  6149F#define PIEACK_GROUP5 0x0010
  6150F#define PIEACK_GROUP6 0x0020
  6151F#define PIEACK_GROUP7 0x0040
  6152F#define PIEACK_GROUP8 0x0080
  6153F#define PIEACK_GROUP9 0x0100
  6154F#define PIEACK_GROUP10 0x0200
  6155F#define PIEACK_GROUP11 0x0400
  6156F#define PIEACK_GROUP12 0x0800
  6157F//---------------------------------------------------------------------------
  6158F// PIE Control Registers External References & Function Declarations:
  6159F//
  6160F
  6161Fextern volatile struct PIE_CTRL_REGS
  6162F  PieCtrlRegs ;
  6163F       // end of DSP2833x_PIE_CTRL_H definition
  6164F//===========================================================================
  6165F// End of file.
  6166F//===========================================================================
  6167F 
  6168F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieCtrl.h*/
  6169F/*   CLOSE_FILE Include File */
  6170F 
  6171F            // PIE Control Registers
  6172F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieVect.h */
  6173F// TI File $Revision: /main/2 $
  6174F// Checkin $Date: March 16, 2007 09:00:21 $
  6175F//###########################################################################
  6176F//
  6177F// FILE: DSP2833x_PieVect.h
  6178F//
  6179F// TITLE: DSP2833x Devices PIE Vector Table Definitions.
  6180F//
  6181F//###########################################################################
  6182F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6183F// $Release Date: August 4, 2009 $
  6184F//###########################################################################
  6185F#ifndef DSP2833x_PIE_VECT_H
  6186F#define DSP2833x_PIE_VECT_H
  6187F//---------------------------------------------------------------------------
  6188F// PIE Interrupt Vector Table Definition:
  6189F//
  6190F// Create a user type called PINT (pointer to interrupt):
  6191F
  6192Ftypedef
  6193Fconst
  6194Finterrupt void ( * PINT ) ( void ) ;
  6195F// Define Vector Table:
  6196F
  6197Ftypedef
  6198Fstruct PIE_VECT_TABLE
  6199F{
  6200F// Reset is never fetched from this table.
  6201F// It will always be fetched from 0x3FFFC0 in
  6202F// boot ROM
  6203F  PINT PIE1_RESERVED ;
  6204F  PINT PIE2_RESERVED ;
  6205F  PINT PIE3_RESERVED ;
  6206F  PINT PIE4_RESERVED ;
  6207F  PINT PIE5_RESERVED ;
  6208F  PINT PIE6_RESERVED ;
  6209F  PINT PIE7_RESERVED ;
  6210F  PINT PIE8_RESERVED ;
  6211F  PINT PIE9_RESERVED ;
  6212F  PINT PIE10_RESERVED ;
  6213F  PINT PIE11_RESERVED ;
  6214F  PINT PIE12_RESERVED ;
  6215F  PINT PIE13_RESERVED ;
  6216F// Non-Peripheral Interrupts:
  6217F  PINT XINT13 ;    // XINT13 / CPU-Timer1
  6218F  PINT TINT2 ;    // CPU-Timer2
  6219F  PINT DATALOG ;    // Datalogging interrupt
  6220F  PINT RTOSINT ;    // RTOS interrupt
  6221F  PINT EMUINT ;    // Emulation interrupt
  6222F  PINT XNMI ;    // Non-maskable interrupt
  6223F  PINT ILLEGAL ;    // Illegal operation TRAP
  6224F  PINT USER1 ;    // User Defined trap 1
  6225F  PINT USER2 ;    // User Defined trap 2
  6226F  PINT USER3 ;    // User Defined trap 3
  6227F  PINT USER4 ;    // User Defined trap 4
  6228F  PINT USER5 ;    // User Defined trap 5
  6229F  PINT USER6 ;    // User Defined trap 6
  6230F  PINT USER7 ;    // User Defined trap 7
  6231F  PINT USER8 ;    // User Defined trap 8
  6232F  PINT USER9 ;    // User Defined trap 9
  6233F  PINT USER10 ;    // User Defined trap 10
  6234F  PINT USER11 ;    // User Defined trap 11
  6235F  PINT USER12 ;    // User Defined trap 12
  6236F// Group 1 PIE Peripheral Vectors:
  6237F  PINT SEQ1INT ;
  6238F  PINT SEQ2INT ;
  6239F  PINT rsvd1_3 ;
  6240F  PINT XINT1 ;
  6241F  PINT XINT2 ;
  6242F  PINT ADCINT ;    // ADC
  6243F  PINT TINT0 ;    // Timer 0
  6244F  PINT WAKEINT ;    // WD
  6245F// Group 2 PIE Peripheral Vectors:
  6246F  PINT EPWM1_TZINT ;    // EPWM-1
  6247F  PINT EPWM2_TZINT ;    // EPWM-2
  6248F  PINT EPWM3_TZINT ;    // EPWM-3
  6249F  PINT EPWM4_TZINT ;    // EPWM-4
  6250F  PINT EPWM5_TZINT ;    // EPWM-5
  6251F  PINT EPWM6_TZINT ;    // EPWM-6
  6252F  PINT rsvd2_7 ;
  6253F  PINT rsvd2_8 ;
  6254F// Group 3 PIE Peripheral Vectors:
  6255F  PINT EPWM1_INT ;    // EPWM-1
  6256F  PINT EPWM2_INT ;    // EPWM-2
  6257F  PINT EPWM3_INT ;    // EPWM-3
  6258F  PINT EPWM4_INT ;    // EPWM-4
  6259F  PINT EPWM5_INT ;    // EPWM-5
  6260F  PINT EPWM6_INT ;    // EPWM-6
  6261F  PINT rsvd3_7 ;
  6262F  PINT rsvd3_8 ;
  6263F// Group 4 PIE Peripheral Vectors:
  6264F  PINT ECAP1_INT ;    // ECAP-1
  6265F  PINT ECAP2_INT ;    // ECAP-2
  6266F  PINT ECAP3_INT ;    // ECAP-3
  6267F  PINT ECAP4_INT ;    // ECAP-4
  6268F  PINT ECAP5_INT ;    // ECAP-5
  6269F  PINT ECAP6_INT ;    // ECAP-6
  6270F  PINT rsvd4_7 ;
  6271F  PINT rsvd4_8 ;
  6272F// Group 5 PIE Peripheral Vectors:
  6273F  PINT EQEP1_INT ;    // EQEP-1
  6274F  PINT EQEP2_INT ;    // EQEP-2
  6275F  PINT rsvd5_3 ;
  6276F  PINT rsvd5_4 ;
  6277F  PINT rsvd5_5 ;
  6278F  PINT rsvd5_6 ;
  6279F  PINT rsvd5_7 ;
  6280F  PINT rsvd5_8 ;
  6281F// Group 6 PIE Peripheral Vectors:
  6282F  PINT SPIRXINTA ;    // SPI-A
  6283F  PINT SPITXINTA ;    // SPI-A
  6284F  PINT MRINTB ;    // McBSP-B
  6285F  PINT MXINTB ;    // McBSP-B
  6286F  PINT MRINTA ;        // McBSP-A
  6287F  PINT MXINTA ;    // McBSP-A
  6288F  PINT rsvd6_7 ;
  6289F  PINT rsvd6_8 ;
  6290F// Group 7 PIE Peripheral Vectors:
  6291F  PINT DINTCH1 ;    // DMA
  6292F  PINT DINTCH2 ;    // DMA
  6293F  PINT DINTCH3 ;    // DMA
  6294F  PINT DINTCH4 ;    // DMA
  6295F  PINT DINTCH5 ;    // DMA
  6296F  PINT DINTCH6 ;    // DMA
  6297F  PINT rsvd7_7 ;
  6298F  PINT rsvd7_8 ;
  6299F// Group 8 PIE Peripheral Vectors:
  6300F  PINT I2CINT1A ;    // I2C-A
  6301F  PINT I2CINT2A ;    // I2C-A
  6302F  PINT rsvd8_3 ;
  6303F  PINT rsvd8_4 ;
  6304F  PINT SCIRXINTC ;    // SCI-C
  6305F  PINT SCITXINTC ;    // SCI-C
  6306F  PINT rsvd8_7 ;
  6307F  PINT rsvd8_8 ;
  6308F// Group 9 PIE Peripheral Vectors:
  6309F  PINT SCIRXINTA ;    // SCI-A
  6310F  PINT SCITXINTA ;    // SCI-A
  6311F  PINT SCIRXINTB ;    // SCI-B
  6312F  PINT SCITXINTB ;    // SCI-B
  6313F  PINT ECAN0INTA ;    // eCAN-A
  6314F  PINT ECAN1INTA ;    // eCAN-A
  6315F  PINT ECAN0INTB ;    // eCAN-B
  6316F  PINT ECAN1INTB ;    // eCAN-B
  6317F// Group 10 PIE Peripheral Vectors:
  6318F  PINT rsvd10_1 ;
  6319F  PINT rsvd10_2 ;
  6320F  PINT rsvd10_3 ;
  6321F  PINT rsvd10_4 ;
  6322F  PINT rsvd10_5 ;
  6323F  PINT rsvd10_6 ;
  6324F  PINT rsvd10_7 ;
  6325F  PINT rsvd10_8 ;
  6326F// Group 11 PIE Peripheral Vectors:
  6327F  PINT rsvd11_1 ;
  6328F  PINT rsvd11_2 ;
  6329F  PINT rsvd11_3 ;
  6330F  PINT rsvd11_4 ;
  6331F  PINT rsvd11_5 ;
  6332F  PINT rsvd11_6 ;
  6333F  PINT rsvd11_7 ;
  6334F  PINT rsvd11_8 ;
  6335F// Group 12 PIE Peripheral Vectors:
  6336F  PINT XINT3 ;    // External interrupt
  6337F  PINT XINT4 ;
  6338F  PINT XINT5 ;
  6339F  PINT XINT6 ;
  6340F  PINT XINT7 ;
  6341F  PINT rsvd12_6 ;
  6342F  PINT LVF ;    // Latched overflow
  6343F  PINT LUF ;    // Latched underflow
  6344F} PIE_VECT_TABLE ;
  6345F//---------------------------------------------------------------------------
  6346F// PIE Interrupt Vector Table External References & Function Declarations:
  6347F//
  6348F
  6349Fextern struct PIE_VECT_TABLE
  6350F  PieVectTable ;
  6351F       // end of DSP2833x_PIE_VECT_H definition
  6352F//===========================================================================
  6353F// End of file.
  6354F//===========================================================================
  6355F 
  6356F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieVect.h*/
  6357F/*   CLOSE_FILE Include File */
  6358F 
  6359F            // PIE Vector Table
  6360F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Spi.h */
  6361F// TI File $Revision: /main/3 $
  6362F// Checkin $Date: April 17, 2008 11:08:27 $
  6363F//###########################################################################
  6364F//
  6365F// FILE: DSP2833x_Spi.h
  6366F//
  6367F// TITLE: DSP2833x Device SPI Register Definitions.
  6368F//
  6369F//###########################################################################
  6370F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6371F// $Release Date: August 4, 2009 $
  6372F//###########################################################################
  6373F#ifndef DSP2833x_SPI_H
  6374F#define DSP2833x_SPI_H
  6375F//---------------------------------------------------------------------------
  6376F// SPI Individual Register Bit Definitions:
  6377F//
  6378F// SPI FIFO Transmit register bit definitions:
  6379F
  6380Fstruct SPIFFTX_BITS
  6381F{                     // bit description
  6382F  Uint16 TXFFIL : 5 ;
  6383F                    // 4:0 Interrupt level
  6384F  Uint16 TXFFIENA : 1 ;
  6385F                      // 5 Interrupt enable
  6386F  Uint16 TXFFINTCLR : 1 ;
  6387F                        // 6 Clear INT flag
  6388F  Uint16 TXFFINT : 1 ;
  6389F                     // 7 INT flag
  6390F  Uint16 TXFFST : 5 ;
  6391F                    // 12:8 FIFO status
  6392F  Uint16 TXFIFO : 1 ;
  6393F                    // 13 FIFO reset
  6394F  Uint16 SPIFFENA : 1 ;
  6395F                      // 14 Enhancement enable
  6396F  Uint16 SPIRST : 1 ;
  6397F                    // 15 Reset SPI
  6398F} ;
  6399F
  6400Funion SPIFFTX_REG
  6401F{
  6402F  Uint16 all ;
  6403F  struct SPIFFTX_BITS bit ;
  6404F} ;
  6405F//--------------------------------------------
  6406F// SPI FIFO recieve register bit definitions:
  6407F//
  6408F//
  6409F
  6410Fstruct SPIFFRX_BITS
  6411F{                     // bits description
  6412F  Uint16 RXFFIL : 5 ;
  6413F                    // 4:0 Interrupt level
  6414F  Uint16 RXFFIENA : 1 ;
  6415F                      // 5 Interrupt enable
  6416F  Uint16 RXFFINTCLR : 1 ;
  6417F                        // 6 Clear INT flag
  6418F  Uint16 RXFFINT : 1 ;
  6419F                     // 7 INT flag
  6420F  Uint16 RXFFST : 5 ;
  6421F                    // 12:8 FIFO status
  6422F  Uint16 RXFIFORESET : 1 ;
  6423F                         // 13 FIFO reset
  6424F  Uint16 RXFFOVFCLR : 1 ;
  6425F                        // 14 Clear overflow
  6426F  Uint16 RXFFOVF : 1 ;
  6427F                     // 15 FIFO overflow
  6428F} ;
  6429F
  6430Funion SPIFFRX_REG
  6431F{
  6432F  Uint16 all ;
  6433F  struct SPIFFRX_BITS bit ;
  6434F} ;
  6435F//--------------------------------------------
  6436F// SPI FIFO control register bit definitions:
  6437F//
  6438F//
  6439F
  6440Fstruct SPIFFCT_BITS
  6441F{                     // bits description
  6442F  Uint16 TXDLY : 8 ;
  6443F                   // 7:0 FIFO transmit delay
  6444F  Uint16 rsvd : 8 ;
  6445F                  // 15:8 reserved
  6446F} ;
  6447F
  6448Funion SPIFFCT_REG
  6449F{
  6450F  Uint16 all ;
  6451F  struct SPIFFCT_BITS bit ;
  6452F} ;
  6453F//---------------------------------------------
  6454F// SPI configuration register bit definitions:
  6455F//
  6456F//
  6457F
  6458Fstruct SPICCR_BITS
  6459F{                    // bits description
  6460F  Uint16 SPICHAR : 4 ;
  6461F                     // 3:0 Character length control
  6462F  Uint16 SPILBK : 1 ;
  6463F                    // 4 Loop-back enable/disable
  6464F  Uint16 rsvd1 : 1 ;
  6465F                   // 5 reserved
  6466F  Uint16 CLKPOLARITY : 1 ;
  6467F                         // 6 Clock polarity
  6468F  Uint16 SPISWRESET : 1 ;
  6469F                        // 7 SPI SW Reset
  6470F  Uint16 rsvd2 : 8 ;
  6471F                   // 15:8 reserved
  6472F} ;
  6473F
  6474Funion SPICCR_REG
  6475F{
  6476F  Uint16 all ;
  6477F  struct SPICCR_BITS bit ;
  6478F} ;
  6479F//-------------------------------------------------
  6480F// SPI operation control register bit definitions:
  6481F//
  6482F//
  6483F
  6484Fstruct SPICTL_BITS
  6485F{                    // bits description
  6486F  Uint16 SPIINTENA : 1 ;
  6487F                       // 0 Interrupt enable
  6488F  Uint16 TALK : 1 ;
  6489F                  // 1 Master/Slave transmit enable
  6490F  Uint16 MASTER_SLAVE : 1 ;
  6491F                          // 2 Network control mode
  6492F  Uint16 CLK_PHASE : 1 ;
  6493F                       // 3 Clock phase select
  6494F  Uint16 OVERRUNINTENA : 1 ;
  6495F                           // 4 Overrun interrupt enable
  6496F  Uint16 rsvd : 11 ;
  6497F                   // 15:5 reserved
  6498F} ;
  6499F
  6500Funion SPICTL_REG
  6501F{
  6502F  Uint16 all ;
  6503F  struct SPICTL_BITS bit ;
  6504F} ;
  6505F//--------------------------------------
  6506F// SPI status register bit definitions:
  6507F//
  6508F//
  6509F
  6510Fstruct SPISTS_BITS
  6511F{                    // bits description
  6512F  Uint16 rsvd1 : 5 ;
  6513F                   // 4:0 reserved
  6514F  Uint16 BUFFULL_FLAG : 1 ;
  6515F                          // 5 SPI transmit buffer full flag
  6516F  Uint16 INT_FLAG : 1 ;
  6517F                      // 6 SPI interrupt flag
  6518F  Uint16 OVERRUN_FLAG : 1 ;
  6519F                          // 7 SPI reciever overrun flag
  6520F  Uint16 rsvd2 : 8 ;
  6521F                   // 15:8 reserved
  6522F} ;
  6523F
  6524Funion SPISTS_REG
  6525F{
  6526F  Uint16 all ;
  6527F  struct SPISTS_BITS bit ;
  6528F} ;
  6529F//------------------------------------------------
  6530F// SPI priority control register bit definitions:
  6531F//
  6532F//
  6533F
  6534Fstruct SPIPRI_BITS
  6535F{                    // bits description
  6536F  Uint16 rsvd1 : 4 ;
  6537F                   // 3:0 reserved
  6538F  Uint16 FREE : 1 ;
  6539F                  // 4 Free emulation mode control
  6540F  Uint16 SOFT : 1 ;
  6541F                  // 5 Soft emulation mode control
  6542F  Uint16 rsvd2 : 1 ;
  6543F                   // 6 reserved
  6544F  Uint16 rsvd3 : 9 ;
  6545F                   // 15:7 reserved
  6546F} ;
  6547F
  6548Funion SPIPRI_REG
  6549F{
  6550F  Uint16 all ;
  6551F  struct SPIPRI_BITS bit ;
  6552F} ;
  6553F//---------------------------------------------------------------------------
  6554F// SPI Register File:
  6555F//
  6556F
  6557Fstruct SPI_REGS
  6558F{
  6559F  union SPICCR_REG SPICCR ; // Configuration register
  6560F  union SPICTL_REG SPICTL ; // Operation control register
  6561F  union SPISTS_REG SPISTS ; // Status register
  6562F  Uint16 rsvd1 ; // reserved
  6563F  Uint16 SPIBRR ; // Baud Rate
  6564F  Uint16 rsvd2 ; // reserved
  6565F  Uint16 SPIRXEMU ; // Emulation buffer
  6566F  Uint16 SPIRXBUF ; // Serial input buffer
  6567F  Uint16 SPITXBUF ; // Serial output buffer
  6568F  Uint16 SPIDAT ; // Serial data
  6569F  union SPIFFTX_REG SPIFFTX ; // FIFO transmit register
  6570F  union SPIFFRX_REG SPIFFRX ; // FIFO recieve register
  6571F  union SPIFFCT_REG SPIFFCT ; // FIFO control register
  6572F  Uint16 rsvd3 [ 2 ] ;
  6573F                    // reserved
  6574F  union SPIPRI_REG SPIPRI ; // FIFO Priority control
  6575F} ;
  6576F//---------------------------------------------------------------------------
  6577F// SPI External References & Function Declarations:
  6578F//
  6579F
  6580Fextern volatile struct SPI_REGS
  6581F  SpiaRegs ;
  6582F       /* extern "C" */
  6583F       // end of DSP2833x_SPI_H definition
  6584F//===========================================================================
  6585F// End of file.
  6586F//===========================================================================
  6587F 
  6588F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Spi.h*/
  6589F/*   CLOSE_FILE Include File */
  6590F 
  6591F                // SPI Registers
  6592F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Sci.h */
  6593F// TI File $Revision: /main/2 $
  6594F// Checkin $Date: March 1, 2007 15:57:02 $
  6595F//###########################################################################
  6596F//
  6597F// FILE:        DSP2833x_Sci.h
  6598F//
  6599F// TITLE:       DSP2833x Device SCI Register Definitions.
  6600F//
  6601F//###########################################################################
  6602F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6603F// $Release Date: August 4, 2009 $
  6604F//###########################################################################
  6605F#ifndef DSP2833x_SCI_H
  6606F#define DSP2833x_SCI_H
  6607F//---------------------------------------------------------------------------
  6608F// SCI Individual Register Bit Definitions
  6609F//----------------------------------------------------------
  6610F// SCICCR communication control register bit definitions:
  6611F//
  6612F
  6613Fstruct SCICCR_BITS
  6614F{                    // bit description
  6615F  Uint16 SCICHAR : 3 ;
  6616F                     // 2:0 Character length control
  6617F  Uint16 ADDRIDLE_MODE : 1 ;
  6618F                           // 3 ADDR/IDLE Mode control
  6619F  Uint16 LOOPBKENA : 1 ;
  6620F                       // 4 Loop Back enable
  6621F  Uint16 PARITYENA : 1 ;
  6622F                       // 5 Parity enable
  6623F  Uint16 PARITY : 1 ;
  6624F                    // 6 Even or Odd Parity
  6625F  Uint16 STOPBITS : 1 ;
  6626F                      // 7 Number of Stop Bits
  6627F  Uint16 rsvd1 : 8 ;
  6628F                   // 15:8 reserved
  6629F} ;
  6630F
  6631Funion SCICCR_REG
  6632F{
  6633F  Uint16 all ;
  6634F  struct SCICCR_BITS bit ;
  6635F} ;
  6636F//-------------------------------------------
  6637F// SCICTL1 control register 1 bit definitions:
  6638F//
  6639F
  6640Fstruct SCICTL1_BITS
  6641F{                     // bit description
  6642F  Uint16 RXENA : 1 ;
  6643F                   // 0 SCI receiver enable
  6644F  Uint16 TXENA : 1 ;
  6645F                   // 1 SCI transmitter enable
  6646F  Uint16 SLEEP : 1 ;
  6647F                   // 2 SCI sleep
  6648F  Uint16 TXWAKE : 1 ;
  6649F                    // 3 Transmitter wakeup method
  6650F  Uint16 rsvd : 1 ;
  6651F                  // 4 reserved
  6652F  Uint16 SWRESET : 1 ;
  6653F                     // 5 Software reset
  6654F  Uint16 RXERRINTENA : 1 ;
  6655F                         // 6 Recieve interrupt enable
  6656F  Uint16 rsvd1 : 9 ;
  6657F                   // 15:7 reserved
  6658F} ;
  6659F
  6660Funion SCICTL1_REG
  6661F{
  6662F  Uint16 all ;
  6663F  struct SCICTL1_BITS bit ;
  6664F} ;
  6665F//---------------------------------------------
  6666F// SCICTL2 control register 2 bit definitions:
  6667F//
  6668F
  6669Fstruct SCICTL2_BITS
  6670F{                     // bit description
  6671F  Uint16 TXINTENA : 1 ;
  6672F                      // 0 Transmit interrupt enable
  6673F  Uint16 RXBKINTENA : 1 ;
  6674F                        // 1 Receiver-buffer break enable
  6675F  Uint16 rsvd : 4 ;
  6676F                  // 5:2 reserved
  6677F  Uint16 TXEMPTY : 1 ;
  6678F                     // 6 Transmitter empty flag
  6679F  Uint16 TXRDY : 1 ;
  6680F                   // 7 Transmitter ready flag
  6681F  Uint16 rsvd1 : 8 ;
  6682F                   // 15:8 reserved
  6683F} ;
  6684F
  6685Funion SCICTL2_REG
  6686F{
  6687F  Uint16 all ;
  6688F  struct SCICTL2_BITS bit ;
  6689F} ;
  6690F//---------------------------------------------------
  6691F// SCIRXST Receiver status register bit definitions:
  6692F//
  6693F
  6694Fstruct SCIRXST_BITS
  6695F{                     // bit description
  6696F  Uint16 rsvd : 1 ;
  6697F                  // 0 reserved
  6698F  Uint16 RXWAKE : 1 ;
  6699F                    // 1 Receiver wakeup detect flag
  6700F  Uint16 PE : 1 ;
  6701F                // 2 Parity error flag
  6702F  Uint16 OE : 1 ;
  6703F                // 3 Overrun error flag
  6704F  Uint16 FE : 1 ;
  6705F                // 4 Framing error flag
  6706F  Uint16 BRKDT : 1 ;
  6707F                   // 5 Break-detect flag
  6708F  Uint16 RXRDY : 1 ;
  6709F                   // 6 Receiver ready flag
  6710F  Uint16 RXERROR : 1 ;
  6711F                     // 7 Receiver error flag
  6712F} ;
  6713F
  6714Funion SCIRXST_REG
  6715F{
  6716F  Uint16 all ;
  6717F  struct SCIRXST_BITS bit ;
  6718F} ;
  6719F//----------------------------------------------------
  6720F// SCIRXBUF Receiver Data Buffer with FIFO bit definitions:
  6721F//
  6722F
  6723Fstruct SCIRXBUF_BITS
  6724F{                      // bits description
  6725F  Uint16 RXDT : 8 ;
  6726F                  // 7:0 Receive word
  6727F  Uint16 rsvd : 6 ;
  6728F                  // 13:8 reserved
  6729F  Uint16 SCIFFPE : 1 ;
  6730F                     // 14 SCI PE error in FIFO mode
  6731F  Uint16 SCIFFFE : 1 ;
  6732F                     // 15 SCI FE error in FIFO mode
  6733F} ;
  6734F
  6735Funion SCIRXBUF_REG
  6736F{
  6737F  Uint16 all ;
  6738F  struct SCIRXBUF_BITS bit ;
  6739F} ;
  6740F//--------------------------------------------------
  6741F// SCIPRI Priority control register bit definitions:
  6742F//
  6743F//
  6744F
  6745Fstruct SCIPRI_BITS
  6746F{                    // bit description
  6747F  Uint16 rsvd : 3 ;
  6748F                  // 2:0 reserved
  6749F  Uint16 FREE : 1 ;
  6750F                  // 3 Free emulation suspend mode
  6751F  Uint16 SOFT : 1 ;
  6752F                  // 4 Soft emulation suspend mode
  6753F  Uint16 rsvd1 : 3 ;
  6754F                   // 7:5 reserved
  6755F} ;
  6756F
  6757Funion SCIPRI_REG
  6758F{
  6759F  Uint16 all ;
  6760F  struct SCIPRI_BITS bit ;
  6761F} ;
  6762F//-------------------------------------------------
  6763F// SCI FIFO Transmit register bit definitions:
  6764F//
  6765F//
  6766F
  6767Fstruct SCIFFTX_BITS
  6768F{                     // bit description
  6769F  Uint16 TXFFIL : 5 ;
  6770F                    // 4:0 Interrupt level
  6771F  Uint16 TXFFIENA : 1 ;
  6772F                      // 5 Interrupt enable
  6773F  Uint16 TXFFINTCLR : 1 ;
  6774F                        // 6 Clear INT flag
  6775F  Uint16 TXFFINT : 1 ;
  6776F                     // 7 INT flag
  6777F  Uint16 TXFFST : 5 ;
  6778F                    // 12:8 FIFO status
  6779F  Uint16 TXFIFOXRESET : 1 ;
  6780F                          // 13 FIFO reset
  6781F  Uint16 SCIFFENA : 1 ;
  6782F                      // 14 Enhancement enable
  6783F  Uint16 SCIRST : 1 ;
  6784F                    // 15 SCI reset rx/tx channels
  6785F} ;
  6786F
  6787Funion SCIFFTX_REG
  6788F{
  6789F  Uint16 all ;
  6790F  struct SCIFFTX_BITS bit ;
  6791F} ;
  6792F//------------------------------------------------
  6793F// SCI FIFO recieve register bit definitions:
  6794F//
  6795F//
  6796F
  6797Fstruct SCIFFRX_BITS
  6798F{                     // bits description
  6799F  Uint16 RXFFIL : 5 ;
  6800F                    // 4:0 Interrupt level
  6801F  Uint16 RXFFIENA : 1 ;
  6802F                      // 5 Interrupt enable
  6803F  Uint16 RXFFINTCLR : 1 ;
  6804F                        // 6 Clear INT flag
  6805F  Uint16 RXFFINT : 1 ;
  6806F                     // 7 INT flag
  6807F  Uint16 RXFFST : 5 ;
  6808F                    // 12:8 FIFO status
  6809F  Uint16 RXFIFORESET : 1 ;
  6810F                         // 13 FIFO reset
  6811F  Uint16 RXFFOVRCLR : 1 ;
  6812F                        // 14 Clear overflow
  6813F  Uint16 RXFFOVF : 1 ;
  6814F                     // 15 FIFO overflow
  6815F} ;
  6816F
  6817Funion SCIFFRX_REG
  6818F{
  6819F  Uint16 all ;
  6820F  struct SCIFFRX_BITS bit ;
  6821F} ;
  6822F// SCI FIFO control register bit definitions:
  6823F
  6824Fstruct SCIFFCT_BITS
  6825F{                     // bits description
  6826F  Uint16 FFTXDLY : 8 ;
  6827F                     // 7:0 FIFO transmit delay
  6828F  Uint16 rsvd : 5 ;
  6829F                  // 12:8 reserved
  6830F  Uint16 CDC : 1 ;
  6831F                 // 13 Auto baud mode enable
  6832F  Uint16 ABDCLR : 1 ;
  6833F                    // 14 Auto baud clear
  6834F  Uint16 ABD : 1 ;
  6835F                 // 15 Auto baud detect
  6836F} ;
  6837F
  6838Funion SCIFFCT_REG
  6839F{
  6840F  Uint16 all ;
  6841F  struct SCIFFCT_BITS bit ;
  6842F} ;
  6843F//---------------------------------------------------------------------------
  6844F// SCI Register File:
  6845F//
  6846F
  6847Fstruct SCI_REGS
  6848F{
  6849F  union SCICCR_REG SCICCR ; // Communications control register
  6850F  union SCICTL1_REG SCICTL1 ; // Control register 1
  6851F  Uint16 SCIHBAUD ; // Baud rate (high) register
  6852F  Uint16 SCILBAUD ; // Baud rate (low) register
  6853F  union SCICTL2_REG SCICTL2 ; // Control register 2
  6854F  union SCIRXST_REG SCIRXST ; // Recieve status register
  6855F  Uint16 SCIRXEMU ; // Recieve emulation buffer register
  6856F  union SCIRXBUF_REG SCIRXBUF ; // Recieve data buffer
  6857F  Uint16 rsvd1 ; // reserved
  6858F  Uint16 SCITXBUF ; // Transmit data buffer
  6859F  union SCIFFTX_REG SCIFFTX ; // FIFO transmit register
  6860F  union SCIFFRX_REG SCIFFRX ; // FIFO recieve register
  6861F  union SCIFFCT_REG SCIFFCT ; // FIFO control register
  6862F  Uint16 rsvd2 ; // reserved
  6863F  Uint16 rsvd3 ; // reserved
  6864F  union SCIPRI_REG SCIPRI ; // FIFO Priority control
  6865F} ;
  6866F//---------------------------------------------------------------------------
  6867F// SCI External References & Function Declarations:
  6868F//
  6869F
  6870Fextern volatile struct SCI_REGS
  6871F  SciaRegs ;
  6872F
  6873Fextern volatile struct SCI_REGS
  6874F  ScibRegs ;
  6875F
  6876Fextern volatile struct SCI_REGS
  6877F  ScicRegs ;
  6878F       /* extern "C" */
  6879F       // end of DSP2833x_SCI_H definition
  6880F//===========================================================================
  6881F// End of file.
  6882F//===========================================================================
  6883F 
  6884F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Sci.h*/
  6885F/*   CLOSE_FILE Include File */
  6886F 
  6887F                // SCI Registers
  6888F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_SysCtrl.h */
  6889F// TI File $Revision: /main/5 $
  6890F// Checkin $Date: May 12, 2008 09:34:58 $
  6891F//###########################################################################
  6892F//
  6893F// FILE: DSP2833x_SysCtrl.h
  6894F//
  6895F// TITLE: DSP2833x Device System Control Register Definitions.
  6896F//
  6897F//###########################################################################
  6898F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6899F// $Release Date: August 4, 2009 $
  6900F//###########################################################################
  6901F#ifndef DSP2833x_SYS_CTRL_H
  6902F#define DSP2833x_SYS_CTRL_H
  6903F//---------------------------------------------------------------------------
  6904F// System Control Individual Register Bit Definitions:
  6905F//
  6906F// PLL Status Register
  6907F
  6908Ftypedef
  6909Fstruct PLLSTS_BITS
  6910F{                            // bits description
  6911F  Uint16 PLLLOCKS : 1 ;
  6912F                      // 0 PLL lock status
  6913F  Uint16 rsvd1 : 1 ;
  6914F                   // 1 reserved
  6915F  Uint16 PLLOFF : 1 ;
  6916F                    // 2 PLL off bit
  6917F  Uint16 MCLKSTS : 1 ;
  6918F                     // 3 Missing clock status bit
  6919F  Uint16 MCLKCLR : 1 ;
  6920F                     // 4 Missing clock clear bit
  6921F  Uint16 OSCOFF : 1 ;
  6922F                    // 5 Oscillator clock off
  6923F  Uint16 MCLKOFF : 1 ;
  6924F                     // 6 Missing clock detect
  6925F  Uint16 DIVSEL : 2 ;
  6926F                    // 7 Divide Select
  6927F  Uint16 rsvd2 : 7 ;
  6928F                   // 15:7 reserved
  6929F} PLLSTS_BITS ;
  6930F
  6931Ftypedef
  6932Funion PLLSTS_REG
  6933F{
  6934F  Uint16 all ;
  6935F  struct PLLSTS_BITS bit ;
  6936F} PLLSTS_REG ;
  6937F// High speed peripheral clock register bit definitions:
  6938F
  6939Ftypedef
  6940Fstruct HISPCP_BITS
  6941F{                            // bits description
  6942F  Uint16 HSPCLK : 3 ;
  6943F                    // 2:0 Rate relative to SYSCLKOUT
  6944F  Uint16 rsvd1 : 13 ;
  6945F                    // 15:3 reserved
  6946F} HISPCP_BITS ;
  6947F
  6948Ftypedef
  6949Funion HISPCP_REG
  6950F{
  6951F  Uint16 all ;
  6952F  struct HISPCP_BITS bit ;
  6953F} HISPCP_REG ;
  6954F// Low speed peripheral clock register bit definitions:
  6955F
  6956Ftypedef
  6957Fstruct LOSPCP_BITS
  6958F{                            // bits description
  6959F  Uint16 LSPCLK : 3 ;
  6960F                    // 2:0 Rate relative to SYSCLKOUT
  6961F  Uint16 rsvd1 : 13 ;
  6962F                    // 15:3 reserved
  6963F} LOSPCP_BITS ;
  6964F
  6965Ftypedef
  6966Funion LOSPCP_REG
  6967F{
  6968F  Uint16 all ;
  6969F  struct LOSPCP_BITS bit ;
  6970F} LOSPCP_REG ;
  6971F// Peripheral clock control register 0 bit definitions:
  6972F
  6973Ftypedef
  6974Fstruct PCLKCR0_BITS
  6975F{                             // bits description
  6976F  Uint16 rsvd1 : 2 ;
  6977F                   // 1:0 reserved
  6978F  Uint16 TBCLKSYNC : 1 ;
  6979F                       // 2 EWPM Module TBCLK enable/sync
  6980F  Uint16 ADCENCLK : 1 ;
  6981F                      // 3 Enable high speed clk to ADC
  6982F  Uint16 I2CAENCLK : 1 ;
  6983F                       // 4 Enable SYSCLKOUT to I2C-A
  6984F  Uint16 SCICENCLK : 1 ;
  6985F                       // 5 Enalbe low speed clk to SCI-C
  6986F  Uint16 rsvd2 : 2 ;
  6987F                   // 7:6 reserved
  6988F  Uint16 SPIAENCLK : 1 ;
  6989F                       // 8 Enable low speed clk to SPI-A
  6990F  Uint16 rsvd3 : 1 ;
  6991F                   // 9 reserved
  6992F  Uint16 SCIAENCLK : 1 ;
  6993F                       // 10 Enable low speed clk to SCI-A
  6994F  Uint16 SCIBENCLK : 1 ;
  6995F                       // 11 Enable low speed clk to SCI-B
  6996F  Uint16 MCBSPAENCLK : 1 ;
  6997F                         // 12 Enable low speed clk to McBSP-A
  6998F  Uint16 MCBSPBENCLK : 1 ;
  6999F                         // 13 Enable low speed clk to McBSP-B
  7000F  Uint16 ECANAENCLK : 1 ;
  7001F                        // 14 Enable system clk to eCAN-A
  7002F  Uint16 ECANBENCLK : 1 ;
  7003F                        // 15 Enable system clk to eCAN-B
  7004F} PCLKCR0_BITS ;
  7005F
  7006Ftypedef
  7007Funion PCLKCR0_REG
  7008F{
  7009F  Uint16 all ;
  7010F  struct PCLKCR0_BITS bit ;
  7011F} PCLKCR0_REG ;
  7012F// Peripheral clock control register 1 bit definitions:
  7013F
  7014Ftypedef
  7015Fstruct PCLKCR1_BITS
  7016F{                             // bits description
  7017F  Uint16 EPWM1ENCLK : 1 ;
  7018F                        // 0 Enable SYSCLKOUT to EPWM1
  7019F  Uint16 EPWM2ENCLK : 1 ;
  7020F                        // 1 Enable SYSCLKOUT to EPWM2
  7021F  Uint16 EPWM3ENCLK : 1 ;
  7022F                        // 2 Enable SYSCLKOUT to EPWM3
  7023F  Uint16 EPWM4ENCLK : 1 ;
  7024F                        // 3 Enable SYSCLKOUT to EPWM4
  7025F  Uint16 EPWM5ENCLK : 1 ;
  7026F                        // 4 Enable SYSCLKOUT to EPWM5
  7027F  Uint16 EPWM6ENCLK : 1 ;
  7028F                        // 5 Enable SYSCLKOUT to EPWM6
  7029F  Uint16 rsvd1 : 2 ;
  7030F                   // 7:6 reserved
  7031F  Uint16 ECAP1ENCLK : 1 ;
  7032F                        // 8 Enable SYSCLKOUT to ECAP1
  7033F  Uint16 ECAP2ENCLK : 1 ;
  7034F                        // 9 Enable SYSCLKOUT to ECAP2
  7035F  Uint16 ECAP3ENCLK : 1 ;
  7036F                        // 10 Enable SYSCLKOUT to ECAP3
  7037F  Uint16 ECAP4ENCLK : 1 ;
  7038F                        // 11 Enable SYSCLKOUT to ECAP4
  7039F  Uint16 ECAP5ENCLK : 1 ;
  7040F                        // 12 Enable SYSCLKOUT to ECAP5
  7041F  Uint16 ECAP6ENCLK : 1 ;
  7042F                        // 13 Enable SYSCLKOUT to ECAP6
  7043F  Uint16 EQEP1ENCLK : 1 ;
  7044F                        // 14 Enable SYSCLKOUT to EQEP1
  7045F  Uint16 EQEP2ENCLK : 1 ;
  7046F                        // 15 Enable SYSCLKOUT to EQEP2
  7047F} PCLKCR1_BITS ;
  7048F
  7049Ftypedef
  7050Funion PCLKCR1_REG
  7051F{
  7052F  Uint16 all ;
  7053F  struct PCLKCR1_BITS bit ;
  7054F} PCLKCR1_REG ;
  7055F// Peripheral clock control register 2 bit definitions:
  7056F
  7057Ftypedef
  7058Fstruct PCLKCR3_BITS
  7059F{                             // bits description
  7060F  Uint16 rsvd1 : 8 ;
  7061F                   // 7:0 reserved
  7062F  Uint16 CPUTIMER0ENCLK : 1 ;
  7063F                            // 8 Enable SYSCLKOUT to CPU-Timer 0
  7064F  Uint16 CPUTIMER1ENCLK : 1 ;
  7065F                            // 9 Enable SYSCLKOUT to CPU-Timer 1
  7066F  Uint16 CPUTIMER2ENCLK : 1 ;
  7067F                            // 10 Enable SYSCLKOUT to CPU-Timer 2
  7068F  Uint16 DMAENCLK : 1 ;
  7069F                      // 11 Enable the DMA clock
  7070F  Uint16 XINTFENCLK : 1 ;
  7071F                        // 12 Enable SYSCLKOUT to XINTF
  7072F  Uint16 GPIOINENCLK : 1 ;
  7073F                         // Enable GPIO input clock
  7074F  Uint16 rsvd2 : 2 ;
  7075F                   // 15:14 reserved
  7076F} PCLKCR3_BITS ;
  7077F
  7078Ftypedef
  7079Funion PCLKCR3_REG
  7080F{
  7081F  Uint16 all ;
  7082F  struct PCLKCR3_BITS bit ;
  7083F} PCLKCR3_REG ;
  7084F// PLL control register bit definitions:
  7085F
  7086Ftypedef
  7087Fstruct PLLCR_BITS
  7088F{                           // bits description
  7089F  Uint16 DIV : 4 ;
  7090F                 // 3:0 Set clock ratio for the PLL
  7091F  Uint16 rsvd1 : 12 ;
  7092F                    // 15:4 reserved
  7093F} PLLCR_BITS ;
  7094F
  7095Ftypedef
  7096Funion PLLCR_REG
  7097F{
  7098F  Uint16 all ;
  7099F  struct PLLCR_BITS bit ;
  7100F} PLLCR_REG ;
  7101F// Low Power Mode 0 control register bit definitions:
  7102F
  7103Ftypedef
  7104Fstruct LPMCR0_BITS
  7105F{                            // bits description
  7106F  Uint16 LPM : 2 ;
  7107F                 // 1:0 Set the low power mode
  7108F  Uint16 QUALSTDBY : 6 ;
  7109F                       // 7:2 Qualification
  7110F  Uint16 rsvd1 : 7 ;
  7111F                   // 14:8 reserved
  7112F  Uint16 WDINTE : 1 ;
  7113F                    // 15 Enables WD to wake the device from STANDBY
  7114F} LPMCR0_BITS ;
  7115F
  7116Ftypedef
  7117Funion LPMCR0_REG
  7118F{
  7119F  Uint16 all ;
  7120F  struct LPMCR0_BITS bit ;
  7121F} LPMCR0_REG ;
  7122F// Dual-mapping configuration register bit definitions:
  7123F
  7124Ftypedef
  7125Fstruct MAPCNF_BITS
  7126F{                            // bits description
  7127F  Uint16 MAPEPWM : 1 ;// 0 EPWM dual-map enable
  7128F  Uint16 rsvd1 : 15 ;// 15:1 reserved
  7129F} MAPCNF_BITS ;
  7130F
  7131Ftypedef
  7132Funion MAPCNF_REG
  7133F{
  7134F  Uint16 all ;
  7135F  struct MAPCNF_BITS bit ;
  7136F} MAPCNF_REG ;
  7137F//---------------------------------------------------------------------------
  7138F// System Control Register File:
  7139F//
  7140F
  7141Ftypedef
  7142Fstruct SYS_CTRL_REGS
  7143F{
  7144F  Uint16 rsvd1 ; // 0
  7145F  union PLLSTS_REG PLLSTS ; // 1
  7146F  Uint16 rsvd2 [ 8 ] ;
  7147F                    // 2-9
  7148F  union HISPCP_REG HISPCP ; // 10: High-speed peripheral clock pre-scaler
  7149F  union LOSPCP_REG LOSPCP ; // 11: Low-speed peripheral clock pre-scaler
  7150F  union PCLKCR0_REG PCLKCR0 ; // 12: Peripheral clock control register
  7151F  union PCLKCR1_REG PCLKCR1 ; // 13: Peripheral clock control register
  7152F  union LPMCR0_REG LPMCR0 ; // 14: Low-power mode control register 0
  7153F  Uint16 rsvd3 ; // 15: reserved
  7154F  union PCLKCR3_REG PCLKCR3 ; // 16: Peripheral clock control register
  7155F  union PLLCR_REG PLLCR ;
  7156F                          // 17: PLL control register
  7157F   // No bit definitions are defined for SCSR because
  7158F   // a read-modify-write instruction can clear the WDOVERRIDE bit
  7159F  Uint16 SCSR ; // 18: System control and status register
  7160F  Uint16 WDCNTR ; // 19: WD counter register
  7161F  Uint16 rsvd4 ; // 20
  7162F  Uint16 WDKEY ; // 21: WD reset key register
  7163F  Uint16 rsvd5 [ 3 ] ;
  7164F                    // 22-24
  7165F   // No bit definitions are defined for WDCR because
  7166F   // the proper value must be written to the WDCHK field
  7167F   // whenever writing to this register.
  7168F  Uint16 WDCR ; // 25: WD timer control register
  7169F  Uint16 rsvd6 [ 4 ] ;
  7170F                    // 26-29
  7171F  union MAPCNF_REG MAPCNF ; // 30: Dual-mapping configuration register
  7172F  Uint16 rsvd7 [ 1 ] ;
  7173F                    // 31
  7174F} SYS_CTRL_REGS ;
  7175F/* --------------------------------------------------- */
  7176F/* CSM Registers */
  7177F/* */
  7178F/* ----------------------------------------------------*/
  7179F/* CSM Status & Control register bit definitions */
  7180F
  7181Ftypedef
  7182Fstruct CSMSCR_BITS
  7183F{                            // bit description
  7184F  Uint16 SECURE : 1 ;
  7185F                    // 0 Secure flag
  7186F  Uint16 rsvd1 : 14 ;
  7187F                    // 14-1 reserved
  7188F  Uint16 FORCESEC : 1 ;
  7189F                      // 15 Force Secure control bit
  7190F} CSMSCR_BITS ;
  7191F/* Allow access to the bit fields or entire register */
  7192F
  7193Ftypedef
  7194Funion CSMSCR_REG
  7195F{
  7196F  Uint16 all ;
  7197F  struct CSMSCR_BITS bit ;
  7198F} CSMSCR_REG ;
  7199F/* CSM Register File */
  7200F
  7201Ftypedef
  7202Fstruct CSM_REGS
  7203F{
  7204F  Uint16 KEY0 ; // KEY reg bits 15-0
  7205F  Uint16 KEY1 ; // KEY reg bits 31-16
  7206F  Uint16 KEY2 ; // KEY reg bits 47-32
  7207F  Uint16 KEY3 ; // KEY reg bits 63-48
  7208F  Uint16 KEY4 ; // KEY reg bits 79-64
  7209F  Uint16 KEY5 ; // KEY reg bits 95-80
  7210F  Uint16 KEY6 ; // KEY reg bits 111-96
  7211F  Uint16 KEY7 ; // KEY reg bits 127-112
  7212F  Uint16 rsvd1 ; // reserved
  7213F  Uint16 rsvd2 ; // reserved
  7214F  Uint16 rsvd3 ; // reserved
  7215F  Uint16 rsvd4 ; // reserved
  7216F  Uint16 rsvd5 ; // reserved
  7217F  Uint16 rsvd6 ; // reserved
  7218F  Uint16 rsvd7 ; // reserved
  7219F  union CSMSCR_REG CSMSCR ; // CSM Status & Control register
  7220F} CSM_REGS ;
  7221F/* Password locations */
  7222F
  7223Ftypedef
  7224Fstruct CSM_PWL
  7225F{
  7226F  Uint16 PSWD0 ; // PSWD bits 15-0
  7227F  Uint16 PSWD1 ; // PSWD bits 31-16
  7228F  Uint16 PSWD2 ; // PSWD bits 47-32
  7229F  Uint16 PSWD3 ; // PSWD bits 63-48
  7230F  Uint16 PSWD4 ; // PSWD bits 79-64
  7231F  Uint16 PSWD5 ; // PSWD bits 95-80
  7232F  Uint16 PSWD6 ; // PSWD bits 111-96
  7233F  Uint16 PSWD7 ; // PSWD bits 127-112
  7234F} CSM_PWL ;
  7235F/* Flash Registers */
  7236F#define FLASH_SLEEP 0x0000 ;
  7237F#define FLASH_STANDBY 0x0001 ;
  7238F#define FLASH_ACTIVE 0x0003 ;
  7239F/* Flash Option Register bit definitions */
  7240F
  7241Ftypedef
  7242Fstruct FOPT_BITS
  7243F{                          // bit description
  7244F  Uint16 ENPIPE : 1 ;
  7245F                    // 0 Enable Pipeline Mode
  7246F  Uint16 rsvd : 15 ;
  7247F                   // 1-15 reserved
  7248F} FOPT_BITS ;
  7249F/* Allow access to the bit fields or entire register */
  7250F
  7251Ftypedef
  7252Funion FOPT_REG
  7253F{
  7254F  Uint16 all ;
  7255F  struct FOPT_BITS bit ;
  7256F} FOPT_REG ;
  7257F/* Flash Power Modes Register bit definitions */
  7258F
  7259Ftypedef
  7260Fstruct FPWR_BITS
  7261F{                          // bit description
  7262F  Uint16 PWR : 2 ;
  7263F                 // 0-1 Power Mode bits
  7264F  Uint16 rsvd : 14 ;
  7265F                   // 2-15 reserved
  7266F} FPWR_BITS ;
  7267F/* Allow access to the bit fields or entire register */
  7268F
  7269Ftypedef
  7270Funion FPWR_REG
  7271F{
  7272F  Uint16 all ;
  7273F  struct FPWR_BITS bit ;
  7274F} FPWR_REG ;
  7275F/* Flash Status Register bit definitions */
  7276F
  7277Ftypedef
  7278Fstruct FSTATUS_BITS
  7279F{                             // bit description
  7280F  Uint16 PWRS : 2 ;
  7281F                  // 0-1 Power Mode Status bits
  7282F  Uint16 STDBYWAITS : 1 ;
  7283F                        // 2 Bank/Pump Sleep to Standby Wait Counter Status bits
  7284F  Uint16 ACTIVEWAITS : 1 ;
  7285F                         // 3 Bank/Pump Standby to Active Wait Counter Status bits
  7286F  Uint16 rsvd1 : 4 ;
  7287F                   // 4-7 reserved
  7288F  Uint16 V3STAT : 1 ;
  7289F                    // 8 VDD3V Status Latch bit
  7290F  Uint16 rsvd2 : 7 ;
  7291F                   // 9-15 reserved
  7292F} FSTATUS_BITS ;
  7293F/* Allow access to the bit fields or entire register */
  7294F
  7295Ftypedef
  7296Funion FSTATUS_REG
  7297F{
  7298F  Uint16 all ;
  7299F  struct FSTATUS_BITS bit ;
  7300F} FSTATUS_REG ;
  7301F/* Flash Sleep to Standby Wait Counter Register bit definitions */
  7302F
  7303Ftypedef
  7304Fstruct FSTDBYWAIT_BITS
  7305F{                                // bit description
  7306F  Uint16 STDBYWAIT : 9 ;
  7307F                       // 0-8 Bank/Pump Sleep to Standby Wait Count bits
  7308F  Uint16 rsvd : 7 ;
  7309F                  // 9-15 reserved
  7310F} FSTDBYWAIT_BITS ;
  7311F/* Allow access to the bit fields or entire register */
  7312F
  7313Ftypedef
  7314Funion FSTDBYWAIT_REG
  7315F{
  7316F  Uint16 all ;
  7317F  struct FSTDBYWAIT_BITS bit ;
  7318F} FSTDBYWAIT_REG ;
  7319F/* Flash Standby to Active Wait Counter Register bit definitions */
  7320F
  7321Ftypedef
  7322Fstruct FACTIVEWAIT_BITS
  7323F{                                 // bit description
  7324F  Uint16 ACTIVEWAIT : 9 ;
  7325F                        // 0-8 Bank/Pump Standby to Active Wait Count bits
  7326F  Uint16 rsvd : 7 ;
  7327F                  // 9-15 reserved
  7328F} FACTIVEWAIT_BITS ;
  7329F/* Allow access to the bit fields or entire register */
  7330F
  7331Ftypedef
  7332Funion FACTIVEWAIT_REG
  7333F{
  7334F  Uint16 all ;
  7335F  struct FACTIVEWAIT_BITS bit ;
  7336F} FACTIVEWAIT_REG ;
  7337F/* Bank Read Access Wait State Register bit definitions */
  7338F
  7339Ftypedef
  7340Fstruct FBANKWAIT_BITS
  7341F{                               // bit description
  7342F  Uint16 RANDWAIT : 4 ;
  7343F                      // 0-3 Flash Random Read Wait State bits
  7344F  Uint16 rsvd1 : 4 ;
  7345F                   // 4-7 reserved
  7346F  Uint16 PAGEWAIT : 4 ;
  7347F                      // 8-11 Flash Paged Read Wait State bits
  7348F  Uint16 rsvd2 : 4 ;
  7349F                   // 12-15 reserved
  7350F} FBANKWAIT_BITS ;
  7351F/* Allow access to the bit fields or entire register */
  7352F
  7353Ftypedef
  7354Funion FBANKWAIT_REG
  7355F{
  7356F  Uint16 all ;
  7357F  struct FBANKWAIT_BITS bit ;
  7358F} FBANKWAIT_REG ;
  7359F/* OTP Read Access Wait State Register bit definitions */
  7360F
  7361Ftypedef
  7362Fstruct FOTPWAIT_BITS
  7363F{                              // bit description
  7364F  Uint16 OTPWAIT : 5 ;
  7365F                     // 0-4 OTP Read Wait State bits
  7366F  Uint16 rsvd : 11 ;
  7367F                   // 5-15 reserved
  7368F} FOTPWAIT_BITS ;
  7369F/* Allow access to the bit fields or entire register */
  7370F
  7371Ftypedef
  7372Funion FOTPWAIT_REG
  7373F{
  7374F  Uint16 all ;
  7375F  struct FOTPWAIT_BITS bit ;
  7376F} FOTPWAIT_REG ;
  7377F
  7378Ftypedef
  7379Fstruct FLASH_REGS
  7380F{
  7381F  union FOPT_REG FOPT ; // Option Register
  7382F  Uint16 rsvd1 ; // reserved
  7383F  union FPWR_REG FPWR ; // Power Modes Register
  7384F  union FSTATUS_REG FSTATUS ; // Status Register
  7385F  union FSTDBYWAIT_REG FSTDBYWAIT ; // Pump/Bank Sleep to Standby Wait State Register
  7386F  union FACTIVEWAIT_REG FACTIVEWAIT ; // Pump/Bank Standby to Active Wait State Register
  7387F  union FBANKWAIT_REG FBANKWAIT ; // Bank Read Access Wait State Register
  7388F  union FOTPWAIT_REG FOTPWAIT ; // OTP Read Access Wait State Register
  7389F} FLASH_REGS ;
  7390F//---------------------------------------------------------------------------
  7391F// System Control External References & Function Declarations:
  7392F//
  7393F
  7394Fextern volatile struct SYS_CTRL_REGS
  7395F  SysCtrlRegs ;
  7396F
  7397Fextern volatile struct CSM_REGS
  7398F  CsmRegs ;
  7399F
  7400Fextern volatile struct CSM_PWL
  7401F  CsmPwl ;
  7402F
  7403Fextern volatile struct FLASH_REGS
  7404F  FlashRegs ;
  7405F       // end of DSP2833x_SYS_CTRL_H definition
  7406F//===========================================================================
  7407F// End of file.
  7408F//===========================================================================
  7409F 
  7410F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_SysCtrl.h*/
  7411F/*   CLOSE_FILE Include File */
  7412F 
  7413F            // System Control/Power Modes
  7414F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_XIntrupt.h */
  7415F// TI File $Revision: /main/1 $
  7416F// Checkin $Date: August 18, 2006 13:52:39 $
  7417F//###########################################################################
  7418F//
  7419F// FILE: DSP2833x_XIntrupt.h
  7420F//
  7421F// TITLE: DSP2833x Device External Interrupt Register Definitions.
  7422F//
  7423F//###########################################################################
  7424F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  7425F// $Release Date: August 4, 2009 $
  7426F//###########################################################################
  7427F#ifndef DSP2833x_XINTRUPT_H
  7428F#define DSP2833x_XINTRUPT_H
  7429F//---------------------------------------------------------------------------
  7430F
  7431Fstruct XINTCR_BITS
  7432F{
  7433F  Uint16 ENABLE : 1 ;// 0 enable/disable
  7434F  Uint16 rsvd1 : 1 ;// 1 reserved
  7435F  Uint16 POLARITY : 2 ;// 3:2 pos/neg, both triggered
  7436F  Uint16 rsvd2 : 12 ;//15:4 reserved
  7437F} ;
  7438F
  7439Funion XINTCR_REG
  7440F{
  7441F  Uint16 all ;
  7442F  struct XINTCR_BITS bit ;
  7443F} ;
  7444F
  7445Fstruct XNMICR_BITS
  7446F{
  7447F  Uint16 ENABLE : 1 ;// 0 enable/disable
  7448F  Uint16 SELECT : 1 ;// 1 Timer 1 or XNMI connected to int13
  7449F  Uint16 POLARITY : 2 ;// 3:2 pos/neg, or both triggered
  7450F  Uint16 rsvd2 : 12 ;// 15:4 reserved
  7451F} ;
  7452F
  7453Funion XNMICR_REG
  7454F{
  7455F  Uint16 all ;
  7456F  struct XNMICR_BITS bit ;
  7457F} ;
  7458F//---------------------------------------------------------------------------
  7459F// External Interrupt Register File:
  7460F//
  7461F
  7462Fstruct XINTRUPT_REGS
  7463F{
  7464F  union XINTCR_REG XINT1CR ;
  7465F  union XINTCR_REG XINT2CR ;
  7466F  union XINTCR_REG XINT3CR ;
  7467F  union XINTCR_REG XINT4CR ;
  7468F  union XINTCR_REG XINT5CR ;
  7469F  union XINTCR_REG XINT6CR ;
  7470F  union XINTCR_REG XINT7CR ;
  7471F  union XNMICR_REG XNMICR ;
  7472F  Uint16 XINT1CTR ;
  7473F  Uint16 XINT2CTR ;
  7474F  Uint16 rsvd [ 5 ] ;
  7475F  Uint16 XNMICTR ;
  7476F} ;
  7477F//---------------------------------------------------------------------------
  7478F// External Interrupt References & Function Declarations:
  7479F//
  7480F
  7481Fextern volatile struct XINTRUPT_REGS
  7482F  XIntruptRegs ;
  7483F       /* extern "C" */
  7484F       // end of DSP2833x_XINTF_H definition
  7485F//===========================================================================
  7486F// End of file.
  7487F//===========================================================================
  7488F 
  7489F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_XIntrupt.h*/
  7490F/*   CLOSE_FILE Include File */
  7491F 
  7492F           // External Interrupts
  7493F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Xintf.h */
  7494F// TI File $Revision: /main/4 $
  7495F// Checkin $Date: July 27, 2009 13:57:25 $
  7496F//###########################################################################
  7497F//
  7498F// FILE: DSP2833x_Xintf.h
  7499F//
  7500F// TITLE: DSP2833x Device External Interface Register Definitions.
  7501F//
  7502F//###########################################################################
  7503F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  7504F// $Release Date: August 4, 2009 $
  7505F//###########################################################################
  7506F#ifndef DSP2833x_XINTF_H
  7507F#define DSP2833x_XINTF_H
  7508F// XINTF timing register bit definitions:
  7509F
  7510Fstruct XTIMING_BITS
  7511F{                     // bits description
  7512F  Uint16 XWRTRAIL : 2 ;
  7513F                      // 1:0 Write access trail timing
  7514F  Uint16 XWRACTIVE : 3 ;
  7515F                       // 4:2 Write access active timing
  7516F  Uint16 XWRLEAD : 2 ;
  7517F                     // 6:5 Write access lead timing
  7518F  Uint16 XRDTRAIL : 2 ;
  7519F                      // 8:7 Read access trail timing
  7520F  Uint16 XRDACTIVE : 3 ;
  7521F                       // 11:9 Read access active timing
  7522F  Uint16 XRDLEAD : 2 ;
  7523F                     // 13:12 Read access lead timing
  7524F  Uint16 USEREADY : 1 ;
  7525F                      // 14 Extend access using HW waitstates
  7526F  Uint16 READYMODE : 1 ;
  7527F                       // 15 Ready mode
  7528F  Uint16 XSIZE : 2 ;
  7529F                   // 17:16 XINTF bus width - must be written as 11b
  7530F  Uint16 rsvd1 : 4 ;
  7531F                   // 21:18 reserved
  7532F  Uint16 X2TIMING : 1 ;
  7533F                      // 22 Double lead/active/trail timing
  7534F  Uint16 rsvd3 : 9 ;
  7535F                   // 31:23 reserved
  7536F} ;
  7537F
  7538Funion XTIMING_REG
  7539F{
  7540F  Uint32 all ;
  7541F  struct XTIMING_BITS bit ;
  7542F} ;
  7543F// XINTF control register bit definitions:
  7544F
  7545Fstruct XINTCNF2_BITS
  7546F{                      // bits description
  7547F  Uint16 WRBUFF : 2 ;
  7548F                    // 1:0 Write buffer depth
  7549F  Uint16 CLKMODE : 1 ;
  7550F                     // 2 Ratio for XCLKOUT with respect to XTIMCLK
  7551F  Uint16 CLKOFF : 1 ;
  7552F                    // 3 Disable XCLKOUT
  7553F  Uint16 rsvd1 : 2 ;
  7554F                   // 5:4 reserved
  7555F  Uint16 WLEVEL : 2 ;
  7556F                    // 7:6 Current level of the write buffer
  7557F  Uint16 rsvd2 : 1 ;
  7558F                   // 8 reserved
  7559F  Uint16 HOLD : 1 ;
  7560F                  // 9 Hold enable/disable
  7561F  Uint16 HOLDS : 1 ;
  7562F                   // 10 Current state of HOLDn input
  7563F  Uint16 HOLDAS : 1 ;
  7564F                    // 11 Current state of HOLDAn output
  7565F  Uint16 rsvd3 : 4 ;
  7566F                   // 15:12 reserved
  7567F  Uint16 XTIMCLK : 3 ;
  7568F                     // 18:16 Ratio for XTIMCLK
  7569F  Uint16 rsvd4 : 13 ;
  7570F                    // 31:19 reserved
  7571F} ;
  7572F
  7573Funion XINTCNF2_REG
  7574F{
  7575F  Uint32 all ;
  7576F  struct XINTCNF2_BITS bit ;
  7577F} ;
  7578F// XINTF bank switching register bit definitions:
  7579F
  7580Fstruct XBANK_BITS
  7581F{                   // bits description
  7582F  Uint16 BANK : 3 ;
  7583F                  // 2:0 Zone for which banking is enabled
  7584F  Uint16 BCYC : 3 ;
  7585F                  // 5:3 XTIMCLK cycles to add
  7586F  Uint16 rsvd : 10 ;
  7587F                   // 15:6 reserved
  7588F} ;
  7589F
  7590Funion XBANK_REG
  7591F{
  7592F  Uint16 all ;
  7593F  struct XBANK_BITS bit ;
  7594F} ;
  7595F
  7596Fstruct XRESET_BITS
  7597F{
  7598F  Uint16 XHARDRESET : 1 ;
  7599F  Uint16 rsvd1 : 15 ;
  7600F} ;
  7601F
  7602Funion XRESET_REG
  7603F{
  7604F  Uint16 all ;
  7605F  struct XRESET_BITS bit ;
  7606F} ;
  7607F//---------------------------------------------------------------------------
  7608F// XINTF Register File:
  7609F//
  7610F
  7611Fstruct XINTF_REGS
  7612F{
  7613F  union XTIMING_REG XTIMING0 ;
  7614F  Uint32 rsvd1 [ 5 ] ;
  7615F  union XTIMING_REG XTIMING6 ;
  7616F  union XTIMING_REG XTIMING7 ;
  7617F  Uint32 rsvd2 [ 2 ] ;
  7618F  union XINTCNF2_REG XINTCNF2 ;
  7619F  Uint32 rsvd3 ;
  7620F  union XBANK_REG XBANK ;
  7621F  Uint16 rsvd4 ;
  7622F  Uint16 XREVISION ;
  7623F  Uint16 rsvd5 [ 2 ] ;
  7624F  union XRESET_REG XRESET ;
  7625F} ;
  7626F//---------------------------------------------------------------------------
  7627F// XINTF External References & Function Declarations:
  7628F//
  7629F
  7630Fextern volatile struct XINTF_REGS
  7631F  XintfRegs ;
  7632F       /* extern "C" */
  7633F       // end of DSP2833x_XINTF_H definition
  7634F//===========================================================================
  7635F// No more.
  7636F//===========================================================================
  7637F 
  7638F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Xintf.h*/
  7639F/*   CLOSE_FILE Include File */
  7640F 
  7641F              // XINTF External Interface
  7642F#define DSP28_EPWM1 1
  7643F#define DSP28_EPWM2 1
  7644F#define DSP28_EPWM3 1
  7645F#define DSP28_EPWM4 1
  7646F#define DSP28_EPWM5 1
  7647F#define DSP28_EPWM6 1
  7648F#define DSP28_ECAP1 1
  7649F#define DSP28_ECAP2 1
  7650F#define DSP28_ECAP3 1
  7651F#define DSP28_ECAP4 1
  7652F#define DSP28_ECAP5 1
  7653F#define DSP28_ECAP6 1
  7654F#define DSP28_EQEP1 1
  7655F#define DSP28_EQEP2 1
  7656F#define DSP28_ECANA 1
  7657F#define DSP28_ECANB 1
  7658F#define DSP28_MCBSPA 1
  7659F#define DSP28_MCBSPB 1
  7660F#define DSP28_SPIA 1
  7661F#define DSP28_SCIA 1
  7662F#define DSP28_SCIB 1
  7663F#define DSP28_SCIC 1
  7664F#define DSP28_I2CA 1
  7665F       // end DSP28_28335
  7666F       // end DSP28_28334
  7667F       // end DSP28_28332
  7668F       /* extern "C" */
  7669F       // end of DSP2833x_DEVICE_H definition
  7670F//===========================================================================
  7671F// End of file.
  7672F//===========================================================================
  7673F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Device.h*/
  7674F/*   CLOSE_FILE Include File */
  7675F 
  7676F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\Application_Control_Variables.h */
  7677F#ifndef APPLICATION_CONTROL_VARIABLES_H
  7678F#define APPLICATION_CONTROL_VARIABLES_H
  7679F/* LDRA REMOVE #include "DSP2833x_Device.h" */
  7680F#define ___SPI_8BITS
  7681F//#define ___SPI_16BITS
  7682F//extern char *SCI_TX_Message;
  7683F//extern char SciTxQtd;  // quantity to be send
  7684F//extern char SciTxStatus;
  7685F//
  7686F//extern char *SPI_TX_Message_C;
  7687F//#ifdef ___SPI_8BITS
  7688F//extern char SPI_RX_Message[16];
  7689F//#endif
  7690F//#ifdef ___SPI_16BITS
  7691F//extern Uint16 *SPI_TX_Message_W;
  7692F//extern Uint16 SPI_RX_Message[16];
  7693F//#endif
  7694F//extern int SpiTxQtd;
  7695F//extern char SpiTxStatus;
  7696F//
  7697F//extern char line[80];
  7698F//extern char gps_in[200];
  7699F//extern char gps_in_index;
  7700F//extern char gps_in_flag;
  7701F//extern int GpsMessageReady;
  7702F//extern char NewGpsMessage;
  7703F//extern Uint32 idMessage;
  7704F//extern struct gps_data_translated gps_dat;
  7705F//
  7706F//extern char SPI_received_ok;   // It's warn when one message is received by SPI
  7707F////extern char gtx_msg_ind_in;  // Variable to index Gumstix_Message_in
  7708F////extern char gtx_msg_ind_out;         // Variable to index Gumstix_Message_out
  7709F////extern char Gumstix_Message_in[80];
  7710F////extern char Gumstix_Message_out[80];
  7711F//
  7712F//extern Uint32 Timer0_count_before, Timer0_count_after, diff;   // Timer0 counter
  7713F////extern char internal_timing;        // 0: external timing - GPS
  7714F//
  7715F//extern unsigned char I2CRead_flag;     // 1: internal timing - DSP
  7716F       // APPLICATION_CONTROL_VARIABLES_H
  7717F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\Application_Control_Variables.h*/
  7718F/*   CLOSE_FILE Include File */
  7719F 
  7720F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_gps.h */
  7721F/******************************************************************************
  7722F* FILENAME:
  7723F*
  7724F* DESCRIPTION:
  7725F* Function prototypes of ...
  7726F*
  7727F* FUNCTIONS:
  7728F* void xxx
  7729F* void xxx
  7730F*
  7731F* VERSION DATE WHO DETAIL
  7732F* 1.0 05 Set 2011 Rogerio Lima Start-up coding.
  7733F* Plínio Pereira
  7734F* -----------------------------------------------------------------------------
  7735F* 2.0 30 Aug 2014 Rogerio Lima Improving code quality rewriting the
  7736F* code and correcting errors.
  7737F******************************************************************************/
  7738F#ifndef DSP_GPS_H
  7739F#define DSP_GPS_H
  7740F#include <stdlib.h>
  7741F#include <string.h>
  7742F#include <stdio.h>
  7743F#define NULL 0
  7744F
  7745Ftypedef
  7746F  struct
  7747F  {
  7748F    int lat_deg ;
  7749F    double lat_min ;
  7750F    uint8_t lat_sector ;
  7751F    int lon_deg ;
  7752F    double lon_min ;
  7753F    uint8_t lon_sector ;
  7754F    double altitude ;
  7755F    double speed ;
  7756F    uint8_t speed_unit ;
  7757F    double course ;
  7758F    uint8_t course_type ;
  7759F    uint8_t hour ;
  7760F    uint8_t min ;
  7761F    float sec ;
  7762F    uint8_t position_fix_status ;
  7763F    uint8_t nosv ;
  7764F    float hdop ;
  7765F    int gps_new_message ;
  7766F  } gps_data_buffer_t ;
  7767F
  7768Ftypedef
  7769F  enum
  7770F  {
  7771F    GGA ,
  7772F    GSA ,
  7773F    GSV ,
  7774F    RMC ,
  7775F    VTG ,
  7776F    GLL ,
  7777F    ZDA
  7778F  } NMEA_type_t ;
  7779F// PROTOTYPES
  7780F
  7781Fuint8_t
  7782T  get_line (
  7783F  uint8_t * line ,
  7784F  uint8_t * msg_in ) ;
  7785F
  7786Fvoid
  7787T  translate_msg (
  7788F  uint8_t * line ,
  7789F  gps_data_buffer_t * gps_data ) ;
  7790F
  7791FNMEA_type_t
  7792T  get_NMEA_type (
  7793F  uint8_t * str ) ;
  7794F
  7795Fvoid
  7796T  translate_GGA (
  7797F  uint8_t * line ,
  7798F  gps_data_buffer_t * gps_data ) ;
  7799F
  7800Fvoid
  7801T  translate_GLL (
  7802F  uint8_t * line ,
  7803F  gps_data_buffer_t * gps_data ) ;
  7804F
  7805Fvoid
  7806T  translate_VTG (
  7807F  uint8_t * line ,
  7808F  gps_data_buffer_t * gps_data ) ;
  7809F
  7810Fvoid
  7811T  translate_GSA (
  7812F  uint8_t * line ,
  7813F  gps_data_buffer_t * gps_data ) ;
  7814F
  7815Fvoid
  7816T  translate_GSV (
  7817F  uint8_t * line ,
  7818F  gps_data_buffer_t * gps_data ) ;
  7819F
  7820Fvoid
  7821T  translate_RMC (
  7822F  uint8_t * line ,
  7823F  gps_data_buffer_t * gps_data ) ;
  7824F
  7825Fvoid
  7826T  translate_ZDA (
  7827F  uint8_t * line ,
  7828F  gps_data_buffer_t * gps_data ) ;
  7829F
  7830Fvoid
  7831T  print_serial_gps (
  7832F  gps_data_buffer_t * gps_data ) ;
  7833F
  7834Fvoid
  7835T  strcpy_len (
  7836F  uint8_t * destination ,
  7837F  uint8_t * source ,
  7838F  unsigned start ,
  7839F  unsigned lenght ) ;
  7840F
  7841Fdouble
  7842T  CvtStF (
  7843F  uint8_t * str ) ;
  7844F
  7845Fint
  7846T  str_split (
  7847F  uint8_t * str ,
  7848F  int start ,
  7849F  uint8_t c ,
  7850F  uint8_t * flag ) ;
  7851F
  7852Fuint8_t
  7853T  Process_GPS (
  7854F  gps_data_buffer_t * gps_dat ) ;
  7855F
  7856Fvoid
  7857F  Init_GPS() ;
  7858F
  7859Fuint8_t
  7860F  Read_Byte_RS232() ;
  7861F
  7862Fvoid
  7863T  Transmit_Byte_RS232 (
  7864F  uint8_t * byte ) ;
  7865F
  7866Fvoid
  7867T  Wait_for_uint8_t_RS232 (
  7868F  uint8_t c ) ;
  7869F// Read one messange until a new line is fouded.
  7870F
  7871Fint
  7872T  RS232_gets (
  7873F  uint8_t * line ,
  7874F  int max ) ;
  7875F       // GPS_H
  7876F 
  7877F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_gps.h*/
  7878F/*   CLOSE_FILE Include File */
  7879F 
  7880F
  7881Fuint8_t
  7882F  I2CRead_flag ;
  7883F
  7884Fuint8_t
  7885F  gtx_msg_ind_in = 0U ;      // Variable to index Gumstix_Message_in
  7886F
  7887Fuint8_t
  7888F  gtx_msg_ind_out = 0U ;      // Variable to index Gumstix_Message_out
  7889F
  7890Fextern uint8_t
  7891F  gps_in_index ;             // Variable to index gps_in
  7892F
  7893Fuint8_t
  7894F  GpsMessageReady = 0U ;
  7895F
  7896Fuint8_t
  7897F  g_internal_timing = 0U ;
  7898F                                /* 0: external timing - GPS
  7899F * 1: internal timing - DSP */
  7900F// ***********************************************************************
  7901F// SCI-A Transmit Interrupt Service
  7902T  interrupt void
  7903T  SCIA_TX_isr ( void )
  7904F  {
  7905F    extern uint8_t
  7906F      gps_in_flag ;
  7907F    extern uint8_t *
  7908F      SCI_TX_Message ;
  7909F    extern uint8_t
  7910F      SciTxQtd ;
  7911F    extern uint8_t
  7912F      SciTxStatus ;
  7913F// copy 16 character into SCI-A TX buffer
  7914F      // do while Tx buffer is not full
  7915T    while
  7916T      (
  7917T      (
  7918T      SciaRegs.SCIFFTX.bit.TXFFST != 16U
  7919T      )
  7920T      &&
  7921T      ( SciTxStatus == 'b'
  7922T      )
  7923T      )
  7924T      {
  7925T        if
  7926T          (
  7927T          SciTxQtd != 0U
  7928T          )
  7929T          {
  7930T            SciaRegs.SCITXBUF = *SCI_TX_Message ++ ;
  7931T            SciTxQtd -- ;
  7932T          }
  7933T        else
  7934T          {
  7935T            SciTxStatus = 'f'  ;
  7936F            // It's needed to disable interrupt cus whenever isen't have data to send interrupt will be assert
  7937T            SciaRegs.SCIFFTX.bit.TXFFIENA = 0U ;
  7938T          }
  7939T      }
  7940F    // reset this interrupt request
  7941T    SciaRegs.SCIFFTX.all |= 0x40U ;
  7942F    //Reenable interrupt from group 9
  7943T    PieCtrlRegs.PIEACK.all = 0x0100 ;
  7944T  }
  7945F// SCI-A Receive Interrupt Service
  7946F
  7947Finterrupt void
  7948T  SCIA_RX_isr ( void )
  7949F  {
  7950F    extern uint8_t
  7951F      gps_in [ 200 ] ;
  7952F    extern uint8_t
  7953F      gps_in_flag ;
  7954F    uint16_t
  7955F      i ;
  7956F    // Whenever the RXFIFO generates an interrupt (16 bytes received), the Timer1 counter will be reset
  7957F    // until the moment GPS terminates to send message and remaining data are lower than 16 bytes, that is
  7958F    // not sufficient to generates a new interrupt by RXFIFO. So, in such a case, the Timer1 counter are
  7959F    // not reset and an interrupt is generated by Timer1, serviced by its isr.
  7960T    CpuTimer1Regs.TIM.all = 0x00000000U ;
  7961F    // Starts Timer1 counter only if the previous interrupt comes from the last GPS message
  7962T    if
  7963T      (
  7964T      gps_in_flag == 1U
  7965T      )
  7966T      {
  7967T        CpuTimer1Regs.TCR.bit.TSS = 0 ;
  7968T        gps_in_flag = 0U ;
  7969T      }
  7970T    for
  7971T      (
  7972T      i = 0U
  7973T      ;
  7974T      i < 16U
  7975T      ;
  7976T      i ++
  7977T      )
  7978T      {
  7979T        gps_in [ gps_in_index ++ ] = SciaRegs.SCIRXBUF.bit.RXDT ;
  7980T      }
  7981T    SciaRegs.SCIFFRX.bit.RXFIFORESET = 0U ;// reset RX-FIFO pointer
  7982T    SciaRegs.SCIFFRX.bit.RXFIFORESET = 1U ;// enable RX-operation
  7983T    SciaRegs.SCIFFRX.bit.RXFFINTCLR = 1U ;// clear RX-FIFO INT Flag
  7984F    //Reenable interrupt from group 9
  7985T    PieCtrlRegs.PIEACK.all = 0x0100 ;
  7986T  }
  7987F//===========================================================================
  7988F// SPI Tx Interrupt Service
  7989F// Send data formated in 8 or 16 bits
  7990F
  7991Finterrupt void
  7992T  SPI_TxFifoIsr ( void )
  7993F  {
  7994F    Uint16
  7995F      i ;
  7996T    for
  7997T      (
  7998T      i = 0U
  7999T      ;
  8000T      i < 8U
  8001T      ;
  8002T      i ++
  8003T      )
  8004T      {
  8005F// GpioDataRegs.GPATOGGLE.bit.GPIO6 = 1U;
  8006F// SpiaRegs.SPITXBUF = Gumstix_Message_in[gtx_msg_ind_out++] << 8U;//(SPI_RX_Message[i] << 8) & 0xFF00;// 0xAAAA;//(i & 0x00FF) << 8;// & 0x00FF; // Write data
  8007F        /* SpiaRegs.SPITXBUF = (Gumstix_Message_out[gtx_msg_ind_out] << 8U) & 0xFF00U; */
  8008F        /* SpiaRegs.SPITXBUF = Gumstix_Message_out[gtx_msg_ind_out++] & 0xFF00U; */
  8009T      }
  8010T    SpiaRegs.SPIFFTX.bit.TXFFINTCLR = 1 ;
  8011F                                       // clear Interrupt flag (TXFFINT)
  8012T    PieCtrlRegs.PIEACK.all = 0x0020 ;       // Issue PIE ack Old value: |=0x20
  8013T  }
  8014F//===========================================================================
  8015F// SPI Rx Interrupt Service
  8016F// Just read data formated in 16 bits
  8017F// ---------
  8018F// Para fins de testes, o Gumstix está enviando em hexa:
  8019F// [69 00 00 00 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05]
  8020F
  8021Finterrupt void
  8022T  SPI_RxFifoIsr ( void )
  8023F  {
  8024F// Original code
  8025F    Uint16
  8026F      i ;
  8027F    uint8_t
  8028F      SPI_RX_Message [ 16 ] ;
  8029F    uint8_t
  8030F      SPI_received_ok ;
  8031F    // RX FIFO full
  8032T    if
  8033T      (
  8034T      SpiaRegs.SPIFFRX.bit.RXFFINT
  8035T      )
  8036T      {
  8037T        for
  8038T          (
  8039T          i = 0U
  8040T          ;
  8041T          i < 16U
  8042T          ;
  8043T          i ++
  8044T          )
  8045T          {
  8046T            SPI_RX_Message [ i ] = SpiaRegs.SPIRXBUF & 0x00FFU ;
  8047F                                                             // read data masking 8 bits left
  8048F            /* Gumstix_Message_in[gtx_msg_ind_in++] = SPI_RX_Message[i]; */
  8049T          }
  8050T        SPI_received_ok = 0U ;
  8051F// SpiaRegs.SPIFFTX.bit.TXFIFO = 0U;
  8052F// SpiaRegs.SPIFFTX.bit.TXFIFO = 1U;
  8053F// }
  8054T        SpiaRegs.SPIFFRX.bit.RXFIFORESET = 0U ;
  8055F                                           // reset RX FIFO (pointer to 0)
  8056T        SpiaRegs.SPIFFRX.bit.RXFIFORESET = 1U ;
  8057F                                           // re-enable RX FIFO operation
  8058T        SpiaRegs.SPIFFRX.bit.RXFFINTCLR = 1U ;
  8059F                                          // clear Interrupt flag
  8060T      }
  8061F      // end-if FIFO full
  8062F      // RX FIFO overflow
  8063T    if
  8064T      (
  8065T      SpiaRegs.SPIFFRX.bit.RXFFOVF
  8066T      )
  8067T      {
  8068T        SPI_RX_Message [ 0 ] = 0xFFFFU ;
  8069F                                     // first value is not valid.
  8070T        for
  8071T          (
  8072T          i = 1U
  8073T          ;
  8074T          i < 16U
  8075T          ;
  8076T          i ++
  8077T          )
  8078T          {
  8079T            SPI_RX_Message [ i ] = SpiaRegs.SPIRXBUF & 0x00FFU ;// read data masking 8 bits left.
  8080F            //SPI_FIFO_overflow++;
  8081T          }
  8082T        SpiaRegs.SPIFFRX.bit.RXFFINTCLR = 1U ;// clear Interrupt flag
  8083T        SpiaRegs.SPIFFRX.bit.RXFIFORESET = 0U ;// reset RX FIFO (pointer to 0)
  8084T        SpiaRegs.SPIFFRX.bit.RXFIFORESET = 1U ;// re-enable RX FIFO operation
  8085T        SpiaRegs.SPIFFRX.bit.RXFFOVFCLR = 1U ;// clear RXFFOVF (overflow flag)
  8086T      }
  8087F      // end-if RX FIFO overflow
  8088F      // SPI without FIFO
  8089T    if
  8090T      (
  8091T      SpiaRegs.SPISTS.bit.INT_FLAG
  8092T      )
  8093T      {
  8094T        while
  8095T          (
  8096T          SpiaRegs.SPISTS.bit.INT_FLAG != 1U
  8097T          )
  8098T          {
  8099T          }
  8100T        SPI_RX_Message [ 0 ] = SpiaRegs.SPIRXBUF & 0xFFU ;
  8101F                                                      //read
  8102T        SpiaRegs.SPITXBUF = 0xCA00U ;
  8103F                                    //write
  8104T        while
  8105T          (
  8106T          SpiaRegs.SPISTS.bit.INT_FLAG != 1U
  8107T          )
  8108T          {
  8109T          }
  8110T        SPI_RX_Message [ 1 ] = SpiaRegs.SPIRXBUF & 0xFFU ;
  8111F                                                      //read
  8112F// SPI_RX_Message[0] = SpiaRegs.SPIRXBUF & 0x00FFU; // read data masking 8 bits left.
  8113F// while(SpiaRegs.SPISTS.bit.BUFFULL_FLAG == 1U);
  8114F// SpiaRegs.SPITXBUF = SPI_RX_Message[0] << 8U;
  8115F// SpiaRegs.SPISTS.bit.BUFFULL_FLAG = 1U;
  8116T      }
  8117T    SpiaRegs.SPIFFTX.bit.TXFFIENA = 1U ;// do not enable TX FIFO interrupt, until there is something to send -- enable interrupt on TX FIFO match
  8118T    PieCtrlRegs.PIEACK.all = 0x0020 ;       // Issue PIE ack Old value: 0x20
  8119T  }
  8120F//===========================================================================
  8121F// SPI-CS Interrupt Service
  8122F// ------------------------
  8123F// Configures RX- and TX-FIFO when SPI transfer initiates and terminates.
  8124F
  8125Finterrupt void
  8126T  spi_cs_isr()
  8127F  {
  8128F    uint8_t
  8129F      SPI_received_ok ;
  8130F    uint16_t
  8131F      i ;
  8132F    uint16_t
  8133F      cs ;
  8134F    uint16_t
  8135F      len ;
  8136T    len = SpiaRegs.SPIFFRX.bit.RXFFST ;
  8137T    cs = GpioDataRegs.GPADAT.bit.GPIO19 ;// cs=0: transfer | cs=1: halt
  8138T    if
  8139T      (
  8140T      cs
  8141T      )
  8142T      {
  8143F      // end of communication
  8144F        // check if there is any byte in the TXFIFO, if does, read them...
  8145T        if
  8146T          (
  8147T          len != 0U
  8148T          )
  8149T          {
  8150T            for
  8151T              (
  8152T              i = 0U
  8153T              ;
  8154T              i < len
  8155T              ;
  8156T              i ++
  8157T              )
  8158T              {
  8159F                /* Gumstix_Message_in[gtx_msg_ind_in++] = SpiaRegs.SPIRXBUF & 0x00FFU; */ // read data masking 8 bits left
  8160T              }
  8161T          }
  8162T        gtx_msg_ind_out = 0U ;
  8163T        SPI_received_ok = 1U ;
  8164T        SpiaRegs.SPIFFRX.bit.RXFIFORESET = 0U ;// reset RX FIFO (pointer to 0)
  8165T        SpiaRegs.SPIFFRX.bit.RXFIFORESET = 1U ;
  8166T      }
  8167T    else
  8168T      {
  8169F      // start of communication
  8170T        gtx_msg_ind_in = 0U ;
  8171T        SpiaRegs.SPIFFTX.bit.TXFIFO = 0U ;// reset TX FIFO (pointer to 0)
  8172T        SpiaRegs.SPIFFTX.bit.TXFIFO = 1U ;
  8173F// SpiaRegs.SPIFFRX.bit.RXFIFORESET = 0U; // reset RX FIFO (pointer to 0)
  8174F// SpiaRegs.SPIFFRX.bit.RXFIFORESET = 1U; // re-enable RX FIFO operation
  8175T      }
  8176T    PieCtrlRegs.PIEACK.all = 0x0001 ;
  8177T  }
  8178F
  8179Finterrupt void
  8180T  timing_isr()
  8181F  {
  8182F    // Ler o registrador do contador
  8183F    //Timer0_count_before = CpuTimer0Regs.TIM.all;
  8184F    // Seta o flag de varredura dos sensores I2C quando da temporização
  8185F    // externa, feita pelo sinal TIMEPULSE2 do GPS u-blox LEA-6T.
  8186T    I2CRead_flag = 1U ;
  8187T    if
  8188T      (
  8189T      g_internal_timing
  8190T      )
  8191T      {
  8192F        // Desabilita a interrupção do ePWM responsável pela temporização interna (DSP)
  8193T        EPwm1Regs.ETSEL.bit.INTEN = 0U ;// interrupt disable for ePWM1
  8194T        g_internal_timing = 0U ;
  8195T      }
  8196F    // Incluir aqui o comando para zerar o contador do Timer0
  8197F    // Zera o Timer0 - Neste momento, as interrupções de temporização estão sendo feitas
  8198F    // pelo sinal timepulse vindo do GPS à cada 20 ms (1/50). Se o timepulse não vier,
  8199F    // esta ISR não será chamada, e consequentemente, a ISR do Timer0 irá entrar em ação,
  8200F    // pois ela tem período de 20,1 ms.
  8201T    CpuTimer0Regs.TIM.all = 0U ;
  8202F    // Alterna o estado do pino de saída GPIO6
  8203F// GpioDataRegs.GPATOGGLE.bit.GPIO6 = 1U;
  8204T    PieCtrlRegs.PIEACK.all = 0x0001 ;
  8205T  }
  8206F
  8207Finterrupt void
  8208T  ePWM1A_compare_isr ( void )
  8209F// ISR runs every 20 ms (PWM-frequency = 50 Hz)
  8210F// and is triggered by ePWM1 compare event
  8211F// run - time of ISR is 630 ns
  8212F  {
  8213F    // Seta o flag de varredura dos sensores I2C quando da temporização
  8214F    // interna, feita pelo próprio DSP.
  8215T    I2CRead_flag = 1U ;
  8216F    // Alterna o estado do pino de saída GPIO6
  8217F    //GpioDataRegs.GPATOGGLE.bit.GPIO6 = 1U;
  8218F    // Zera o Timer0 - Neste momento, as interrupções de temporização estão sendo feitas
  8219F    // pelo ePWM à 50 Hz. Resetando o Timer0 a cada 20 ms (1/50), impede-o de gerar
  8220F    // interrupção de timeout pela ausência do sinal Timepulse vinda do GPS.
  8221T    CpuTimer0Regs.TIM.all = 0x00000000U ;
  8222F    // Timing done internally
  8223T    g_internal_timing = 1U ;
  8224F       // Service watchdog every interrupt
  8225Fasm (" EALLOW")
  8226F;
  8227T    SysCtrlRegs.WDKEY = 0xAAU ;// Service watchdog #2
  8228Fasm (" EDIS")
  8229F;
  8230T    EPwm1Regs.ETCLR.bit.INT = 1U ;// Clear ePWM1 Interrupt flag
  8231F       // Acknowledge this interrupt to receive more interrupts from group 3 of 12
  8232T    PieCtrlRegs.PIEACK.all = 0x0004 ;
  8233T  }
  8234F
  8235Finterrupt void
  8236T  cpu_timer0_isr ( void )
  8237F  {
  8238T    CpuTimer0.InterruptCount ++ ;
  8239F    // Timing done internally
  8240T    g_internal_timing = 1U ;
  8241F    // Reset ePWM1 counter
  8242T    EPwm1Regs.TBCTR = 0U ;
  8243F    // If timeout (t > 20,1 ms) ocurred, a Timer0 interrupt is triggered and
  8244F    // the timing is done internally by ePWM1.
  8245T    EPwm1Regs.ETSEL.bit.INTEN = 1U ;// interrupt enable for ePWM1
  8246Fasm (" EALLOW")
  8247F;
  8248T    SysCtrlRegs.WDKEY = 0xAAU ;// service WD #2
  8249Fasm (" EDIS")
  8250F;
  8251T    PieCtrlRegs.PIEACK.all = 0x0001 ;
  8252T  }
  8253F
  8254Finterrupt void
  8255T  cpu_timer1_isr ( void )
  8256F  {
  8257F    extern uint8_t
  8258F      gps_in_flag ;
  8259F    extern uint8_t
  8260F      gps_in_index ;
  8261F    extern uint8_t
  8262F      gps_in [ 200 ] ;
  8263F    int
  8264F      i ,
  8265F      len ;
  8266T    len = SciaRegs.SCIFFRX.bit.RXFFST ;
  8267F    // check if there is any byte in the RXFIFO, if does, read them...
  8268T    if
  8269T      (
  8270T      len != 0U
  8271T      )
  8272T      {
  8273T        for
  8274T          (
  8275T          i = 0U
  8276T          ;
  8277T          i < len
  8278T          ;
  8279T          i ++
  8280T          )
  8281T          {
  8282T            gps_in [ gps_in_index ++ ] = SciaRegs.SCIRXBUF.bit.RXDT ;
  8283T          }
  8284T      }
  8285T    gps_in_index = 0U ;// reset gps_in_index
  8286T    CpuTimer1Regs.TCR.bit.TSS = 1 ;
  8287F                      // stops Timer1 counter
  8288T    gps_in_flag = 1U ;// 0: incoming GPS message through SCI-A
  8289F                            // 1: completed GPS message
  8290T    GpsMessageReady = 1U ;
  8291T    SciaRegs.SCIFFRX.bit.RXFIFORESET = 0U ;// reset RX-FIFO pointer
  8292T    SciaRegs.SCIFFRX.bit.RXFIFORESET = 1U ;// enable RX-operation
  8293F// PieCtrlRegs.PIEACK.all = PIEACK_GROUP12;
  8294T  }
  8295F/*
  8296F// I2C FIFO Interrupt Service
  8297Finterrupt void I2C_fifo_isr(void)
  8298F{
  8299F I2caRegs.I2CFFRX.bit.RXFFINTCLR = 1U; // clear ISR
  8300F PieCtrlRegs.PIEACK.all = PIEACK_GROUP8;
  8301F}
  8302F*/
  8303F/*
  8304F// I2C basic Interrupt Service
  8305Finterrupt void I2C_basic_isr(void)
  8306F{
  8307F unsigned int IntSource;
  8308F // Read interrupt source
  8309F IntSource = I2caRegs.I2CISRC.all;
  8310F if(IntSource == 3U) // ARDY
  8311F {
  8312F // Send new start condition and initiate read
  8313F // continue with Master - Receiver - part
  8314F I2caRegs.I2CCNT = bytesToRead; // Enviar bytesToRead bytes [tentar usar bytesToRead para configurar on-the-fly o nível de interrupção da FIFO]
  8315F I2caRegs.I2CMDR.all = 0x6C20U; // Master-receiver, Start, Stop after all bytes trans.
  8316F // Bit15 = 0; no NACK in receiver mode
  8317F // Bit14 = 1; FREE on emulation halt
  8318F // Bit13 = 1; STT generate START
  8319F // Bit12 = 0; reserved
  8320F // Bit11 = 1; STP generate STOP
  8321F // Bit10 = 1; MST master mode
  8322F // Bit9 = 0; TRX master - receiver mode
  8323F // Bit8 = 0; XA 7 bit address mode
  8324F // Bit7 = 0; RM nonrepeat mode, I2CCNT determines #of bytes
  8325F // Bit6 = 0; DLB no loopback mode
  8326F // Bit5 = 1; IRS I2C module enabled
  8327F // Bit4 = 0; STB no start byte mode
  8328F // Bit3 = 0; FDF no free data format
  8329F // Bit2-0: 0; BC 8 bit per data byte
  8330F }
  8331F PieCtrlRegs.PIEACK.all = PIEACK_GROUP8;
  8332F}
  8333F*/
  8334F//===========================================================================
  8335F// End of SourceCode.
  8336F//===========================================================================
  8337F 
