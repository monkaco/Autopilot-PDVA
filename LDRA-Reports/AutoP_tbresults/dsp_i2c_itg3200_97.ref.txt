     1F/*
     2FC TESTBED VERSION  : 9.4.4                                                                                               
     3FFILE UNDER TEST  : "F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\src\usr\dsp_i2c_itg3200.c"    
     4FDATE OF ANALYSIS : Fri Nov 07 10:50:46 2014                          
     5F*/
     6F/******************************************************************************
     7F* FILENAME: dsp_i2c_itg3200.c
     8F*
     9F* DESCRIPTION:
    10F* Functions and routines to implement driver for the ITG3200.
    11F*
    12F* FUNCTIONS:
    13F* void Gpio_Select (void)
    14F*
    15F* NOTES:
    16F* ITG3200 is a tri-axis digital gyrometer which uses protocol I2C to transmit
    17F* and receive data.
    18F*
    19F* REFERENCES:
    20F*
    21F* START DATE: 05 Set 2011
    22F*
    23F* CHANGES :
    24F*
    25F* VERSION DATE WHO DETAIL
    26F* 1.0 05 Set 2011 Rogerio Lima Start-up coding.
    27F* Plínio Pereira
    28F* -----------------------------------------------------------------------------
    29F* 2.0 30 Aug 2014 Rogerio Lima Improving code quality rewriting the
    30F* code and correcting errors.
    31F******************************************************************************/
    32F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Device.h */
    33F// TI File $Revision: /main/5 $
    34F// Checkin $Date: January 22, 2008 16:55:35 $
    35F//###########################################################################
    36F//
    37F// FILE: DSP2833x_Device.h
    38F//
    39F// TITLE: DSP2833x Device Definitions.
    40F//
    41F//###########################################################################
    42F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
    43F// $Release Date: August 4, 2009 $
    44F//###########################################################################
    45F#ifndef DSP2833x_DEVICE_H
    46F#define DSP2833x_DEVICE_H
    47F#define TARGET 1
    48F//---------------------------------------------------------------------------
    49F// User To Select Target Device:
    50F#define DSP28_28335 TARGET
    51F#define DSP28_28334 0
    52F#define DSP28_28332 0
    53F//---------------------------------------------------------------------------
    54F// Common CPU Definitions:
    55F//
    56F
    57Fextern cregister volatile unsigned int
    58F  IFR ;
    59F
    60Fextern cregister volatile unsigned int
    61F  IER ;
    62F#define EINT asm (" clrc INTM")
    63F#define DINT asm (" setc INTM")
    64F#define ERTM asm (" clrc DBGM")
    65F#define DRTM asm (" setc DBGM")
    66F#define EALLOW asm (" EALLOW")
    67F#define EDIS asm (" EDIS")
    68F#define ESTOP0 asm (" ESTOP0")
    69F#define M_INT1 0x0001
    70F#define M_INT2 0x0002
    71F#define M_INT3 0x0004
    72F#define M_INT4 0x0008
    73F#define M_INT5 0x0010
    74F#define M_INT6 0x0020
    75F#define M_INT7 0x0040
    76F#define M_INT8 0x0080
    77F#define M_INT9 0x0100
    78F#define M_INT10 0x0200
    79F#define M_INT11 0x0400
    80F#define M_INT12 0x0800
    81F#define M_INT13 0x1000
    82F#define M_INT14 0x2000
    83F#define M_DLOG 0x4000
    84F#define M_RTOS 0x8000
    85F#define BIT0 0x0001
    86F#define BIT1 0x0002
    87F#define BIT2 0x0004
    88F#define BIT3 0x0008
    89F#define BIT4 0x0010
    90F#define BIT5 0x0020
    91F#define BIT6 0x0040
    92F#define BIT7 0x0080
    93F#define BIT8 0x0100
    94F#define BIT9 0x0200
    95F#define BIT10 0x0400
    96F#define BIT11 0x0800
    97F#define BIT12 0x1000
    98F#define BIT13 0x2000
    99F#define BIT14 0x4000
   100F#define BIT15 0x8000
   101F//---------------------------------------------------------------------------
   102F// For Portability, User Is Recommended To Use Following Data Type Size
   103F// Definitions For 16-bit and 32-Bit Signed/Unsigned Integers:
   104F//
   105F#define DSP28_DATA_TYPES
   106F
   107Ftypedef
   108Fchar
   109F  int8 ;
   110F
   111Ftypedef
   112Fint
   113F  int16 ;
   114F
   115Ftypedef
   116Flong
   117F  int32 ;
   118F
   119Ftypedef
   120Flong long
   121F  int64 ;
   122F
   123Ftypedef
   124Funsigned char
   125F  Uint8 ;
   126F
   127Ftypedef
   128Funsigned int
   129F  Uint16 ;
   130F
   131Ftypedef
   132Funsigned long
   133F  Uint32 ;
   134F
   135Ftypedef
   136Funsigned long long
   137F  Uint64 ;
   138F
   139Ftypedef
   140Ffloat
   141F  float32 ;
   142F
   143Ftypedef
   144Flong double
   145F  float64 ;
   146F//---------------------------------------------------------------------------
   147F// Include All Peripheral Header Files:
   148F//
   149F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Adc.h */
   150F// TI File $Revision: /main/1 $
   151F// Checkin $Date: August 18, 2006 13:51:50 $
   152F//###########################################################################
   153F//
   154F// FILE: DSP2833x_Adc.h
   155F//
   156F// TITLE: DSP2833x Device ADC Register Definitions.
   157F//
   158F//###########################################################################
   159F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   160F// $Release Date: August 4, 2009 $
   161F//###########################################################################
   162F#ifndef DSP2833x_ADC_H
   163F#define DSP2833x_ADC_H
   164F//---------------------------------------------------------------------------
   165F// ADC Individual Register Bit Definitions:
   166F
   167Fstruct ADCTRL1_BITS
   168F{                     // bits description
   169F  Uint16 rsvd1 : 4 ;// 3:0 reserved
   170F  Uint16 SEQ_CASC : 1 ;// 4 Cascaded sequencer mode
   171F  Uint16 SEQ_OVRD : 1 ;// 5 Sequencer override
   172F  Uint16 CONT_RUN : 1 ;// 6 Continuous run
   173F  Uint16 CPS : 1 ;// 7 ADC core clock pre-scalar
   174F  Uint16 ACQ_PS : 4 ;// 11:8 Acquisition window size
   175F  Uint16 SUSMOD : 2 ;// 13:12 Emulation suspend mode
   176F  Uint16 RESET : 1 ;// 14 ADC reset
   177F  Uint16 rsvd2 : 1 ;// 15 reserved
   178F} ;
   179F
   180Funion ADCTRL1_REG
   181F{
   182F  Uint16 all ;
   183F  struct ADCTRL1_BITS bit ;
   184F} ;
   185F
   186Fstruct ADCTRL2_BITS
   187F{                     // bits description
   188F  Uint16 EPWM_SOCB_SEQ2 : 1 ;// 0 EPWM compare B SOC mask for SEQ2
   189F  Uint16 rsvd1 : 1 ;// 1 reserved
   190F  Uint16 INT_MOD_SEQ2 : 1 ;// 2 SEQ2 Interrupt mode
   191F  Uint16 INT_ENA_SEQ2 : 1 ;// 3 SEQ2 Interrupt enable
   192F  Uint16 rsvd2 : 1 ;// 4 reserved
   193F  Uint16 SOC_SEQ2 : 1 ;// 5 Start of conversion for SEQ2
   194F  Uint16 RST_SEQ2 : 1 ;// 6 Reset SEQ2
   195F  Uint16 EXT_SOC_SEQ1 : 1 ;// 7 External start of conversion for SEQ1
   196F  Uint16 EPWM_SOCA_SEQ1 : 1 ;// 8 EPWM compare B SOC mask for SEQ1
   197F  Uint16 rsvd3 : 1 ;// 9 reserved
   198F  Uint16 INT_MOD_SEQ1 : 1 ;// 10 SEQ1 Interrupt mode
   199F  Uint16 INT_ENA_SEQ1 : 1 ;// 11 SEQ1 Interrupt enable
   200F  Uint16 rsvd4 : 1 ;// 12 reserved
   201F  Uint16 SOC_SEQ1 : 1 ;// 13 Start of conversion trigger for SEQ1
   202F  Uint16 RST_SEQ1 : 1 ;// 14 Restart sequencer 1
   203F  Uint16 EPWM_SOCB_SEQ : 1 ;// 15 EPWM compare B SOC enable
   204F} ;
   205F
   206Funion ADCTRL2_REG
   207F{
   208F  Uint16 all ;
   209F  struct ADCTRL2_BITS bit ;
   210F} ;
   211F
   212Fstruct ADCASEQSR_BITS
   213F{                       // bits description
   214F  Uint16 SEQ1_STATE : 4 ;// 3:0 SEQ1 state
   215F  Uint16 SEQ2_STATE : 3 ;// 6:4 SEQ2 state
   216F  Uint16 rsvd1 : 1 ;// 7 reserved
   217F  Uint16 SEQ_CNTR : 4 ;// 11:8 Sequencing counter status
   218F  Uint16 rsvd2 : 4 ;// 15:12 reserved
   219F} ;
   220F
   221Funion ADCASEQSR_REG
   222F{
   223F  Uint16 all ;
   224F  struct ADCASEQSR_BITS bit ;
   225F} ;
   226F
   227Fstruct ADCMAXCONV_BITS
   228F{                        // bits description
   229F  Uint16 MAX_CONV1 : 4 ;// 3:0 Max number of conversions
   230F  Uint16 MAX_CONV2 : 3 ;// 6:4 Max number of conversions
   231F  Uint16 rsvd1 : 9 ;// 15:7 reserved
   232F} ;
   233F
   234Funion ADCMAXCONV_REG
   235F{
   236F  Uint16 all ;
   237F  struct ADCMAXCONV_BITS bit ;
   238F} ;
   239F
   240Fstruct ADCCHSELSEQ1_BITS
   241F{                          // bits description
   242F  Uint16 CONV00 : 4 ;// 3:0 Conversion selection 00
   243F  Uint16 CONV01 : 4 ;// 7:4 Conversion selection 01
   244F  Uint16 CONV02 : 4 ;// 11:8 Conversion selection 02
   245F  Uint16 CONV03 : 4 ;// 15:12 Conversion selection 03
   246F} ;
   247F
   248Funion ADCCHSELSEQ1_REG
   249F{
   250F  Uint16 all ;
   251F  struct ADCCHSELSEQ1_BITS bit ;
   252F} ;
   253F
   254Fstruct ADCCHSELSEQ2_BITS
   255F{                          // bits description
   256F  Uint16 CONV04 : 4 ;// 3:0 Conversion selection 04
   257F  Uint16 CONV05 : 4 ;// 7:4 Conversion selection 05
   258F  Uint16 CONV06 : 4 ;// 11:8 Conversion selection 06
   259F  Uint16 CONV07 : 4 ;// 15:12 Conversion selection 07
   260F} ;
   261F
   262Funion ADCCHSELSEQ2_REG
   263F{
   264F  Uint16 all ;
   265F  struct ADCCHSELSEQ2_BITS bit ;
   266F} ;
   267F
   268Fstruct ADCCHSELSEQ3_BITS
   269F{                          // bits description
   270F  Uint16 CONV08 : 4 ;// 3:0 Conversion selection 08
   271F  Uint16 CONV09 : 4 ;// 7:4 Conversion selection 09
   272F  Uint16 CONV10 : 4 ;// 11:8 Conversion selection 10
   273F  Uint16 CONV11 : 4 ;// 15:12 Conversion selection 11
   274F} ;
   275F
   276Funion ADCCHSELSEQ3_REG
   277F{
   278F  Uint16 all ;
   279F  struct ADCCHSELSEQ3_BITS bit ;
   280F} ;
   281F
   282Fstruct ADCCHSELSEQ4_BITS
   283F{                          // bits description
   284F  Uint16 CONV12 : 4 ;// 3:0 Conversion selection 12
   285F  Uint16 CONV13 : 4 ;// 7:4 Conversion selection 13
   286F  Uint16 CONV14 : 4 ;// 11:8 Conversion selection 14
   287F  Uint16 CONV15 : 4 ;// 15:12 Conversion selection 15
   288F} ;
   289F
   290Funion ADCCHSELSEQ4_REG
   291F{
   292F  Uint16 all ;
   293F  struct ADCCHSELSEQ4_BITS bit ;
   294F} ;
   295F
   296Fstruct ADCTRL3_BITS
   297F{                     // bits description
   298F  Uint16 SMODE_SEL : 1 ;// 0 Sampling mode select
   299F  Uint16 ADCCLKPS : 4 ;// 4:1 ADC core clock divider
   300F  Uint16 ADCPWDN : 1 ;// 5 ADC powerdown
   301F  Uint16 ADCBGRFDN : 2 ;// 7:6 ADC bandgap/ref power down
   302F  Uint16 rsvd1 : 8 ;// 15:8 reserved
   303F} ;
   304F
   305Funion ADCTRL3_REG
   306F{
   307F  Uint16 all ;
   308F  struct ADCTRL3_BITS bit ;
   309F} ;
   310F
   311Fstruct ADCST_BITS
   312F{                   // bits description
   313F  Uint16 INT_SEQ1 : 1 ;// 0 SEQ1 Interrupt flag
   314F  Uint16 INT_SEQ2 : 1 ;// 1 SEQ2 Interrupt flag
   315F  Uint16 SEQ1_BSY : 1 ;// 2 SEQ1 busy status
   316F  Uint16 SEQ2_BSY : 1 ;// 3 SEQ2 busy status
   317F  Uint16 INT_SEQ1_CLR : 1 ;// 4 SEQ1 Interrupt clear
   318F  Uint16 INT_SEQ2_CLR : 1 ;// 5 SEQ2 Interrupt clear
   319F  Uint16 EOS_BUF1 : 1 ;// 6 End of sequence buffer1
   320F  Uint16 EOS_BUF2 : 1 ;// 7 End of sequence buffer2
   321F  Uint16 rsvd1 : 8 ;// 15:8 reserved
   322F} ;
   323F
   324Funion ADCST_REG
   325F{
   326F  Uint16 all ;
   327F  struct ADCST_BITS bit ;
   328F} ;
   329F
   330Fstruct ADCREFSEL_BITS
   331F{                       // bits description
   332F  Uint16 rsvd1 : 14 ;    // 13:0 reserved
   333F  Uint16 REF_SEL : 2 ;    // 15:14 Reference select
   334F} ;
   335F
   336Funion ADCREFSEL_REG
   337F{
   338F  Uint16 all ;
   339F  struct ADCREFSEL_BITS bit ;
   340F} ;
   341F
   342Fstruct ADCOFFTRIM_BITS
   343F{                       // bits description
   344F  int16 OFFSET_TRIM : 9 ;    // 8:0 Offset Trim
   345F  Uint16 rsvd1 : 7 ;    // 15:9 reserved
   346F} ;
   347F
   348Funion ADCOFFTRIM_REG
   349F{
   350F  Uint16 all ;
   351F  struct ADCOFFTRIM_BITS bit ;
   352F} ;
   353F
   354Fstruct ADC_REGS
   355F{
   356F  union ADCTRL1_REG ADCTRL1 ;  // ADC Control 1
   357F  union ADCTRL2_REG ADCTRL2 ;  // ADC Control 2
   358F  union ADCMAXCONV_REG ADCMAXCONV ;  // Max conversions
   359F  union ADCCHSELSEQ1_REG ADCCHSELSEQ1 ;  // Channel select sequencing control 1
   360F  union ADCCHSELSEQ2_REG ADCCHSELSEQ2 ;  // Channel select sequencing control 2
   361F  union ADCCHSELSEQ3_REG ADCCHSELSEQ3 ;  // Channel select sequencing control 3
   362F  union ADCCHSELSEQ4_REG ADCCHSELSEQ4 ;  // Channel select sequencing control 4
   363F  union ADCASEQSR_REG ADCASEQSR ;  // Autosequence status register
   364F  Uint16 ADCRESULT0 ;  // Conversion Result Buffer 0
   365F  Uint16 ADCRESULT1 ;  // Conversion Result Buffer 1
   366F  Uint16 ADCRESULT2 ;  // Conversion Result Buffer 2
   367F  Uint16 ADCRESULT3 ;  // Conversion Result Buffer 3
   368F  Uint16 ADCRESULT4 ;  // Conversion Result Buffer 4
   369F  Uint16 ADCRESULT5 ;  // Conversion Result Buffer 5
   370F  Uint16 ADCRESULT6 ;  // Conversion Result Buffer 6
   371F  Uint16 ADCRESULT7 ;  // Conversion Result Buffer 7
   372F  Uint16 ADCRESULT8 ;  // Conversion Result Buffer 8
   373F  Uint16 ADCRESULT9 ;  // Conversion Result Buffer 9
   374F  Uint16 ADCRESULT10 ;  // Conversion Result Buffer 10
   375F  Uint16 ADCRESULT11 ;  // Conversion Result Buffer 11
   376F  Uint16 ADCRESULT12 ;  // Conversion Result Buffer 12
   377F  Uint16 ADCRESULT13 ;  // Conversion Result Buffer 13
   378F  Uint16 ADCRESULT14 ;  // Conversion Result Buffer 14
   379F  Uint16 ADCRESULT15 ;  // Conversion Result Buffer 15
   380F  union ADCTRL3_REG ADCTRL3 ;  // ADC Control 3
   381F  union ADCST_REG ADCST ;  // ADC Status Register
   382F  Uint16 rsvd1 ;
   383F  Uint16 rsvd2 ;
   384F  union ADCREFSEL_REG ADCREFSEL ;  // Reference Select Register
   385F  union ADCOFFTRIM_REG ADCOFFTRIM ;  // Offset Trim Register
   386F} ;
   387F
   388Fstruct ADC_RESULT_MIRROR_REGS
   389F{
   390F  Uint16 ADCRESULT0 ;  // Conversion Result Buffer 0
   391F  Uint16 ADCRESULT1 ;  // Conversion Result Buffer 1
   392F  Uint16 ADCRESULT2 ;  // Conversion Result Buffer 2
   393F  Uint16 ADCRESULT3 ;  // Conversion Result Buffer 3
   394F  Uint16 ADCRESULT4 ;  // Conversion Result Buffer 4
   395F  Uint16 ADCRESULT5 ;  // Conversion Result Buffer 5
   396F  Uint16 ADCRESULT6 ;  // Conversion Result Buffer 6
   397F  Uint16 ADCRESULT7 ;  // Conversion Result Buffer 7
   398F  Uint16 ADCRESULT8 ;  // Conversion Result Buffer 8
   399F  Uint16 ADCRESULT9 ;  // Conversion Result Buffer 9
   400F  Uint16 ADCRESULT10 ;  // Conversion Result Buffer 10
   401F  Uint16 ADCRESULT11 ;  // Conversion Result Buffer 11
   402F  Uint16 ADCRESULT12 ;  // Conversion Result Buffer 12
   403F  Uint16 ADCRESULT13 ;  // Conversion Result Buffer 13
   404F  Uint16 ADCRESULT14 ;  // Conversion Result Buffer 14
   405F  Uint16 ADCRESULT15 ;  // Conversion Result Buffer 15
   406F} ;
   407F//---------------------------------------------------------------------------
   408F// ADC External References & Function Declarations:
   409F//
   410F
   411Fextern volatile struct ADC_REGS
   412F  AdcRegs ;
   413F
   414Fextern volatile struct ADC_RESULT_MIRROR_REGS
   415F  AdcMirror ;
   416F       /* extern "C" */
   417F       // end of DSP2833x_ADC_H definition
   418F//===========================================================================
   419F// End of file.
   420F//===========================================================================
   421F 
   422F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Adc.h*/
   423F/*   CLOSE_FILE Include File */
   424F 
   425F                // ADC Registers
   426F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DevEmu.h */
   427F// TI File $Revision: /main/4 $
   428F// Checkin $Date: April 15, 2009 10:05:17 $
   429F//###########################################################################
   430F//
   431F// FILE: DSP2833x_DevEmu.h
   432F//
   433F// TITLE: DSP2833x Device Emulation Register Definitions.
   434F//
   435F//###########################################################################
   436F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   437F// $Release Date: August 4, 2009 $
   438F//###########################################################################
   439F#ifndef DSP2833x_DEV_EMU_H
   440F#define DSP2833x_DEV_EMU_H
   441F//---------------------------------------------------------------------------
   442F// Device Emulation Register Bit Definitions:
   443F//
   444F// Device Configuration Register Bit Definitions
   445F
   446Fstruct DEVICECNF_BITS
   447F{                       // bits description
   448F  Uint16 rsvd1 : 3 ;
   449F                   // 2:0 reserved
   450F  Uint16 VMAPS : 1 ;
   451F                   // 3 VMAP Status
   452F  Uint16 rsvd2 : 1 ;
   453F                   // 4 reserved
   454F  Uint16 XRSn : 1 ;
   455F                  // 5 XRSn Signal Status
   456F  Uint16 rsvd3 : 10 ;
   457F                    // 15:6
   458F  Uint16 rsvd4 : 3 ;
   459F                   // 18:16
   460F  Uint16 ENPROT : 1 ;
   461F                    // 19 Enable/Disable pipeline protection
   462F  Uint16 rsvd5 : 7 ;
   463F                   // 26:20 reserved
   464F  Uint16 TRSTN : 1 ;
   465F                   // 27 Status of TRSTn signal
   466F  Uint16 rsvd6 : 4 ;
   467F                   // 31:28 reserved
   468F} ;
   469F
   470Funion DEVICECNF_REG
   471F{
   472F  Uint32 all ;
   473F  struct DEVICECNF_BITS bit ;
   474F} ;
   475F// CLASSID
   476F
   477Fstruct CLASSID_BITS
   478F{                     // bits description
   479F  Uint16 CLASSNO : 8 ;
   480F                     // 7:0 Class Number
   481F  Uint16 PARTTYPE : 8 ;
   482F                      // 15:8 Part Type
   483F} ;
   484F
   485Funion CLASSID_REG
   486F{
   487F  Uint16 all ;
   488F  struct CLASSID_BITS bit ;
   489F} ;
   490F
   491Fstruct DEV_EMU_REGS
   492F{
   493F  union DEVICECNF_REG DEVICECNF ; // device configuration
   494F  union CLASSID_REG CLASSID ; // Class ID
   495F  Uint16 REVID ; // Device ID
   496F  Uint16 PROTSTART ; // Write-Read protection start
   497F  Uint16 PROTRANGE ; // Write-Read protection range
   498F  Uint16 rsvd2 [ 202 ] ;
   499F} ;
   500F// PARTID
   501F
   502Fstruct PARTID_BITS
   503F{                    // bits description
   504F  Uint16 PARTNO : 8 ;
   505F                    // 7:0 Part Number
   506F  Uint16 PARTTYPE : 8 ;
   507F                      // 15:8 Part Type
   508F} ;
   509F
   510Funion PARTID_REG
   511F{
   512F  Uint16 all ;
   513F  struct PARTID_BITS bit ;
   514F} ;
   515F
   516Fstruct PARTID_REGS
   517F{
   518F  union PARTID_REG PARTID ; // Part ID
   519F} ;
   520F//---------------------------------------------------------------------------
   521F// Device Emulation Register References & Function Declarations:
   522F//
   523F
   524Fextern volatile struct DEV_EMU_REGS
   525F  DevEmuRegs ;
   526F
   527Fextern volatile struct PARTID_REGS
   528F  PartIdRegs ;
   529F       /* extern "C" */
   530F       // end of DSP2833x_DEV_EMU_H definition
   531F//===========================================================================
   532F// End of file.
   533F//===========================================================================
   534F 
   535F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DevEmu.h*/
   536F/*   CLOSE_FILE Include File */
   537F 
   538F             // Device Emulation Registers
   539F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_CpuTimers.h */
   540F// TI File $Revision: /main/4 $
   541F// Checkin $Date: March 20, 2007 15:33:42 $
   542F//###########################################################################
   543F//
   544F// FILE: DSP2833x_CpuTimers.h
   545F//
   546F// TITLE: DSP2833x CPU 32-bit Timers Register Definitions.
   547F//
   548F// NOTES: CpuTimer1 and CpuTimer2 are reserved for use with DSP BIOS and
   549F// other realtime operating systems.
   550F//
   551F// Do not use these two timers in your application if you ever plan
   552F// on integrating DSP-BIOS or another realtime OS.
   553F//
   554F// For this reason, comment out the code to manipulate these two timers
   555F// if using DSP-BIOS or another realtime OS.
   556F//
   557F//###########################################################################
   558F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   559F// $Release Date: August 4, 2009 $
   560F//###########################################################################
   561F#ifndef DSP2833x_CPU_TIMERS_H
   562F#define DSP2833x_CPU_TIMERS_H
   563F//---------------------------------------------------------------------------
   564F// CPU Timer Register Bit Definitions:
   565F//
   566F//
   567F// TCR: Control register bit definitions:
   568F
   569Fstruct TCR_BITS
   570F{                 // bits description
   571F  Uint16 rsvd1 : 4 ;
   572F                   // 3:0 reserved
   573F  Uint16 TSS : 1 ;
   574F                 // 4 Timer Start/Stop
   575F  Uint16 TRB : 1 ;
   576F                 // 5 Timer reload
   577F  Uint16 rsvd2 : 4 ;
   578F                   // 9:6 reserved
   579F  Uint16 SOFT : 1 ;
   580F                  // 10 Emulation modes
   581F  Uint16 FREE : 1 ;
   582F                  // 11
   583F  Uint16 rsvd3 : 2 ;
   584F                   // 12:13 reserved
   585F  Uint16 TIE : 1 ;
   586F                 // 14 Output enable
   587F  Uint16 TIF : 1 ;
   588F                 // 15 Interrupt flag
   589F} ;
   590F
   591Funion TCR_REG
   592F{
   593F  Uint16 all ;
   594F  struct TCR_BITS bit ;
   595F} ;
   596F// TPR: Pre-scale low bit definitions:
   597F
   598Fstruct TPR_BITS
   599F{                 // bits description
   600F  Uint16 TDDR : 8 ;
   601F                  // 7:0 Divide-down low
   602F  Uint16 PSC : 8 ;
   603F                 // 15:8 Prescale counter low
   604F} ;
   605F
   606Funion TPR_REG
   607F{
   608F  Uint16 all ;
   609F  struct TPR_BITS bit ;
   610F} ;
   611F// TPRH: Pre-scale high bit definitions:
   612F
   613Fstruct TPRH_BITS
   614F{                  // bits description
   615F  Uint16 TDDRH : 8 ;
   616F                   // 7:0 Divide-down high
   617F  Uint16 PSCH : 8 ;
   618F                  // 15:8 Prescale counter high
   619F} ;
   620F
   621Funion TPRH_REG
   622F{
   623F  Uint16 all ;
   624F  struct TPRH_BITS bit ;
   625F} ;
   626F// TIM, TIMH: Timer register definitions:
   627F
   628Fstruct TIM_REG
   629F{
   630F  Uint16 LSW ;
   631F  Uint16 MSW ;
   632F} ;
   633F
   634Funion TIM_GROUP
   635F{
   636F  Uint32 all ;
   637F  struct TIM_REG half ;
   638F} ;
   639F// PRD, PRDH: Period register definitions:
   640F
   641Fstruct PRD_REG
   642F{
   643F  Uint16 LSW ;
   644F  Uint16 MSW ;
   645F} ;
   646F
   647Funion PRD_GROUP
   648F{
   649F  Uint32 all ;
   650F  struct PRD_REG half ;
   651F} ;
   652F//---------------------------------------------------------------------------
   653F// CPU Timer Register File:
   654F//
   655F
   656Fstruct CPUTIMER_REGS
   657F{
   658F  union TIM_GROUP TIM ; // Timer counter register
   659F  union PRD_GROUP PRD ; // Period register
   660F  union TCR_REG TCR ; // Timer control register
   661F  Uint16 rsvd1 ; // reserved
   662F  union TPR_REG TPR ; // Timer pre-scale low
   663F  union TPRH_REG TPRH ; // Timer pre-scale high
   664F} ;
   665F//---------------------------------------------------------------------------
   666F// CPU Timer Support Variables:
   667F//
   668F
   669Fstruct CPUTIMER_VARS
   670F{
   671F  volatile struct CPUTIMER_REGS * RegsAddr ;
   672F  Uint32 InterruptCount ;
   673F  float CPUFreqInMHz ;
   674F  float PeriodInUSec ;
   675F} ;
   676F//---------------------------------------------------------------------------
   677F// Function prototypes and external definitions:
   678F//
   679F
   680Fvoid
   681F  InitCpuTimers ( void ) ;
   682F
   683Fvoid
   684T  ConfigCpuTimer (
   685F  struct CPUTIMER_VARS * Timer ,
   686F  float Freq ,
   687F  float Period ) ;
   688F
   689Fextern volatile struct CPUTIMER_REGS
   690F  CpuTimer0Regs ;
   691F
   692Fextern struct CPUTIMER_VARS
   693F  CpuTimer0 ;
   694F// CpuTimer 1 and CpuTimer2 are reserved for DSP BIOS & other RTOS. Comment out CpuTimer1 and CpuTimer2 if using DSP BIOS or other RTOS
   695F
   696Fextern volatile struct CPUTIMER_REGS
   697F  CpuTimer1Regs ;
   698F
   699Fextern volatile struct CPUTIMER_REGS
   700F  CpuTimer2Regs ;
   701F
   702Fextern struct CPUTIMER_VARS
   703F  CpuTimer1 ;
   704F
   705Fextern struct CPUTIMER_VARS
   706F  CpuTimer2 ;
   707F//---------------------------------------------------------------------------
   708F// Usefull Timer Operations:
   709F//
   710F// Start Timer:
   711F#define StartCpuTimer0( ) CpuTimer0Regs . TCR . bit . TSS = 0
   712F// Stop Timer:
   713F#define StopCpuTimer0( ) CpuTimer0Regs . TCR . bit . TSS = 1
   714F// Reload Timer With period Value:
   715F#define ReloadCpuTimer0( ) CpuTimer0Regs . TCR . bit . TRB = 1
   716F// Read 32-Bit Timer Value:
   717F#define ReadCpuTimer0Counter( ) CpuTimer0Regs . TIM . all
   718F// Read 32-Bit Period Value:
   719F#define ReadCpuTimer0Period( ) CpuTimer0Regs . PRD . all
   720F// CpuTimer 1 and CpuTimer2 are reserved for DSP BIOS & other RTOS
   721F// Do not use these two timers if you ever plan on integrating
   722F// DSP-BIOS or another realtime OS.
   723F//
   724F// For this reason, comment out the code to manipulate these two timers
   725F// if using DSP-BIOS or another realtime OS.
   726F// Start Timer:
   727F#define StartCpuTimer1( ) CpuTimer1Regs . TCR . bit . TSS = 0
   728F#define StartCpuTimer2( ) CpuTimer2Regs . TCR . bit . TSS = 0
   729F// Stop Timer:
   730F#define StopCpuTimer1( ) CpuTimer1Regs . TCR . bit . TSS = 1
   731F#define StopCpuTimer2( ) CpuTimer2Regs . TCR . bit . TSS = 1
   732F// Reload Timer With period Value:
   733F#define ReloadCpuTimer1( ) CpuTimer1Regs . TCR . bit . TRB = 1
   734F#define ReloadCpuTimer2( ) CpuTimer2Regs . TCR . bit . TRB = 1
   735F// Read 32-Bit Timer Value:
   736F#define ReadCpuTimer1Counter( ) CpuTimer1Regs . TIM . all
   737F#define ReadCpuTimer2Counter( ) CpuTimer2Regs . TIM . all
   738F// Read 32-Bit Period Value:
   739F#define ReadCpuTimer1Period( ) CpuTimer1Regs . PRD . all
   740F#define ReadCpuTimer2Period( ) CpuTimer2Regs . PRD . all
   741F       /* extern "C" */
   742F       // end of DSP2833x_CPU_TIMERS_H definition
   743F//===========================================================================
   744F// End of file.
   745F//===========================================================================
   746F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_CpuTimers.h*/
   747F/*   CLOSE_FILE Include File */
   748F 
   749F          // 32-bit CPU Timers
   750F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECan.h */
   751F// TI File $Revision: /main/2 $
   752F// Checkin $Date: May 7, 2007 16:05:39 $
   753F//###########################################################################
   754F//
   755F// FILE: DSP2833x_ECan.h
   756F//
   757F// TITLE: DSP2833x Device eCAN Register Definitions.
   758F//
   759F//###########################################################################
   760F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   761F// $Release Date: August 4, 2009 $
   762F//###########################################################################
   763F#ifndef DSP2833x_ECAN_H
   764F#define DSP2833x_ECAN_H
   765F/* --------------------------------------------------- */
   766F/* eCAN Control & Status Registers */
   767F/* ----------------------------------------------------*/
   768F/* eCAN Mailbox enable register (CANME) bit definitions */
   769F
   770Fstruct CANME_BITS
   771F{                   // bit description
   772F  Uint16 ME0 : 1 ;
   773F                 // 0 Enable Mailbox 0
   774F  Uint16 ME1 : 1 ;
   775F                 // 1 Enable Mailbox 1
   776F  Uint16 ME2 : 1 ;
   777F                 // 2 Enable Mailbox 2
   778F  Uint16 ME3 : 1 ;
   779F                 // 3 Enable Mailbox 3
   780F  Uint16 ME4 : 1 ;
   781F                 // 4 Enable Mailbox 4
   782F  Uint16 ME5 : 1 ;
   783F                 // 5 Enable Mailbox 5
   784F  Uint16 ME6 : 1 ;
   785F                 // 6 Enable Mailbox 6
   786F  Uint16 ME7 : 1 ;
   787F                 // 7 Enable Mailbox 7
   788F  Uint16 ME8 : 1 ;
   789F                 // 8 Enable Mailbox 8
   790F  Uint16 ME9 : 1 ;
   791F                 // 9 Enable Mailbox 9
   792F  Uint16 ME10 : 1 ;
   793F                  // 10 Enable Mailbox 10
   794F  Uint16 ME11 : 1 ;
   795F                  // 11 Enable Mailbox 11
   796F  Uint16 ME12 : 1 ;
   797F                  // 12 Enable Mailbox 12
   798F  Uint16 ME13 : 1 ;
   799F                  // 13 Enable Mailbox 13
   800F  Uint16 ME14 : 1 ;
   801F                  // 14 Enable Mailbox 14
   802F  Uint16 ME15 : 1 ;
   803F                  // 15 Enable Mailbox 15
   804F  Uint16 ME16 : 1 ;
   805F                  // 16 Enable Mailbox 16
   806F  Uint16 ME17 : 1 ;
   807F                  // 17 Enable Mailbox 17
   808F  Uint16 ME18 : 1 ;
   809F                  // 18 Enable Mailbox 18
   810F  Uint16 ME19 : 1 ;
   811F                  // 19 Enable Mailbox 19
   812F  Uint16 ME20 : 1 ;
   813F                  // 20 Enable Mailbox 20
   814F  Uint16 ME21 : 1 ;
   815F                  // 21 Enable Mailbox 21
   816F  Uint16 ME22 : 1 ;
   817F                  // 22 Enable Mailbox 22
   818F  Uint16 ME23 : 1 ;
   819F                  // 23 Enable Mailbox 23
   820F  Uint16 ME24 : 1 ;
   821F                  // 24 Enable Mailbox 24
   822F  Uint16 ME25 : 1 ;
   823F                  // 25 Enable Mailbox 25
   824F  Uint16 ME26 : 1 ;
   825F                  // 26 Enable Mailbox 26
   826F  Uint16 ME27 : 1 ;
   827F                  // 27 Enable Mailbox 27
   828F  Uint16 ME28 : 1 ;
   829F                  // 28 Enable Mailbox 28
   830F  Uint16 ME29 : 1 ;
   831F                  // 29 Enable Mailbox 29
   832F  Uint16 ME30 : 1 ;
   833F                  // 30 Enable Mailbox 30
   834F  Uint16 ME31 : 1 ;
   835F                  // 31 Enable Mailbox 31
   836F} ;
   837F/* Allow access to the bit fields or entire register */
   838F
   839Funion CANME_REG
   840F{
   841F  Uint32 all ;
   842F  struct CANME_BITS bit ;
   843F} ;
   844F/* eCAN Mailbox direction register (CANMD) bit definitions */
   845F
   846Fstruct CANMD_BITS
   847F{                   // bit description
   848F  Uint16 MD0 : 1 ;
   849F                 // 0 0 -> Tx 1 -> Rx
   850F  Uint16 MD1 : 1 ;
   851F                 // 1 0 -> Tx 1 -> Rx
   852F  Uint16 MD2 : 1 ;
   853F                 // 2 0 -> Tx 1 -> Rx
   854F  Uint16 MD3 : 1 ;
   855F                 // 3 0 -> Tx 1 -> Rx
   856F  Uint16 MD4 : 1 ;
   857F                 // 4 0 -> Tx 1 -> Rx
   858F  Uint16 MD5 : 1 ;
   859F                 // 5 0 -> Tx 1 -> Rx
   860F  Uint16 MD6 : 1 ;
   861F                 // 6 0 -> Tx 1 -> Rx
   862F  Uint16 MD7 : 1 ;
   863F                 // 7 0 -> Tx 1 -> Rx
   864F  Uint16 MD8 : 1 ;
   865F                 // 8 0 -> Tx 1 -> Rx
   866F  Uint16 MD9 : 1 ;
   867F                 // 9 0 -> Tx 1 -> Rx
   868F  Uint16 MD10 : 1 ;
   869F                  // 10 0 -> Tx 1 -> Rx
   870F  Uint16 MD11 : 1 ;
   871F                  // 11 0 -> Tx 1 -> Rx
   872F  Uint16 MD12 : 1 ;
   873F                  // 12 0 -> Tx 1 -> Rx
   874F  Uint16 MD13 : 1 ;
   875F                  // 13 0 -> Tx 1 -> Rx
   876F  Uint16 MD14 : 1 ;
   877F                  // 14 0 -> Tx 1 -> Rx
   878F  Uint16 MD15 : 1 ;
   879F                  // 15 0 -> Tx 1 -> Rx
   880F  Uint16 MD16 : 1 ;
   881F                  // 16 0 -> Tx 1 -> Rx
   882F  Uint16 MD17 : 1 ;
   883F                  // 17 0 -> Tx 1 -> Rx
   884F  Uint16 MD18 : 1 ;
   885F                  // 18 0 -> Tx 1 -> Rx
   886F  Uint16 MD19 : 1 ;
   887F                  // 19 0 -> Tx 1 -> Rx
   888F  Uint16 MD20 : 1 ;
   889F                  // 20 0 -> Tx 1 -> Rx
   890F  Uint16 MD21 : 1 ;
   891F                  // 21 0 -> Tx 1 -> Rx
   892F  Uint16 MD22 : 1 ;
   893F                  // 22 0 -> Tx 1 -> Rx
   894F  Uint16 MD23 : 1 ;
   895F                  // 23 0 -> Tx 1 -> Rx
   896F  Uint16 MD24 : 1 ;
   897F                  // 24 0 -> Tx 1 -> Rx
   898F  Uint16 MD25 : 1 ;
   899F                  // 25 0 -> Tx 1 -> Rx
   900F  Uint16 MD26 : 1 ;
   901F                  // 26 0 -> Tx 1 -> Rx
   902F  Uint16 MD27 : 1 ;
   903F                  // 27 0 -> Tx 1 -> Rx
   904F  Uint16 MD28 : 1 ;
   905F                  // 28 0 -> Tx 1 -> Rx
   906F  Uint16 MD29 : 1 ;
   907F                  // 29 0 -> Tx 1 -> Rx
   908F  Uint16 MD30 : 1 ;
   909F                  // 30 0 -> Tx 1 -> Rx
   910F  Uint16 MD31 : 1 ;
   911F                  // 31 0 -> Tx 1 -> Rx
   912F} ;
   913F/* Allow access to the bit fields or entire register */
   914F
   915Funion CANMD_REG
   916F{
   917F  Uint32 all ;
   918F  struct CANMD_BITS bit ;
   919F} ;
   920F/* eCAN Transmit Request Set register (CANTRS) bit definitions */
   921F
   922Fstruct CANTRS_BITS
   923F{                    // bit description
   924F  Uint16 TRS0 : 1 ;
   925F                  // 0 TRS for Mailbox 0
   926F  Uint16 TRS1 : 1 ;
   927F                  // 1 TRS for Mailbox 1
   928F  Uint16 TRS2 : 1 ;
   929F                  // 2 TRS for Mailbox 2
   930F  Uint16 TRS3 : 1 ;
   931F                  // 3 TRS for Mailbox 3
   932F  Uint16 TRS4 : 1 ;
   933F                  // 4 TRS for Mailbox 4
   934F  Uint16 TRS5 : 1 ;
   935F                  // 5 TRS for Mailbox 5
   936F  Uint16 TRS6 : 1 ;
   937F                  // 6 TRS for Mailbox 6
   938F  Uint16 TRS7 : 1 ;
   939F                  // 7 TRS for Mailbox 7
   940F  Uint16 TRS8 : 1 ;
   941F                  // 8 TRS for Mailbox 8
   942F  Uint16 TRS9 : 1 ;
   943F                  // 9 TRS for Mailbox 9
   944F  Uint16 TRS10 : 1 ;
   945F                   // 10 TRS for Mailbox 10
   946F  Uint16 TRS11 : 1 ;
   947F                   // 11 TRS for Mailbox 11
   948F  Uint16 TRS12 : 1 ;
   949F                   // 12 TRS for Mailbox 12
   950F  Uint16 TRS13 : 1 ;
   951F                   // 13 TRS for Mailbox 13
   952F  Uint16 TRS14 : 1 ;
   953F                   // 14 TRS for Mailbox 14
   954F  Uint16 TRS15 : 1 ;
   955F                   // 15 TRS for Mailbox 15
   956F  Uint16 TRS16 : 1 ;
   957F                   // 16 TRS for Mailbox 16
   958F  Uint16 TRS17 : 1 ;
   959F                   // 17 TRS for Mailbox 17
   960F  Uint16 TRS18 : 1 ;
   961F                   // 18 TRS for Mailbox 18
   962F  Uint16 TRS19 : 1 ;
   963F                   // 19 TRS for Mailbox 19
   964F  Uint16 TRS20 : 1 ;
   965F                   // 20 TRS for Mailbox 20
   966F  Uint16 TRS21 : 1 ;
   967F                   // 21 TRS for Mailbox 21
   968F  Uint16 TRS22 : 1 ;
   969F                   // 22 TRS for Mailbox 22
   970F  Uint16 TRS23 : 1 ;
   971F                   // 23 TRS for Mailbox 23
   972F  Uint16 TRS24 : 1 ;
   973F                   // 24 TRS for Mailbox 24
   974F  Uint16 TRS25 : 1 ;
   975F                   // 25 TRS for Mailbox 25
   976F  Uint16 TRS26 : 1 ;
   977F                   // 26 TRS for Mailbox 26
   978F  Uint16 TRS27 : 1 ;
   979F                   // 27 TRS for Mailbox 27
   980F  Uint16 TRS28 : 1 ;
   981F                   // 28 TRS for Mailbox 28
   982F  Uint16 TRS29 : 1 ;
   983F                   // 29 TRS for Mailbox 29
   984F  Uint16 TRS30 : 1 ;
   985F                   // 30 TRS for Mailbox 30
   986F  Uint16 TRS31 : 1 ;
   987F                   // 31 TRS for Mailbox 31
   988F} ;
   989F/* Allow access to the bit fields or entire register */
   990F
   991Funion CANTRS_REG
   992F{
   993F  Uint32 all ;
   994F  struct CANTRS_BITS bit ;
   995F} ;
   996F/* eCAN Transmit Request Reset register (CANTRR) bit definitions */
   997F
   998Fstruct CANTRR_BITS
   999F{                    // bit description
  1000F  Uint16 TRR0 : 1 ;
  1001F                  // 0 TRR for Mailbox 0
  1002F  Uint16 TRR1 : 1 ;
  1003F                  // 1 TRR for Mailbox 1
  1004F  Uint16 TRR2 : 1 ;
  1005F                  // 2 TRR for Mailbox 2
  1006F  Uint16 TRR3 : 1 ;
  1007F                  // 3 TRR for Mailbox 3
  1008F  Uint16 TRR4 : 1 ;
  1009F                  // 4 TRR for Mailbox 4
  1010F  Uint16 TRR5 : 1 ;
  1011F                  // 5 TRR for Mailbox 5
  1012F  Uint16 TRR6 : 1 ;
  1013F                  // 6 TRR for Mailbox 6
  1014F  Uint16 TRR7 : 1 ;
  1015F                  // 7 TRR for Mailbox 7
  1016F  Uint16 TRR8 : 1 ;
  1017F                  // 8 TRR for Mailbox 8
  1018F  Uint16 TRR9 : 1 ;
  1019F                  // 9 TRR for Mailbox 9
  1020F  Uint16 TRR10 : 1 ;
  1021F                   // 10 TRR for Mailbox 10
  1022F  Uint16 TRR11 : 1 ;
  1023F                   // 11 TRR for Mailbox 11
  1024F  Uint16 TRR12 : 1 ;
  1025F                   // 12 TRR for Mailbox 12
  1026F  Uint16 TRR13 : 1 ;
  1027F                   // 13 TRR for Mailbox 13
  1028F  Uint16 TRR14 : 1 ;
  1029F                   // 14 TRR for Mailbox 14
  1030F  Uint16 TRR15 : 1 ;
  1031F                   // 15 TRR for Mailbox 15
  1032F  Uint16 TRR16 : 1 ;
  1033F                   // 16 TRR for Mailbox 16
  1034F  Uint16 TRR17 : 1 ;
  1035F                   // 17 TRR for Mailbox 17
  1036F  Uint16 TRR18 : 1 ;
  1037F                   // 18 TRR for Mailbox 18
  1038F  Uint16 TRR19 : 1 ;
  1039F                   // 19 TRR for Mailbox 19
  1040F  Uint16 TRR20 : 1 ;
  1041F                   // 20 TRR for Mailbox 20
  1042F  Uint16 TRR21 : 1 ;
  1043F                   // 21 TRR for Mailbox 21
  1044F  Uint16 TRR22 : 1 ;
  1045F                   // 22 TRR for Mailbox 22
  1046F  Uint16 TRR23 : 1 ;
  1047F                   // 23 TRR for Mailbox 23
  1048F  Uint16 TRR24 : 1 ;
  1049F                   // 24 TRR for Mailbox 24
  1050F  Uint16 TRR25 : 1 ;
  1051F                   // 25 TRR for Mailbox 25
  1052F  Uint16 TRR26 : 1 ;
  1053F                   // 26 TRR for Mailbox 26
  1054F  Uint16 TRR27 : 1 ;
  1055F                   // 27 TRR for Mailbox 27
  1056F  Uint16 TRR28 : 1 ;
  1057F                   // 28 TRR for Mailbox 28
  1058F  Uint16 TRR29 : 1 ;
  1059F                   // 29 TRR for Mailbox 29
  1060F  Uint16 TRR30 : 1 ;
  1061F                   // 30 TRR for Mailbox 30
  1062F  Uint16 TRR31 : 1 ;
  1063F                   // 31 TRR for Mailbox 31
  1064F} ;
  1065F/* Allow access to the bit fields or entire register */
  1066F
  1067Funion CANTRR_REG
  1068F{
  1069F  Uint32 all ;
  1070F  struct CANTRR_BITS bit ;
  1071F} ;
  1072F/* eCAN Transmit Acknowledge register (CANTA) bit definitions */
  1073F
  1074Fstruct CANTA_BITS
  1075F{                   // bit description
  1076F  Uint16 TA0 : 1 ;
  1077F                 // 0 TA for Mailbox 0
  1078F  Uint16 TA1 : 1 ;
  1079F                 // 1 TA for Mailbox 1
  1080F  Uint16 TA2 : 1 ;
  1081F                 // 2 TA for Mailbox 2
  1082F  Uint16 TA3 : 1 ;
  1083F                 // 3 TA for Mailbox 3
  1084F  Uint16 TA4 : 1 ;
  1085F                 // 4 TA for Mailbox 4
  1086F  Uint16 TA5 : 1 ;
  1087F                 // 5 TA for Mailbox 5
  1088F  Uint16 TA6 : 1 ;
  1089F                 // 6 TA for Mailbox 6
  1090F  Uint16 TA7 : 1 ;
  1091F                 // 7 TA for Mailbox 7
  1092F  Uint16 TA8 : 1 ;
  1093F                 // 8 TA for Mailbox 8
  1094F  Uint16 TA9 : 1 ;
  1095F                 // 9 TA for Mailbox 9
  1096F  Uint16 TA10 : 1 ;
  1097F                  // 10 TA for Mailbox 10
  1098F  Uint16 TA11 : 1 ;
  1099F                  // 11 TA for Mailbox 11
  1100F  Uint16 TA12 : 1 ;
  1101F                  // 12 TA for Mailbox 12
  1102F  Uint16 TA13 : 1 ;
  1103F                  // 13 TA for Mailbox 13
  1104F  Uint16 TA14 : 1 ;
  1105F                  // 14 TA for Mailbox 14
  1106F  Uint16 TA15 : 1 ;
  1107F                  // 15 TA for Mailbox 15
  1108F  Uint16 TA16 : 1 ;
  1109F                  // 16 TA for Mailbox 16
  1110F  Uint16 TA17 : 1 ;
  1111F                  // 17 TA for Mailbox 17
  1112F  Uint16 TA18 : 1 ;
  1113F                  // 18 TA for Mailbox 18
  1114F  Uint16 TA19 : 1 ;
  1115F                  // 19 TA for Mailbox 19
  1116F  Uint16 TA20 : 1 ;
  1117F                  // 20 TA for Mailbox 20
  1118F  Uint16 TA21 : 1 ;
  1119F                  // 21 TA for Mailbox 21
  1120F  Uint16 TA22 : 1 ;
  1121F                  // 22 TA for Mailbox 22
  1122F  Uint16 TA23 : 1 ;
  1123F                  // 23 TA for Mailbox 23
  1124F  Uint16 TA24 : 1 ;
  1125F                  // 24 TA for Mailbox 24
  1126F  Uint16 TA25 : 1 ;
  1127F                  // 25 TA for Mailbox 25
  1128F  Uint16 TA26 : 1 ;
  1129F                  // 26 TA for Mailbox 26
  1130F  Uint16 TA27 : 1 ;
  1131F                  // 27 TA for Mailbox 27
  1132F  Uint16 TA28 : 1 ;
  1133F                  // 28 TA for Mailbox 28
  1134F  Uint16 TA29 : 1 ;
  1135F                  // 29 TA for Mailbox 29
  1136F  Uint16 TA30 : 1 ;
  1137F                  // 30 TA for Mailbox 30
  1138F  Uint16 TA31 : 1 ;
  1139F                  // 31 TA for Mailbox 31
  1140F} ;
  1141F/* Allow access to the bit fields or entire register */
  1142F
  1143Funion CANTA_REG
  1144F{
  1145F  Uint32 all ;
  1146F  struct CANTA_BITS bit ;
  1147F} ;
  1148F/* eCAN Transmit Abort Acknowledge register (CANAA) bit definitions */
  1149F
  1150Fstruct CANAA_BITS
  1151F{                   // bit description
  1152F  Uint16 AA0 : 1 ;
  1153F                 // 0 AA for Mailbox 0
  1154F  Uint16 AA1 : 1 ;
  1155F                 // 1 AA for Mailbox 1
  1156F  Uint16 AA2 : 1 ;
  1157F                 // 2 AA for Mailbox 2
  1158F  Uint16 AA3 : 1 ;
  1159F                 // 3 AA for Mailbox 3
  1160F  Uint16 AA4 : 1 ;
  1161F                 // 4 AA for Mailbox 4
  1162F  Uint16 AA5 : 1 ;
  1163F                 // 5 AA for Mailbox 5
  1164F  Uint16 AA6 : 1 ;
  1165F                 // 6 AA for Mailbox 6
  1166F  Uint16 AA7 : 1 ;
  1167F                 // 7 AA for Mailbox 7
  1168F  Uint16 AA8 : 1 ;
  1169F                 // 8 AA for Mailbox 8
  1170F  Uint16 AA9 : 1 ;
  1171F                 // 9 AA for Mailbox 9
  1172F  Uint16 AA10 : 1 ;
  1173F                  // 10 AA for Mailbox 10
  1174F  Uint16 AA11 : 1 ;
  1175F                  // 11 AA for Mailbox 11
  1176F  Uint16 AA12 : 1 ;
  1177F                  // 12 AA for Mailbox 12
  1178F  Uint16 AA13 : 1 ;
  1179F                  // 13 AA for Mailbox 13
  1180F  Uint16 AA14 : 1 ;
  1181F                  // 14 AA for Mailbox 14
  1182F  Uint16 AA15 : 1 ;
  1183F                  // 15 AA for Mailbox 15
  1184F  Uint16 AA16 : 1 ;
  1185F                  // 16 AA for Mailbox 16
  1186F  Uint16 AA17 : 1 ;
  1187F                  // 17 AA for Mailbox 17
  1188F  Uint16 AA18 : 1 ;
  1189F                  // 18 AA for Mailbox 18
  1190F  Uint16 AA19 : 1 ;
  1191F                  // 19 AA for Mailbox 19
  1192F  Uint16 AA20 : 1 ;
  1193F                  // 20 AA for Mailbox 20
  1194F  Uint16 AA21 : 1 ;
  1195F                  // 21 AA for Mailbox 21
  1196F  Uint16 AA22 : 1 ;
  1197F                  // 22 AA for Mailbox 22
  1198F  Uint16 AA23 : 1 ;
  1199F                  // 23 AA for Mailbox 23
  1200F  Uint16 AA24 : 1 ;
  1201F                  // 24 AA for Mailbox 24
  1202F  Uint16 AA25 : 1 ;
  1203F                  // 25 AA for Mailbox 25
  1204F  Uint16 AA26 : 1 ;
  1205F                  // 26 AA for Mailbox 26
  1206F  Uint16 AA27 : 1 ;
  1207F                  // 27 AA for Mailbox 27
  1208F  Uint16 AA28 : 1 ;
  1209F                  // 28 AA for Mailbox 28
  1210F  Uint16 AA29 : 1 ;
  1211F                  // 29 AA for Mailbox 29
  1212F  Uint16 AA30 : 1 ;
  1213F                  // 30 AA for Mailbox 30
  1214F  Uint16 AA31 : 1 ;
  1215F                  // 31 AA for Mailbox 31
  1216F} ;
  1217F/* Allow access to the bit fields or entire register */
  1218F
  1219Funion CANAA_REG
  1220F{
  1221F  Uint32 all ;
  1222F  struct CANAA_BITS bit ;
  1223F} ;
  1224F/* eCAN Received Message Pending register (CANRMP) bit definitions */
  1225F
  1226Fstruct CANRMP_BITS
  1227F{                    // bit description
  1228F  Uint16 RMP0 : 1 ;
  1229F                  // 0 RMP for Mailbox 0
  1230F  Uint16 RMP1 : 1 ;
  1231F                  // 1 RMP for Mailbox 1
  1232F  Uint16 RMP2 : 1 ;
  1233F                  // 2 RMP for Mailbox 2
  1234F  Uint16 RMP3 : 1 ;
  1235F                  // 3 RMP for Mailbox 3
  1236F  Uint16 RMP4 : 1 ;
  1237F                  // 4 RMP for Mailbox 4
  1238F  Uint16 RMP5 : 1 ;
  1239F                  // 5 RMP for Mailbox 5
  1240F  Uint16 RMP6 : 1 ;
  1241F                  // 6 RMP for Mailbox 6
  1242F  Uint16 RMP7 : 1 ;
  1243F                  // 7 RMP for Mailbox 7
  1244F  Uint16 RMP8 : 1 ;
  1245F                  // 8 RMP for Mailbox 8
  1246F  Uint16 RMP9 : 1 ;
  1247F                  // 9 RMP for Mailbox 9
  1248F  Uint16 RMP10 : 1 ;
  1249F                   // 10 RMP for Mailbox 10
  1250F  Uint16 RMP11 : 1 ;
  1251F                   // 11 RMP for Mailbox 11
  1252F  Uint16 RMP12 : 1 ;
  1253F                   // 12 RMP for Mailbox 12
  1254F  Uint16 RMP13 : 1 ;
  1255F                   // 13 RMP for Mailbox 13
  1256F  Uint16 RMP14 : 1 ;
  1257F                   // 14 RMP for Mailbox 14
  1258F  Uint16 RMP15 : 1 ;
  1259F                   // 15 RMP for Mailbox 15
  1260F  Uint16 RMP16 : 1 ;
  1261F                   // 16 RMP for Mailbox 16
  1262F  Uint16 RMP17 : 1 ;
  1263F                   // 17 RMP for Mailbox 17
  1264F  Uint16 RMP18 : 1 ;
  1265F                   // 18 RMP for Mailbox 18
  1266F  Uint16 RMP19 : 1 ;
  1267F                   // 19 RMP for Mailbox 19
  1268F  Uint16 RMP20 : 1 ;
  1269F                   // 20 RMP for Mailbox 20
  1270F  Uint16 RMP21 : 1 ;
  1271F                   // 21 RMP for Mailbox 21
  1272F  Uint16 RMP22 : 1 ;
  1273F                   // 22 RMP for Mailbox 22
  1274F  Uint16 RMP23 : 1 ;
  1275F                   // 23 RMP for Mailbox 23
  1276F  Uint16 RMP24 : 1 ;
  1277F                   // 24 RMP for Mailbox 24
  1278F  Uint16 RMP25 : 1 ;
  1279F                   // 25 RMP for Mailbox 25
  1280F  Uint16 RMP26 : 1 ;
  1281F                   // 26 RMP for Mailbox 26
  1282F  Uint16 RMP27 : 1 ;
  1283F                   // 27 RMP for Mailbox 27
  1284F  Uint16 RMP28 : 1 ;
  1285F                   // 28 RMP for Mailbox 28
  1286F  Uint16 RMP29 : 1 ;
  1287F                   // 29 RMP for Mailbox 29
  1288F  Uint16 RMP30 : 1 ;
  1289F                   // 30 RMP for Mailbox 30
  1290F  Uint16 RMP31 : 1 ;
  1291F                   // 31 RMP for Mailbox 31
  1292F} ;
  1293F/* Allow access to the bit fields or entire register */
  1294F
  1295Funion CANRMP_REG
  1296F{
  1297F  Uint32 all ;
  1298F  struct CANRMP_BITS bit ;
  1299F} ;
  1300F/* eCAN Received Message Lost register (CANRML) bit definitions */
  1301F
  1302Fstruct CANRML_BITS
  1303F{                    // bit description
  1304F  Uint16 RML0 : 1 ;
  1305F                  // 0 RML for Mailbox 0
  1306F  Uint16 RML1 : 1 ;
  1307F                  // 1 RML for Mailbox 1
  1308F  Uint16 RML2 : 1 ;
  1309F                  // 2 RML for Mailbox 2
  1310F  Uint16 RML3 : 1 ;
  1311F                  // 3 RML for Mailbox 3
  1312F  Uint16 RML4 : 1 ;
  1313F                  // 4 RML for Mailbox 4
  1314F  Uint16 RML5 : 1 ;
  1315F                  // 5 RML for Mailbox 5
  1316F  Uint16 RML6 : 1 ;
  1317F                  // 6 RML for Mailbox 6
  1318F  Uint16 RML7 : 1 ;
  1319F                  // 7 RML for Mailbox 7
  1320F  Uint16 RML8 : 1 ;
  1321F                  // 8 RML for Mailbox 8
  1322F  Uint16 RML9 : 1 ;
  1323F                  // 9 RML for Mailbox 9
  1324F  Uint16 RML10 : 1 ;
  1325F                   // 10 RML for Mailbox 10
  1326F  Uint16 RML11 : 1 ;
  1327F                   // 11 RML for Mailbox 11
  1328F  Uint16 RML12 : 1 ;
  1329F                   // 12 RML for Mailbox 12
  1330F  Uint16 RML13 : 1 ;
  1331F                   // 13 RML for Mailbox 13
  1332F  Uint16 RML14 : 1 ;
  1333F                   // 14 RML for Mailbox 14
  1334F  Uint16 RML15 : 1 ;
  1335F                   // 15 RML for Mailbox 15
  1336F  Uint16 RML16 : 1 ;
  1337F                   // 16 RML for Mailbox 16
  1338F  Uint16 RML17 : 1 ;
  1339F                   // 17 RML for Mailbox 17
  1340F  Uint16 RML18 : 1 ;
  1341F                   // 18 RML for Mailbox 18
  1342F  Uint16 RML19 : 1 ;
  1343F                   // 19 RML for Mailbox 19
  1344F  Uint16 RML20 : 1 ;
  1345F                   // 20 RML for Mailbox 20
  1346F  Uint16 RML21 : 1 ;
  1347F                   // 21 RML for Mailbox 21
  1348F  Uint16 RML22 : 1 ;
  1349F                   // 22 RML for Mailbox 22
  1350F  Uint16 RML23 : 1 ;
  1351F                   // 23 RML for Mailbox 23
  1352F  Uint16 RML24 : 1 ;
  1353F                   // 24 RML for Mailbox 24
  1354F  Uint16 RML25 : 1 ;
  1355F                   // 25 RML for Mailbox 25
  1356F  Uint16 RML26 : 1 ;
  1357F                   // 26 RML for Mailbox 26
  1358F  Uint16 RML27 : 1 ;
  1359F                   // 27 RML for Mailbox 27
  1360F  Uint16 RML28 : 1 ;
  1361F                   // 28 RML for Mailbox 28
  1362F  Uint16 RML29 : 1 ;
  1363F                   // 29 RML for Mailbox 29
  1364F  Uint16 RML30 : 1 ;
  1365F                   // 30 RML for Mailbox 30
  1366F  Uint16 RML31 : 1 ;
  1367F                   // 31 RML for Mailbox 31
  1368F} ;
  1369F/* Allow access to the bit fields or entire register */
  1370F
  1371Funion CANRML_REG
  1372F{
  1373F  Uint32 all ;
  1374F  struct CANRML_BITS bit ;
  1375F} ;
  1376F/* eCAN Remote Frame Pending register (CANRFP) bit definitions */
  1377F
  1378Fstruct CANRFP_BITS
  1379F{                    // bit description
  1380F  Uint16 RFP0 : 1 ;
  1381F                  // 0 RFP for Mailbox 0
  1382F  Uint16 RFP1 : 1 ;
  1383F                  // 1 RFP for Mailbox 1
  1384F  Uint16 RFP2 : 1 ;
  1385F                  // 2 RFP for Mailbox 2
  1386F  Uint16 RFP3 : 1 ;
  1387F                  // 3 RFP for Mailbox 3
  1388F  Uint16 RFP4 : 1 ;
  1389F                  // 4 RFP for Mailbox 4
  1390F  Uint16 RFP5 : 1 ;
  1391F                  // 5 RFP for Mailbox 5
  1392F  Uint16 RFP6 : 1 ;
  1393F                  // 6 RFP for Mailbox 6
  1394F  Uint16 RFP7 : 1 ;
  1395F                  // 7 RFP for Mailbox 7
  1396F  Uint16 RFP8 : 1 ;
  1397F                  // 8 RFP for Mailbox 8
  1398F  Uint16 RFP9 : 1 ;
  1399F                  // 9 RFP for Mailbox 9
  1400F  Uint16 RFP10 : 1 ;
  1401F                   // 10 RFP for Mailbox 10
  1402F  Uint16 RFP11 : 1 ;
  1403F                   // 11 RFP for Mailbox 11
  1404F  Uint16 RFP12 : 1 ;
  1405F                   // 12 RFP for Mailbox 12
  1406F  Uint16 RFP13 : 1 ;
  1407F                   // 13 RFP for Mailbox 13
  1408F  Uint16 RFP14 : 1 ;
  1409F                   // 14 RFP for Mailbox 14
  1410F  Uint16 RFP15 : 1 ;
  1411F                   // 15 RFP for Mailbox 15
  1412F  Uint16 RFP16 : 1 ;
  1413F                   // 16 RFP for Mailbox 16
  1414F  Uint16 RFP17 : 1 ;
  1415F                   // 17 RFP for Mailbox 17
  1416F  Uint16 RFP18 : 1 ;
  1417F                   // 18 RFP for Mailbox 18
  1418F  Uint16 RFP19 : 1 ;
  1419F                   // 19 RFP for Mailbox 19
  1420F  Uint16 RFP20 : 1 ;
  1421F                   // 20 RFP for Mailbox 20
  1422F  Uint16 RFP21 : 1 ;
  1423F                   // 21 RFP for Mailbox 21
  1424F  Uint16 RFP22 : 1 ;
  1425F                   // 22 RFP for Mailbox 22
  1426F  Uint16 RFP23 : 1 ;
  1427F                   // 23 RFP for Mailbox 23
  1428F  Uint16 RFP24 : 1 ;
  1429F                   // 24 RFP for Mailbox 24
  1430F  Uint16 RFP25 : 1 ;
  1431F                   // 25 RFP for Mailbox 25
  1432F  Uint16 RFP26 : 1 ;
  1433F                   // 26 RFP for Mailbox 26
  1434F  Uint16 RFP27 : 1 ;
  1435F                   // 27 RFP for Mailbox 27
  1436F  Uint16 RFP28 : 1 ;
  1437F                   // 28 RFP for Mailbox 28
  1438F  Uint16 RFP29 : 1 ;
  1439F                   // 29 RFP for Mailbox 29
  1440F  Uint16 RFP30 : 1 ;
  1441F                   // 30 RFP for Mailbox 30
  1442F  Uint16 RFP31 : 1 ;
  1443F                   // 31 RFP for Mailbox 31
  1444F} ;
  1445F/* Allow access to the bit fields or entire register */
  1446F
  1447Funion CANRFP_REG
  1448F{
  1449F  Uint32 all ;
  1450F  struct CANRFP_BITS bit ;
  1451F} ;
  1452F/* eCAN Global Acceptance Mask register (CANGAM) bit definitions */
  1453F
  1454Fstruct CANGAM_BITS
  1455F{                    // bits description
  1456F  Uint16 GAM150 : 16 ;
  1457F                     // 15:0 Global acceptance mask bits 0-15
  1458F  Uint16 GAM2816 : 13 ;
  1459F                      // 28:16 Global acceptance mask bits 16-28
  1460F  Uint16 rsvd : 2 ;
  1461F                  // 30:29 reserved
  1462F  Uint16 AMI : 1 ;
  1463F                 // 31 AMI bit
  1464F} ;
  1465F/* Allow access to the bit fields or entire register */
  1466F
  1467Funion CANGAM_REG
  1468F{
  1469F  Uint32 all ;
  1470F  struct CANGAM_BITS bit ;
  1471F} ;
  1472F/* eCAN Master Control register (CANMC) bit definitions */
  1473F
  1474Fstruct CANMC_BITS
  1475F{                   // bits description
  1476F  Uint16 MBNR : 5 ;
  1477F                  // 4:0 MBX #for CDR bit
  1478F  Uint16 SRES : 1 ;
  1479F                  // 5 Soft reset
  1480F  Uint16 STM : 1 ;
  1481F                 // 6 Self-test mode
  1482F  Uint16 ABO : 1 ;
  1483F                 // 7 Auto bus-on
  1484F  Uint16 CDR : 1 ;
  1485F                 // 8 Change data request
  1486F  Uint16 WUBA : 1 ;
  1487F                  // 9 Wake-up on bus activity
  1488F  Uint16 DBO : 1 ;
  1489F                 // 10 Data-byte order
  1490F  Uint16 PDR : 1 ;
  1491F                 // 11 Power-down mode request
  1492F  Uint16 CCR : 1 ;
  1493F                 // 12 Change configuration request
  1494F  Uint16 SCB : 1 ;
  1495F                 // 13 SCC compatibility bit
  1496F  Uint16 TCC : 1 ;
  1497F                 // 14 TSC MSB clear bit
  1498F  Uint16 MBCC : 1 ;
  1499F                  // 15 TSC clear bit thru mailbox 16
  1500F  Uint16 SUSP : 1 ;
  1501F                  // 16 SUSPEND free/soft bit
  1502F  Uint16 rsvd : 15 ;
  1503F                   // 31:17 reserved
  1504F} ;
  1505F/* Allow access to the bit fields or entire register */
  1506F
  1507Funion CANMC_REG
  1508F{
  1509F  Uint32 all ;
  1510F  struct CANMC_BITS bit ;
  1511F} ;
  1512F/* eCAN Bit -timing configuration register (CANBTC) bit definitions */
  1513F
  1514Fstruct CANBTC_BITS
  1515F{                    // bits description
  1516F  Uint16 TSEG2REG : 3 ;
  1517F                      // 2:0 TSEG2 register value
  1518F  Uint16 TSEG1REG : 4 ;
  1519F                      // 6:3 TSEG1 register value
  1520F  Uint16 SAM : 1 ;
  1521F                 // 7 Sample-point setting
  1522F  Uint16 SJWREG : 2 ;
  1523F                    // 9:8 Synchroniztion Jump Width register value
  1524F  Uint16 rsvd1 : 6 ;
  1525F                   // 15:10 reserved
  1526F  Uint16 BRPREG : 8 ;
  1527F                    // 23:16 Baudrate prescaler register value
  1528F  Uint16 rsvd2 : 8 ;
  1529F                   // 31:24 reserved
  1530F} ;
  1531F/* Allow access to the bit fields or entire register */
  1532F
  1533Funion CANBTC_REG
  1534F{
  1535F  Uint32 all ;
  1536F  struct CANBTC_BITS bit ;
  1537F} ;
  1538F/* eCAN Error & Status register (CANES) bit definitions */
  1539F
  1540Fstruct CANES_BITS
  1541F{                   // bits description
  1542F  Uint16 TM : 1 ;
  1543F                // 0 Transmit Mode
  1544F  Uint16 RM : 1 ;
  1545F                // 1 Receive Mode
  1546F  Uint16 rsvd1 : 1 ;
  1547F                   // 2 reserved
  1548F  Uint16 PDA : 1 ;
  1549F                 // 3 Power-down acknowledge
  1550F  Uint16 CCE : 1 ;
  1551F                 // 4 Change Configuration Enable
  1552F  Uint16 SMA : 1 ;
  1553F                 // 5 Suspend Mode Acknowledge
  1554F  Uint16 rsvd2 : 10 ;
  1555F                    // 15:6 reserved
  1556F  Uint16 EW : 1 ;
  1557F                // 16 Warning status
  1558F  Uint16 EP : 1 ;
  1559F                // 17 Error Passive status
  1560F  Uint16 BO : 1 ;
  1561F                // 18 Bus-off status
  1562F  Uint16 ACKE : 1 ;
  1563F                  // 19 Acknowledge error
  1564F  Uint16 SE : 1 ;
  1565F                // 20 Stuff error
  1566F  Uint16 CRCE : 1 ;
  1567F                  // 21 CRC error
  1568F  Uint16 SA1 : 1 ;
  1569F                 // 22 Stuck at Dominant error
  1570F  Uint16 BE : 1 ;
  1571F                // 23 Bit error
  1572F  Uint16 FE : 1 ;
  1573F                // 24 Framing error
  1574F  Uint16 rsvd3 : 7 ;
  1575F                   // 31:25 reserved
  1576F} ;
  1577F/* Allow access to the bit fields or entire register */
  1578F
  1579Funion CANES_REG
  1580F{
  1581F  Uint32 all ;
  1582F  struct CANES_BITS bit ;
  1583F} ;
  1584F/* eCAN Transmit Error Counter register (CANTEC) bit definitions */
  1585F
  1586Fstruct CANTEC_BITS
  1587F{                    // bits description
  1588F  Uint16 TEC : 8 ;
  1589F                 // 7:0 TEC
  1590F  Uint16 rsvd1 : 8 ;
  1591F                   // 15:8 reserved
  1592F  Uint16 rsvd2 : 16 ;
  1593F                    // 31:16 reserved
  1594F} ;
  1595F/* Allow access to the bit fields or entire register */
  1596F
  1597Funion CANTEC_REG
  1598F{
  1599F  Uint32 all ;
  1600F  struct CANTEC_BITS bit ;
  1601F} ;
  1602F/* eCAN Receive Error Counter register (CANREC) bit definitions */
  1603F
  1604Fstruct CANREC_BITS
  1605F{                    // bits description
  1606F  Uint16 REC : 8 ;
  1607F                 // 7:0 REC
  1608F  Uint16 rsvd1 : 8 ;
  1609F                   // 15:8 reserved
  1610F  Uint16 rsvd2 : 16 ;
  1611F                    // 31:16 reserved
  1612F} ;
  1613F/* Allow access to the bit fields or entire register */
  1614F
  1615Funion CANREC_REG
  1616F{
  1617F  Uint32 all ;
  1618F  struct CANREC_BITS bit ;
  1619F} ;
  1620F/* eCAN Global Interrupt Flag 0 (CANGIF0) bit definitions */
  1621F
  1622Fstruct CANGIF0_BITS
  1623F{                     // bits description
  1624F  Uint16 MIV0 : 5 ;
  1625F                  // 4:0 Mailbox Interrupt Vector
  1626F  Uint16 rsvd1 : 3 ;
  1627F                   // 7:5 reserved
  1628F  Uint16 WLIF0 : 1 ;
  1629F                   // 8 Warning level interrupt flag
  1630F  Uint16 EPIF0 : 1 ;
  1631F                   // 9 Error-passive interrupt flag
  1632F  Uint16 BOIF0 : 1 ;
  1633F                   // 10 Bus-off interrupt flag
  1634F  Uint16 RMLIF0 : 1 ;
  1635F                    // 11 Received message lost interrupt flag
  1636F  Uint16 WUIF0 : 1 ;
  1637F                   // 12 Wakeup interrupt flag
  1638F  Uint16 WDIF0 : 1 ;
  1639F                   // 13 Write denied interrupt flag
  1640F  Uint16 AAIF0 : 1 ;
  1641F                   // 14 Abort Ack interrupt flag
  1642F  Uint16 GMIF0 : 1 ;
  1643F                   // 15 Global MBX interrupt flag
  1644F  Uint16 TCOF0 : 1 ;
  1645F                   // 16 TSC Overflow flag
  1646F  Uint16 MTOF0 : 1 ;
  1647F                   // 17 Mailbox Timeout flag
  1648F  Uint16 rsvd2 : 14 ;
  1649F                    // 31:18 reserved
  1650F} ;
  1651F/* Allow access to the bit fields or entire register */
  1652F
  1653Funion CANGIF0_REG
  1654F{
  1655F  Uint32 all ;
  1656F  struct CANGIF0_BITS bit ;
  1657F} ;
  1658F/* eCAN Global Interrupt Mask register (CANGIM) bit definitions */
  1659F
  1660Fstruct CANGIM_BITS
  1661F{                    // bits description
  1662F  Uint16 I0EN : 1 ;
  1663F                  // 0 Interrupt 0 enable
  1664F  Uint16 I1EN : 1 ;
  1665F                  // 1 Interrupt 1 enable
  1666F  Uint16 GIL : 1 ;
  1667F                 // 2 Global Interrupt Level
  1668F  Uint16 rsvd1 : 5 ;
  1669F                   // 7:3 reserved
  1670F  Uint16 WLIM : 1 ;
  1671F                  // 8 Warning level interrupt mask
  1672F  Uint16 EPIM : 1 ;
  1673F                  // 9 Error-passive interrupt mask
  1674F  Uint16 BOIM : 1 ;
  1675F                  // 10 Bus-off interrupt mask
  1676F  Uint16 RMLIM : 1 ;
  1677F                   // 11 Received message lost interrupt mask
  1678F  Uint16 WUIM : 1 ;
  1679F                  // 12 Wakeup interrupt mask
  1680F  Uint16 WDIM : 1 ;
  1681F                  // 13 Write denied interrupt mask
  1682F  Uint16 AAIM : 1 ;
  1683F                  // 14 Abort Ack interrupt mask
  1684F  Uint16 rsvd2 : 1 ;
  1685F                   // 15 reserved
  1686F  Uint16 TCOM : 1 ;
  1687F                  // 16 TSC overflow interrupt mask
  1688F  Uint16 MTOM : 1 ;
  1689F                  // 17 MBX Timeout interrupt mask
  1690F  Uint16 rsvd3 : 14 ;
  1691F                    // 31:18 reserved
  1692F} ;
  1693F/* Allow access to the bit fields or entire register */
  1694F
  1695Funion CANGIM_REG
  1696F{
  1697F  Uint32 all ;
  1698F  struct CANGIM_BITS bit ;
  1699F} ;
  1700F/* eCAN Global Interrupt Flag 1 (eCANGIF1) bit definitions */
  1701F
  1702Fstruct CANGIF1_BITS
  1703F{                     // bits description
  1704F  Uint16 MIV1 : 5 ;
  1705F                  // 4:0 Mailbox Interrupt Vector
  1706F  Uint16 rsvd1 : 3 ;
  1707F                   // 7:5 reserved
  1708F  Uint16 WLIF1 : 1 ;
  1709F                   // 8 Warning level interrupt flag
  1710F  Uint16 EPIF1 : 1 ;
  1711F                   // 9 Error-passive interrupt flag
  1712F  Uint16 BOIF1 : 1 ;
  1713F                   // 10 Bus-off interrupt flag
  1714F  Uint16 RMLIF1 : 1 ;
  1715F                    // 11 Received message lost interrupt flag
  1716F  Uint16 WUIF1 : 1 ;
  1717F                   // 12 Wakeup interrupt flag
  1718F  Uint16 WDIF1 : 1 ;
  1719F                   // 13 Write denied interrupt flag
  1720F  Uint16 AAIF1 : 1 ;
  1721F                   // 14 Abort Ack interrupt flag
  1722F  Uint16 GMIF1 : 1 ;
  1723F                   // 15 Global MBX interrupt flag
  1724F  Uint16 TCOF1 : 1 ;
  1725F                   // 16 TSC Overflow flag
  1726F  Uint16 MTOF1 : 1 ;
  1727F                   // 17 Mailbox Timeout flag
  1728F  Uint16 rsvd2 : 14 ;
  1729F                    // 31:18 reserved
  1730F} ;
  1731F/* Allow access to the bit fields or entire register */
  1732F
  1733Funion CANGIF1_REG
  1734F{
  1735F  Uint32 all ;
  1736F  struct CANGIF1_BITS bit ;
  1737F} ;
  1738F/* eCAN Mailbox Interrupt Mask register (CANMIM) bit definitions */
  1739F
  1740Fstruct CANMIM_BITS
  1741F{                    // bit description
  1742F  Uint16 MIM0 : 1 ;
  1743F                  // 0 MIM for Mailbox 0
  1744F  Uint16 MIM1 : 1 ;
  1745F                  // 1 MIM for Mailbox 1
  1746F  Uint16 MIM2 : 1 ;
  1747F                  // 2 MIM for Mailbox 2
  1748F  Uint16 MIM3 : 1 ;
  1749F                  // 3 MIM for Mailbox 3
  1750F  Uint16 MIM4 : 1 ;
  1751F                  // 4 MIM for Mailbox 4
  1752F  Uint16 MIM5 : 1 ;
  1753F                  // 5 MIM for Mailbox 5
  1754F  Uint16 MIM6 : 1 ;
  1755F                  // 6 MIM for Mailbox 6
  1756F  Uint16 MIM7 : 1 ;
  1757F                  // 7 MIM for Mailbox 7
  1758F  Uint16 MIM8 : 1 ;
  1759F                  // 8 MIM for Mailbox 8
  1760F  Uint16 MIM9 : 1 ;
  1761F                  // 9 MIM for Mailbox 9
  1762F  Uint16 MIM10 : 1 ;
  1763F                   // 10 MIM for Mailbox 10
  1764F  Uint16 MIM11 : 1 ;
  1765F                   // 11 MIM for Mailbox 11
  1766F  Uint16 MIM12 : 1 ;
  1767F                   // 12 MIM for Mailbox 12
  1768F  Uint16 MIM13 : 1 ;
  1769F                   // 13 MIM for Mailbox 13
  1770F  Uint16 MIM14 : 1 ;
  1771F                   // 14 MIM for Mailbox 14
  1772F  Uint16 MIM15 : 1 ;
  1773F                   // 15 MIM for Mailbox 15
  1774F  Uint16 MIM16 : 1 ;
  1775F                   // 16 MIM for Mailbox 16
  1776F  Uint16 MIM17 : 1 ;
  1777F                   // 17 MIM for Mailbox 17
  1778F  Uint16 MIM18 : 1 ;
  1779F                   // 18 MIM for Mailbox 18
  1780F  Uint16 MIM19 : 1 ;
  1781F                   // 19 MIM for Mailbox 19
  1782F  Uint16 MIM20 : 1 ;
  1783F                   // 20 MIM for Mailbox 20
  1784F  Uint16 MIM21 : 1 ;
  1785F                   // 21 MIM for Mailbox 21
  1786F  Uint16 MIM22 : 1 ;
  1787F                   // 22 MIM for Mailbox 22
  1788F  Uint16 MIM23 : 1 ;
  1789F                   // 23 MIM for Mailbox 23
  1790F  Uint16 MIM24 : 1 ;
  1791F                   // 24 MIM for Mailbox 24
  1792F  Uint16 MIM25 : 1 ;
  1793F                   // 25 MIM for Mailbox 25
  1794F  Uint16 MIM26 : 1 ;
  1795F                   // 26 MIM for Mailbox 26
  1796F  Uint16 MIM27 : 1 ;
  1797F                   // 27 MIM for Mailbox 27
  1798F  Uint16 MIM28 : 1 ;
  1799F                   // 28 MIM for Mailbox 28
  1800F  Uint16 MIM29 : 1 ;
  1801F                   // 29 MIM for Mailbox 29
  1802F  Uint16 MIM30 : 1 ;
  1803F                   // 30 MIM for Mailbox 30
  1804F  Uint16 MIM31 : 1 ;
  1805F                   // 31 MIM for Mailbox 31
  1806F} ;
  1807F/* Allow access to the bit fields or entire register */
  1808F
  1809Funion CANMIM_REG
  1810F{
  1811F  Uint32 all ;
  1812F  struct CANMIM_BITS bit ;
  1813F} ;
  1814F/* eCAN Mailbox Interrupt Level register (CANMIL) bit definitions */
  1815F
  1816Fstruct CANMIL_BITS
  1817F{                    // bit description
  1818F  Uint16 MIL0 : 1 ;
  1819F                  // 0 0 -> Int 9.5 1 -> Int 9.6
  1820F  Uint16 MIL1 : 1 ;
  1821F                  // 1 0 -> Int 9.5 1 -> Int 9.6
  1822F  Uint16 MIL2 : 1 ;
  1823F                  // 2 0 -> Int 9.5 1 -> Int 9.6
  1824F  Uint16 MIL3 : 1 ;
  1825F                  // 3 0 -> Int 9.5 1 -> Int 9.6
  1826F  Uint16 MIL4 : 1 ;
  1827F                  // 4 0 -> Int 9.5 1 -> Int 9.6
  1828F  Uint16 MIL5 : 1 ;
  1829F                  // 5 0 -> Int 9.5 1 -> Int 9.6
  1830F  Uint16 MIL6 : 1 ;
  1831F                  // 6 0 -> Int 9.5 1 -> Int 9.6
  1832F  Uint16 MIL7 : 1 ;
  1833F                  // 7 0 -> Int 9.5 1 -> Int 9.6
  1834F  Uint16 MIL8 : 1 ;
  1835F                  // 8 0 -> Int 9.5 1 -> Int 9.6
  1836F  Uint16 MIL9 : 1 ;
  1837F                  // 9 0 -> Int 9.5 1 -> Int 9.6
  1838F  Uint16 MIL10 : 1 ;
  1839F                   // 10 0 -> Int 9.5 1 -> Int 9.6
  1840F  Uint16 MIL11 : 1 ;
  1841F                   // 11 0 -> Int 9.5 1 -> Int 9.6
  1842F  Uint16 MIL12 : 1 ;
  1843F                   // 12 0 -> Int 9.5 1 -> Int 9.6
  1844F  Uint16 MIL13 : 1 ;
  1845F                   // 13 0 -> Int 9.5 1 -> Int 9.6
  1846F  Uint16 MIL14 : 1 ;
  1847F                   // 14 0 -> Int 9.5 1 -> Int 9.6
  1848F  Uint16 MIL15 : 1 ;
  1849F                   // 15 0 -> Int 9.5 1 -> Int 9.6
  1850F  Uint16 MIL16 : 1 ;
  1851F                   // 16 0 -> Int 9.5 1 -> Int 9.6
  1852F  Uint16 MIL17 : 1 ;
  1853F                   // 17 0 -> Int 9.5 1 -> Int 9.6
  1854F  Uint16 MIL18 : 1 ;
  1855F                   // 18 0 -> Int 9.5 1 -> Int 9.6
  1856F  Uint16 MIL19 : 1 ;
  1857F                   // 19 0 -> Int 9.5 1 -> Int 9.6
  1858F  Uint16 MIL20 : 1 ;
  1859F                   // 20 0 -> Int 9.5 1 -> Int 9.6
  1860F  Uint16 MIL21 : 1 ;
  1861F                   // 21 0 -> Int 9.5 1 -> Int 9.6
  1862F  Uint16 MIL22 : 1 ;
  1863F                   // 22 0 -> Int 9.5 1 -> Int 9.6
  1864F  Uint16 MIL23 : 1 ;
  1865F                   // 23 0 -> Int 9.5 1 -> Int 9.6
  1866F  Uint16 MIL24 : 1 ;
  1867F                   // 24 0 -> Int 9.5 1 -> Int 9.6
  1868F  Uint16 MIL25 : 1 ;
  1869F                   // 25 0 -> Int 9.5 1 -> Int 9.6
  1870F  Uint16 MIL26 : 1 ;
  1871F                   // 26 0 -> Int 9.5 1 -> Int 9.6
  1872F  Uint16 MIL27 : 1 ;
  1873F                   // 27 0 -> Int 9.5 1 -> Int 9.6
  1874F  Uint16 MIL28 : 1 ;
  1875F                   // 28 0 -> Int 9.5 1 -> Int 9.6
  1876F  Uint16 MIL29 : 1 ;
  1877F                   // 29 0 -> Int 9.5 1 -> Int 9.6
  1878F  Uint16 MIL30 : 1 ;
  1879F                   // 30 0 -> Int 9.5 1 -> Int 9.6
  1880F  Uint16 MIL31 : 1 ;
  1881F                   // 31 0 -> Int 9.5 1 -> Int 9.6
  1882F} ;
  1883F/* Allow access to the bit fields or entire register */
  1884F
  1885Funion CANMIL_REG
  1886F{
  1887F  Uint32 all ;
  1888F  struct CANMIL_BITS bit ;
  1889F} ;
  1890F/* eCAN Overwrite Protection Control register (CANOPC) bit definitions */
  1891F
  1892Fstruct CANOPC_BITS
  1893F{                    // bit description
  1894F  Uint16 OPC0 : 1 ;
  1895F                  // 0 OPC for Mailbox 0
  1896F  Uint16 OPC1 : 1 ;
  1897F                  // 1 OPC for Mailbox 1
  1898F  Uint16 OPC2 : 1 ;
  1899F                  // 2 OPC for Mailbox 2
  1900F  Uint16 OPC3 : 1 ;
  1901F                  // 3 OPC for Mailbox 3
  1902F  Uint16 OPC4 : 1 ;
  1903F                  // 4 OPC for Mailbox 4
  1904F  Uint16 OPC5 : 1 ;
  1905F                  // 5 OPC for Mailbox 5
  1906F  Uint16 OPC6 : 1 ;
  1907F                  // 6 OPC for Mailbox 6
  1908F  Uint16 OPC7 : 1 ;
  1909F                  // 7 OPC for Mailbox 7
  1910F  Uint16 OPC8 : 1 ;
  1911F                  // 8 OPC for Mailbox 8
  1912F  Uint16 OPC9 : 1 ;
  1913F                  // 9 OPC for Mailbox 9
  1914F  Uint16 OPC10 : 1 ;
  1915F                   // 10 OPC for Mailbox 10
  1916F  Uint16 OPC11 : 1 ;
  1917F                   // 11 OPC for Mailbox 11
  1918F  Uint16 OPC12 : 1 ;
  1919F                   // 12 OPC for Mailbox 12
  1920F  Uint16 OPC13 : 1 ;
  1921F                   // 13 OPC for Mailbox 13
  1922F  Uint16 OPC14 : 1 ;
  1923F                   // 14 OPC for Mailbox 14
  1924F  Uint16 OPC15 : 1 ;
  1925F                   // 15 OPC for Mailbox 15
  1926F  Uint16 OPC16 : 1 ;
  1927F                   // 16 OPC for Mailbox 16
  1928F  Uint16 OPC17 : 1 ;
  1929F                   // 17 OPC for Mailbox 17
  1930F  Uint16 OPC18 : 1 ;
  1931F                   // 18 OPC for Mailbox 18
  1932F  Uint16 OPC19 : 1 ;
  1933F                   // 19 OPC for Mailbox 19
  1934F  Uint16 OPC20 : 1 ;
  1935F                   // 20 OPC for Mailbox 20
  1936F  Uint16 OPC21 : 1 ;
  1937F                   // 21 OPC for Mailbox 21
  1938F  Uint16 OPC22 : 1 ;
  1939F                   // 22 OPC for Mailbox 22
  1940F  Uint16 OPC23 : 1 ;
  1941F                   // 23 OPC for Mailbox 23
  1942F  Uint16 OPC24 : 1 ;
  1943F                   // 24 OPC for Mailbox 24
  1944F  Uint16 OPC25 : 1 ;
  1945F                   // 25 OPC for Mailbox 25
  1946F  Uint16 OPC26 : 1 ;
  1947F                   // 26 OPC for Mailbox 26
  1948F  Uint16 OPC27 : 1 ;
  1949F                   // 27 OPC for Mailbox 27
  1950F  Uint16 OPC28 : 1 ;
  1951F                   // 28 OPC for Mailbox 28
  1952F  Uint16 OPC29 : 1 ;
  1953F                   // 29 OPC for Mailbox 29
  1954F  Uint16 OPC30 : 1 ;
  1955F                   // 30 OPC for Mailbox 30
  1956F  Uint16 OPC31 : 1 ;
  1957F                   // 31 OPC for Mailbox 31
  1958F} ;
  1959F/* Allow access to the bit fields or entire register */
  1960F
  1961Funion CANOPC_REG
  1962F{
  1963F  Uint32 all ;
  1964F  struct CANOPC_BITS bit ;
  1965F} ;
  1966F/* eCAN TX I/O Control Register (CANTIOC) bit definitions */
  1967F
  1968Fstruct CANTIOC_BITS
  1969F{                     // bits description
  1970F  Uint16 rsvd1 : 3 ;
  1971F                   // 2:0 reserved
  1972F  Uint16 TXFUNC : 1 ;
  1973F                    // 3 TXFUNC
  1974F  Uint16 rsvd2 : 12 ;
  1975F                    // 15:4 reserved
  1976F  Uint16 rsvd3 : 16 ;
  1977F                    // 31:16 reserved
  1978F} ;
  1979F/* Allow access to the bit fields or entire register */
  1980F
  1981Funion CANTIOC_REG
  1982F{
  1983F  Uint32 all ;
  1984F  struct CANTIOC_BITS bit ;
  1985F} ;
  1986F/* eCAN RX I/O Control Register (CANRIOC) bit definitions */
  1987F
  1988Fstruct CANRIOC_BITS
  1989F{                     // bits description
  1990F  Uint16 rsvd1 : 3 ;
  1991F                   // 2:0 reserved
  1992F  Uint16 RXFUNC : 1 ;
  1993F                    // 3 RXFUNC
  1994F  Uint16 rsvd2 : 12 ;
  1995F                    // 15:4 reserved
  1996F  Uint16 rsvd3 : 16 ;
  1997F                    // 31:16 reserved
  1998F} ;
  1999F/* Allow access to the bit fields or entire register */
  2000F
  2001Funion CANRIOC_REG
  2002F{
  2003F  Uint32 all ;
  2004F  struct CANRIOC_BITS bit ;
  2005F} ;
  2006F/* eCAN Time-out Control register (CANTOC) bit definitions */
  2007F
  2008Fstruct CANTOC_BITS
  2009F{                    // bit description
  2010F  Uint16 TOC0 : 1 ;
  2011F                  // 0 TOC for Mailbox 0
  2012F  Uint16 TOC1 : 1 ;
  2013F                  // 1 TOC for Mailbox 1
  2014F  Uint16 TOC2 : 1 ;
  2015F                  // 2 TOC for Mailbox 2
  2016F  Uint16 TOC3 : 1 ;
  2017F                  // 3 TOC for Mailbox 3
  2018F  Uint16 TOC4 : 1 ;
  2019F                  // 4 TOC for Mailbox 4
  2020F  Uint16 TOC5 : 1 ;
  2021F                  // 5 TOC for Mailbox 5
  2022F  Uint16 TOC6 : 1 ;
  2023F                  // 6 TOC for Mailbox 6
  2024F  Uint16 TOC7 : 1 ;
  2025F                  // 7 TOC for Mailbox 7
  2026F  Uint16 TOC8 : 1 ;
  2027F                  // 8 TOC for Mailbox 8
  2028F  Uint16 TOC9 : 1 ;
  2029F                  // 9 TOC for Mailbox 9
  2030F  Uint16 TOC10 : 1 ;
  2031F                   // 10 TOC for Mailbox 10
  2032F  Uint16 TOC11 : 1 ;
  2033F                   // 11 TOC for Mailbox 11
  2034F  Uint16 TOC12 : 1 ;
  2035F                   // 12 TOC for Mailbox 12
  2036F  Uint16 TOC13 : 1 ;
  2037F                   // 13 TOC for Mailbox 13
  2038F  Uint16 TOC14 : 1 ;
  2039F                   // 14 TOC for Mailbox 14
  2040F  Uint16 TOC15 : 1 ;
  2041F                   // 15 TOC for Mailbox 15
  2042F  Uint16 TOC16 : 1 ;
  2043F                   // 16 TOC for Mailbox 16
  2044F  Uint16 TOC17 : 1 ;
  2045F                   // 17 TOC for Mailbox 17
  2046F  Uint16 TOC18 : 1 ;
  2047F                   // 18 TOC for Mailbox 18
  2048F  Uint16 TOC19 : 1 ;
  2049F                   // 19 TOC for Mailbox 19
  2050F  Uint16 TOC20 : 1 ;
  2051F                   // 20 TOC for Mailbox 20
  2052F  Uint16 TOC21 : 1 ;
  2053F                   // 21 TOC for Mailbox 21
  2054F  Uint16 TOC22 : 1 ;
  2055F                   // 22 TOC for Mailbox 22
  2056F  Uint16 TOC23 : 1 ;
  2057F                   // 23 TOC for Mailbox 23
  2058F  Uint16 TOC24 : 1 ;
  2059F                   // 24 TOC for Mailbox 24
  2060F  Uint16 TOC25 : 1 ;
  2061F                   // 25 TOC for Mailbox 25
  2062F  Uint16 TOC26 : 1 ;
  2063F                   // 26 TOC for Mailbox 26
  2064F  Uint16 TOC27 : 1 ;
  2065F                   // 27 TOC for Mailbox 27
  2066F  Uint16 TOC28 : 1 ;
  2067F                   // 28 TOC for Mailbox 28
  2068F  Uint16 TOC29 : 1 ;
  2069F                   // 29 TOC for Mailbox 29
  2070F  Uint16 TOC30 : 1 ;
  2071F                   // 30 TOC for Mailbox 30
  2072F  Uint16 TOC31 : 1 ;
  2073F                   // 31 TOC for Mailbox 31
  2074F} ;
  2075F/* Allow access to the bit fields or entire register */
  2076F
  2077Funion CANTOC_REG
  2078F{
  2079F  Uint32 all ;
  2080F  struct CANTOC_BITS bit ;
  2081F} ;
  2082F/* eCAN Time-out Status register (CANTOS) bit definitions */
  2083F
  2084Fstruct CANTOS_BITS
  2085F{                    // bit description
  2086F  Uint16 TOS0 : 1 ;
  2087F                  // 0 TOS for Mailbox 0
  2088F  Uint16 TOS1 : 1 ;
  2089F                  // 1 TOS for Mailbox 1
  2090F  Uint16 TOS2 : 1 ;
  2091F                  // 2 TOS for Mailbox 2
  2092F  Uint16 TOS3 : 1 ;
  2093F                  // 3 TOS for Mailbox 3
  2094F  Uint16 TOS4 : 1 ;
  2095F                  // 4 TOS for Mailbox 4
  2096F  Uint16 TOS5 : 1 ;
  2097F                  // 5 TOS for Mailbox 5
  2098F  Uint16 TOS6 : 1 ;
  2099F                  // 6 TOS for Mailbox 6
  2100F  Uint16 TOS7 : 1 ;
  2101F                  // 7 TOS for Mailbox 7
  2102F  Uint16 TOS8 : 1 ;
  2103F                  // 8 TOS for Mailbox 8
  2104F  Uint16 TOS9 : 1 ;
  2105F                  // 9 TOS for Mailbox 9
  2106F  Uint16 TOS10 : 1 ;
  2107F                   // 10 TOS for Mailbox 10
  2108F  Uint16 TOS11 : 1 ;
  2109F                   // 11 TOS for Mailbox 11
  2110F  Uint16 TOS12 : 1 ;
  2111F                   // 12 TOS for Mailbox 12
  2112F  Uint16 TOS13 : 1 ;
  2113F                   // 13 TOS for Mailbox 13
  2114F  Uint16 TOS14 : 1 ;
  2115F                   // 14 TOS for Mailbox 14
  2116F  Uint16 TOS15 : 1 ;
  2117F                   // 15 TOS for Mailbox 15
  2118F  Uint16 TOS16 : 1 ;
  2119F                   // 16 TOS for Mailbox 16
  2120F  Uint16 TOS17 : 1 ;
  2121F                   // 17 TOS for Mailbox 17
  2122F  Uint16 TOS18 : 1 ;
  2123F                   // 18 TOS for Mailbox 18
  2124F  Uint16 TOS19 : 1 ;
  2125F                   // 19 TOS for Mailbox 19
  2126F  Uint16 TOS20 : 1 ;
  2127F                   // 20 TOS for Mailbox 20
  2128F  Uint16 TOS21 : 1 ;
  2129F                   // 21 TOS for Mailbox 21
  2130F  Uint16 TOS22 : 1 ;
  2131F                   // 22 TOS for Mailbox 22
  2132F  Uint16 TOS23 : 1 ;
  2133F                   // 23 TOS for Mailbox 23
  2134F  Uint16 TOS24 : 1 ;
  2135F                   // 24 TOS for Mailbox 24
  2136F  Uint16 TOS25 : 1 ;
  2137F                   // 25 TOS for Mailbox 25
  2138F  Uint16 TOS26 : 1 ;
  2139F                   // 26 TOS for Mailbox 26
  2140F  Uint16 TOS27 : 1 ;
  2141F                   // 27 TOS for Mailbox 27
  2142F  Uint16 TOS28 : 1 ;
  2143F                   // 28 TOS for Mailbox 28
  2144F  Uint16 TOS29 : 1 ;
  2145F                   // 29 TOS for Mailbox 29
  2146F  Uint16 TOS30 : 1 ;
  2147F                   // 30 TOS for Mailbox 30
  2148F  Uint16 TOS31 : 1 ;
  2149F                   // 31 TOS for Mailbox 31
  2150F} ;
  2151F/* Allow access to the bit fields or entire register */
  2152F
  2153Funion CANTOS_REG
  2154F{
  2155F  Uint32 all ;
  2156F  struct CANTOS_BITS bit ;
  2157F} ;
  2158F/**************************************/
  2159F/* eCAN Control & Status register file */
  2160F/**************************************/
  2161F
  2162Fstruct ECAN_REGS
  2163F{
  2164F  union CANME_REG CANME ; // Mailbox Enable
  2165F  union CANMD_REG CANMD ; // Mailbox Direction
  2166F  union CANTRS_REG CANTRS ; // Transmit Request Set
  2167F  union CANTRR_REG CANTRR ; // Transmit Request Reset
  2168F  union CANTA_REG CANTA ; // Transmit Acknowledge
  2169F  union CANAA_REG CANAA ; // Abort Acknowledge
  2170F  union CANRMP_REG CANRMP ; // Received Message Pending
  2171F  union CANRML_REG CANRML ; // Received Message Lost
  2172F  union CANRFP_REG CANRFP ; // Remote Frame Pending
  2173F  union CANGAM_REG CANGAM ; // Global Acceptance Mask
  2174F  union CANMC_REG CANMC ; // Master Control
  2175F  union CANBTC_REG CANBTC ; // Bit Timing
  2176F  union CANES_REG CANES ; // Error Status
  2177F  union CANTEC_REG CANTEC ; // Transmit Error Counter
  2178F  union CANREC_REG CANREC ; // Receive Error Counter
  2179F  union CANGIF0_REG CANGIF0 ; // Global Interrupt Flag 0
  2180F  union CANGIM_REG CANGIM ; // Global Interrupt Mask 0
  2181F  union CANGIF1_REG CANGIF1 ; // Global Interrupt Flag 1
  2182F  union CANMIM_REG CANMIM ; // Mailbox Interrupt Mask
  2183F  union CANMIL_REG CANMIL ; // Mailbox Interrupt Level
  2184F  union CANOPC_REG CANOPC ; // Overwrite Protection Control
  2185F  union CANTIOC_REG CANTIOC ; // TX I/O Control
  2186F  union CANRIOC_REG CANRIOC ; // RX I/O Control
  2187F  Uint32 CANTSC ; // Time-stamp counter
  2188F  union CANTOC_REG CANTOC ; // Time-out Control
  2189F  union CANTOS_REG CANTOS ; // Time-out Status
  2190F} ;
  2191F/* --------------------------------------------------- */
  2192F/* eCAN Mailbox Registers */
  2193F/* ----------------------------------------------------*/
  2194F/* eCAN Message ID (MSGID) bit definitions */
  2195F
  2196Fstruct CANMSGID_BITS
  2197F{                      // bits description
  2198F  Uint16 EXTMSGID_L : 16 ;
  2199F                         // 0:15
  2200F  Uint16 EXTMSGID_H : 2 ;
  2201F                        // 16:17
  2202F  Uint16 STDMSGID : 11 ;
  2203F                       // 18:28
  2204F  Uint16 AAM : 1 ;
  2205F                 // 29
  2206F  Uint16 AME : 1 ;
  2207F                 // 30
  2208F  Uint16 IDE : 1 ;
  2209F                 // 31
  2210F} ;
  2211F/* Allow access to the bit fields or entire register */
  2212F
  2213Funion CANMSGID_REG
  2214F{
  2215F  Uint32 all ;
  2216F  struct CANMSGID_BITS bit ;
  2217F} ;
  2218F/* eCAN Message Control Register (MSGCTRL) bit definitions */
  2219F
  2220Fstruct CANMSGCTRL_BITS
  2221F{                        // bits description
  2222F  Uint16 DLC : 4 ;
  2223F                 // 0:3
  2224F  Uint16 RTR : 1 ;
  2225F                 // 4
  2226F  Uint16 rsvd1 : 3 ;
  2227F                   // 7:5 reserved
  2228F  Uint16 TPL : 5 ;
  2229F                 // 12:8
  2230F  Uint16 rsvd2 : 3 ;
  2231F                   // 15:13 reserved
  2232F  Uint16 rsvd3 : 16 ;
  2233F                    // 31:16 reserved
  2234F} ;
  2235F/* Allow access to the bit fields or entire register */
  2236F
  2237Funion CANMSGCTRL_REG
  2238F{
  2239F  Uint32 all ;
  2240F  struct CANMSGCTRL_BITS bit ;
  2241F} ;
  2242F/* eCAN Message Data Register low (MDR_L) word definitions */
  2243F
  2244Fstruct CANMDL_WORDS
  2245F{                     // bits description
  2246F  Uint16 LOW_WORD : 16 ;
  2247F                       // 0:15
  2248F  Uint16 HI_WORD : 16 ;
  2249F                      // 31:16
  2250F} ;
  2251F/* eCAN Message Data Register low (MDR_L) byte definitions */
  2252F
  2253Fstruct CANMDL_BYTES
  2254F{                     // bits description
  2255F  Uint16 BYTE3 : 8 ;
  2256F                   // 31:24
  2257F  Uint16 BYTE2 : 8 ;
  2258F                   // 23:16
  2259F  Uint16 BYTE1 : 8 ;
  2260F                   // 15:8
  2261F  Uint16 BYTE0 : 8 ;
  2262F                   // 7:0
  2263F} ;
  2264F/* Allow access to the bit fields or entire register */
  2265F
  2266Funion CANMDL_REG
  2267F{
  2268F  Uint32 all ;
  2269F  struct CANMDL_WORDS word ;
  2270F  struct CANMDL_BYTES byte ;
  2271F} ;
  2272F/* eCAN Message Data Register high (MDR_H) word definitions */
  2273F
  2274Fstruct CANMDH_WORDS
  2275F{                     // bits description
  2276F  Uint16 LOW_WORD : 16 ;
  2277F                       // 0:15
  2278F  Uint16 HI_WORD : 16 ;
  2279F                      // 31:16
  2280F} ;
  2281F/* eCAN Message Data Register low (MDR_H) byte definitions */
  2282F
  2283Fstruct CANMDH_BYTES
  2284F{                     // bits description
  2285F  Uint16 BYTE7 : 8 ;
  2286F                   // 63:56
  2287F  Uint16 BYTE6 : 8 ;
  2288F                   // 55:48
  2289F  Uint16 BYTE5 : 8 ;
  2290F                   // 47:40
  2291F  Uint16 BYTE4 : 8 ;
  2292F                   // 39:32
  2293F} ;
  2294F/* Allow access to the bit fields or entire register */
  2295F
  2296Funion CANMDH_REG
  2297F{
  2298F  Uint32 all ;
  2299F  struct CANMDH_WORDS word ;
  2300F  struct CANMDH_BYTES byte ;
  2301F} ;
  2302F
  2303Fstruct MBOX
  2304F{
  2305F  union CANMSGID_REG MSGID ;
  2306F  union CANMSGCTRL_REG MSGCTRL ;
  2307F  union CANMDL_REG MDL ;
  2308F  union CANMDH_REG MDH ;
  2309F} ;
  2310F/**************************************/
  2311F/* eCAN Mailboxes */
  2312F/**************************************/
  2313F
  2314Fstruct ECAN_MBOXES
  2315F{
  2316F  struct MBOX MBOX0 ;
  2317F  struct MBOX MBOX1 ;
  2318F  struct MBOX MBOX2 ;
  2319F  struct MBOX MBOX3 ;
  2320F  struct MBOX MBOX4 ;
  2321F  struct MBOX MBOX5 ;
  2322F  struct MBOX MBOX6 ;
  2323F  struct MBOX MBOX7 ;
  2324F  struct MBOX MBOX8 ;
  2325F  struct MBOX MBOX9 ;
  2326F  struct MBOX MBOX10 ;
  2327F  struct MBOX MBOX11 ;
  2328F  struct MBOX MBOX12 ;
  2329F  struct MBOX MBOX13 ;
  2330F  struct MBOX MBOX14 ;
  2331F  struct MBOX MBOX15 ;
  2332F  struct MBOX MBOX16 ;
  2333F  struct MBOX MBOX17 ;
  2334F  struct MBOX MBOX18 ;
  2335F  struct MBOX MBOX19 ;
  2336F  struct MBOX MBOX20 ;
  2337F  struct MBOX MBOX21 ;
  2338F  struct MBOX MBOX22 ;
  2339F  struct MBOX MBOX23 ;
  2340F  struct MBOX MBOX24 ;
  2341F  struct MBOX MBOX25 ;
  2342F  struct MBOX MBOX26 ;
  2343F  struct MBOX MBOX27 ;
  2344F  struct MBOX MBOX28 ;
  2345F  struct MBOX MBOX29 ;
  2346F  struct MBOX MBOX30 ;
  2347F  struct MBOX MBOX31 ;
  2348F} ;
  2349F/* eCAN Local Acceptance Mask (LAM) bit definitions */
  2350F
  2351Fstruct CANLAM_BITS
  2352F{                    // bits description
  2353F  Uint16 LAM_L : 16 ;
  2354F                    // 0:15
  2355F  Uint16 LAM_H : 13 ;
  2356F                    // 16:28
  2357F  Uint16 rsvd1 : 2 ;
  2358F                   // 29:30 reserved
  2359F  Uint16 LAMI : 1 ;
  2360F                  // 31
  2361F} ;
  2362F/* Allow access to the bit fields or entire register */
  2363F
  2364Funion CANLAM_REG
  2365F{
  2366F  Uint32 all ;
  2367F  struct CANLAM_BITS bit ;
  2368F} ;
  2369F/**************************************/
  2370F/* eCAN Local Acceptance Masks */
  2371F/**************************************/
  2372F/* eCAN LAM File */
  2373F
  2374Fstruct LAM_REGS
  2375F{
  2376F  union CANLAM_REG LAM0 ;
  2377F  union CANLAM_REG LAM1 ;
  2378F  union CANLAM_REG LAM2 ;
  2379F  union CANLAM_REG LAM3 ;
  2380F  union CANLAM_REG LAM4 ;
  2381F  union CANLAM_REG LAM5 ;
  2382F  union CANLAM_REG LAM6 ;
  2383F  union CANLAM_REG LAM7 ;
  2384F  union CANLAM_REG LAM8 ;
  2385F  union CANLAM_REG LAM9 ;
  2386F  union CANLAM_REG LAM10 ;
  2387F  union CANLAM_REG LAM11 ;
  2388F  union CANLAM_REG LAM12 ;
  2389F  union CANLAM_REG LAM13 ;
  2390F  union CANLAM_REG LAM14 ;
  2391F  union CANLAM_REG LAM15 ;
  2392F  union CANLAM_REG LAM16 ;
  2393F  union CANLAM_REG LAM17 ;
  2394F  union CANLAM_REG LAM18 ;
  2395F  union CANLAM_REG LAM19 ;
  2396F  union CANLAM_REG LAM20 ;
  2397F  union CANLAM_REG LAM21 ;
  2398F  union CANLAM_REG LAM22 ;
  2399F  union CANLAM_REG LAM23 ;
  2400F  union CANLAM_REG LAM24 ;
  2401F  union CANLAM_REG LAM25 ;
  2402F  union CANLAM_REG LAM26 ;
  2403F  union CANLAM_REG LAM27 ;
  2404F  union CANLAM_REG LAM28 ;
  2405F  union CANLAM_REG LAM29 ;
  2406F  union CANLAM_REG LAM30 ;
  2407F  union CANLAM_REG LAM31 ;
  2408F} ;
  2409F/* Mailbox MOTS File */
  2410F
  2411Fstruct MOTS_REGS
  2412F{
  2413F  Uint32 MOTS0 ;
  2414F  Uint32 MOTS1 ;
  2415F  Uint32 MOTS2 ;
  2416F  Uint32 MOTS3 ;
  2417F  Uint32 MOTS4 ;
  2418F  Uint32 MOTS5 ;
  2419F  Uint32 MOTS6 ;
  2420F  Uint32 MOTS7 ;
  2421F  Uint32 MOTS8 ;
  2422F  Uint32 MOTS9 ;
  2423F  Uint32 MOTS10 ;
  2424F  Uint32 MOTS11 ;
  2425F  Uint32 MOTS12 ;
  2426F  Uint32 MOTS13 ;
  2427F  Uint32 MOTS14 ;
  2428F  Uint32 MOTS15 ;
  2429F  Uint32 MOTS16 ;
  2430F  Uint32 MOTS17 ;
  2431F  Uint32 MOTS18 ;
  2432F  Uint32 MOTS19 ;
  2433F  Uint32 MOTS20 ;
  2434F  Uint32 MOTS21 ;
  2435F  Uint32 MOTS22 ;
  2436F  Uint32 MOTS23 ;
  2437F  Uint32 MOTS24 ;
  2438F  Uint32 MOTS25 ;
  2439F  Uint32 MOTS26 ;
  2440F  Uint32 MOTS27 ;
  2441F  Uint32 MOTS28 ;
  2442F  Uint32 MOTS29 ;
  2443F  Uint32 MOTS30 ;
  2444F  Uint32 MOTS31 ;
  2445F} ;
  2446F/* Mailbox MOTO File */
  2447F
  2448Fstruct MOTO_REGS
  2449F{
  2450F  Uint32 MOTO0 ;
  2451F  Uint32 MOTO1 ;
  2452F  Uint32 MOTO2 ;
  2453F  Uint32 MOTO3 ;
  2454F  Uint32 MOTO4 ;
  2455F  Uint32 MOTO5 ;
  2456F  Uint32 MOTO6 ;
  2457F  Uint32 MOTO7 ;
  2458F  Uint32 MOTO8 ;
  2459F  Uint32 MOTO9 ;
  2460F  Uint32 MOTO10 ;
  2461F  Uint32 MOTO11 ;
  2462F  Uint32 MOTO12 ;
  2463F  Uint32 MOTO13 ;
  2464F  Uint32 MOTO14 ;
  2465F  Uint32 MOTO15 ;
  2466F  Uint32 MOTO16 ;
  2467F  Uint32 MOTO17 ;
  2468F  Uint32 MOTO18 ;
  2469F  Uint32 MOTO19 ;
  2470F  Uint32 MOTO20 ;
  2471F  Uint32 MOTO21 ;
  2472F  Uint32 MOTO22 ;
  2473F  Uint32 MOTO23 ;
  2474F  Uint32 MOTO24 ;
  2475F  Uint32 MOTO25 ;
  2476F  Uint32 MOTO26 ;
  2477F  Uint32 MOTO27 ;
  2478F  Uint32 MOTO28 ;
  2479F  Uint32 MOTO29 ;
  2480F  Uint32 MOTO30 ;
  2481F  Uint32 MOTO31 ;
  2482F} ;
  2483F//---------------------------------------------------------------------------
  2484F// eCAN External References & Function Declarations:
  2485F//
  2486F
  2487Fextern volatile struct ECAN_REGS
  2488F  ECanaRegs ;
  2489F
  2490Fextern volatile struct ECAN_MBOXES
  2491F  ECanaMboxes ;
  2492F
  2493Fextern volatile struct LAM_REGS
  2494F  ECanaLAMRegs ;
  2495F
  2496Fextern volatile struct MOTO_REGS
  2497F  ECanaMOTORegs ;
  2498F
  2499Fextern volatile struct MOTS_REGS
  2500F  ECanaMOTSRegs ;
  2501F
  2502Fextern volatile struct ECAN_REGS
  2503F  ECanbRegs ;
  2504F
  2505Fextern volatile struct ECAN_MBOXES
  2506F  ECanbMboxes ;
  2507F
  2508Fextern volatile struct LAM_REGS
  2509F  ECanbLAMRegs ;
  2510F
  2511Fextern volatile struct MOTO_REGS
  2512F  ECanbMOTORegs ;
  2513F
  2514Fextern volatile struct MOTS_REGS
  2515F  ECanbMOTSRegs ;
  2516F       /* extern "C" */
  2517F       // end of DSP2833x_ECAN.H definition
  2518F//===========================================================================
  2519F// End of file.
  2520F//===========================================================================
  2521F 
  2522F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECan.h*/
  2523F/*   CLOSE_FILE Include File */
  2524F 
  2525F               // Enhanced eCAN Registers
  2526F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECap.h */
  2527F// TI File $Revision: /main/1 $
  2528F// Checkin $Date: August 18, 2006 13:52:07 $
  2529F//###########################################################################
  2530F//
  2531F// FILE: DSP2833x_ECap.h
  2532F//
  2533F// TITLE: DSP2833x Enhanced Capture Module Register Bit Definitions.
  2534F//
  2535F//###########################################################################
  2536F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  2537F// $Release Date: August 4, 2009 $
  2538F//###########################################################################
  2539F#ifndef DSP2833x_ECAP_H
  2540F#define DSP2833x_ECAP_H
  2541F//----------------------------------------------------
  2542F// Capture control register 1 bit definitions */
  2543F
  2544Fstruct ECCTL1_BITS
  2545F{                    // bits description
  2546F  Uint16 CAP1POL : 1 ;
  2547F                     // 0 Capture Event 1 Polarity select
  2548F  Uint16 CTRRST1 : 1 ;
  2549F                     // 1 Counter Reset on Capture Event 1
  2550F  Uint16 CAP2POL : 1 ;
  2551F                     // 2 Capture Event 2 Polarity select
  2552F  Uint16 CTRRST2 : 1 ;
  2553F                     // 3 Counter Reset on Capture Event 2
  2554F  Uint16 CAP3POL : 1 ;
  2555F                     // 4 Capture Event 3 Polarity select
  2556F  Uint16 CTRRST3 : 1 ;
  2557F                     // 5 Counter Reset on Capture Event 3
  2558F  Uint16 CAP4POL : 1 ;
  2559F                     // 6 Capture Event 4 Polarity select
  2560F  Uint16 CTRRST4 : 1 ;
  2561F                     // 7 Counter Reset on Capture Event 4
  2562F  Uint16 CAPLDEN : 1 ;
  2563F                     // 8 Enable Loading CAP1-4 regs on a Cap Event
  2564F  Uint16 PRESCALE : 5 ;
  2565F                      // 13:9 Event Filter prescale select
  2566F  Uint16 FREE_SOFT : 2 ;
  2567F                       // 15:14 Emulation mode
  2568F} ;
  2569F
  2570Funion ECCTL1_REG
  2571F{
  2572F  Uint16 all ;
  2573F  struct ECCTL1_BITS bit ;
  2574F} ;
  2575F// In V1.1 the STOPVALUE bit field was changed to
  2576F// STOP_WRAP. This correlated to a silicon change from
  2577F// F2833x Rev 0 to Rev A.
  2578F//----------------------------------------------------
  2579F// Capture control register 2 bit definitions */
  2580F
  2581Fstruct ECCTL2_BITS
  2582F{                    // bits description
  2583F  Uint16 CONT_ONESHT : 1 ;
  2584F                         // 0 Continuous or one-shot
  2585F  Uint16 STOP_WRAP : 2 ;
  2586F                       // 2:1 Stop value for one-shot, Wrap for continuous
  2587F  Uint16 REARM : 1 ;
  2588F                   // 3 One-shot re-arm
  2589F  Uint16 TSCTRSTOP : 1 ;
  2590F                       // 4 TSCNT counter stop
  2591F  Uint16 SYNCI_EN : 1 ;
  2592F                      // 5 Counter sync-in select
  2593F  Uint16 SYNCO_SEL : 2 ;
  2594F                       // 7:6 Sync-out mode
  2595F  Uint16 SWSYNC : 1 ;
  2596F                    // 8 SW forced counter sync
  2597F  Uint16 CAP_APWM : 1 ;
  2598F                      // 9 CAP/APWM operating mode select
  2599F  Uint16 APWMPOL : 1 ;
  2600F                     // 10 APWM output polarity select
  2601F  Uint16 rsvd1 : 5 ;
  2602F                   // 15:11
  2603F} ;
  2604F
  2605Funion ECCTL2_REG
  2606F{
  2607F  Uint16 all ;
  2608F  struct ECCTL2_BITS bit ;
  2609F} ;
  2610F//----------------------------------------------------
  2611F// ECAP interrupt enable register bit definitions */
  2612F
  2613Fstruct ECEINT_BITS
  2614F{                    // bits description
  2615F  Uint16 rsvd1 : 1 ;
  2616F                   // 0 reserved
  2617F  Uint16 CEVT1 : 1 ;
  2618F                   // 1 Capture Event 1 Interrupt Enable
  2619F  Uint16 CEVT2 : 1 ;
  2620F                   // 2 Capture Event 2 Interrupt Enable
  2621F  Uint16 CEVT3 : 1 ;
  2622F                   // 3 Capture Event 3 Interrupt Enable
  2623F  Uint16 CEVT4 : 1 ;
  2624F                   // 4 Capture Event 4 Interrupt Enable
  2625F  Uint16 CTROVF : 1 ;
  2626F                    // 5 Counter Overflow Interrupt Enable
  2627F  Uint16 CTR_EQ_PRD : 1 ;
  2628F                        // 6 Period Equal Interrupt Enable
  2629F  Uint16 CTR_EQ_CMP : 1 ;
  2630F                        // 7 Compare Equal Interrupt Enable
  2631F  Uint16 rsvd2 : 8 ;
  2632F                   // 15:8 reserved
  2633F} ;
  2634F
  2635Funion ECEINT_REG
  2636F{
  2637F  Uint16 all ;
  2638F  struct ECEINT_BITS bit ;
  2639F} ;
  2640F//----------------------------------------------------
  2641F// ECAP interrupt flag register bit definitions */
  2642F
  2643Fstruct ECFLG_BITS
  2644F{                   // bits description
  2645F  Uint16 INT : 1 ;
  2646F                 // 0 Global Flag
  2647F  Uint16 CEVT1 : 1 ;
  2648F                   // 1 Capture Event 1 Interrupt Flag
  2649F  Uint16 CEVT2 : 1 ;
  2650F                   // 2 Capture Event 2 Interrupt Flag
  2651F  Uint16 CEVT3 : 1 ;
  2652F                   // 3 Capture Event 3 Interrupt Flag
  2653F  Uint16 CEVT4 : 1 ;
  2654F                   // 4 Capture Event 4 Interrupt Flag
  2655F  Uint16 CTROVF : 1 ;
  2656F                    // 5 Counter Overflow Interrupt Flag
  2657F  Uint16 CTR_EQ_PRD : 1 ;
  2658F                        // 6 Period Equal Interrupt Flag
  2659F  Uint16 CTR_EQ_CMP : 1 ;
  2660F                        // 7 Compare Equal Interrupt Flag
  2661F  Uint16 rsvd2 : 8 ;
  2662F                   // 15:8 reserved
  2663F} ;
  2664F
  2665Funion ECFLG_REG
  2666F{
  2667F  Uint16 all ;
  2668F  struct ECFLG_BITS bit ;
  2669F} ;
  2670F//----------------------------------------------------
  2671F
  2672Fstruct ECAP_REGS
  2673F{
  2674F  Uint32 TSCTR ; // Time stamp counter
  2675F  Uint32 CTRPHS ; // Counter phase
  2676F  Uint32 CAP1 ; // Capture 1
  2677F  Uint32 CAP2 ; // Capture 2
  2678F  Uint32 CAP3 ; // Capture 3
  2679F  Uint32 CAP4 ; // Capture 4
  2680F  Uint16 rsvd1 [ 8 ] ;
  2681F                    // reserved
  2682F  union ECCTL1_REG ECCTL1 ; // Capture Control Reg 1
  2683F  union ECCTL2_REG ECCTL2 ; // Capture Control Reg 2
  2684F  union ECEINT_REG ECEINT ; // ECAP interrupt enable
  2685F  union ECFLG_REG ECFLG ; // ECAP interrupt flags
  2686F  union ECFLG_REG ECCLR ; // ECAP interrupt clear
  2687F  union ECEINT_REG ECFRC ; // ECAP interrupt force
  2688F  Uint16 rsvd2 [ 6 ] ;
  2689F                    // reserved
  2690F} ;
  2691F//---------------------------------------------------------------------------
  2692F// GPI/O External References & Function Declarations:
  2693F//
  2694F
  2695Fextern volatile struct ECAP_REGS
  2696F  ECap1Regs ;
  2697F
  2698Fextern volatile struct ECAP_REGS
  2699F  ECap2Regs ;
  2700F
  2701Fextern volatile struct ECAP_REGS
  2702F  ECap3Regs ;
  2703F
  2704Fextern volatile struct ECAP_REGS
  2705F  ECap4Regs ;
  2706F
  2707Fextern volatile struct ECAP_REGS
  2708F  ECap5Regs ;
  2709F
  2710Fextern volatile struct ECAP_REGS
  2711F  ECap6Regs ;
  2712F       /* extern "C" */
  2713F       // end of DSP2833x_ECAP_H definition
  2714F//===========================================================================
  2715F// End of file.
  2716F//===========================================================================
  2717F 
  2718F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECap.h*/
  2719F/*   CLOSE_FILE Include File */
  2720F 
  2721F               // Enhanced Capture
  2722F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DMA.h */
  2723F// TI File $Revision: /main/11 $
  2724F// Checkin $Date: June 23, 2008 11:34:15 $
  2725F//###########################################################################
  2726F//
  2727F// FILE: DSP2833x_DMA.h
  2728F//
  2729F// TITLE: DSP2833x DMA Module Register Bit Definitions.
  2730F//
  2731F//###########################################################################
  2732F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  2733F// $Release Date: August 4, 2009 $
  2734F//###########################################################################
  2735F#ifndef DSP2833x_DMA_H
  2736F#define DSP2833x_DMA_H
  2737F//----------------------------------------------------
  2738F// Channel MODE register bit definitions:
  2739F
  2740Fstruct MODE_BITS
  2741F{                  // bits description
  2742F  Uint16 PERINTSEL : 5 ;
  2743F                       // 4:0 Peripheral Interrupt and Sync Select Bits (R/W):
  2744F                             // 0 no interrupt
  2745F               // 1 SEQ1INT & ADCSYNC
  2746F                             // 2 SEQ2INT
  2747F               // 3 XINT1
  2748F               // 4 XINT2
  2749F               // 5 XINT3
  2750F               // 6 XINT4
  2751F               // 7 XINT5
  2752F               // 8 XINT6
  2753F               // 9 XINT7
  2754F               // 10 XINT13
  2755F               // 11 TINT0
  2756F               // 12 TINT1
  2757F               // 13 TINT2
  2758F               // 14 MXEVTA & MXSYNCA
  2759F               // 15 MREVTA & MRSYNCA
  2760F               // 16 MXEVTB & MXSYNCB
  2761F               // 17 MREVTB & MRSYNCB
  2762F                                 // 18 ePWM1SOCA
  2763F                                 // 19 ePWM1SOCB
  2764F                                 // 20 ePWM2SOCA
  2765F                                 // 21 ePWM2SOCB
  2766F                                 // 22 ePWM3SOCA
  2767F                                 // 23 ePWM3SOCB
  2768F                                 // 24 ePWM4SOCA
  2769F                                 // 25 ePWM4SOCB
  2770F                                 // 26 ePWM5SOCA
  2771F                                 // 27 ePWM5SOCB
  2772F                                 // 28 ePWM6SOCA
  2773F                                 // 29 ePWM6SOCB
  2774F                                 // 30:31 no interrupt
  2775F  Uint16 rsvd1 : 2 ;
  2776F                   // 6:5 (R=0:0)
  2777F  Uint16 OVRINTE : 1 ;
  2778F                     // 7 Overflow Interrupt Enable (R/W):
  2779F                             // 0 overflow interrupt disabled
  2780F                             // 1 overflow interrupt enabled
  2781F  Uint16 PERINTE : 1 ;
  2782F                     // 8 Peripheral Interrupt Enable Bit (R/W):
  2783F                             // 0 peripheral interrupt disabled
  2784F                             // 1 peripheral interrupt enabled
  2785F  Uint16 CHINTMODE : 1 ;
  2786F                       // 9 Channel Interrupt Mode Bit (R/W):
  2787F                             // 0 generate interrupt at beginning of new transfer
  2788F                             // 1 generate interrupt at end of transfer
  2789F  Uint16 ONESHOT : 1 ;
  2790F                     // 10 One Shot Mode Bit (R/W):
  2791F                             // 0 only interrupt event triggers single burst transfer
  2792F                             // 1 first interrupt triggers burst, continue until transfer count is zero
  2793F  Uint16 CONTINUOUS : 1 ;
  2794F                        // 11 Continous Mode Bit (R/W):
  2795F                             // 0 stop when transfer count is zero
  2796F                             // 1 re-initialize when transfer count is zero
  2797F  Uint16 SYNCE : 1 ;
  2798F                   // 12 Sync Enable Bit (R/W):
  2799F                             // 0 ignore selected interrupt sync signal
  2800F                             // 1 enable selected interrupt sync signal
  2801F  Uint16 SYNCSEL : 1 ;
  2802F                     // 13 Sync Select Bit (R/W):
  2803F                             // 0 sync signal controls source wrap counter
  2804F                             // 1 sync signal controls destination wrap counter
  2805F  Uint16 DATASIZE : 1 ;
  2806F                      // 14 Data Size Mode Bit (R/W):
  2807F                             // 0 16-bit data transfer size
  2808F                             // 1 32-bit data transfer size
  2809F  Uint16 CHINTE : 1 ;
  2810F                    // 15 Channel Interrupt Enable Bit (R/W):
  2811F                             // 0 channel interrupt disabled
  2812F                             // 1 channel interrupt enabled
  2813F} ;
  2814F
  2815Funion MODE_REG
  2816F{
  2817F  Uint16 all ;
  2818F  struct MODE_BITS bit ;
  2819F} ;
  2820F//----------------------------------------------------
  2821F// Channel CONTROL register bit definitions:
  2822F
  2823Fstruct CONTROL_BITS
  2824F{                     // bits description
  2825F  Uint16 RUN : 1 ;
  2826F                 // 0 Run Bit (R=0/W=1)
  2827F  Uint16 HALT : 1 ;
  2828F                  // 1 Halt Bit (R=0/W=1)
  2829F  Uint16 SOFTRESET : 1 ;
  2830F                       // 2 Soft Reset Bit (R=0/W=1)
  2831F  Uint16 PERINTFRC : 1 ;
  2832F                       // 3 Interrupt Force Bit (R=0/W=1)
  2833F  Uint16 PERINTCLR : 1 ;
  2834F                       // 4 Interrupt Clear Bit (R=0/W=1)
  2835F  Uint16 SYNCFRC : 1 ;
  2836F                     // 5 Sync Force Bit (R=0/W=1)
  2837F  Uint16 SYNCCLR : 1 ;
  2838F                     // 6 Sync Clear Bit (R=0/W=1)
  2839F  Uint16 ERRCLR : 1 ;
  2840F                    // 7 Error Clear Bit (R=0/W=1)
  2841F  Uint16 PERINTFLG : 1 ;
  2842F                       // 8 Interrupt Flag Bit (R):
  2843F                             // 0 no interrupt pending
  2844F                             // 1 interrupt pending
  2845F  Uint16 SYNCFLG : 1 ;
  2846F                     // 9 Sync Flag Bit (R):
  2847F                             // 0 no sync pending
  2848F                             // 1 sync pending
  2849F  Uint16 SYNCERR : 1 ;
  2850F                     // 10 Sync Error Flag Bit (R):
  2851F                             // 0 no sync error
  2852F                             // 1 sync error detected
  2853F  Uint16 TRANSFERSTS : 1 ;
  2854F                         // 11 Transfer Status Bit (R):
  2855F                             // 0 no transfer in progress or pending
  2856F                             // 1 transfer in progress or pending
  2857F  Uint16 BURSTSTS : 1 ;
  2858F                      // 12 Burst Status Bit (R):
  2859F                             // 0 no burst in progress or pending
  2860F                             // 1 burst in progress or pending
  2861F  Uint16 RUNSTS : 1 ;
  2862F                    // 13 Run Status Bit (R):
  2863F                             // 0 channel not running or halted
  2864F                             // 1 channel running
  2865F  Uint16 OVRFLG : 1 ;
  2866F                    // 14 Overflow Flag Bit(R)
  2867F                             // 0 no overflow event
  2868F                             // 1 overflow event
  2869F  Uint16 rsvd1 : 1 ;
  2870F                   // 15 (R=0)
  2871F} ;
  2872F
  2873Funion CONTROL_REG
  2874F{
  2875F  Uint16 all ;
  2876F  struct CONTROL_BITS bit ;
  2877F} ;
  2878F//----------------------------------------------------
  2879F// DMACTRL register bit definitions:
  2880F
  2881Fstruct DMACTRL_BITS
  2882F{                     // bits description
  2883F  Uint16 HARDRESET : 1 ;
  2884F                       // 0 Hard Reset Bit (R=0/W=1)
  2885F  Uint16 PRIORITYRESET : 1 ;
  2886F                           // 1 Priority Reset Bit (R=0/W=1)
  2887F  Uint16 rsvd1 : 14 ;
  2888F                    // 15:2 (R=0:0)
  2889F} ;
  2890F
  2891Funion DMACTRL_REG
  2892F{
  2893F  Uint16 all ;
  2894F  struct DMACTRL_BITS bit ;
  2895F} ;
  2896F//----------------------------------------------------
  2897F// DEBUGCTRL register bit definitions:
  2898F
  2899Fstruct DEBUGCTRL_BITS
  2900F{                       // bits description
  2901F  Uint16 rsvd1 : 15 ;
  2902F                    // 14:0 (R=0:0)
  2903F  Uint16 FREE : 1 ;
  2904F                  // 15 Debug Mode Bit (R/W):
  2905F                             // 0 halt after current read-write operation
  2906F                             // 1 continue running
  2907F} ;
  2908F
  2909Funion DEBUGCTRL_REG
  2910F{
  2911F  Uint16 all ;
  2912F  struct DEBUGCTRL_BITS bit ;
  2913F} ;
  2914F//----------------------------------------------------
  2915F// PRIORITYCTRL1 register bit definitions:
  2916F
  2917Fstruct PRIORITYCTRL1_BITS
  2918F{                           // bits description
  2919F  Uint16 CH1PRIORITY : 1 ;
  2920F                         // 0 Ch1 Priority Bit (R/W):
  2921F                             // 0 same priority as all other channels
  2922F                             // 1 highest priority channel
  2923F  Uint16 rsvd1 : 15 ;
  2924F                    // 15:1 (R=0:0)
  2925F} ;
  2926F
  2927Funion PRIORITYCTRL1_REG
  2928F{
  2929F  Uint16 all ;
  2930F  struct PRIORITYCTRL1_BITS bit ;
  2931F} ;
  2932F//----------------------------------------------------
  2933F// PRIORITYSTAT register bit definitions:
  2934F
  2935Fstruct PRIORITYSTAT_BITS
  2936F{                          // bits description
  2937F  Uint16 ACTIVESTS : 3 ;
  2938F                       // 2:0 Active Channel Status Bits (R):
  2939F                              // 0,0,0 no channel active
  2940F                              // 0,0,1 Ch1 channel active
  2941F                              // 0,1,0 Ch2 channel active
  2942F                              // 0,1,1 Ch3 channel active
  2943F                              // 1,0,0 Ch4 channel active
  2944F                              // 1,0,1 Ch5 channel active
  2945F                              // 1,1,0 Ch6 channel active
  2946F  Uint16 rsvd1 : 1 ;
  2947F                   // 3 (R=0)
  2948F  Uint16 ACTIVESTS_SHADOW : 3 ;
  2949F                              // 6:4 Active Channel Status Shadow Bits (R):
  2950F                              // 0,0,0 no channel active and interrupted by Ch1
  2951F                              // 0,0,1 cannot occur
  2952F                              // 0,1,0 Ch2 was active and interrupted by Ch1
  2953F                              // 0,1,1 Ch3 was active and interrupted by Ch1
  2954F                              // 1,0,0 Ch4 was active and interrupted by Ch1
  2955F                              // 1,0,1 Ch5 was active and interrupted by Ch1
  2956F                              // 1,1,0 Ch6 was active and interrupted by Ch1
  2957F  Uint16 rsvd2 : 9 ;
  2958F                   // 15:7 (R=0:0)
  2959F} ;
  2960F
  2961Funion PRIORITYSTAT_REG
  2962F{
  2963F  Uint16 all ;
  2964F  struct PRIORITYSTAT_BITS bit ;
  2965F} ;
  2966F// Burst Size
  2967F
  2968Fstruct BURST_SIZE_BITS
  2969F{                        // bits description
  2970F  Uint16 BURSTSIZE : 5 ;
  2971F                       // 4:0 Burst transfer size
  2972F  Uint16 rsvd1 : 11 ;
  2973F                    // 15:5 reserved
  2974F} ;
  2975F
  2976Funion BURST_SIZE_REG
  2977F{
  2978F  Uint16 all ;
  2979F  struct BURST_SIZE_BITS bit ;
  2980F} ;
  2981F// Burst Count
  2982F
  2983Fstruct BURST_COUNT_BITS
  2984F{                         // bits description
  2985F  Uint16 BURSTCOUNT : 5 ;
  2986F                        // 4:0 Burst transfer size
  2987F  Uint16 rsvd1 : 11 ;
  2988F                    // 15:5 reserved
  2989F} ;
  2990F
  2991Funion BURST_COUNT_REG
  2992F{
  2993F  Uint16 all ;
  2994F  struct BURST_COUNT_BITS bit ;
  2995F} ;
  2996F//----------------------------------------------------
  2997F// DMA Channel Registers:
  2998F
  2999Fstruct CH_REGS
  3000F{
  3001F  union MODE_REG MODE ; // Mode Register
  3002F  union CONTROL_REG CONTROL ; // Control Register
  3003F  union BURST_SIZE_REG BURST_SIZE ; // Burst Size Register
  3004F  union BURST_COUNT_REG BURST_COUNT ; // Burst Count Register
  3005F  int16 SRC_BURST_STEP ; // Source Burst Step Register
  3006F  int16 DST_BURST_STEP ; // Destination Burst Step Register
  3007F  Uint16 TRANSFER_SIZE ; // Transfer Size Register
  3008F  Uint16 TRANSFER_COUNT ; // Transfer Count Register
  3009F  int16 SRC_TRANSFER_STEP ; // Source Transfer Step Register
  3010F  int16 DST_TRANSFER_STEP ; // Destination Transfer Step Register
  3011F  Uint16 SRC_WRAP_SIZE ; // Source Wrap Size Register
  3012F  Uint16 SRC_WRAP_COUNT ; // Source Wrap Count Register
  3013F  int16 SRC_WRAP_STEP ; // Source Wrap Step Register
  3014F  Uint16 DST_WRAP_SIZE ; // Destination Wrap Size Register
  3015F  Uint16 DST_WRAP_COUNT ; // Destination Wrap Count Register
  3016F  int16 DST_WRAP_STEP ; // Destination Wrap Step Register
  3017F  Uint32 SRC_BEG_ADDR_SHADOW ; // Source Begin Address Shadow Register
  3018F  Uint32 SRC_ADDR_SHADOW ; // Source Address Shadow Register
  3019F  Uint32 SRC_BEG_ADDR_ACTIVE ; // Source Begin Address Active Register
  3020F  Uint32 SRC_ADDR_ACTIVE ; // Source Address Active Register
  3021F  Uint32 DST_BEG_ADDR_SHADOW ; // Destination Begin Address Shadow Register
  3022F  Uint32 DST_ADDR_SHADOW ; // Destination Address Shadow Register
  3023F  Uint32 DST_BEG_ADDR_ACTIVE ; // Destination Begin Address Active Register
  3024F  Uint32 DST_ADDR_ACTIVE ; // Destination Address Active Register
  3025F} ;
  3026F//----------------------------------------------------
  3027F// DMA Registers:
  3028F
  3029Fstruct DMA_REGS
  3030F{
  3031F  union DMACTRL_REG DMACTRL ; // DMA Control Register
  3032F  union DEBUGCTRL_REG DEBUGCTRL ; // Debug Control Register
  3033F  Uint16 rsvd0 ; // reserved
  3034F  Uint16 rsvd1 ; //
  3035F  union PRIORITYCTRL1_REG PRIORITYCTRL1 ; // Priority Control 1 Register
  3036F  Uint16 rsvd2 ; //
  3037F  union PRIORITYSTAT_REG PRIORITYSTAT ; // Priority Status Register
  3038F  Uint16 rsvd3 [ 25 ] ;
  3039F                     //
  3040F  struct CH_REGS CH1 ; // DMA Channel 1 Registers
  3041F  struct CH_REGS CH2 ; // DMA Channel 2 Registers
  3042F  struct CH_REGS CH3 ; // DMA Channel 3 Registers
  3043F  struct CH_REGS CH4 ; // DMA Channel 4 Registers
  3044F  struct CH_REGS CH5 ; // DMA Channel 5 Registers
  3045F  struct CH_REGS CH6 ; // DMA Channel 6 Registers
  3046F} ;
  3047F//---------------------------------------------------------------------------
  3048F// External References & Function Declarations:
  3049F//
  3050F
  3051Fextern volatile struct DMA_REGS
  3052F  DmaRegs ;
  3053F       /* extern "C" */
  3054F       // end of DSP2833x_DMA_H definition
  3055F//===========================================================================
  3056F// End of file.
  3057F//===========================================================================
  3058F 
  3059F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DMA.h*/
  3060F/*   CLOSE_FILE Include File */
  3061F 
  3062F                // DMA Registers
  3063F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EPwm.h */
  3064F// TI File $Revision: /main/1 $
  3065F// Checkin $Date: August 18, 2006 13:52:10 $
  3066F//###########################################################################
  3067F//
  3068F// FILE: DSP2833x_EPwm.h
  3069F//
  3070F// TITLE: DSP2833x Enhanced PWM Module Register Bit Definitions.
  3071F//
  3072F//###########################################################################
  3073F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  3074F// $Release Date: August 4, 2009 $
  3075F//###########################################################################
  3076F#ifndef DSP2833x_EPWM_H
  3077F#define DSP2833x_EPWM_H
  3078F//----------------------------------------------------
  3079F// Time base control register bit definitions */
  3080F
  3081Fstruct TBCTL_BITS
  3082F{                   // bits description
  3083F  Uint16 CTRMODE : 2 ;
  3084F                     // 1:0 Counter Mode
  3085F  Uint16 PHSEN : 1 ;
  3086F                   // 2 Phase load enable
  3087F  Uint16 PRDLD : 1 ;
  3088F                   // 3 Active period load
  3089F  Uint16 SYNCOSEL : 2 ;
  3090F                      // 5:4 Sync output select
  3091F  Uint16 SWFSYNC : 1 ;
  3092F                     // 6 Software force sync pulse
  3093F  Uint16 HSPCLKDIV : 3 ;
  3094F                       // 9:7 High speed time pre-scale
  3095F  Uint16 CLKDIV : 3 ;
  3096F                    // 12:10 Timebase clock pre-scale
  3097F  Uint16 PHSDIR : 1 ;
  3098F                    // 13 Phase Direction
  3099F  Uint16 FREE_SOFT : 2 ;
  3100F                       // 15:14 Emulation mode
  3101F} ;
  3102F
  3103Funion TBCTL_REG
  3104F{
  3105F  Uint16 all ;
  3106F  struct TBCTL_BITS bit ;
  3107F} ;
  3108F//----------------------------------------------------
  3109F// Time base status register bit definitions */
  3110F
  3111Fstruct TBSTS_BITS
  3112F{                   // bits description
  3113F  Uint16 CTRDIR : 1 ;
  3114F                    // 0 Counter direction status
  3115F  Uint16 SYNCI : 1 ;
  3116F                   // 1 External input sync status
  3117F  Uint16 CTRMAX : 1 ;
  3118F                    // 2 Counter max latched status
  3119F  Uint16 rsvd1 : 13 ;
  3120F                    // 15:3 reserved
  3121F} ;
  3122F
  3123Funion TBSTS_REG
  3124F{
  3125F  Uint16 all ;
  3126F  struct TBSTS_BITS bit ;
  3127F} ;
  3128F//----------------------------------------------------
  3129F// Compare control register bit definitions */
  3130F
  3131Fstruct CMPCTL_BITS
  3132F{                    // bits description
  3133F  Uint16 LOADAMODE : 2 ;
  3134F                       // 0:1 Active compare A
  3135F  Uint16 LOADBMODE : 2 ;
  3136F                       // 3:2 Active compare B
  3137F  Uint16 SHDWAMODE : 1 ;
  3138F                       // 4 Compare A block operating mode
  3139F  Uint16 rsvd1 : 1 ;
  3140F                   // 5 reserved
  3141F  Uint16 SHDWBMODE : 1 ;
  3142F                       // 6 Compare B block operating mode
  3143F  Uint16 rsvd2 : 1 ;
  3144F                   // 7 reserved
  3145F  Uint16 SHDWAFULL : 1 ;
  3146F                       // 8 Compare A Shadow registers full Status
  3147F  Uint16 SHDWBFULL : 1 ;
  3148F                       // 9 Compare B Shadow registers full Status
  3149F  Uint16 rsvd3 : 6 ;
  3150F                   // 15:10 reserved
  3151F} ;
  3152F
  3153Funion CMPCTL_REG
  3154F{
  3155F  Uint16 all ;
  3156F  struct CMPCTL_BITS bit ;
  3157F} ;
  3158F//----------------------------------------------------
  3159F// Action qualifier register bit definitions */
  3160F
  3161Fstruct AQCTL_BITS
  3162F{                   // bits description
  3163F  Uint16 ZRO : 2 ;
  3164F                 // 1:0 Action Counter = Zero
  3165F  Uint16 PRD : 2 ;
  3166F                 // 3:2 Action Counter = Period
  3167F  Uint16 CAU : 2 ;
  3168F                 // 5:4 Action Counter = Compare A up
  3169F  Uint16 CAD : 2 ;
  3170F                 // 7:6 Action Counter = Compare A down
  3171F  Uint16 CBU : 2 ;
  3172F                 // 9:8 Action Counter = Compare B up
  3173F  Uint16 CBD : 2 ;
  3174F                 // 11:10 Action Counter = Compare B down
  3175F  Uint16 rsvd : 4 ;
  3176F                  // 15:12 reserved
  3177F} ;
  3178F
  3179Funion AQCTL_REG
  3180F{
  3181F  Uint16 all ;
  3182F  struct AQCTL_BITS bit ;
  3183F} ;
  3184F//----------------------------------------------------
  3185F// Action qualifier SW force register bit definitions */
  3186F
  3187Fstruct AQSFRC_BITS
  3188F{                    // bits description
  3189F  Uint16 ACTSFA : 2 ;
  3190F                    // 1:0 Action when One-time SW Force A invoked
  3191F  Uint16 OTSFA : 1 ;
  3192F                   // 2 One-time SW Force A output
  3193F  Uint16 ACTSFB : 2 ;
  3194F                    // 4:3 Action when One-time SW Force B invoked
  3195F  Uint16 OTSFB : 1 ;
  3196F                   // 5 One-time SW Force A output
  3197F  Uint16 RLDCSF : 2 ;
  3198F                    // 7:6 Reload from Shadow options
  3199F  Uint16 rsvd1 : 8 ;
  3200F                   // 15:8 reserved
  3201F} ;
  3202F
  3203Funion AQSFRC_REG
  3204F{
  3205F  Uint16 all ;
  3206F  struct AQSFRC_BITS bit ;
  3207F} ;
  3208F//----------------------------------------------------
  3209F// Action qualifier continuous SW force register bit definitions */
  3210F
  3211Fstruct AQCSFRC_BITS
  3212F{                     // bits description
  3213F  Uint16 CSFA : 2 ;
  3214F                  // 1:0 Continuous Software Force on output A
  3215F  Uint16 CSFB : 2 ;
  3216F                  // 3:2 Continuous Software Force on output B
  3217F  Uint16 rsvd1 : 12 ;
  3218F                    // 15:4 reserved
  3219F} ;
  3220F
  3221Funion AQCSFRC_REG
  3222F{
  3223F  Uint16 all ;
  3224F  struct AQCSFRC_BITS bit ;
  3225F} ;
  3226F// As of version 1.1
  3227F// Changed the MODE bit-field to OUT_MODE
  3228F// Added the bit-field IN_MODE
  3229F// This corresponds to changes in silicon as of F2833x devices
  3230F// Rev A silicon.
  3231F//----------------------------------------------------
  3232F// Dead-band generator control register bit definitions
  3233F
  3234Fstruct DBCTL_BITS
  3235F{                   // bits description
  3236F  Uint16 OUT_MODE : 2 ;  // 1:0 Dead Band Output Mode Control
  3237F  Uint16 POLSEL : 2 ;
  3238F                    // 3:2 Polarity Select Control
  3239F  Uint16 IN_MODE : 2 ;
  3240F                     // 5:4 Dead Band Input Select Mode Control
  3241F  Uint16 rsvd1 : 10 ;
  3242F                    // 15:4 reserved
  3243F} ;
  3244F
  3245Funion DBCTL_REG
  3246F{
  3247F  Uint16 all ;
  3248F  struct DBCTL_BITS bit ;
  3249F} ;
  3250F//----------------------------------------------------
  3251F// Trip zone select register bit definitions
  3252F
  3253Fstruct TZSEL_BITS
  3254F{                   // bits description
  3255F  Uint16 CBC1 : 1 ;
  3256F                  // 0 TZ1 CBC select
  3257F  Uint16 CBC2 : 1 ;
  3258F                  // 1 TZ2 CBC select
  3259F  Uint16 CBC3 : 1 ;
  3260F                  // 2 TZ3 CBC select
  3261F  Uint16 CBC4 : 1 ;
  3262F                  // 3 TZ4 CBC select
  3263F  Uint16 CBC5 : 1 ;
  3264F                  // 4 TZ5 CBC select
  3265F  Uint16 CBC6 : 1 ;
  3266F                  // 5 TZ6 CBC select
  3267F  Uint16 rsvd1 : 2 ;
  3268F                   // 7:6 reserved
  3269F  Uint16 OSHT1 : 1 ;
  3270F                   // 8 One-shot TZ1 select
  3271F  Uint16 OSHT2 : 1 ;
  3272F                   // 9 One-shot TZ2 select
  3273F  Uint16 OSHT3 : 1 ;
  3274F                   // 10 One-shot TZ3 select
  3275F  Uint16 OSHT4 : 1 ;
  3276F                   // 11 One-shot TZ4 select
  3277F  Uint16 OSHT5 : 1 ;
  3278F                   // 12 One-shot TZ5 select
  3279F  Uint16 OSHT6 : 1 ;
  3280F                   // 13 One-shot TZ6 select
  3281F  Uint16 rsvd2 : 2 ;
  3282F                   // 15:14 reserved
  3283F} ;
  3284F
  3285Funion TZSEL_REG
  3286F{
  3287F  Uint16 all ;
  3288F  struct TZSEL_BITS bit ;
  3289F} ;
  3290F//----------------------------------------------------
  3291F// Trip zone control register bit definitions */
  3292F
  3293Fstruct TZCTL_BITS
  3294F{                   // bits description
  3295F  Uint16 TZA : 2 ;
  3296F                 // 1:0 TZ1 to TZ6 Trip Action On EPWMxA
  3297F  Uint16 TZB : 2 ;
  3298F                 // 3:2 TZ1 to TZ6 Trip Action On EPWMxB
  3299F  Uint16 rsvd : 12 ;
  3300F                   // 15:4 reserved
  3301F} ;
  3302F
  3303Funion TZCTL_REG
  3304F{
  3305F  Uint16 all ;
  3306F  struct TZCTL_BITS bit ;
  3307F} ;
  3308F//----------------------------------------------------
  3309F// Trip zone control register bit definitions */
  3310F
  3311Fstruct TZEINT_BITS
  3312F{                    // bits description
  3313F  Uint16 rsvd1 : 1 ;
  3314F                   // 0 reserved
  3315F  Uint16 CBC : 1 ;
  3316F                 // 1 Trip Zones Cycle By Cycle Int Enable
  3317F  Uint16 OST : 1 ;
  3318F                 // 2 Trip Zones One Shot Int Enable
  3319F  Uint16 rsvd2 : 13 ;
  3320F                    // 15:3 reserved
  3321F} ;
  3322F
  3323Funion TZEINT_REG
  3324F{
  3325F  Uint16 all ;
  3326F  struct TZEINT_BITS bit ;
  3327F} ;
  3328F//----------------------------------------------------
  3329F// Trip zone flag register bit definitions */
  3330F
  3331Fstruct TZFLG_BITS
  3332F{                   // bits description
  3333F  Uint16 INT : 1 ;
  3334F                 // 0 Global status
  3335F  Uint16 CBC : 1 ;
  3336F                 // 1 Trip Zones Cycle By Cycle Int
  3337F  Uint16 OST : 1 ;
  3338F                 // 2 Trip Zones One Shot Int
  3339F  Uint16 rsvd2 : 13 ;
  3340F                    // 15:3 reserved
  3341F} ;
  3342F
  3343Funion TZFLG_REG
  3344F{
  3345F  Uint16 all ;
  3346F  struct TZFLG_BITS bit ;
  3347F} ;
  3348F//----------------------------------------------------
  3349F// Trip zone flag clear register bit definitions */
  3350F
  3351Fstruct TZCLR_BITS
  3352F{                   // bits description
  3353F  Uint16 INT : 1 ;
  3354F                 // 0 Global status
  3355F  Uint16 CBC : 1 ;
  3356F                 // 1 Trip Zones Cycle By Cycle Int
  3357F  Uint16 OST : 1 ;
  3358F                 // 2 Trip Zones One Shot Int
  3359F  Uint16 rsvd2 : 13 ;
  3360F                    // 15:3 reserved
  3361F} ;
  3362F
  3363Funion TZCLR_REG
  3364F{
  3365F  Uint16 all ;
  3366F  struct TZCLR_BITS bit ;
  3367F} ;
  3368F//----------------------------------------------------
  3369F// Trip zone flag force register bit definitions */
  3370F
  3371Fstruct TZFRC_BITS
  3372F{                   // bits description
  3373F  Uint16 rsvd1 : 1 ;
  3374F                   // 0 reserved
  3375F  Uint16 CBC : 1 ;
  3376F                 // 1 Trip Zones Cycle By Cycle Int
  3377F  Uint16 OST : 1 ;
  3378F                 // 2 Trip Zones One Shot Int
  3379F  Uint16 rsvd2 : 13 ;
  3380F                    // 15:3 reserved
  3381F} ;
  3382F
  3383Funion TZFRC_REG
  3384F{
  3385F  Uint16 all ;
  3386F  struct TZFRC_BITS bit ;
  3387F} ;
  3388F//----------------------------------------------------
  3389F// Event trigger select register bit definitions */
  3390F
  3391Fstruct ETSEL_BITS
  3392F{                   // bits description
  3393F  Uint16 INTSEL : 3 ;
  3394F                    // 2:0 EPWMxINTn Select
  3395F  Uint16 INTEN : 1 ;
  3396F                   // 3 EPWMxINTn Enable
  3397F  Uint16 rsvd1 : 4 ;
  3398F                   // 7:4 reserved
  3399F  Uint16 SOCASEL : 3 ;
  3400F                     // 10:8 Start of conversion A Select
  3401F  Uint16 SOCAEN : 1 ;
  3402F                    // 11 Start of conversion A Enable
  3403F  Uint16 SOCBSEL : 3 ;
  3404F                     // 14:12 Start of conversion B Select
  3405F  Uint16 SOCBEN : 1 ;
  3406F                    // 15 Start of conversion B Enable
  3407F} ;
  3408F
  3409Funion ETSEL_REG
  3410F{
  3411F  Uint16 all ;
  3412F  struct ETSEL_BITS bit ;
  3413F} ;
  3414F//----------------------------------------------------
  3415F// Event trigger pre-scale register bit definitions */
  3416F
  3417Fstruct ETPS_BITS
  3418F{                  // bits description
  3419F  Uint16 INTPRD : 2 ;
  3420F                    // 1:0 EPWMxINTn Period Select
  3421F  Uint16 INTCNT : 2 ;
  3422F                    // 3:2 EPWMxINTn Counter Register
  3423F  Uint16 rsvd1 : 4 ;
  3424F                   // 7:4 reserved
  3425F  Uint16 SOCAPRD : 2 ;
  3426F                     // 9:8 EPWMxSOCA Period Select
  3427F  Uint16 SOCACNT : 2 ;
  3428F                     // 11:10 EPWMxSOCA Counter Register
  3429F  Uint16 SOCBPRD : 2 ;
  3430F                     // 13:12 EPWMxSOCB Period Select
  3431F  Uint16 SOCBCNT : 2 ;
  3432F                     // 15:14 EPWMxSOCB Counter Register
  3433F} ;
  3434F
  3435Funion ETPS_REG
  3436F{
  3437F  Uint16 all ;
  3438F  struct ETPS_BITS bit ;
  3439F} ;
  3440F//----------------------------------------------------
  3441F// Event trigger Flag register bit definitions */
  3442F
  3443Fstruct ETFLG_BITS
  3444F{                   // bits description
  3445F  Uint16 INT : 1 ;
  3446F                 // 0   EPWMxINTn Flag
  3447F  Uint16 rsvd1 : 1 ;
  3448F                   // 1 reserved
  3449F  Uint16 SOCA : 1 ;
  3450F                  // 2  EPWMxSOCA Flag
  3451F  Uint16 SOCB : 1 ;
  3452F                  // 3  EPWMxSOCB Flag
  3453F  Uint16 rsvd2 : 12 ;
  3454F                    // 15:4     reserved
  3455F} ;
  3456F
  3457Funion ETFLG_REG
  3458F{
  3459F  Uint16 all ;
  3460F  struct ETFLG_BITS bit ;
  3461F} ;
  3462F//----------------------------------------------------
  3463F// Event trigger Clear register bit definitions */
  3464F
  3465Fstruct ETCLR_BITS
  3466F{                   // bits description
  3467F  Uint16 INT : 1 ;
  3468F                 // 0   EPWMxINTn Clear
  3469F  Uint16 rsvd1 : 1 ;
  3470F                   // 1 reserved
  3471F  Uint16 SOCA : 1 ;
  3472F                  // 2  EPWMxSOCA Clear
  3473F  Uint16 SOCB : 1 ;
  3474F                  // 3  EPWMxSOCB Clear
  3475F  Uint16 rsvd2 : 12 ;
  3476F                    // 15:4     reserved
  3477F} ;
  3478F
  3479Funion ETCLR_REG
  3480F{
  3481F  Uint16 all ;
  3482F  struct ETCLR_BITS bit ;
  3483F} ;
  3484F//----------------------------------------------------
  3485F// Event trigger Force register bit definitions */
  3486F
  3487Fstruct ETFRC_BITS
  3488F{                   // bits description
  3489F  Uint16 INT : 1 ;
  3490F                 // 0   EPWMxINTn Force
  3491F  Uint16 rsvd1 : 1 ;
  3492F                   // 1 reserved
  3493F  Uint16 SOCA : 1 ;
  3494F                  // 2  EPWMxSOCA Force
  3495F  Uint16 SOCB : 1 ;
  3496F                  // 3  EPWMxSOCB Force
  3497F  Uint16 rsvd2 : 12 ;
  3498F                    // 15:4     reserved
  3499F} ;
  3500F
  3501Funion ETFRC_REG
  3502F{
  3503F  Uint16 all ;
  3504F  struct ETFRC_BITS bit ;
  3505F} ;
  3506F//----------------------------------------------------
  3507F// PWM chopper control register bit definitions */
  3508F
  3509Fstruct PCCTL_BITS
  3510F{                   // bits description
  3511F  Uint16 CHPEN : 1 ;
  3512F                   // 0 PWM chopping enable
  3513F  Uint16 OSHTWTH : 4 ;
  3514F                     // 4:1 One-shot pulse width
  3515F  Uint16 CHPFREQ : 3 ;
  3516F                     // 7:5 Chopping clock frequency
  3517F  Uint16 CHPDUTY : 3 ;
  3518F                     // 10:8 Chopping clock Duty cycle
  3519F  Uint16 rsvd1 : 5 ;
  3520F                   // 15:11 reserved
  3521F} ;
  3522F
  3523Funion PCCTL_REG
  3524F{
  3525F  Uint16 all ;
  3526F  struct PCCTL_BITS bit ;
  3527F} ;
  3528F
  3529Fstruct HRCNFG_BITS
  3530F{                       // bits description
  3531F  Uint16 EDGMODE : 2 ;  // 1:0 Edge Mode select Bits
  3532F  Uint16 CTLMODE : 1 ;  // 2 Control mode Select Bit
  3533F  Uint16 HRLOAD : 1 ;   // 3 Shadow mode Select Bit
  3534F  Uint16 rsvd1 : 12 ;   // 15:4 reserved
  3535F} ;
  3536F
  3537Funion HRCNFG_REG
  3538F{
  3539F  Uint16 all ;
  3540F  struct HRCNFG_BITS bit ;
  3541F} ;
  3542F
  3543Fstruct TBPHS_HRPWM_REG
  3544F{                               // bits description
  3545F  Uint16 TBPHSHR ;      // 15:0 Extension register for HRPWM Phase (8 bits)
  3546F  Uint16 TBPHS ; // 31:16 Phase offset register
  3547F} ;
  3548F
  3549Funion TBPHS_HRPWM_GROUP
  3550F{
  3551F  Uint32 all ;
  3552F  struct TBPHS_HRPWM_REG half ;
  3553F} ;
  3554F
  3555Fstruct CMPA_HRPWM_REG
  3556F{                               // bits description
  3557F  Uint16 CMPAHR ;        // 15:0 Extension register for HRPWM compare (8 bits)
  3558F  Uint16 CMPA ; // 31:16 Compare A reg
  3559F} ;
  3560F
  3561Funion CMPA_HRPWM_GROUP
  3562F{
  3563F  Uint32 all ;
  3564F  struct CMPA_HRPWM_REG half ;
  3565F} ;
  3566F
  3567Fstruct EPWM_REGS
  3568F{
  3569F  union TBCTL_REG TBCTL ; //
  3570F  union TBSTS_REG TBSTS ; //
  3571F  union TBPHS_HRPWM_GROUP TBPHS ; // Union of TBPHS:TBPHSHR
  3572F  Uint16 TBCTR ; // Counter
  3573F  Uint16 TBPRD ; // Period register set
  3574F  Uint16 rsvd1 ; //
  3575F  union CMPCTL_REG CMPCTL ; // Compare control
  3576F  union CMPA_HRPWM_GROUP CMPA ; // Union of CMPA:CMPAHR
  3577F  Uint16 CMPB ; // Compare B reg
  3578F  union AQCTL_REG AQCTLA ; // Action qual output A
  3579F  union AQCTL_REG AQCTLB ; // Action qual output B
  3580F  union AQSFRC_REG AQSFRC ; // Action qual SW force
  3581F  union AQCSFRC_REG AQCSFRC ; // Action qualifier continuous SW force
  3582F  union DBCTL_REG DBCTL ; // Dead-band control
  3583F  Uint16 DBRED ; // Dead-band rising edge delay
  3584F  Uint16 DBFED ; // Dead-band falling edge delay
  3585F  union TZSEL_REG TZSEL ; // Trip zone select
  3586F  Uint16 rsvd2 ;
  3587F  union TZCTL_REG TZCTL ; // Trip zone control
  3588F  union TZEINT_REG TZEINT ; // Trip zone interrupt enable
  3589F  union TZFLG_REG TZFLG ; // Trip zone interrupt flags
  3590F  union TZCLR_REG TZCLR ; // Trip zone clear
  3591F  union TZFRC_REG TZFRC ;       // Trip zone force interrupt
  3592F  union ETSEL_REG ETSEL ; // Event trigger selection
  3593F  union ETPS_REG ETPS ; // Event trigger pre-scaler
  3594F  union ETFLG_REG ETFLG ; // Event trigger flags
  3595F  union ETCLR_REG ETCLR ; // Event trigger clear
  3596F  union ETFRC_REG ETFRC ; // Event trigger force
  3597F  union PCCTL_REG PCCTL ; // PWM chopper control
  3598F  Uint16 rsvd3 ; //
  3599F  union HRCNFG_REG HRCNFG ; // HRPWM Config Reg
  3600F} ;
  3601F//---------------------------------------------------------------------------
  3602F// External References & Function Declarations:
  3603F//
  3604F
  3605Fextern volatile struct EPWM_REGS
  3606F  EPwm1Regs ;
  3607F
  3608Fextern volatile struct EPWM_REGS
  3609F  EPwm2Regs ;
  3610F
  3611Fextern volatile struct EPWM_REGS
  3612F  EPwm3Regs ;
  3613F
  3614Fextern volatile struct EPWM_REGS
  3615F  EPwm4Regs ;
  3616F
  3617Fextern volatile struct EPWM_REGS
  3618F  EPwm5Regs ;
  3619F
  3620Fextern volatile struct EPWM_REGS
  3621F  EPwm6Regs ;
  3622F       /* extern "C" */
  3623F       // end of DSP2833x_EPWM_H definition
  3624F//===========================================================================
  3625F// End of file.
  3626F//===========================================================================
  3627F 
  3628F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EPwm.h*/
  3629F/*   CLOSE_FILE Include File */
  3630F 
  3631F               // Enhanced PWM
  3632F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EQep.h */
  3633F// TI File $Revision: /main/1 $
  3634F// Checkin $Date: August 18, 2006 13:52:13 $
  3635F//###########################################################################
  3636F//
  3637F// FILE: DSP2833x_EQep.h
  3638F//
  3639F// TITLE: DSP2833x Enhanced Quadrature Encoder Pulse Module
  3640F// Register Bit Definitions.
  3641F//
  3642F//###########################################################################
  3643F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  3644F// $Release Date: August 4, 2009 $
  3645F//###########################################################################
  3646F#ifndef DSP2833x_EQEP_H
  3647F#define DSP2833x_EQEP_H
  3648F//----------------------------------------------------
  3649F// Capture decoder control register bit definitions */
  3650F
  3651Fstruct QDECCTL_BITS
  3652F{                     // bits description
  3653F  Uint16 rsvd1 : 5 ;
  3654F                   // 4:0 reserved
  3655F  Uint16 QSP : 1 ;
  3656F                 // 5 QEPS input polarity
  3657F  Uint16 QIP : 1 ;
  3658F                 // 6 QEPI input polarity
  3659F  Uint16 QBP : 1 ;
  3660F                 // 7 QEPB input polarity
  3661F  Uint16 QAP : 1 ;
  3662F                 // 8 QEPA input polarity
  3663F  Uint16 IGATE : 1 ;
  3664F                   // 9 Index pulse gating option
  3665F  Uint16 SWAP : 1 ;
  3666F                  // 10 CLK/DIR signal source for Position Counter
  3667F  Uint16 XCR : 1 ;
  3668F                 // 11 External clock rate
  3669F  Uint16 SPSEL : 1 ;
  3670F                   // 12 Sync output pin select
  3671F  Uint16 SOEN : 1 ;
  3672F                  // 13 Enable position compare sync
  3673F  Uint16 QSRC : 2 ;
  3674F                  // 15:14 Position counter source
  3675F} ;
  3676F
  3677Funion QDECCTL_REG
  3678F{
  3679F  Uint16 all ;
  3680F  struct QDECCTL_BITS bit ;
  3681F} ;
  3682F//----------------------------------------------------
  3683F// QEP control register bit definitions */
  3684F
  3685Fstruct QEPCTL_BITS
  3686F{                    // bits description
  3687F  Uint16 WDE : 1 ;
  3688F                 // 0 QEP watchdog enable
  3689F  Uint16 UTE : 1 ;
  3690F                 // 1 QEP unit timer enable
  3691F  Uint16 QCLM : 1 ;
  3692F                  // 2 QEP capture latch mode
  3693F  Uint16 QPEN : 1 ;
  3694F                  // 3 Quadrature position counter enable
  3695F  Uint16 IEL : 2 ;
  3696F                 // 5:4 Index event latch
  3697F  Uint16 SEL : 1 ;
  3698F                 // 6 Strobe event latch
  3699F  Uint16 SWI : 1 ;
  3700F                 // 7 Software init position counter
  3701F  Uint16 IEI : 2 ;
  3702F                 // 9:8 Index event init of position count
  3703F  Uint16 SEI : 2 ;
  3704F                 // 11:10 Strobe event init
  3705F  Uint16 PCRM : 2 ;
  3706F                  // 13:12 Position counter reset
  3707F  Uint16 FREE_SOFT : 2 ;
  3708F                       // 15:14 Emulation mode
  3709F} ;
  3710F
  3711Funion QEPCTL_REG
  3712F{
  3713F  Uint16 all ;
  3714F  struct QEPCTL_BITS bit ;
  3715F} ;
  3716F//----------------------------------------------------
  3717F// Quadrature capture control register bit definitions */
  3718F
  3719Fstruct QCAPCTL_BITS
  3720F{                     // bits description
  3721F  Uint16 UPPS : 4 ;
  3722F                  // 3:0 Unit position pre-scale
  3723F  Uint16 CCPS : 3 ;
  3724F                  // 6:4 QEP capture timer pre-scale
  3725F  Uint16 rsvd1 : 8 ;
  3726F                   // 14:7 reserved
  3727F  Uint16 CEN : 1 ;
  3728F                 // 15 Enable QEP capture
  3729F} ;
  3730F
  3731Funion QCAPCTL_REG
  3732F{
  3733F  Uint16 all ;
  3734F  struct QCAPCTL_BITS bit ;
  3735F} ;
  3736F//----------------------------------------------------
  3737F// Position compare control register bit definitions */
  3738F
  3739Fstruct QPOSCTL_BITS
  3740F{                     // bits description
  3741F  Uint16 PCSPW : 12 ;
  3742F                    // 11:0 Position compare sync pulse width
  3743F  Uint16 PCE : 1 ;
  3744F                 // 12 Position compare enable/disable
  3745F  Uint16 PCPOL : 1 ;
  3746F                   // 13 Polarity of sync output
  3747F  Uint16 PCLOAD : 1 ;
  3748F                    // 14 Position compare of shadow load
  3749F  Uint16 PCSHDW : 1 ;
  3750F                    // 15 Position compare shadow enable
  3751F} ;
  3752F
  3753Funion QPOSCTL_REG
  3754F{
  3755F  Uint16 all ;
  3756F  struct QPOSCTL_BITS bit ;
  3757F} ;
  3758F//----------------------------------------------------
  3759F// QEP interrupt control register bit definitions */
  3760F
  3761Fstruct QEINT_BITS
  3762F{                   // bits description
  3763F  Uint16 rsvd1 : 1 ;
  3764F                   // 0 reserved
  3765F  Uint16 PCE : 1 ;
  3766F                 // 1 Position counter error
  3767F  Uint16 QPE : 1 ;
  3768F                 // 2 Quadrature phase error
  3769F  Uint16 QDC : 1 ;
  3770F                 // 3 Quadrature dir change
  3771F  Uint16 WTO : 1 ;
  3772F                 // 4 Watchdog timeout
  3773F  Uint16 PCU : 1 ;
  3774F                 // 5 Position counter underflow
  3775F  Uint16 PCO : 1 ;
  3776F                 // 6 Position counter overflow
  3777F  Uint16 PCR : 1 ;
  3778F                 // 7 Position compare ready
  3779F  Uint16 PCM : 1 ;
  3780F                 // 8 Position compare match
  3781F  Uint16 SEL : 1 ;
  3782F                 // 9 Strobe event latch
  3783F  Uint16 IEL : 1 ;
  3784F                 // 10 Event latch
  3785F  Uint16 UTO : 1 ;
  3786F                 // 11 Unit timeout
  3787F  Uint16 rsvd2 : 4 ;
  3788F                   // 15:12 reserved
  3789F} ;
  3790F
  3791Funion QEINT_REG
  3792F{
  3793F  Uint16 all ;
  3794F  struct QEINT_BITS bit ;
  3795F} ;
  3796F//----------------------------------------------------
  3797F// QEP interrupt status register bit definitions */
  3798F
  3799Fstruct QFLG_BITS
  3800F{                  // bits description
  3801F  Uint16 INT : 1 ;
  3802F                 // 0 Global interrupt
  3803F  Uint16 PCE : 1 ;
  3804F                 // 1 Position counter error
  3805F  Uint16 PHE : 1 ;
  3806F                 // 2 Quadrature phase error
  3807F  Uint16 QDC : 1 ;
  3808F                 // 3 Quadrature dir change
  3809F  Uint16 WTO : 1 ;
  3810F                 // 4 Watchdog timeout
  3811F  Uint16 PCU : 1 ;
  3812F                 // 5 Position counter underflow
  3813F  Uint16 PCO : 1 ;
  3814F                 // 6 Position counter overflow
  3815F  Uint16 PCR : 1 ;
  3816F                 // 7 Position compare ready
  3817F  Uint16 PCM : 1 ;
  3818F                 // 8 Position compare match
  3819F  Uint16 SEL : 1 ;
  3820F                 // 9 Strobe event latch
  3821F  Uint16 IEL : 1 ;
  3822F                 // 10 Event latch
  3823F  Uint16 UTO : 1 ;
  3824F                 // 11 Unit timeout
  3825F  Uint16 rsvd2 : 4 ;
  3826F                   // 15:12 reserved
  3827F} ;
  3828F
  3829Funion QFLG_REG
  3830F{
  3831F  Uint16 all ;
  3832F  struct QFLG_BITS bit ;
  3833F} ;
  3834F//----------------------------------------------------
  3835F// QEP interrupt force register bit definitions */
  3836F
  3837Fstruct QFRC_BITS
  3838F{                  // bits description
  3839F  Uint16 reserved : 1 ;
  3840F                      // 0 Reserved
  3841F  Uint16 PCE : 1 ;
  3842F                 // 1 Position counter error
  3843F  Uint16 PHE : 1 ;
  3844F                 // 2 Quadrature phase error
  3845F  Uint16 QDC : 1 ;
  3846F                 // 3 Quadrature dir change
  3847F  Uint16 WTO : 1 ;
  3848F                 // 4 Watchdog timeout
  3849F  Uint16 PCU : 1 ;
  3850F                 // 5 Position counter underflow
  3851F  Uint16 PCO : 1 ;
  3852F                 // 6 Position counter overflow
  3853F  Uint16 PCR : 1 ;
  3854F                 // 7 Position compare ready
  3855F  Uint16 PCM : 1 ;
  3856F                 // 8 Position compare match
  3857F  Uint16 SEL : 1 ;
  3858F                 // 9 Strobe event latch
  3859F  Uint16 IEL : 1 ;
  3860F                 // 10 Event latch
  3861F  Uint16 UTO : 1 ;
  3862F                 // 11 Unit timeout
  3863F  Uint16 rsvd2 : 4 ;
  3864F                   // 15:12 reserved
  3865F} ;
  3866F
  3867Funion QFRC_REG
  3868F{
  3869F  Uint16 all ;
  3870F  struct QFRC_BITS bit ;
  3871F} ;
  3872F// V1.1 Added UPEVNT (bit 7) This reflects changes
  3873F// made as of F2833x Rev A devices
  3874F//----------------------------------------------------
  3875F// QEP status register bit definitions */
  3876F
  3877Fstruct QEPSTS_BITS
  3878F{                    // bits description
  3879F  Uint16 PCEF : 1 ;
  3880F                  // 0 Position counter error
  3881F  Uint16 FIMF : 1 ;
  3882F                  // 1 First index marker
  3883F  Uint16 CDEF : 1 ;
  3884F                  // 2 Capture direction error
  3885F  Uint16 COEF : 1 ;
  3886F                  // 3 Capture overflow error
  3887F  Uint16 QDLF : 1 ;
  3888F                  // 4 QEP direction latch
  3889F  Uint16 QDF : 1 ;
  3890F                 // 5 Quadrature direction
  3891F  Uint16 FIDF : 1 ;
  3892F                  // 6 Direction on first index marker
  3893F  Uint16 UPEVNT : 1 ;
  3894F                    // 7 Unit position event flag
  3895F  Uint16 rsvd1 : 8 ;
  3896F                   // 15:8 reserved
  3897F} ;
  3898F
  3899Funion QEPSTS_REG
  3900F{
  3901F  Uint16 all ;
  3902F  struct QEPSTS_BITS bit ;
  3903F} ;
  3904F//----------------------------------------------------
  3905F
  3906Fstruct EQEP_REGS
  3907F{
  3908F  Uint32 QPOSCNT ; // Position counter
  3909F  Uint32 QPOSINIT ; // Position counter init
  3910F  Uint32 QPOSMAX ; // Maximum position count
  3911F  Uint32 QPOSCMP ; // Position compare
  3912F  Uint32 QPOSILAT ; // Index position latch
  3913F  Uint32 QPOSSLAT ; // Strobe position latch
  3914F  Uint32 QPOSLAT ; // Position latch
  3915F  Uint32 QUTMR ; // Unit timer
  3916F  Uint32 QUPRD ; // Unit period
  3917F  Uint16 QWDTMR ; // QEP watchdog timer
  3918F  Uint16 QWDPRD ; // QEP watchdog period
  3919F  union QDECCTL_REG QDECCTL ; // Quadrature decoder control
  3920F  union QEPCTL_REG QEPCTL ; // QEP control
  3921F  union QCAPCTL_REG QCAPCTL ; // Quadrature capture control
  3922F  union QPOSCTL_REG QPOSCTL ; // Position compare control
  3923F  union QEINT_REG QEINT ; // QEP interrupt control
  3924F  union QFLG_REG QFLG ; // QEP interrupt flag
  3925F  union QFLG_REG QCLR ; // QEP interrupt clear
  3926F  union QFRC_REG QFRC ; // QEP interrupt force
  3927F  union QEPSTS_REG QEPSTS ; // QEP status
  3928F  Uint16 QCTMR ; // QEP capture timer
  3929F  Uint16 QCPRD ; // QEP capture period
  3930F  Uint16 QCTMRLAT ; // QEP capture latch
  3931F  Uint16 QCPRDLAT ; // QEP capture period latch
  3932F  Uint16 rsvd1 [ 30 ] ;
  3933F                     // reserved
  3934F} ;
  3935F//---------------------------------------------------------------------------
  3936F// GPI/O External References & Function Declarations:
  3937F//
  3938F
  3939Fextern volatile struct EQEP_REGS
  3940F  EQep1Regs ;
  3941F
  3942Fextern volatile struct EQEP_REGS
  3943F  EQep2Regs ;
  3944F       /* extern "C" */
  3945F       // end of DSP2833x_EQEP_H definition
  3946F//===========================================================================
  3947F// End of file.
  3948F//===========================================================================
  3949F 
  3950F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EQep.h*/
  3951F/*   CLOSE_FILE Include File */
  3952F 
  3953F               // Enhanced QEP
  3954F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Gpio.h */
  3955F// TI File $Revision: /main/4 $
  3956F// Checkin $Date: November 15, 2007 09:58:53 $
  3957F//###########################################################################
  3958F//
  3959F// FILE: DSP2833x_Gpio.h
  3960F//
  3961F// TITLE: DSP2833x General Purpose I/O Definitions.
  3962F//
  3963F//###########################################################################
  3964F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  3965F// $Release Date: August 4, 2009 $
  3966F//###########################################################################
  3967F#ifndef DSP2833x_GPIO_H
  3968F#define DSP2833x_GPIO_H
  3969F//----------------------------------------------------
  3970F// GPIO A control register bit definitions */
  3971F
  3972Ftypedef
  3973Fstruct GPACTRL_BITS
  3974F{                             // bits description
  3975F  Uint16 QUALPRD0 : 8 ;
  3976F                      // 7:0 Qual period
  3977F  Uint16 QUALPRD1 : 8 ;
  3978F                      // 15:8 Qual period
  3979F  Uint16 QUALPRD2 : 8 ;
  3980F                      // 23:16 Qual period
  3981F  Uint16 QUALPRD3 : 8 ;
  3982F                      // 31:24 Qual period
  3983F} GPACTRL_BITS ;
  3984F
  3985Ftypedef
  3986Funion GPACTRL_REG
  3987F{
  3988F  Uint32 all ;
  3989F  struct GPACTRL_BITS bit ;
  3990F} GPACTRL_REG ;
  3991F//----------------------------------------------------
  3992F// GPIO B control register bit definitions */
  3993F
  3994Ftypedef
  3995Fstruct GPBCTRL_BITS
  3996F{                             // bits description
  3997F  Uint16 QUALPRD0 : 8 ;
  3998F                      // 7:0 Qual period
  3999F  Uint16 QUALPRD1 : 8 ;
  4000F                      // 15:8 Qual period
  4001F  Uint16 QUALPRD2 : 8 ;
  4002F                      // 23:16 Qual period
  4003F  Uint16 QUALPRD3 : 8 ;
  4004F                      // 31:24
  4005F} GPBCTRL_BITS ;
  4006F
  4007Ftypedef
  4008Funion GPBCTRL_REG
  4009F{
  4010F  Uint32 all ;
  4011F  struct GPBCTRL_BITS bit ;
  4012F} GPBCTRL_REG ;
  4013F//----------------------------------------------------
  4014F// GPIO A Qual/MUX select register bit definitions */
  4015F
  4016Ftypedef
  4017Fstruct GPA1_BITS
  4018F{                          // bits description
  4019F  Uint16 GPIO0 : 2 ;
  4020F                   // 1:0 GPIO0
  4021F  Uint16 GPIO1 : 2 ;
  4022F                   // 3:2 GPIO1
  4023F  Uint16 GPIO2 : 2 ;
  4024F                   // 5:4 GPIO2
  4025F  Uint16 GPIO3 : 2 ;
  4026F                   // 7:6 GPIO3
  4027F  Uint16 GPIO4 : 2 ;
  4028F                   // 9:8 GPIO4
  4029F  Uint16 GPIO5 : 2 ;
  4030F                   // 11:10 GPIO5
  4031F  Uint16 GPIO6 : 2 ;
  4032F                   // 13:12 GPIO6
  4033F  Uint16 GPIO7 : 2 ;
  4034F                   // 15:14 GPIO7
  4035F  Uint16 GPIO8 : 2 ;
  4036F                   // 17:16 GPIO8
  4037F  Uint16 GPIO9 : 2 ;
  4038F                   // 19:18 GPIO9
  4039F  Uint16 GPIO10 : 2 ;
  4040F                    // 21:20 GPIO10
  4041F  Uint16 GPIO11 : 2 ;
  4042F                    // 23:22 GPIO11
  4043F  Uint16 GPIO12 : 2 ;
  4044F                    // 25:24 GPIO12
  4045F  Uint16 GPIO13 : 2 ;
  4046F                    // 27:26 GPIO13
  4047F  Uint16 GPIO14 : 2 ;
  4048F                    // 29:28 GPIO14
  4049F  Uint16 GPIO15 : 2 ;
  4050F                    // 31:30 GPIO15
  4051F} GPA1_BITS ;
  4052F
  4053Ftypedef
  4054Fstruct GPA2_BITS
  4055F{                          // bits description
  4056F  Uint16 GPIO16 : 2 ;
  4057F                    // 1:0 GPIO16
  4058F  Uint16 GPIO17 : 2 ;
  4059F                    // 3:2 GPIO17
  4060F  Uint16 GPIO18 : 2 ;
  4061F                    // 5:4 GPIO18
  4062F  Uint16 GPIO19 : 2 ;
  4063F                    // 7:6 GPIO19
  4064F  Uint16 GPIO20 : 2 ;
  4065F                    // 9:8 GPIO20
  4066F  Uint16 GPIO21 : 2 ;
  4067F                    // 11:10 GPIO21
  4068F  Uint16 GPIO22 : 2 ;
  4069F                    // 13:12 GPIO22
  4070F  Uint16 GPIO23 : 2 ;
  4071F                    // 15:14 GPIO23
  4072F  Uint16 GPIO24 : 2 ;
  4073F                    // 17:16 GPIO24
  4074F  Uint16 GPIO25 : 2 ;
  4075F                    // 19:18 GPIO25
  4076F  Uint16 GPIO26 : 2 ;
  4077F                    // 21:20 GPIO26
  4078F  Uint16 GPIO27 : 2 ;
  4079F                    // 23:22 GPIO27
  4080F  Uint16 GPIO28 : 2 ;
  4081F                    // 25:24 GPIO28
  4082F  Uint16 GPIO29 : 2 ;
  4083F                    // 27:26 GPIO29
  4084F  Uint16 GPIO30 : 2 ;
  4085F                    // 29:28 GPIO30
  4086F  Uint16 GPIO31 : 2 ;
  4087F                    // 31:30 GPIO31
  4088F} GPA2_BITS ;
  4089F
  4090Ftypedef
  4091Fstruct GPB1_BITS
  4092F{                          // bits description
  4093F  Uint16 GPIO32 : 2 ;
  4094F                    // 1:0 GPIO32
  4095F  Uint16 GPIO33 : 2 ;
  4096F                    // 3:2 GPIO33
  4097F  Uint16 GPIO34 : 2 ;
  4098F                    // 5:4 GPIO34
  4099F  Uint16 GPIO35 : 2 ;
  4100F                    // 7:6 GPIO35
  4101F  Uint16 GPIO36 : 2 ;
  4102F                    // 9:8 GPIO36
  4103F  Uint16 GPIO37 : 2 ;
  4104F                    // 11:10 GPIO37
  4105F  Uint16 GPIO38 : 2 ;
  4106F                    // 13:12 GPIO38
  4107F  Uint16 GPIO39 : 2 ;
  4108F                    // 15:14 GPIO39
  4109F  Uint16 GPIO40 : 2 ;
  4110F                    // 17:16 GPIO40
  4111F  Uint16 GPIO41 : 2 ;
  4112F                    // 19:16 GPIO41
  4113F  Uint16 GPIO42 : 2 ;
  4114F                    // 21:20 GPIO42
  4115F  Uint16 GPIO43 : 2 ;
  4116F                    // 23:22 GPIO43
  4117F  Uint16 GPIO44 : 2 ;
  4118F                    // 25:24 GPIO44
  4119F  Uint16 GPIO45 : 2 ;
  4120F                    // 27:26 GPIO45
  4121F  Uint16 GPIO46 : 2 ;
  4122F                    // 29:28 GPIO46
  4123F  Uint16 GPIO47 : 2 ;
  4124F                    // 31:30 GPIO47
  4125F} GPB1_BITS ;
  4126F
  4127Ftypedef
  4128Fstruct GPB2_BITS
  4129F{                          // bits description
  4130F  Uint16 GPIO48 : 2 ;
  4131F                    // 1:0 GPIO48
  4132F  Uint16 GPIO49 : 2 ;
  4133F                    // 3:2 GPIO49
  4134F  Uint16 GPIO50 : 2 ;
  4135F                    // 5:4 GPIO50
  4136F  Uint16 GPIO51 : 2 ;
  4137F                    // 7:6 GPIO51
  4138F  Uint16 GPIO52 : 2 ;
  4139F                    // 9:8 GPIO52
  4140F  Uint16 GPIO53 : 2 ;
  4141F                    // 11:10 GPIO53
  4142F  Uint16 GPIO54 : 2 ;
  4143F                    // 13:12 GPIO54
  4144F  Uint16 GPIO55 : 2 ;
  4145F                    // 15:14 GPIO55
  4146F  Uint16 GPIO56 : 2 ;
  4147F                    // 17:16 GPIO56
  4148F  Uint16 GPIO57 : 2 ;
  4149F                    // 19:18 GPIO57
  4150F  Uint16 GPIO58 : 2 ;
  4151F                    // 21:20 GPIO58
  4152F  Uint16 GPIO59 : 2 ;
  4153F                    // 23:22 GPIO59
  4154F  Uint16 GPIO60 : 2 ;
  4155F                    // 25:24 GPIO60
  4156F  Uint16 GPIO61 : 2 ;
  4157F                    // 27:26 GPIO61
  4158F  Uint16 GPIO62 : 2 ;
  4159F                    // 29:28 GPIO62
  4160F  Uint16 GPIO63 : 2 ;
  4161F                    // 31:30 GPIO63
  4162F} GPB2_BITS ;
  4163F
  4164Ftypedef
  4165Fstruct GPC1_BITS
  4166F{                          // bits description
  4167F  Uint16 GPIO64 : 2 ;
  4168F                    // 1:0 GPIO64
  4169F  Uint16 GPIO65 : 2 ;
  4170F                    // 3:2 GPIO65
  4171F  Uint16 GPIO66 : 2 ;
  4172F                    // 5:4 GPIO66
  4173F  Uint16 GPIO67 : 2 ;
  4174F                    // 7:6 GPIO67
  4175F  Uint16 GPIO68 : 2 ;
  4176F                    // 9:8 GPIO68
  4177F  Uint16 GPIO69 : 2 ;
  4178F                    // 11:10 GPIO69
  4179F  Uint16 GPIO70 : 2 ;
  4180F                    // 13:12 GPIO70
  4181F  Uint16 GPIO71 : 2 ;
  4182F                    // 15:14 GPIO71
  4183F  Uint16 GPIO72 : 2 ;
  4184F                    // 17:16 GPIO72
  4185F  Uint16 GPIO73 : 2 ;
  4186F                    // 19:18 GPIO73
  4187F  Uint16 GPIO74 : 2 ;
  4188F                    // 21:20 GPIO74
  4189F  Uint16 GPIO75 : 2 ;
  4190F                    // 23:22 GPIO75
  4191F  Uint16 GPIO76 : 2 ;
  4192F                    // 25:24 GPIO76
  4193F  Uint16 GPIO77 : 2 ;
  4194F                    // 27:26 GPIO77
  4195F  Uint16 GPIO78 : 2 ;
  4196F                    // 29:28 GPIO78
  4197F  Uint16 GPIO79 : 2 ;
  4198F                    // 31:30 GPIO79
  4199F} GPC1_BITS ;
  4200F
  4201Ftypedef
  4202Fstruct GPC2_BITS
  4203F{                          // bits description
  4204F  Uint16 GPIO80 : 2 ;
  4205F                    // 1:0 GPIO80
  4206F  Uint16 GPIO81 : 2 ;
  4207F                    // 3:2 GPIO81
  4208F  Uint16 GPIO82 : 2 ;
  4209F                    // 5:4 GPIO82
  4210F  Uint16 GPIO83 : 2 ;
  4211F                    // 7:6 GPIO83
  4212F  Uint16 GPIO84 : 2 ;
  4213F                    // 9:8 GPIO84
  4214F  Uint16 GPIO85 : 2 ;
  4215F                    // 11:10 GPIO85
  4216F  Uint16 GPIO86 : 2 ;
  4217F                    // 13:12 GPIO86
  4218F  Uint16 GPIO87 : 2 ;
  4219F                    // 15:14 GPIO87
  4220F  Uint16 rsvd : 16 ;
  4221F                   // 31:16 reserved
  4222F} GPC2_BITS ;
  4223F
  4224Ftypedef
  4225Funion GPA1_REG
  4226F{
  4227F  Uint32 all ;
  4228F  struct GPA1_BITS bit ;
  4229F} GPA1_REG ;
  4230F
  4231Ftypedef
  4232Funion GPA2_REG
  4233F{
  4234F  Uint32 all ;
  4235F  struct GPA2_BITS bit ;
  4236F} GPA2_REG ;
  4237F
  4238Ftypedef
  4239Funion GPB1_REG
  4240F{
  4241F  Uint32 all ;
  4242F  struct GPB1_BITS bit ;
  4243F} GPB1_REG ;
  4244F
  4245Ftypedef
  4246Funion GPB2_REG
  4247F{
  4248F  Uint32 all ;
  4249F  struct GPB2_BITS bit ;
  4250F} GPB2_REG ;
  4251F
  4252Ftypedef
  4253Funion GPC1_REG
  4254F{
  4255F  Uint32 all ;
  4256F  struct GPC1_BITS bit ;
  4257F} GPC1_REG ;
  4258F
  4259Ftypedef
  4260Funion GPC2_REG
  4261F{
  4262F  Uint32 all ;
  4263F  struct GPC2_BITS bit ;
  4264F} GPC2_REG ;
  4265F//----------------------------------------------------
  4266F// GPIO A DIR/TOGGLE/SET/CLEAR register bit definitions */
  4267F
  4268Ftypedef
  4269Fstruct GPADAT_BITS
  4270F{                            // bits description
  4271F  Uint16 GPIO0 : 1 ;
  4272F                   // 0 GPIO0
  4273F  Uint16 GPIO1 : 1 ;
  4274F                   // 1 GPIO1
  4275F  Uint16 GPIO2 : 1 ;
  4276F                   // 2 GPIO2
  4277F  Uint16 GPIO3 : 1 ;
  4278F                   // 3 GPIO3
  4279F  Uint16 GPIO4 : 1 ;
  4280F                   // 4 GPIO4
  4281F  Uint16 GPIO5 : 1 ;
  4282F                   // 5 GPIO5
  4283F  Uint16 GPIO6 : 1 ;
  4284F                   // 6 GPIO6
  4285F  Uint16 GPIO7 : 1 ;
  4286F                   // 7 GPIO7
  4287F  Uint16 GPIO8 : 1 ;
  4288F                   // 8 GPIO8
  4289F  Uint16 GPIO9 : 1 ;
  4290F                   // 9 GPIO9
  4291F  Uint16 GPIO10 : 1 ;
  4292F                    // 10 GPIO10
  4293F  Uint16 GPIO11 : 1 ;
  4294F                    // 11 GPIO11
  4295F  Uint16 GPIO12 : 1 ;
  4296F                    // 12 GPIO12
  4297F  Uint16 GPIO13 : 1 ;
  4298F                    // 13 GPIO13
  4299F  Uint16 GPIO14 : 1 ;
  4300F                    // 14 GPIO14
  4301F  Uint16 GPIO15 : 1 ;
  4302F                    // 15 GPIO15
  4303F  Uint16 GPIO16 : 1 ;
  4304F                    // 16 GPIO16
  4305F  Uint16 GPIO17 : 1 ;
  4306F                    // 17 GPIO17
  4307F  Uint16 GPIO18 : 1 ;
  4308F                    // 18 GPIO18
  4309F  Uint16 GPIO19 : 1 ;
  4310F                    // 19 GPIO19
  4311F  Uint16 GPIO20 : 1 ;
  4312F                    // 20 GPIO20
  4313F  Uint16 GPIO21 : 1 ;
  4314F                    // 21 GPIO21
  4315F  Uint16 GPIO22 : 1 ;
  4316F                    // 22 GPIO22
  4317F  Uint16 GPIO23 : 1 ;
  4318F                    // 23 GPIO23
  4319F  Uint16 GPIO24 : 1 ;
  4320F                    // 24 GPIO24
  4321F  Uint16 GPIO25 : 1 ;
  4322F                    // 25 GPIO25
  4323F  Uint16 GPIO26 : 1 ;
  4324F                    // 26 GPIO26
  4325F  Uint16 GPIO27 : 1 ;
  4326F                    // 27 GPIO27
  4327F  Uint16 GPIO28 : 1 ;
  4328F                    // 28 GPIO28
  4329F  Uint16 GPIO29 : 1 ;
  4330F                    // 29 GPIO29
  4331F  Uint16 GPIO30 : 1 ;
  4332F                    // 30 GPIO30
  4333F  Uint16 GPIO31 : 1 ;
  4334F                    // 31 GPIO31
  4335F} GPADAT_BITS ;
  4336F
  4337Ftypedef
  4338Fstruct GPBDAT_BITS
  4339F{                            // bits description
  4340F  Uint16 GPIO32 : 1 ;
  4341F                    // 0 GPIO32
  4342F  Uint16 GPIO33 : 1 ;
  4343F                    // 1 GPIO33
  4344F  Uint16 GPIO34 : 1 ;
  4345F                    // 2 GPIO34
  4346F  Uint16 GPIO35 : 1 ;
  4347F                    // 3 GPIO35
  4348F  Uint16 GPIO36 : 1 ;
  4349F                    // 4 GPIO36
  4350F  Uint16 GPIO37 : 1 ;
  4351F                    // 5 GPIO37
  4352F  Uint16 GPIO38 : 1 ;
  4353F                    // 6 GPIO38
  4354F  Uint16 GPIO39 : 1 ;
  4355F                    // 7 GPIO39
  4356F  Uint16 GPIO40 : 1 ;
  4357F                    // 8 GPIO40
  4358F  Uint16 GPIO41 : 1 ;
  4359F                    // 9 GPIO41
  4360F  Uint16 GPIO42 : 1 ;
  4361F                    // 10 GPIO42
  4362F  Uint16 GPIO43 : 1 ;
  4363F                    // 11 GPIO43
  4364F  Uint16 GPIO44 : 1 ;
  4365F                    // 12 GPIO44
  4366F  Uint16 GPIO45 : 1 ;
  4367F                    // 13 GPIO45
  4368F  Uint16 GPIO46 : 1 ;
  4369F                    // 14 GPIO46
  4370F  Uint16 GPIO47 : 1 ;
  4371F                    // 15 GPIO47
  4372F  Uint16 GPIO48 : 1 ;
  4373F                    // 16 GPIO48
  4374F  Uint16 GPIO49 : 1 ;
  4375F                    // 17 GPIO49
  4376F  Uint16 GPIO50 : 1 ;
  4377F                    // 18 GPIO50
  4378F  Uint16 GPIO51 : 1 ;
  4379F                    // 19 GPIO51
  4380F  Uint16 GPIO52 : 1 ;
  4381F                    // 20 GPIO52
  4382F  Uint16 GPIO53 : 1 ;
  4383F                    // 21 GPIO53
  4384F  Uint16 GPIO54 : 1 ;
  4385F                    // 22 GPIO54
  4386F  Uint16 GPIO55 : 1 ;
  4387F                    // 23 GPIO55
  4388F  Uint16 GPIO56 : 1 ;
  4389F                    // 24 GPIO56
  4390F  Uint16 GPIO57 : 1 ;
  4391F                    // 25 GPIO57
  4392F  Uint16 GPIO58 : 1 ;
  4393F                    // 26 GPIO58
  4394F  Uint16 GPIO59 : 1 ;
  4395F                    // 27 GPIO59
  4396F  Uint16 GPIO60 : 1 ;
  4397F                    // 28 GPIO60
  4398F  Uint16 GPIO61 : 1 ;
  4399F                    // 29 GPIO61
  4400F  Uint16 GPIO62 : 1 ;
  4401F                    // 30 GPIO62
  4402F  Uint16 GPIO63 : 1 ;
  4403F                    // 31 GPIO63
  4404F} GPBDAT_BITS ;
  4405F
  4406Ftypedef
  4407Fstruct GPCDAT_BITS
  4408F{                            // bits description
  4409F  Uint16 GPIO64 : 1 ;
  4410F                    // 0 GPIO64
  4411F  Uint16 GPIO65 : 1 ;
  4412F                    // 1 GPIO65
  4413F  Uint16 GPIO66 : 1 ;
  4414F                    // 2 GPIO66
  4415F  Uint16 GPIO67 : 1 ;
  4416F                    // 3 GPIO67
  4417F  Uint16 GPIO68 : 1 ;
  4418F                    // 4 GPIO68
  4419F  Uint16 GPIO69 : 1 ;
  4420F                    // 5 GPIO69
  4421F  Uint16 GPIO70 : 1 ;
  4422F                    // 6 GPIO70
  4423F  Uint16 GPIO71 : 1 ;
  4424F                    // 7 GPIO71
  4425F  Uint16 GPIO72 : 1 ;
  4426F                    // 8 GPIO72
  4427F  Uint16 GPIO73 : 1 ;
  4428F                    // 9 GPIO73
  4429F  Uint16 GPIO74 : 1 ;
  4430F                    // 10 GPIO74
  4431F  Uint16 GPIO75 : 1 ;
  4432F                    // 11 GPIO75
  4433F  Uint16 GPIO76 : 1 ;
  4434F                    // 12 GPIO76
  4435F  Uint16 GPIO77 : 1 ;
  4436F                    // 13 GPIO77
  4437F  Uint16 GPIO78 : 1 ;
  4438F                    // 14 GPIO78
  4439F  Uint16 GPIO79 : 1 ;
  4440F                    // 15 GPIO79
  4441F  Uint16 GPIO80 : 1 ;
  4442F                    // 16 GPIO80
  4443F  Uint16 GPIO81 : 1 ;
  4444F                    // 17 GPIO81
  4445F  Uint16 GPIO82 : 1 ;
  4446F                    // 18 GPIO82
  4447F  Uint16 GPIO83 : 1 ;
  4448F                    // 19 GPIO83
  4449F  Uint16 GPIO84 : 1 ;
  4450F                    // 20 GPIO84
  4451F  Uint16 GPIO85 : 1 ;
  4452F                    // 21 GPIO85
  4453F  Uint16 GPIO86 : 1 ;
  4454F                    // 22 GPIO86
  4455F  Uint16 GPIO87 : 1 ;
  4456F                    // 23 GPIO87
  4457F  Uint16 rsvd1 : 8 ;
  4458F                   // 31:24 reserved
  4459F} GPCDAT_BITS ;
  4460F
  4461Ftypedef
  4462Funion GPADAT_REG
  4463F{
  4464F  Uint32 all ;
  4465F  struct GPADAT_BITS bit ;
  4466F} GPADAT_REG ;
  4467F
  4468Ftypedef
  4469Funion GPBDAT_REG
  4470F{
  4471F  Uint32 all ;
  4472F  struct GPBDAT_BITS bit ;
  4473F} GPBDAT_REG ;
  4474F
  4475Ftypedef
  4476Funion GPCDAT_REG
  4477F{
  4478F  Uint32 all ;
  4479F  struct GPCDAT_BITS bit ;
  4480F} GPCDAT_REG ;
  4481F//----------------------------------------------------
  4482F// GPIO Xint1/XINT2/XNMI select register bit definitions */
  4483F
  4484Ftypedef
  4485Fstruct GPIOXINT_BITS
  4486F{                              // bits description
  4487F  Uint16 GPIOSEL : 5 ;// 4:0 Select GPIO interrupt input source
  4488F  Uint16 rsvd1 : 11 ;// 15:5 reserved
  4489F} GPIOXINT_BITS ;
  4490F
  4491Ftypedef
  4492Funion GPIOXINT_REG
  4493F{
  4494F  Uint16 all ;
  4495F  struct GPIOXINT_BITS bit ;
  4496F} GPIOXINT_REG ;
  4497F
  4498Ftypedef
  4499Fstruct GPIO_CTRL_REGS
  4500F{
  4501F  union GPACTRL_REG GPACTRL ; // GPIO A Control Register (GPIO0 to 31)
  4502F  union GPA1_REG GPAQSEL1 ; // GPIO A Qualifier Select 1 Register (GPIO0 to 15)
  4503F  union GPA2_REG GPAQSEL2 ; // GPIO A Qualifier Select 2 Register (GPIO16 to 31)
  4504F  union GPA1_REG GPAMUX1 ; // GPIO A Mux 1 Register (GPIO0 to 15)
  4505F  union GPA2_REG GPAMUX2 ; // GPIO A Mux 2 Register (GPIO16 to 31)
  4506F  union GPADAT_REG GPADIR ; // GPIO A Direction Register (GPIO0 to 31)
  4507F  union GPADAT_REG GPAPUD ; // GPIO A Pull Up Disable Register (GPIO0 to 31)
  4508F  Uint32 rsvd1 ;
  4509F  union GPBCTRL_REG GPBCTRL ; // GPIO B Control Register (GPIO32 to 63)
  4510F  union GPB1_REG GPBQSEL1 ; // GPIO B Qualifier Select 1 Register (GPIO32 to 47)
  4511F  union GPB2_REG GPBQSEL2 ; // GPIO B Qualifier Select 2 Register (GPIO48 to 63)
  4512F  union GPB1_REG GPBMUX1 ; // GPIO B Mux 1 Register (GPIO32 to 47)
  4513F  union GPB2_REG GPBMUX2 ; // GPIO B Mux 2 Register (GPIO48 to 63)
  4514F  union GPBDAT_REG GPBDIR ; // GPIO B Direction Register (GPIO32 to 63)
  4515F  union GPBDAT_REG GPBPUD ; // GPIO B Pull Up Disable Register (GPIO32 to 63)
  4516F  Uint16 rsvd2 [ 8 ] ;
  4517F  union GPC1_REG GPCMUX1 ; // GPIO C Mux 1 Register (GPIO64 to 79)
  4518F  union GPC2_REG GPCMUX2 ; // GPIO C Mux 2 Register (GPIO80 to 95)
  4519F  union GPCDAT_REG GPCDIR ; // GPIO C Direction Register (GPIO64 to 95)
  4520F  union GPCDAT_REG GPCPUD ; // GPIO C Pull Up Disable Register (GPIO64 to 95)
  4521F} GPIO_CTRL_REGS ;
  4522F
  4523Ftypedef
  4524Fstruct GPIO_DATA_REGS
  4525F{
  4526F  union GPADAT_REG GPADAT ; // GPIO Data Register (GPIO0 to 31)
  4527F  union GPADAT_REG GPASET ; // GPIO Data Set Register (GPIO0 to 31)
  4528F  union GPADAT_REG GPACLEAR ; // GPIO Data Clear Register (GPIO0 to 31)
  4529F  union GPADAT_REG GPATOGGLE ; // GPIO Data Toggle Register (GPIO0 to 31)
  4530F  union GPBDAT_REG GPBDAT ; // GPIO Data Register (GPIO32 to 63)
  4531F  union GPBDAT_REG GPBSET ; // GPIO Data Set Register (GPIO32 to 63)
  4532F  union GPBDAT_REG GPBCLEAR ; // GPIO Data Clear Register (GPIO32 to 63)
  4533F  union GPBDAT_REG GPBTOGGLE ; // GPIO Data Toggle Register (GPIO32 to 63)
  4534F  union GPCDAT_REG GPCDAT ; // GPIO Data Register (GPIO64 to 95)
  4535F  union GPCDAT_REG GPCSET ; // GPIO Data Set Register (GPIO64 to 95)
  4536F  union GPCDAT_REG GPCCLEAR ; // GPIO Data Clear Register (GPIO64 to 95)
  4537F  union GPCDAT_REG GPCTOGGLE ; // GPIO Data Toggle Register (GPIO64 to 95)
  4538F  Uint16 rsvd1 [ 8 ] ;
  4539F} GPIO_DATA_REGS ;
  4540F
  4541Ftypedef
  4542Fstruct GPIO_INT_REGS
  4543F{
  4544F  union GPIOXINT_REG GPIOXINT1SEL ; // XINT1 GPIO Input Selection
  4545F  union GPIOXINT_REG GPIOXINT2SEL ; // XINT2 GPIO Input Selection
  4546F  union GPIOXINT_REG GPIOXNMISEL ; // XNMI_Xint13 GPIO Input Selection
  4547F  union GPIOXINT_REG GPIOXINT3SEL ; // XINT3 GPIO Input Selection
  4548F  union GPIOXINT_REG GPIOXINT4SEL ; // XINT4 GPIO Input Selection
  4549F  union GPIOXINT_REG GPIOXINT5SEL ; // XINT5 GPIO Input Selection
  4550F  union GPIOXINT_REG GPIOXINT6SEL ; // XINT6 GPIO Input Selection
  4551F  union GPIOXINT_REG GPIOXINT7SEL ; // XINT7 GPIO Input Selection
  4552F  union GPADAT_REG GPIOLPMSEL ; // Low power modes GP I/O input select
  4553F} GPIO_INT_REGS ;
  4554F//---------------------------------------------------------------------------
  4555F// GPI/O External References & Function Declarations:
  4556F//
  4557F
  4558Fextern volatile struct GPIO_CTRL_REGS
  4559F  GpioCtrlRegs ;
  4560F
  4561Fextern volatile struct GPIO_DATA_REGS
  4562F  GpioDataRegs ;
  4563F
  4564Fextern volatile struct GPIO_INT_REGS
  4565F  GpioIntRegs ;
  4566F       // end of DSP2833x_GPIO_H definition
  4567F//===========================================================================
  4568F// End of file.
  4569F//===========================================================================
  4570F 
  4571F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Gpio.h*/
  4572F/*   CLOSE_FILE Include File */
  4573F 
  4574F               // General Purpose I/O Registers
  4575F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_I2c.h */
  4576F// TI File $Revision: /main/2 $
  4577F// Checkin $Date: March 22, 2007 10:40:22 $
  4578F//###########################################################################
  4579F//
  4580F// FILE: DSP2833x_I2c.h
  4581F//
  4582F// TITLE: DSP2833x Enhanced Quadrature Encoder Pulse Module
  4583F// Register Bit Definitions.
  4584F//
  4585F//###########################################################################
  4586F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  4587F// $Release Date: August 4, 2009 $
  4588F//###########################################################################
  4589F#ifndef DSP2833x_I2C_H
  4590F#define DSP2833x_I2C_H
  4591F//----------------------------------------------------
  4592F// I2C interrupt vector register bit definitions */
  4593F
  4594Fstruct I2CISRC_BITS
  4595F{                     // bits description
  4596F  Uint16 INTCODE : 3 ;
  4597F                     // 2:0 Interrupt code
  4598F  Uint16 rsvd1 : 13 ;
  4599F                    // 15:3 reserved
  4600F} ;
  4601F
  4602Funion I2CISRC_REG
  4603F{
  4604F  Uint16 all ;
  4605F  struct I2CISRC_BITS bit ;
  4606F} ;
  4607F//----------------------------------------------------
  4608F// I2C interrupt mask register bit definitions */
  4609F
  4610Fstruct I2CIER_BITS
  4611F{                    // bits description
  4612F  Uint16 ARBL : 1 ;
  4613F                  // 0 Arbitration lost interrupt
  4614F  Uint16 NACK : 1 ;
  4615F                  // 1 No ack interrupt
  4616F  Uint16 ARDY : 1 ;
  4617F                  // 2 Register access ready interrupt
  4618F  Uint16 RRDY : 1 ;
  4619F                  // 3 Recieve data ready interrupt
  4620F  Uint16 XRDY : 1 ;
  4621F                  // 4 Transmit data ready interrupt
  4622F  Uint16 SCD : 1 ;
  4623F                 // 5 Stop condition detection
  4624F  Uint16 AAS : 1 ;
  4625F                 // 6 Address as slave
  4626F  Uint16 rsvd : 9 ;
  4627F                  // 15:7 reserved
  4628F} ;
  4629F
  4630Funion I2CIER_REG
  4631F{
  4632F  Uint16 all ;
  4633F  struct I2CIER_BITS bit ;
  4634F} ;
  4635F//----------------------------------------------------
  4636F// I2C status register bit definitions */
  4637F
  4638Fstruct I2CSTR_BITS
  4639F{                    // bits description
  4640F  Uint16 ARBL : 1 ;
  4641F                  // 0 Arbitration lost interrupt
  4642F  Uint16 NACK : 1 ;
  4643F                  // 1 No ack interrupt
  4644F  Uint16 ARDY : 1 ;
  4645F                  // 2 Register access ready interrupt
  4646F  Uint16 RRDY : 1 ;
  4647F                  // 3 Recieve data ready interrupt
  4648F  Uint16 XRDY : 1 ;
  4649F                  // 4 Transmit data ready interrupt
  4650F  Uint16 SCD : 1 ;
  4651F                 // 5 Stop condition detection
  4652F  Uint16 rsvd1 : 2 ;
  4653F                   // 7:6 reserved
  4654F  Uint16 AD0 : 1 ;
  4655F                 // 8 Address Zero
  4656F  Uint16 AAS : 1 ;
  4657F                 // 9 Address as slave
  4658F  Uint16 XSMT : 1 ;
  4659F                  // 10 XMIT shift empty
  4660F  Uint16 RSFULL : 1 ;
  4661F                    // 11 Recieve shift full
  4662F  Uint16 BB : 1 ;
  4663F                // 12 Bus busy
  4664F  Uint16 NACKSNT : 1 ;
  4665F                     // 13 A no ack sent
  4666F  Uint16 SDIR : 1 ;
  4667F                  // 14 Slave direction
  4668F  Uint16 rsvd2 : 1 ;
  4669F                   // 15 reserved
  4670F} ;
  4671F
  4672Funion I2CSTR_REG
  4673F{
  4674F  Uint16 all ;
  4675F  struct I2CSTR_BITS bit ;
  4676F} ;
  4677F//----------------------------------------------------
  4678F// I2C mode control register bit definitions */
  4679F
  4680Fstruct I2CMDR_BITS
  4681F{                    // bits description
  4682F  Uint16 BC : 3 ;
  4683F                // 2:0 Bit count
  4684F  Uint16 FDF : 1 ;
  4685F                 // 3 Free data format
  4686F  Uint16 STB : 1 ;
  4687F                 // 4 Start byte
  4688F  Uint16 IRS : 1 ;
  4689F                 // 5 I2C Reset not
  4690F  Uint16 DLB : 1 ;
  4691F                 // 6 Digital loopback
  4692F  Uint16 RM : 1 ;
  4693F                // 7 Repeat mode
  4694F  Uint16 XA : 1 ;
  4695F                // 8 Expand address
  4696F  Uint16 TRX : 1 ;
  4697F                 // 9 Transmitter/reciever
  4698F  Uint16 MST : 1 ;
  4699F                 // 10 Master/slave
  4700F  Uint16 STP : 1 ;
  4701F                 // 11 Stop condition
  4702F  Uint16 rsvd1 : 1 ;
  4703F                   // 12 reserved
  4704F  Uint16 STT : 1 ;
  4705F                 // 13 Start condition
  4706F  Uint16 FREE : 1 ;
  4707F                  // 14 Emulation mode
  4708F  Uint16 NACKMOD : 1 ;
  4709F                     // 15 No Ack mode
  4710F} ;
  4711F
  4712Funion I2CMDR_REG
  4713F{
  4714F  Uint16 all ;
  4715F  struct I2CMDR_BITS bit ;
  4716F} ;
  4717F//----------------------------------------------------
  4718F// I2C pre-scaler register bit definitions */
  4719F
  4720Fstruct I2CPSC_BITS
  4721F{                    // bits description
  4722F  Uint16 IPSC : 8 ;
  4723F                  // 7:0 pre-scaler
  4724F  Uint16 rsvd1 : 8 ;
  4725F                   // 15:8 reserved
  4726F} ;
  4727F
  4728Funion I2CPSC_REG
  4729F{
  4730F  Uint16 all ;
  4731F  struct I2CPSC_BITS bit ;
  4732F} ;
  4733F//----------------------------------------------------
  4734F// TX FIFO control register bit definitions */
  4735F
  4736Fstruct I2CFFTX_BITS
  4737F{                     // bits description
  4738F  Uint16 TXFFIL : 5 ;
  4739F                    // 4:0 FIFO interrupt level
  4740F  Uint16 TXFFIENA : 1 ;
  4741F                      // 5 FIFO interrupt enable/disable
  4742F  Uint16 TXFFINTCLR : 1 ;
  4743F                        // 6 FIFO clear
  4744F  Uint16 TXFFINT : 1 ;
  4745F                     // 7 FIFO interrupt flag
  4746F  Uint16 TXFFST : 5 ;
  4747F                    // 12:8 FIFO level status
  4748F  Uint16 TXFFRST : 1 ;
  4749F                     // 13 FIFO reset
  4750F  Uint16 I2CFFEN : 1 ;
  4751F                     // 14 enable/disable TX & RX FIFOs
  4752F  Uint16 rsvd1 : 1 ;
  4753F                   // 15 reserved
  4754F} ;
  4755F
  4756Funion I2CFFTX_REG
  4757F{
  4758F  Uint16 all ;
  4759F  struct I2CFFTX_BITS bit ;
  4760F} ;
  4761F//----------------------------------------------------
  4762F// RX FIFO control register bit definitions */
  4763F
  4764Fstruct I2CFFRX_BITS
  4765F{                     // bits description
  4766F  Uint16 RXFFIL : 5 ;
  4767F                    // 4:0 FIFO interrupt level
  4768F  Uint16 RXFFIENA : 1 ;
  4769F                      // 5 FIFO interrupt enable/disable
  4770F  Uint16 RXFFINTCLR : 1 ;
  4771F                        // 6 FIFO clear
  4772F  Uint16 RXFFINT : 1 ;
  4773F                     // 7 FIFO interrupt flag
  4774F  Uint16 RXFFST : 5 ;
  4775F                    // 12:8 FIFO level
  4776F  Uint16 RXFFRST : 1 ;
  4777F                     // 13 FIFO reset
  4778F  Uint16 rsvd1 : 2 ;
  4779F                   // 15:14 reserved
  4780F} ;
  4781F
  4782Funion I2CFFRX_REG
  4783F{
  4784F  Uint16 all ;
  4785F  struct I2CFFRX_BITS bit ;
  4786F} ;
  4787F//----------------------------------------------------
  4788F
  4789Fstruct I2C_REGS
  4790F{
  4791F  Uint16 I2COAR ; // Own address register
  4792F  union I2CIER_REG I2CIER ; // Interrupt enable
  4793F  union I2CSTR_REG I2CSTR ; // Interrupt status
  4794F  Uint16 I2CCLKL ; // Clock divider low
  4795F  Uint16 I2CCLKH ; // Clock divider high
  4796F  Uint16 I2CCNT ; // Data count
  4797F  Uint16 I2CDRR ; // Data recieve
  4798F  Uint16 I2CSAR ; // Slave address
  4799F  Uint16 I2CDXR ; // Data transmit
  4800F  union I2CMDR_REG I2CMDR ; // Mode
  4801F  union I2CISRC_REG I2CISRC ; // Interrupt source
  4802F  Uint16 rsvd1 ; // reserved
  4803F  union I2CPSC_REG I2CPSC ; // Pre-scaler
  4804F  Uint16 rsvd2 [ 19 ] ;
  4805F                     // reserved
  4806F  union I2CFFTX_REG I2CFFTX ; // Transmit FIFO
  4807F  union I2CFFRX_REG I2CFFRX ; // Recieve FIFO
  4808F} ;
  4809F//---------------------------------------------------------------------------
  4810F// External References & Function Declarations:
  4811F//
  4812F
  4813Fextern volatile struct I2C_REGS
  4814F  I2caRegs ;
  4815F       /* extern "C" */
  4816F       // end of DSP2833x_I2C_H definition
  4817F//===========================================================================
  4818F// End of file.
  4819F//===========================================================================
  4820F 
  4821F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_I2c.h*/
  4822F/*   CLOSE_FILE Include File */
  4823F 
  4824F                // I2C Registers
  4825F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_McBSP.h */
  4826F// TI File $Revision: /main/5 $
  4827F// Checkin $Date: May 14, 2008 16:30:31 $
  4828F//###########################################################################
  4829F//
  4830F// FILE: DSP2833x_Mcbsp.h
  4831F//
  4832F// TITLE: DSP2833x Device McBSP Register Definitions.
  4833F//
  4834F//###########################################################################
  4835F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  4836F// $Release Date: August 4, 2009 $
  4837F//###########################################################################
  4838F#ifndef DSP2833x_MCBSP_H
  4839F#define DSP2833x_MCBSP_H
  4840F//---------------------------------------------------------------------------
  4841F// McBSP Individual Register Bit Definitions:
  4842F//
  4843F// McBSP DRR2 register bit definitions:
  4844F
  4845Fstruct DRR2_BITS
  4846F{                  // bit description
  4847F  Uint16 HWLB : 8 ;
  4848F                  // 16:23 High word low byte
  4849F  Uint16 HWHB : 8 ;
  4850F                  // 24:31 High word high byte
  4851F} ;
  4852F
  4853Funion DRR2_REG
  4854F{
  4855F  Uint16 all ;
  4856F  struct DRR2_BITS bit ;
  4857F} ;
  4858F// McBSP DRR1 register bit definitions:
  4859F
  4860Fstruct DRR1_BITS
  4861F{                  // bit description
  4862F  Uint16 LWLB : 8 ;
  4863F                  // 16:23 Low word low byte
  4864F  Uint16 LWHB : 8 ;
  4865F                  // 24:31 low word high byte
  4866F} ;
  4867F
  4868Funion DRR1_REG
  4869F{
  4870F  Uint16 all ;
  4871F  struct DRR1_BITS bit ;
  4872F} ;
  4873F// McBSP DXR2 register bit definitions:
  4874F
  4875Fstruct DXR2_BITS
  4876F{                  // bit description
  4877F  Uint16 HWLB : 8 ;
  4878F                  // 16:23 High word low byte
  4879F  Uint16 HWHB : 8 ;
  4880F                  // 24:31 High word high byte
  4881F} ;
  4882F
  4883Funion DXR2_REG
  4884F{
  4885F  Uint16 all ;
  4886F  struct DXR2_BITS bit ;
  4887F} ;
  4888F// McBSP DXR1 register bit definitions:
  4889F
  4890Fstruct DXR1_BITS
  4891F{                  // bit description
  4892F  Uint16 LWLB : 8 ;
  4893F                  // 16:23 Low word low byte
  4894F  Uint16 LWHB : 8 ;
  4895F                  // 24:31 low word high byte
  4896F} ;
  4897F
  4898Funion DXR1_REG
  4899F{
  4900F  Uint16 all ;
  4901F  struct DXR1_BITS bit ;
  4902F} ;
  4903F// SPCR2 control register bit definitions:
  4904F
  4905Fstruct SPCR2_BITS
  4906F{                   // bit description
  4907F  Uint16 XRST : 1 ;
  4908F                  // 0 transmit reset
  4909F  Uint16 XRDY : 1 ;
  4910F                  // 1 transmit ready
  4911F  Uint16 XEMPTY : 1 ;
  4912F                    // 2 Transmit empty
  4913F  Uint16 XSYNCERR : 1 ;
  4914F                      // 3 Transmit syn errorINT flag
  4915F  Uint16 XINTM : 2 ;
  4916F                   // 5:4 Transmit interrupt types
  4917F  Uint16 GRST : 1 ;
  4918F                  // 6 CLKG reset
  4919F  Uint16 FRST : 1 ;
  4920F                  // 7 Frame sync reset
  4921F  Uint16 SOFT : 1 ;
  4922F                  // 8 SOFT bit
  4923F  Uint16 FREE : 1 ;
  4924F                  // 9 FREE bit
  4925F  Uint16 rsvd : 6 ;
  4926F                  // 15:10 reserved
  4927F} ;
  4928F
  4929Funion SPCR2_REG
  4930F{
  4931F  Uint16 all ;
  4932F  struct SPCR2_BITS bit ;
  4933F} ;
  4934F// SPCR1 control register bit definitions:
  4935F
  4936Fstruct SPCR1_BITS
  4937F{                   // bit description
  4938F  Uint16 RRST : 1 ;
  4939F                  // 0 Receive reset
  4940F  Uint16 RRDY : 1 ;
  4941F                  // 1 Receive ready
  4942F  Uint16 RFULL : 1 ;
  4943F                   // 2 Receive full
  4944F  Uint16 RSYNCERR : 1 ;
  4945F                      // 7 Receive syn error
  4946F  Uint16 RINTM : 2 ;
  4947F                   // 5:4 Receive interrupt types
  4948F  Uint16 ABIS : 1 ;
  4949F                  // 6 ABIS mode select
  4950F  Uint16 DXENA : 1 ;
  4951F                   // 7 DX hi-z enable
  4952F  Uint16 rsvd : 3 ;
  4953F                  // 10:8 reserved
  4954F  Uint16 CLKSTP : 2 ;
  4955F                    // 12:11 CLKSTOP mode bit
  4956F  Uint16 RJUST : 2 ;
  4957F                   // 13:14 Right justified
  4958F  Uint16 DLB : 1 ;
  4959F                 // 15 Digital loop back
  4960F} ;
  4961F
  4962Funion SPCR1_REG
  4963F{
  4964F  Uint16 all ;
  4965F  struct SPCR1_BITS bit ;
  4966F} ;
  4967F// RCR2 control register bit definitions:
  4968F
  4969Fstruct RCR2_BITS
  4970F{                  // bit description
  4971F  Uint16 RDATDLY : 2 ;
  4972F                     // 1:0 Receive data delay
  4973F  Uint16 RFIG : 1 ;
  4974F                  // 2 Receive frame sync ignore
  4975F  Uint16 RCOMPAND : 2 ;
  4976F                      // 4:3 Receive Companding Mode selects
  4977F  Uint16 RWDLEN2 : 3 ;
  4978F                     // 7:5 Receive word length
  4979F  Uint16 RFRLEN2 : 7 ;
  4980F                     // 14:8 Receive Frame sync
  4981F  Uint16 RPHASE : 1 ;
  4982F                    // 15 Receive Phase
  4983F} ;
  4984F
  4985Funion RCR2_REG
  4986F{
  4987F  Uint16 all ;
  4988F  struct RCR2_BITS bit ;
  4989F} ;
  4990F// RCR1 control register bit definitions:
  4991F
  4992Fstruct RCR1_BITS
  4993F{                  // bit description
  4994F  Uint16 rsvd1 : 5 ;
  4995F                   // 4:0 reserved
  4996F  Uint16 RWDLEN1 : 3 ;
  4997F                     // 7:5 Receive word length
  4998F  Uint16 RFRLEN1 : 7 ;
  4999F                     // 14:8 Receive frame length
  5000F  Uint16 rsvd2 : 1 ;
  5001F                   // 15 reserved
  5002F} ;
  5003F
  5004Funion RCR1_REG
  5005F{
  5006F  Uint16 all ;
  5007F  struct RCR1_BITS bit ;
  5008F} ;
  5009F// XCR2 control register bit definitions:
  5010F
  5011Fstruct XCR2_BITS
  5012F{                  // bit description
  5013F  Uint16 XDATDLY : 2 ;
  5014F                     // 1:0 Transmit data delay
  5015F  Uint16 XFIG : 1 ;
  5016F                  // 2 Transmit frame sync ignore
  5017F  Uint16 XCOMPAND : 2 ;
  5018F                      // 4:3 Transmit Companding Mode selects
  5019F  Uint16 XWDLEN2 : 3 ;
  5020F                     // 7:5 Transmit word length
  5021F  Uint16 XFRLEN2 : 7 ;
  5022F                     // 14:8 Transmit Frame sync
  5023F  Uint16 XPHASE : 1 ;
  5024F                    // 15 Transmit Phase
  5025F} ;
  5026F
  5027Funion XCR2_REG
  5028F{
  5029F  Uint16 all ;
  5030F  struct XCR2_BITS bit ;
  5031F} ;
  5032F// XCR1 control register bit definitions:
  5033F
  5034Fstruct XCR1_BITS
  5035F{                  // bit description
  5036F  Uint16 rsvd1 : 5 ;
  5037F                   // 4:0 reserved
  5038F  Uint16 XWDLEN1 : 3 ;
  5039F                     // 7:5 Transmit word length
  5040F  Uint16 XFRLEN1 : 7 ;
  5041F                     // 14:8 Transmit frame length
  5042F  Uint16 rsvd2 : 1 ;
  5043F                   // 15 reserved
  5044F} ;
  5045F
  5046Funion XCR1_REG
  5047F{
  5048F  Uint16 all ;
  5049F  struct XCR1_BITS bit ;
  5050F} ;
  5051F// SRGR2 Sample rate generator control register bit definitions:
  5052F
  5053Fstruct SRGR2_BITS
  5054F{                   // bit description
  5055F  Uint16 FPER : 12 ;
  5056F                   // 11:0 Frame period
  5057F  Uint16 FSGM : 1 ;
  5058F                  // 12 Frame sync generator mode
  5059F  Uint16 CLKSM : 1 ;
  5060F                   // 13 Sample rate generator mode
  5061F  Uint16 rsvd : 1 ;
  5062F                  // 14 reserved
  5063F  Uint16 GSYNC : 1 ;
  5064F                   // 15 CLKG sync
  5065F} ;
  5066F
  5067Funion SRGR2_REG
  5068F{
  5069F  Uint16 all ;
  5070F  struct SRGR2_BITS bit ;
  5071F} ;
  5072F// SRGR1 control register bit definitions:
  5073F
  5074Fstruct SRGR1_BITS
  5075F{                   // bit description
  5076F  Uint16 CLKGDV : 8 ;
  5077F                    // 7:0 CLKG divider
  5078F  Uint16 FWID : 8 ;
  5079F                  // 15:8 Frame width
  5080F} ;
  5081F
  5082Funion SRGR1_REG
  5083F{
  5084F  Uint16 all ;
  5085F  struct SRGR1_BITS bit ;
  5086F} ;
  5087F// MCR2 Multichannel control register bit definitions:
  5088F
  5089Fstruct MCR2_BITS
  5090F{                  // bit description
  5091F  Uint16 XMCM : 2 ;
  5092F                  // 1:0 Transmit multichannel mode
  5093F  Uint16 XCBLK : 3 ;
  5094F                   // 2:4 Transmit current block
  5095F  Uint16 XPABLK : 2 ;
  5096F                    // 5:6 Transmit partition A Block
  5097F  Uint16 XPBBLK : 2 ;
  5098F                    // 7:8 Transmit partition B Block
  5099F  Uint16 XMCME : 1 ;
  5100F                   // 9 Transmit multi-channel enhance mode
  5101F  Uint16 rsvd : 6 ;
  5102F                  // 15:10 reserved
  5103F} ;
  5104F
  5105Funion MCR2_REG
  5106F{
  5107F  Uint16 all ;
  5108F  struct MCR2_BITS bit ;
  5109F} ;
  5110F// MCR1 Multichannel control register bit definitions:
  5111F
  5112Fstruct MCR1_BITS
  5113F{                  // bit description
  5114F  Uint16 RMCM : 1 ;
  5115F                  // 0 Receive multichannel mode
  5116F  Uint16 rsvd : 1 ;
  5117F                  // 1 reserved
  5118F  Uint16 RCBLK : 3 ;
  5119F                   // 4:2 Receive current block
  5120F  Uint16 RPABLK : 2 ;
  5121F                    // 6:5 Receive partition A Block
  5122F  Uint16 RPBBLK : 2 ;
  5123F                    // 7:8 Receive partition B Block
  5124F  Uint16 RMCME : 1 ;
  5125F                   // 9 Receive multi-channel enhance mode
  5126F  Uint16 rsvd1 : 6 ;
  5127F                   // 15:10 reserved
  5128F} ;
  5129F
  5130Funion MCR1_REG
  5131F{
  5132F  Uint16 all ;
  5133F  struct MCR1_BITS bit ;
  5134F} ;
  5135F// RCERA control register bit definitions:
  5136F
  5137Fstruct RCERA_BITS
  5138F{                   // bit description
  5139F  Uint16 RCEA0 : 1 ;
  5140F                   // 0 Receive Channel enable bit
  5141F  Uint16 RCEA1 : 1 ;
  5142F                   // 1 Receive Channel enable bit
  5143F  Uint16 RCEA2 : 1 ;
  5144F                   // 2 Receive Channel enable bit
  5145F  Uint16 RCEA3 : 1 ;
  5146F                   // 3 Receive Channel enable bit
  5147F  Uint16 RCEA4 : 1 ;
  5148F                   // 4 Receive Channel enable bit
  5149F  Uint16 RCEA5 : 1 ;
  5150F                   // 5 Receive Channel enable bit
  5151F  Uint16 RCEA6 : 1 ;
  5152F                   // 6 Receive Channel enable bit
  5153F  Uint16 RCEA7 : 1 ;
  5154F                   // 7 Receive Channel enable bit
  5155F  Uint16 RCEA8 : 1 ;
  5156F                   // 8 Receive Channel enable bit
  5157F  Uint16 RCEA9 : 1 ;
  5158F                   // 9 Receive Channel enable bit
  5159F  Uint16 RCEA10 : 1 ;
  5160F                    // 10 Receive Channel enable bit
  5161F  Uint16 RCEA11 : 1 ;
  5162F                    // 11 Receive Channel enable bit
  5163F  Uint16 RCEA12 : 1 ;
  5164F                    // 12 Receive Channel enable bit
  5165F  Uint16 RCEA13 : 1 ;
  5166F                    // 13 Receive Channel enable bit
  5167F  Uint16 RCEA14 : 1 ;
  5168F                    // 14 Receive Channel enable bit
  5169F  Uint16 RCEA15 : 1 ;
  5170F                    // 15 Receive Channel enable bit
  5171F} ;
  5172F
  5173Funion RCERA_REG
  5174F{
  5175F  Uint16 all ;
  5176F  struct RCERA_BITS bit ;
  5177F} ;
  5178F// RCERB control register bit definitions:
  5179F
  5180Fstruct RCERB_BITS
  5181F{                   // bit description
  5182F  Uint16 RCEB0 : 1 ;
  5183F                   // 0 Receive Channel enable bit
  5184F  Uint16 RCEB1 : 1 ;
  5185F                   // 1 Receive Channel enable bit
  5186F  Uint16 RCEB2 : 1 ;
  5187F                   // 2 Receive Channel enable bit
  5188F  Uint16 RCEB3 : 1 ;
  5189F                   // 3 Receive Channel enable bit
  5190F  Uint16 RCEB4 : 1 ;
  5191F                   // 4 Receive Channel enable bit
  5192F  Uint16 RCEB5 : 1 ;
  5193F                   // 5 Receive Channel enable bit
  5194F  Uint16 RCEB6 : 1 ;
  5195F                   // 6 Receive Channel enable bit
  5196F  Uint16 RCEB7 : 1 ;
  5197F                   // 7 Receive Channel enable bit
  5198F  Uint16 RCEB8 : 1 ;
  5199F                   // 8 Receive Channel enable bit
  5200F  Uint16 RCEB9 : 1 ;
  5201F                   // 9 Receive Channel enable bit
  5202F  Uint16 RCEB10 : 1 ;
  5203F                    // 10 Receive Channel enable bit
  5204F  Uint16 RCEB11 : 1 ;
  5205F                    // 11 Receive Channel enable bit
  5206F  Uint16 RCEB12 : 1 ;
  5207F                    // 12 Receive Channel enable bit
  5208F  Uint16 RCEB13 : 1 ;
  5209F                    // 13 Receive Channel enable bit
  5210F  Uint16 RCEB14 : 1 ;
  5211F                    // 14 Receive Channel enable bit
  5212F  Uint16 RCEB15 : 1 ;
  5213F                    // 15 Receive Channel enable bit
  5214F} ;
  5215F
  5216Funion RCERB_REG
  5217F{
  5218F  Uint16 all ;
  5219F  struct RCERB_BITS bit ;
  5220F} ;
  5221F// XCERA control register bit definitions:
  5222F
  5223Fstruct XCERA_BITS
  5224F{                   // bit description
  5225F  Uint16 XCERA0 : 1 ;
  5226F                    // 0 Receive Channel enable bit
  5227F  Uint16 XCERA1 : 1 ;
  5228F                    // 1 Receive Channel enable bit
  5229F  Uint16 XCERA2 : 1 ;
  5230F                    // 2 Receive Channel enable bit
  5231F  Uint16 XCERA3 : 1 ;
  5232F                    // 3 Receive Channel enable bit
  5233F  Uint16 XCERA4 : 1 ;
  5234F                    // 4 Receive Channel enable bit
  5235F  Uint16 XCERA5 : 1 ;
  5236F                    // 5 Receive Channel enable bit
  5237F  Uint16 XCERA6 : 1 ;
  5238F                    // 6 Receive Channel enable bit
  5239F  Uint16 XCERA7 : 1 ;
  5240F                    // 7 Receive Channel enable bit
  5241F  Uint16 XCERA8 : 1 ;
  5242F                    // 8 Receive Channel enable bit
  5243F  Uint16 XCERA9 : 1 ;
  5244F                    // 9 Receive Channel enable bit
  5245F  Uint16 XCERA10 : 1 ;
  5246F                     // 10 Receive Channel enable bit
  5247F  Uint16 XCERA11 : 1 ;
  5248F                     // 11 Receive Channel enable bit
  5249F  Uint16 XCERA12 : 1 ;
  5250F                     // 12 Receive Channel enable bit
  5251F  Uint16 XCERA13 : 1 ;
  5252F                     // 13 Receive Channel enable bit
  5253F  Uint16 XCERA14 : 1 ;
  5254F                     // 14 Receive Channel enable bit
  5255F  Uint16 XCERA15 : 1 ;
  5256F                     // 15 Receive Channel enable bit
  5257F} ;
  5258F
  5259Funion XCERA_REG
  5260F{
  5261F  Uint16 all ;
  5262F  struct XCERA_BITS bit ;
  5263F} ;
  5264F// XCERB control register bit definitions:
  5265F
  5266Fstruct XCERB_BITS
  5267F{                   // bit description
  5268F  Uint16 XCERB0 : 1 ;
  5269F                    // 0 Receive Channel enable bit
  5270F  Uint16 XCERB1 : 1 ;
  5271F                    // 1 Receive Channel enable bit
  5272F  Uint16 XCERB2 : 1 ;
  5273F                    // 2 Receive Channel enable bit
  5274F  Uint16 XCERB3 : 1 ;
  5275F                    // 3 Receive Channel enable bit
  5276F  Uint16 XCERB4 : 1 ;
  5277F                    // 4 Receive Channel enable bit
  5278F  Uint16 XCERB5 : 1 ;
  5279F                    // 5 Receive Channel enable bit
  5280F  Uint16 XCERB6 : 1 ;
  5281F                    // 6 Receive Channel enable bit
  5282F  Uint16 XCERB7 : 1 ;
  5283F                    // 7 Receive Channel enable bit
  5284F  Uint16 XCERB8 : 1 ;
  5285F                    // 8 Receive Channel enable bit
  5286F  Uint16 XCERB9 : 1 ;
  5287F                    // 9 Receive Channel enable bit
  5288F  Uint16 XCERB10 : 1 ;
  5289F                     // 10 Receive Channel enable bit
  5290F  Uint16 XCERB11 : 1 ;
  5291F                     // 11 Receive Channel enable bit
  5292F  Uint16 XCERB12 : 1 ;
  5293F                     // 12 Receive Channel enable bit
  5294F  Uint16 XCERB13 : 1 ;
  5295F                     // 13 Receive Channel enable bit
  5296F  Uint16 XCERB14 : 1 ;
  5297F                     // 14 Receive Channel enable bit
  5298F  Uint16 XCERB15 : 1 ;
  5299F                     // 15 Receive Channel enable bit
  5300F} ;
  5301F
  5302Funion XCERB_REG
  5303F{
  5304F  Uint16 all ;
  5305F  struct XCERB_BITS bit ;
  5306F} ;
  5307F// PCR control register bit definitions:
  5308F
  5309Fstruct PCR_BITS
  5310F{                 // bit description
  5311F  Uint16 CLKRP : 1 ;
  5312F                   // 0 Receive Clock polarity
  5313F  Uint16 CLKXP : 1 ;
  5314F                   // 1 Transmit clock polarity
  5315F  Uint16 FSRP : 1 ;
  5316F                  // 2 Receive Frame synchronization polarity
  5317F  Uint16 FSXP : 1 ;
  5318F                  // 3 Transmit Frame synchronization polarity
  5319F  Uint16 DR_STAT : 1 ;
  5320F                     // 4 DR pin status - reserved for this McBSP
  5321F  Uint16 DX_STAT : 1 ;
  5322F                     // 5 DX pin status - reserved for this McBSP
  5323F  Uint16 CLKS_STAT : 1 ;
  5324F                       // 6 CLKS pin status - reserved for 28x -McBSP
  5325F  Uint16 SCLKME : 1 ;
  5326F                    // 7 Enhanced sample clock mode selection bit.
  5327F  Uint16 CLKRM : 1 ;
  5328F                   // 8 Receiver Clock Mode
  5329F  Uint16 CLKXM : 1 ;
  5330F                   // 9 Transmitter Clock Mode.
  5331F  Uint16 FSRM : 1 ;
  5332F                  // 10 Receive Frame Synchronization Mode
  5333F  Uint16 FSXM : 1 ;
  5334F                  // 11 Transmit Frame Synchronization Mode
  5335F  Uint16 RIOEN : 1 ;
  5336F                   // 12 General Purpose I/O Mode - reserved in this 28x-McBSP
  5337F  Uint16 XIOEN : 1 ;
  5338F                   // 13 General Purpose I/O Mode - reserved in this 28x-McBSP
  5339F  Uint16 IDEL_EN : 1 ;
  5340F                     // 14 reserved in this 28x-McBSP
  5341F  Uint16 rsvd : 1 ;// 15 reserved
  5342F} ;
  5343F
  5344Funion PCR_REG
  5345F{
  5346F  Uint16 all ;
  5347F  struct PCR_BITS bit ;
  5348F} ;
  5349F// RCERC control register bit definitions:
  5350F
  5351Fstruct RCERC_BITS
  5352F{                   // bit description
  5353F  Uint16 RCEC0 : 1 ;
  5354F                   // 0 Receive Channel enable bit
  5355F  Uint16 RCEC1 : 1 ;
  5356F                   // 1 Receive Channel enable bit
  5357F  Uint16 RCEC2 : 1 ;
  5358F                   // 2 Receive Channel enable bit
  5359F  Uint16 RCEC3 : 1 ;
  5360F                   // 3 Receive Channel enable bit
  5361F  Uint16 RCEC4 : 1 ;
  5362F                   // 4 Receive Channel enable bit
  5363F  Uint16 RCEC5 : 1 ;
  5364F                   // 5 Receive Channel enable bit
  5365F  Uint16 RCEC6 : 1 ;
  5366F                   // 6 Receive Channel enable bit
  5367F  Uint16 RCEC7 : 1 ;
  5368F                   // 7 Receive Channel enable bit
  5369F  Uint16 RCEC8 : 1 ;
  5370F                   // 8 Receive Channel enable bit
  5371F  Uint16 RCEC9 : 1 ;
  5372F                   // 9 Receive Channel enable bit
  5373F  Uint16 RCEC10 : 1 ;
  5374F                    // 10 Receive Channel enable bit
  5375F  Uint16 RCEC11 : 1 ;
  5376F                    // 11 Receive Channel enable bit
  5377F  Uint16 RCEC12 : 1 ;
  5378F                    // 12 Receive Channel enable bit
  5379F  Uint16 RCEC13 : 1 ;
  5380F                    // 13 Receive Channel enable bit
  5381F  Uint16 RCEC14 : 1 ;
  5382F                    // 14 Receive Channel enable bit
  5383F  Uint16 RCEC15 : 1 ;
  5384F                    // 15 Receive Channel enable bit
  5385F} ;
  5386F
  5387Funion RCERC_REG
  5388F{
  5389F  Uint16 all ;
  5390F  struct RCERC_BITS bit ;
  5391F} ;
  5392F// RCERD control register bit definitions:
  5393F
  5394Fstruct RCERD_BITS
  5395F{                   // bit description
  5396F  Uint16 RCED0 : 1 ;
  5397F                   // 0 Receive Channel enable bit
  5398F  Uint16 RCED1 : 1 ;
  5399F                   // 1 Receive Channel enable bit
  5400F  Uint16 RCED2 : 1 ;
  5401F                   // 2 Receive Channel enable bit
  5402F  Uint16 RCED3 : 1 ;
  5403F                   // 3 Receive Channel enable bit
  5404F  Uint16 RCED4 : 1 ;
  5405F                   // 4 Receive Channel enable bit
  5406F  Uint16 RCED5 : 1 ;
  5407F                   // 5 Receive Channel enable bit
  5408F  Uint16 RCED6 : 1 ;
  5409F                   // 6 Receive Channel enable bit
  5410F  Uint16 RCED7 : 1 ;
  5411F                   // 7 Receive Channel enable bit
  5412F  Uint16 RCED8 : 1 ;
  5413F                   // 8 Receive Channel enable bit
  5414F  Uint16 RCED9 : 1 ;
  5415F                   // 9 Receive Channel enable bit
  5416F  Uint16 RCED10 : 1 ;
  5417F                    // 10 Receive Channel enable bit
  5418F  Uint16 RCED11 : 1 ;
  5419F                    // 11 Receive Channel enable bit
  5420F  Uint16 RCED12 : 1 ;
  5421F                    // 12 Receive Channel enable bit
  5422F  Uint16 RCED13 : 1 ;
  5423F                    // 13 Receive Channel enable bit
  5424F  Uint16 RCED14 : 1 ;
  5425F                    // 14 Receive Channel enable bit
  5426F  Uint16 RCED15 : 1 ;
  5427F                    // 15 Receive Channel enable bit
  5428F} ;
  5429F
  5430Funion RCERD_REG
  5431F{
  5432F  Uint16 all ;
  5433F  struct RCERD_BITS bit ;
  5434F} ;
  5435F// XCERC control register bit definitions:
  5436F
  5437Fstruct XCERC_BITS
  5438F{                   // bit description
  5439F  Uint16 XCERC0 : 1 ;
  5440F                    // 0 Receive Channel enable bit
  5441F  Uint16 XCERC1 : 1 ;
  5442F                    // 1 Receive Channel enable bit
  5443F  Uint16 XCERC2 : 1 ;
  5444F                    // 2 Receive Channel enable bit
  5445F  Uint16 XCERC3 : 1 ;
  5446F                    // 3 Receive Channel enable bit
  5447F  Uint16 XCERC4 : 1 ;
  5448F                    // 4 Receive Channel enable bit
  5449F  Uint16 XCERC5 : 1 ;
  5450F                    // 5 Receive Channel enable bit
  5451F  Uint16 XCERC6 : 1 ;
  5452F                    // 6 Receive Channel enable bit
  5453F  Uint16 XCERC7 : 1 ;
  5454F                    // 7 Receive Channel enable bit
  5455F  Uint16 XCERC8 : 1 ;
  5456F                    // 8 Receive Channel enable bit
  5457F  Uint16 XCERC9 : 1 ;
  5458F                    // 9 Receive Channel enable bit
  5459F  Uint16 XCERC10 : 1 ;
  5460F                     // 10 Receive Channel enable bit
  5461F  Uint16 XCERC11 : 1 ;
  5462F                     // 11 Receive Channel enable bit
  5463F  Uint16 XCERC12 : 1 ;
  5464F                     // 12 Receive Channel enable bit
  5465F  Uint16 XCERC13 : 1 ;
  5466F                     // 13 Receive Channel enable bit
  5467F  Uint16 XCERC14 : 1 ;
  5468F                     // 14 Receive Channel enable bit
  5469F  Uint16 XCERC15 : 1 ;
  5470F                     // 15 Receive Channel enable bit
  5471F} ;
  5472F
  5473Funion XCERC_REG
  5474F{
  5475F  Uint16 all ;
  5476F  struct XCERC_BITS bit ;
  5477F} ;
  5478F// XCERD control register bit definitions:
  5479F
  5480Fstruct XCERD_BITS
  5481F{                   // bit description
  5482F  Uint16 XCERD0 : 1 ;
  5483F                    // 0 Receive Channel enable bit
  5484F  Uint16 XCERD1 : 1 ;
  5485F                    // 1 Receive Channel enable bit
  5486F  Uint16 XCERD2 : 1 ;
  5487F                    // 2 Receive Channel enable bit
  5488F  Uint16 XCERD3 : 1 ;
  5489F                    // 3 Receive Channel enable bit
  5490F  Uint16 XCERD4 : 1 ;
  5491F                    // 4 Receive Channel enable bit
  5492F  Uint16 XCERD5 : 1 ;
  5493F                    // 5 Receive Channel enable bit
  5494F  Uint16 XCERD6 : 1 ;
  5495F                    // 6 Receive Channel enable bit
  5496F  Uint16 XCERD7 : 1 ;
  5497F                    // 7 Receive Channel enable bit
  5498F  Uint16 XCERD8 : 1 ;
  5499F                    // 8 Receive Channel enable bit
  5500F  Uint16 XCERD9 : 1 ;
  5501F                    // 9 Receive Channel enable bit
  5502F  Uint16 XCERD10 : 1 ;
  5503F                     // 10 Receive Channel enable bit
  5504F  Uint16 XCERD11 : 1 ;
  5505F                     // 11 Receive Channel enable bit
  5506F  Uint16 XCERD12 : 1 ;
  5507F                     // 12 Receive Channel enable bit
  5508F  Uint16 XCERD13 : 1 ;
  5509F                     // 13 Receive Channel enable bit
  5510F  Uint16 XCERD14 : 1 ;
  5511F                     // 14 Receive Channel enable bit
  5512F  Uint16 XCERD15 : 1 ;
  5513F                     // 15 Receive Channel enable bit
  5514F} ;
  5515F
  5516Funion XCERD_REG
  5517F{
  5518F  Uint16 all ;
  5519F  struct XCERD_BITS bit ;
  5520F} ;
  5521F// RCERE control register bit definitions:
  5522F
  5523Fstruct RCERE_BITS
  5524F{                   // bit description
  5525F  Uint16 RCEE0 : 1 ;
  5526F                   // 0 Receive Channel enable bit
  5527F  Uint16 RCEE1 : 1 ;
  5528F                   // 1 Receive Channel enable bit
  5529F  Uint16 RCEE2 : 1 ;
  5530F                   // 2 Receive Channel enable bit
  5531F  Uint16 RCEE3 : 1 ;
  5532F                   // 3 Receive Channel enable bit
  5533F  Uint16 RCEE4 : 1 ;
  5534F                   // 4 Receive Channel enable bit
  5535F  Uint16 RCEE5 : 1 ;
  5536F                   // 5 Receive Channel enable bit
  5537F  Uint16 RCEE6 : 1 ;
  5538F                   // 6 Receive Channel enable bit
  5539F  Uint16 RCEE7 : 1 ;
  5540F                   // 7 Receive Channel enable bit
  5541F  Uint16 RCEE8 : 1 ;
  5542F                   // 8 Receive Channel enable bit
  5543F  Uint16 RCEE9 : 1 ;
  5544F                   // 9 Receive Channel enable bit
  5545F  Uint16 RCEE10 : 1 ;
  5546F                    // 10 Receive Channel enable bit
  5547F  Uint16 RCEE11 : 1 ;
  5548F                    // 11 Receive Channel enable bit
  5549F  Uint16 RCEE12 : 1 ;
  5550F                    // 12 Receive Channel enable bit
  5551F  Uint16 RCEE13 : 1 ;
  5552F                    // 13 Receive Channel enable bit
  5553F  Uint16 RCEE14 : 1 ;
  5554F                    // 14 Receive Channel enable bit
  5555F  Uint16 RCEE15 : 1 ;
  5556F                    // 15 Receive Channel enable bit
  5557F} ;
  5558F
  5559Funion RCERE_REG
  5560F{
  5561F  Uint16 all ;
  5562F  struct RCERE_BITS bit ;
  5563F} ;
  5564F// RCERF control register bit definitions:
  5565F
  5566Fstruct RCERF_BITS
  5567F{                   // bit description
  5568F  Uint16 RCEF0 : 1 ;
  5569F                   // 0 Receive Channel enable bit
  5570F  Uint16 RCEF1 : 1 ;
  5571F                   // 1 Receive Channel enable bit
  5572F  Uint16 RCEF2 : 1 ;
  5573F                   // 2 Receive Channel enable bit
  5574F  Uint16 RCEF3 : 1 ;
  5575F                   // 3 Receive Channel enable bit
  5576F  Uint16 RCEF4 : 1 ;
  5577F                   // 4 Receive Channel enable bit
  5578F  Uint16 RCEF5 : 1 ;
  5579F                   // 5 Receive Channel enable bit
  5580F  Uint16 RCEF6 : 1 ;
  5581F                   // 6 Receive Channel enable bit
  5582F  Uint16 RCEF7 : 1 ;
  5583F                   // 7 Receive Channel enable bit
  5584F  Uint16 RCEF8 : 1 ;
  5585F                   // 8 Receive Channel enable bit
  5586F  Uint16 RCEF9 : 1 ;
  5587F                   // 9 Receive Channel enable bit
  5588F  Uint16 RCEF10 : 1 ;
  5589F                    // 10 Receive Channel enable bit
  5590F  Uint16 RCEF11 : 1 ;
  5591F                    // 11 Receive Channel enable bit
  5592F  Uint16 RCEF12 : 1 ;
  5593F                    // 12 Receive Channel enable bit
  5594F  Uint16 RCEF13 : 1 ;
  5595F                    // 13 Receive Channel enable bit
  5596F  Uint16 RCEF14 : 1 ;
  5597F                    // 14 Receive Channel enable bit
  5598F  Uint16 RCEF15 : 1 ;
  5599F                    // 15 Receive Channel enable bit
  5600F} ;
  5601F
  5602Funion RCERF_REG
  5603F{
  5604F  Uint16 all ;
  5605F  struct RCERF_BITS bit ;
  5606F} ;
  5607F// XCERE control register bit definitions:
  5608F
  5609Fstruct XCERE_BITS
  5610F{                   // bit description
  5611F  Uint16 XCERE0 : 1 ;
  5612F                    // 0 Receive Channel enable bit
  5613F  Uint16 XCERE1 : 1 ;
  5614F                    // 1 Receive Channel enable bit
  5615F  Uint16 XCERE2 : 1 ;
  5616F                    // 2 Receive Channel enable bit
  5617F  Uint16 XCERE3 : 1 ;
  5618F                    // 3 Receive Channel enable bit
  5619F  Uint16 XCERE4 : 1 ;
  5620F                    // 4 Receive Channel enable bit
  5621F  Uint16 XCERE5 : 1 ;
  5622F                    // 5 Receive Channel enable bit
  5623F  Uint16 XCERE6 : 1 ;
  5624F                    // 6 Receive Channel enable bit
  5625F  Uint16 XCERE7 : 1 ;
  5626F                    // 7 Receive Channel enable bit
  5627F  Uint16 XCERE8 : 1 ;
  5628F                    // 8 Receive Channel enable bit
  5629F  Uint16 XCERE9 : 1 ;
  5630F                    // 9 Receive Channel enable bit
  5631F  Uint16 XCERE10 : 1 ;
  5632F                     // 10 Receive Channel enable bit
  5633F  Uint16 XCERE11 : 1 ;
  5634F                     // 11 Receive Channel enable bit
  5635F  Uint16 XCERE12 : 1 ;
  5636F                     // 12 Receive Channel enable bit
  5637F  Uint16 XCERE13 : 1 ;
  5638F                     // 13 Receive Channel enable bit
  5639F  Uint16 XCERE14 : 1 ;
  5640F                     // 14 Receive Channel enable bit
  5641F  Uint16 XCERE15 : 1 ;
  5642F                     // 15 Receive Channel enable bit
  5643F} ;
  5644F
  5645Funion XCERE_REG
  5646F{
  5647F  Uint16 all ;
  5648F  struct XCERE_BITS bit ;
  5649F} ;
  5650F// XCERF control register bit definitions:
  5651F
  5652Fstruct XCERF_BITS
  5653F{                   // bit description
  5654F  Uint16 XCERF0 : 1 ;
  5655F                    // 0 Receive Channel enable bit
  5656F  Uint16 XCERF1 : 1 ;
  5657F                    // 1 Receive Channel enable bit
  5658F  Uint16 XCERF2 : 1 ;
  5659F                    // 2 Receive Channel enable bit
  5660F  Uint16 XCERF3 : 1 ;
  5661F                    // 3 Receive Channel enable bit
  5662F  Uint16 XCERF4 : 1 ;
  5663F                    // 4 Receive Channel enable bit
  5664F  Uint16 XCERF5 : 1 ;
  5665F                    // 5 Receive Channel enable bit
  5666F  Uint16 XCERF6 : 1 ;
  5667F                    // 6 Receive Channel enable bit
  5668F  Uint16 XCERF7 : 1 ;
  5669F                    // 7 Receive Channel enable bit
  5670F  Uint16 XCERF8 : 1 ;
  5671F                    // 8 Receive Channel enable bit
  5672F  Uint16 XCERF9 : 1 ;
  5673F                    // 9 Receive Channel enable bit
  5674F  Uint16 XCERF10 : 1 ;
  5675F                     // 10 Receive Channel enable bit
  5676F  Uint16 XCERF11 : 1 ;
  5677F                     // 11 Receive Channel enable bit
  5678F  Uint16 XCERF12 : 1 ;
  5679F                     // 12 Receive Channel enable bit
  5680F  Uint16 XCERF13 : 1 ;
  5681F                     // 13 Receive Channel enable bit
  5682F  Uint16 XCERF14 : 1 ;
  5683F                     // 14 Receive Channel enable bit
  5684F  Uint16 XCERF15 : 1 ;
  5685F                     // 15 Receive Channel enable bit
  5686F} ;
  5687F
  5688Funion XCERF_REG
  5689F{
  5690F  Uint16 all ;
  5691F  struct XCERF_BITS bit ;
  5692F} ;
  5693F// RCERG control register bit definitions:
  5694F
  5695Fstruct RCERG_BITS
  5696F{                   // bit description
  5697F  Uint16 RCEG0 : 1 ;
  5698F                   // 0 Receive Channel enable bit
  5699F  Uint16 RCEG1 : 1 ;
  5700F                   // 1 Receive Channel enable bit
  5701F  Uint16 RCEG2 : 1 ;
  5702F                   // 2 Receive Channel enable bit
  5703F  Uint16 RCEG3 : 1 ;
  5704F                   // 3 Receive Channel enable bit
  5705F  Uint16 RCEG4 : 1 ;
  5706F                   // 4 Receive Channel enable bit
  5707F  Uint16 RCEG5 : 1 ;
  5708F                   // 5 Receive Channel enable bit
  5709F  Uint16 RCEG6 : 1 ;
  5710F                   // 6 Receive Channel enable bit
  5711F  Uint16 RCEG7 : 1 ;
  5712F                   // 7 Receive Channel enable bit
  5713F  Uint16 RCEG8 : 1 ;
  5714F                   // 8 Receive Channel enable bit
  5715F  Uint16 RCEG9 : 1 ;
  5716F                   // 9 Receive Channel enable bit
  5717F  Uint16 RCEG10 : 1 ;
  5718F                    // 10 Receive Channel enable bit
  5719F  Uint16 RCEG11 : 1 ;
  5720F                    // 11 Receive Channel enable bit
  5721F  Uint16 RCEG12 : 1 ;
  5722F                    // 12 Receive Channel enable bit
  5723F  Uint16 RCEG13 : 1 ;
  5724F                    // 13 Receive Channel enable bit
  5725F  Uint16 RCEG14 : 1 ;
  5726F                    // 14 Receive Channel enable bit
  5727F  Uint16 RCEG15 : 1 ;
  5728F                    // 15 Receive Channel enable bit
  5729F} ;
  5730F
  5731Funion RCERG_REG
  5732F{
  5733F  Uint16 all ;
  5734F  struct RCERG_BITS bit ;
  5735F} ;
  5736F// RCERH control register bit definitions:
  5737F
  5738Fstruct RCERH_BITS
  5739F{                   // bit description
  5740F  Uint16 RCEH0 : 1 ;
  5741F                   // 0 Receive Channel enable bit
  5742F  Uint16 RCEH1 : 1 ;
  5743F                   // 1 Receive Channel enable bit
  5744F  Uint16 RCEH2 : 1 ;
  5745F                   // 2 Receive Channel enable bit
  5746F  Uint16 RCEH3 : 1 ;
  5747F                   // 3 Receive Channel enable bit
  5748F  Uint16 RCEH4 : 1 ;
  5749F                   // 4 Receive Channel enable bit
  5750F  Uint16 RCEH5 : 1 ;
  5751F                   // 5 Receive Channel enable bit
  5752F  Uint16 RCEH6 : 1 ;
  5753F                   // 6 Receive Channel enable bit
  5754F  Uint16 RCEH7 : 1 ;
  5755F                   // 7 Receive Channel enable bit
  5756F  Uint16 RCEH8 : 1 ;
  5757F                   // 8 Receive Channel enable bit
  5758F  Uint16 RCEH9 : 1 ;
  5759F                   // 9 Receive Channel enable bit
  5760F  Uint16 RCEH10 : 1 ;
  5761F                    // 10 Receive Channel enable bit
  5762F  Uint16 RCEH11 : 1 ;
  5763F                    // 11 Receive Channel enable bit
  5764F  Uint16 RCEH12 : 1 ;
  5765F                    // 12 Receive Channel enable bit
  5766F  Uint16 RCEH13 : 1 ;
  5767F                    // 13 Receive Channel enable bit
  5768F  Uint16 RCEH14 : 1 ;
  5769F                    // 14 Receive Channel enable bit
  5770F  Uint16 RCEH15 : 1 ;
  5771F                    // 15 Receive Channel enable bit
  5772F} ;
  5773F
  5774Funion RCERH_REG
  5775F{
  5776F  Uint16 all ;
  5777F  struct RCERH_BITS bit ;
  5778F} ;
  5779F// XCERG control register bit definitions:
  5780F
  5781Fstruct XCERG_BITS
  5782F{                   // bit description
  5783F  Uint16 XCERG0 : 1 ;
  5784F                    // 0 Receive Channel enable bit
  5785F  Uint16 XCERG1 : 1 ;
  5786F                    // 1 Receive Channel enable bit
  5787F  Uint16 XCERG2 : 1 ;
  5788F                    // 2 Receive Channel enable bit
  5789F  Uint16 XCERG3 : 1 ;
  5790F                    // 3 Receive Channel enable bit
  5791F  Uint16 XCERG4 : 1 ;
  5792F                    // 4 Receive Channel enable bit
  5793F  Uint16 XCERG5 : 1 ;
  5794F                    // 5 Receive Channel enable bit
  5795F  Uint16 XCERG6 : 1 ;
  5796F                    // 6 Receive Channel enable bit
  5797F  Uint16 XCERG7 : 1 ;
  5798F                    // 7 Receive Channel enable bit
  5799F  Uint16 XCERG8 : 1 ;
  5800F                    // 8 Receive Channel enable bit
  5801F  Uint16 XCERG9 : 1 ;
  5802F                    // 9 Receive Channel enable bit
  5803F  Uint16 XCERG10 : 1 ;
  5804F                     // 10 Receive Channel enable bit
  5805F  Uint16 XCERG11 : 1 ;
  5806F                     // 11 Receive Channel enable bit
  5807F  Uint16 XCERG12 : 1 ;
  5808F                     // 12 Receive Channel enable bit
  5809F  Uint16 XCERG13 : 1 ;
  5810F                     // 13 Receive Channel enable bit
  5811F  Uint16 XCERG14 : 1 ;
  5812F                     // 14 Receive Channel enable bit
  5813F  Uint16 XCERG15 : 1 ;
  5814F                     // 15 Receive Channel enable bit
  5815F} ;
  5816F
  5817Funion XCERG_REG
  5818F{
  5819F  Uint16 all ;
  5820F  struct XCERG_BITS bit ;
  5821F} ;
  5822F// XCERH control register bit definitions:
  5823F
  5824Fstruct XCERH_BITS
  5825F{                   // bit description
  5826F  Uint16 XCEH0 : 1 ;
  5827F                   // 0 Receive Channel enable bit
  5828F  Uint16 XCEH1 : 1 ;
  5829F                   // 1 Receive Channel enable bit
  5830F  Uint16 XCEH2 : 1 ;
  5831F                   // 2 Receive Channel enable bit
  5832F  Uint16 XCEH3 : 1 ;
  5833F                   // 3 Receive Channel enable bit
  5834F  Uint16 XCEH4 : 1 ;
  5835F                   // 4 Receive Channel enable bit
  5836F  Uint16 XCEH5 : 1 ;
  5837F                   // 5 Receive Channel enable bit
  5838F  Uint16 XCEH6 : 1 ;
  5839F                   // 6 Receive Channel enable bit
  5840F  Uint16 XCEH7 : 1 ;
  5841F                   // 7 Receive Channel enable bit
  5842F  Uint16 XCEH8 : 1 ;
  5843F                   // 8 Receive Channel enable bit
  5844F  Uint16 XCEH9 : 1 ;
  5845F                   // 9 Receive Channel enable bit
  5846F  Uint16 XCEH10 : 1 ;
  5847F                    // 10 Receive Channel enable bit
  5848F  Uint16 XCEH11 : 1 ;
  5849F                    // 11 Receive Channel enable bit
  5850F  Uint16 XCEH12 : 1 ;
  5851F                    // 12 Receive Channel enable bit
  5852F  Uint16 XCEH13 : 1 ;
  5853F                    // 13 Receive Channel enable bit
  5854F  Uint16 XCEH14 : 1 ;
  5855F                    // 14 Receive Channel enable bit
  5856F  Uint16 XCEH15 : 1 ;
  5857F                    // 15 Receive Channel enable bit
  5858F} ;
  5859F
  5860Funion XCERH_REG
  5861F{
  5862F  Uint16 all ;
  5863F  struct XCERH_BITS bit ;
  5864F} ;
  5865F// McBSP Interrupt enable register for RINT/XINT
  5866F
  5867Fstruct MFFINT_BITS
  5868F{                    // bits description
  5869F  Uint16 XINT : 1 ;// 0 XINT interrupt enable
  5870F  Uint16 rsvd1 : 1 ;// 1 reserved
  5871F  Uint16 RINT : 1 ;// 2 RINT interrupt enable
  5872F  Uint16 rsvd2 : 13 ;// 15:3 reserved
  5873F} ;
  5874F
  5875Funion MFFINT_REG
  5876F{
  5877F  Uint16 all ;
  5878F  struct MFFINT_BITS bit ;
  5879F} ;
  5880F//---------------------------------------------------------------------------
  5881F// McBSP Register File:
  5882F//
  5883F
  5884Fstruct MCBSP_REGS
  5885F{
  5886F  union DRR2_REG DRR2 ; // MCBSP Data receive register bits 31-16
  5887F  union DRR1_REG DRR1 ; // MCBSP Data receive register bits 15-0
  5888F  union DXR2_REG DXR2 ; // MCBSP Data transmit register bits 31-16
  5889F  union DXR1_REG DXR1 ; // MCBSP Data transmit register bits 15-0
  5890F  union SPCR2_REG SPCR2 ; // MCBSP control register bits 31-16
  5891F  union SPCR1_REG SPCR1 ; // MCBSP control register bits 15-0
  5892F  union RCR2_REG RCR2 ; // MCBSP receive control register bits 31-16
  5893F  union RCR1_REG RCR1 ; // MCBSP receive control register bits 15-0
  5894F  union XCR2_REG XCR2 ; // MCBSP transmit control register bits 31-16
  5895F  union XCR1_REG XCR1 ; // MCBSP transmit control register bits 15-0
  5896F  union SRGR2_REG SRGR2 ; // MCBSP sample rate gen register bits 31-16
  5897F  union SRGR1_REG SRGR1 ; // MCBSP sample rate gen register bits 15-0
  5898F  union MCR2_REG MCR2 ; // MCBSP multichannel register bits 31-16
  5899F  union MCR1_REG MCR1 ; // MCBSP multichannel register bits 15-0
  5900F  union RCERA_REG RCERA ; // MCBSP Receive channel enable partition A
  5901F  union RCERB_REG RCERB ; // MCBSP Receive channel enable partition B
  5902F  union XCERA_REG XCERA ; // MCBSP Transmit channel enable partition A
  5903F  union XCERB_REG XCERB ; // MCBSP Transmit channel enable partition B
  5904F  union PCR_REG PCR ; // MCBSP Pin control register bits 15-0
  5905F  union RCERC_REG RCERC ; // MCBSP Receive channel enable partition C
  5906F  union RCERD_REG RCERD ; // MCBSP Receive channel enable partition D
  5907F  union XCERC_REG XCERC ; // MCBSP Transmit channel enable partition C
  5908F  union XCERD_REG XCERD ; // MCBSP Transmit channel enable partition D
  5909F  union RCERE_REG RCERE ; // MCBSP Receive channel enable partition E
  5910F  union RCERF_REG RCERF ; // MCBSP Receive channel enable partition F
  5911F  union XCERE_REG XCERE ; // MCBSP Transmit channel enable partition E
  5912F  union XCERF_REG XCERF ; // MCBSP Transmit channel enable partition F
  5913F  union RCERG_REG RCERG ; // MCBSP Receive channel enable partition G
  5914F  union RCERH_REG RCERH ; // MCBSP Receive channel enable partition H
  5915F  union XCERG_REG XCERG ; // MCBSP Transmit channel enable partition G
  5916F  union XCERH_REG XCERH ; // MCBSP Transmit channel enable partition H
  5917F  Uint16 rsvd1 [ 4 ] ;
  5918F                    // reserved
  5919F  union MFFINT_REG MFFINT ; // MCBSP Interrupt enable register for RINT/XINT
  5920F  Uint16 rsvd2 ; // reserved
  5921F} ;
  5922F//---------------------------------------------------------------------------
  5923F// McBSP External References & Function Declarations:
  5924F//
  5925F
  5926Fextern volatile struct MCBSP_REGS
  5927F  McbspaRegs ;
  5928F
  5929Fextern volatile struct MCBSP_REGS
  5930F  McbspbRegs ;
  5931F       /* extern "C" */
  5932F       // end of DSP2833x_MCBSP_H definition
  5933F//===========================================================================
  5934F// No more.
  5935F//===========================================================================
  5936F 
  5937F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_McBSP.h*/
  5938F/*   CLOSE_FILE Include File */
  5939F 
  5940F              // McBSP
  5941F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieCtrl.h */
  5942F// TI File $Revision: /main/1 $
  5943F// Checkin $Date: August 18, 2006 13:52:24 $
  5944F//###########################################################################
  5945F//
  5946F// FILE: DSP2833x_PieCtrl.h
  5947F//
  5948F// TITLE: DSP2833x Device PIE Control Register Definitions.
  5949F//
  5950F//###########################################################################
  5951F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  5952F// $Release Date: August 4, 2009 $
  5953F//###########################################################################
  5954F#ifndef DSP2833x_PIE_CTRL_H
  5955F#define DSP2833x_PIE_CTRL_H
  5956F//---------------------------------------------------------------------------
  5957F// PIE Control Register Bit Definitions:
  5958F//
  5959F// PIECTRL: Register bit definitions:
  5960F
  5961Ftypedef
  5962Fstruct PIECTRL_BITS
  5963F{                            // bits description
  5964F  Uint16 ENPIE : 1 ;
  5965F                   // 0 Enable PIE block
  5966F  Uint16 PIEVECT : 15 ;
  5967F                      // 15:1 Fetched vector address
  5968F} PIECTRL_BITS ;
  5969F
  5970Ftypedef
  5971Funion PIECTRL_REG
  5972F{
  5973F  Uint16 all ;
  5974F  struct PIECTRL_BITS bit ;
  5975F} PIECTRL_REG ;
  5976F// PIEIER: Register bit definitions:
  5977F
  5978Ftypedef
  5979Fstruct PIEIER_BITS
  5980F{                            // bits description
  5981F  Uint16 INTx1 : 1 ;
  5982F                   // 0 INTx.1
  5983F  Uint16 INTx2 : 1 ;
  5984F                   // 1 INTx.2
  5985F  Uint16 INTx3 : 1 ;
  5986F                   // 2 INTx.3
  5987F  Uint16 INTx4 : 1 ;
  5988F                   // 3 INTx.4
  5989F  Uint16 INTx5 : 1 ;
  5990F                   // 4 INTx.5
  5991F  Uint16 INTx6 : 1 ;
  5992F                   // 5 INTx.6
  5993F  Uint16 INTx7 : 1 ;
  5994F                   // 6 INTx.7
  5995F  Uint16 INTx8 : 1 ;
  5996F                   // 7 INTx.8
  5997F  Uint16 rsvd : 8 ;
  5998F                  // 15:8 reserved
  5999F} PIEIER_BITS ;
  6000F
  6001Ftypedef
  6002Funion PIEIER_REG
  6003F{
  6004F  Uint16 all ;
  6005F  struct PIEIER_BITS bit ;
  6006F} PIEIER_REG ;
  6007F// PIEIFR: Register bit definitions:
  6008F
  6009Ftypedef
  6010Fstruct PIEIFR_BITS
  6011F{                            // bits description
  6012F  Uint16 INTx1 : 1 ;
  6013F                   // 0 INTx.1
  6014F  Uint16 INTx2 : 1 ;
  6015F                   // 1 INTx.2
  6016F  Uint16 INTx3 : 1 ;
  6017F                   // 2 INTx.3
  6018F  Uint16 INTx4 : 1 ;
  6019F                   // 3 INTx.4
  6020F  Uint16 INTx5 : 1 ;
  6021F                   // 4 INTx.5
  6022F  Uint16 INTx6 : 1 ;
  6023F                   // 5 INTx.6
  6024F  Uint16 INTx7 : 1 ;
  6025F                   // 6 INTx.7
  6026F  Uint16 INTx8 : 1 ;
  6027F                   // 7 INTx.8
  6028F  Uint16 rsvd : 8 ;
  6029F                  // 15:8 reserved
  6030F} PIEIFR_BITS ;
  6031F
  6032Ftypedef
  6033Funion PIEIFR_REG
  6034F{
  6035F  Uint16 all ;
  6036F  struct PIEIFR_BITS bit ;
  6037F} PIEIFR_REG ;
  6038F// PIEACK: Register bit definitions:
  6039F
  6040Ftypedef
  6041Fstruct PIEACK_BITS
  6042F{                            // bits description
  6043F  Uint16 ACK1 : 1 ;
  6044F                  // 0 Acknowledge PIE interrupt group 1
  6045F  Uint16 ACK2 : 1 ;
  6046F                  // 1 Acknowledge PIE interrupt group 2
  6047F  Uint16 ACK3 : 1 ;
  6048F                  // 2 Acknowledge PIE interrupt group 3
  6049F  Uint16 ACK4 : 1 ;
  6050F                  // 3 Acknowledge PIE interrupt group 4
  6051F  Uint16 ACK5 : 1 ;
  6052F                  // 4 Acknowledge PIE interrupt group 5
  6053F  Uint16 ACK6 : 1 ;
  6054F                  // 5 Acknowledge PIE interrupt group 6
  6055F  Uint16 ACK7 : 1 ;
  6056F                  // 6 Acknowledge PIE interrupt group 7
  6057F  Uint16 ACK8 : 1 ;
  6058F                  // 7 Acknowledge PIE interrupt group 8
  6059F  Uint16 ACK9 : 1 ;
  6060F                  // 8 Acknowledge PIE interrupt group 9
  6061F  Uint16 ACK10 : 1 ;
  6062F                   // 9 Acknowledge PIE interrupt group 10
  6063F  Uint16 ACK11 : 1 ;
  6064F                   // 10 Acknowledge PIE interrupt group 11
  6065F  Uint16 ACK12 : 1 ;
  6066F                   // 11 Acknowledge PIE interrupt group 12
  6067F  Uint16 rsvd : 4 ;
  6068F                  // 15:12 reserved
  6069F} PIEACK_BITS ;
  6070F
  6071Ftypedef
  6072Funion PIEACK_REG
  6073F{
  6074F  Uint16 all ;
  6075F  struct PIEACK_BITS bit ;
  6076F} PIEACK_REG ;
  6077F//---------------------------------------------------------------------------
  6078F// PIE Control Register File:
  6079F//
  6080F
  6081Ftypedef
  6082Fstruct PIE_CTRL_REGS
  6083F{
  6084F  union PIECTRL_REG PIECTRL ; // PIE control register
  6085F  union PIEACK_REG PIEACK ; // PIE acknowledge
  6086F  union PIEIER_REG PIEIER1 ; // PIE int1 IER register
  6087F  union PIEIFR_REG PIEIFR1 ; // PIE int1 IFR register
  6088F  union PIEIER_REG PIEIER2 ; // PIE INT2 IER register
  6089F  union PIEIFR_REG PIEIFR2 ; // PIE INT2 IFR register
  6090F  union PIEIER_REG PIEIER3 ; // PIE INT3 IER register
  6091F  union PIEIFR_REG PIEIFR3 ; // PIE INT3 IFR register
  6092F  union PIEIER_REG PIEIER4 ; // PIE INT4 IER register
  6093F  union PIEIFR_REG PIEIFR4 ; // PIE INT4 IFR register
  6094F  union PIEIER_REG PIEIER5 ; // PIE INT5 IER register
  6095F  union PIEIFR_REG PIEIFR5 ; // PIE INT5 IFR register
  6096F  union PIEIER_REG PIEIER6 ; // PIE INT6 IER register
  6097F  union PIEIFR_REG PIEIFR6 ; // PIE INT6 IFR register
  6098F  union PIEIER_REG PIEIER7 ; // PIE INT7 IER register
  6099F  union PIEIFR_REG PIEIFR7 ; // PIE INT7 IFR register
  6100F  union PIEIER_REG PIEIER8 ; // PIE INT8 IER register
  6101F  union PIEIFR_REG PIEIFR8 ; // PIE INT8 IFR register
  6102F  union PIEIER_REG PIEIER9 ; // PIE INT9 IER register
  6103F  union PIEIFR_REG PIEIFR9 ; // PIE INT9 IFR register
  6104F  union PIEIER_REG PIEIER10 ; // PIE int10 IER register
  6105F  union PIEIFR_REG PIEIFR10 ; // PIE int10 IFR register
  6106F  union PIEIER_REG PIEIER11 ; // PIE int11 IER register
  6107F  union PIEIFR_REG PIEIFR11 ; // PIE int11 IFR register
  6108F  union PIEIER_REG PIEIER12 ; // PIE int12 IER register
  6109F  union PIEIFR_REG PIEIFR12 ; // PIE int12 IFR register
  6110F} PIE_CTRL_REGS ;
  6111F#define PIEACK_GROUP1 0x0001
  6112F#define PIEACK_GROUP2 0x0002
  6113F#define PIEACK_GROUP3 0x0004
  6114F#define PIEACK_GROUP4 0x0008
  6115F#define PIEACK_GROUP5 0x0010
  6116F#define PIEACK_GROUP6 0x0020
  6117F#define PIEACK_GROUP7 0x0040
  6118F#define PIEACK_GROUP8 0x0080
  6119F#define PIEACK_GROUP9 0x0100
  6120F#define PIEACK_GROUP10 0x0200
  6121F#define PIEACK_GROUP11 0x0400
  6122F#define PIEACK_GROUP12 0x0800
  6123F//---------------------------------------------------------------------------
  6124F// PIE Control Registers External References & Function Declarations:
  6125F//
  6126F
  6127Fextern volatile struct PIE_CTRL_REGS
  6128F  PieCtrlRegs ;
  6129F       // end of DSP2833x_PIE_CTRL_H definition
  6130F//===========================================================================
  6131F// End of file.
  6132F//===========================================================================
  6133F 
  6134F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieCtrl.h*/
  6135F/*   CLOSE_FILE Include File */
  6136F 
  6137F            // PIE Control Registers
  6138F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieVect.h */
  6139F// TI File $Revision: /main/2 $
  6140F// Checkin $Date: March 16, 2007 09:00:21 $
  6141F//###########################################################################
  6142F//
  6143F// FILE: DSP2833x_PieVect.h
  6144F//
  6145F// TITLE: DSP2833x Devices PIE Vector Table Definitions.
  6146F//
  6147F//###########################################################################
  6148F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6149F// $Release Date: August 4, 2009 $
  6150F//###########################################################################
  6151F#ifndef DSP2833x_PIE_VECT_H
  6152F#define DSP2833x_PIE_VECT_H
  6153F//---------------------------------------------------------------------------
  6154F// PIE Interrupt Vector Table Definition:
  6155F//
  6156F// Create a user type called PINT (pointer to interrupt):
  6157F
  6158Ftypedef
  6159Fconst
  6160Finterrupt void ( * PINT ) ( void ) ;
  6161F// Define Vector Table:
  6162F
  6163Ftypedef
  6164Fstruct PIE_VECT_TABLE
  6165F{
  6166F// Reset is never fetched from this table.
  6167F// It will always be fetched from 0x3FFFC0 in
  6168F// boot ROM
  6169F  PINT PIE1_RESERVED ;
  6170F  PINT PIE2_RESERVED ;
  6171F  PINT PIE3_RESERVED ;
  6172F  PINT PIE4_RESERVED ;
  6173F  PINT PIE5_RESERVED ;
  6174F  PINT PIE6_RESERVED ;
  6175F  PINT PIE7_RESERVED ;
  6176F  PINT PIE8_RESERVED ;
  6177F  PINT PIE9_RESERVED ;
  6178F  PINT PIE10_RESERVED ;
  6179F  PINT PIE11_RESERVED ;
  6180F  PINT PIE12_RESERVED ;
  6181F  PINT PIE13_RESERVED ;
  6182F// Non-Peripheral Interrupts:
  6183F  PINT XINT13 ;    // XINT13 / CPU-Timer1
  6184F  PINT TINT2 ;    // CPU-Timer2
  6185F  PINT DATALOG ;    // Datalogging interrupt
  6186F  PINT RTOSINT ;    // RTOS interrupt
  6187F  PINT EMUINT ;    // Emulation interrupt
  6188F  PINT XNMI ;    // Non-maskable interrupt
  6189F  PINT ILLEGAL ;    // Illegal operation TRAP
  6190F  PINT USER1 ;    // User Defined trap 1
  6191F  PINT USER2 ;    // User Defined trap 2
  6192F  PINT USER3 ;    // User Defined trap 3
  6193F  PINT USER4 ;    // User Defined trap 4
  6194F  PINT USER5 ;    // User Defined trap 5
  6195F  PINT USER6 ;    // User Defined trap 6
  6196F  PINT USER7 ;    // User Defined trap 7
  6197F  PINT USER8 ;    // User Defined trap 8
  6198F  PINT USER9 ;    // User Defined trap 9
  6199F  PINT USER10 ;    // User Defined trap 10
  6200F  PINT USER11 ;    // User Defined trap 11
  6201F  PINT USER12 ;    // User Defined trap 12
  6202F// Group 1 PIE Peripheral Vectors:
  6203F  PINT SEQ1INT ;
  6204F  PINT SEQ2INT ;
  6205F  PINT rsvd1_3 ;
  6206F  PINT XINT1 ;
  6207F  PINT XINT2 ;
  6208F  PINT ADCINT ;    // ADC
  6209F  PINT TINT0 ;    // Timer 0
  6210F  PINT WAKEINT ;    // WD
  6211F// Group 2 PIE Peripheral Vectors:
  6212F  PINT EPWM1_TZINT ;    // EPWM-1
  6213F  PINT EPWM2_TZINT ;    // EPWM-2
  6214F  PINT EPWM3_TZINT ;    // EPWM-3
  6215F  PINT EPWM4_TZINT ;    // EPWM-4
  6216F  PINT EPWM5_TZINT ;    // EPWM-5
  6217F  PINT EPWM6_TZINT ;    // EPWM-6
  6218F  PINT rsvd2_7 ;
  6219F  PINT rsvd2_8 ;
  6220F// Group 3 PIE Peripheral Vectors:
  6221F  PINT EPWM1_INT ;    // EPWM-1
  6222F  PINT EPWM2_INT ;    // EPWM-2
  6223F  PINT EPWM3_INT ;    // EPWM-3
  6224F  PINT EPWM4_INT ;    // EPWM-4
  6225F  PINT EPWM5_INT ;    // EPWM-5
  6226F  PINT EPWM6_INT ;    // EPWM-6
  6227F  PINT rsvd3_7 ;
  6228F  PINT rsvd3_8 ;
  6229F// Group 4 PIE Peripheral Vectors:
  6230F  PINT ECAP1_INT ;    // ECAP-1
  6231F  PINT ECAP2_INT ;    // ECAP-2
  6232F  PINT ECAP3_INT ;    // ECAP-3
  6233F  PINT ECAP4_INT ;    // ECAP-4
  6234F  PINT ECAP5_INT ;    // ECAP-5
  6235F  PINT ECAP6_INT ;    // ECAP-6
  6236F  PINT rsvd4_7 ;
  6237F  PINT rsvd4_8 ;
  6238F// Group 5 PIE Peripheral Vectors:
  6239F  PINT EQEP1_INT ;    // EQEP-1
  6240F  PINT EQEP2_INT ;    // EQEP-2
  6241F  PINT rsvd5_3 ;
  6242F  PINT rsvd5_4 ;
  6243F  PINT rsvd5_5 ;
  6244F  PINT rsvd5_6 ;
  6245F  PINT rsvd5_7 ;
  6246F  PINT rsvd5_8 ;
  6247F// Group 6 PIE Peripheral Vectors:
  6248F  PINT SPIRXINTA ;    // SPI-A
  6249F  PINT SPITXINTA ;    // SPI-A
  6250F  PINT MRINTB ;    // McBSP-B
  6251F  PINT MXINTB ;    // McBSP-B
  6252F  PINT MRINTA ;        // McBSP-A
  6253F  PINT MXINTA ;    // McBSP-A
  6254F  PINT rsvd6_7 ;
  6255F  PINT rsvd6_8 ;
  6256F// Group 7 PIE Peripheral Vectors:
  6257F  PINT DINTCH1 ;    // DMA
  6258F  PINT DINTCH2 ;    // DMA
  6259F  PINT DINTCH3 ;    // DMA
  6260F  PINT DINTCH4 ;    // DMA
  6261F  PINT DINTCH5 ;    // DMA
  6262F  PINT DINTCH6 ;    // DMA
  6263F  PINT rsvd7_7 ;
  6264F  PINT rsvd7_8 ;
  6265F// Group 8 PIE Peripheral Vectors:
  6266F  PINT I2CINT1A ;    // I2C-A
  6267F  PINT I2CINT2A ;    // I2C-A
  6268F  PINT rsvd8_3 ;
  6269F  PINT rsvd8_4 ;
  6270F  PINT SCIRXINTC ;    // SCI-C
  6271F  PINT SCITXINTC ;    // SCI-C
  6272F  PINT rsvd8_7 ;
  6273F  PINT rsvd8_8 ;
  6274F// Group 9 PIE Peripheral Vectors:
  6275F  PINT SCIRXINTA ;    // SCI-A
  6276F  PINT SCITXINTA ;    // SCI-A
  6277F  PINT SCIRXINTB ;    // SCI-B
  6278F  PINT SCITXINTB ;    // SCI-B
  6279F  PINT ECAN0INTA ;    // eCAN-A
  6280F  PINT ECAN1INTA ;    // eCAN-A
  6281F  PINT ECAN0INTB ;    // eCAN-B
  6282F  PINT ECAN1INTB ;    // eCAN-B
  6283F// Group 10 PIE Peripheral Vectors:
  6284F  PINT rsvd10_1 ;
  6285F  PINT rsvd10_2 ;
  6286F  PINT rsvd10_3 ;
  6287F  PINT rsvd10_4 ;
  6288F  PINT rsvd10_5 ;
  6289F  PINT rsvd10_6 ;
  6290F  PINT rsvd10_7 ;
  6291F  PINT rsvd10_8 ;
  6292F// Group 11 PIE Peripheral Vectors:
  6293F  PINT rsvd11_1 ;
  6294F  PINT rsvd11_2 ;
  6295F  PINT rsvd11_3 ;
  6296F  PINT rsvd11_4 ;
  6297F  PINT rsvd11_5 ;
  6298F  PINT rsvd11_6 ;
  6299F  PINT rsvd11_7 ;
  6300F  PINT rsvd11_8 ;
  6301F// Group 12 PIE Peripheral Vectors:
  6302F  PINT XINT3 ;    // External interrupt
  6303F  PINT XINT4 ;
  6304F  PINT XINT5 ;
  6305F  PINT XINT6 ;
  6306F  PINT XINT7 ;
  6307F  PINT rsvd12_6 ;
  6308F  PINT LVF ;    // Latched overflow
  6309F  PINT LUF ;    // Latched underflow
  6310F} PIE_VECT_TABLE ;
  6311F//---------------------------------------------------------------------------
  6312F// PIE Interrupt Vector Table External References & Function Declarations:
  6313F//
  6314F
  6315Fextern struct PIE_VECT_TABLE
  6316F  PieVectTable ;
  6317F       // end of DSP2833x_PIE_VECT_H definition
  6318F//===========================================================================
  6319F// End of file.
  6320F//===========================================================================
  6321F 
  6322F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieVect.h*/
  6323F/*   CLOSE_FILE Include File */
  6324F 
  6325F            // PIE Vector Table
  6326F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Spi.h */
  6327F// TI File $Revision: /main/3 $
  6328F// Checkin $Date: April 17, 2008 11:08:27 $
  6329F//###########################################################################
  6330F//
  6331F// FILE: DSP2833x_Spi.h
  6332F//
  6333F// TITLE: DSP2833x Device SPI Register Definitions.
  6334F//
  6335F//###########################################################################
  6336F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6337F// $Release Date: August 4, 2009 $
  6338F//###########################################################################
  6339F#ifndef DSP2833x_SPI_H
  6340F#define DSP2833x_SPI_H
  6341F//---------------------------------------------------------------------------
  6342F// SPI Individual Register Bit Definitions:
  6343F//
  6344F// SPI FIFO Transmit register bit definitions:
  6345F
  6346Fstruct SPIFFTX_BITS
  6347F{                     // bit description
  6348F  Uint16 TXFFIL : 5 ;
  6349F                    // 4:0 Interrupt level
  6350F  Uint16 TXFFIENA : 1 ;
  6351F                      // 5 Interrupt enable
  6352F  Uint16 TXFFINTCLR : 1 ;
  6353F                        // 6 Clear INT flag
  6354F  Uint16 TXFFINT : 1 ;
  6355F                     // 7 INT flag
  6356F  Uint16 TXFFST : 5 ;
  6357F                    // 12:8 FIFO status
  6358F  Uint16 TXFIFO : 1 ;
  6359F                    // 13 FIFO reset
  6360F  Uint16 SPIFFENA : 1 ;
  6361F                      // 14 Enhancement enable
  6362F  Uint16 SPIRST : 1 ;
  6363F                    // 15 Reset SPI
  6364F} ;
  6365F
  6366Funion SPIFFTX_REG
  6367F{
  6368F  Uint16 all ;
  6369F  struct SPIFFTX_BITS bit ;
  6370F} ;
  6371F//--------------------------------------------
  6372F// SPI FIFO recieve register bit definitions:
  6373F//
  6374F//
  6375F
  6376Fstruct SPIFFRX_BITS
  6377F{                     // bits description
  6378F  Uint16 RXFFIL : 5 ;
  6379F                    // 4:0 Interrupt level
  6380F  Uint16 RXFFIENA : 1 ;
  6381F                      // 5 Interrupt enable
  6382F  Uint16 RXFFINTCLR : 1 ;
  6383F                        // 6 Clear INT flag
  6384F  Uint16 RXFFINT : 1 ;
  6385F                     // 7 INT flag
  6386F  Uint16 RXFFST : 5 ;
  6387F                    // 12:8 FIFO status
  6388F  Uint16 RXFIFORESET : 1 ;
  6389F                         // 13 FIFO reset
  6390F  Uint16 RXFFOVFCLR : 1 ;
  6391F                        // 14 Clear overflow
  6392F  Uint16 RXFFOVF : 1 ;
  6393F                     // 15 FIFO overflow
  6394F} ;
  6395F
  6396Funion SPIFFRX_REG
  6397F{
  6398F  Uint16 all ;
  6399F  struct SPIFFRX_BITS bit ;
  6400F} ;
  6401F//--------------------------------------------
  6402F// SPI FIFO control register bit definitions:
  6403F//
  6404F//
  6405F
  6406Fstruct SPIFFCT_BITS
  6407F{                     // bits description
  6408F  Uint16 TXDLY : 8 ;
  6409F                   // 7:0 FIFO transmit delay
  6410F  Uint16 rsvd : 8 ;
  6411F                  // 15:8 reserved
  6412F} ;
  6413F
  6414Funion SPIFFCT_REG
  6415F{
  6416F  Uint16 all ;
  6417F  struct SPIFFCT_BITS bit ;
  6418F} ;
  6419F//---------------------------------------------
  6420F// SPI configuration register bit definitions:
  6421F//
  6422F//
  6423F
  6424Fstruct SPICCR_BITS
  6425F{                    // bits description
  6426F  Uint16 SPICHAR : 4 ;
  6427F                     // 3:0 Character length control
  6428F  Uint16 SPILBK : 1 ;
  6429F                    // 4 Loop-back enable/disable
  6430F  Uint16 rsvd1 : 1 ;
  6431F                   // 5 reserved
  6432F  Uint16 CLKPOLARITY : 1 ;
  6433F                         // 6 Clock polarity
  6434F  Uint16 SPISWRESET : 1 ;
  6435F                        // 7 SPI SW Reset
  6436F  Uint16 rsvd2 : 8 ;
  6437F                   // 15:8 reserved
  6438F} ;
  6439F
  6440Funion SPICCR_REG
  6441F{
  6442F  Uint16 all ;
  6443F  struct SPICCR_BITS bit ;
  6444F} ;
  6445F//-------------------------------------------------
  6446F// SPI operation control register bit definitions:
  6447F//
  6448F//
  6449F
  6450Fstruct SPICTL_BITS
  6451F{                    // bits description
  6452F  Uint16 SPIINTENA : 1 ;
  6453F                       // 0 Interrupt enable
  6454F  Uint16 TALK : 1 ;
  6455F                  // 1 Master/Slave transmit enable
  6456F  Uint16 MASTER_SLAVE : 1 ;
  6457F                          // 2 Network control mode
  6458F  Uint16 CLK_PHASE : 1 ;
  6459F                       // 3 Clock phase select
  6460F  Uint16 OVERRUNINTENA : 1 ;
  6461F                           // 4 Overrun interrupt enable
  6462F  Uint16 rsvd : 11 ;
  6463F                   // 15:5 reserved
  6464F} ;
  6465F
  6466Funion SPICTL_REG
  6467F{
  6468F  Uint16 all ;
  6469F  struct SPICTL_BITS bit ;
  6470F} ;
  6471F//--------------------------------------
  6472F// SPI status register bit definitions:
  6473F//
  6474F//
  6475F
  6476Fstruct SPISTS_BITS
  6477F{                    // bits description
  6478F  Uint16 rsvd1 : 5 ;
  6479F                   // 4:0 reserved
  6480F  Uint16 BUFFULL_FLAG : 1 ;
  6481F                          // 5 SPI transmit buffer full flag
  6482F  Uint16 INT_FLAG : 1 ;
  6483F                      // 6 SPI interrupt flag
  6484F  Uint16 OVERRUN_FLAG : 1 ;
  6485F                          // 7 SPI reciever overrun flag
  6486F  Uint16 rsvd2 : 8 ;
  6487F                   // 15:8 reserved
  6488F} ;
  6489F
  6490Funion SPISTS_REG
  6491F{
  6492F  Uint16 all ;
  6493F  struct SPISTS_BITS bit ;
  6494F} ;
  6495F//------------------------------------------------
  6496F// SPI priority control register bit definitions:
  6497F//
  6498F//
  6499F
  6500Fstruct SPIPRI_BITS
  6501F{                    // bits description
  6502F  Uint16 rsvd1 : 4 ;
  6503F                   // 3:0 reserved
  6504F  Uint16 FREE : 1 ;
  6505F                  // 4 Free emulation mode control
  6506F  Uint16 SOFT : 1 ;
  6507F                  // 5 Soft emulation mode control
  6508F  Uint16 rsvd2 : 1 ;
  6509F                   // 6 reserved
  6510F  Uint16 rsvd3 : 9 ;
  6511F                   // 15:7 reserved
  6512F} ;
  6513F
  6514Funion SPIPRI_REG
  6515F{
  6516F  Uint16 all ;
  6517F  struct SPIPRI_BITS bit ;
  6518F} ;
  6519F//---------------------------------------------------------------------------
  6520F// SPI Register File:
  6521F//
  6522F
  6523Fstruct SPI_REGS
  6524F{
  6525F  union SPICCR_REG SPICCR ; // Configuration register
  6526F  union SPICTL_REG SPICTL ; // Operation control register
  6527F  union SPISTS_REG SPISTS ; // Status register
  6528F  Uint16 rsvd1 ; // reserved
  6529F  Uint16 SPIBRR ; // Baud Rate
  6530F  Uint16 rsvd2 ; // reserved
  6531F  Uint16 SPIRXEMU ; // Emulation buffer
  6532F  Uint16 SPIRXBUF ; // Serial input buffer
  6533F  Uint16 SPITXBUF ; // Serial output buffer
  6534F  Uint16 SPIDAT ; // Serial data
  6535F  union SPIFFTX_REG SPIFFTX ; // FIFO transmit register
  6536F  union SPIFFRX_REG SPIFFRX ; // FIFO recieve register
  6537F  union SPIFFCT_REG SPIFFCT ; // FIFO control register
  6538F  Uint16 rsvd3 [ 2 ] ;
  6539F                    // reserved
  6540F  union SPIPRI_REG SPIPRI ; // FIFO Priority control
  6541F} ;
  6542F//---------------------------------------------------------------------------
  6543F// SPI External References & Function Declarations:
  6544F//
  6545F
  6546Fextern volatile struct SPI_REGS
  6547F  SpiaRegs ;
  6548F       /* extern "C" */
  6549F       // end of DSP2833x_SPI_H definition
  6550F//===========================================================================
  6551F// End of file.
  6552F//===========================================================================
  6553F 
  6554F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Spi.h*/
  6555F/*   CLOSE_FILE Include File */
  6556F 
  6557F                // SPI Registers
  6558F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Sci.h */
  6559F// TI File $Revision: /main/2 $
  6560F// Checkin $Date: March 1, 2007 15:57:02 $
  6561F//###########################################################################
  6562F//
  6563F// FILE:        DSP2833x_Sci.h
  6564F//
  6565F// TITLE:       DSP2833x Device SCI Register Definitions.
  6566F//
  6567F//###########################################################################
  6568F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6569F// $Release Date: August 4, 2009 $
  6570F//###########################################################################
  6571F#ifndef DSP2833x_SCI_H
  6572F#define DSP2833x_SCI_H
  6573F//---------------------------------------------------------------------------
  6574F// SCI Individual Register Bit Definitions
  6575F//----------------------------------------------------------
  6576F// SCICCR communication control register bit definitions:
  6577F//
  6578F
  6579Fstruct SCICCR_BITS
  6580F{                    // bit description
  6581F  Uint16 SCICHAR : 3 ;
  6582F                     // 2:0 Character length control
  6583F  Uint16 ADDRIDLE_MODE : 1 ;
  6584F                           // 3 ADDR/IDLE Mode control
  6585F  Uint16 LOOPBKENA : 1 ;
  6586F                       // 4 Loop Back enable
  6587F  Uint16 PARITYENA : 1 ;
  6588F                       // 5 Parity enable
  6589F  Uint16 PARITY : 1 ;
  6590F                    // 6 Even or Odd Parity
  6591F  Uint16 STOPBITS : 1 ;
  6592F                      // 7 Number of Stop Bits
  6593F  Uint16 rsvd1 : 8 ;
  6594F                   // 15:8 reserved
  6595F} ;
  6596F
  6597Funion SCICCR_REG
  6598F{
  6599F  Uint16 all ;
  6600F  struct SCICCR_BITS bit ;
  6601F} ;
  6602F//-------------------------------------------
  6603F// SCICTL1 control register 1 bit definitions:
  6604F//
  6605F
  6606Fstruct SCICTL1_BITS
  6607F{                     // bit description
  6608F  Uint16 RXENA : 1 ;
  6609F                   // 0 SCI receiver enable
  6610F  Uint16 TXENA : 1 ;
  6611F                   // 1 SCI transmitter enable
  6612F  Uint16 SLEEP : 1 ;
  6613F                   // 2 SCI sleep
  6614F  Uint16 TXWAKE : 1 ;
  6615F                    // 3 Transmitter wakeup method
  6616F  Uint16 rsvd : 1 ;
  6617F                  // 4 reserved
  6618F  Uint16 SWRESET : 1 ;
  6619F                     // 5 Software reset
  6620F  Uint16 RXERRINTENA : 1 ;
  6621F                         // 6 Recieve interrupt enable
  6622F  Uint16 rsvd1 : 9 ;
  6623F                   // 15:7 reserved
  6624F} ;
  6625F
  6626Funion SCICTL1_REG
  6627F{
  6628F  Uint16 all ;
  6629F  struct SCICTL1_BITS bit ;
  6630F} ;
  6631F//---------------------------------------------
  6632F// SCICTL2 control register 2 bit definitions:
  6633F//
  6634F
  6635Fstruct SCICTL2_BITS
  6636F{                     // bit description
  6637F  Uint16 TXINTENA : 1 ;
  6638F                      // 0 Transmit interrupt enable
  6639F  Uint16 RXBKINTENA : 1 ;
  6640F                        // 1 Receiver-buffer break enable
  6641F  Uint16 rsvd : 4 ;
  6642F                  // 5:2 reserved
  6643F  Uint16 TXEMPTY : 1 ;
  6644F                     // 6 Transmitter empty flag
  6645F  Uint16 TXRDY : 1 ;
  6646F                   // 7 Transmitter ready flag
  6647F  Uint16 rsvd1 : 8 ;
  6648F                   // 15:8 reserved
  6649F} ;
  6650F
  6651Funion SCICTL2_REG
  6652F{
  6653F  Uint16 all ;
  6654F  struct SCICTL2_BITS bit ;
  6655F} ;
  6656F//---------------------------------------------------
  6657F// SCIRXST Receiver status register bit definitions:
  6658F//
  6659F
  6660Fstruct SCIRXST_BITS
  6661F{                     // bit description
  6662F  Uint16 rsvd : 1 ;
  6663F                  // 0 reserved
  6664F  Uint16 RXWAKE : 1 ;
  6665F                    // 1 Receiver wakeup detect flag
  6666F  Uint16 PE : 1 ;
  6667F                // 2 Parity error flag
  6668F  Uint16 OE : 1 ;
  6669F                // 3 Overrun error flag
  6670F  Uint16 FE : 1 ;
  6671F                // 4 Framing error flag
  6672F  Uint16 BRKDT : 1 ;
  6673F                   // 5 Break-detect flag
  6674F  Uint16 RXRDY : 1 ;
  6675F                   // 6 Receiver ready flag
  6676F  Uint16 RXERROR : 1 ;
  6677F                     // 7 Receiver error flag
  6678F} ;
  6679F
  6680Funion SCIRXST_REG
  6681F{
  6682F  Uint16 all ;
  6683F  struct SCIRXST_BITS bit ;
  6684F} ;
  6685F//----------------------------------------------------
  6686F// SCIRXBUF Receiver Data Buffer with FIFO bit definitions:
  6687F//
  6688F
  6689Fstruct SCIRXBUF_BITS
  6690F{                      // bits description
  6691F  Uint16 RXDT : 8 ;
  6692F                  // 7:0 Receive word
  6693F  Uint16 rsvd : 6 ;
  6694F                  // 13:8 reserved
  6695F  Uint16 SCIFFPE : 1 ;
  6696F                     // 14 SCI PE error in FIFO mode
  6697F  Uint16 SCIFFFE : 1 ;
  6698F                     // 15 SCI FE error in FIFO mode
  6699F} ;
  6700F
  6701Funion SCIRXBUF_REG
  6702F{
  6703F  Uint16 all ;
  6704F  struct SCIRXBUF_BITS bit ;
  6705F} ;
  6706F//--------------------------------------------------
  6707F// SCIPRI Priority control register bit definitions:
  6708F//
  6709F//
  6710F
  6711Fstruct SCIPRI_BITS
  6712F{                    // bit description
  6713F  Uint16 rsvd : 3 ;
  6714F                  // 2:0 reserved
  6715F  Uint16 FREE : 1 ;
  6716F                  // 3 Free emulation suspend mode
  6717F  Uint16 SOFT : 1 ;
  6718F                  // 4 Soft emulation suspend mode
  6719F  Uint16 rsvd1 : 3 ;
  6720F                   // 7:5 reserved
  6721F} ;
  6722F
  6723Funion SCIPRI_REG
  6724F{
  6725F  Uint16 all ;
  6726F  struct SCIPRI_BITS bit ;
  6727F} ;
  6728F//-------------------------------------------------
  6729F// SCI FIFO Transmit register bit definitions:
  6730F//
  6731F//
  6732F
  6733Fstruct SCIFFTX_BITS
  6734F{                     // bit description
  6735F  Uint16 TXFFIL : 5 ;
  6736F                    // 4:0 Interrupt level
  6737F  Uint16 TXFFIENA : 1 ;
  6738F                      // 5 Interrupt enable
  6739F  Uint16 TXFFINTCLR : 1 ;
  6740F                        // 6 Clear INT flag
  6741F  Uint16 TXFFINT : 1 ;
  6742F                     // 7 INT flag
  6743F  Uint16 TXFFST : 5 ;
  6744F                    // 12:8 FIFO status
  6745F  Uint16 TXFIFOXRESET : 1 ;
  6746F                          // 13 FIFO reset
  6747F  Uint16 SCIFFENA : 1 ;
  6748F                      // 14 Enhancement enable
  6749F  Uint16 SCIRST : 1 ;
  6750F                    // 15 SCI reset rx/tx channels
  6751F} ;
  6752F
  6753Funion SCIFFTX_REG
  6754F{
  6755F  Uint16 all ;
  6756F  struct SCIFFTX_BITS bit ;
  6757F} ;
  6758F//------------------------------------------------
  6759F// SCI FIFO recieve register bit definitions:
  6760F//
  6761F//
  6762F
  6763Fstruct SCIFFRX_BITS
  6764F{                     // bits description
  6765F  Uint16 RXFFIL : 5 ;
  6766F                    // 4:0 Interrupt level
  6767F  Uint16 RXFFIENA : 1 ;
  6768F                      // 5 Interrupt enable
  6769F  Uint16 RXFFINTCLR : 1 ;
  6770F                        // 6 Clear INT flag
  6771F  Uint16 RXFFINT : 1 ;
  6772F                     // 7 INT flag
  6773F  Uint16 RXFFST : 5 ;
  6774F                    // 12:8 FIFO status
  6775F  Uint16 RXFIFORESET : 1 ;
  6776F                         // 13 FIFO reset
  6777F  Uint16 RXFFOVRCLR : 1 ;
  6778F                        // 14 Clear overflow
  6779F  Uint16 RXFFOVF : 1 ;
  6780F                     // 15 FIFO overflow
  6781F} ;
  6782F
  6783Funion SCIFFRX_REG
  6784F{
  6785F  Uint16 all ;
  6786F  struct SCIFFRX_BITS bit ;
  6787F} ;
  6788F// SCI FIFO control register bit definitions:
  6789F
  6790Fstruct SCIFFCT_BITS
  6791F{                     // bits description
  6792F  Uint16 FFTXDLY : 8 ;
  6793F                     // 7:0 FIFO transmit delay
  6794F  Uint16 rsvd : 5 ;
  6795F                  // 12:8 reserved
  6796F  Uint16 CDC : 1 ;
  6797F                 // 13 Auto baud mode enable
  6798F  Uint16 ABDCLR : 1 ;
  6799F                    // 14 Auto baud clear
  6800F  Uint16 ABD : 1 ;
  6801F                 // 15 Auto baud detect
  6802F} ;
  6803F
  6804Funion SCIFFCT_REG
  6805F{
  6806F  Uint16 all ;
  6807F  struct SCIFFCT_BITS bit ;
  6808F} ;
  6809F//---------------------------------------------------------------------------
  6810F// SCI Register File:
  6811F//
  6812F
  6813Fstruct SCI_REGS
  6814F{
  6815F  union SCICCR_REG SCICCR ; // Communications control register
  6816F  union SCICTL1_REG SCICTL1 ; // Control register 1
  6817F  Uint16 SCIHBAUD ; // Baud rate (high) register
  6818F  Uint16 SCILBAUD ; // Baud rate (low) register
  6819F  union SCICTL2_REG SCICTL2 ; // Control register 2
  6820F  union SCIRXST_REG SCIRXST ; // Recieve status register
  6821F  Uint16 SCIRXEMU ; // Recieve emulation buffer register
  6822F  union SCIRXBUF_REG SCIRXBUF ; // Recieve data buffer
  6823F  Uint16 rsvd1 ; // reserved
  6824F  Uint16 SCITXBUF ; // Transmit data buffer
  6825F  union SCIFFTX_REG SCIFFTX ; // FIFO transmit register
  6826F  union SCIFFRX_REG SCIFFRX ; // FIFO recieve register
  6827F  union SCIFFCT_REG SCIFFCT ; // FIFO control register
  6828F  Uint16 rsvd2 ; // reserved
  6829F  Uint16 rsvd3 ; // reserved
  6830F  union SCIPRI_REG SCIPRI ; // FIFO Priority control
  6831F} ;
  6832F//---------------------------------------------------------------------------
  6833F// SCI External References & Function Declarations:
  6834F//
  6835F
  6836Fextern volatile struct SCI_REGS
  6837F  SciaRegs ;
  6838F
  6839Fextern volatile struct SCI_REGS
  6840F  ScibRegs ;
  6841F
  6842Fextern volatile struct SCI_REGS
  6843F  ScicRegs ;
  6844F       /* extern "C" */
  6845F       // end of DSP2833x_SCI_H definition
  6846F//===========================================================================
  6847F// End of file.
  6848F//===========================================================================
  6849F 
  6850F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Sci.h*/
  6851F/*   CLOSE_FILE Include File */
  6852F 
  6853F                // SCI Registers
  6854F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_SysCtrl.h */
  6855F// TI File $Revision: /main/5 $
  6856F// Checkin $Date: May 12, 2008 09:34:58 $
  6857F//###########################################################################
  6858F//
  6859F// FILE: DSP2833x_SysCtrl.h
  6860F//
  6861F// TITLE: DSP2833x Device System Control Register Definitions.
  6862F//
  6863F//###########################################################################
  6864F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6865F// $Release Date: August 4, 2009 $
  6866F//###########################################################################
  6867F#ifndef DSP2833x_SYS_CTRL_H
  6868F#define DSP2833x_SYS_CTRL_H
  6869F//---------------------------------------------------------------------------
  6870F// System Control Individual Register Bit Definitions:
  6871F//
  6872F// PLL Status Register
  6873F
  6874Ftypedef
  6875Fstruct PLLSTS_BITS
  6876F{                            // bits description
  6877F  Uint16 PLLLOCKS : 1 ;
  6878F                      // 0 PLL lock status
  6879F  Uint16 rsvd1 : 1 ;
  6880F                   // 1 reserved
  6881F  Uint16 PLLOFF : 1 ;
  6882F                    // 2 PLL off bit
  6883F  Uint16 MCLKSTS : 1 ;
  6884F                     // 3 Missing clock status bit
  6885F  Uint16 MCLKCLR : 1 ;
  6886F                     // 4 Missing clock clear bit
  6887F  Uint16 OSCOFF : 1 ;
  6888F                    // 5 Oscillator clock off
  6889F  Uint16 MCLKOFF : 1 ;
  6890F                     // 6 Missing clock detect
  6891F  Uint16 DIVSEL : 2 ;
  6892F                    // 7 Divide Select
  6893F  Uint16 rsvd2 : 7 ;
  6894F                   // 15:7 reserved
  6895F} PLLSTS_BITS ;
  6896F
  6897Ftypedef
  6898Funion PLLSTS_REG
  6899F{
  6900F  Uint16 all ;
  6901F  struct PLLSTS_BITS bit ;
  6902F} PLLSTS_REG ;
  6903F// High speed peripheral clock register bit definitions:
  6904F
  6905Ftypedef
  6906Fstruct HISPCP_BITS
  6907F{                            // bits description
  6908F  Uint16 HSPCLK : 3 ;
  6909F                    // 2:0 Rate relative to SYSCLKOUT
  6910F  Uint16 rsvd1 : 13 ;
  6911F                    // 15:3 reserved
  6912F} HISPCP_BITS ;
  6913F
  6914Ftypedef
  6915Funion HISPCP_REG
  6916F{
  6917F  Uint16 all ;
  6918F  struct HISPCP_BITS bit ;
  6919F} HISPCP_REG ;
  6920F// Low speed peripheral clock register bit definitions:
  6921F
  6922Ftypedef
  6923Fstruct LOSPCP_BITS
  6924F{                            // bits description
  6925F  Uint16 LSPCLK : 3 ;
  6926F                    // 2:0 Rate relative to SYSCLKOUT
  6927F  Uint16 rsvd1 : 13 ;
  6928F                    // 15:3 reserved
  6929F} LOSPCP_BITS ;
  6930F
  6931Ftypedef
  6932Funion LOSPCP_REG
  6933F{
  6934F  Uint16 all ;
  6935F  struct LOSPCP_BITS bit ;
  6936F} LOSPCP_REG ;
  6937F// Peripheral clock control register 0 bit definitions:
  6938F
  6939Ftypedef
  6940Fstruct PCLKCR0_BITS
  6941F{                             // bits description
  6942F  Uint16 rsvd1 : 2 ;
  6943F                   // 1:0 reserved
  6944F  Uint16 TBCLKSYNC : 1 ;
  6945F                       // 2 EWPM Module TBCLK enable/sync
  6946F  Uint16 ADCENCLK : 1 ;
  6947F                      // 3 Enable high speed clk to ADC
  6948F  Uint16 I2CAENCLK : 1 ;
  6949F                       // 4 Enable SYSCLKOUT to I2C-A
  6950F  Uint16 SCICENCLK : 1 ;
  6951F                       // 5 Enalbe low speed clk to SCI-C
  6952F  Uint16 rsvd2 : 2 ;
  6953F                   // 7:6 reserved
  6954F  Uint16 SPIAENCLK : 1 ;
  6955F                       // 8 Enable low speed clk to SPI-A
  6956F  Uint16 rsvd3 : 1 ;
  6957F                   // 9 reserved
  6958F  Uint16 SCIAENCLK : 1 ;
  6959F                       // 10 Enable low speed clk to SCI-A
  6960F  Uint16 SCIBENCLK : 1 ;
  6961F                       // 11 Enable low speed clk to SCI-B
  6962F  Uint16 MCBSPAENCLK : 1 ;
  6963F                         // 12 Enable low speed clk to McBSP-A
  6964F  Uint16 MCBSPBENCLK : 1 ;
  6965F                         // 13 Enable low speed clk to McBSP-B
  6966F  Uint16 ECANAENCLK : 1 ;
  6967F                        // 14 Enable system clk to eCAN-A
  6968F  Uint16 ECANBENCLK : 1 ;
  6969F                        // 15 Enable system clk to eCAN-B
  6970F} PCLKCR0_BITS ;
  6971F
  6972Ftypedef
  6973Funion PCLKCR0_REG
  6974F{
  6975F  Uint16 all ;
  6976F  struct PCLKCR0_BITS bit ;
  6977F} PCLKCR0_REG ;
  6978F// Peripheral clock control register 1 bit definitions:
  6979F
  6980Ftypedef
  6981Fstruct PCLKCR1_BITS
  6982F{                             // bits description
  6983F  Uint16 EPWM1ENCLK : 1 ;
  6984F                        // 0 Enable SYSCLKOUT to EPWM1
  6985F  Uint16 EPWM2ENCLK : 1 ;
  6986F                        // 1 Enable SYSCLKOUT to EPWM2
  6987F  Uint16 EPWM3ENCLK : 1 ;
  6988F                        // 2 Enable SYSCLKOUT to EPWM3
  6989F  Uint16 EPWM4ENCLK : 1 ;
  6990F                        // 3 Enable SYSCLKOUT to EPWM4
  6991F  Uint16 EPWM5ENCLK : 1 ;
  6992F                        // 4 Enable SYSCLKOUT to EPWM5
  6993F  Uint16 EPWM6ENCLK : 1 ;
  6994F                        // 5 Enable SYSCLKOUT to EPWM6
  6995F  Uint16 rsvd1 : 2 ;
  6996F                   // 7:6 reserved
  6997F  Uint16 ECAP1ENCLK : 1 ;
  6998F                        // 8 Enable SYSCLKOUT to ECAP1
  6999F  Uint16 ECAP2ENCLK : 1 ;
  7000F                        // 9 Enable SYSCLKOUT to ECAP2
  7001F  Uint16 ECAP3ENCLK : 1 ;
  7002F                        // 10 Enable SYSCLKOUT to ECAP3
  7003F  Uint16 ECAP4ENCLK : 1 ;
  7004F                        // 11 Enable SYSCLKOUT to ECAP4
  7005F  Uint16 ECAP5ENCLK : 1 ;
  7006F                        // 12 Enable SYSCLKOUT to ECAP5
  7007F  Uint16 ECAP6ENCLK : 1 ;
  7008F                        // 13 Enable SYSCLKOUT to ECAP6
  7009F  Uint16 EQEP1ENCLK : 1 ;
  7010F                        // 14 Enable SYSCLKOUT to EQEP1
  7011F  Uint16 EQEP2ENCLK : 1 ;
  7012F                        // 15 Enable SYSCLKOUT to EQEP2
  7013F} PCLKCR1_BITS ;
  7014F
  7015Ftypedef
  7016Funion PCLKCR1_REG
  7017F{
  7018F  Uint16 all ;
  7019F  struct PCLKCR1_BITS bit ;
  7020F} PCLKCR1_REG ;
  7021F// Peripheral clock control register 2 bit definitions:
  7022F
  7023Ftypedef
  7024Fstruct PCLKCR3_BITS
  7025F{                             // bits description
  7026F  Uint16 rsvd1 : 8 ;
  7027F                   // 7:0 reserved
  7028F  Uint16 CPUTIMER0ENCLK : 1 ;
  7029F                            // 8 Enable SYSCLKOUT to CPU-Timer 0
  7030F  Uint16 CPUTIMER1ENCLK : 1 ;
  7031F                            // 9 Enable SYSCLKOUT to CPU-Timer 1
  7032F  Uint16 CPUTIMER2ENCLK : 1 ;
  7033F                            // 10 Enable SYSCLKOUT to CPU-Timer 2
  7034F  Uint16 DMAENCLK : 1 ;
  7035F                      // 11 Enable the DMA clock
  7036F  Uint16 XINTFENCLK : 1 ;
  7037F                        // 12 Enable SYSCLKOUT to XINTF
  7038F  Uint16 GPIOINENCLK : 1 ;
  7039F                         // Enable GPIO input clock
  7040F  Uint16 rsvd2 : 2 ;
  7041F                   // 15:14 reserved
  7042F} PCLKCR3_BITS ;
  7043F
  7044Ftypedef
  7045Funion PCLKCR3_REG
  7046F{
  7047F  Uint16 all ;
  7048F  struct PCLKCR3_BITS bit ;
  7049F} PCLKCR3_REG ;
  7050F// PLL control register bit definitions:
  7051F
  7052Ftypedef
  7053Fstruct PLLCR_BITS
  7054F{                           // bits description
  7055F  Uint16 DIV : 4 ;
  7056F                 // 3:0 Set clock ratio for the PLL
  7057F  Uint16 rsvd1 : 12 ;
  7058F                    // 15:4 reserved
  7059F} PLLCR_BITS ;
  7060F
  7061Ftypedef
  7062Funion PLLCR_REG
  7063F{
  7064F  Uint16 all ;
  7065F  struct PLLCR_BITS bit ;
  7066F} PLLCR_REG ;
  7067F// Low Power Mode 0 control register bit definitions:
  7068F
  7069Ftypedef
  7070Fstruct LPMCR0_BITS
  7071F{                            // bits description
  7072F  Uint16 LPM : 2 ;
  7073F                 // 1:0 Set the low power mode
  7074F  Uint16 QUALSTDBY : 6 ;
  7075F                       // 7:2 Qualification
  7076F  Uint16 rsvd1 : 7 ;
  7077F                   // 14:8 reserved
  7078F  Uint16 WDINTE : 1 ;
  7079F                    // 15 Enables WD to wake the device from STANDBY
  7080F} LPMCR0_BITS ;
  7081F
  7082Ftypedef
  7083Funion LPMCR0_REG
  7084F{
  7085F  Uint16 all ;
  7086F  struct LPMCR0_BITS bit ;
  7087F} LPMCR0_REG ;
  7088F// Dual-mapping configuration register bit definitions:
  7089F
  7090Ftypedef
  7091Fstruct MAPCNF_BITS
  7092F{                            // bits description
  7093F  Uint16 MAPEPWM : 1 ;// 0 EPWM dual-map enable
  7094F  Uint16 rsvd1 : 15 ;// 15:1 reserved
  7095F} MAPCNF_BITS ;
  7096F
  7097Ftypedef
  7098Funion MAPCNF_REG
  7099F{
  7100F  Uint16 all ;
  7101F  struct MAPCNF_BITS bit ;
  7102F} MAPCNF_REG ;
  7103F//---------------------------------------------------------------------------
  7104F// System Control Register File:
  7105F//
  7106F
  7107Ftypedef
  7108Fstruct SYS_CTRL_REGS
  7109F{
  7110F  Uint16 rsvd1 ; // 0
  7111F  union PLLSTS_REG PLLSTS ; // 1
  7112F  Uint16 rsvd2 [ 8 ] ;
  7113F                    // 2-9
  7114F  union HISPCP_REG HISPCP ; // 10: High-speed peripheral clock pre-scaler
  7115F  union LOSPCP_REG LOSPCP ; // 11: Low-speed peripheral clock pre-scaler
  7116F  union PCLKCR0_REG PCLKCR0 ; // 12: Peripheral clock control register
  7117F  union PCLKCR1_REG PCLKCR1 ; // 13: Peripheral clock control register
  7118F  union LPMCR0_REG LPMCR0 ; // 14: Low-power mode control register 0
  7119F  Uint16 rsvd3 ; // 15: reserved
  7120F  union PCLKCR3_REG PCLKCR3 ; // 16: Peripheral clock control register
  7121F  union PLLCR_REG PLLCR ;
  7122F                          // 17: PLL control register
  7123F   // No bit definitions are defined for SCSR because
  7124F   // a read-modify-write instruction can clear the WDOVERRIDE bit
  7125F  Uint16 SCSR ; // 18: System control and status register
  7126F  Uint16 WDCNTR ; // 19: WD counter register
  7127F  Uint16 rsvd4 ; // 20
  7128F  Uint16 WDKEY ; // 21: WD reset key register
  7129F  Uint16 rsvd5 [ 3 ] ;
  7130F                    // 22-24
  7131F   // No bit definitions are defined for WDCR because
  7132F   // the proper value must be written to the WDCHK field
  7133F   // whenever writing to this register.
  7134F  Uint16 WDCR ; // 25: WD timer control register
  7135F  Uint16 rsvd6 [ 4 ] ;
  7136F                    // 26-29
  7137F  union MAPCNF_REG MAPCNF ; // 30: Dual-mapping configuration register
  7138F  Uint16 rsvd7 [ 1 ] ;
  7139F                    // 31
  7140F} SYS_CTRL_REGS ;
  7141F/* --------------------------------------------------- */
  7142F/* CSM Registers */
  7143F/* */
  7144F/* ----------------------------------------------------*/
  7145F/* CSM Status & Control register bit definitions */
  7146F
  7147Ftypedef
  7148Fstruct CSMSCR_BITS
  7149F{                            // bit description
  7150F  Uint16 SECURE : 1 ;
  7151F                    // 0 Secure flag
  7152F  Uint16 rsvd1 : 14 ;
  7153F                    // 14-1 reserved
  7154F  Uint16 FORCESEC : 1 ;
  7155F                      // 15 Force Secure control bit
  7156F} CSMSCR_BITS ;
  7157F/* Allow access to the bit fields or entire register */
  7158F
  7159Ftypedef
  7160Funion CSMSCR_REG
  7161F{
  7162F  Uint16 all ;
  7163F  struct CSMSCR_BITS bit ;
  7164F} CSMSCR_REG ;
  7165F/* CSM Register File */
  7166F
  7167Ftypedef
  7168Fstruct CSM_REGS
  7169F{
  7170F  Uint16 KEY0 ; // KEY reg bits 15-0
  7171F  Uint16 KEY1 ; // KEY reg bits 31-16
  7172F  Uint16 KEY2 ; // KEY reg bits 47-32
  7173F  Uint16 KEY3 ; // KEY reg bits 63-48
  7174F  Uint16 KEY4 ; // KEY reg bits 79-64
  7175F  Uint16 KEY5 ; // KEY reg bits 95-80
  7176F  Uint16 KEY6 ; // KEY reg bits 111-96
  7177F  Uint16 KEY7 ; // KEY reg bits 127-112
  7178F  Uint16 rsvd1 ; // reserved
  7179F  Uint16 rsvd2 ; // reserved
  7180F  Uint16 rsvd3 ; // reserved
  7181F  Uint16 rsvd4 ; // reserved
  7182F  Uint16 rsvd5 ; // reserved
  7183F  Uint16 rsvd6 ; // reserved
  7184F  Uint16 rsvd7 ; // reserved
  7185F  union CSMSCR_REG CSMSCR ; // CSM Status & Control register
  7186F} CSM_REGS ;
  7187F/* Password locations */
  7188F
  7189Ftypedef
  7190Fstruct CSM_PWL
  7191F{
  7192F  Uint16 PSWD0 ; // PSWD bits 15-0
  7193F  Uint16 PSWD1 ; // PSWD bits 31-16
  7194F  Uint16 PSWD2 ; // PSWD bits 47-32
  7195F  Uint16 PSWD3 ; // PSWD bits 63-48
  7196F  Uint16 PSWD4 ; // PSWD bits 79-64
  7197F  Uint16 PSWD5 ; // PSWD bits 95-80
  7198F  Uint16 PSWD6 ; // PSWD bits 111-96
  7199F  Uint16 PSWD7 ; // PSWD bits 127-112
  7200F} CSM_PWL ;
  7201F/* Flash Registers */
  7202F#define FLASH_SLEEP 0x0000 ;
  7203F#define FLASH_STANDBY 0x0001 ;
  7204F#define FLASH_ACTIVE 0x0003 ;
  7205F/* Flash Option Register bit definitions */
  7206F
  7207Ftypedef
  7208Fstruct FOPT_BITS
  7209F{                          // bit description
  7210F  Uint16 ENPIPE : 1 ;
  7211F                    // 0 Enable Pipeline Mode
  7212F  Uint16 rsvd : 15 ;
  7213F                   // 1-15 reserved
  7214F} FOPT_BITS ;
  7215F/* Allow access to the bit fields or entire register */
  7216F
  7217Ftypedef
  7218Funion FOPT_REG
  7219F{
  7220F  Uint16 all ;
  7221F  struct FOPT_BITS bit ;
  7222F} FOPT_REG ;
  7223F/* Flash Power Modes Register bit definitions */
  7224F
  7225Ftypedef
  7226Fstruct FPWR_BITS
  7227F{                          // bit description
  7228F  Uint16 PWR : 2 ;
  7229F                 // 0-1 Power Mode bits
  7230F  Uint16 rsvd : 14 ;
  7231F                   // 2-15 reserved
  7232F} FPWR_BITS ;
  7233F/* Allow access to the bit fields or entire register */
  7234F
  7235Ftypedef
  7236Funion FPWR_REG
  7237F{
  7238F  Uint16 all ;
  7239F  struct FPWR_BITS bit ;
  7240F} FPWR_REG ;
  7241F/* Flash Status Register bit definitions */
  7242F
  7243Ftypedef
  7244Fstruct FSTATUS_BITS
  7245F{                             // bit description
  7246F  Uint16 PWRS : 2 ;
  7247F                  // 0-1 Power Mode Status bits
  7248F  Uint16 STDBYWAITS : 1 ;
  7249F                        // 2 Bank/Pump Sleep to Standby Wait Counter Status bits
  7250F  Uint16 ACTIVEWAITS : 1 ;
  7251F                         // 3 Bank/Pump Standby to Active Wait Counter Status bits
  7252F  Uint16 rsvd1 : 4 ;
  7253F                   // 4-7 reserved
  7254F  Uint16 V3STAT : 1 ;
  7255F                    // 8 VDD3V Status Latch bit
  7256F  Uint16 rsvd2 : 7 ;
  7257F                   // 9-15 reserved
  7258F} FSTATUS_BITS ;
  7259F/* Allow access to the bit fields or entire register */
  7260F
  7261Ftypedef
  7262Funion FSTATUS_REG
  7263F{
  7264F  Uint16 all ;
  7265F  struct FSTATUS_BITS bit ;
  7266F} FSTATUS_REG ;
  7267F/* Flash Sleep to Standby Wait Counter Register bit definitions */
  7268F
  7269Ftypedef
  7270Fstruct FSTDBYWAIT_BITS
  7271F{                                // bit description
  7272F  Uint16 STDBYWAIT : 9 ;
  7273F                       // 0-8 Bank/Pump Sleep to Standby Wait Count bits
  7274F  Uint16 rsvd : 7 ;
  7275F                  // 9-15 reserved
  7276F} FSTDBYWAIT_BITS ;
  7277F/* Allow access to the bit fields or entire register */
  7278F
  7279Ftypedef
  7280Funion FSTDBYWAIT_REG
  7281F{
  7282F  Uint16 all ;
  7283F  struct FSTDBYWAIT_BITS bit ;
  7284F} FSTDBYWAIT_REG ;
  7285F/* Flash Standby to Active Wait Counter Register bit definitions */
  7286F
  7287Ftypedef
  7288Fstruct FACTIVEWAIT_BITS
  7289F{                                 // bit description
  7290F  Uint16 ACTIVEWAIT : 9 ;
  7291F                        // 0-8 Bank/Pump Standby to Active Wait Count bits
  7292F  Uint16 rsvd : 7 ;
  7293F                  // 9-15 reserved
  7294F} FACTIVEWAIT_BITS ;
  7295F/* Allow access to the bit fields or entire register */
  7296F
  7297Ftypedef
  7298Funion FACTIVEWAIT_REG
  7299F{
  7300F  Uint16 all ;
  7301F  struct FACTIVEWAIT_BITS bit ;
  7302F} FACTIVEWAIT_REG ;
  7303F/* Bank Read Access Wait State Register bit definitions */
  7304F
  7305Ftypedef
  7306Fstruct FBANKWAIT_BITS
  7307F{                               // bit description
  7308F  Uint16 RANDWAIT : 4 ;
  7309F                      // 0-3 Flash Random Read Wait State bits
  7310F  Uint16 rsvd1 : 4 ;
  7311F                   // 4-7 reserved
  7312F  Uint16 PAGEWAIT : 4 ;
  7313F                      // 8-11 Flash Paged Read Wait State bits
  7314F  Uint16 rsvd2 : 4 ;
  7315F                   // 12-15 reserved
  7316F} FBANKWAIT_BITS ;
  7317F/* Allow access to the bit fields or entire register */
  7318F
  7319Ftypedef
  7320Funion FBANKWAIT_REG
  7321F{
  7322F  Uint16 all ;
  7323F  struct FBANKWAIT_BITS bit ;
  7324F} FBANKWAIT_REG ;
  7325F/* OTP Read Access Wait State Register bit definitions */
  7326F
  7327Ftypedef
  7328Fstruct FOTPWAIT_BITS
  7329F{                              // bit description
  7330F  Uint16 OTPWAIT : 5 ;
  7331F                     // 0-4 OTP Read Wait State bits
  7332F  Uint16 rsvd : 11 ;
  7333F                   // 5-15 reserved
  7334F} FOTPWAIT_BITS ;
  7335F/* Allow access to the bit fields or entire register */
  7336F
  7337Ftypedef
  7338Funion FOTPWAIT_REG
  7339F{
  7340F  Uint16 all ;
  7341F  struct FOTPWAIT_BITS bit ;
  7342F} FOTPWAIT_REG ;
  7343F
  7344Ftypedef
  7345Fstruct FLASH_REGS
  7346F{
  7347F  union FOPT_REG FOPT ; // Option Register
  7348F  Uint16 rsvd1 ; // reserved
  7349F  union FPWR_REG FPWR ; // Power Modes Register
  7350F  union FSTATUS_REG FSTATUS ; // Status Register
  7351F  union FSTDBYWAIT_REG FSTDBYWAIT ; // Pump/Bank Sleep to Standby Wait State Register
  7352F  union FACTIVEWAIT_REG FACTIVEWAIT ; // Pump/Bank Standby to Active Wait State Register
  7353F  union FBANKWAIT_REG FBANKWAIT ; // Bank Read Access Wait State Register
  7354F  union FOTPWAIT_REG FOTPWAIT ; // OTP Read Access Wait State Register
  7355F} FLASH_REGS ;
  7356F//---------------------------------------------------------------------------
  7357F// System Control External References & Function Declarations:
  7358F//
  7359F
  7360Fextern volatile struct SYS_CTRL_REGS
  7361F  SysCtrlRegs ;
  7362F
  7363Fextern volatile struct CSM_REGS
  7364F  CsmRegs ;
  7365F
  7366Fextern volatile struct CSM_PWL
  7367F  CsmPwl ;
  7368F
  7369Fextern volatile struct FLASH_REGS
  7370F  FlashRegs ;
  7371F       // end of DSP2833x_SYS_CTRL_H definition
  7372F//===========================================================================
  7373F// End of file.
  7374F//===========================================================================
  7375F 
  7376F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_SysCtrl.h*/
  7377F/*   CLOSE_FILE Include File */
  7378F 
  7379F            // System Control/Power Modes
  7380F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_XIntrupt.h */
  7381F// TI File $Revision: /main/1 $
  7382F// Checkin $Date: August 18, 2006 13:52:39 $
  7383F//###########################################################################
  7384F//
  7385F// FILE: DSP2833x_XIntrupt.h
  7386F//
  7387F// TITLE: DSP2833x Device External Interrupt Register Definitions.
  7388F//
  7389F//###########################################################################
  7390F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  7391F// $Release Date: August 4, 2009 $
  7392F//###########################################################################
  7393F#ifndef DSP2833x_XINTRUPT_H
  7394F#define DSP2833x_XINTRUPT_H
  7395F//---------------------------------------------------------------------------
  7396F
  7397Fstruct XINTCR_BITS
  7398F{
  7399F  Uint16 ENABLE : 1 ;// 0 enable/disable
  7400F  Uint16 rsvd1 : 1 ;// 1 reserved
  7401F  Uint16 POLARITY : 2 ;// 3:2 pos/neg, both triggered
  7402F  Uint16 rsvd2 : 12 ;//15:4 reserved
  7403F} ;
  7404F
  7405Funion XINTCR_REG
  7406F{
  7407F  Uint16 all ;
  7408F  struct XINTCR_BITS bit ;
  7409F} ;
  7410F
  7411Fstruct XNMICR_BITS
  7412F{
  7413F  Uint16 ENABLE : 1 ;// 0 enable/disable
  7414F  Uint16 SELECT : 1 ;// 1 Timer 1 or XNMI connected to int13
  7415F  Uint16 POLARITY : 2 ;// 3:2 pos/neg, or both triggered
  7416F  Uint16 rsvd2 : 12 ;// 15:4 reserved
  7417F} ;
  7418F
  7419Funion XNMICR_REG
  7420F{
  7421F  Uint16 all ;
  7422F  struct XNMICR_BITS bit ;
  7423F} ;
  7424F//---------------------------------------------------------------------------
  7425F// External Interrupt Register File:
  7426F//
  7427F
  7428Fstruct XINTRUPT_REGS
  7429F{
  7430F  union XINTCR_REG XINT1CR ;
  7431F  union XINTCR_REG XINT2CR ;
  7432F  union XINTCR_REG XINT3CR ;
  7433F  union XINTCR_REG XINT4CR ;
  7434F  union XINTCR_REG XINT5CR ;
  7435F  union XINTCR_REG XINT6CR ;
  7436F  union XINTCR_REG XINT7CR ;
  7437F  union XNMICR_REG XNMICR ;
  7438F  Uint16 XINT1CTR ;
  7439F  Uint16 XINT2CTR ;
  7440F  Uint16 rsvd [ 5 ] ;
  7441F  Uint16 XNMICTR ;
  7442F} ;
  7443F//---------------------------------------------------------------------------
  7444F// External Interrupt References & Function Declarations:
  7445F//
  7446F
  7447Fextern volatile struct XINTRUPT_REGS
  7448F  XIntruptRegs ;
  7449F       /* extern "C" */
  7450F       // end of DSP2833x_XINTF_H definition
  7451F//===========================================================================
  7452F// End of file.
  7453F//===========================================================================
  7454F 
  7455F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_XIntrupt.h*/
  7456F/*   CLOSE_FILE Include File */
  7457F 
  7458F           // External Interrupts
  7459F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Xintf.h */
  7460F// TI File $Revision: /main/4 $
  7461F// Checkin $Date: July 27, 2009 13:57:25 $
  7462F//###########################################################################
  7463F//
  7464F// FILE: DSP2833x_Xintf.h
  7465F//
  7466F// TITLE: DSP2833x Device External Interface Register Definitions.
  7467F//
  7468F//###########################################################################
  7469F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  7470F// $Release Date: August 4, 2009 $
  7471F//###########################################################################
  7472F#ifndef DSP2833x_XINTF_H
  7473F#define DSP2833x_XINTF_H
  7474F// XINTF timing register bit definitions:
  7475F
  7476Fstruct XTIMING_BITS
  7477F{                     // bits description
  7478F  Uint16 XWRTRAIL : 2 ;
  7479F                      // 1:0 Write access trail timing
  7480F  Uint16 XWRACTIVE : 3 ;
  7481F                       // 4:2 Write access active timing
  7482F  Uint16 XWRLEAD : 2 ;
  7483F                     // 6:5 Write access lead timing
  7484F  Uint16 XRDTRAIL : 2 ;
  7485F                      // 8:7 Read access trail timing
  7486F  Uint16 XRDACTIVE : 3 ;
  7487F                       // 11:9 Read access active timing
  7488F  Uint16 XRDLEAD : 2 ;
  7489F                     // 13:12 Read access lead timing
  7490F  Uint16 USEREADY : 1 ;
  7491F                      // 14 Extend access using HW waitstates
  7492F  Uint16 READYMODE : 1 ;
  7493F                       // 15 Ready mode
  7494F  Uint16 XSIZE : 2 ;
  7495F                   // 17:16 XINTF bus width - must be written as 11b
  7496F  Uint16 rsvd1 : 4 ;
  7497F                   // 21:18 reserved
  7498F  Uint16 X2TIMING : 1 ;
  7499F                      // 22 Double lead/active/trail timing
  7500F  Uint16 rsvd3 : 9 ;
  7501F                   // 31:23 reserved
  7502F} ;
  7503F
  7504Funion XTIMING_REG
  7505F{
  7506F  Uint32 all ;
  7507F  struct XTIMING_BITS bit ;
  7508F} ;
  7509F// XINTF control register bit definitions:
  7510F
  7511Fstruct XINTCNF2_BITS
  7512F{                      // bits description
  7513F  Uint16 WRBUFF : 2 ;
  7514F                    // 1:0 Write buffer depth
  7515F  Uint16 CLKMODE : 1 ;
  7516F                     // 2 Ratio for XCLKOUT with respect to XTIMCLK
  7517F  Uint16 CLKOFF : 1 ;
  7518F                    // 3 Disable XCLKOUT
  7519F  Uint16 rsvd1 : 2 ;
  7520F                   // 5:4 reserved
  7521F  Uint16 WLEVEL : 2 ;
  7522F                    // 7:6 Current level of the write buffer
  7523F  Uint16 rsvd2 : 1 ;
  7524F                   // 8 reserved
  7525F  Uint16 HOLD : 1 ;
  7526F                  // 9 Hold enable/disable
  7527F  Uint16 HOLDS : 1 ;
  7528F                   // 10 Current state of HOLDn input
  7529F  Uint16 HOLDAS : 1 ;
  7530F                    // 11 Current state of HOLDAn output
  7531F  Uint16 rsvd3 : 4 ;
  7532F                   // 15:12 reserved
  7533F  Uint16 XTIMCLK : 3 ;
  7534F                     // 18:16 Ratio for XTIMCLK
  7535F  Uint16 rsvd4 : 13 ;
  7536F                    // 31:19 reserved
  7537F} ;
  7538F
  7539Funion XINTCNF2_REG
  7540F{
  7541F  Uint32 all ;
  7542F  struct XINTCNF2_BITS bit ;
  7543F} ;
  7544F// XINTF bank switching register bit definitions:
  7545F
  7546Fstruct XBANK_BITS
  7547F{                   // bits description
  7548F  Uint16 BANK : 3 ;
  7549F                  // 2:0 Zone for which banking is enabled
  7550F  Uint16 BCYC : 3 ;
  7551F                  // 5:3 XTIMCLK cycles to add
  7552F  Uint16 rsvd : 10 ;
  7553F                   // 15:6 reserved
  7554F} ;
  7555F
  7556Funion XBANK_REG
  7557F{
  7558F  Uint16 all ;
  7559F  struct XBANK_BITS bit ;
  7560F} ;
  7561F
  7562Fstruct XRESET_BITS
  7563F{
  7564F  Uint16 XHARDRESET : 1 ;
  7565F  Uint16 rsvd1 : 15 ;
  7566F} ;
  7567F
  7568Funion XRESET_REG
  7569F{
  7570F  Uint16 all ;
  7571F  struct XRESET_BITS bit ;
  7572F} ;
  7573F//---------------------------------------------------------------------------
  7574F// XINTF Register File:
  7575F//
  7576F
  7577Fstruct XINTF_REGS
  7578F{
  7579F  union XTIMING_REG XTIMING0 ;
  7580F  Uint32 rsvd1 [ 5 ] ;
  7581F  union XTIMING_REG XTIMING6 ;
  7582F  union XTIMING_REG XTIMING7 ;
  7583F  Uint32 rsvd2 [ 2 ] ;
  7584F  union XINTCNF2_REG XINTCNF2 ;
  7585F  Uint32 rsvd3 ;
  7586F  union XBANK_REG XBANK ;
  7587F  Uint16 rsvd4 ;
  7588F  Uint16 XREVISION ;
  7589F  Uint16 rsvd5 [ 2 ] ;
  7590F  union XRESET_REG XRESET ;
  7591F} ;
  7592F//---------------------------------------------------------------------------
  7593F// XINTF External References & Function Declarations:
  7594F//
  7595F
  7596Fextern volatile struct XINTF_REGS
  7597F  XintfRegs ;
  7598F       /* extern "C" */
  7599F       // end of DSP2833x_XINTF_H definition
  7600F//===========================================================================
  7601F// No more.
  7602F//===========================================================================
  7603F 
  7604F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Xintf.h*/
  7605F/*   CLOSE_FILE Include File */
  7606F 
  7607F              // XINTF External Interface
  7608F#define DSP28_EPWM1 1
  7609F#define DSP28_EPWM2 1
  7610F#define DSP28_EPWM3 1
  7611F#define DSP28_EPWM4 1
  7612F#define DSP28_EPWM5 1
  7613F#define DSP28_EPWM6 1
  7614F#define DSP28_ECAP1 1
  7615F#define DSP28_ECAP2 1
  7616F#define DSP28_ECAP3 1
  7617F#define DSP28_ECAP4 1
  7618F#define DSP28_ECAP5 1
  7619F#define DSP28_ECAP6 1
  7620F#define DSP28_EQEP1 1
  7621F#define DSP28_EQEP2 1
  7622F#define DSP28_ECANA 1
  7623F#define DSP28_ECANB 1
  7624F#define DSP28_MCBSPA 1
  7625F#define DSP28_MCBSPB 1
  7626F#define DSP28_SPIA 1
  7627F#define DSP28_SCIA 1
  7628F#define DSP28_SCIB 1
  7629F#define DSP28_SCIC 1
  7630F#define DSP28_I2CA 1
  7631F       // end DSP28_28335
  7632F       // end DSP28_28334
  7633F       // end DSP28_28332
  7634F       /* extern "C" */
  7635F       // end of DSP2833x_DEVICE_H definition
  7636F//===========================================================================
  7637F// End of file.
  7638F//===========================================================================
  7639F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Device.h*/
  7640F/*   CLOSE_FILE Include File */
  7641F 
  7642F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Examples.h */
  7643F// TI File $Revision: /main/9 $
  7644F// Checkin $Date: July 2, 2008 14:31:12 $
  7645F//###########################################################################
  7646F//
  7647F// FILE: DSP2833x_Examples.h
  7648F//
  7649F// TITLE: DSP2833x Device Definitions.
  7650F//
  7651F//###########################################################################
  7652F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  7653F// $Release Date: August 4, 2009 $
  7654F//###########################################################################
  7655F#ifndef DSP2833x_EXAMPLES_H
  7656F#define DSP2833x_EXAMPLES_H
  7657F/*-----------------------------------------------------------------------------
  7658F      Specify the PLL control register (PLLCR) and divide select (DIVSEL) value.
  7659F-----------------------------------------------------------------------------*/
  7660F//#define DSP28_DIVSEL 0 // Enable /4 for SYSCLKOUT
  7661F//#define DSP28_DIVSEL 1 // Enable /4 for SYSCKOUT
  7662F#define DSP28_DIVSEL 2
  7663F//#define DSP28_DIVSEL 3 // Enable /1 for SYSCLKOUT
  7664F#define DSP28_PLLCR 10
  7665F//#define DSP28_PLLCR 9
  7666F//#define DSP28_PLLCR 8
  7667F//#define DSP28_PLLCR 7
  7668F//#define DSP28_PLLCR 6
  7669F//#define DSP28_PLLCR 5
  7670F//#define DSP28_PLLCR 4
  7671F//#define DSP28_PLLCR 3
  7672F//#define DSP28_PLLCR 2
  7673F//#define DSP28_PLLCR 1
  7674F//#define DSP28_PLLCR 0 // PLL is bypassed in this mode
  7675F//----------------------------------------------------------------------------
  7676F/*-----------------------------------------------------------------------------
  7677F      Specify the clock rate of the CPU (SYSCLKOUT) in nS.
  7678F      Take into account the input clock frequency and the PLL multiplier
  7679F      selected in step 1.
  7680F      Use one of the values provided, or define your own.
  7681F      The trailing L is required tells the compiler to treat
  7682F      the number as a 64-bit value.
  7683F      Only one statement should be uncommented.
  7684F      Example 1:150 MHz devices:
  7685F                CLKIN is a 30MHz crystal.
  7686F                In step 1 the user specified PLLCR = 0xA for a
  7687F                150Mhz CPU clock (SYSCLKOUT = 150MHz).
  7688F                In this case, the CPU_RATE will be 6.667L
  7689F                Uncomment the line: #define CPU_RATE 6.667L
  7690F      Example 2: 100 MHz devices:
  7691F                  CLKIN is a 20MHz crystal.
  7692F                      In step 1 the user specified PLLCR = 0xA for a
  7693F                      100Mhz CPU clock (SYSCLKOUT = 100MHz).
  7694F                      In this case, the CPU_RATE will be 10.000L
  7695F                  Uncomment the line: #define CPU_RATE 10.000L
  7696F-----------------------------------------------------------------------------*/
  7697F#define CPU_RATE 6.667L
  7698F//#define CPU_RATE 7.143L // for a 140MHz CPU clock speed (SYSCLKOUT)
  7699F//#define CPU_RATE 8.333L // for a 120MHz CPU clock speed (SYSCLKOUT)
  7700F//#define CPU_RATE 10.000L // for a 100MHz CPU clock speed (SYSCLKOUT)
  7701F//#define CPU_RATE 13.330L // for a 75MHz CPU clock speed (SYSCLKOUT)
  7702F//#define CPU_RATE 20.000L // for a 50MHz CPU clock speed (SYSCLKOUT)
  7703F//#define CPU_RATE 33.333L // for a 30MHz CPU clock speed (SYSCLKOUT)
  7704F//#define CPU_RATE 41.667L // for a 24MHz CPU clock speed (SYSCLKOUT)
  7705F//#define CPU_RATE 50.000L // for a 20MHz CPU clock speed (SYSCLKOUT)
  7706F//#define CPU_RATE 66.667L // for a 15MHz CPU clock speed (SYSCLKOUT)
  7707F//#define CPU_RATE 100.000L // for a 10MHz CPU clock speed (SYSCLKOUT)
  7708F//----------------------------------------------------------------------------
  7709F/*-----------------------------------------------------------------------------
  7710F      Target device (in DSP2833x_Device.h) determines CPU frequency
  7711F      (for examples) - either 150 MHz (for 28335 and 28334) or 100 MHz
  7712F      (for 28332). User does not have to change anything here.
  7713F-----------------------------------------------------------------------------*/
  7714F#define CPU_FRQ_100MHZ 0
  7715F#define CPU_FRQ_150MHZ 1
  7716F//---------------------------------------------------------------------------
  7717F// Include Example Header Files:
  7718F//
  7719F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_GlobalPrototypes.h */
  7720F// TI File $Revision: /main/11 $
  7721F// Checkin $Date: May 12, 2008 14:30:08 $
  7722F//###########################################################################
  7723F//
  7724F// FILE: DSP2833x_GlobalPrototypes.h
  7725F//
  7726F// TITLE: Global prototypes for DSP2833x Examples
  7727F//
  7728F//###########################################################################
  7729F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  7730F// $Release Date: August 4, 2009 $
  7731F//###########################################################################
  7732F#ifndef DSP2833x_GLOBALPROTOTYPES_H
  7733F#define DSP2833x_GLOBALPROTOTYPES_H
  7734F/*---- shared global function prototypes -----------------------------------*/
  7735F
  7736Fextern void
  7737F  InitAdc ( void ) ;
  7738F
  7739Fextern void
  7740F  DMAInitialize ( void ) ;
  7741F// DMA Channel 1
  7742F
  7743Fextern void
  7744T  DMACH1AddrConfig (
  7745F  volatile Uint16 * DMA_Dest ,
  7746F  volatile Uint16 * DMA_Source ) ;
  7747F
  7748Fextern void
  7749T  DMACH1BurstConfig (
  7750F  Uint16 bsize ,
  7751F  int16 srcbstep ,
  7752F  int16 desbstep ) ;
  7753F
  7754Fextern void
  7755T  DMACH1TransferConfig (
  7756F  Uint16 tsize ,
  7757F  int16 srctstep ,
  7758F  int16 deststep ) ;
  7759F
  7760Fextern void
  7761T  DMACH1WrapConfig (
  7762F  Uint16 srcwsize ,
  7763F  int16 srcwstep ,
  7764F  Uint16 deswsize ,
  7765F  int16 deswstep ) ;
  7766F
  7767Fextern void
  7768T  DMACH1ModeConfig (
  7769F  Uint16 persel ,
  7770F  Uint16 perinte ,
  7771F  Uint16 oneshot ,
  7772F  Uint16 cont ,
  7773F  Uint16 synce ,
  7774F  Uint16 syncsel ,
  7775F  Uint16 ovrinte ,
  7776F  Uint16 datasize ,
  7777F  Uint16 chintmode ,
  7778F  Uint16 chinte ) ;
  7779F
  7780Fextern void
  7781F  StartDMACH1 ( void ) ;
  7782F// DMA Channel 2
  7783F
  7784Fextern void
  7785T  DMACH2AddrConfig (
  7786F  volatile Uint16 * DMA_Dest ,
  7787F  volatile Uint16 * DMA_Source ) ;
  7788F
  7789Fextern void
  7790T  DMACH2BurstConfig (
  7791F  Uint16 bsize ,
  7792F  int16 srcbstep ,
  7793F  int16 desbstep ) ;
  7794F
  7795Fextern void
  7796T  DMACH2TransferConfig (
  7797F  Uint16 tsize ,
  7798F  int16 srctstep ,
  7799F  int16 deststep ) ;
  7800F
  7801Fextern void
  7802T  DMACH2WrapConfig (
  7803F  Uint16 srcwsize ,
  7804F  int16 srcwstep ,
  7805F  Uint16 deswsize ,
  7806F  int16 deswstep ) ;
  7807F
  7808Fextern void
  7809T  DMACH2ModeConfig (
  7810F  Uint16 persel ,
  7811F  Uint16 perinte ,
  7812F  Uint16 oneshot ,
  7813F  Uint16 cont ,
  7814F  Uint16 synce ,
  7815F  Uint16 syncsel ,
  7816F  Uint16 ovrinte ,
  7817F  Uint16 datasize ,
  7818F  Uint16 chintmode ,
  7819F  Uint16 chinte ) ;
  7820F
  7821Fextern void
  7822F  StartDMACH2 ( void ) ;
  7823F// DMA Channel 3
  7824F
  7825Fextern void
  7826T  DMACH3AddrConfig (
  7827F  volatile Uint16 * DMA_Dest ,
  7828F  volatile Uint16 * DMA_Source ) ;
  7829F
  7830Fextern void
  7831T  DMACH3BurstConfig (
  7832F  Uint16 bsize ,
  7833F  int16 srcbstep ,
  7834F  int16 desbstep ) ;
  7835F
  7836Fextern void
  7837T  DMACH3TransferConfig (
  7838F  Uint16 tsize ,
  7839F  int16 srctstep ,
  7840F  int16 deststep ) ;
  7841F
  7842Fextern void
  7843T  DMACH3WrapConfig (
  7844F  Uint16 srcwsize ,
  7845F  int16 srcwstep ,
  7846F  Uint16 deswsize ,
  7847F  int16 deswstep ) ;
  7848F
  7849Fextern void
  7850T  DMACH3ModeConfig (
  7851F  Uint16 persel ,
  7852F  Uint16 perinte ,
  7853F  Uint16 oneshot ,
  7854F  Uint16 cont ,
  7855F  Uint16 synce ,
  7856F  Uint16 syncsel ,
  7857F  Uint16 ovrinte ,
  7858F  Uint16 datasize ,
  7859F  Uint16 chintmode ,
  7860F  Uint16 chinte ) ;
  7861F
  7862Fextern void
  7863F  StartDMACH3 ( void ) ;
  7864F// DMA Channel 4
  7865F
  7866Fextern void
  7867T  DMACH4AddrConfig (
  7868F  volatile Uint16 * DMA_Dest ,
  7869F  volatile Uint16 * DMA_Source ) ;
  7870F
  7871Fextern void
  7872T  DMACH4BurstConfig (
  7873F  Uint16 bsize ,
  7874F  int16 srcbstep ,
  7875F  int16 desbstep ) ;
  7876F
  7877Fextern void
  7878T  DMACH4TransferConfig (
  7879F  Uint16 tsize ,
  7880F  int16 srctstep ,
  7881F  int16 deststep ) ;
  7882F
  7883Fextern void
  7884T  DMACH4WrapConfig (
  7885F  Uint16 srcwsize ,
  7886F  int16 srcwstep ,
  7887F  Uint16 deswsize ,
  7888F  int16 deswstep ) ;
  7889F
  7890Fextern void
  7891T  DMACH4ModeConfig (
  7892F  Uint16 persel ,
  7893F  Uint16 perinte ,
  7894F  Uint16 oneshot ,
  7895F  Uint16 cont ,
  7896F  Uint16 synce ,
  7897F  Uint16 syncsel ,
  7898F  Uint16 ovrinte ,
  7899F  Uint16 datasize ,
  7900F  Uint16 chintmode ,
  7901F  Uint16 chinte ) ;
  7902F
  7903Fextern void
  7904F  StartDMACH4 ( void ) ;
  7905F// DMA Channel 5
  7906F
  7907Fextern void
  7908T  DMACH5AddrConfig (
  7909F  volatile Uint16 * DMA_Dest ,
  7910F  volatile Uint16 * DMA_Source ) ;
  7911F
  7912Fextern void
  7913T  DMACH5BurstConfig (
  7914F  Uint16 bsize ,
  7915F  int16 srcbstep ,
  7916F  int16 desbstep ) ;
  7917F
  7918Fextern void
  7919T  DMACH5TransferConfig (
  7920F  Uint16 tsize ,
  7921F  int16 srctstep ,
  7922F  int16 deststep ) ;
  7923F
  7924Fextern void
  7925T  DMACH5WrapConfig (
  7926F  Uint16 srcwsize ,
  7927F  int16 srcwstep ,
  7928F  Uint16 deswsize ,
  7929F  int16 deswstep ) ;
  7930F
  7931Fextern void
  7932T  DMACH5ModeConfig (
  7933F  Uint16 persel ,
  7934F  Uint16 perinte ,
  7935F  Uint16 oneshot ,
  7936F  Uint16 cont ,
  7937F  Uint16 synce ,
  7938F  Uint16 syncsel ,
  7939F  Uint16 ovrinte ,
  7940F  Uint16 datasize ,
  7941F  Uint16 chintmode ,
  7942F  Uint16 chinte ) ;
  7943F
  7944Fextern void
  7945F  StartDMACH5 ( void ) ;
  7946F// DMA Channel 6
  7947F
  7948Fextern void
  7949T  DMACH6AddrConfig (
  7950F  volatile Uint16 * DMA_Dest ,
  7951F  volatile Uint16 * DMA_Source ) ;
  7952F
  7953Fextern void
  7954T  DMACH6BurstConfig (
  7955F  Uint16 bsize ,
  7956F  Uint16 srcbstep ,
  7957F  int16 desbstep ) ;
  7958F
  7959Fextern void
  7960T  DMACH6TransferConfig (
  7961F  Uint16 tsize ,
  7962F  int16 srctstep ,
  7963F  int16 deststep ) ;
  7964F
  7965Fextern void
  7966T  DMACH6WrapConfig (
  7967F  Uint16 srcwsize ,
  7968F  int16 srcwstep ,
  7969F  Uint16 deswsize ,
  7970F  int16 deswstep ) ;
  7971F
  7972Fextern void
  7973T  DMACH6ModeConfig (
  7974F  Uint16 persel ,
  7975F  Uint16 perinte ,
  7976F  Uint16 oneshot ,
  7977F  Uint16 cont ,
  7978F  Uint16 synce ,
  7979F  Uint16 syncsel ,
  7980F  Uint16 ovrinte ,
  7981F  Uint16 datasize ,
  7982F  Uint16 chintmode ,
  7983F  Uint16 chinte ) ;
  7984F
  7985Fextern void
  7986F  StartDMACH6 ( void ) ;
  7987F
  7988Fextern void
  7989F  InitPeripherals ( void ) ;
  7990F
  7991Fextern void
  7992F  InitECan ( void ) ;
  7993F
  7994Fextern void
  7995F  InitECana ( void ) ;
  7996F
  7997Fextern void
  7998F  InitECanGpio ( void ) ;
  7999F
  8000Fextern void
  8001F  InitECanaGpio ( void ) ;
  8002F       // endif DSP28_ECANA
  8003F
  8004Fextern void
  8005F  InitECanb ( void ) ;
  8006F
  8007Fextern void
  8008F  InitECanbGpio ( void ) ;
  8009F       // endif DSP28_ECANB
  8010F
  8011Fextern void
  8012F  InitECap ( void ) ;
  8013F
  8014Fextern void
  8015F  InitECapGpio ( void ) ;
  8016F
  8017Fextern void
  8018F  InitECap1Gpio ( void ) ;
  8019F
  8020Fextern void
  8021F  InitECap2Gpio ( void ) ;
  8022F
  8023Fextern void
  8024F  InitECap3Gpio ( void ) ;
  8025F       // endif DSP28_ECAP3
  8026F
  8027Fextern void
  8028F  InitECap4Gpio ( void ) ;
  8029F       // endif DSP28_ECAP4
  8030F
  8031Fextern void
  8032F  InitECap5Gpio ( void ) ;
  8033F       // endif DSP28_ECAP5
  8034F
  8035Fextern void
  8036F  InitECap6Gpio ( void ) ;
  8037F       // endif DSP28_ECAP6
  8038F
  8039Fextern void
  8040F  InitEPwm ( void ) ;
  8041F
  8042Fextern void
  8043F  InitEPwmGpio ( void ) ;
  8044F
  8045Fextern void
  8046F  InitEPwm1Gpio ( void ) ;
  8047F
  8048Fextern void
  8049F  InitEPwm2Gpio ( void ) ;
  8050F
  8051Fextern void
  8052F  InitEPwm3Gpio ( void ) ;
  8053F
  8054Fextern void
  8055F  InitEPwm4Gpio ( void ) ;
  8056F       // endif DSP28_EPWM4
  8057F
  8058Fextern void
  8059F  InitEPwm5Gpio ( void ) ;
  8060F       // endif DSP28_EPWM5
  8061F
  8062Fextern void
  8063F  InitEPwm6Gpio ( void ) ;
  8064F       // endif DSP28_EPWM6
  8065F
  8066Fextern void
  8067F  InitEQep ( void ) ;
  8068F
  8069Fextern void
  8070F  InitEQepGpio ( void ) ;
  8071F
  8072Fextern void
  8073F  InitEQep1Gpio ( void ) ;
  8074F       // if DSP28_EQEP1
  8075F
  8076Fextern void
  8077F  InitEQep2Gpio ( void ) ;
  8078F       // endif DSP28_EQEP2
  8079F
  8080Fextern void
  8081F  InitGpio ( void ) ;
  8082F
  8083Fextern void
  8084F  InitI2CGpio ( void ) ;
  8085F
  8086Fextern void
  8087F  InitMcbsp ( void ) ;
  8088F
  8089Fextern void
  8090F  InitMcbspa ( void ) ;
  8091F
  8092Fextern void
  8093F  delay_loop ( void ) ;
  8094F
  8095Fextern void
  8096F  InitMcbspaGpio ( void ) ;
  8097F
  8098Fextern void
  8099F  InitMcbspa8bit ( void ) ;
  8100F
  8101Fextern void
  8102F  InitMcbspa12bit ( void ) ;
  8103F
  8104Fextern void
  8105F  InitMcbspa16bit ( void ) ;
  8106F
  8107Fextern void
  8108F  InitMcbspa20bit ( void ) ;
  8109F
  8110Fextern void
  8111F  InitMcbspa24bit ( void ) ;
  8112F
  8113Fextern void
  8114F  InitMcbspa32bit ( void ) ;
  8115F
  8116Fextern void
  8117F  InitMcbspb ( void ) ;
  8118F
  8119Fextern void
  8120F  InitMcbspbGpio ( void ) ;
  8121F
  8122Fextern void
  8123F  InitMcbspb8bit ( void ) ;
  8124F
  8125Fextern void
  8126F  InitMcbspb12bit ( void ) ;
  8127F
  8128Fextern void
  8129F  InitMcbspb16bit ( void ) ;
  8130F
  8131Fextern void
  8132F  InitMcbspb20bit ( void ) ;
  8133F
  8134Fextern void
  8135F  InitMcbspb24bit ( void ) ;
  8136F
  8137Fextern void
  8138F  InitMcbspb32bit ( void ) ;
  8139F       // endif DSP28_MCBSPB
  8140F
  8141Fextern void
  8142F  InitPieCtrl ( void ) ;
  8143F
  8144Fextern void
  8145F  InitPieVectTable ( void ) ;
  8146F
  8147Fextern void
  8148F  InitSci ( void ) ;
  8149F
  8150Fextern void
  8151F  InitSciGpio ( void ) ;
  8152F
  8153Fextern void
  8154F  InitSciaGpio ( void ) ;
  8155F
  8156Fextern void
  8157F  InitScibGpio ( void ) ;
  8158F       // endif DSP28_SCIB
  8159F
  8160Fextern void
  8161F  InitScicGpio ( void ) ;
  8162F
  8163Fextern void
  8164F  InitSpi ( void ) ;
  8165F
  8166Fextern void
  8167F  InitSpiGpio ( void ) ;
  8168F
  8169Fextern void
  8170F  InitSpiaGpio ( void ) ;
  8171F
  8172Fextern void
  8173F  InitSysCtrl ( void ) ;
  8174F
  8175Fextern void
  8176F  InitTzGpio ( void ) ;
  8177F
  8178Fextern void
  8179F  InitXIntrupt ( void ) ;
  8180F
  8181Fextern void
  8182F  XintfInit ( void ) ;
  8183F
  8184Fextern void
  8185F  InitXintf16Gpio() ;
  8186F
  8187Fextern void
  8188F  InitXintf32Gpio() ;
  8189F
  8190Fextern void
  8191T  InitPll (
  8192F  Uint16 pllcr ,
  8193F  Uint16 clkindiv ) ;
  8194F
  8195Fextern void
  8196F  InitPeripheralClocks ( void ) ;
  8197F
  8198Fextern void
  8199F  EnableInterrupts ( void ) ;
  8200F
  8201Fextern void
  8202T  DSP28x_usDelay (
  8203F  Uint32 Count ) ;
  8204F
  8205Fextern void
  8206F  ADC_cal ( void ) ;
  8207F#define KickDog ServiceDog
  8208F
  8209Fextern void
  8210F  ServiceDog ( void ) ;
  8211F
  8212Fextern void
  8213F  DisableDog ( void ) ;
  8214F
  8215Fextern Uint16
  8216F  CsmUnlock ( void ) ;
  8217F// DSP28_DBGIER.asm
  8218F
  8219Fextern void
  8220T  SetDBGIER (
  8221F  Uint16 dbgier ) ;
  8222F// CAUTION
  8223F// This function MUST be executed out of RAM. Executing it
  8224F// out of OTP/Flash will yield unpredictable results
  8225F
  8226Fextern void
  8227F  InitFlash ( void ) ;
  8228F
  8229Fvoid
  8230T  MemCopy (
  8231F  Uint16 * SourceAddr ,
  8232F  Uint16 * SourceEndAddr ,
  8233F  Uint16 * DestAddr ) ;
  8234F//---------------------------------------------------------------------------
  8235F// External symbols created by the linker cmd file
  8236F// DSP28 examples will use these to relocate code from one LOAD location
  8237F// in either Flash or XINTF to a different RUN location in internal
  8238F// RAM
  8239F
  8240Fextern Uint16
  8241F  RamfuncsLoadStart ;
  8242F
  8243Fextern Uint16
  8244F  RamfuncsLoadEnd ;
  8245F
  8246Fextern Uint16
  8247F  RamfuncsRunStart ;
  8248F
  8249Fextern Uint16
  8250F  XintffuncsLoadStart ;
  8251F
  8252Fextern Uint16
  8253F  XintffuncsLoadEnd ;
  8254F
  8255Fextern Uint16
  8256F  XintffuncsRunStart ;
  8257F       /* extern "C" */
  8258F       // - end of DSP2833x_GLOBALPROTOTYPES_H
  8259F//===========================================================================
  8260F// End of file.
  8261F//===========================================================================
  8262F 
  8263F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_GlobalPrototypes.h*/
  8264F/*   CLOSE_FILE Include File */
  8265F 
  8266F         // Prototypes for global functions within the
  8267F                                              // .c files.
  8268F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ePwm_defines.h */
  8269F// TI File $Revision: /main/1 $
  8270F// Checkin $Date: August 18, 2006 13:45:39 $
  8271F//###########################################################################
  8272F//
  8273F// FILE: DSP2833x_EPwm_defines.h
  8274F//
  8275F// TITLE: #defines used in ePWM examples examples
  8276F//
  8277F//###########################################################################
  8278F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  8279F// $Release Date: August 4, 2009 $
  8280F//###########################################################################
  8281F#ifndef DSP2833x_EPWM_DEFINES_H
  8282F#define DSP2833x_EPWM_DEFINES_H
  8283F// TBCTL (Time-Base Control)
  8284F//==========================
  8285F// CTRMODE bits
  8286F#define TB_COUNT_UP 0x0
  8287F#define TB_COUNT_DOWN 0x1
  8288F#define TB_COUNT_UPDOWN 0x2
  8289F#define TB_FREEZE 0x3
  8290F// PHSEN bit
  8291F#define TB_DISABLE 0x0
  8292F#define TB_ENABLE 0x1
  8293F// PRDLD bit
  8294F#define TB_SHADOW 0x0
  8295F#define TB_IMMEDIATE 0x1
  8296F// SYNCOSEL bits
  8297F#define TB_SYNC_IN 0x0
  8298F#define TB_CTR_ZERO 0x1
  8299F#define TB_CTR_CMPB 0x2
  8300F#define TB_SYNC_DISABLE 0x3
  8301F// HSPCLKDIV and CLKDIV bits
  8302F#define TB_DIV1 0x0
  8303F#define TB_DIV2 0x1
  8304F#define TB_DIV4 0x2
  8305F// PHSDIR bit
  8306F#define TB_DOWN 0x0
  8307F#define TB_UP 0x1
  8308F// CMPCTL (Compare Control)
  8309F//==========================
  8310F// LOADAMODE and LOADBMODE bits
  8311F#define CC_CTR_ZERO 0x0
  8312F#define CC_CTR_PRD 0x1
  8313F#define CC_CTR_ZERO_PRD 0x2
  8314F#define CC_LD_DISABLE 0x3
  8315F// SHDWAMODE and SHDWBMODE bits
  8316F#define CC_SHADOW 0x0
  8317F#define CC_IMMEDIATE 0x1
  8318F// AQCTLA and AQCTLB (Action Qualifier Control)
  8319F//=============================================
  8320F// ZRO, PRD, CAU, CAD, CBU, CBD bits
  8321F#define AQ_NO_ACTION 0x0
  8322F#define AQ_CLEAR 0x1
  8323F#define AQ_SET 0x2
  8324F#define AQ_TOGGLE 0x3
  8325F// DBCTL (Dead-Band Control)
  8326F//==========================
  8327F// OUT MODE bits
  8328F#define DB_DISABLE 0x0
  8329F#define DBA_ENABLE 0x1
  8330F#define DBB_ENABLE 0x2
  8331F#define DB_FULL_ENABLE 0x3
  8332F// POLSEL bits
  8333F#define DB_ACTV_HI 0x0
  8334F#define DB_ACTV_LOC 0x1
  8335F#define DB_ACTV_HIC 0x2
  8336F#define DB_ACTV_LO 0x3
  8337F// IN MODE
  8338F#define DBA_ALL 0x0
  8339F#define DBB_RED_DBA_FED 0x1
  8340F#define DBA_RED_DBB_FED 0x2
  8341F#define DBB_ALL 0x3
  8342F// CHPCTL (chopper control)
  8343F//==========================
  8344F// CHPEN bit
  8345F#define CHP_DISABLE 0x0
  8346F#define CHP_ENABLE 0x1
  8347F// CHPFREQ bits
  8348F#define CHP_DIV1 0x0
  8349F#define CHP_DIV2 0x1
  8350F#define CHP_DIV3 0x2
  8351F#define CHP_DIV4 0x3
  8352F#define CHP_DIV5 0x4
  8353F#define CHP_DIV6 0x5
  8354F#define CHP_DIV7 0x6
  8355F#define CHP_DIV8 0x7
  8356F// CHPDUTY bits
  8357F#define CHP1_8TH 0x0
  8358F#define CHP2_8TH 0x1
  8359F#define CHP3_8TH 0x2
  8360F#define CHP4_8TH 0x3
  8361F#define CHP5_8TH 0x4
  8362F#define CHP6_8TH 0x5
  8363F#define CHP7_8TH 0x6
  8364F// TZSEL (Trip Zone Select)
  8365F//==========================
  8366F// CBCn and OSHTn bits
  8367F#define TZ_DISABLE 0x0
  8368F#define TZ_ENABLE 0x1
  8369F// TZCTL (Trip Zone Control)
  8370F//==========================
  8371F// TZA and TZB bits
  8372F#define TZ_HIZ 0x0
  8373F#define TZ_FORCE_HI 0x1
  8374F#define TZ_FORCE_LO 0x2
  8375F#define TZ_NO_CHANGE 0x3
  8376F// ETSEL (Event Trigger Select)
  8377F//=============================
  8378F#define ET_CTR_ZERO 0x1
  8379F#define ET_CTR_PRD 0x2
  8380F#define ET_CTRU_CMPA 0x4
  8381F#define ET_CTRD_CMPA 0x5
  8382F#define ET_CTRU_CMPB 0x6
  8383F#define ET_CTRD_CMPB 0x7
  8384F// ETPS (Event Trigger Pre-scale)
  8385F//===============================
  8386F// INTPRD, SOCAPRD, SOCBPRD bits
  8387F#define ET_DISABLE 0x0
  8388F#define ET_1ST 0x1
  8389F#define ET_2ND 0x2
  8390F#define ET_3RD 0x3
  8391F//--------------------------------
  8392F// HRPWM (High Resolution PWM)
  8393F//================================
  8394F// HRCNFG
  8395F#define HR_Disable 0x0
  8396F#define HR_REP 0x1
  8397F#define HR_FEP 0x2
  8398F#define HR_BEP 0x3
  8399F#define HR_CMP 0x0
  8400F#define HR_PHS 0x1
  8401F#define HR_CTR_ZERO 0x0
  8402F#define HR_CTR_PRD 0x1
  8403F       /* extern "C" */
  8404F       // - end of DSP2833x_EPWM_DEFINES_H
  8405F//===========================================================================
  8406F// End of file.
  8407F//===========================================================================
  8408F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ePwm_defines.h*/
  8409F/*   CLOSE_FILE Include File */
  8410F 
  8411F             // Macros used for PWM examples.
  8412F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Dma_defines.h */
  8413F// TI File $Revision: /main/2 $
  8414F// Checkin $Date: August 14, 2007 16:32:29 $
  8415F//###########################################################################
  8416F//
  8417F// FILE: DSP2833x_Dma_defines.h
  8418F//
  8419F// TITLE: #defines used in DMA examples
  8420F//
  8421F//###########################################################################
  8422F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  8423F// $Release Date: August 4, 2009 $
  8424F//###########################################################################
  8425F#ifndef DSP2833x_DMA_DEFINES_H
  8426F#define DSP2833x_DMA_DEFINES_H
  8427F// MODE
  8428F//==========================
  8429F// PERINTSEL bits
  8430F#define DMA_SEQ1INT 1
  8431F#define DMA_SEQ2INT 2
  8432F#define DMA_XINT1 3
  8433F#define DMA_XINT2 4
  8434F#define DMA_XINT3 5
  8435F#define DMA_XINT4 6
  8436F#define DMA_XINT5 7
  8437F#define DMA_XINT6 8
  8438F#define DMA_XINT7 9
  8439F#define DMA_XINT13 10
  8440F#define DMA_TINT0 11
  8441F#define DMA_TINT1 12
  8442F#define DMA_TINT2 13
  8443F#define DMA_MXEVTA 14
  8444F#define DMA_MREVTA 15
  8445F#define DMA_MXREVTB 16
  8446F#define DMA_MREVTB 17
  8447F// OVERINTE bit
  8448F#define OVRFLOW_DISABLE 0x0
  8449F#define OVEFLOW_ENABLE 0x1
  8450F// PERINTE bit
  8451F#define PERINT_DISABLE 0x0
  8452F#define PERINT_ENABLE 0x1
  8453F// CHINTMODE bits
  8454F#define CHINT_BEGIN 0x0
  8455F#define CHINT_END 0x1
  8456F// ONESHOT bits
  8457F#define ONESHOT_DISABLE 0x0
  8458F#define ONESHOT_ENABLE 0x1
  8459F// CONTINOUS bit
  8460F#define CONT_DISABLE 0x0
  8461F#define CONT_ENABLE 0x1
  8462F// SYNCE bit
  8463F#define SYNC_DISABLE 0x0
  8464F#define SYNC_ENABLE 0x1
  8465F// SYNCSEL bit
  8466F#define SYNC_SRC 0x0
  8467F#define SYNC_DST 0x1
  8468F// DATASIZE bit
  8469F#define SIXTEEN_BIT 0x0
  8470F#define THIRTYTWO_BIT 0x1
  8471F// CHINTE bit
  8472F#define CHINT_DISABLE 0x0
  8473F#define CHINT_ENABLE 0x1
  8474F       /* extern "C" */
  8475F       // - end of DSP2833x_EPWM_DEFINES_H
  8476F//===========================================================================
  8477F// End of file.
  8478F//===========================================================================
  8479F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Dma_defines.h*/
  8480F/*   CLOSE_FILE Include File */
  8481F 
  8482F              // Macros used for DMA examples.
  8483F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_I2C_defines.h */
  8484F// TI File $Revision: /main/2 $
  8485F// Checkin $Date: April 16, 2008 17:16:47 $
  8486F//###########################################################################
  8487F//
  8488F// FILE:        DSP2833x_I2cExample.h
  8489F//
  8490F// TITLE:       2833x I2C Example Code Definitions.
  8491F//
  8492F//###########################################################################
  8493F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  8494F// $Release Date: August 4, 2009 $
  8495F//###########################################################################
  8496F#ifndef DSP2833x_I2C_DEFINES_H
  8497F#define DSP2833x_I2C_DEFINES_H
  8498F//--------------------------------------------
  8499F// Defines
  8500F//--------------------------------------------
  8501F// Error Messages
  8502F#define I2C_ERROR 0xFFFF
  8503F#define I2C_ARB_LOST_ERROR 0x0001
  8504F#define I2C_NACK_ERROR 0x0002
  8505F#define I2C_BUS_BUSY_ERROR 0x1000
  8506F#define I2C_STP_NOT_READY_ERROR 0x5555
  8507F#define I2C_NO_FLAGS 0xAAAA
  8508F#define I2C_SUCCESS 0x0000
  8509F// Clear Status Flags
  8510F#define I2C_CLR_AL_BIT 0x0001
  8511F#define I2C_CLR_NACK_BIT 0x0002
  8512F#define I2C_CLR_ARDY_BIT 0x0004
  8513F#define I2C_CLR_RRDY_BIT 0x0008
  8514F#define I2C_CLR_SCD_BIT 0x0020
  8515F// Interrupt Source Messages
  8516F#define I2C_NO_ISRC 0x0000
  8517F#define I2C_ARB_ISRC 0x0001
  8518F#define I2C_NACK_ISRC 0x0002
  8519F#define I2C_ARDY_ISRC 0x0003
  8520F#define I2C_RX_ISRC 0x0004
  8521F#define I2C_TX_ISRC 0x0005
  8522F#define I2C_SCD_ISRC 0x0006
  8523F#define I2C_AAS_ISRC 0x0007
  8524F// I2CMSG structure defines
  8525F#define I2C_NO_STOP 0
  8526F#define I2C_YES_STOP 1
  8527F#define I2C_RECEIVE 0
  8528F#define I2C_TRANSMIT 1
  8529F#define I2C_MAX_BUFFER_SIZE 16
  8530F// I2C Slave State defines
  8531F#define I2C_NOTSLAVE 0
  8532F#define I2C_ADDR_AS_SLAVE 1
  8533F#define I2C_ST_MSG_READY 2
  8534F// I2C Slave Receiver messages defines
  8535F#define I2C_SND_MSG1 1
  8536F#define I2C_SND_MSG2 2
  8537F// I2C State defines
  8538F#define I2C_IDLE 0
  8539F#define I2C_SLAVE_RECEIVER 1
  8540F#define I2C_SLAVE_TRANSMITTER 2
  8541F#define I2C_MASTER_RECEIVER 3
  8542F#define I2C_MASTER_TRANSMITTER 4
  8543F// I2C Message Commands for I2CMSG struct
  8544F#define I2C_MSGSTAT_INACTIVE 0x0000
  8545F#define I2C_MSGSTAT_SEND_WITHSTOP 0x0010
  8546F#define I2C_MSGSTAT_WRITE_BUSY 0x0011
  8547F#define I2C_MSGSTAT_SEND_NOSTOP 0x0020
  8548F#define I2C_MSGSTAT_SEND_NOSTOP_BUSY 0x0021
  8549F#define I2C_MSGSTAT_RESTART 0x0022
  8550F#define I2C_MSGSTAT_READ_BUSY 0x0023
  8551F// Generic defines
  8552F#define I2C_TRUE 1
  8553F#define I2C_FALSE 0
  8554F#define I2C_YES 1
  8555F#define I2C_NO 0
  8556F#define I2C_DUMMY_BYTE 0
  8557F//--------------------------------------------
  8558F// Structures
  8559F//--------------------------------------------
  8560F// I2C Message Structure
  8561F
  8562Fstruct I2CMSG
  8563F{
  8564F  Uint16 MsgStatus ;
  8565F                         // Word stating what state msg is in:
  8566F               // I2C_MSGCMD_INACTIVE = do not send msg
  8567F               // I2C_MSGCMD_BUSY = msg start has been sent,
  8568F               // awaiting stop
  8569F               // I2C_MSGCMD_SEND_WITHSTOP = command to send
  8570F               // master trans msg complete with a stop bit
  8571F               // I2C_MSGCMD_SEND_NOSTOP = command to send
  8572F               // master trans msg without the stop bit
  8573F               // I2C_MSGCMD_RESTART = command to send a restart
  8574F               // as a master receiver with a stop bit
  8575F  Uint16 SlaveAddress ;  // I2C address of slave msg is intended for
  8576F  Uint16 NumOfBytes ;    // Num of valid bytes in (or to be put in MsgBuffer)
  8577F  Uint16 MemoryHighAddr ;        // EEPROM address of data associated with msg (high byte)
  8578F  Uint16 MemoryLowAddr ; // EEPROM address of data associated with msg (low byte)
  8579F  Uint16 MsgBuffer [ 16 ] ;
  8580F                                                // Array holding msg data - max that
  8581F                     // MAX_BUFFER_SIZE can be is 16 due to
  8582F                     // the FIFO's
  8583F} ;
  8584F       // end of DSP2833x_I2C_DEFINES_H definition
  8585F//===========================================================================
  8586F// End of file.
  8587F//===========================================================================
  8588F 
  8589F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_I2C_defines.h*/
  8590F/*   CLOSE_FILE Include File */
  8591F 
  8592F              // Macros used for I2C examples.
  8593F#define PARTNO_28335 0xEF
  8594F#define PARTNO_28334 0xEE
  8595F#define PARTNO_28332 0xED
  8596F#define PARTNO_28235 0xE8
  8597F#define PARTNO_28234 0xE7
  8598F#define PARTNO_28232 0xE6
  8599F// Include files not used with DSP/BIOS
  8600F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DefaultISR.h */
  8601F// TI File $Revision: /main/1 $
  8602F// Checkin $Date: August 18, 2006 13:45:37 $
  8603F//###########################################################################
  8604F//
  8605F// FILE: DSP2833x_DefaultIsr.h
  8606F//
  8607F// TITLE: DSP2833x Devices Default Interrupt Service Routines Definitions.
  8608F//
  8609F//###########################################################################
  8610F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  8611F// $Release Date: August 4, 2009 $
  8612F//###########################################################################
  8613F#ifndef DSP2833x_DEFAULT_ISR_H
  8614F#define DSP2833x_DEFAULT_ISR_H
  8615F//---------------------------------------------------------------------------
  8616F// Default Interrupt Service Routine Declarations:
  8617F//
  8618F// The following function prototypes are for the
  8619F// default ISR routines used with the default PIE vector table.
  8620F// This default vector table is found in the DSP2833x_PieVect.h
  8621F// file.
  8622F//
  8623F// Non-Peripheral Interrupts:
  8624F
  8625Finterrupt void
  8626F  INT13_ISR ( void ) ;          // XINT13 or CPU-Timer 1
  8627T  interrupt void
  8628F  INT14_ISR ( void ) ;          // CPU-Timer2
  8629T  interrupt void
  8630F  DATALOG_ISR ( void ) ;          // Datalogging interrupt
  8631T  interrupt void
  8632F  RTOSINT_ISR ( void ) ;          // RTOS interrupt
  8633T  interrupt void
  8634F  EMUINT_ISR ( void ) ;          // Emulation interrupt
  8635T  interrupt void
  8636F  NMI_ISR ( void ) ;          // Non-maskable interrupt
  8637T  interrupt void
  8638F  ILLEGAL_ISR ( void ) ;          // Illegal operation TRAP
  8639F// Group 1 PIE Interrupt Service Routines:
  8640T  interrupt void
  8641F  SEQ1INT_ISR ( void ) ;          // ADC Sequencer 1 ISR
  8642T  interrupt void
  8643F  SEQ2INT_ISR ( void ) ;          // ADC Sequencer 2 ISR
  8644T  interrupt void
  8645F  XINT1_ISR ( void ) ;          // External interrupt 1
  8646T  interrupt void
  8647F  XINT2_ISR ( void ) ;          // External interrupt 2
  8648T  interrupt void
  8649F  ADCINT_ISR ( void ) ;          // ADC
  8650T  interrupt void
  8651F  TINT0_ISR ( void ) ;          // Timer 0
  8652T  interrupt void
  8653F  WAKEINT_ISR ( void ) ;          // WD
  8654F// Group 6 PIE Interrupt Service Routines:
  8655T  interrupt void
  8656F  SPIRXINTA_ISR ( void ) ;          // SPI-A
  8657T  interrupt void
  8658F  SPITXINTA_ISR ( void ) ;          // SPI-A
  8659T  interrupt void
  8660F  MRINTA_ISR ( void ) ;          // McBSP-A
  8661T  interrupt void
  8662F  MXINTA_ISR ( void ) ;          // McBSP-A
  8663T  interrupt void
  8664F  MRINTB_ISR ( void ) ;          // McBSP-B
  8665T  interrupt void
  8666F  MXINTB_ISR ( void ) ;          // McBSP-B
  8667F// Group 7 PIE Interrupt Service Routines:
  8668T  interrupt void
  8669F  DINTCH1_ISR ( void ) ;          // DMA-Channel 1
  8670T  interrupt void
  8671F  DINTCH2_ISR ( void ) ;          // DMA-Channel 2
  8672T  interrupt void
  8673F  DINTCH3_ISR ( void ) ;          // DMA-Channel 3
  8674T  interrupt void
  8675F  DINTCH4_ISR ( void ) ;          // DMA-Channel 4
  8676T  interrupt void
  8677F  DINTCH5_ISR ( void ) ;          // DMA-Channel 5
  8678T  interrupt void
  8679F  DINTCH6_ISR ( void ) ;          // DMA-Channel 6
  8680F// Group 8 PIE Interrupt Service Routines:
  8681T  interrupt void
  8682F  I2CINT1A_ISR ( void ) ;          // I2C-A
  8683T  interrupt void
  8684F  I2CINT2A_ISR ( void ) ;          // I2C-A
  8685T  interrupt void
  8686F  SCIRXINTC_ISR ( void ) ;          // SCI-C
  8687T  interrupt void
  8688F  SCITXINTC_ISR ( void ) ;          // SCI-C
  8689F// Group 9 PIE Interrupt Service Routines:
  8690T  interrupt void
  8691F  SCIRXINTA_ISR ( void ) ;          // SCI-A
  8692T  interrupt void
  8693F  SCITXINTA_ISR ( void ) ;          // SCI-A
  8694T  interrupt void
  8695F  SCIRXINTB_ISR ( void ) ;          // SCI-B
  8696T  interrupt void
  8697F  SCITXINTB_ISR ( void ) ;          // SCI-B
  8698T  interrupt void
  8699F  ECAN0INTA_ISR ( void ) ;          // eCAN-A
  8700T  interrupt void
  8701F  ECAN1INTA_ISR ( void ) ;          // eCAN-A
  8702T  interrupt void
  8703F  ECAN0INTB_ISR ( void ) ;          // eCAN-B
  8704T  interrupt void
  8705F  ECAN1INTB_ISR ( void ) ;
  8706F                                    // eCAN-B
  8707F// Group 10 PIE Interrupt Service Routines:
  8708F// Group 11 PIE Interrupt Service Routines:
  8709F// Group 12 PIE Interrupt Service Routines:
  8710T  interrupt void
  8711F  XINT3_ISR ( void ) ;          // External interrupt 3
  8712T  interrupt void
  8713F  XINT4_ISR ( void ) ;          // External interrupt 4
  8714T  interrupt void
  8715F  XINT5_ISR ( void ) ;          // External interrupt 5
  8716T  interrupt void
  8717F  XINT6_ISR ( void ) ;          // External interrupt 6
  8718T  interrupt void
  8719F  XINT7_ISR ( void ) ;          // External interrupt 7
  8720T  interrupt void
  8721F  LVF_ISR ( void ) ;          // Latched overflow flag
  8722T  interrupt void
  8723F  LUF_ISR ( void ) ;          // Latched underflow flag
  8724F// Catch-all for Reserved Locations For testing purposes:
  8725T  interrupt void
  8726F  PIE_RESERVED ( void ) ;          // Reserved for test
  8727T  interrupt void
  8728F  rsvd_ISR ( void ) ;          // for test
  8729T  interrupt void
  8730F  INT_NOTUSED_ISR ( void ) ;
  8731F                                      // for unused interrupts
  8732F       /* extern "C" */
  8733F       // end of DSP2833x_DEFAULT_ISR_H definition
  8734F//===========================================================================
  8735F// End of file.
  8736F//===========================================================================
  8737F 
  8738F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DefaultISR.h*/
  8739F/*   CLOSE_FILE Include File */
  8740F 
  8741F// DO NOT MODIFY THIS LINE.
  8742F#define DELAY_US( A ) DSP28x_usDelay ( ( ( ( ( long double ) A * 1000.0L ) / ( long double ) CPU_RATE ) - 9.0L ) / 5.0L )
  8743F       /* extern "C" */
  8744F       // end of DSP2833x_EXAMPLES_H definition
  8745F//===========================================================================
  8746F// End of file.
  8747F//===========================================================================
  8748F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Examples.h*/
  8749F/*   CLOSE_FILE Include File */
  8750F 
  8751F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\my_stdint.h */
  8752F/*****************************************************************************/
  8753F/* STDINT.H v6.2.0 */
  8754F/* */
  8755F/* Copyright (c) 2002-2013 Texas Instruments Incorporated */
  8756F/* http://www.ti.com/ */
  8757F/* */
  8758F/* Redistribution and use in source and binary forms, with or without */
  8759F/* modification, are permitted provided that the following conditions */
  8760F/* are met: */
  8761F/* */
  8762F/* Redistributions of source code must retain the above copyright */
  8763F/* notice, this list of conditions and the following disclaimer. */
  8764F/* */
  8765F/* Redistributions in binary form must reproduce the above copyright */
  8766F/* notice, this list of conditions and the following disclaimer in */
  8767F/* the documentation and/or other materials provided with the */
  8768F/* distribution. */
  8769F/* */
  8770F/* Neither the name of Texas Instruments Incorporated nor the names */
  8771F/* of its contributors may be used to endorse or promote products */
  8772F/* derived from this software without specific prior written */
  8773F/* permission. */
  8774F/* */
  8775F/* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS */
  8776F/* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT */
  8777F/* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR */
  8778F/* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT */
  8779F/* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, */
  8780F/* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT */
  8781F/* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, */
  8782F/* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY */
  8783F/* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT */
  8784F/* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE */
  8785F/* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
  8786F/* */
  8787F/*****************************************************************************/
  8788F#ifndef _MY_STDINT_H_
  8789F#define _MY_STDINT_H_
  8790F/* These definitions might not be 8-bit wide */
  8791F
  8792Ftypedef
  8793Fsigned char
  8794F  int8_t ;
  8795F
  8796Ftypedef
  8797Funsigned char
  8798F  uint8_t ;
  8799F  /* 7.18.1.1 Exact-width integer types */
  8800F
  8801Ftypedef
  8802Fshort
  8803F  int16_t ;
  8804F
  8805Ftypedef
  8806Funsigned short
  8807F  uint16_t ;
  8808F
  8809Ftypedef
  8810Flong
  8811F  int32_t ;
  8812F
  8813Ftypedef
  8814Funsigned long
  8815F  uint32_t ;
  8816F  /* 7.18.1.2 Minimum-width integer types */
  8817F
  8818Ftypedef
  8819Fint16_t
  8820F  int_least8_t ;
  8821F
  8822Ftypedef
  8823Fuint16_t
  8824F  uint_least8_t ;
  8825F
  8826Ftypedef
  8827Fint16_t
  8828F  int_least16_t ;
  8829F
  8830Ftypedef
  8831Fuint16_t
  8832F  uint_least16_t ;
  8833F
  8834Ftypedef
  8835Fint32_t
  8836F  int_least32_t ;
  8837F
  8838Ftypedef
  8839Fuint32_t
  8840F  uint_least32_t ;
  8841F/* sorry, [u]int_least64_t not implemented for C27X, CLA */
  8842F/* 7.18.1.3 Fastest minimum-width integer types */
  8843F
  8844Ftypedef
  8845Fint16_t
  8846F  int_fast8_t ;
  8847F
  8848Ftypedef
  8849Fuint16_t
  8850F  uint_fast8_t ;
  8851F
  8852Ftypedef
  8853Fint16_t
  8854F  int_fast16_t ;
  8855F
  8856Ftypedef
  8857Fuint16_t
  8858F  uint_fast16_t ;
  8859F
  8860Ftypedef
  8861Fint32_t
  8862F  int_fast32_t ;
  8863F
  8864Ftypedef
  8865Fuint32_t
  8866F  uint_fast32_t ;
  8867F/* sorry, [u]int_fast64_t not implemented for C27X, CLA */
  8868F/* 7.18.1.4 Integer types capable of holding object pointers */
  8869F
  8870Ftypedef
  8871Flong
  8872F  intptr_t ;
  8873F
  8874Ftypedef
  8875Funsigned long
  8876F  uintptr_t ;
  8877F/* 7.18.1.5 Greatest-width integer types */
  8878F      /* C27X or CLA */
  8879F
  8880Ftypedef
  8881Flong
  8882F  intmax_t ;
  8883F
  8884Ftypedef
  8885Funsigned long
  8886F  uintmax_t ;
  8887F/*
  8888F According to footnotes in the 1999 C standard, "C++ implementations
  8889F should define these macros only when __STDC_LIMIT_MACROS is defined
  8890F before <stdint.h> is included."
  8891F*/
  8892F/* 7.18.2 Limits of specified width integer types */
  8893F#define INT16_MAX 0x7fff
  8894F#define INT16_MIN ( - INT16_MAX - 1 )
  8895F#define UINT16_MAX 0xffff
  8896F#define INT32_MAX 0x7fffffff
  8897F#define INT32_MIN ( - INT32_MAX - 1 )
  8898F#define UINT32_MAX 0xffffffff
  8899F#define INT_LEAST8_MAX ( INT16_MAX )
  8900F#define INT_LEAST8_MIN ( INT16_MIN )
  8901F#define UINT_LEAST8_MAX ( UINT16_MAX )
  8902F#define INT_LEAST16_MAX ( INT16_MAX )
  8903F#define INT_LEAST16_MIN ( INT16_MIN )
  8904F#define UINT_LEAST16_MAX ( UINT16_MAX )
  8905F#define INT_LEAST32_MAX ( INT32_MAX )
  8906F#define INT_LEAST32_MIN ( INT32_MIN )
  8907F#define UINT_LEAST32_MAX ( UINT32_MAX )
  8908F#define INT_FAST8_MAX ( INT16_MAX )
  8909F#define INT_FAST8_MIN ( INT16_MIN )
  8910F#define UINT_FAST8_MAX ( UINT16_MAX )
  8911F#define INT_FAST16_MAX ( INT16_MAX )
  8912F#define INT_FAST16_MIN ( INT16_MIN )
  8913F#define UINT_FAST16_MAX ( UINT16_MAX )
  8914F#define INT_FAST32_MAX ( INT32_MAX )
  8915F#define INT_FAST32_MIN ( INT32_MIN )
  8916F#define UINT_FAST32_MAX ( UINT32_MAX )
  8917F#define INTPTR_MAX ( INT32_MAX )
  8918F#define INTPTR_MIN ( INT32_MIN )
  8919F#define UINTPTR_MAX ( UINT32_MAX )
  8920F#define INTMAX_MIN ( INT32_MIN )
  8921F#define INTMAX_MAX ( INT32_MAX )
  8922F#define UINTMAX_MAX ( UINT32_MAX )
  8923F/* 7.18.3 Limits of other integer types */
  8924F#define PTRDIFF_MAX ( INT32_MAX )
  8925F#define PTRDIFF_MIN ( INT32_MIN )
  8926F#define SIG_ATOMIC_MIN ( INT32_MIN )
  8927F#define SIG_ATOMIC_MAX ( INT32_MAX )
  8928F#define SIZE_MAX ( INT32_MAX )
  8929F#define WCHAR_MAX 0xffffu
  8930F#define WCHAR_MIN 0
  8931F#define WINT_MIN ( INT32_MIN )
  8932F#define WINT_MAX ( INT32_MAX )
  8933F/* 7.18.4.1 Macros for minimum-width integer constants */
  8934F/*
  8935F There is a defect report filed against the C99 standard concerning how
  8936F the (U)INTN_C macros should be implemented. Please refer to --
  8937F http://wwwold.dkuug.dk/JTC1/SC22/WG14/www/docs/dr_209.htm
  8938F for more information. These macros are implemented according to the
  8939F suggestion given at this web site.
  8940F*/
  8941F#define INT8_C( value ) ( ( int_least8_t ) ( value ) )
  8942F#define UINT8_C( value ) ( ( uint_least8_t ) ( value ) )
  8943F#define INT16_C( value ) ( ( int_least16_t ) ( value ) )
  8944F#define UINT16_C( value ) ( ( uint_least16_t ) ( value ) )
  8945F#define INT32_C( value ) ( ( int_least32_t ) ( value ) )
  8946F#define UINT32_C( value ) ( ( uint_least32_t ) ( value ) )
  8947F/* 7.18.4.2 Macros for greatest-width integer constants */
  8948F#define INTMAX_C( value ) ( ( intmax_t ) ( value ) )
  8949F#define UINTMAX_C( value ) ( ( uintmax_t ) ( value ) )
  8950F       /* !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS) */
  8951F       /* _STDINT_H_ */
  8952F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\my_stdint.h*/
  8953F/*   CLOSE_FILE Include File */
  8954F 
  8955F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_sensorhead_types.h */
  8956F//############################################################################
  8957F//
  8958F// File:         dsp_sensorhead_types.h
  8959F// Version:      0.1
  8960F//
  8961F// Description: Structure and variable definitions.
  8962F//
  8963F//############################################################################
  8964F// Author: Rogério Lima
  8965F// Release Date: July 2012
  8966F//############################################################################
  8967F#ifndef DSP_SENSORHEAD_TYPES_H
  8968F#define DSP_SENSORHEAD_TYPES_H
  8969F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_types.h */
  8970F//############################################################################
  8971F//
  8972F// File:         dsp_types.h
  8973F// Version:      0.1
  8974F//
  8975F// Description: Structure and variable definitions.
  8976F//
  8977F//############################################################################
  8978F// Author: Rogério Lima
  8979F// Release Date: July 2012
  8980F//############################################################################
  8981F#ifndef DSP_TYPES_H
  8982F#define DSP_TYPES_H
  8983F/* These definitions might not be 8-bit wide */
  8984F
  8985Ftypedef
  8986Fsigned char
  8987F  int8_t ;
  8988F
  8989Ftypedef
  8990Funsigned char
  8991F  uint8_t ;
  8992F  /* 7.18.1.1 Exact-width integer types */
  8993F
  8994Ftypedef
  8995Fshort
  8996F  int16_t ;
  8997F
  8998Ftypedef
  8999Funsigned short
  9000F  uint16_t ;
  9001F
  9002Ftypedef
  9003Flong
  9004F  int32_t ;
  9005F
  9006Ftypedef
  9007Funsigned long
  9008F  uint32_t ;
  9009F       /* DSP_TYPES_H */
  9010F 
  9011F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_types.h*/
  9012F/*   CLOSE_FILE Include File */
  9013F 
  9014F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_quat.h */
  9015F//############################################################################
  9016F//
  9017F// File:         EKF_Quat.h
  9018F// Version:      0.1
  9019F//
  9020F// Description: Preprocessor definitions and function declarations for quater-
  9021F//       nion calculations.
  9022F//
  9023F//############################################################################
  9024F// Author: Rogério Lima
  9025F// Release Date: July 2012
  9026F//############################################################################
  9027F#ifndef __EKF_quat_h
  9028F#define __EKF_quat_h
  9029F
  9030Ftypedef
  9031Fstruct _quat
  9032F{
  9033F  float a ,
  9034F  b ,
  9035F  c ,
  9036F  d ;
  9037F} quat ;
  9038F
  9039Fint16_t
  9040T  quat_mult (
  9041F  quat * src1 ,
  9042F  quat * src2 ,
  9043F  quat * dest ) ;
  9044F
  9045Fint16_t
  9046T  quat_conj (
  9047F  quat * src ,
  9048F  quat * dest ) ;
  9049F
  9050Fint16_t
  9051T  quat_norm (
  9052F  quat * src ) ;
  9053F
  9054Fint16_t
  9055T  quat_add (
  9056F  quat * src1 ,
  9057F  quat * src2 ,
  9058F  quat * dest ) ;
  9059F
  9060Fint16_t
  9061T  quat_subtract (
  9062F  quat * src1 ,
  9063F  quat * src2 ,
  9064F  quat * dest ) ;
  9065F
  9066Fint16_t
  9067T  quat_scalar_mult (
  9068F  quat * qsrc ,
  9069F  float scalar ,
  9070F  quat * dest ) ;
  9071F 
  9072F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_quat.h*/
  9073F/*   CLOSE_FILE Include File */
  9074F 
  9075F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_matrix.h */
  9076F//############################################################################
  9077F//
  9078F// File: dsp_matrix.h
  9079F// Version: 0.1
  9080F//
  9081F// Description: Preprocessor definitions and function declarations for matrix
  9082F// calculations.
  9083F//
  9084F//############################################################################
  9085F// Author: Rogério Lima
  9086F// Release Date: July 2012
  9087F//############################################################################
  9088F#ifndef DSP_MATRIX_H
  9089F#define DSP_MATRIX_H
  9090F#define MATRIX_MAX_ROWS 12
  9091F#define MATRIX_MAX_COLUMNS 12
  9092F
  9093Ftypedef
  9094Fstruct _fMatrix
  9095F{
  9096F  int rows ;
  9097F  int columns ;
  9098F  float data [ 12 ] [ 12 ] ;
  9099F} fMatrix ;
  9100F// Matrix operations
  9101F
  9102Fint
  9103T  mat_add (
  9104F  fMatrix * src1 ,
  9105F  fMatrix * src2 ,
  9106F  fMatrix * dest ) ;
  9107F
  9108Fint
  9109T  mat_mult (
  9110F  fMatrix * src1 ,
  9111F  fMatrix * src2 ,
  9112F  fMatrix * dest ) ;
  9113F
  9114Fint
  9115T  mat_scalar_mult (
  9116F  float scalar ,
  9117F  fMatrix * src ,
  9118F  fMatrix * dest ) ;
  9119F
  9120Fint
  9121T  mat_determinant (
  9122F  fMatrix * src ,
  9123F  float * det ) ;
  9124F
  9125Fint
  9126T  mat_transpose (
  9127F  fMatrix * src ,
  9128F  fMatrix * dest ) ;
  9129F
  9130Fint
  9131T  mat_create_identity (
  9132F  fMatrix * dest ,
  9133F  int rows ,
  9134F  int columns ) ;
  9135F
  9136Fint
  9137T  mat_zero (
  9138F  fMatrix * dest ,
  9139F  int rows ,
  9140F  int columns ) ;
  9141F
  9142Fint
  9143T  mat_copy (
  9144F  fMatrix * src ,
  9145F  fMatrix * dest ) ;
  9146F//int mat_print( fMatrix* matrix );
  9147F//void hexPrint16( short byte );
  9148F 
  9149F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_matrix.h*/
  9150F/*   CLOSE_FILE Include File */
  9151F 
  9152F#define SUCCESS ( 1 == 1 )
  9153F#define FAIL ( 0 == 1 )
  9154F#define MAG_UPDATE 0
  9155F#define ACCEL_UPDATE 1
  9156F         // Original values
  9157F#define ACCEL_VARIANCE 223.59E-4f
  9158F#define GYRO_VARIANCE 68.81E-5f
  9159F#define GYRO_BIAS_VARIANCE 201.93E-3f
  9160F#define MAGNETO_VARIANCE 48.12E-5f
  9161F#define GPS_VARIANCE 1.6E-3f
  9162F#define QUATERNION_NORM_VARIANCE 1.0E-9f
  9163F#define ACCEL_SCALE_FACTOR 0.03830859375f
  9164F#define GYRO_SCALE_FACTOR_DEG 0.06956521739f
  9165F#define GYRO_SCALE_FACTOR_RAD 0.00121414208f
  9166F#define MAG_SCALE_FACTOR 0.00151515151f
  9167F#define RAD2DEG 57.2957795130f
  9168F#define DEG2RAD 0.01745329251f
  9169F#define KM2M 0.27777777778f
  9170F//#define       ABS_PRESSURE_SCALE_FACTOR // -> Transfer function
  9171F//#define       DIFF_PRESSURE_SCALE_FACTOR // -> Transfer function
  9172F/* Structure for holding raw sensor data */
  9173F
  9174Ftypedef
  9175Fstruct sensor_data_raw
  9176F{
  9177F  int16_t gyro_x ;
  9178F  int16_t gyro_y ;
  9179F  int16_t gyro_z ;
  9180F  int16_t new_gyro_data ;
  9181F  int16_t accel_x ;
  9182F  int16_t accel_y ;
  9183F  int16_t accel_z ;
  9184F        // Flag specifies whether there is new accel data in the sensor data structure
  9185F  int16_t new_accel_data ;
  9186F  int16_t mag_x ;
  9187F  int16_t mag_y ;
  9188F  int16_t mag_z ;
  9189F        // Flag specifies whether there is new magnetometer data in the sensor data structure
  9190F  int16_t new_mag_data ;
  9191F        // Rate gyro temperature measurement
  9192F  int16_t gyro_temperature ;
  9193F  int32_t abs_pressure ;
  9194F  int16_t new_abs_pressure_data ;
  9195F  int16_t diff_pressure ;
  9196F  int16_t new_diff_pressure_data ;
  9197F} sensor_data_raw_t ;
  9198F/* Structure for holding scaled sensor data */
  9199F
  9200Ftypedef
  9201F  struct
  9202F  {
  9203F    float gyro_x ;
  9204F    float gyro_y ;
  9205F    float gyro_z ;
  9206F    float accel_x ;
  9207F    float accel_y ;
  9208F    float accel_z ;
  9209F    float mag_x ;
  9210F    float mag_y ;
  9211F    float mag_z ;
  9212F    float gyro_temperature ;
  9213F    float abs_pressure ;
  9214F    float baro_altitude ;
  9215F    float diff_pressure ;
  9216F    float airspeed ;
  9217F        /* GPS data */
  9218F        /* Latitude */
  9219F    int16_t gps_lat_deg ;
  9220F    uint32_t gps_lat_min ;
  9221F    uint8_t gps_lat_sector ;
  9222F        /* Longitude */
  9223F    int16_t gps_lon_deg ;
  9224F    uint32_t gps_lon_min ;
  9225F    uint8_t gps_lon_sector ;
  9226F        /* Altitude */
  9227F    int32_t gps_alt ;
  9228F        /* Speed */
  9229F    int32_t gps_speed ;
  9230F    int32_t gps_course ;
  9231F        /* Time */
  9232F    uint16_t gps_hour ;
  9233F    uint16_t gps_min ;
  9234F    float gps_sec ;
  9235F        // Status
  9236F    uint16_t gps_position_fix_status ;
  9237F    uint16_t gps_no_sv ;
  9238F    float gps_hdop ;
  9239F    uint16_t gps_new_message ;
  9240F  } sensor_data_scaled_t ;
  9241F// Structure for storing AHRS states and other data related to state computation
  9242F// This structure is, in a way, redundant because all this data is also stored in the
  9243F// UM6_config or UM6_data structures. However, in the config and data strucutres, the
  9244F// data is packaged as UInt32 entries into an array for convenience with communication.
  9245F// To use the data as floats, special formatting is required. This structure provides
  9246F// a place to store that data in the expected format, which makes accessing it easier.
  9247F
  9248Ftypedef
  9249F  struct
  9250F  {
  9251F        /* Attitude states */
  9252F    float psi ;
  9253F    float theta ;
  9254F    float phi ;
  9255F        /* Angle rate states */
  9256F    float psi_dot ;
  9257F    float theta_dot ;
  9258F    float phi_dot ;
  9259F        /* Quaternion states "qib" = Quaternion from Inertial to Body */
  9260F    quat qib ;
  9261F    quat quat_debug ;
  9262F        /* Gyro biases */
  9263F    float bias_p ;
  9264F    float bias_q ;
  9265F    float bias_r ;
  9266F        /* Accelerometer biases */
  9267F    float bias_accel_x ;
  9268F    float bias_accel_y ;
  9269F    float bias_accel_z ;
  9270F        /* Magnetometer biases */
  9271F    float bias_mag_x ;
  9272F    float bias_mag_y ;
  9273F    float bias_mag_z ;
  9274F        /* State Transition Matrix (jacobian of system matrix 'f') */
  9275F    fMatrix jac_f ;
  9276F        /* Linearized measurement equation (jacobian of output equation 'h') */
  9277F    fMatrix jac_h ;
  9278F        /* Measurement noise matrix */
  9279F    fMatrix R ;
  9280F        /* Auxiliary construction measurement matrix for phi and theta angles. */
  9281F    fMatrix R_phi_theta ;
  9282F        /* Auxiliary construction measurement matrix for psi angle. */
  9283F    fMatrix R_psi ;
  9284F        /* Process noise matrix */
  9285F    fMatrix Q ;
  9286F        /* Accelerometer alignment matrix */
  9287F    fMatrix accel_align_mat ;
  9288F        /* Gyro alignment matrix */
  9289F    fMatrix gyro_align_mat ;
  9290F        /* Magnetometer calibration matrix */
  9291F    fMatrix mag_align_mat ;
  9292F        // Error covariance matrix
  9293F    fMatrix P ;
  9294F        /* Magnetic field reference vector */
  9295F    float mag_ref_x ;
  9296F    float mag_ref_y ;
  9297F    float mag_ref_z ;
  9298F        /* Accelerometer reference vector */
  9299F    float accel_ref_x ;
  9300F    float accel_ref_y ;
  9301F    float accel_ref_z ;
  9302F        /* Accelerometer variance */
  9303F    float accel_var ;
  9304F        /* Gyrometer variance */
  9305F    float gyro_var ;
  9306F        /* Gyro bias variance */
  9307F    float gyro_bias_var ;
  9308F        /* Magnetometer variance */
  9309F    float mag_var ;
  9310F        /* GPS velocity variance */
  9311F    float gps_var ;
  9312F    float U ;
  9313F    float V ;
  9314F    float W ;
  9315F    float U_ant ;
  9316F    float V_ant ;
  9317F    float W_ant ;
  9318F    float U_dot ;
  9319F    float V_dot ;
  9320F    float W_dot ;
  9321F    float temperature ;
  9322F        // Time sampling
  9323F    float Ts ;    // In seconds
  9324F    float debug_misc [ 5 ] ;
  9325F        // GPS stuffs
  9326F    float GPS_north ;    // In meters
  9327F    float GPS_east ;
  9328F    float GPS_h ;
  9329F    float GPS_h_ant ;
  9330F    float GPS_speed ;    // In m/s
  9331F    float GPS_speed_ant ;    // past speed
  9332F    float GPS_heading ;    // In m/s
  9333F    float GPS_Ts ;
  9334F    float GPS_lat_home ;
  9335F    float GPS_lon_home ;
  9336F    float GPS_alt_home ;
  9337F  } ahrs_states_t ;
  9338F// Structure for holding raw sensor data
  9339F
  9340Ftypedef
  9341F  struct
  9342F  {
  9343F        // input
  9344F    float xk [ 9 ] ;
  9345F    float xk_1 [ 9 ] ;
  9346F    float xk_2 [ 9 ] ;
  9347F        // output
  9348F    float yk [ 9 ] ;
  9349F    float yk_1 [ 9 ] ;
  9350F    float yk_2 [ 9 ] ;
  9351F    float a [ 5 ] ; // denominator coefficient
  9352F    float b [ 5 ] ; // numerator coefficient
  9353F  } digital_filter_data_t ;
  9354F
  9355Fvoid
  9356T  compute_euler_angles (
  9357F  ahrs_states_t * estimated_states ) ;
  9358F
  9359Fvoid
  9360T  unroll_states (
  9361F  ahrs_states_t * states ) ;
  9362F 
  9363F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_sensorhead_types.h*/
  9364F/*   CLOSE_FILE Include File */
  9365F 
  9366F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_i2c.h */
  9367F/******************************************************************************
  9368F* FILENAME: dsp_i2c.h
  9369F*
  9370F* DESCRIPTION:
  9371F* High-level functions for I2C module..
  9372F*
  9373F* FUNCTIONS:
  9374F* uint8_t i2cBatchWrite ( uint8_t, uint8_t*, uint8_t)
  9375F* uint8_t i2cBatchRead ( uint8_t, uint8_t, uint8_t*, uint8_t)
  9376F* void I2C_get_data (I2C_RawSensorData*)
  9377F* void I2C_init_sensors (void)
  9378F*
  9379F* VERSION DATE WHO DETAIL
  9380F* 1.0 05 Set 2011 Rogerio Lima Start-up coding.
  9381F* Plínio Pereira
  9382F* -----------------------------------------------------------------------------
  9383F* 2.0 30 Aug 2014 Rogerio Lima Improving code quality rewriting the
  9384F* code and correcting errors.
  9385F******************************************************************************/
  9386F/*
  9387F * SECTION ORDER
  9388F * 1. Comment block
  9389F * 2. Include statements
  9390F * 3. Definitions: data type, constants, macros
  9391F * 4. Static data declarations
  9392F * 5. Private functions prototypes
  9393F * 6. Public function bodies
  9394F * 7. Private function bodies
  9395F *
  9396F */
  9397F#ifndef DSP_I2C_H
  9398F#define DSP_I2C_H
  9399F#define I2C_TX_BUFSIZE 16U
  9400F#define I2C_RX_BUFSIZE 24U
  9401F#define I2C_ACK_ATTEMPTS 5000U
  9402F#define MAX_RETRIES 10000U
  9403F#define I2C_TRANSMITTER I2C_Direction_Transmitter
  9404F#define I2C_RECEIVER I2C_Direction_Receiver
  9405F#define I2C_BIT_SET 1U
  9406F#define I2C_BIT_CLEAR 0U
  9407F#define I2C_ACK_DISABLE 1U
  9408F#define I2C_ACK_ENABLE 0U
  9409F#define I2C_SEND_START 1U
  9410F#define I2C_NO_START 0U
  9411F#define I2C_SEND_STOP 1U
  9412F#define I2C_NO_STOP 0U
  9413F#define I2C_SCL_PIN GPIO_Pin_6
  9414F#define I2C_SDA_PIN GPIO_Pin_7
  9415F#define I2C_PORT GPIOB
  9416F#define I2C_ARBITRATION_LOST 10U
  9417F#define I2C_NACK 1U
  9418F#define I2C_TIMEOUT 11U
  9419F/*------------------------------------------------------------------------------
  9420F F28335 Register I2CMDR
  9421F------------------------------------------------------------------------------*/
  9422F// BC Bits
  9423F#define I2C_BC_8BITS 0x0000
  9424F#define I2C_BC_1BITS 0x0001
  9425F#define I2C_BC_2BITS 0x0002
  9426F#define I2C_BC_3BITS 0x0003
  9427F#define I2C_BC_4BITS 0x0004
  9428F#define I2C_BC_5BITS 0x0005
  9429F#define I2C_BC_6BITS 0x0006
  9430F#define I2C_BC_7BITS 0x0007
  9431F// FDF
  9432F#define I2C_NO_FREE_DATA_FORMAT 0x0000
  9433F#define I2C_FREE_DATA_FORMAT 0x0008
  9434F// STB
  9435F#define I2C_NO_START_BYTE 0x0000
  9436F#define I2C_START_BYTE 0x0010
  9437F// IRS
  9438F#define I2C_RESET 0x0000
  9439F#define I2C_ENABLED 0x0020
  9440F// DLB
  9441F#define I2C_NO_LOOPBACK 0x0000
  9442F#define I2C_LOOPBACK 0x0040
  9443F// RM
  9444F#define I2C_NO_REPEAT 0x0000
  9445F#define I2C_REPEAT 0x0080
  9446F/* Defines the length of time the i2c software will wait for clock stretching *
  9447F * the number of attempts simply corresponds with the number of iterations *
  9448F * through a for loop. */
  9449F#define I2C_MAX_ATTEMPTS 1000
  9450F/* Macro definitions */
  9451F#define I2C_DELAY_INIT( ) int16_t _counter ;
  9452F#define I2C_DELAY( ) for ( _counter = 0 ; _counter < 5 ; _counter ++ ) { asm volatile("mov r0, r0")   ; }
  9453F#define I2C_DELAY_SHORT( ) asm volatile("mov r0, r0")
  9454F/* Structure for holding raw sensor data from I2C bus
  9455Ftypedef struct __I2CData {
  9456F Gyrometers
  9457F int16_t W_x;
  9458F int16_t W_y;
  9459F int16_t W_z;
  9460F int16_t new_gyro_data;
  9461F Accelerometers
  9462F int16_t A_x;
  9463F int16_t A_y;
  9464F int16_t A_z;
  9465F Flag specifies whether there is new accel data in the sensor data structure
  9466F int16_t new_accel_data;
  9467F Magnetometers
  9468F int16_t H_x;
  9469F int16_t H_y;
  9470F int16_t H_z;
  9471F Flag specifies whether there is new magnetometer data in the sensor data structure
  9472F int16_t new_mag_data;
  9473F 
  9474F Rate gyro temperature measurement
  9475F int16_t gyro_temperature;
  9476F Differential pressure
  9477F int16_t diff_press;
  9478F Flag specifies whether there is new differential pressure data in the sensor data structure
  9479F int16_t new_diff_press_data;
  9480F Absolute pressure
  9481F int16_t abs_press;
  9482F Flag specifies whether there is new differential pressure data in the sensor data structure
  9483F int16_t new_abs_press_data;
  9484F} I2C_RawSensorData;*/
  9485F// Prototype statements for functions found within this file.
  9486F
  9487Fvoid
  9488F  Gpio_select_I2C ( void ) ;
  9489F// Software-emulated i2c function calls. Use these ones.
  9490F
  9491Fuint8_t
  9492T  i2cBatchWrite (
  9493F  const uint8_t address7 ,
  9494F  uint8_t * txBuffer ,
  9495F  const uint8_t bytesToWrite ) ;
  9496F
  9497Fuint8_t
  9498T  i2cBatchRead (
  9499F  const uint8_t address7 ,
  9500F  const uint8_t device_start_address ,
  9501F  uint8_t * rxBuffer ,
  9502F  const uint8_t bytesToRead ) ;
  9503F
  9504Fvoid
  9505T  i2c_get_data (
  9506F  sensor_data_raw_t * raw_data ) ;
  9507F
  9508Fvoid
  9509F  i2c_init_sensors ( void ) ;
  9510F 
  9511F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_i2c.h*/
  9512F/*   CLOSE_FILE Include File */
  9513F 
  9514F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_i2c_itg3200.h */
  9515F/******************************************************************************
  9516F* FILENAME: dsp_system.c
  9517F*
  9518F* DESCRIPTION:
  9519F* Peripheral and I/Os configuration routines.
  9520F* Functions used to configure I/Os, peripherals, clocks, etc;
  9521F* See TMS320F28335 for detailed description.
  9522F*
  9523F* FUNCTIONS:
  9524F* void Gpio_Select (void)
  9525F*
  9526F* VERSION DATE WHO DETAIL
  9527F* 1.0 05 Set 2011 Rogerio Lima Start-up coding.
  9528F* PlÃ­nio Pereira
  9529F* -----------------------------------------------------------------------------
  9530F* 2.0 30 Aug 2014 Rogerio Lima Improving code quality rewriting the
  9531F* code and correcting errors.
  9532F******************************************************************************/
  9533F#ifndef DSP_I2C_ITG3200_H
  9534F#define DSP_I2C_ITG3200_H
  9535F/* ITG3200 function prototypes */
  9536F
  9537Fuint8_t
  9538F  itg_init ( void ) ;
  9539F
  9540Fuint8_t
  9541F  itg_get_data ( void ) ;
  9542F  /* Register addresses for the ITG3200 */
  9543F#define ITG_SLAVE_ADDRESS7 0x68U
  9544F#define ITG_REG_WHOAMI 0x00U
  9545F#define ITG_REG_SMPL 0x15U
  9546F#define ITG_REG_DLPF_FSSEL 0x16U
  9547F#define ITG_REG_INTCONF 0x17U
  9548F#define ITG_REG_INTSTAT 0x18U
  9549F#define ITG_REG_TEMP_HIGH 0x1BU
  9550F#define ITG_REG_TEMP_LOW 0x1CU
  9551F#define ITG_REG_GYRO_X_HIGH 0x1DU
  9552F#define ITG_REG_GYRO_X_LOW 0x1EU
  9553F#define ITG_REG_GYRO_Y_HIGH 0x1FU
  9554F#define ITG_REG_GYRO_Y_LOW 0x20U
  9555F#define ITG_REG_GYRO_Z_HIGH 0x21U
  9556F#define ITG_REG_GYRO_Z_LOW 0x22U
  9557F#define ITG_REG_PWR 0x3EU
  9558F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_i2c_itg3200.h*/
  9559F/*   CLOSE_FILE Include File */
  9560F 
  9561F
  9562Fuint8_t
  9563F  g_ITG_Initialized = 0U ;
  9564F
  9565Fextern uint8_t
  9566F  g_i2cTxBuf [ 16U ] ;
  9567F
  9568Fextern uint8_t
  9569F  g_i2cRxBuf [ 24U ] ;
  9570F/*******************************************************************************
  9571F* Function Name : ITG_init
  9572F* Input : None
  9573F* Output : uint8_t* status_flag
  9574F* Return : 1 if success, 0 if fail
  9575F* Description : Initializes the ITG3200 angular rate sensor.
  9576F*******************************************************************************/
  9577F
  9578Fuint8_t
  9579T  itg_init()
  9580F  {
  9581F    static uint8_t
  9582F      txBuf [ 4 ] ;
  9583F    static uint8_t
  9584F      returnval ;
  9585T    txBuf [ 0 ] = 0x15U ;
  9586T    txBuf [ 1 ] = 0x04U ;/* Sample rate division = 4+1 -> 1kHz/(4+1) = 200Hz */
  9587T    txBuf [ 2 ] = 0x1CU ;/* Internal LPF at 20 Hz, +/- 2000 deg/s full-scale range */
  9588T    txBuf [ 3 ] = 0x90U ;/* No interrupt pins utilized (gyros sampled as soon as the processor is ready to get new data. */
  9589T    returnval = i2cBatchWrite ( 0x68U , txBuf , 4U ) ;
  9590T    if
  9591T      (
  9592T      returnval != 0U
  9593T      )                  /* Return 0 if occur an error */
  9594T      {
  9595F        // Delay necessário para configuração
  9596T        DSP28x_usDelay (
  9597T        (
  9598T        (
  9599T        (
  9600T        ( long double ) 2000 * 1000.0L ) /
  9601T        ( long double ) 6.667L ) - 9.0L ) /
  9602T        5.0L ) ;
  9603Fasm (" EALLOW")
  9604F;
  9605T        SysCtrlRegs.WDKEY = 0x55U ;    /* service WD #1 */
  9606T        SysCtrlRegs.WDKEY = 0xAAU ;    /* service WD #2 */
  9607Fasm (" EDIS")
  9608F;
  9609T        DSP28x_usDelay (
  9610T        (
  9611T        (
  9612T        (
  9613T        ( long double ) 2000 * 1000.0L ) /
  9614T        ( long double ) 6.667L ) - 9.0L ) /
  9615T        5.0L ) ;
  9616T        txBuf [ 0 ] = 0x3EU ;
  9617T        txBuf [ 1 ] = 0x01U ;/* Set clock to X Gyro reference */
  9618T        returnval = i2cBatchWrite ( 0x68U , txBuf , 2U ) ;
  9619T        DSP28x_usDelay (
  9620T        (
  9621T        (
  9622T        (
  9623T        ( long double ) 10 * 1000.0L ) /
  9624T        ( long double ) 6.667L ) - 9.0L ) /
  9625T        5.0L ) ;
  9626T      }
  9627T    return
  9628T    ( returnval ) ;
  9629F  }
  9630F/*******************************************************************************
  9631F* Function Name : ITG_get_data
  9632F* Input : None
  9633F* Output : uint8_t* i2cBuf
  9634F* Return : 1 if success, 0 if fail
  9635F* Description : Collect data from the gyro sensor
  9636F*******************************************************************************/
  9637F
  9638Fuint8_t
  9639T  itg_get_data ( void )
  9640F  {
  9641F    static int8_t
  9642F      returnval ;
  9643T    returnval = i2cBatchRead ( 0x68U , 0x1BU , g_i2cRxBuf , 8U ) ;
  9644T    return
  9645T    ( returnval ) ;
  9646F  }
  9647F 
