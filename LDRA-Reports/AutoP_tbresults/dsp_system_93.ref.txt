     1F/*
     2FC TESTBED VERSION  : 9.4.4                                                                                               
     3FFILE UNDER TEST  : "F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\src\usr\dsp_system.c"         
     4FDATE OF ANALYSIS : Fri Nov 07 10:49:55 2014                          
     5F*/
     6F/******************************************************************************
     7F* FILENAME: dsp_system.c
     8F*
     9F* DESCRIPTION:
    10F* Peripheral and I/Os configuration routines.
    11F*
    12F* FUNCTIONS:
    13F* void Gpio_Select (void)
    14F*
    15F* NOTES:
    16F* Functions used to configure I/Os, peripherals, clocks, etc;
    17F* See TMS320F28335 for detailed description.
    18F*
    19F* REFERENCES:
    20F*
    21F* START DATE: 05 Set 2011
    22F*
    23F* CHANGES :
    24F*
    25F* VERSION DATE WHO DETAIL
    26F* 1.0 05 Set 2011 Rogerio Lima Start-up coding.
    27F* Plínio Pereira
    28F* -----------------------------------------------------------------------------
    29F* 2.0 30 Aug 2014 Rogerio Lima Improving code quality rewriting the
    30F* code and correcting errors.
    31F******************************************************************************/
    32F/*
    33F * SECTION ORDER
    34F * 1. Comment block
    35F * 2. Include statements
    36F * 3. Definitions: data type, constants, macros
    37F * 4. Static data declarations
    38F * 5. Private functions prototypes
    39F * 6. Public function bodies
    40F * 7. Private function bodies
    41F *
    42F */
    43F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_system.h */
    44F/******************************************************************************
    45F* FILENAME: dsp_comm.h
    46F*
    47F* DESCRIPTION:
    48F* Function prototypes of communication peripherals.
    49F*
    50F* FUNCTIONS:
    51F* void xxx
    52F* void xxx
    53F*
    54F* VERSION DATE WHO DETAIL
    55F* 1.0 05 Set 2011 Rogerio Lima Start-up coding.
    56F* Plínio Pereira
    57F* -----------------------------------------------------------------------------
    58F* 2.0 30 Aug 2014 Rogerio Lima Improving code quality rewriting the
    59F* code and correcting errors.
    60F******************************************************************************/
    61F#ifndef DSP_SYSTEM_H
    62F#define DSP_SYSTEM_H
    63F/* Function prototypes */
    64F
    65Fvoid
    66F  gpio_select() ;
    67F
    68Fvoid
    69F  setup_epwm1a() ;
    70F 
    71F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_system.h*/
    72F/*   CLOSE_FILE Include File */
    73F 
    74F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Device.h */
    75F// TI File $Revision: /main/5 $
    76F// Checkin $Date: January 22, 2008 16:55:35 $
    77F//###########################################################################
    78F//
    79F// FILE: DSP2833x_Device.h
    80F//
    81F// TITLE: DSP2833x Device Definitions.
    82F//
    83F//###########################################################################
    84F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
    85F// $Release Date: August 4, 2009 $
    86F//###########################################################################
    87F#ifndef DSP2833x_DEVICE_H
    88F#define DSP2833x_DEVICE_H
    89F#define TARGET 1
    90F//---------------------------------------------------------------------------
    91F// User To Select Target Device:
    92F#define DSP28_28335 TARGET
    93F#define DSP28_28334 0
    94F#define DSP28_28332 0
    95F//---------------------------------------------------------------------------
    96F// Common CPU Definitions:
    97F//
    98F
    99Fextern cregister volatile unsigned int
   100F  IFR ;
   101F
   102Fextern cregister volatile unsigned int
   103F  IER ;
   104F#define EINT asm (" clrc INTM")
   105F#define DINT asm (" setc INTM")
   106F#define ERTM asm (" clrc DBGM")
   107F#define DRTM asm (" setc DBGM")
   108F#define EALLOW asm (" EALLOW")
   109F#define EDIS asm (" EDIS")
   110F#define ESTOP0 asm (" ESTOP0")
   111F#define M_INT1 0x0001
   112F#define M_INT2 0x0002
   113F#define M_INT3 0x0004
   114F#define M_INT4 0x0008
   115F#define M_INT5 0x0010
   116F#define M_INT6 0x0020
   117F#define M_INT7 0x0040
   118F#define M_INT8 0x0080
   119F#define M_INT9 0x0100
   120F#define M_INT10 0x0200
   121F#define M_INT11 0x0400
   122F#define M_INT12 0x0800
   123F#define M_INT13 0x1000
   124F#define M_INT14 0x2000
   125F#define M_DLOG 0x4000
   126F#define M_RTOS 0x8000
   127F#define BIT0 0x0001
   128F#define BIT1 0x0002
   129F#define BIT2 0x0004
   130F#define BIT3 0x0008
   131F#define BIT4 0x0010
   132F#define BIT5 0x0020
   133F#define BIT6 0x0040
   134F#define BIT7 0x0080
   135F#define BIT8 0x0100
   136F#define BIT9 0x0200
   137F#define BIT10 0x0400
   138F#define BIT11 0x0800
   139F#define BIT12 0x1000
   140F#define BIT13 0x2000
   141F#define BIT14 0x4000
   142F#define BIT15 0x8000
   143F//---------------------------------------------------------------------------
   144F// For Portability, User Is Recommended To Use Following Data Type Size
   145F// Definitions For 16-bit and 32-Bit Signed/Unsigned Integers:
   146F//
   147F#define DSP28_DATA_TYPES
   148F
   149Ftypedef
   150Fchar
   151F  int8 ;
   152F
   153Ftypedef
   154Fint
   155F  int16 ;
   156F
   157Ftypedef
   158Flong
   159F  int32 ;
   160F
   161Ftypedef
   162Flong long
   163F  int64 ;
   164F
   165Ftypedef
   166Funsigned char
   167F  Uint8 ;
   168F
   169Ftypedef
   170Funsigned int
   171F  Uint16 ;
   172F
   173Ftypedef
   174Funsigned long
   175F  Uint32 ;
   176F
   177Ftypedef
   178Funsigned long long
   179F  Uint64 ;
   180F
   181Ftypedef
   182Ffloat
   183F  float32 ;
   184F
   185Ftypedef
   186Flong double
   187F  float64 ;
   188F//---------------------------------------------------------------------------
   189F// Include All Peripheral Header Files:
   190F//
   191F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Adc.h */
   192F// TI File $Revision: /main/1 $
   193F// Checkin $Date: August 18, 2006 13:51:50 $
   194F//###########################################################################
   195F//
   196F// FILE: DSP2833x_Adc.h
   197F//
   198F// TITLE: DSP2833x Device ADC Register Definitions.
   199F//
   200F//###########################################################################
   201F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   202F// $Release Date: August 4, 2009 $
   203F//###########################################################################
   204F#ifndef DSP2833x_ADC_H
   205F#define DSP2833x_ADC_H
   206F//---------------------------------------------------------------------------
   207F// ADC Individual Register Bit Definitions:
   208F
   209Fstruct ADCTRL1_BITS
   210F{                     // bits description
   211F  Uint16 rsvd1 : 4 ;// 3:0 reserved
   212F  Uint16 SEQ_CASC : 1 ;// 4 Cascaded sequencer mode
   213F  Uint16 SEQ_OVRD : 1 ;// 5 Sequencer override
   214F  Uint16 CONT_RUN : 1 ;// 6 Continuous run
   215F  Uint16 CPS : 1 ;// 7 ADC core clock pre-scalar
   216F  Uint16 ACQ_PS : 4 ;// 11:8 Acquisition window size
   217F  Uint16 SUSMOD : 2 ;// 13:12 Emulation suspend mode
   218F  Uint16 RESET : 1 ;// 14 ADC reset
   219F  Uint16 rsvd2 : 1 ;// 15 reserved
   220F} ;
   221F
   222Funion ADCTRL1_REG
   223F{
   224F  Uint16 all ;
   225F  struct ADCTRL1_BITS bit ;
   226F} ;
   227F
   228Fstruct ADCTRL2_BITS
   229F{                     // bits description
   230F  Uint16 EPWM_SOCB_SEQ2 : 1 ;// 0 EPWM compare B SOC mask for SEQ2
   231F  Uint16 rsvd1 : 1 ;// 1 reserved
   232F  Uint16 INT_MOD_SEQ2 : 1 ;// 2 SEQ2 Interrupt mode
   233F  Uint16 INT_ENA_SEQ2 : 1 ;// 3 SEQ2 Interrupt enable
   234F  Uint16 rsvd2 : 1 ;// 4 reserved
   235F  Uint16 SOC_SEQ2 : 1 ;// 5 Start of conversion for SEQ2
   236F  Uint16 RST_SEQ2 : 1 ;// 6 Reset SEQ2
   237F  Uint16 EXT_SOC_SEQ1 : 1 ;// 7 External start of conversion for SEQ1
   238F  Uint16 EPWM_SOCA_SEQ1 : 1 ;// 8 EPWM compare B SOC mask for SEQ1
   239F  Uint16 rsvd3 : 1 ;// 9 reserved
   240F  Uint16 INT_MOD_SEQ1 : 1 ;// 10 SEQ1 Interrupt mode
   241F  Uint16 INT_ENA_SEQ1 : 1 ;// 11 SEQ1 Interrupt enable
   242F  Uint16 rsvd4 : 1 ;// 12 reserved
   243F  Uint16 SOC_SEQ1 : 1 ;// 13 Start of conversion trigger for SEQ1
   244F  Uint16 RST_SEQ1 : 1 ;// 14 Restart sequencer 1
   245F  Uint16 EPWM_SOCB_SEQ : 1 ;// 15 EPWM compare B SOC enable
   246F} ;
   247F
   248Funion ADCTRL2_REG
   249F{
   250F  Uint16 all ;
   251F  struct ADCTRL2_BITS bit ;
   252F} ;
   253F
   254Fstruct ADCASEQSR_BITS
   255F{                       // bits description
   256F  Uint16 SEQ1_STATE : 4 ;// 3:0 SEQ1 state
   257F  Uint16 SEQ2_STATE : 3 ;// 6:4 SEQ2 state
   258F  Uint16 rsvd1 : 1 ;// 7 reserved
   259F  Uint16 SEQ_CNTR : 4 ;// 11:8 Sequencing counter status
   260F  Uint16 rsvd2 : 4 ;// 15:12 reserved
   261F} ;
   262F
   263Funion ADCASEQSR_REG
   264F{
   265F  Uint16 all ;
   266F  struct ADCASEQSR_BITS bit ;
   267F} ;
   268F
   269Fstruct ADCMAXCONV_BITS
   270F{                        // bits description
   271F  Uint16 MAX_CONV1 : 4 ;// 3:0 Max number of conversions
   272F  Uint16 MAX_CONV2 : 3 ;// 6:4 Max number of conversions
   273F  Uint16 rsvd1 : 9 ;// 15:7 reserved
   274F} ;
   275F
   276Funion ADCMAXCONV_REG
   277F{
   278F  Uint16 all ;
   279F  struct ADCMAXCONV_BITS bit ;
   280F} ;
   281F
   282Fstruct ADCCHSELSEQ1_BITS
   283F{                          // bits description
   284F  Uint16 CONV00 : 4 ;// 3:0 Conversion selection 00
   285F  Uint16 CONV01 : 4 ;// 7:4 Conversion selection 01
   286F  Uint16 CONV02 : 4 ;// 11:8 Conversion selection 02
   287F  Uint16 CONV03 : 4 ;// 15:12 Conversion selection 03
   288F} ;
   289F
   290Funion ADCCHSELSEQ1_REG
   291F{
   292F  Uint16 all ;
   293F  struct ADCCHSELSEQ1_BITS bit ;
   294F} ;
   295F
   296Fstruct ADCCHSELSEQ2_BITS
   297F{                          // bits description
   298F  Uint16 CONV04 : 4 ;// 3:0 Conversion selection 04
   299F  Uint16 CONV05 : 4 ;// 7:4 Conversion selection 05
   300F  Uint16 CONV06 : 4 ;// 11:8 Conversion selection 06
   301F  Uint16 CONV07 : 4 ;// 15:12 Conversion selection 07
   302F} ;
   303F
   304Funion ADCCHSELSEQ2_REG
   305F{
   306F  Uint16 all ;
   307F  struct ADCCHSELSEQ2_BITS bit ;
   308F} ;
   309F
   310Fstruct ADCCHSELSEQ3_BITS
   311F{                          // bits description
   312F  Uint16 CONV08 : 4 ;// 3:0 Conversion selection 08
   313F  Uint16 CONV09 : 4 ;// 7:4 Conversion selection 09
   314F  Uint16 CONV10 : 4 ;// 11:8 Conversion selection 10
   315F  Uint16 CONV11 : 4 ;// 15:12 Conversion selection 11
   316F} ;
   317F
   318Funion ADCCHSELSEQ3_REG
   319F{
   320F  Uint16 all ;
   321F  struct ADCCHSELSEQ3_BITS bit ;
   322F} ;
   323F
   324Fstruct ADCCHSELSEQ4_BITS
   325F{                          // bits description
   326F  Uint16 CONV12 : 4 ;// 3:0 Conversion selection 12
   327F  Uint16 CONV13 : 4 ;// 7:4 Conversion selection 13
   328F  Uint16 CONV14 : 4 ;// 11:8 Conversion selection 14
   329F  Uint16 CONV15 : 4 ;// 15:12 Conversion selection 15
   330F} ;
   331F
   332Funion ADCCHSELSEQ4_REG
   333F{
   334F  Uint16 all ;
   335F  struct ADCCHSELSEQ4_BITS bit ;
   336F} ;
   337F
   338Fstruct ADCTRL3_BITS
   339F{                     // bits description
   340F  Uint16 SMODE_SEL : 1 ;// 0 Sampling mode select
   341F  Uint16 ADCCLKPS : 4 ;// 4:1 ADC core clock divider
   342F  Uint16 ADCPWDN : 1 ;// 5 ADC powerdown
   343F  Uint16 ADCBGRFDN : 2 ;// 7:6 ADC bandgap/ref power down
   344F  Uint16 rsvd1 : 8 ;// 15:8 reserved
   345F} ;
   346F
   347Funion ADCTRL3_REG
   348F{
   349F  Uint16 all ;
   350F  struct ADCTRL3_BITS bit ;
   351F} ;
   352F
   353Fstruct ADCST_BITS
   354F{                   // bits description
   355F  Uint16 INT_SEQ1 : 1 ;// 0 SEQ1 Interrupt flag
   356F  Uint16 INT_SEQ2 : 1 ;// 1 SEQ2 Interrupt flag
   357F  Uint16 SEQ1_BSY : 1 ;// 2 SEQ1 busy status
   358F  Uint16 SEQ2_BSY : 1 ;// 3 SEQ2 busy status
   359F  Uint16 INT_SEQ1_CLR : 1 ;// 4 SEQ1 Interrupt clear
   360F  Uint16 INT_SEQ2_CLR : 1 ;// 5 SEQ2 Interrupt clear
   361F  Uint16 EOS_BUF1 : 1 ;// 6 End of sequence buffer1
   362F  Uint16 EOS_BUF2 : 1 ;// 7 End of sequence buffer2
   363F  Uint16 rsvd1 : 8 ;// 15:8 reserved
   364F} ;
   365F
   366Funion ADCST_REG
   367F{
   368F  Uint16 all ;
   369F  struct ADCST_BITS bit ;
   370F} ;
   371F
   372Fstruct ADCREFSEL_BITS
   373F{                       // bits description
   374F  Uint16 rsvd1 : 14 ;    // 13:0 reserved
   375F  Uint16 REF_SEL : 2 ;    // 15:14 Reference select
   376F} ;
   377F
   378Funion ADCREFSEL_REG
   379F{
   380F  Uint16 all ;
   381F  struct ADCREFSEL_BITS bit ;
   382F} ;
   383F
   384Fstruct ADCOFFTRIM_BITS
   385F{                       // bits description
   386F  int16 OFFSET_TRIM : 9 ;    // 8:0 Offset Trim
   387F  Uint16 rsvd1 : 7 ;    // 15:9 reserved
   388F} ;
   389F
   390Funion ADCOFFTRIM_REG
   391F{
   392F  Uint16 all ;
   393F  struct ADCOFFTRIM_BITS bit ;
   394F} ;
   395F
   396Fstruct ADC_REGS
   397F{
   398F  union ADCTRL1_REG ADCTRL1 ;  // ADC Control 1
   399F  union ADCTRL2_REG ADCTRL2 ;  // ADC Control 2
   400F  union ADCMAXCONV_REG ADCMAXCONV ;  // Max conversions
   401F  union ADCCHSELSEQ1_REG ADCCHSELSEQ1 ;  // Channel select sequencing control 1
   402F  union ADCCHSELSEQ2_REG ADCCHSELSEQ2 ;  // Channel select sequencing control 2
   403F  union ADCCHSELSEQ3_REG ADCCHSELSEQ3 ;  // Channel select sequencing control 3
   404F  union ADCCHSELSEQ4_REG ADCCHSELSEQ4 ;  // Channel select sequencing control 4
   405F  union ADCASEQSR_REG ADCASEQSR ;  // Autosequence status register
   406F  Uint16 ADCRESULT0 ;  // Conversion Result Buffer 0
   407F  Uint16 ADCRESULT1 ;  // Conversion Result Buffer 1
   408F  Uint16 ADCRESULT2 ;  // Conversion Result Buffer 2
   409F  Uint16 ADCRESULT3 ;  // Conversion Result Buffer 3
   410F  Uint16 ADCRESULT4 ;  // Conversion Result Buffer 4
   411F  Uint16 ADCRESULT5 ;  // Conversion Result Buffer 5
   412F  Uint16 ADCRESULT6 ;  // Conversion Result Buffer 6
   413F  Uint16 ADCRESULT7 ;  // Conversion Result Buffer 7
   414F  Uint16 ADCRESULT8 ;  // Conversion Result Buffer 8
   415F  Uint16 ADCRESULT9 ;  // Conversion Result Buffer 9
   416F  Uint16 ADCRESULT10 ;  // Conversion Result Buffer 10
   417F  Uint16 ADCRESULT11 ;  // Conversion Result Buffer 11
   418F  Uint16 ADCRESULT12 ;  // Conversion Result Buffer 12
   419F  Uint16 ADCRESULT13 ;  // Conversion Result Buffer 13
   420F  Uint16 ADCRESULT14 ;  // Conversion Result Buffer 14
   421F  Uint16 ADCRESULT15 ;  // Conversion Result Buffer 15
   422F  union ADCTRL3_REG ADCTRL3 ;  // ADC Control 3
   423F  union ADCST_REG ADCST ;  // ADC Status Register
   424F  Uint16 rsvd1 ;
   425F  Uint16 rsvd2 ;
   426F  union ADCREFSEL_REG ADCREFSEL ;  // Reference Select Register
   427F  union ADCOFFTRIM_REG ADCOFFTRIM ;  // Offset Trim Register
   428F} ;
   429F
   430Fstruct ADC_RESULT_MIRROR_REGS
   431F{
   432F  Uint16 ADCRESULT0 ;  // Conversion Result Buffer 0
   433F  Uint16 ADCRESULT1 ;  // Conversion Result Buffer 1
   434F  Uint16 ADCRESULT2 ;  // Conversion Result Buffer 2
   435F  Uint16 ADCRESULT3 ;  // Conversion Result Buffer 3
   436F  Uint16 ADCRESULT4 ;  // Conversion Result Buffer 4
   437F  Uint16 ADCRESULT5 ;  // Conversion Result Buffer 5
   438F  Uint16 ADCRESULT6 ;  // Conversion Result Buffer 6
   439F  Uint16 ADCRESULT7 ;  // Conversion Result Buffer 7
   440F  Uint16 ADCRESULT8 ;  // Conversion Result Buffer 8
   441F  Uint16 ADCRESULT9 ;  // Conversion Result Buffer 9
   442F  Uint16 ADCRESULT10 ;  // Conversion Result Buffer 10
   443F  Uint16 ADCRESULT11 ;  // Conversion Result Buffer 11
   444F  Uint16 ADCRESULT12 ;  // Conversion Result Buffer 12
   445F  Uint16 ADCRESULT13 ;  // Conversion Result Buffer 13
   446F  Uint16 ADCRESULT14 ;  // Conversion Result Buffer 14
   447F  Uint16 ADCRESULT15 ;  // Conversion Result Buffer 15
   448F} ;
   449F//---------------------------------------------------------------------------
   450F// ADC External References & Function Declarations:
   451F//
   452F
   453Fextern volatile struct ADC_REGS
   454F  AdcRegs ;
   455F
   456Fextern volatile struct ADC_RESULT_MIRROR_REGS
   457F  AdcMirror ;
   458F       /* extern "C" */
   459F       // end of DSP2833x_ADC_H definition
   460F//===========================================================================
   461F// End of file.
   462F//===========================================================================
   463F 
   464F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Adc.h*/
   465F/*   CLOSE_FILE Include File */
   466F 
   467F                // ADC Registers
   468F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DevEmu.h */
   469F// TI File $Revision: /main/4 $
   470F// Checkin $Date: April 15, 2009 10:05:17 $
   471F//###########################################################################
   472F//
   473F// FILE: DSP2833x_DevEmu.h
   474F//
   475F// TITLE: DSP2833x Device Emulation Register Definitions.
   476F//
   477F//###########################################################################
   478F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   479F// $Release Date: August 4, 2009 $
   480F//###########################################################################
   481F#ifndef DSP2833x_DEV_EMU_H
   482F#define DSP2833x_DEV_EMU_H
   483F//---------------------------------------------------------------------------
   484F// Device Emulation Register Bit Definitions:
   485F//
   486F// Device Configuration Register Bit Definitions
   487F
   488Fstruct DEVICECNF_BITS
   489F{                       // bits description
   490F  Uint16 rsvd1 : 3 ;
   491F                   // 2:0 reserved
   492F  Uint16 VMAPS : 1 ;
   493F                   // 3 VMAP Status
   494F  Uint16 rsvd2 : 1 ;
   495F                   // 4 reserved
   496F  Uint16 XRSn : 1 ;
   497F                  // 5 XRSn Signal Status
   498F  Uint16 rsvd3 : 10 ;
   499F                    // 15:6
   500F  Uint16 rsvd4 : 3 ;
   501F                   // 18:16
   502F  Uint16 ENPROT : 1 ;
   503F                    // 19 Enable/Disable pipeline protection
   504F  Uint16 rsvd5 : 7 ;
   505F                   // 26:20 reserved
   506F  Uint16 TRSTN : 1 ;
   507F                   // 27 Status of TRSTn signal
   508F  Uint16 rsvd6 : 4 ;
   509F                   // 31:28 reserved
   510F} ;
   511F
   512Funion DEVICECNF_REG
   513F{
   514F  Uint32 all ;
   515F  struct DEVICECNF_BITS bit ;
   516F} ;
   517F// CLASSID
   518F
   519Fstruct CLASSID_BITS
   520F{                     // bits description
   521F  Uint16 CLASSNO : 8 ;
   522F                     // 7:0 Class Number
   523F  Uint16 PARTTYPE : 8 ;
   524F                      // 15:8 Part Type
   525F} ;
   526F
   527Funion CLASSID_REG
   528F{
   529F  Uint16 all ;
   530F  struct CLASSID_BITS bit ;
   531F} ;
   532F
   533Fstruct DEV_EMU_REGS
   534F{
   535F  union DEVICECNF_REG DEVICECNF ; // device configuration
   536F  union CLASSID_REG CLASSID ; // Class ID
   537F  Uint16 REVID ; // Device ID
   538F  Uint16 PROTSTART ; // Write-Read protection start
   539F  Uint16 PROTRANGE ; // Write-Read protection range
   540F  Uint16 rsvd2 [ 202 ] ;
   541F} ;
   542F// PARTID
   543F
   544Fstruct PARTID_BITS
   545F{                    // bits description
   546F  Uint16 PARTNO : 8 ;
   547F                    // 7:0 Part Number
   548F  Uint16 PARTTYPE : 8 ;
   549F                      // 15:8 Part Type
   550F} ;
   551F
   552Funion PARTID_REG
   553F{
   554F  Uint16 all ;
   555F  struct PARTID_BITS bit ;
   556F} ;
   557F
   558Fstruct PARTID_REGS
   559F{
   560F  union PARTID_REG PARTID ; // Part ID
   561F} ;
   562F//---------------------------------------------------------------------------
   563F// Device Emulation Register References & Function Declarations:
   564F//
   565F
   566Fextern volatile struct DEV_EMU_REGS
   567F  DevEmuRegs ;
   568F
   569Fextern volatile struct PARTID_REGS
   570F  PartIdRegs ;
   571F       /* extern "C" */
   572F       // end of DSP2833x_DEV_EMU_H definition
   573F//===========================================================================
   574F// End of file.
   575F//===========================================================================
   576F 
   577F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DevEmu.h*/
   578F/*   CLOSE_FILE Include File */
   579F 
   580F             // Device Emulation Registers
   581F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_CpuTimers.h */
   582F// TI File $Revision: /main/4 $
   583F// Checkin $Date: March 20, 2007 15:33:42 $
   584F//###########################################################################
   585F//
   586F// FILE: DSP2833x_CpuTimers.h
   587F//
   588F// TITLE: DSP2833x CPU 32-bit Timers Register Definitions.
   589F//
   590F// NOTES: CpuTimer1 and CpuTimer2 are reserved for use with DSP BIOS and
   591F// other realtime operating systems.
   592F//
   593F// Do not use these two timers in your application if you ever plan
   594F// on integrating DSP-BIOS or another realtime OS.
   595F//
   596F// For this reason, comment out the code to manipulate these two timers
   597F// if using DSP-BIOS or another realtime OS.
   598F//
   599F//###########################################################################
   600F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   601F// $Release Date: August 4, 2009 $
   602F//###########################################################################
   603F#ifndef DSP2833x_CPU_TIMERS_H
   604F#define DSP2833x_CPU_TIMERS_H
   605F//---------------------------------------------------------------------------
   606F// CPU Timer Register Bit Definitions:
   607F//
   608F//
   609F// TCR: Control register bit definitions:
   610F
   611Fstruct TCR_BITS
   612F{                 // bits description
   613F  Uint16 rsvd1 : 4 ;
   614F                   // 3:0 reserved
   615F  Uint16 TSS : 1 ;
   616F                 // 4 Timer Start/Stop
   617F  Uint16 TRB : 1 ;
   618F                 // 5 Timer reload
   619F  Uint16 rsvd2 : 4 ;
   620F                   // 9:6 reserved
   621F  Uint16 SOFT : 1 ;
   622F                  // 10 Emulation modes
   623F  Uint16 FREE : 1 ;
   624F                  // 11
   625F  Uint16 rsvd3 : 2 ;
   626F                   // 12:13 reserved
   627F  Uint16 TIE : 1 ;
   628F                 // 14 Output enable
   629F  Uint16 TIF : 1 ;
   630F                 // 15 Interrupt flag
   631F} ;
   632F
   633Funion TCR_REG
   634F{
   635F  Uint16 all ;
   636F  struct TCR_BITS bit ;
   637F} ;
   638F// TPR: Pre-scale low bit definitions:
   639F
   640Fstruct TPR_BITS
   641F{                 // bits description
   642F  Uint16 TDDR : 8 ;
   643F                  // 7:0 Divide-down low
   644F  Uint16 PSC : 8 ;
   645F                 // 15:8 Prescale counter low
   646F} ;
   647F
   648Funion TPR_REG
   649F{
   650F  Uint16 all ;
   651F  struct TPR_BITS bit ;
   652F} ;
   653F// TPRH: Pre-scale high bit definitions:
   654F
   655Fstruct TPRH_BITS
   656F{                  // bits description
   657F  Uint16 TDDRH : 8 ;
   658F                   // 7:0 Divide-down high
   659F  Uint16 PSCH : 8 ;
   660F                  // 15:8 Prescale counter high
   661F} ;
   662F
   663Funion TPRH_REG
   664F{
   665F  Uint16 all ;
   666F  struct TPRH_BITS bit ;
   667F} ;
   668F// TIM, TIMH: Timer register definitions:
   669F
   670Fstruct TIM_REG
   671F{
   672F  Uint16 LSW ;
   673F  Uint16 MSW ;
   674F} ;
   675F
   676Funion TIM_GROUP
   677F{
   678F  Uint32 all ;
   679F  struct TIM_REG half ;
   680F} ;
   681F// PRD, PRDH: Period register definitions:
   682F
   683Fstruct PRD_REG
   684F{
   685F  Uint16 LSW ;
   686F  Uint16 MSW ;
   687F} ;
   688F
   689Funion PRD_GROUP
   690F{
   691F  Uint32 all ;
   692F  struct PRD_REG half ;
   693F} ;
   694F//---------------------------------------------------------------------------
   695F// CPU Timer Register File:
   696F//
   697F
   698Fstruct CPUTIMER_REGS
   699F{
   700F  union TIM_GROUP TIM ; // Timer counter register
   701F  union PRD_GROUP PRD ; // Period register
   702F  union TCR_REG TCR ; // Timer control register
   703F  Uint16 rsvd1 ; // reserved
   704F  union TPR_REG TPR ; // Timer pre-scale low
   705F  union TPRH_REG TPRH ; // Timer pre-scale high
   706F} ;
   707F//---------------------------------------------------------------------------
   708F// CPU Timer Support Variables:
   709F//
   710F
   711Fstruct CPUTIMER_VARS
   712F{
   713F  volatile struct CPUTIMER_REGS * RegsAddr ;
   714F  Uint32 InterruptCount ;
   715F  float CPUFreqInMHz ;
   716F  float PeriodInUSec ;
   717F} ;
   718F//---------------------------------------------------------------------------
   719F// Function prototypes and external definitions:
   720F//
   721F
   722Fvoid
   723F  InitCpuTimers ( void ) ;
   724F
   725Fvoid
   726T  ConfigCpuTimer (
   727F  struct CPUTIMER_VARS * Timer ,
   728F  float Freq ,
   729F  float Period ) ;
   730F
   731Fextern volatile struct CPUTIMER_REGS
   732F  CpuTimer0Regs ;
   733F
   734Fextern struct CPUTIMER_VARS
   735F  CpuTimer0 ;
   736F// CpuTimer 1 and CpuTimer2 are reserved for DSP BIOS & other RTOS. Comment out CpuTimer1 and CpuTimer2 if using DSP BIOS or other RTOS
   737F
   738Fextern volatile struct CPUTIMER_REGS
   739F  CpuTimer1Regs ;
   740F
   741Fextern volatile struct CPUTIMER_REGS
   742F  CpuTimer2Regs ;
   743F
   744Fextern struct CPUTIMER_VARS
   745F  CpuTimer1 ;
   746F
   747Fextern struct CPUTIMER_VARS
   748F  CpuTimer2 ;
   749F//---------------------------------------------------------------------------
   750F// Usefull Timer Operations:
   751F//
   752F// Start Timer:
   753F#define StartCpuTimer0( ) CpuTimer0Regs . TCR . bit . TSS = 0
   754F// Stop Timer:
   755F#define StopCpuTimer0( ) CpuTimer0Regs . TCR . bit . TSS = 1
   756F// Reload Timer With period Value:
   757F#define ReloadCpuTimer0( ) CpuTimer0Regs . TCR . bit . TRB = 1
   758F// Read 32-Bit Timer Value:
   759F#define ReadCpuTimer0Counter( ) CpuTimer0Regs . TIM . all
   760F// Read 32-Bit Period Value:
   761F#define ReadCpuTimer0Period( ) CpuTimer0Regs . PRD . all
   762F// CpuTimer 1 and CpuTimer2 are reserved for DSP BIOS & other RTOS
   763F// Do not use these two timers if you ever plan on integrating
   764F// DSP-BIOS or another realtime OS.
   765F//
   766F// For this reason, comment out the code to manipulate these two timers
   767F// if using DSP-BIOS or another realtime OS.
   768F// Start Timer:
   769F#define StartCpuTimer1( ) CpuTimer1Regs . TCR . bit . TSS = 0
   770F#define StartCpuTimer2( ) CpuTimer2Regs . TCR . bit . TSS = 0
   771F// Stop Timer:
   772F#define StopCpuTimer1( ) CpuTimer1Regs . TCR . bit . TSS = 1
   773F#define StopCpuTimer2( ) CpuTimer2Regs . TCR . bit . TSS = 1
   774F// Reload Timer With period Value:
   775F#define ReloadCpuTimer1( ) CpuTimer1Regs . TCR . bit . TRB = 1
   776F#define ReloadCpuTimer2( ) CpuTimer2Regs . TCR . bit . TRB = 1
   777F// Read 32-Bit Timer Value:
   778F#define ReadCpuTimer1Counter( ) CpuTimer1Regs . TIM . all
   779F#define ReadCpuTimer2Counter( ) CpuTimer2Regs . TIM . all
   780F// Read 32-Bit Period Value:
   781F#define ReadCpuTimer1Period( ) CpuTimer1Regs . PRD . all
   782F#define ReadCpuTimer2Period( ) CpuTimer2Regs . PRD . all
   783F       /* extern "C" */
   784F       // end of DSP2833x_CPU_TIMERS_H definition
   785F//===========================================================================
   786F// End of file.
   787F//===========================================================================
   788F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_CpuTimers.h*/
   789F/*   CLOSE_FILE Include File */
   790F 
   791F          // 32-bit CPU Timers
   792F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECan.h */
   793F// TI File $Revision: /main/2 $
   794F// Checkin $Date: May 7, 2007 16:05:39 $
   795F//###########################################################################
   796F//
   797F// FILE: DSP2833x_ECan.h
   798F//
   799F// TITLE: DSP2833x Device eCAN Register Definitions.
   800F//
   801F//###########################################################################
   802F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   803F// $Release Date: August 4, 2009 $
   804F//###########################################################################
   805F#ifndef DSP2833x_ECAN_H
   806F#define DSP2833x_ECAN_H
   807F/* --------------------------------------------------- */
   808F/* eCAN Control & Status Registers */
   809F/* ----------------------------------------------------*/
   810F/* eCAN Mailbox enable register (CANME) bit definitions */
   811F
   812Fstruct CANME_BITS
   813F{                   // bit description
   814F  Uint16 ME0 : 1 ;
   815F                 // 0 Enable Mailbox 0
   816F  Uint16 ME1 : 1 ;
   817F                 // 1 Enable Mailbox 1
   818F  Uint16 ME2 : 1 ;
   819F                 // 2 Enable Mailbox 2
   820F  Uint16 ME3 : 1 ;
   821F                 // 3 Enable Mailbox 3
   822F  Uint16 ME4 : 1 ;
   823F                 // 4 Enable Mailbox 4
   824F  Uint16 ME5 : 1 ;
   825F                 // 5 Enable Mailbox 5
   826F  Uint16 ME6 : 1 ;
   827F                 // 6 Enable Mailbox 6
   828F  Uint16 ME7 : 1 ;
   829F                 // 7 Enable Mailbox 7
   830F  Uint16 ME8 : 1 ;
   831F                 // 8 Enable Mailbox 8
   832F  Uint16 ME9 : 1 ;
   833F                 // 9 Enable Mailbox 9
   834F  Uint16 ME10 : 1 ;
   835F                  // 10 Enable Mailbox 10
   836F  Uint16 ME11 : 1 ;
   837F                  // 11 Enable Mailbox 11
   838F  Uint16 ME12 : 1 ;
   839F                  // 12 Enable Mailbox 12
   840F  Uint16 ME13 : 1 ;
   841F                  // 13 Enable Mailbox 13
   842F  Uint16 ME14 : 1 ;
   843F                  // 14 Enable Mailbox 14
   844F  Uint16 ME15 : 1 ;
   845F                  // 15 Enable Mailbox 15
   846F  Uint16 ME16 : 1 ;
   847F                  // 16 Enable Mailbox 16
   848F  Uint16 ME17 : 1 ;
   849F                  // 17 Enable Mailbox 17
   850F  Uint16 ME18 : 1 ;
   851F                  // 18 Enable Mailbox 18
   852F  Uint16 ME19 : 1 ;
   853F                  // 19 Enable Mailbox 19
   854F  Uint16 ME20 : 1 ;
   855F                  // 20 Enable Mailbox 20
   856F  Uint16 ME21 : 1 ;
   857F                  // 21 Enable Mailbox 21
   858F  Uint16 ME22 : 1 ;
   859F                  // 22 Enable Mailbox 22
   860F  Uint16 ME23 : 1 ;
   861F                  // 23 Enable Mailbox 23
   862F  Uint16 ME24 : 1 ;
   863F                  // 24 Enable Mailbox 24
   864F  Uint16 ME25 : 1 ;
   865F                  // 25 Enable Mailbox 25
   866F  Uint16 ME26 : 1 ;
   867F                  // 26 Enable Mailbox 26
   868F  Uint16 ME27 : 1 ;
   869F                  // 27 Enable Mailbox 27
   870F  Uint16 ME28 : 1 ;
   871F                  // 28 Enable Mailbox 28
   872F  Uint16 ME29 : 1 ;
   873F                  // 29 Enable Mailbox 29
   874F  Uint16 ME30 : 1 ;
   875F                  // 30 Enable Mailbox 30
   876F  Uint16 ME31 : 1 ;
   877F                  // 31 Enable Mailbox 31
   878F} ;
   879F/* Allow access to the bit fields or entire register */
   880F
   881Funion CANME_REG
   882F{
   883F  Uint32 all ;
   884F  struct CANME_BITS bit ;
   885F} ;
   886F/* eCAN Mailbox direction register (CANMD) bit definitions */
   887F
   888Fstruct CANMD_BITS
   889F{                   // bit description
   890F  Uint16 MD0 : 1 ;
   891F                 // 0 0 -> Tx 1 -> Rx
   892F  Uint16 MD1 : 1 ;
   893F                 // 1 0 -> Tx 1 -> Rx
   894F  Uint16 MD2 : 1 ;
   895F                 // 2 0 -> Tx 1 -> Rx
   896F  Uint16 MD3 : 1 ;
   897F                 // 3 0 -> Tx 1 -> Rx
   898F  Uint16 MD4 : 1 ;
   899F                 // 4 0 -> Tx 1 -> Rx
   900F  Uint16 MD5 : 1 ;
   901F                 // 5 0 -> Tx 1 -> Rx
   902F  Uint16 MD6 : 1 ;
   903F                 // 6 0 -> Tx 1 -> Rx
   904F  Uint16 MD7 : 1 ;
   905F                 // 7 0 -> Tx 1 -> Rx
   906F  Uint16 MD8 : 1 ;
   907F                 // 8 0 -> Tx 1 -> Rx
   908F  Uint16 MD9 : 1 ;
   909F                 // 9 0 -> Tx 1 -> Rx
   910F  Uint16 MD10 : 1 ;
   911F                  // 10 0 -> Tx 1 -> Rx
   912F  Uint16 MD11 : 1 ;
   913F                  // 11 0 -> Tx 1 -> Rx
   914F  Uint16 MD12 : 1 ;
   915F                  // 12 0 -> Tx 1 -> Rx
   916F  Uint16 MD13 : 1 ;
   917F                  // 13 0 -> Tx 1 -> Rx
   918F  Uint16 MD14 : 1 ;
   919F                  // 14 0 -> Tx 1 -> Rx
   920F  Uint16 MD15 : 1 ;
   921F                  // 15 0 -> Tx 1 -> Rx
   922F  Uint16 MD16 : 1 ;
   923F                  // 16 0 -> Tx 1 -> Rx
   924F  Uint16 MD17 : 1 ;
   925F                  // 17 0 -> Tx 1 -> Rx
   926F  Uint16 MD18 : 1 ;
   927F                  // 18 0 -> Tx 1 -> Rx
   928F  Uint16 MD19 : 1 ;
   929F                  // 19 0 -> Tx 1 -> Rx
   930F  Uint16 MD20 : 1 ;
   931F                  // 20 0 -> Tx 1 -> Rx
   932F  Uint16 MD21 : 1 ;
   933F                  // 21 0 -> Tx 1 -> Rx
   934F  Uint16 MD22 : 1 ;
   935F                  // 22 0 -> Tx 1 -> Rx
   936F  Uint16 MD23 : 1 ;
   937F                  // 23 0 -> Tx 1 -> Rx
   938F  Uint16 MD24 : 1 ;
   939F                  // 24 0 -> Tx 1 -> Rx
   940F  Uint16 MD25 : 1 ;
   941F                  // 25 0 -> Tx 1 -> Rx
   942F  Uint16 MD26 : 1 ;
   943F                  // 26 0 -> Tx 1 -> Rx
   944F  Uint16 MD27 : 1 ;
   945F                  // 27 0 -> Tx 1 -> Rx
   946F  Uint16 MD28 : 1 ;
   947F                  // 28 0 -> Tx 1 -> Rx
   948F  Uint16 MD29 : 1 ;
   949F                  // 29 0 -> Tx 1 -> Rx
   950F  Uint16 MD30 : 1 ;
   951F                  // 30 0 -> Tx 1 -> Rx
   952F  Uint16 MD31 : 1 ;
   953F                  // 31 0 -> Tx 1 -> Rx
   954F} ;
   955F/* Allow access to the bit fields or entire register */
   956F
   957Funion CANMD_REG
   958F{
   959F  Uint32 all ;
   960F  struct CANMD_BITS bit ;
   961F} ;
   962F/* eCAN Transmit Request Set register (CANTRS) bit definitions */
   963F
   964Fstruct CANTRS_BITS
   965F{                    // bit description
   966F  Uint16 TRS0 : 1 ;
   967F                  // 0 TRS for Mailbox 0
   968F  Uint16 TRS1 : 1 ;
   969F                  // 1 TRS for Mailbox 1
   970F  Uint16 TRS2 : 1 ;
   971F                  // 2 TRS for Mailbox 2
   972F  Uint16 TRS3 : 1 ;
   973F                  // 3 TRS for Mailbox 3
   974F  Uint16 TRS4 : 1 ;
   975F                  // 4 TRS for Mailbox 4
   976F  Uint16 TRS5 : 1 ;
   977F                  // 5 TRS for Mailbox 5
   978F  Uint16 TRS6 : 1 ;
   979F                  // 6 TRS for Mailbox 6
   980F  Uint16 TRS7 : 1 ;
   981F                  // 7 TRS for Mailbox 7
   982F  Uint16 TRS8 : 1 ;
   983F                  // 8 TRS for Mailbox 8
   984F  Uint16 TRS9 : 1 ;
   985F                  // 9 TRS for Mailbox 9
   986F  Uint16 TRS10 : 1 ;
   987F                   // 10 TRS for Mailbox 10
   988F  Uint16 TRS11 : 1 ;
   989F                   // 11 TRS for Mailbox 11
   990F  Uint16 TRS12 : 1 ;
   991F                   // 12 TRS for Mailbox 12
   992F  Uint16 TRS13 : 1 ;
   993F                   // 13 TRS for Mailbox 13
   994F  Uint16 TRS14 : 1 ;
   995F                   // 14 TRS for Mailbox 14
   996F  Uint16 TRS15 : 1 ;
   997F                   // 15 TRS for Mailbox 15
   998F  Uint16 TRS16 : 1 ;
   999F                   // 16 TRS for Mailbox 16
  1000F  Uint16 TRS17 : 1 ;
  1001F                   // 17 TRS for Mailbox 17
  1002F  Uint16 TRS18 : 1 ;
  1003F                   // 18 TRS for Mailbox 18
  1004F  Uint16 TRS19 : 1 ;
  1005F                   // 19 TRS for Mailbox 19
  1006F  Uint16 TRS20 : 1 ;
  1007F                   // 20 TRS for Mailbox 20
  1008F  Uint16 TRS21 : 1 ;
  1009F                   // 21 TRS for Mailbox 21
  1010F  Uint16 TRS22 : 1 ;
  1011F                   // 22 TRS for Mailbox 22
  1012F  Uint16 TRS23 : 1 ;
  1013F                   // 23 TRS for Mailbox 23
  1014F  Uint16 TRS24 : 1 ;
  1015F                   // 24 TRS for Mailbox 24
  1016F  Uint16 TRS25 : 1 ;
  1017F                   // 25 TRS for Mailbox 25
  1018F  Uint16 TRS26 : 1 ;
  1019F                   // 26 TRS for Mailbox 26
  1020F  Uint16 TRS27 : 1 ;
  1021F                   // 27 TRS for Mailbox 27
  1022F  Uint16 TRS28 : 1 ;
  1023F                   // 28 TRS for Mailbox 28
  1024F  Uint16 TRS29 : 1 ;
  1025F                   // 29 TRS for Mailbox 29
  1026F  Uint16 TRS30 : 1 ;
  1027F                   // 30 TRS for Mailbox 30
  1028F  Uint16 TRS31 : 1 ;
  1029F                   // 31 TRS for Mailbox 31
  1030F} ;
  1031F/* Allow access to the bit fields or entire register */
  1032F
  1033Funion CANTRS_REG
  1034F{
  1035F  Uint32 all ;
  1036F  struct CANTRS_BITS bit ;
  1037F} ;
  1038F/* eCAN Transmit Request Reset register (CANTRR) bit definitions */
  1039F
  1040Fstruct CANTRR_BITS
  1041F{                    // bit description
  1042F  Uint16 TRR0 : 1 ;
  1043F                  // 0 TRR for Mailbox 0
  1044F  Uint16 TRR1 : 1 ;
  1045F                  // 1 TRR for Mailbox 1
  1046F  Uint16 TRR2 : 1 ;
  1047F                  // 2 TRR for Mailbox 2
  1048F  Uint16 TRR3 : 1 ;
  1049F                  // 3 TRR for Mailbox 3
  1050F  Uint16 TRR4 : 1 ;
  1051F                  // 4 TRR for Mailbox 4
  1052F  Uint16 TRR5 : 1 ;
  1053F                  // 5 TRR for Mailbox 5
  1054F  Uint16 TRR6 : 1 ;
  1055F                  // 6 TRR for Mailbox 6
  1056F  Uint16 TRR7 : 1 ;
  1057F                  // 7 TRR for Mailbox 7
  1058F  Uint16 TRR8 : 1 ;
  1059F                  // 8 TRR for Mailbox 8
  1060F  Uint16 TRR9 : 1 ;
  1061F                  // 9 TRR for Mailbox 9
  1062F  Uint16 TRR10 : 1 ;
  1063F                   // 10 TRR for Mailbox 10
  1064F  Uint16 TRR11 : 1 ;
  1065F                   // 11 TRR for Mailbox 11
  1066F  Uint16 TRR12 : 1 ;
  1067F                   // 12 TRR for Mailbox 12
  1068F  Uint16 TRR13 : 1 ;
  1069F                   // 13 TRR for Mailbox 13
  1070F  Uint16 TRR14 : 1 ;
  1071F                   // 14 TRR for Mailbox 14
  1072F  Uint16 TRR15 : 1 ;
  1073F                   // 15 TRR for Mailbox 15
  1074F  Uint16 TRR16 : 1 ;
  1075F                   // 16 TRR for Mailbox 16
  1076F  Uint16 TRR17 : 1 ;
  1077F                   // 17 TRR for Mailbox 17
  1078F  Uint16 TRR18 : 1 ;
  1079F                   // 18 TRR for Mailbox 18
  1080F  Uint16 TRR19 : 1 ;
  1081F                   // 19 TRR for Mailbox 19
  1082F  Uint16 TRR20 : 1 ;
  1083F                   // 20 TRR for Mailbox 20
  1084F  Uint16 TRR21 : 1 ;
  1085F                   // 21 TRR for Mailbox 21
  1086F  Uint16 TRR22 : 1 ;
  1087F                   // 22 TRR for Mailbox 22
  1088F  Uint16 TRR23 : 1 ;
  1089F                   // 23 TRR for Mailbox 23
  1090F  Uint16 TRR24 : 1 ;
  1091F                   // 24 TRR for Mailbox 24
  1092F  Uint16 TRR25 : 1 ;
  1093F                   // 25 TRR for Mailbox 25
  1094F  Uint16 TRR26 : 1 ;
  1095F                   // 26 TRR for Mailbox 26
  1096F  Uint16 TRR27 : 1 ;
  1097F                   // 27 TRR for Mailbox 27
  1098F  Uint16 TRR28 : 1 ;
  1099F                   // 28 TRR for Mailbox 28
  1100F  Uint16 TRR29 : 1 ;
  1101F                   // 29 TRR for Mailbox 29
  1102F  Uint16 TRR30 : 1 ;
  1103F                   // 30 TRR for Mailbox 30
  1104F  Uint16 TRR31 : 1 ;
  1105F                   // 31 TRR for Mailbox 31
  1106F} ;
  1107F/* Allow access to the bit fields or entire register */
  1108F
  1109Funion CANTRR_REG
  1110F{
  1111F  Uint32 all ;
  1112F  struct CANTRR_BITS bit ;
  1113F} ;
  1114F/* eCAN Transmit Acknowledge register (CANTA) bit definitions */
  1115F
  1116Fstruct CANTA_BITS
  1117F{                   // bit description
  1118F  Uint16 TA0 : 1 ;
  1119F                 // 0 TA for Mailbox 0
  1120F  Uint16 TA1 : 1 ;
  1121F                 // 1 TA for Mailbox 1
  1122F  Uint16 TA2 : 1 ;
  1123F                 // 2 TA for Mailbox 2
  1124F  Uint16 TA3 : 1 ;
  1125F                 // 3 TA for Mailbox 3
  1126F  Uint16 TA4 : 1 ;
  1127F                 // 4 TA for Mailbox 4
  1128F  Uint16 TA5 : 1 ;
  1129F                 // 5 TA for Mailbox 5
  1130F  Uint16 TA6 : 1 ;
  1131F                 // 6 TA for Mailbox 6
  1132F  Uint16 TA7 : 1 ;
  1133F                 // 7 TA for Mailbox 7
  1134F  Uint16 TA8 : 1 ;
  1135F                 // 8 TA for Mailbox 8
  1136F  Uint16 TA9 : 1 ;
  1137F                 // 9 TA for Mailbox 9
  1138F  Uint16 TA10 : 1 ;
  1139F                  // 10 TA for Mailbox 10
  1140F  Uint16 TA11 : 1 ;
  1141F                  // 11 TA for Mailbox 11
  1142F  Uint16 TA12 : 1 ;
  1143F                  // 12 TA for Mailbox 12
  1144F  Uint16 TA13 : 1 ;
  1145F                  // 13 TA for Mailbox 13
  1146F  Uint16 TA14 : 1 ;
  1147F                  // 14 TA for Mailbox 14
  1148F  Uint16 TA15 : 1 ;
  1149F                  // 15 TA for Mailbox 15
  1150F  Uint16 TA16 : 1 ;
  1151F                  // 16 TA for Mailbox 16
  1152F  Uint16 TA17 : 1 ;
  1153F                  // 17 TA for Mailbox 17
  1154F  Uint16 TA18 : 1 ;
  1155F                  // 18 TA for Mailbox 18
  1156F  Uint16 TA19 : 1 ;
  1157F                  // 19 TA for Mailbox 19
  1158F  Uint16 TA20 : 1 ;
  1159F                  // 20 TA for Mailbox 20
  1160F  Uint16 TA21 : 1 ;
  1161F                  // 21 TA for Mailbox 21
  1162F  Uint16 TA22 : 1 ;
  1163F                  // 22 TA for Mailbox 22
  1164F  Uint16 TA23 : 1 ;
  1165F                  // 23 TA for Mailbox 23
  1166F  Uint16 TA24 : 1 ;
  1167F                  // 24 TA for Mailbox 24
  1168F  Uint16 TA25 : 1 ;
  1169F                  // 25 TA for Mailbox 25
  1170F  Uint16 TA26 : 1 ;
  1171F                  // 26 TA for Mailbox 26
  1172F  Uint16 TA27 : 1 ;
  1173F                  // 27 TA for Mailbox 27
  1174F  Uint16 TA28 : 1 ;
  1175F                  // 28 TA for Mailbox 28
  1176F  Uint16 TA29 : 1 ;
  1177F                  // 29 TA for Mailbox 29
  1178F  Uint16 TA30 : 1 ;
  1179F                  // 30 TA for Mailbox 30
  1180F  Uint16 TA31 : 1 ;
  1181F                  // 31 TA for Mailbox 31
  1182F} ;
  1183F/* Allow access to the bit fields or entire register */
  1184F
  1185Funion CANTA_REG
  1186F{
  1187F  Uint32 all ;
  1188F  struct CANTA_BITS bit ;
  1189F} ;
  1190F/* eCAN Transmit Abort Acknowledge register (CANAA) bit definitions */
  1191F
  1192Fstruct CANAA_BITS
  1193F{                   // bit description
  1194F  Uint16 AA0 : 1 ;
  1195F                 // 0 AA for Mailbox 0
  1196F  Uint16 AA1 : 1 ;
  1197F                 // 1 AA for Mailbox 1
  1198F  Uint16 AA2 : 1 ;
  1199F                 // 2 AA for Mailbox 2
  1200F  Uint16 AA3 : 1 ;
  1201F                 // 3 AA for Mailbox 3
  1202F  Uint16 AA4 : 1 ;
  1203F                 // 4 AA for Mailbox 4
  1204F  Uint16 AA5 : 1 ;
  1205F                 // 5 AA for Mailbox 5
  1206F  Uint16 AA6 : 1 ;
  1207F                 // 6 AA for Mailbox 6
  1208F  Uint16 AA7 : 1 ;
  1209F                 // 7 AA for Mailbox 7
  1210F  Uint16 AA8 : 1 ;
  1211F                 // 8 AA for Mailbox 8
  1212F  Uint16 AA9 : 1 ;
  1213F                 // 9 AA for Mailbox 9
  1214F  Uint16 AA10 : 1 ;
  1215F                  // 10 AA for Mailbox 10
  1216F  Uint16 AA11 : 1 ;
  1217F                  // 11 AA for Mailbox 11
  1218F  Uint16 AA12 : 1 ;
  1219F                  // 12 AA for Mailbox 12
  1220F  Uint16 AA13 : 1 ;
  1221F                  // 13 AA for Mailbox 13
  1222F  Uint16 AA14 : 1 ;
  1223F                  // 14 AA for Mailbox 14
  1224F  Uint16 AA15 : 1 ;
  1225F                  // 15 AA for Mailbox 15
  1226F  Uint16 AA16 : 1 ;
  1227F                  // 16 AA for Mailbox 16
  1228F  Uint16 AA17 : 1 ;
  1229F                  // 17 AA for Mailbox 17
  1230F  Uint16 AA18 : 1 ;
  1231F                  // 18 AA for Mailbox 18
  1232F  Uint16 AA19 : 1 ;
  1233F                  // 19 AA for Mailbox 19
  1234F  Uint16 AA20 : 1 ;
  1235F                  // 20 AA for Mailbox 20
  1236F  Uint16 AA21 : 1 ;
  1237F                  // 21 AA for Mailbox 21
  1238F  Uint16 AA22 : 1 ;
  1239F                  // 22 AA for Mailbox 22
  1240F  Uint16 AA23 : 1 ;
  1241F                  // 23 AA for Mailbox 23
  1242F  Uint16 AA24 : 1 ;
  1243F                  // 24 AA for Mailbox 24
  1244F  Uint16 AA25 : 1 ;
  1245F                  // 25 AA for Mailbox 25
  1246F  Uint16 AA26 : 1 ;
  1247F                  // 26 AA for Mailbox 26
  1248F  Uint16 AA27 : 1 ;
  1249F                  // 27 AA for Mailbox 27
  1250F  Uint16 AA28 : 1 ;
  1251F                  // 28 AA for Mailbox 28
  1252F  Uint16 AA29 : 1 ;
  1253F                  // 29 AA for Mailbox 29
  1254F  Uint16 AA30 : 1 ;
  1255F                  // 30 AA for Mailbox 30
  1256F  Uint16 AA31 : 1 ;
  1257F                  // 31 AA for Mailbox 31
  1258F} ;
  1259F/* Allow access to the bit fields or entire register */
  1260F
  1261Funion CANAA_REG
  1262F{
  1263F  Uint32 all ;
  1264F  struct CANAA_BITS bit ;
  1265F} ;
  1266F/* eCAN Received Message Pending register (CANRMP) bit definitions */
  1267F
  1268Fstruct CANRMP_BITS
  1269F{                    // bit description
  1270F  Uint16 RMP0 : 1 ;
  1271F                  // 0 RMP for Mailbox 0
  1272F  Uint16 RMP1 : 1 ;
  1273F                  // 1 RMP for Mailbox 1
  1274F  Uint16 RMP2 : 1 ;
  1275F                  // 2 RMP for Mailbox 2
  1276F  Uint16 RMP3 : 1 ;
  1277F                  // 3 RMP for Mailbox 3
  1278F  Uint16 RMP4 : 1 ;
  1279F                  // 4 RMP for Mailbox 4
  1280F  Uint16 RMP5 : 1 ;
  1281F                  // 5 RMP for Mailbox 5
  1282F  Uint16 RMP6 : 1 ;
  1283F                  // 6 RMP for Mailbox 6
  1284F  Uint16 RMP7 : 1 ;
  1285F                  // 7 RMP for Mailbox 7
  1286F  Uint16 RMP8 : 1 ;
  1287F                  // 8 RMP for Mailbox 8
  1288F  Uint16 RMP9 : 1 ;
  1289F                  // 9 RMP for Mailbox 9
  1290F  Uint16 RMP10 : 1 ;
  1291F                   // 10 RMP for Mailbox 10
  1292F  Uint16 RMP11 : 1 ;
  1293F                   // 11 RMP for Mailbox 11
  1294F  Uint16 RMP12 : 1 ;
  1295F                   // 12 RMP for Mailbox 12
  1296F  Uint16 RMP13 : 1 ;
  1297F                   // 13 RMP for Mailbox 13
  1298F  Uint16 RMP14 : 1 ;
  1299F                   // 14 RMP for Mailbox 14
  1300F  Uint16 RMP15 : 1 ;
  1301F                   // 15 RMP for Mailbox 15
  1302F  Uint16 RMP16 : 1 ;
  1303F                   // 16 RMP for Mailbox 16
  1304F  Uint16 RMP17 : 1 ;
  1305F                   // 17 RMP for Mailbox 17
  1306F  Uint16 RMP18 : 1 ;
  1307F                   // 18 RMP for Mailbox 18
  1308F  Uint16 RMP19 : 1 ;
  1309F                   // 19 RMP for Mailbox 19
  1310F  Uint16 RMP20 : 1 ;
  1311F                   // 20 RMP for Mailbox 20
  1312F  Uint16 RMP21 : 1 ;
  1313F                   // 21 RMP for Mailbox 21
  1314F  Uint16 RMP22 : 1 ;
  1315F                   // 22 RMP for Mailbox 22
  1316F  Uint16 RMP23 : 1 ;
  1317F                   // 23 RMP for Mailbox 23
  1318F  Uint16 RMP24 : 1 ;
  1319F                   // 24 RMP for Mailbox 24
  1320F  Uint16 RMP25 : 1 ;
  1321F                   // 25 RMP for Mailbox 25
  1322F  Uint16 RMP26 : 1 ;
  1323F                   // 26 RMP for Mailbox 26
  1324F  Uint16 RMP27 : 1 ;
  1325F                   // 27 RMP for Mailbox 27
  1326F  Uint16 RMP28 : 1 ;
  1327F                   // 28 RMP for Mailbox 28
  1328F  Uint16 RMP29 : 1 ;
  1329F                   // 29 RMP for Mailbox 29
  1330F  Uint16 RMP30 : 1 ;
  1331F                   // 30 RMP for Mailbox 30
  1332F  Uint16 RMP31 : 1 ;
  1333F                   // 31 RMP for Mailbox 31
  1334F} ;
  1335F/* Allow access to the bit fields or entire register */
  1336F
  1337Funion CANRMP_REG
  1338F{
  1339F  Uint32 all ;
  1340F  struct CANRMP_BITS bit ;
  1341F} ;
  1342F/* eCAN Received Message Lost register (CANRML) bit definitions */
  1343F
  1344Fstruct CANRML_BITS
  1345F{                    // bit description
  1346F  Uint16 RML0 : 1 ;
  1347F                  // 0 RML for Mailbox 0
  1348F  Uint16 RML1 : 1 ;
  1349F                  // 1 RML for Mailbox 1
  1350F  Uint16 RML2 : 1 ;
  1351F                  // 2 RML for Mailbox 2
  1352F  Uint16 RML3 : 1 ;
  1353F                  // 3 RML for Mailbox 3
  1354F  Uint16 RML4 : 1 ;
  1355F                  // 4 RML for Mailbox 4
  1356F  Uint16 RML5 : 1 ;
  1357F                  // 5 RML for Mailbox 5
  1358F  Uint16 RML6 : 1 ;
  1359F                  // 6 RML for Mailbox 6
  1360F  Uint16 RML7 : 1 ;
  1361F                  // 7 RML for Mailbox 7
  1362F  Uint16 RML8 : 1 ;
  1363F                  // 8 RML for Mailbox 8
  1364F  Uint16 RML9 : 1 ;
  1365F                  // 9 RML for Mailbox 9
  1366F  Uint16 RML10 : 1 ;
  1367F                   // 10 RML for Mailbox 10
  1368F  Uint16 RML11 : 1 ;
  1369F                   // 11 RML for Mailbox 11
  1370F  Uint16 RML12 : 1 ;
  1371F                   // 12 RML for Mailbox 12
  1372F  Uint16 RML13 : 1 ;
  1373F                   // 13 RML for Mailbox 13
  1374F  Uint16 RML14 : 1 ;
  1375F                   // 14 RML for Mailbox 14
  1376F  Uint16 RML15 : 1 ;
  1377F                   // 15 RML for Mailbox 15
  1378F  Uint16 RML16 : 1 ;
  1379F                   // 16 RML for Mailbox 16
  1380F  Uint16 RML17 : 1 ;
  1381F                   // 17 RML for Mailbox 17
  1382F  Uint16 RML18 : 1 ;
  1383F                   // 18 RML for Mailbox 18
  1384F  Uint16 RML19 : 1 ;
  1385F                   // 19 RML for Mailbox 19
  1386F  Uint16 RML20 : 1 ;
  1387F                   // 20 RML for Mailbox 20
  1388F  Uint16 RML21 : 1 ;
  1389F                   // 21 RML for Mailbox 21
  1390F  Uint16 RML22 : 1 ;
  1391F                   // 22 RML for Mailbox 22
  1392F  Uint16 RML23 : 1 ;
  1393F                   // 23 RML for Mailbox 23
  1394F  Uint16 RML24 : 1 ;
  1395F                   // 24 RML for Mailbox 24
  1396F  Uint16 RML25 : 1 ;
  1397F                   // 25 RML for Mailbox 25
  1398F  Uint16 RML26 : 1 ;
  1399F                   // 26 RML for Mailbox 26
  1400F  Uint16 RML27 : 1 ;
  1401F                   // 27 RML for Mailbox 27
  1402F  Uint16 RML28 : 1 ;
  1403F                   // 28 RML for Mailbox 28
  1404F  Uint16 RML29 : 1 ;
  1405F                   // 29 RML for Mailbox 29
  1406F  Uint16 RML30 : 1 ;
  1407F                   // 30 RML for Mailbox 30
  1408F  Uint16 RML31 : 1 ;
  1409F                   // 31 RML for Mailbox 31
  1410F} ;
  1411F/* Allow access to the bit fields or entire register */
  1412F
  1413Funion CANRML_REG
  1414F{
  1415F  Uint32 all ;
  1416F  struct CANRML_BITS bit ;
  1417F} ;
  1418F/* eCAN Remote Frame Pending register (CANRFP) bit definitions */
  1419F
  1420Fstruct CANRFP_BITS
  1421F{                    // bit description
  1422F  Uint16 RFP0 : 1 ;
  1423F                  // 0 RFP for Mailbox 0
  1424F  Uint16 RFP1 : 1 ;
  1425F                  // 1 RFP for Mailbox 1
  1426F  Uint16 RFP2 : 1 ;
  1427F                  // 2 RFP for Mailbox 2
  1428F  Uint16 RFP3 : 1 ;
  1429F                  // 3 RFP for Mailbox 3
  1430F  Uint16 RFP4 : 1 ;
  1431F                  // 4 RFP for Mailbox 4
  1432F  Uint16 RFP5 : 1 ;
  1433F                  // 5 RFP for Mailbox 5
  1434F  Uint16 RFP6 : 1 ;
  1435F                  // 6 RFP for Mailbox 6
  1436F  Uint16 RFP7 : 1 ;
  1437F                  // 7 RFP for Mailbox 7
  1438F  Uint16 RFP8 : 1 ;
  1439F                  // 8 RFP for Mailbox 8
  1440F  Uint16 RFP9 : 1 ;
  1441F                  // 9 RFP for Mailbox 9
  1442F  Uint16 RFP10 : 1 ;
  1443F                   // 10 RFP for Mailbox 10
  1444F  Uint16 RFP11 : 1 ;
  1445F                   // 11 RFP for Mailbox 11
  1446F  Uint16 RFP12 : 1 ;
  1447F                   // 12 RFP for Mailbox 12
  1448F  Uint16 RFP13 : 1 ;
  1449F                   // 13 RFP for Mailbox 13
  1450F  Uint16 RFP14 : 1 ;
  1451F                   // 14 RFP for Mailbox 14
  1452F  Uint16 RFP15 : 1 ;
  1453F                   // 15 RFP for Mailbox 15
  1454F  Uint16 RFP16 : 1 ;
  1455F                   // 16 RFP for Mailbox 16
  1456F  Uint16 RFP17 : 1 ;
  1457F                   // 17 RFP for Mailbox 17
  1458F  Uint16 RFP18 : 1 ;
  1459F                   // 18 RFP for Mailbox 18
  1460F  Uint16 RFP19 : 1 ;
  1461F                   // 19 RFP for Mailbox 19
  1462F  Uint16 RFP20 : 1 ;
  1463F                   // 20 RFP for Mailbox 20
  1464F  Uint16 RFP21 : 1 ;
  1465F                   // 21 RFP for Mailbox 21
  1466F  Uint16 RFP22 : 1 ;
  1467F                   // 22 RFP for Mailbox 22
  1468F  Uint16 RFP23 : 1 ;
  1469F                   // 23 RFP for Mailbox 23
  1470F  Uint16 RFP24 : 1 ;
  1471F                   // 24 RFP for Mailbox 24
  1472F  Uint16 RFP25 : 1 ;
  1473F                   // 25 RFP for Mailbox 25
  1474F  Uint16 RFP26 : 1 ;
  1475F                   // 26 RFP for Mailbox 26
  1476F  Uint16 RFP27 : 1 ;
  1477F                   // 27 RFP for Mailbox 27
  1478F  Uint16 RFP28 : 1 ;
  1479F                   // 28 RFP for Mailbox 28
  1480F  Uint16 RFP29 : 1 ;
  1481F                   // 29 RFP for Mailbox 29
  1482F  Uint16 RFP30 : 1 ;
  1483F                   // 30 RFP for Mailbox 30
  1484F  Uint16 RFP31 : 1 ;
  1485F                   // 31 RFP for Mailbox 31
  1486F} ;
  1487F/* Allow access to the bit fields or entire register */
  1488F
  1489Funion CANRFP_REG
  1490F{
  1491F  Uint32 all ;
  1492F  struct CANRFP_BITS bit ;
  1493F} ;
  1494F/* eCAN Global Acceptance Mask register (CANGAM) bit definitions */
  1495F
  1496Fstruct CANGAM_BITS
  1497F{                    // bits description
  1498F  Uint16 GAM150 : 16 ;
  1499F                     // 15:0 Global acceptance mask bits 0-15
  1500F  Uint16 GAM2816 : 13 ;
  1501F                      // 28:16 Global acceptance mask bits 16-28
  1502F  Uint16 rsvd : 2 ;
  1503F                  // 30:29 reserved
  1504F  Uint16 AMI : 1 ;
  1505F                 // 31 AMI bit
  1506F} ;
  1507F/* Allow access to the bit fields or entire register */
  1508F
  1509Funion CANGAM_REG
  1510F{
  1511F  Uint32 all ;
  1512F  struct CANGAM_BITS bit ;
  1513F} ;
  1514F/* eCAN Master Control register (CANMC) bit definitions */
  1515F
  1516Fstruct CANMC_BITS
  1517F{                   // bits description
  1518F  Uint16 MBNR : 5 ;
  1519F                  // 4:0 MBX #for CDR bit
  1520F  Uint16 SRES : 1 ;
  1521F                  // 5 Soft reset
  1522F  Uint16 STM : 1 ;
  1523F                 // 6 Self-test mode
  1524F  Uint16 ABO : 1 ;
  1525F                 // 7 Auto bus-on
  1526F  Uint16 CDR : 1 ;
  1527F                 // 8 Change data request
  1528F  Uint16 WUBA : 1 ;
  1529F                  // 9 Wake-up on bus activity
  1530F  Uint16 DBO : 1 ;
  1531F                 // 10 Data-byte order
  1532F  Uint16 PDR : 1 ;
  1533F                 // 11 Power-down mode request
  1534F  Uint16 CCR : 1 ;
  1535F                 // 12 Change configuration request
  1536F  Uint16 SCB : 1 ;
  1537F                 // 13 SCC compatibility bit
  1538F  Uint16 TCC : 1 ;
  1539F                 // 14 TSC MSB clear bit
  1540F  Uint16 MBCC : 1 ;
  1541F                  // 15 TSC clear bit thru mailbox 16
  1542F  Uint16 SUSP : 1 ;
  1543F                  // 16 SUSPEND free/soft bit
  1544F  Uint16 rsvd : 15 ;
  1545F                   // 31:17 reserved
  1546F} ;
  1547F/* Allow access to the bit fields or entire register */
  1548F
  1549Funion CANMC_REG
  1550F{
  1551F  Uint32 all ;
  1552F  struct CANMC_BITS bit ;
  1553F} ;
  1554F/* eCAN Bit -timing configuration register (CANBTC) bit definitions */
  1555F
  1556Fstruct CANBTC_BITS
  1557F{                    // bits description
  1558F  Uint16 TSEG2REG : 3 ;
  1559F                      // 2:0 TSEG2 register value
  1560F  Uint16 TSEG1REG : 4 ;
  1561F                      // 6:3 TSEG1 register value
  1562F  Uint16 SAM : 1 ;
  1563F                 // 7 Sample-point setting
  1564F  Uint16 SJWREG : 2 ;
  1565F                    // 9:8 Synchroniztion Jump Width register value
  1566F  Uint16 rsvd1 : 6 ;
  1567F                   // 15:10 reserved
  1568F  Uint16 BRPREG : 8 ;
  1569F                    // 23:16 Baudrate prescaler register value
  1570F  Uint16 rsvd2 : 8 ;
  1571F                   // 31:24 reserved
  1572F} ;
  1573F/* Allow access to the bit fields or entire register */
  1574F
  1575Funion CANBTC_REG
  1576F{
  1577F  Uint32 all ;
  1578F  struct CANBTC_BITS bit ;
  1579F} ;
  1580F/* eCAN Error & Status register (CANES) bit definitions */
  1581F
  1582Fstruct CANES_BITS
  1583F{                   // bits description
  1584F  Uint16 TM : 1 ;
  1585F                // 0 Transmit Mode
  1586F  Uint16 RM : 1 ;
  1587F                // 1 Receive Mode
  1588F  Uint16 rsvd1 : 1 ;
  1589F                   // 2 reserved
  1590F  Uint16 PDA : 1 ;
  1591F                 // 3 Power-down acknowledge
  1592F  Uint16 CCE : 1 ;
  1593F                 // 4 Change Configuration Enable
  1594F  Uint16 SMA : 1 ;
  1595F                 // 5 Suspend Mode Acknowledge
  1596F  Uint16 rsvd2 : 10 ;
  1597F                    // 15:6 reserved
  1598F  Uint16 EW : 1 ;
  1599F                // 16 Warning status
  1600F  Uint16 EP : 1 ;
  1601F                // 17 Error Passive status
  1602F  Uint16 BO : 1 ;
  1603F                // 18 Bus-off status
  1604F  Uint16 ACKE : 1 ;
  1605F                  // 19 Acknowledge error
  1606F  Uint16 SE : 1 ;
  1607F                // 20 Stuff error
  1608F  Uint16 CRCE : 1 ;
  1609F                  // 21 CRC error
  1610F  Uint16 SA1 : 1 ;
  1611F                 // 22 Stuck at Dominant error
  1612F  Uint16 BE : 1 ;
  1613F                // 23 Bit error
  1614F  Uint16 FE : 1 ;
  1615F                // 24 Framing error
  1616F  Uint16 rsvd3 : 7 ;
  1617F                   // 31:25 reserved
  1618F} ;
  1619F/* Allow access to the bit fields or entire register */
  1620F
  1621Funion CANES_REG
  1622F{
  1623F  Uint32 all ;
  1624F  struct CANES_BITS bit ;
  1625F} ;
  1626F/* eCAN Transmit Error Counter register (CANTEC) bit definitions */
  1627F
  1628Fstruct CANTEC_BITS
  1629F{                    // bits description
  1630F  Uint16 TEC : 8 ;
  1631F                 // 7:0 TEC
  1632F  Uint16 rsvd1 : 8 ;
  1633F                   // 15:8 reserved
  1634F  Uint16 rsvd2 : 16 ;
  1635F                    // 31:16 reserved
  1636F} ;
  1637F/* Allow access to the bit fields or entire register */
  1638F
  1639Funion CANTEC_REG
  1640F{
  1641F  Uint32 all ;
  1642F  struct CANTEC_BITS bit ;
  1643F} ;
  1644F/* eCAN Receive Error Counter register (CANREC) bit definitions */
  1645F
  1646Fstruct CANREC_BITS
  1647F{                    // bits description
  1648F  Uint16 REC : 8 ;
  1649F                 // 7:0 REC
  1650F  Uint16 rsvd1 : 8 ;
  1651F                   // 15:8 reserved
  1652F  Uint16 rsvd2 : 16 ;
  1653F                    // 31:16 reserved
  1654F} ;
  1655F/* Allow access to the bit fields or entire register */
  1656F
  1657Funion CANREC_REG
  1658F{
  1659F  Uint32 all ;
  1660F  struct CANREC_BITS bit ;
  1661F} ;
  1662F/* eCAN Global Interrupt Flag 0 (CANGIF0) bit definitions */
  1663F
  1664Fstruct CANGIF0_BITS
  1665F{                     // bits description
  1666F  Uint16 MIV0 : 5 ;
  1667F                  // 4:0 Mailbox Interrupt Vector
  1668F  Uint16 rsvd1 : 3 ;
  1669F                   // 7:5 reserved
  1670F  Uint16 WLIF0 : 1 ;
  1671F                   // 8 Warning level interrupt flag
  1672F  Uint16 EPIF0 : 1 ;
  1673F                   // 9 Error-passive interrupt flag
  1674F  Uint16 BOIF0 : 1 ;
  1675F                   // 10 Bus-off interrupt flag
  1676F  Uint16 RMLIF0 : 1 ;
  1677F                    // 11 Received message lost interrupt flag
  1678F  Uint16 WUIF0 : 1 ;
  1679F                   // 12 Wakeup interrupt flag
  1680F  Uint16 WDIF0 : 1 ;
  1681F                   // 13 Write denied interrupt flag
  1682F  Uint16 AAIF0 : 1 ;
  1683F                   // 14 Abort Ack interrupt flag
  1684F  Uint16 GMIF0 : 1 ;
  1685F                   // 15 Global MBX interrupt flag
  1686F  Uint16 TCOF0 : 1 ;
  1687F                   // 16 TSC Overflow flag
  1688F  Uint16 MTOF0 : 1 ;
  1689F                   // 17 Mailbox Timeout flag
  1690F  Uint16 rsvd2 : 14 ;
  1691F                    // 31:18 reserved
  1692F} ;
  1693F/* Allow access to the bit fields or entire register */
  1694F
  1695Funion CANGIF0_REG
  1696F{
  1697F  Uint32 all ;
  1698F  struct CANGIF0_BITS bit ;
  1699F} ;
  1700F/* eCAN Global Interrupt Mask register (CANGIM) bit definitions */
  1701F
  1702Fstruct CANGIM_BITS
  1703F{                    // bits description
  1704F  Uint16 I0EN : 1 ;
  1705F                  // 0 Interrupt 0 enable
  1706F  Uint16 I1EN : 1 ;
  1707F                  // 1 Interrupt 1 enable
  1708F  Uint16 GIL : 1 ;
  1709F                 // 2 Global Interrupt Level
  1710F  Uint16 rsvd1 : 5 ;
  1711F                   // 7:3 reserved
  1712F  Uint16 WLIM : 1 ;
  1713F                  // 8 Warning level interrupt mask
  1714F  Uint16 EPIM : 1 ;
  1715F                  // 9 Error-passive interrupt mask
  1716F  Uint16 BOIM : 1 ;
  1717F                  // 10 Bus-off interrupt mask
  1718F  Uint16 RMLIM : 1 ;
  1719F                   // 11 Received message lost interrupt mask
  1720F  Uint16 WUIM : 1 ;
  1721F                  // 12 Wakeup interrupt mask
  1722F  Uint16 WDIM : 1 ;
  1723F                  // 13 Write denied interrupt mask
  1724F  Uint16 AAIM : 1 ;
  1725F                  // 14 Abort Ack interrupt mask
  1726F  Uint16 rsvd2 : 1 ;
  1727F                   // 15 reserved
  1728F  Uint16 TCOM : 1 ;
  1729F                  // 16 TSC overflow interrupt mask
  1730F  Uint16 MTOM : 1 ;
  1731F                  // 17 MBX Timeout interrupt mask
  1732F  Uint16 rsvd3 : 14 ;
  1733F                    // 31:18 reserved
  1734F} ;
  1735F/* Allow access to the bit fields or entire register */
  1736F
  1737Funion CANGIM_REG
  1738F{
  1739F  Uint32 all ;
  1740F  struct CANGIM_BITS bit ;
  1741F} ;
  1742F/* eCAN Global Interrupt Flag 1 (eCANGIF1) bit definitions */
  1743F
  1744Fstruct CANGIF1_BITS
  1745F{                     // bits description
  1746F  Uint16 MIV1 : 5 ;
  1747F                  // 4:0 Mailbox Interrupt Vector
  1748F  Uint16 rsvd1 : 3 ;
  1749F                   // 7:5 reserved
  1750F  Uint16 WLIF1 : 1 ;
  1751F                   // 8 Warning level interrupt flag
  1752F  Uint16 EPIF1 : 1 ;
  1753F                   // 9 Error-passive interrupt flag
  1754F  Uint16 BOIF1 : 1 ;
  1755F                   // 10 Bus-off interrupt flag
  1756F  Uint16 RMLIF1 : 1 ;
  1757F                    // 11 Received message lost interrupt flag
  1758F  Uint16 WUIF1 : 1 ;
  1759F                   // 12 Wakeup interrupt flag
  1760F  Uint16 WDIF1 : 1 ;
  1761F                   // 13 Write denied interrupt flag
  1762F  Uint16 AAIF1 : 1 ;
  1763F                   // 14 Abort Ack interrupt flag
  1764F  Uint16 GMIF1 : 1 ;
  1765F                   // 15 Global MBX interrupt flag
  1766F  Uint16 TCOF1 : 1 ;
  1767F                   // 16 TSC Overflow flag
  1768F  Uint16 MTOF1 : 1 ;
  1769F                   // 17 Mailbox Timeout flag
  1770F  Uint16 rsvd2 : 14 ;
  1771F                    // 31:18 reserved
  1772F} ;
  1773F/* Allow access to the bit fields or entire register */
  1774F
  1775Funion CANGIF1_REG
  1776F{
  1777F  Uint32 all ;
  1778F  struct CANGIF1_BITS bit ;
  1779F} ;
  1780F/* eCAN Mailbox Interrupt Mask register (CANMIM) bit definitions */
  1781F
  1782Fstruct CANMIM_BITS
  1783F{                    // bit description
  1784F  Uint16 MIM0 : 1 ;
  1785F                  // 0 MIM for Mailbox 0
  1786F  Uint16 MIM1 : 1 ;
  1787F                  // 1 MIM for Mailbox 1
  1788F  Uint16 MIM2 : 1 ;
  1789F                  // 2 MIM for Mailbox 2
  1790F  Uint16 MIM3 : 1 ;
  1791F                  // 3 MIM for Mailbox 3
  1792F  Uint16 MIM4 : 1 ;
  1793F                  // 4 MIM for Mailbox 4
  1794F  Uint16 MIM5 : 1 ;
  1795F                  // 5 MIM for Mailbox 5
  1796F  Uint16 MIM6 : 1 ;
  1797F                  // 6 MIM for Mailbox 6
  1798F  Uint16 MIM7 : 1 ;
  1799F                  // 7 MIM for Mailbox 7
  1800F  Uint16 MIM8 : 1 ;
  1801F                  // 8 MIM for Mailbox 8
  1802F  Uint16 MIM9 : 1 ;
  1803F                  // 9 MIM for Mailbox 9
  1804F  Uint16 MIM10 : 1 ;
  1805F                   // 10 MIM for Mailbox 10
  1806F  Uint16 MIM11 : 1 ;
  1807F                   // 11 MIM for Mailbox 11
  1808F  Uint16 MIM12 : 1 ;
  1809F                   // 12 MIM for Mailbox 12
  1810F  Uint16 MIM13 : 1 ;
  1811F                   // 13 MIM for Mailbox 13
  1812F  Uint16 MIM14 : 1 ;
  1813F                   // 14 MIM for Mailbox 14
  1814F  Uint16 MIM15 : 1 ;
  1815F                   // 15 MIM for Mailbox 15
  1816F  Uint16 MIM16 : 1 ;
  1817F                   // 16 MIM for Mailbox 16
  1818F  Uint16 MIM17 : 1 ;
  1819F                   // 17 MIM for Mailbox 17
  1820F  Uint16 MIM18 : 1 ;
  1821F                   // 18 MIM for Mailbox 18
  1822F  Uint16 MIM19 : 1 ;
  1823F                   // 19 MIM for Mailbox 19
  1824F  Uint16 MIM20 : 1 ;
  1825F                   // 20 MIM for Mailbox 20
  1826F  Uint16 MIM21 : 1 ;
  1827F                   // 21 MIM for Mailbox 21
  1828F  Uint16 MIM22 : 1 ;
  1829F                   // 22 MIM for Mailbox 22
  1830F  Uint16 MIM23 : 1 ;
  1831F                   // 23 MIM for Mailbox 23
  1832F  Uint16 MIM24 : 1 ;
  1833F                   // 24 MIM for Mailbox 24
  1834F  Uint16 MIM25 : 1 ;
  1835F                   // 25 MIM for Mailbox 25
  1836F  Uint16 MIM26 : 1 ;
  1837F                   // 26 MIM for Mailbox 26
  1838F  Uint16 MIM27 : 1 ;
  1839F                   // 27 MIM for Mailbox 27
  1840F  Uint16 MIM28 : 1 ;
  1841F                   // 28 MIM for Mailbox 28
  1842F  Uint16 MIM29 : 1 ;
  1843F                   // 29 MIM for Mailbox 29
  1844F  Uint16 MIM30 : 1 ;
  1845F                   // 30 MIM for Mailbox 30
  1846F  Uint16 MIM31 : 1 ;
  1847F                   // 31 MIM for Mailbox 31
  1848F} ;
  1849F/* Allow access to the bit fields or entire register */
  1850F
  1851Funion CANMIM_REG
  1852F{
  1853F  Uint32 all ;
  1854F  struct CANMIM_BITS bit ;
  1855F} ;
  1856F/* eCAN Mailbox Interrupt Level register (CANMIL) bit definitions */
  1857F
  1858Fstruct CANMIL_BITS
  1859F{                    // bit description
  1860F  Uint16 MIL0 : 1 ;
  1861F                  // 0 0 -> Int 9.5 1 -> Int 9.6
  1862F  Uint16 MIL1 : 1 ;
  1863F                  // 1 0 -> Int 9.5 1 -> Int 9.6
  1864F  Uint16 MIL2 : 1 ;
  1865F                  // 2 0 -> Int 9.5 1 -> Int 9.6
  1866F  Uint16 MIL3 : 1 ;
  1867F                  // 3 0 -> Int 9.5 1 -> Int 9.6
  1868F  Uint16 MIL4 : 1 ;
  1869F                  // 4 0 -> Int 9.5 1 -> Int 9.6
  1870F  Uint16 MIL5 : 1 ;
  1871F                  // 5 0 -> Int 9.5 1 -> Int 9.6
  1872F  Uint16 MIL6 : 1 ;
  1873F                  // 6 0 -> Int 9.5 1 -> Int 9.6
  1874F  Uint16 MIL7 : 1 ;
  1875F                  // 7 0 -> Int 9.5 1 -> Int 9.6
  1876F  Uint16 MIL8 : 1 ;
  1877F                  // 8 0 -> Int 9.5 1 -> Int 9.6
  1878F  Uint16 MIL9 : 1 ;
  1879F                  // 9 0 -> Int 9.5 1 -> Int 9.6
  1880F  Uint16 MIL10 : 1 ;
  1881F                   // 10 0 -> Int 9.5 1 -> Int 9.6
  1882F  Uint16 MIL11 : 1 ;
  1883F                   // 11 0 -> Int 9.5 1 -> Int 9.6
  1884F  Uint16 MIL12 : 1 ;
  1885F                   // 12 0 -> Int 9.5 1 -> Int 9.6
  1886F  Uint16 MIL13 : 1 ;
  1887F                   // 13 0 -> Int 9.5 1 -> Int 9.6
  1888F  Uint16 MIL14 : 1 ;
  1889F                   // 14 0 -> Int 9.5 1 -> Int 9.6
  1890F  Uint16 MIL15 : 1 ;
  1891F                   // 15 0 -> Int 9.5 1 -> Int 9.6
  1892F  Uint16 MIL16 : 1 ;
  1893F                   // 16 0 -> Int 9.5 1 -> Int 9.6
  1894F  Uint16 MIL17 : 1 ;
  1895F                   // 17 0 -> Int 9.5 1 -> Int 9.6
  1896F  Uint16 MIL18 : 1 ;
  1897F                   // 18 0 -> Int 9.5 1 -> Int 9.6
  1898F  Uint16 MIL19 : 1 ;
  1899F                   // 19 0 -> Int 9.5 1 -> Int 9.6
  1900F  Uint16 MIL20 : 1 ;
  1901F                   // 20 0 -> Int 9.5 1 -> Int 9.6
  1902F  Uint16 MIL21 : 1 ;
  1903F                   // 21 0 -> Int 9.5 1 -> Int 9.6
  1904F  Uint16 MIL22 : 1 ;
  1905F                   // 22 0 -> Int 9.5 1 -> Int 9.6
  1906F  Uint16 MIL23 : 1 ;
  1907F                   // 23 0 -> Int 9.5 1 -> Int 9.6
  1908F  Uint16 MIL24 : 1 ;
  1909F                   // 24 0 -> Int 9.5 1 -> Int 9.6
  1910F  Uint16 MIL25 : 1 ;
  1911F                   // 25 0 -> Int 9.5 1 -> Int 9.6
  1912F  Uint16 MIL26 : 1 ;
  1913F                   // 26 0 -> Int 9.5 1 -> Int 9.6
  1914F  Uint16 MIL27 : 1 ;
  1915F                   // 27 0 -> Int 9.5 1 -> Int 9.6
  1916F  Uint16 MIL28 : 1 ;
  1917F                   // 28 0 -> Int 9.5 1 -> Int 9.6
  1918F  Uint16 MIL29 : 1 ;
  1919F                   // 29 0 -> Int 9.5 1 -> Int 9.6
  1920F  Uint16 MIL30 : 1 ;
  1921F                   // 30 0 -> Int 9.5 1 -> Int 9.6
  1922F  Uint16 MIL31 : 1 ;
  1923F                   // 31 0 -> Int 9.5 1 -> Int 9.6
  1924F} ;
  1925F/* Allow access to the bit fields or entire register */
  1926F
  1927Funion CANMIL_REG
  1928F{
  1929F  Uint32 all ;
  1930F  struct CANMIL_BITS bit ;
  1931F} ;
  1932F/* eCAN Overwrite Protection Control register (CANOPC) bit definitions */
  1933F
  1934Fstruct CANOPC_BITS
  1935F{                    // bit description
  1936F  Uint16 OPC0 : 1 ;
  1937F                  // 0 OPC for Mailbox 0
  1938F  Uint16 OPC1 : 1 ;
  1939F                  // 1 OPC for Mailbox 1
  1940F  Uint16 OPC2 : 1 ;
  1941F                  // 2 OPC for Mailbox 2
  1942F  Uint16 OPC3 : 1 ;
  1943F                  // 3 OPC for Mailbox 3
  1944F  Uint16 OPC4 : 1 ;
  1945F                  // 4 OPC for Mailbox 4
  1946F  Uint16 OPC5 : 1 ;
  1947F                  // 5 OPC for Mailbox 5
  1948F  Uint16 OPC6 : 1 ;
  1949F                  // 6 OPC for Mailbox 6
  1950F  Uint16 OPC7 : 1 ;
  1951F                  // 7 OPC for Mailbox 7
  1952F  Uint16 OPC8 : 1 ;
  1953F                  // 8 OPC for Mailbox 8
  1954F  Uint16 OPC9 : 1 ;
  1955F                  // 9 OPC for Mailbox 9
  1956F  Uint16 OPC10 : 1 ;
  1957F                   // 10 OPC for Mailbox 10
  1958F  Uint16 OPC11 : 1 ;
  1959F                   // 11 OPC for Mailbox 11
  1960F  Uint16 OPC12 : 1 ;
  1961F                   // 12 OPC for Mailbox 12
  1962F  Uint16 OPC13 : 1 ;
  1963F                   // 13 OPC for Mailbox 13
  1964F  Uint16 OPC14 : 1 ;
  1965F                   // 14 OPC for Mailbox 14
  1966F  Uint16 OPC15 : 1 ;
  1967F                   // 15 OPC for Mailbox 15
  1968F  Uint16 OPC16 : 1 ;
  1969F                   // 16 OPC for Mailbox 16
  1970F  Uint16 OPC17 : 1 ;
  1971F                   // 17 OPC for Mailbox 17
  1972F  Uint16 OPC18 : 1 ;
  1973F                   // 18 OPC for Mailbox 18
  1974F  Uint16 OPC19 : 1 ;
  1975F                   // 19 OPC for Mailbox 19
  1976F  Uint16 OPC20 : 1 ;
  1977F                   // 20 OPC for Mailbox 20
  1978F  Uint16 OPC21 : 1 ;
  1979F                   // 21 OPC for Mailbox 21
  1980F  Uint16 OPC22 : 1 ;
  1981F                   // 22 OPC for Mailbox 22
  1982F  Uint16 OPC23 : 1 ;
  1983F                   // 23 OPC for Mailbox 23
  1984F  Uint16 OPC24 : 1 ;
  1985F                   // 24 OPC for Mailbox 24
  1986F  Uint16 OPC25 : 1 ;
  1987F                   // 25 OPC for Mailbox 25
  1988F  Uint16 OPC26 : 1 ;
  1989F                   // 26 OPC for Mailbox 26
  1990F  Uint16 OPC27 : 1 ;
  1991F                   // 27 OPC for Mailbox 27
  1992F  Uint16 OPC28 : 1 ;
  1993F                   // 28 OPC for Mailbox 28
  1994F  Uint16 OPC29 : 1 ;
  1995F                   // 29 OPC for Mailbox 29
  1996F  Uint16 OPC30 : 1 ;
  1997F                   // 30 OPC for Mailbox 30
  1998F  Uint16 OPC31 : 1 ;
  1999F                   // 31 OPC for Mailbox 31
  2000F} ;
  2001F/* Allow access to the bit fields or entire register */
  2002F
  2003Funion CANOPC_REG
  2004F{
  2005F  Uint32 all ;
  2006F  struct CANOPC_BITS bit ;
  2007F} ;
  2008F/* eCAN TX I/O Control Register (CANTIOC) bit definitions */
  2009F
  2010Fstruct CANTIOC_BITS
  2011F{                     // bits description
  2012F  Uint16 rsvd1 : 3 ;
  2013F                   // 2:0 reserved
  2014F  Uint16 TXFUNC : 1 ;
  2015F                    // 3 TXFUNC
  2016F  Uint16 rsvd2 : 12 ;
  2017F                    // 15:4 reserved
  2018F  Uint16 rsvd3 : 16 ;
  2019F                    // 31:16 reserved
  2020F} ;
  2021F/* Allow access to the bit fields or entire register */
  2022F
  2023Funion CANTIOC_REG
  2024F{
  2025F  Uint32 all ;
  2026F  struct CANTIOC_BITS bit ;
  2027F} ;
  2028F/* eCAN RX I/O Control Register (CANRIOC) bit definitions */
  2029F
  2030Fstruct CANRIOC_BITS
  2031F{                     // bits description
  2032F  Uint16 rsvd1 : 3 ;
  2033F                   // 2:0 reserved
  2034F  Uint16 RXFUNC : 1 ;
  2035F                    // 3 RXFUNC
  2036F  Uint16 rsvd2 : 12 ;
  2037F                    // 15:4 reserved
  2038F  Uint16 rsvd3 : 16 ;
  2039F                    // 31:16 reserved
  2040F} ;
  2041F/* Allow access to the bit fields or entire register */
  2042F
  2043Funion CANRIOC_REG
  2044F{
  2045F  Uint32 all ;
  2046F  struct CANRIOC_BITS bit ;
  2047F} ;
  2048F/* eCAN Time-out Control register (CANTOC) bit definitions */
  2049F
  2050Fstruct CANTOC_BITS
  2051F{                    // bit description
  2052F  Uint16 TOC0 : 1 ;
  2053F                  // 0 TOC for Mailbox 0
  2054F  Uint16 TOC1 : 1 ;
  2055F                  // 1 TOC for Mailbox 1
  2056F  Uint16 TOC2 : 1 ;
  2057F                  // 2 TOC for Mailbox 2
  2058F  Uint16 TOC3 : 1 ;
  2059F                  // 3 TOC for Mailbox 3
  2060F  Uint16 TOC4 : 1 ;
  2061F                  // 4 TOC for Mailbox 4
  2062F  Uint16 TOC5 : 1 ;
  2063F                  // 5 TOC for Mailbox 5
  2064F  Uint16 TOC6 : 1 ;
  2065F                  // 6 TOC for Mailbox 6
  2066F  Uint16 TOC7 : 1 ;
  2067F                  // 7 TOC for Mailbox 7
  2068F  Uint16 TOC8 : 1 ;
  2069F                  // 8 TOC for Mailbox 8
  2070F  Uint16 TOC9 : 1 ;
  2071F                  // 9 TOC for Mailbox 9
  2072F  Uint16 TOC10 : 1 ;
  2073F                   // 10 TOC for Mailbox 10
  2074F  Uint16 TOC11 : 1 ;
  2075F                   // 11 TOC for Mailbox 11
  2076F  Uint16 TOC12 : 1 ;
  2077F                   // 12 TOC for Mailbox 12
  2078F  Uint16 TOC13 : 1 ;
  2079F                   // 13 TOC for Mailbox 13
  2080F  Uint16 TOC14 : 1 ;
  2081F                   // 14 TOC for Mailbox 14
  2082F  Uint16 TOC15 : 1 ;
  2083F                   // 15 TOC for Mailbox 15
  2084F  Uint16 TOC16 : 1 ;
  2085F                   // 16 TOC for Mailbox 16
  2086F  Uint16 TOC17 : 1 ;
  2087F                   // 17 TOC for Mailbox 17
  2088F  Uint16 TOC18 : 1 ;
  2089F                   // 18 TOC for Mailbox 18
  2090F  Uint16 TOC19 : 1 ;
  2091F                   // 19 TOC for Mailbox 19
  2092F  Uint16 TOC20 : 1 ;
  2093F                   // 20 TOC for Mailbox 20
  2094F  Uint16 TOC21 : 1 ;
  2095F                   // 21 TOC for Mailbox 21
  2096F  Uint16 TOC22 : 1 ;
  2097F                   // 22 TOC for Mailbox 22
  2098F  Uint16 TOC23 : 1 ;
  2099F                   // 23 TOC for Mailbox 23
  2100F  Uint16 TOC24 : 1 ;
  2101F                   // 24 TOC for Mailbox 24
  2102F  Uint16 TOC25 : 1 ;
  2103F                   // 25 TOC for Mailbox 25
  2104F  Uint16 TOC26 : 1 ;
  2105F                   // 26 TOC for Mailbox 26
  2106F  Uint16 TOC27 : 1 ;
  2107F                   // 27 TOC for Mailbox 27
  2108F  Uint16 TOC28 : 1 ;
  2109F                   // 28 TOC for Mailbox 28
  2110F  Uint16 TOC29 : 1 ;
  2111F                   // 29 TOC for Mailbox 29
  2112F  Uint16 TOC30 : 1 ;
  2113F                   // 30 TOC for Mailbox 30
  2114F  Uint16 TOC31 : 1 ;
  2115F                   // 31 TOC for Mailbox 31
  2116F} ;
  2117F/* Allow access to the bit fields or entire register */
  2118F
  2119Funion CANTOC_REG
  2120F{
  2121F  Uint32 all ;
  2122F  struct CANTOC_BITS bit ;
  2123F} ;
  2124F/* eCAN Time-out Status register (CANTOS) bit definitions */
  2125F
  2126Fstruct CANTOS_BITS
  2127F{                    // bit description
  2128F  Uint16 TOS0 : 1 ;
  2129F                  // 0 TOS for Mailbox 0
  2130F  Uint16 TOS1 : 1 ;
  2131F                  // 1 TOS for Mailbox 1
  2132F  Uint16 TOS2 : 1 ;
  2133F                  // 2 TOS for Mailbox 2
  2134F  Uint16 TOS3 : 1 ;
  2135F                  // 3 TOS for Mailbox 3
  2136F  Uint16 TOS4 : 1 ;
  2137F                  // 4 TOS for Mailbox 4
  2138F  Uint16 TOS5 : 1 ;
  2139F                  // 5 TOS for Mailbox 5
  2140F  Uint16 TOS6 : 1 ;
  2141F                  // 6 TOS for Mailbox 6
  2142F  Uint16 TOS7 : 1 ;
  2143F                  // 7 TOS for Mailbox 7
  2144F  Uint16 TOS8 : 1 ;
  2145F                  // 8 TOS for Mailbox 8
  2146F  Uint16 TOS9 : 1 ;
  2147F                  // 9 TOS for Mailbox 9
  2148F  Uint16 TOS10 : 1 ;
  2149F                   // 10 TOS for Mailbox 10
  2150F  Uint16 TOS11 : 1 ;
  2151F                   // 11 TOS for Mailbox 11
  2152F  Uint16 TOS12 : 1 ;
  2153F                   // 12 TOS for Mailbox 12
  2154F  Uint16 TOS13 : 1 ;
  2155F                   // 13 TOS for Mailbox 13
  2156F  Uint16 TOS14 : 1 ;
  2157F                   // 14 TOS for Mailbox 14
  2158F  Uint16 TOS15 : 1 ;
  2159F                   // 15 TOS for Mailbox 15
  2160F  Uint16 TOS16 : 1 ;
  2161F                   // 16 TOS for Mailbox 16
  2162F  Uint16 TOS17 : 1 ;
  2163F                   // 17 TOS for Mailbox 17
  2164F  Uint16 TOS18 : 1 ;
  2165F                   // 18 TOS for Mailbox 18
  2166F  Uint16 TOS19 : 1 ;
  2167F                   // 19 TOS for Mailbox 19
  2168F  Uint16 TOS20 : 1 ;
  2169F                   // 20 TOS for Mailbox 20
  2170F  Uint16 TOS21 : 1 ;
  2171F                   // 21 TOS for Mailbox 21
  2172F  Uint16 TOS22 : 1 ;
  2173F                   // 22 TOS for Mailbox 22
  2174F  Uint16 TOS23 : 1 ;
  2175F                   // 23 TOS for Mailbox 23
  2176F  Uint16 TOS24 : 1 ;
  2177F                   // 24 TOS for Mailbox 24
  2178F  Uint16 TOS25 : 1 ;
  2179F                   // 25 TOS for Mailbox 25
  2180F  Uint16 TOS26 : 1 ;
  2181F                   // 26 TOS for Mailbox 26
  2182F  Uint16 TOS27 : 1 ;
  2183F                   // 27 TOS for Mailbox 27
  2184F  Uint16 TOS28 : 1 ;
  2185F                   // 28 TOS for Mailbox 28
  2186F  Uint16 TOS29 : 1 ;
  2187F                   // 29 TOS for Mailbox 29
  2188F  Uint16 TOS30 : 1 ;
  2189F                   // 30 TOS for Mailbox 30
  2190F  Uint16 TOS31 : 1 ;
  2191F                   // 31 TOS for Mailbox 31
  2192F} ;
  2193F/* Allow access to the bit fields or entire register */
  2194F
  2195Funion CANTOS_REG
  2196F{
  2197F  Uint32 all ;
  2198F  struct CANTOS_BITS bit ;
  2199F} ;
  2200F/**************************************/
  2201F/* eCAN Control & Status register file */
  2202F/**************************************/
  2203F
  2204Fstruct ECAN_REGS
  2205F{
  2206F  union CANME_REG CANME ; // Mailbox Enable
  2207F  union CANMD_REG CANMD ; // Mailbox Direction
  2208F  union CANTRS_REG CANTRS ; // Transmit Request Set
  2209F  union CANTRR_REG CANTRR ; // Transmit Request Reset
  2210F  union CANTA_REG CANTA ; // Transmit Acknowledge
  2211F  union CANAA_REG CANAA ; // Abort Acknowledge
  2212F  union CANRMP_REG CANRMP ; // Received Message Pending
  2213F  union CANRML_REG CANRML ; // Received Message Lost
  2214F  union CANRFP_REG CANRFP ; // Remote Frame Pending
  2215F  union CANGAM_REG CANGAM ; // Global Acceptance Mask
  2216F  union CANMC_REG CANMC ; // Master Control
  2217F  union CANBTC_REG CANBTC ; // Bit Timing
  2218F  union CANES_REG CANES ; // Error Status
  2219F  union CANTEC_REG CANTEC ; // Transmit Error Counter
  2220F  union CANREC_REG CANREC ; // Receive Error Counter
  2221F  union CANGIF0_REG CANGIF0 ; // Global Interrupt Flag 0
  2222F  union CANGIM_REG CANGIM ; // Global Interrupt Mask 0
  2223F  union CANGIF1_REG CANGIF1 ; // Global Interrupt Flag 1
  2224F  union CANMIM_REG CANMIM ; // Mailbox Interrupt Mask
  2225F  union CANMIL_REG CANMIL ; // Mailbox Interrupt Level
  2226F  union CANOPC_REG CANOPC ; // Overwrite Protection Control
  2227F  union CANTIOC_REG CANTIOC ; // TX I/O Control
  2228F  union CANRIOC_REG CANRIOC ; // RX I/O Control
  2229F  Uint32 CANTSC ; // Time-stamp counter
  2230F  union CANTOC_REG CANTOC ; // Time-out Control
  2231F  union CANTOS_REG CANTOS ; // Time-out Status
  2232F} ;
  2233F/* --------------------------------------------------- */
  2234F/* eCAN Mailbox Registers */
  2235F/* ----------------------------------------------------*/
  2236F/* eCAN Message ID (MSGID) bit definitions */
  2237F
  2238Fstruct CANMSGID_BITS
  2239F{                      // bits description
  2240F  Uint16 EXTMSGID_L : 16 ;
  2241F                         // 0:15
  2242F  Uint16 EXTMSGID_H : 2 ;
  2243F                        // 16:17
  2244F  Uint16 STDMSGID : 11 ;
  2245F                       // 18:28
  2246F  Uint16 AAM : 1 ;
  2247F                 // 29
  2248F  Uint16 AME : 1 ;
  2249F                 // 30
  2250F  Uint16 IDE : 1 ;
  2251F                 // 31
  2252F} ;
  2253F/* Allow access to the bit fields or entire register */
  2254F
  2255Funion CANMSGID_REG
  2256F{
  2257F  Uint32 all ;
  2258F  struct CANMSGID_BITS bit ;
  2259F} ;
  2260F/* eCAN Message Control Register (MSGCTRL) bit definitions */
  2261F
  2262Fstruct CANMSGCTRL_BITS
  2263F{                        // bits description
  2264F  Uint16 DLC : 4 ;
  2265F                 // 0:3
  2266F  Uint16 RTR : 1 ;
  2267F                 // 4
  2268F  Uint16 rsvd1 : 3 ;
  2269F                   // 7:5 reserved
  2270F  Uint16 TPL : 5 ;
  2271F                 // 12:8
  2272F  Uint16 rsvd2 : 3 ;
  2273F                   // 15:13 reserved
  2274F  Uint16 rsvd3 : 16 ;
  2275F                    // 31:16 reserved
  2276F} ;
  2277F/* Allow access to the bit fields or entire register */
  2278F
  2279Funion CANMSGCTRL_REG
  2280F{
  2281F  Uint32 all ;
  2282F  struct CANMSGCTRL_BITS bit ;
  2283F} ;
  2284F/* eCAN Message Data Register low (MDR_L) word definitions */
  2285F
  2286Fstruct CANMDL_WORDS
  2287F{                     // bits description
  2288F  Uint16 LOW_WORD : 16 ;
  2289F                       // 0:15
  2290F  Uint16 HI_WORD : 16 ;
  2291F                      // 31:16
  2292F} ;
  2293F/* eCAN Message Data Register low (MDR_L) byte definitions */
  2294F
  2295Fstruct CANMDL_BYTES
  2296F{                     // bits description
  2297F  Uint16 BYTE3 : 8 ;
  2298F                   // 31:24
  2299F  Uint16 BYTE2 : 8 ;
  2300F                   // 23:16
  2301F  Uint16 BYTE1 : 8 ;
  2302F                   // 15:8
  2303F  Uint16 BYTE0 : 8 ;
  2304F                   // 7:0
  2305F} ;
  2306F/* Allow access to the bit fields or entire register */
  2307F
  2308Funion CANMDL_REG
  2309F{
  2310F  Uint32 all ;
  2311F  struct CANMDL_WORDS word ;
  2312F  struct CANMDL_BYTES byte ;
  2313F} ;
  2314F/* eCAN Message Data Register high (MDR_H) word definitions */
  2315F
  2316Fstruct CANMDH_WORDS
  2317F{                     // bits description
  2318F  Uint16 LOW_WORD : 16 ;
  2319F                       // 0:15
  2320F  Uint16 HI_WORD : 16 ;
  2321F                      // 31:16
  2322F} ;
  2323F/* eCAN Message Data Register low (MDR_H) byte definitions */
  2324F
  2325Fstruct CANMDH_BYTES
  2326F{                     // bits description
  2327F  Uint16 BYTE7 : 8 ;
  2328F                   // 63:56
  2329F  Uint16 BYTE6 : 8 ;
  2330F                   // 55:48
  2331F  Uint16 BYTE5 : 8 ;
  2332F                   // 47:40
  2333F  Uint16 BYTE4 : 8 ;
  2334F                   // 39:32
  2335F} ;
  2336F/* Allow access to the bit fields or entire register */
  2337F
  2338Funion CANMDH_REG
  2339F{
  2340F  Uint32 all ;
  2341F  struct CANMDH_WORDS word ;
  2342F  struct CANMDH_BYTES byte ;
  2343F} ;
  2344F
  2345Fstruct MBOX
  2346F{
  2347F  union CANMSGID_REG MSGID ;
  2348F  union CANMSGCTRL_REG MSGCTRL ;
  2349F  union CANMDL_REG MDL ;
  2350F  union CANMDH_REG MDH ;
  2351F} ;
  2352F/**************************************/
  2353F/* eCAN Mailboxes */
  2354F/**************************************/
  2355F
  2356Fstruct ECAN_MBOXES
  2357F{
  2358F  struct MBOX MBOX0 ;
  2359F  struct MBOX MBOX1 ;
  2360F  struct MBOX MBOX2 ;
  2361F  struct MBOX MBOX3 ;
  2362F  struct MBOX MBOX4 ;
  2363F  struct MBOX MBOX5 ;
  2364F  struct MBOX MBOX6 ;
  2365F  struct MBOX MBOX7 ;
  2366F  struct MBOX MBOX8 ;
  2367F  struct MBOX MBOX9 ;
  2368F  struct MBOX MBOX10 ;
  2369F  struct MBOX MBOX11 ;
  2370F  struct MBOX MBOX12 ;
  2371F  struct MBOX MBOX13 ;
  2372F  struct MBOX MBOX14 ;
  2373F  struct MBOX MBOX15 ;
  2374F  struct MBOX MBOX16 ;
  2375F  struct MBOX MBOX17 ;
  2376F  struct MBOX MBOX18 ;
  2377F  struct MBOX MBOX19 ;
  2378F  struct MBOX MBOX20 ;
  2379F  struct MBOX MBOX21 ;
  2380F  struct MBOX MBOX22 ;
  2381F  struct MBOX MBOX23 ;
  2382F  struct MBOX MBOX24 ;
  2383F  struct MBOX MBOX25 ;
  2384F  struct MBOX MBOX26 ;
  2385F  struct MBOX MBOX27 ;
  2386F  struct MBOX MBOX28 ;
  2387F  struct MBOX MBOX29 ;
  2388F  struct MBOX MBOX30 ;
  2389F  struct MBOX MBOX31 ;
  2390F} ;
  2391F/* eCAN Local Acceptance Mask (LAM) bit definitions */
  2392F
  2393Fstruct CANLAM_BITS
  2394F{                    // bits description
  2395F  Uint16 LAM_L : 16 ;
  2396F                    // 0:15
  2397F  Uint16 LAM_H : 13 ;
  2398F                    // 16:28
  2399F  Uint16 rsvd1 : 2 ;
  2400F                   // 29:30 reserved
  2401F  Uint16 LAMI : 1 ;
  2402F                  // 31
  2403F} ;
  2404F/* Allow access to the bit fields or entire register */
  2405F
  2406Funion CANLAM_REG
  2407F{
  2408F  Uint32 all ;
  2409F  struct CANLAM_BITS bit ;
  2410F} ;
  2411F/**************************************/
  2412F/* eCAN Local Acceptance Masks */
  2413F/**************************************/
  2414F/* eCAN LAM File */
  2415F
  2416Fstruct LAM_REGS
  2417F{
  2418F  union CANLAM_REG LAM0 ;
  2419F  union CANLAM_REG LAM1 ;
  2420F  union CANLAM_REG LAM2 ;
  2421F  union CANLAM_REG LAM3 ;
  2422F  union CANLAM_REG LAM4 ;
  2423F  union CANLAM_REG LAM5 ;
  2424F  union CANLAM_REG LAM6 ;
  2425F  union CANLAM_REG LAM7 ;
  2426F  union CANLAM_REG LAM8 ;
  2427F  union CANLAM_REG LAM9 ;
  2428F  union CANLAM_REG LAM10 ;
  2429F  union CANLAM_REG LAM11 ;
  2430F  union CANLAM_REG LAM12 ;
  2431F  union CANLAM_REG LAM13 ;
  2432F  union CANLAM_REG LAM14 ;
  2433F  union CANLAM_REG LAM15 ;
  2434F  union CANLAM_REG LAM16 ;
  2435F  union CANLAM_REG LAM17 ;
  2436F  union CANLAM_REG LAM18 ;
  2437F  union CANLAM_REG LAM19 ;
  2438F  union CANLAM_REG LAM20 ;
  2439F  union CANLAM_REG LAM21 ;
  2440F  union CANLAM_REG LAM22 ;
  2441F  union CANLAM_REG LAM23 ;
  2442F  union CANLAM_REG LAM24 ;
  2443F  union CANLAM_REG LAM25 ;
  2444F  union CANLAM_REG LAM26 ;
  2445F  union CANLAM_REG LAM27 ;
  2446F  union CANLAM_REG LAM28 ;
  2447F  union CANLAM_REG LAM29 ;
  2448F  union CANLAM_REG LAM30 ;
  2449F  union CANLAM_REG LAM31 ;
  2450F} ;
  2451F/* Mailbox MOTS File */
  2452F
  2453Fstruct MOTS_REGS
  2454F{
  2455F  Uint32 MOTS0 ;
  2456F  Uint32 MOTS1 ;
  2457F  Uint32 MOTS2 ;
  2458F  Uint32 MOTS3 ;
  2459F  Uint32 MOTS4 ;
  2460F  Uint32 MOTS5 ;
  2461F  Uint32 MOTS6 ;
  2462F  Uint32 MOTS7 ;
  2463F  Uint32 MOTS8 ;
  2464F  Uint32 MOTS9 ;
  2465F  Uint32 MOTS10 ;
  2466F  Uint32 MOTS11 ;
  2467F  Uint32 MOTS12 ;
  2468F  Uint32 MOTS13 ;
  2469F  Uint32 MOTS14 ;
  2470F  Uint32 MOTS15 ;
  2471F  Uint32 MOTS16 ;
  2472F  Uint32 MOTS17 ;
  2473F  Uint32 MOTS18 ;
  2474F  Uint32 MOTS19 ;
  2475F  Uint32 MOTS20 ;
  2476F  Uint32 MOTS21 ;
  2477F  Uint32 MOTS22 ;
  2478F  Uint32 MOTS23 ;
  2479F  Uint32 MOTS24 ;
  2480F  Uint32 MOTS25 ;
  2481F  Uint32 MOTS26 ;
  2482F  Uint32 MOTS27 ;
  2483F  Uint32 MOTS28 ;
  2484F  Uint32 MOTS29 ;
  2485F  Uint32 MOTS30 ;
  2486F  Uint32 MOTS31 ;
  2487F} ;
  2488F/* Mailbox MOTO File */
  2489F
  2490Fstruct MOTO_REGS
  2491F{
  2492F  Uint32 MOTO0 ;
  2493F  Uint32 MOTO1 ;
  2494F  Uint32 MOTO2 ;
  2495F  Uint32 MOTO3 ;
  2496F  Uint32 MOTO4 ;
  2497F  Uint32 MOTO5 ;
  2498F  Uint32 MOTO6 ;
  2499F  Uint32 MOTO7 ;
  2500F  Uint32 MOTO8 ;
  2501F  Uint32 MOTO9 ;
  2502F  Uint32 MOTO10 ;
  2503F  Uint32 MOTO11 ;
  2504F  Uint32 MOTO12 ;
  2505F  Uint32 MOTO13 ;
  2506F  Uint32 MOTO14 ;
  2507F  Uint32 MOTO15 ;
  2508F  Uint32 MOTO16 ;
  2509F  Uint32 MOTO17 ;
  2510F  Uint32 MOTO18 ;
  2511F  Uint32 MOTO19 ;
  2512F  Uint32 MOTO20 ;
  2513F  Uint32 MOTO21 ;
  2514F  Uint32 MOTO22 ;
  2515F  Uint32 MOTO23 ;
  2516F  Uint32 MOTO24 ;
  2517F  Uint32 MOTO25 ;
  2518F  Uint32 MOTO26 ;
  2519F  Uint32 MOTO27 ;
  2520F  Uint32 MOTO28 ;
  2521F  Uint32 MOTO29 ;
  2522F  Uint32 MOTO30 ;
  2523F  Uint32 MOTO31 ;
  2524F} ;
  2525F//---------------------------------------------------------------------------
  2526F// eCAN External References & Function Declarations:
  2527F//
  2528F
  2529Fextern volatile struct ECAN_REGS
  2530F  ECanaRegs ;
  2531F
  2532Fextern volatile struct ECAN_MBOXES
  2533F  ECanaMboxes ;
  2534F
  2535Fextern volatile struct LAM_REGS
  2536F  ECanaLAMRegs ;
  2537F
  2538Fextern volatile struct MOTO_REGS
  2539F  ECanaMOTORegs ;
  2540F
  2541Fextern volatile struct MOTS_REGS
  2542F  ECanaMOTSRegs ;
  2543F
  2544Fextern volatile struct ECAN_REGS
  2545F  ECanbRegs ;
  2546F
  2547Fextern volatile struct ECAN_MBOXES
  2548F  ECanbMboxes ;
  2549F
  2550Fextern volatile struct LAM_REGS
  2551F  ECanbLAMRegs ;
  2552F
  2553Fextern volatile struct MOTO_REGS
  2554F  ECanbMOTORegs ;
  2555F
  2556Fextern volatile struct MOTS_REGS
  2557F  ECanbMOTSRegs ;
  2558F       /* extern "C" */
  2559F       // end of DSP2833x_ECAN.H definition
  2560F//===========================================================================
  2561F// End of file.
  2562F//===========================================================================
  2563F 
  2564F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECan.h*/
  2565F/*   CLOSE_FILE Include File */
  2566F 
  2567F               // Enhanced eCAN Registers
  2568F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECap.h */
  2569F// TI File $Revision: /main/1 $
  2570F// Checkin $Date: August 18, 2006 13:52:07 $
  2571F//###########################################################################
  2572F//
  2573F// FILE: DSP2833x_ECap.h
  2574F//
  2575F// TITLE: DSP2833x Enhanced Capture Module Register Bit Definitions.
  2576F//
  2577F//###########################################################################
  2578F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  2579F// $Release Date: August 4, 2009 $
  2580F//###########################################################################
  2581F#ifndef DSP2833x_ECAP_H
  2582F#define DSP2833x_ECAP_H
  2583F//----------------------------------------------------
  2584F// Capture control register 1 bit definitions */
  2585F
  2586Fstruct ECCTL1_BITS
  2587F{                    // bits description
  2588F  Uint16 CAP1POL : 1 ;
  2589F                     // 0 Capture Event 1 Polarity select
  2590F  Uint16 CTRRST1 : 1 ;
  2591F                     // 1 Counter Reset on Capture Event 1
  2592F  Uint16 CAP2POL : 1 ;
  2593F                     // 2 Capture Event 2 Polarity select
  2594F  Uint16 CTRRST2 : 1 ;
  2595F                     // 3 Counter Reset on Capture Event 2
  2596F  Uint16 CAP3POL : 1 ;
  2597F                     // 4 Capture Event 3 Polarity select
  2598F  Uint16 CTRRST3 : 1 ;
  2599F                     // 5 Counter Reset on Capture Event 3
  2600F  Uint16 CAP4POL : 1 ;
  2601F                     // 6 Capture Event 4 Polarity select
  2602F  Uint16 CTRRST4 : 1 ;
  2603F                     // 7 Counter Reset on Capture Event 4
  2604F  Uint16 CAPLDEN : 1 ;
  2605F                     // 8 Enable Loading CAP1-4 regs on a Cap Event
  2606F  Uint16 PRESCALE : 5 ;
  2607F                      // 13:9 Event Filter prescale select
  2608F  Uint16 FREE_SOFT : 2 ;
  2609F                       // 15:14 Emulation mode
  2610F} ;
  2611F
  2612Funion ECCTL1_REG
  2613F{
  2614F  Uint16 all ;
  2615F  struct ECCTL1_BITS bit ;
  2616F} ;
  2617F// In V1.1 the STOPVALUE bit field was changed to
  2618F// STOP_WRAP. This correlated to a silicon change from
  2619F// F2833x Rev 0 to Rev A.
  2620F//----------------------------------------------------
  2621F// Capture control register 2 bit definitions */
  2622F
  2623Fstruct ECCTL2_BITS
  2624F{                    // bits description
  2625F  Uint16 CONT_ONESHT : 1 ;
  2626F                         // 0 Continuous or one-shot
  2627F  Uint16 STOP_WRAP : 2 ;
  2628F                       // 2:1 Stop value for one-shot, Wrap for continuous
  2629F  Uint16 REARM : 1 ;
  2630F                   // 3 One-shot re-arm
  2631F  Uint16 TSCTRSTOP : 1 ;
  2632F                       // 4 TSCNT counter stop
  2633F  Uint16 SYNCI_EN : 1 ;
  2634F                      // 5 Counter sync-in select
  2635F  Uint16 SYNCO_SEL : 2 ;
  2636F                       // 7:6 Sync-out mode
  2637F  Uint16 SWSYNC : 1 ;
  2638F                    // 8 SW forced counter sync
  2639F  Uint16 CAP_APWM : 1 ;
  2640F                      // 9 CAP/APWM operating mode select
  2641F  Uint16 APWMPOL : 1 ;
  2642F                     // 10 APWM output polarity select
  2643F  Uint16 rsvd1 : 5 ;
  2644F                   // 15:11
  2645F} ;
  2646F
  2647Funion ECCTL2_REG
  2648F{
  2649F  Uint16 all ;
  2650F  struct ECCTL2_BITS bit ;
  2651F} ;
  2652F//----------------------------------------------------
  2653F// ECAP interrupt enable register bit definitions */
  2654F
  2655Fstruct ECEINT_BITS
  2656F{                    // bits description
  2657F  Uint16 rsvd1 : 1 ;
  2658F                   // 0 reserved
  2659F  Uint16 CEVT1 : 1 ;
  2660F                   // 1 Capture Event 1 Interrupt Enable
  2661F  Uint16 CEVT2 : 1 ;
  2662F                   // 2 Capture Event 2 Interrupt Enable
  2663F  Uint16 CEVT3 : 1 ;
  2664F                   // 3 Capture Event 3 Interrupt Enable
  2665F  Uint16 CEVT4 : 1 ;
  2666F                   // 4 Capture Event 4 Interrupt Enable
  2667F  Uint16 CTROVF : 1 ;
  2668F                    // 5 Counter Overflow Interrupt Enable
  2669F  Uint16 CTR_EQ_PRD : 1 ;
  2670F                        // 6 Period Equal Interrupt Enable
  2671F  Uint16 CTR_EQ_CMP : 1 ;
  2672F                        // 7 Compare Equal Interrupt Enable
  2673F  Uint16 rsvd2 : 8 ;
  2674F                   // 15:8 reserved
  2675F} ;
  2676F
  2677Funion ECEINT_REG
  2678F{
  2679F  Uint16 all ;
  2680F  struct ECEINT_BITS bit ;
  2681F} ;
  2682F//----------------------------------------------------
  2683F// ECAP interrupt flag register bit definitions */
  2684F
  2685Fstruct ECFLG_BITS
  2686F{                   // bits description
  2687F  Uint16 INT : 1 ;
  2688F                 // 0 Global Flag
  2689F  Uint16 CEVT1 : 1 ;
  2690F                   // 1 Capture Event 1 Interrupt Flag
  2691F  Uint16 CEVT2 : 1 ;
  2692F                   // 2 Capture Event 2 Interrupt Flag
  2693F  Uint16 CEVT3 : 1 ;
  2694F                   // 3 Capture Event 3 Interrupt Flag
  2695F  Uint16 CEVT4 : 1 ;
  2696F                   // 4 Capture Event 4 Interrupt Flag
  2697F  Uint16 CTROVF : 1 ;
  2698F                    // 5 Counter Overflow Interrupt Flag
  2699F  Uint16 CTR_EQ_PRD : 1 ;
  2700F                        // 6 Period Equal Interrupt Flag
  2701F  Uint16 CTR_EQ_CMP : 1 ;
  2702F                        // 7 Compare Equal Interrupt Flag
  2703F  Uint16 rsvd2 : 8 ;
  2704F                   // 15:8 reserved
  2705F} ;
  2706F
  2707Funion ECFLG_REG
  2708F{
  2709F  Uint16 all ;
  2710F  struct ECFLG_BITS bit ;
  2711F} ;
  2712F//----------------------------------------------------
  2713F
  2714Fstruct ECAP_REGS
  2715F{
  2716F  Uint32 TSCTR ; // Time stamp counter
  2717F  Uint32 CTRPHS ; // Counter phase
  2718F  Uint32 CAP1 ; // Capture 1
  2719F  Uint32 CAP2 ; // Capture 2
  2720F  Uint32 CAP3 ; // Capture 3
  2721F  Uint32 CAP4 ; // Capture 4
  2722F  Uint16 rsvd1 [ 8 ] ;
  2723F                    // reserved
  2724F  union ECCTL1_REG ECCTL1 ; // Capture Control Reg 1
  2725F  union ECCTL2_REG ECCTL2 ; // Capture Control Reg 2
  2726F  union ECEINT_REG ECEINT ; // ECAP interrupt enable
  2727F  union ECFLG_REG ECFLG ; // ECAP interrupt flags
  2728F  union ECFLG_REG ECCLR ; // ECAP interrupt clear
  2729F  union ECEINT_REG ECFRC ; // ECAP interrupt force
  2730F  Uint16 rsvd2 [ 6 ] ;
  2731F                    // reserved
  2732F} ;
  2733F//---------------------------------------------------------------------------
  2734F// GPI/O External References & Function Declarations:
  2735F//
  2736F
  2737Fextern volatile struct ECAP_REGS
  2738F  ECap1Regs ;
  2739F
  2740Fextern volatile struct ECAP_REGS
  2741F  ECap2Regs ;
  2742F
  2743Fextern volatile struct ECAP_REGS
  2744F  ECap3Regs ;
  2745F
  2746Fextern volatile struct ECAP_REGS
  2747F  ECap4Regs ;
  2748F
  2749Fextern volatile struct ECAP_REGS
  2750F  ECap5Regs ;
  2751F
  2752Fextern volatile struct ECAP_REGS
  2753F  ECap6Regs ;
  2754F       /* extern "C" */
  2755F       // end of DSP2833x_ECAP_H definition
  2756F//===========================================================================
  2757F// End of file.
  2758F//===========================================================================
  2759F 
  2760F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECap.h*/
  2761F/*   CLOSE_FILE Include File */
  2762F 
  2763F               // Enhanced Capture
  2764F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DMA.h */
  2765F// TI File $Revision: /main/11 $
  2766F// Checkin $Date: June 23, 2008 11:34:15 $
  2767F//###########################################################################
  2768F//
  2769F// FILE: DSP2833x_DMA.h
  2770F//
  2771F// TITLE: DSP2833x DMA Module Register Bit Definitions.
  2772F//
  2773F//###########################################################################
  2774F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  2775F// $Release Date: August 4, 2009 $
  2776F//###########################################################################
  2777F#ifndef DSP2833x_DMA_H
  2778F#define DSP2833x_DMA_H
  2779F//----------------------------------------------------
  2780F// Channel MODE register bit definitions:
  2781F
  2782Fstruct MODE_BITS
  2783F{                  // bits description
  2784F  Uint16 PERINTSEL : 5 ;
  2785F                       // 4:0 Peripheral Interrupt and Sync Select Bits (R/W):
  2786F                             // 0 no interrupt
  2787F               // 1 SEQ1INT & ADCSYNC
  2788F                             // 2 SEQ2INT
  2789F               // 3 XINT1
  2790F               // 4 XINT2
  2791F               // 5 XINT3
  2792F               // 6 XINT4
  2793F               // 7 XINT5
  2794F               // 8 XINT6
  2795F               // 9 XINT7
  2796F               // 10 XINT13
  2797F               // 11 TINT0
  2798F               // 12 TINT1
  2799F               // 13 TINT2
  2800F               // 14 MXEVTA & MXSYNCA
  2801F               // 15 MREVTA & MRSYNCA
  2802F               // 16 MXEVTB & MXSYNCB
  2803F               // 17 MREVTB & MRSYNCB
  2804F                                 // 18 ePWM1SOCA
  2805F                                 // 19 ePWM1SOCB
  2806F                                 // 20 ePWM2SOCA
  2807F                                 // 21 ePWM2SOCB
  2808F                                 // 22 ePWM3SOCA
  2809F                                 // 23 ePWM3SOCB
  2810F                                 // 24 ePWM4SOCA
  2811F                                 // 25 ePWM4SOCB
  2812F                                 // 26 ePWM5SOCA
  2813F                                 // 27 ePWM5SOCB
  2814F                                 // 28 ePWM6SOCA
  2815F                                 // 29 ePWM6SOCB
  2816F                                 // 30:31 no interrupt
  2817F  Uint16 rsvd1 : 2 ;
  2818F                   // 6:5 (R=0:0)
  2819F  Uint16 OVRINTE : 1 ;
  2820F                     // 7 Overflow Interrupt Enable (R/W):
  2821F                             // 0 overflow interrupt disabled
  2822F                             // 1 overflow interrupt enabled
  2823F  Uint16 PERINTE : 1 ;
  2824F                     // 8 Peripheral Interrupt Enable Bit (R/W):
  2825F                             // 0 peripheral interrupt disabled
  2826F                             // 1 peripheral interrupt enabled
  2827F  Uint16 CHINTMODE : 1 ;
  2828F                       // 9 Channel Interrupt Mode Bit (R/W):
  2829F                             // 0 generate interrupt at beginning of new transfer
  2830F                             // 1 generate interrupt at end of transfer
  2831F  Uint16 ONESHOT : 1 ;
  2832F                     // 10 One Shot Mode Bit (R/W):
  2833F                             // 0 only interrupt event triggers single burst transfer
  2834F                             // 1 first interrupt triggers burst, continue until transfer count is zero
  2835F  Uint16 CONTINUOUS : 1 ;
  2836F                        // 11 Continous Mode Bit (R/W):
  2837F                             // 0 stop when transfer count is zero
  2838F                             // 1 re-initialize when transfer count is zero
  2839F  Uint16 SYNCE : 1 ;
  2840F                   // 12 Sync Enable Bit (R/W):
  2841F                             // 0 ignore selected interrupt sync signal
  2842F                             // 1 enable selected interrupt sync signal
  2843F  Uint16 SYNCSEL : 1 ;
  2844F                     // 13 Sync Select Bit (R/W):
  2845F                             // 0 sync signal controls source wrap counter
  2846F                             // 1 sync signal controls destination wrap counter
  2847F  Uint16 DATASIZE : 1 ;
  2848F                      // 14 Data Size Mode Bit (R/W):
  2849F                             // 0 16-bit data transfer size
  2850F                             // 1 32-bit data transfer size
  2851F  Uint16 CHINTE : 1 ;
  2852F                    // 15 Channel Interrupt Enable Bit (R/W):
  2853F                             // 0 channel interrupt disabled
  2854F                             // 1 channel interrupt enabled
  2855F} ;
  2856F
  2857Funion MODE_REG
  2858F{
  2859F  Uint16 all ;
  2860F  struct MODE_BITS bit ;
  2861F} ;
  2862F//----------------------------------------------------
  2863F// Channel CONTROL register bit definitions:
  2864F
  2865Fstruct CONTROL_BITS
  2866F{                     // bits description
  2867F  Uint16 RUN : 1 ;
  2868F                 // 0 Run Bit (R=0/W=1)
  2869F  Uint16 HALT : 1 ;
  2870F                  // 1 Halt Bit (R=0/W=1)
  2871F  Uint16 SOFTRESET : 1 ;
  2872F                       // 2 Soft Reset Bit (R=0/W=1)
  2873F  Uint16 PERINTFRC : 1 ;
  2874F                       // 3 Interrupt Force Bit (R=0/W=1)
  2875F  Uint16 PERINTCLR : 1 ;
  2876F                       // 4 Interrupt Clear Bit (R=0/W=1)
  2877F  Uint16 SYNCFRC : 1 ;
  2878F                     // 5 Sync Force Bit (R=0/W=1)
  2879F  Uint16 SYNCCLR : 1 ;
  2880F                     // 6 Sync Clear Bit (R=0/W=1)
  2881F  Uint16 ERRCLR : 1 ;
  2882F                    // 7 Error Clear Bit (R=0/W=1)
  2883F  Uint16 PERINTFLG : 1 ;
  2884F                       // 8 Interrupt Flag Bit (R):
  2885F                             // 0 no interrupt pending
  2886F                             // 1 interrupt pending
  2887F  Uint16 SYNCFLG : 1 ;
  2888F                     // 9 Sync Flag Bit (R):
  2889F                             // 0 no sync pending
  2890F                             // 1 sync pending
  2891F  Uint16 SYNCERR : 1 ;
  2892F                     // 10 Sync Error Flag Bit (R):
  2893F                             // 0 no sync error
  2894F                             // 1 sync error detected
  2895F  Uint16 TRANSFERSTS : 1 ;
  2896F                         // 11 Transfer Status Bit (R):
  2897F                             // 0 no transfer in progress or pending
  2898F                             // 1 transfer in progress or pending
  2899F  Uint16 BURSTSTS : 1 ;
  2900F                      // 12 Burst Status Bit (R):
  2901F                             // 0 no burst in progress or pending
  2902F                             // 1 burst in progress or pending
  2903F  Uint16 RUNSTS : 1 ;
  2904F                    // 13 Run Status Bit (R):
  2905F                             // 0 channel not running or halted
  2906F                             // 1 channel running
  2907F  Uint16 OVRFLG : 1 ;
  2908F                    // 14 Overflow Flag Bit(R)
  2909F                             // 0 no overflow event
  2910F                             // 1 overflow event
  2911F  Uint16 rsvd1 : 1 ;
  2912F                   // 15 (R=0)
  2913F} ;
  2914F
  2915Funion CONTROL_REG
  2916F{
  2917F  Uint16 all ;
  2918F  struct CONTROL_BITS bit ;
  2919F} ;
  2920F//----------------------------------------------------
  2921F// DMACTRL register bit definitions:
  2922F
  2923Fstruct DMACTRL_BITS
  2924F{                     // bits description
  2925F  Uint16 HARDRESET : 1 ;
  2926F                       // 0 Hard Reset Bit (R=0/W=1)
  2927F  Uint16 PRIORITYRESET : 1 ;
  2928F                           // 1 Priority Reset Bit (R=0/W=1)
  2929F  Uint16 rsvd1 : 14 ;
  2930F                    // 15:2 (R=0:0)
  2931F} ;
  2932F
  2933Funion DMACTRL_REG
  2934F{
  2935F  Uint16 all ;
  2936F  struct DMACTRL_BITS bit ;
  2937F} ;
  2938F//----------------------------------------------------
  2939F// DEBUGCTRL register bit definitions:
  2940F
  2941Fstruct DEBUGCTRL_BITS
  2942F{                       // bits description
  2943F  Uint16 rsvd1 : 15 ;
  2944F                    // 14:0 (R=0:0)
  2945F  Uint16 FREE : 1 ;
  2946F                  // 15 Debug Mode Bit (R/W):
  2947F                             // 0 halt after current read-write operation
  2948F                             // 1 continue running
  2949F} ;
  2950F
  2951Funion DEBUGCTRL_REG
  2952F{
  2953F  Uint16 all ;
  2954F  struct DEBUGCTRL_BITS bit ;
  2955F} ;
  2956F//----------------------------------------------------
  2957F// PRIORITYCTRL1 register bit definitions:
  2958F
  2959Fstruct PRIORITYCTRL1_BITS
  2960F{                           // bits description
  2961F  Uint16 CH1PRIORITY : 1 ;
  2962F                         // 0 Ch1 Priority Bit (R/W):
  2963F                             // 0 same priority as all other channels
  2964F                             // 1 highest priority channel
  2965F  Uint16 rsvd1 : 15 ;
  2966F                    // 15:1 (R=0:0)
  2967F} ;
  2968F
  2969Funion PRIORITYCTRL1_REG
  2970F{
  2971F  Uint16 all ;
  2972F  struct PRIORITYCTRL1_BITS bit ;
  2973F} ;
  2974F//----------------------------------------------------
  2975F// PRIORITYSTAT register bit definitions:
  2976F
  2977Fstruct PRIORITYSTAT_BITS
  2978F{                          // bits description
  2979F  Uint16 ACTIVESTS : 3 ;
  2980F                       // 2:0 Active Channel Status Bits (R):
  2981F                              // 0,0,0 no channel active
  2982F                              // 0,0,1 Ch1 channel active
  2983F                              // 0,1,0 Ch2 channel active
  2984F                              // 0,1,1 Ch3 channel active
  2985F                              // 1,0,0 Ch4 channel active
  2986F                              // 1,0,1 Ch5 channel active
  2987F                              // 1,1,0 Ch6 channel active
  2988F  Uint16 rsvd1 : 1 ;
  2989F                   // 3 (R=0)
  2990F  Uint16 ACTIVESTS_SHADOW : 3 ;
  2991F                              // 6:4 Active Channel Status Shadow Bits (R):
  2992F                              // 0,0,0 no channel active and interrupted by Ch1
  2993F                              // 0,0,1 cannot occur
  2994F                              // 0,1,0 Ch2 was active and interrupted by Ch1
  2995F                              // 0,1,1 Ch3 was active and interrupted by Ch1
  2996F                              // 1,0,0 Ch4 was active and interrupted by Ch1
  2997F                              // 1,0,1 Ch5 was active and interrupted by Ch1
  2998F                              // 1,1,0 Ch6 was active and interrupted by Ch1
  2999F  Uint16 rsvd2 : 9 ;
  3000F                   // 15:7 (R=0:0)
  3001F} ;
  3002F
  3003Funion PRIORITYSTAT_REG
  3004F{
  3005F  Uint16 all ;
  3006F  struct PRIORITYSTAT_BITS bit ;
  3007F} ;
  3008F// Burst Size
  3009F
  3010Fstruct BURST_SIZE_BITS
  3011F{                        // bits description
  3012F  Uint16 BURSTSIZE : 5 ;
  3013F                       // 4:0 Burst transfer size
  3014F  Uint16 rsvd1 : 11 ;
  3015F                    // 15:5 reserved
  3016F} ;
  3017F
  3018Funion BURST_SIZE_REG
  3019F{
  3020F  Uint16 all ;
  3021F  struct BURST_SIZE_BITS bit ;
  3022F} ;
  3023F// Burst Count
  3024F
  3025Fstruct BURST_COUNT_BITS
  3026F{                         // bits description
  3027F  Uint16 BURSTCOUNT : 5 ;
  3028F                        // 4:0 Burst transfer size
  3029F  Uint16 rsvd1 : 11 ;
  3030F                    // 15:5 reserved
  3031F} ;
  3032F
  3033Funion BURST_COUNT_REG
  3034F{
  3035F  Uint16 all ;
  3036F  struct BURST_COUNT_BITS bit ;
  3037F} ;
  3038F//----------------------------------------------------
  3039F// DMA Channel Registers:
  3040F
  3041Fstruct CH_REGS
  3042F{
  3043F  union MODE_REG MODE ; // Mode Register
  3044F  union CONTROL_REG CONTROL ; // Control Register
  3045F  union BURST_SIZE_REG BURST_SIZE ; // Burst Size Register
  3046F  union BURST_COUNT_REG BURST_COUNT ; // Burst Count Register
  3047F  int16 SRC_BURST_STEP ; // Source Burst Step Register
  3048F  int16 DST_BURST_STEP ; // Destination Burst Step Register
  3049F  Uint16 TRANSFER_SIZE ; // Transfer Size Register
  3050F  Uint16 TRANSFER_COUNT ; // Transfer Count Register
  3051F  int16 SRC_TRANSFER_STEP ; // Source Transfer Step Register
  3052F  int16 DST_TRANSFER_STEP ; // Destination Transfer Step Register
  3053F  Uint16 SRC_WRAP_SIZE ; // Source Wrap Size Register
  3054F  Uint16 SRC_WRAP_COUNT ; // Source Wrap Count Register
  3055F  int16 SRC_WRAP_STEP ; // Source Wrap Step Register
  3056F  Uint16 DST_WRAP_SIZE ; // Destination Wrap Size Register
  3057F  Uint16 DST_WRAP_COUNT ; // Destination Wrap Count Register
  3058F  int16 DST_WRAP_STEP ; // Destination Wrap Step Register
  3059F  Uint32 SRC_BEG_ADDR_SHADOW ; // Source Begin Address Shadow Register
  3060F  Uint32 SRC_ADDR_SHADOW ; // Source Address Shadow Register
  3061F  Uint32 SRC_BEG_ADDR_ACTIVE ; // Source Begin Address Active Register
  3062F  Uint32 SRC_ADDR_ACTIVE ; // Source Address Active Register
  3063F  Uint32 DST_BEG_ADDR_SHADOW ; // Destination Begin Address Shadow Register
  3064F  Uint32 DST_ADDR_SHADOW ; // Destination Address Shadow Register
  3065F  Uint32 DST_BEG_ADDR_ACTIVE ; // Destination Begin Address Active Register
  3066F  Uint32 DST_ADDR_ACTIVE ; // Destination Address Active Register
  3067F} ;
  3068F//----------------------------------------------------
  3069F// DMA Registers:
  3070F
  3071Fstruct DMA_REGS
  3072F{
  3073F  union DMACTRL_REG DMACTRL ; // DMA Control Register
  3074F  union DEBUGCTRL_REG DEBUGCTRL ; // Debug Control Register
  3075F  Uint16 rsvd0 ; // reserved
  3076F  Uint16 rsvd1 ; //
  3077F  union PRIORITYCTRL1_REG PRIORITYCTRL1 ; // Priority Control 1 Register
  3078F  Uint16 rsvd2 ; //
  3079F  union PRIORITYSTAT_REG PRIORITYSTAT ; // Priority Status Register
  3080F  Uint16 rsvd3 [ 25 ] ;
  3081F                     //
  3082F  struct CH_REGS CH1 ; // DMA Channel 1 Registers
  3083F  struct CH_REGS CH2 ; // DMA Channel 2 Registers
  3084F  struct CH_REGS CH3 ; // DMA Channel 3 Registers
  3085F  struct CH_REGS CH4 ; // DMA Channel 4 Registers
  3086F  struct CH_REGS CH5 ; // DMA Channel 5 Registers
  3087F  struct CH_REGS CH6 ; // DMA Channel 6 Registers
  3088F} ;
  3089F//---------------------------------------------------------------------------
  3090F// External References & Function Declarations:
  3091F//
  3092F
  3093Fextern volatile struct DMA_REGS
  3094F  DmaRegs ;
  3095F       /* extern "C" */
  3096F       // end of DSP2833x_DMA_H definition
  3097F//===========================================================================
  3098F// End of file.
  3099F//===========================================================================
  3100F 
  3101F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DMA.h*/
  3102F/*   CLOSE_FILE Include File */
  3103F 
  3104F                // DMA Registers
  3105F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EPwm.h */
  3106F// TI File $Revision: /main/1 $
  3107F// Checkin $Date: August 18, 2006 13:52:10 $
  3108F//###########################################################################
  3109F//
  3110F// FILE: DSP2833x_EPwm.h
  3111F//
  3112F// TITLE: DSP2833x Enhanced PWM Module Register Bit Definitions.
  3113F//
  3114F//###########################################################################
  3115F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  3116F// $Release Date: August 4, 2009 $
  3117F//###########################################################################
  3118F#ifndef DSP2833x_EPWM_H
  3119F#define DSP2833x_EPWM_H
  3120F//----------------------------------------------------
  3121F// Time base control register bit definitions */
  3122F
  3123Fstruct TBCTL_BITS
  3124F{                   // bits description
  3125F  Uint16 CTRMODE : 2 ;
  3126F                     // 1:0 Counter Mode
  3127F  Uint16 PHSEN : 1 ;
  3128F                   // 2 Phase load enable
  3129F  Uint16 PRDLD : 1 ;
  3130F                   // 3 Active period load
  3131F  Uint16 SYNCOSEL : 2 ;
  3132F                      // 5:4 Sync output select
  3133F  Uint16 SWFSYNC : 1 ;
  3134F                     // 6 Software force sync pulse
  3135F  Uint16 HSPCLKDIV : 3 ;
  3136F                       // 9:7 High speed time pre-scale
  3137F  Uint16 CLKDIV : 3 ;
  3138F                    // 12:10 Timebase clock pre-scale
  3139F  Uint16 PHSDIR : 1 ;
  3140F                    // 13 Phase Direction
  3141F  Uint16 FREE_SOFT : 2 ;
  3142F                       // 15:14 Emulation mode
  3143F} ;
  3144F
  3145Funion TBCTL_REG
  3146F{
  3147F  Uint16 all ;
  3148F  struct TBCTL_BITS bit ;
  3149F} ;
  3150F//----------------------------------------------------
  3151F// Time base status register bit definitions */
  3152F
  3153Fstruct TBSTS_BITS
  3154F{                   // bits description
  3155F  Uint16 CTRDIR : 1 ;
  3156F                    // 0 Counter direction status
  3157F  Uint16 SYNCI : 1 ;
  3158F                   // 1 External input sync status
  3159F  Uint16 CTRMAX : 1 ;
  3160F                    // 2 Counter max latched status
  3161F  Uint16 rsvd1 : 13 ;
  3162F                    // 15:3 reserved
  3163F} ;
  3164F
  3165Funion TBSTS_REG
  3166F{
  3167F  Uint16 all ;
  3168F  struct TBSTS_BITS bit ;
  3169F} ;
  3170F//----------------------------------------------------
  3171F// Compare control register bit definitions */
  3172F
  3173Fstruct CMPCTL_BITS
  3174F{                    // bits description
  3175F  Uint16 LOADAMODE : 2 ;
  3176F                       // 0:1 Active compare A
  3177F  Uint16 LOADBMODE : 2 ;
  3178F                       // 3:2 Active compare B
  3179F  Uint16 SHDWAMODE : 1 ;
  3180F                       // 4 Compare A block operating mode
  3181F  Uint16 rsvd1 : 1 ;
  3182F                   // 5 reserved
  3183F  Uint16 SHDWBMODE : 1 ;
  3184F                       // 6 Compare B block operating mode
  3185F  Uint16 rsvd2 : 1 ;
  3186F                   // 7 reserved
  3187F  Uint16 SHDWAFULL : 1 ;
  3188F                       // 8 Compare A Shadow registers full Status
  3189F  Uint16 SHDWBFULL : 1 ;
  3190F                       // 9 Compare B Shadow registers full Status
  3191F  Uint16 rsvd3 : 6 ;
  3192F                   // 15:10 reserved
  3193F} ;
  3194F
  3195Funion CMPCTL_REG
  3196F{
  3197F  Uint16 all ;
  3198F  struct CMPCTL_BITS bit ;
  3199F} ;
  3200F//----------------------------------------------------
  3201F// Action qualifier register bit definitions */
  3202F
  3203Fstruct AQCTL_BITS
  3204F{                   // bits description
  3205F  Uint16 ZRO : 2 ;
  3206F                 // 1:0 Action Counter = Zero
  3207F  Uint16 PRD : 2 ;
  3208F                 // 3:2 Action Counter = Period
  3209F  Uint16 CAU : 2 ;
  3210F                 // 5:4 Action Counter = Compare A up
  3211F  Uint16 CAD : 2 ;
  3212F                 // 7:6 Action Counter = Compare A down
  3213F  Uint16 CBU : 2 ;
  3214F                 // 9:8 Action Counter = Compare B up
  3215F  Uint16 CBD : 2 ;
  3216F                 // 11:10 Action Counter = Compare B down
  3217F  Uint16 rsvd : 4 ;
  3218F                  // 15:12 reserved
  3219F} ;
  3220F
  3221Funion AQCTL_REG
  3222F{
  3223F  Uint16 all ;
  3224F  struct AQCTL_BITS bit ;
  3225F} ;
  3226F//----------------------------------------------------
  3227F// Action qualifier SW force register bit definitions */
  3228F
  3229Fstruct AQSFRC_BITS
  3230F{                    // bits description
  3231F  Uint16 ACTSFA : 2 ;
  3232F                    // 1:0 Action when One-time SW Force A invoked
  3233F  Uint16 OTSFA : 1 ;
  3234F                   // 2 One-time SW Force A output
  3235F  Uint16 ACTSFB : 2 ;
  3236F                    // 4:3 Action when One-time SW Force B invoked
  3237F  Uint16 OTSFB : 1 ;
  3238F                   // 5 One-time SW Force A output
  3239F  Uint16 RLDCSF : 2 ;
  3240F                    // 7:6 Reload from Shadow options
  3241F  Uint16 rsvd1 : 8 ;
  3242F                   // 15:8 reserved
  3243F} ;
  3244F
  3245Funion AQSFRC_REG
  3246F{
  3247F  Uint16 all ;
  3248F  struct AQSFRC_BITS bit ;
  3249F} ;
  3250F//----------------------------------------------------
  3251F// Action qualifier continuous SW force register bit definitions */
  3252F
  3253Fstruct AQCSFRC_BITS
  3254F{                     // bits description
  3255F  Uint16 CSFA : 2 ;
  3256F                  // 1:0 Continuous Software Force on output A
  3257F  Uint16 CSFB : 2 ;
  3258F                  // 3:2 Continuous Software Force on output B
  3259F  Uint16 rsvd1 : 12 ;
  3260F                    // 15:4 reserved
  3261F} ;
  3262F
  3263Funion AQCSFRC_REG
  3264F{
  3265F  Uint16 all ;
  3266F  struct AQCSFRC_BITS bit ;
  3267F} ;
  3268F// As of version 1.1
  3269F// Changed the MODE bit-field to OUT_MODE
  3270F// Added the bit-field IN_MODE
  3271F// This corresponds to changes in silicon as of F2833x devices
  3272F// Rev A silicon.
  3273F//----------------------------------------------------
  3274F// Dead-band generator control register bit definitions
  3275F
  3276Fstruct DBCTL_BITS
  3277F{                   // bits description
  3278F  Uint16 OUT_MODE : 2 ;  // 1:0 Dead Band Output Mode Control
  3279F  Uint16 POLSEL : 2 ;
  3280F                    // 3:2 Polarity Select Control
  3281F  Uint16 IN_MODE : 2 ;
  3282F                     // 5:4 Dead Band Input Select Mode Control
  3283F  Uint16 rsvd1 : 10 ;
  3284F                    // 15:4 reserved
  3285F} ;
  3286F
  3287Funion DBCTL_REG
  3288F{
  3289F  Uint16 all ;
  3290F  struct DBCTL_BITS bit ;
  3291F} ;
  3292F//----------------------------------------------------
  3293F// Trip zone select register bit definitions
  3294F
  3295Fstruct TZSEL_BITS
  3296F{                   // bits description
  3297F  Uint16 CBC1 : 1 ;
  3298F                  // 0 TZ1 CBC select
  3299F  Uint16 CBC2 : 1 ;
  3300F                  // 1 TZ2 CBC select
  3301F  Uint16 CBC3 : 1 ;
  3302F                  // 2 TZ3 CBC select
  3303F  Uint16 CBC4 : 1 ;
  3304F                  // 3 TZ4 CBC select
  3305F  Uint16 CBC5 : 1 ;
  3306F                  // 4 TZ5 CBC select
  3307F  Uint16 CBC6 : 1 ;
  3308F                  // 5 TZ6 CBC select
  3309F  Uint16 rsvd1 : 2 ;
  3310F                   // 7:6 reserved
  3311F  Uint16 OSHT1 : 1 ;
  3312F                   // 8 One-shot TZ1 select
  3313F  Uint16 OSHT2 : 1 ;
  3314F                   // 9 One-shot TZ2 select
  3315F  Uint16 OSHT3 : 1 ;
  3316F                   // 10 One-shot TZ3 select
  3317F  Uint16 OSHT4 : 1 ;
  3318F                   // 11 One-shot TZ4 select
  3319F  Uint16 OSHT5 : 1 ;
  3320F                   // 12 One-shot TZ5 select
  3321F  Uint16 OSHT6 : 1 ;
  3322F                   // 13 One-shot TZ6 select
  3323F  Uint16 rsvd2 : 2 ;
  3324F                   // 15:14 reserved
  3325F} ;
  3326F
  3327Funion TZSEL_REG
  3328F{
  3329F  Uint16 all ;
  3330F  struct TZSEL_BITS bit ;
  3331F} ;
  3332F//----------------------------------------------------
  3333F// Trip zone control register bit definitions */
  3334F
  3335Fstruct TZCTL_BITS
  3336F{                   // bits description
  3337F  Uint16 TZA : 2 ;
  3338F                 // 1:0 TZ1 to TZ6 Trip Action On EPWMxA
  3339F  Uint16 TZB : 2 ;
  3340F                 // 3:2 TZ1 to TZ6 Trip Action On EPWMxB
  3341F  Uint16 rsvd : 12 ;
  3342F                   // 15:4 reserved
  3343F} ;
  3344F
  3345Funion TZCTL_REG
  3346F{
  3347F  Uint16 all ;
  3348F  struct TZCTL_BITS bit ;
  3349F} ;
  3350F//----------------------------------------------------
  3351F// Trip zone control register bit definitions */
  3352F
  3353Fstruct TZEINT_BITS
  3354F{                    // bits description
  3355F  Uint16 rsvd1 : 1 ;
  3356F                   // 0 reserved
  3357F  Uint16 CBC : 1 ;
  3358F                 // 1 Trip Zones Cycle By Cycle Int Enable
  3359F  Uint16 OST : 1 ;
  3360F                 // 2 Trip Zones One Shot Int Enable
  3361F  Uint16 rsvd2 : 13 ;
  3362F                    // 15:3 reserved
  3363F} ;
  3364F
  3365Funion TZEINT_REG
  3366F{
  3367F  Uint16 all ;
  3368F  struct TZEINT_BITS bit ;
  3369F} ;
  3370F//----------------------------------------------------
  3371F// Trip zone flag register bit definitions */
  3372F
  3373Fstruct TZFLG_BITS
  3374F{                   // bits description
  3375F  Uint16 INT : 1 ;
  3376F                 // 0 Global status
  3377F  Uint16 CBC : 1 ;
  3378F                 // 1 Trip Zones Cycle By Cycle Int
  3379F  Uint16 OST : 1 ;
  3380F                 // 2 Trip Zones One Shot Int
  3381F  Uint16 rsvd2 : 13 ;
  3382F                    // 15:3 reserved
  3383F} ;
  3384F
  3385Funion TZFLG_REG
  3386F{
  3387F  Uint16 all ;
  3388F  struct TZFLG_BITS bit ;
  3389F} ;
  3390F//----------------------------------------------------
  3391F// Trip zone flag clear register bit definitions */
  3392F
  3393Fstruct TZCLR_BITS
  3394F{                   // bits description
  3395F  Uint16 INT : 1 ;
  3396F                 // 0 Global status
  3397F  Uint16 CBC : 1 ;
  3398F                 // 1 Trip Zones Cycle By Cycle Int
  3399F  Uint16 OST : 1 ;
  3400F                 // 2 Trip Zones One Shot Int
  3401F  Uint16 rsvd2 : 13 ;
  3402F                    // 15:3 reserved
  3403F} ;
  3404F
  3405Funion TZCLR_REG
  3406F{
  3407F  Uint16 all ;
  3408F  struct TZCLR_BITS bit ;
  3409F} ;
  3410F//----------------------------------------------------
  3411F// Trip zone flag force register bit definitions */
  3412F
  3413Fstruct TZFRC_BITS
  3414F{                   // bits description
  3415F  Uint16 rsvd1 : 1 ;
  3416F                   // 0 reserved
  3417F  Uint16 CBC : 1 ;
  3418F                 // 1 Trip Zones Cycle By Cycle Int
  3419F  Uint16 OST : 1 ;
  3420F                 // 2 Trip Zones One Shot Int
  3421F  Uint16 rsvd2 : 13 ;
  3422F                    // 15:3 reserved
  3423F} ;
  3424F
  3425Funion TZFRC_REG
  3426F{
  3427F  Uint16 all ;
  3428F  struct TZFRC_BITS bit ;
  3429F} ;
  3430F//----------------------------------------------------
  3431F// Event trigger select register bit definitions */
  3432F
  3433Fstruct ETSEL_BITS
  3434F{                   // bits description
  3435F  Uint16 INTSEL : 3 ;
  3436F                    // 2:0 EPWMxINTn Select
  3437F  Uint16 INTEN : 1 ;
  3438F                   // 3 EPWMxINTn Enable
  3439F  Uint16 rsvd1 : 4 ;
  3440F                   // 7:4 reserved
  3441F  Uint16 SOCASEL : 3 ;
  3442F                     // 10:8 Start of conversion A Select
  3443F  Uint16 SOCAEN : 1 ;
  3444F                    // 11 Start of conversion A Enable
  3445F  Uint16 SOCBSEL : 3 ;
  3446F                     // 14:12 Start of conversion B Select
  3447F  Uint16 SOCBEN : 1 ;
  3448F                    // 15 Start of conversion B Enable
  3449F} ;
  3450F
  3451Funion ETSEL_REG
  3452F{
  3453F  Uint16 all ;
  3454F  struct ETSEL_BITS bit ;
  3455F} ;
  3456F//----------------------------------------------------
  3457F// Event trigger pre-scale register bit definitions */
  3458F
  3459Fstruct ETPS_BITS
  3460F{                  // bits description
  3461F  Uint16 INTPRD : 2 ;
  3462F                    // 1:0 EPWMxINTn Period Select
  3463F  Uint16 INTCNT : 2 ;
  3464F                    // 3:2 EPWMxINTn Counter Register
  3465F  Uint16 rsvd1 : 4 ;
  3466F                   // 7:4 reserved
  3467F  Uint16 SOCAPRD : 2 ;
  3468F                     // 9:8 EPWMxSOCA Period Select
  3469F  Uint16 SOCACNT : 2 ;
  3470F                     // 11:10 EPWMxSOCA Counter Register
  3471F  Uint16 SOCBPRD : 2 ;
  3472F                     // 13:12 EPWMxSOCB Period Select
  3473F  Uint16 SOCBCNT : 2 ;
  3474F                     // 15:14 EPWMxSOCB Counter Register
  3475F} ;
  3476F
  3477Funion ETPS_REG
  3478F{
  3479F  Uint16 all ;
  3480F  struct ETPS_BITS bit ;
  3481F} ;
  3482F//----------------------------------------------------
  3483F// Event trigger Flag register bit definitions */
  3484F
  3485Fstruct ETFLG_BITS
  3486F{                   // bits description
  3487F  Uint16 INT : 1 ;
  3488F                 // 0   EPWMxINTn Flag
  3489F  Uint16 rsvd1 : 1 ;
  3490F                   // 1 reserved
  3491F  Uint16 SOCA : 1 ;
  3492F                  // 2  EPWMxSOCA Flag
  3493F  Uint16 SOCB : 1 ;
  3494F                  // 3  EPWMxSOCB Flag
  3495F  Uint16 rsvd2 : 12 ;
  3496F                    // 15:4     reserved
  3497F} ;
  3498F
  3499Funion ETFLG_REG
  3500F{
  3501F  Uint16 all ;
  3502F  struct ETFLG_BITS bit ;
  3503F} ;
  3504F//----------------------------------------------------
  3505F// Event trigger Clear register bit definitions */
  3506F
  3507Fstruct ETCLR_BITS
  3508F{                   // bits description
  3509F  Uint16 INT : 1 ;
  3510F                 // 0   EPWMxINTn Clear
  3511F  Uint16 rsvd1 : 1 ;
  3512F                   // 1 reserved
  3513F  Uint16 SOCA : 1 ;
  3514F                  // 2  EPWMxSOCA Clear
  3515F  Uint16 SOCB : 1 ;
  3516F                  // 3  EPWMxSOCB Clear
  3517F  Uint16 rsvd2 : 12 ;
  3518F                    // 15:4     reserved
  3519F} ;
  3520F
  3521Funion ETCLR_REG
  3522F{
  3523F  Uint16 all ;
  3524F  struct ETCLR_BITS bit ;
  3525F} ;
  3526F//----------------------------------------------------
  3527F// Event trigger Force register bit definitions */
  3528F
  3529Fstruct ETFRC_BITS
  3530F{                   // bits description
  3531F  Uint16 INT : 1 ;
  3532F                 // 0   EPWMxINTn Force
  3533F  Uint16 rsvd1 : 1 ;
  3534F                   // 1 reserved
  3535F  Uint16 SOCA : 1 ;
  3536F                  // 2  EPWMxSOCA Force
  3537F  Uint16 SOCB : 1 ;
  3538F                  // 3  EPWMxSOCB Force
  3539F  Uint16 rsvd2 : 12 ;
  3540F                    // 15:4     reserved
  3541F} ;
  3542F
  3543Funion ETFRC_REG
  3544F{
  3545F  Uint16 all ;
  3546F  struct ETFRC_BITS bit ;
  3547F} ;
  3548F//----------------------------------------------------
  3549F// PWM chopper control register bit definitions */
  3550F
  3551Fstruct PCCTL_BITS
  3552F{                   // bits description
  3553F  Uint16 CHPEN : 1 ;
  3554F                   // 0 PWM chopping enable
  3555F  Uint16 OSHTWTH : 4 ;
  3556F                     // 4:1 One-shot pulse width
  3557F  Uint16 CHPFREQ : 3 ;
  3558F                     // 7:5 Chopping clock frequency
  3559F  Uint16 CHPDUTY : 3 ;
  3560F                     // 10:8 Chopping clock Duty cycle
  3561F  Uint16 rsvd1 : 5 ;
  3562F                   // 15:11 reserved
  3563F} ;
  3564F
  3565Funion PCCTL_REG
  3566F{
  3567F  Uint16 all ;
  3568F  struct PCCTL_BITS bit ;
  3569F} ;
  3570F
  3571Fstruct HRCNFG_BITS
  3572F{                       // bits description
  3573F  Uint16 EDGMODE : 2 ;  // 1:0 Edge Mode select Bits
  3574F  Uint16 CTLMODE : 1 ;  // 2 Control mode Select Bit
  3575F  Uint16 HRLOAD : 1 ;   // 3 Shadow mode Select Bit
  3576F  Uint16 rsvd1 : 12 ;   // 15:4 reserved
  3577F} ;
  3578F
  3579Funion HRCNFG_REG
  3580F{
  3581F  Uint16 all ;
  3582F  struct HRCNFG_BITS bit ;
  3583F} ;
  3584F
  3585Fstruct TBPHS_HRPWM_REG
  3586F{                               // bits description
  3587F  Uint16 TBPHSHR ;      // 15:0 Extension register for HRPWM Phase (8 bits)
  3588F  Uint16 TBPHS ; // 31:16 Phase offset register
  3589F} ;
  3590F
  3591Funion TBPHS_HRPWM_GROUP
  3592F{
  3593F  Uint32 all ;
  3594F  struct TBPHS_HRPWM_REG half ;
  3595F} ;
  3596F
  3597Fstruct CMPA_HRPWM_REG
  3598F{                               // bits description
  3599F  Uint16 CMPAHR ;        // 15:0 Extension register for HRPWM compare (8 bits)
  3600F  Uint16 CMPA ; // 31:16 Compare A reg
  3601F} ;
  3602F
  3603Funion CMPA_HRPWM_GROUP
  3604F{
  3605F  Uint32 all ;
  3606F  struct CMPA_HRPWM_REG half ;
  3607F} ;
  3608F
  3609Fstruct EPWM_REGS
  3610F{
  3611F  union TBCTL_REG TBCTL ; //
  3612F  union TBSTS_REG TBSTS ; //
  3613F  union TBPHS_HRPWM_GROUP TBPHS ; // Union of TBPHS:TBPHSHR
  3614F  Uint16 TBCTR ; // Counter
  3615F  Uint16 TBPRD ; // Period register set
  3616F  Uint16 rsvd1 ; //
  3617F  union CMPCTL_REG CMPCTL ; // Compare control
  3618F  union CMPA_HRPWM_GROUP CMPA ; // Union of CMPA:CMPAHR
  3619F  Uint16 CMPB ; // Compare B reg
  3620F  union AQCTL_REG AQCTLA ; // Action qual output A
  3621F  union AQCTL_REG AQCTLB ; // Action qual output B
  3622F  union AQSFRC_REG AQSFRC ; // Action qual SW force
  3623F  union AQCSFRC_REG AQCSFRC ; // Action qualifier continuous SW force
  3624F  union DBCTL_REG DBCTL ; // Dead-band control
  3625F  Uint16 DBRED ; // Dead-band rising edge delay
  3626F  Uint16 DBFED ; // Dead-band falling edge delay
  3627F  union TZSEL_REG TZSEL ; // Trip zone select
  3628F  Uint16 rsvd2 ;
  3629F  union TZCTL_REG TZCTL ; // Trip zone control
  3630F  union TZEINT_REG TZEINT ; // Trip zone interrupt enable
  3631F  union TZFLG_REG TZFLG ; // Trip zone interrupt flags
  3632F  union TZCLR_REG TZCLR ; // Trip zone clear
  3633F  union TZFRC_REG TZFRC ;       // Trip zone force interrupt
  3634F  union ETSEL_REG ETSEL ; // Event trigger selection
  3635F  union ETPS_REG ETPS ; // Event trigger pre-scaler
  3636F  union ETFLG_REG ETFLG ; // Event trigger flags
  3637F  union ETCLR_REG ETCLR ; // Event trigger clear
  3638F  union ETFRC_REG ETFRC ; // Event trigger force
  3639F  union PCCTL_REG PCCTL ; // PWM chopper control
  3640F  Uint16 rsvd3 ; //
  3641F  union HRCNFG_REG HRCNFG ; // HRPWM Config Reg
  3642F} ;
  3643F//---------------------------------------------------------------------------
  3644F// External References & Function Declarations:
  3645F//
  3646F
  3647Fextern volatile struct EPWM_REGS
  3648F  EPwm1Regs ;
  3649F
  3650Fextern volatile struct EPWM_REGS
  3651F  EPwm2Regs ;
  3652F
  3653Fextern volatile struct EPWM_REGS
  3654F  EPwm3Regs ;
  3655F
  3656Fextern volatile struct EPWM_REGS
  3657F  EPwm4Regs ;
  3658F
  3659Fextern volatile struct EPWM_REGS
  3660F  EPwm5Regs ;
  3661F
  3662Fextern volatile struct EPWM_REGS
  3663F  EPwm6Regs ;
  3664F       /* extern "C" */
  3665F       // end of DSP2833x_EPWM_H definition
  3666F//===========================================================================
  3667F// End of file.
  3668F//===========================================================================
  3669F 
  3670F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EPwm.h*/
  3671F/*   CLOSE_FILE Include File */
  3672F 
  3673F               // Enhanced PWM
  3674F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EQep.h */
  3675F// TI File $Revision: /main/1 $
  3676F// Checkin $Date: August 18, 2006 13:52:13 $
  3677F//###########################################################################
  3678F//
  3679F// FILE: DSP2833x_EQep.h
  3680F//
  3681F// TITLE: DSP2833x Enhanced Quadrature Encoder Pulse Module
  3682F// Register Bit Definitions.
  3683F//
  3684F//###########################################################################
  3685F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  3686F// $Release Date: August 4, 2009 $
  3687F//###########################################################################
  3688F#ifndef DSP2833x_EQEP_H
  3689F#define DSP2833x_EQEP_H
  3690F//----------------------------------------------------
  3691F// Capture decoder control register bit definitions */
  3692F
  3693Fstruct QDECCTL_BITS
  3694F{                     // bits description
  3695F  Uint16 rsvd1 : 5 ;
  3696F                   // 4:0 reserved
  3697F  Uint16 QSP : 1 ;
  3698F                 // 5 QEPS input polarity
  3699F  Uint16 QIP : 1 ;
  3700F                 // 6 QEPI input polarity
  3701F  Uint16 QBP : 1 ;
  3702F                 // 7 QEPB input polarity
  3703F  Uint16 QAP : 1 ;
  3704F                 // 8 QEPA input polarity
  3705F  Uint16 IGATE : 1 ;
  3706F                   // 9 Index pulse gating option
  3707F  Uint16 SWAP : 1 ;
  3708F                  // 10 CLK/DIR signal source for Position Counter
  3709F  Uint16 XCR : 1 ;
  3710F                 // 11 External clock rate
  3711F  Uint16 SPSEL : 1 ;
  3712F                   // 12 Sync output pin select
  3713F  Uint16 SOEN : 1 ;
  3714F                  // 13 Enable position compare sync
  3715F  Uint16 QSRC : 2 ;
  3716F                  // 15:14 Position counter source
  3717F} ;
  3718F
  3719Funion QDECCTL_REG
  3720F{
  3721F  Uint16 all ;
  3722F  struct QDECCTL_BITS bit ;
  3723F} ;
  3724F//----------------------------------------------------
  3725F// QEP control register bit definitions */
  3726F
  3727Fstruct QEPCTL_BITS
  3728F{                    // bits description
  3729F  Uint16 WDE : 1 ;
  3730F                 // 0 QEP watchdog enable
  3731F  Uint16 UTE : 1 ;
  3732F                 // 1 QEP unit timer enable
  3733F  Uint16 QCLM : 1 ;
  3734F                  // 2 QEP capture latch mode
  3735F  Uint16 QPEN : 1 ;
  3736F                  // 3 Quadrature position counter enable
  3737F  Uint16 IEL : 2 ;
  3738F                 // 5:4 Index event latch
  3739F  Uint16 SEL : 1 ;
  3740F                 // 6 Strobe event latch
  3741F  Uint16 SWI : 1 ;
  3742F                 // 7 Software init position counter
  3743F  Uint16 IEI : 2 ;
  3744F                 // 9:8 Index event init of position count
  3745F  Uint16 SEI : 2 ;
  3746F                 // 11:10 Strobe event init
  3747F  Uint16 PCRM : 2 ;
  3748F                  // 13:12 Position counter reset
  3749F  Uint16 FREE_SOFT : 2 ;
  3750F                       // 15:14 Emulation mode
  3751F} ;
  3752F
  3753Funion QEPCTL_REG
  3754F{
  3755F  Uint16 all ;
  3756F  struct QEPCTL_BITS bit ;
  3757F} ;
  3758F//----------------------------------------------------
  3759F// Quadrature capture control register bit definitions */
  3760F
  3761Fstruct QCAPCTL_BITS
  3762F{                     // bits description
  3763F  Uint16 UPPS : 4 ;
  3764F                  // 3:0 Unit position pre-scale
  3765F  Uint16 CCPS : 3 ;
  3766F                  // 6:4 QEP capture timer pre-scale
  3767F  Uint16 rsvd1 : 8 ;
  3768F                   // 14:7 reserved
  3769F  Uint16 CEN : 1 ;
  3770F                 // 15 Enable QEP capture
  3771F} ;
  3772F
  3773Funion QCAPCTL_REG
  3774F{
  3775F  Uint16 all ;
  3776F  struct QCAPCTL_BITS bit ;
  3777F} ;
  3778F//----------------------------------------------------
  3779F// Position compare control register bit definitions */
  3780F
  3781Fstruct QPOSCTL_BITS
  3782F{                     // bits description
  3783F  Uint16 PCSPW : 12 ;
  3784F                    // 11:0 Position compare sync pulse width
  3785F  Uint16 PCE : 1 ;
  3786F                 // 12 Position compare enable/disable
  3787F  Uint16 PCPOL : 1 ;
  3788F                   // 13 Polarity of sync output
  3789F  Uint16 PCLOAD : 1 ;
  3790F                    // 14 Position compare of shadow load
  3791F  Uint16 PCSHDW : 1 ;
  3792F                    // 15 Position compare shadow enable
  3793F} ;
  3794F
  3795Funion QPOSCTL_REG
  3796F{
  3797F  Uint16 all ;
  3798F  struct QPOSCTL_BITS bit ;
  3799F} ;
  3800F//----------------------------------------------------
  3801F// QEP interrupt control register bit definitions */
  3802F
  3803Fstruct QEINT_BITS
  3804F{                   // bits description
  3805F  Uint16 rsvd1 : 1 ;
  3806F                   // 0 reserved
  3807F  Uint16 PCE : 1 ;
  3808F                 // 1 Position counter error
  3809F  Uint16 QPE : 1 ;
  3810F                 // 2 Quadrature phase error
  3811F  Uint16 QDC : 1 ;
  3812F                 // 3 Quadrature dir change
  3813F  Uint16 WTO : 1 ;
  3814F                 // 4 Watchdog timeout
  3815F  Uint16 PCU : 1 ;
  3816F                 // 5 Position counter underflow
  3817F  Uint16 PCO : 1 ;
  3818F                 // 6 Position counter overflow
  3819F  Uint16 PCR : 1 ;
  3820F                 // 7 Position compare ready
  3821F  Uint16 PCM : 1 ;
  3822F                 // 8 Position compare match
  3823F  Uint16 SEL : 1 ;
  3824F                 // 9 Strobe event latch
  3825F  Uint16 IEL : 1 ;
  3826F                 // 10 Event latch
  3827F  Uint16 UTO : 1 ;
  3828F                 // 11 Unit timeout
  3829F  Uint16 rsvd2 : 4 ;
  3830F                   // 15:12 reserved
  3831F} ;
  3832F
  3833Funion QEINT_REG
  3834F{
  3835F  Uint16 all ;
  3836F  struct QEINT_BITS bit ;
  3837F} ;
  3838F//----------------------------------------------------
  3839F// QEP interrupt status register bit definitions */
  3840F
  3841Fstruct QFLG_BITS
  3842F{                  // bits description
  3843F  Uint16 INT : 1 ;
  3844F                 // 0 Global interrupt
  3845F  Uint16 PCE : 1 ;
  3846F                 // 1 Position counter error
  3847F  Uint16 PHE : 1 ;
  3848F                 // 2 Quadrature phase error
  3849F  Uint16 QDC : 1 ;
  3850F                 // 3 Quadrature dir change
  3851F  Uint16 WTO : 1 ;
  3852F                 // 4 Watchdog timeout
  3853F  Uint16 PCU : 1 ;
  3854F                 // 5 Position counter underflow
  3855F  Uint16 PCO : 1 ;
  3856F                 // 6 Position counter overflow
  3857F  Uint16 PCR : 1 ;
  3858F                 // 7 Position compare ready
  3859F  Uint16 PCM : 1 ;
  3860F                 // 8 Position compare match
  3861F  Uint16 SEL : 1 ;
  3862F                 // 9 Strobe event latch
  3863F  Uint16 IEL : 1 ;
  3864F                 // 10 Event latch
  3865F  Uint16 UTO : 1 ;
  3866F                 // 11 Unit timeout
  3867F  Uint16 rsvd2 : 4 ;
  3868F                   // 15:12 reserved
  3869F} ;
  3870F
  3871Funion QFLG_REG
  3872F{
  3873F  Uint16 all ;
  3874F  struct QFLG_BITS bit ;
  3875F} ;
  3876F//----------------------------------------------------
  3877F// QEP interrupt force register bit definitions */
  3878F
  3879Fstruct QFRC_BITS
  3880F{                  // bits description
  3881F  Uint16 reserved : 1 ;
  3882F                      // 0 Reserved
  3883F  Uint16 PCE : 1 ;
  3884F                 // 1 Position counter error
  3885F  Uint16 PHE : 1 ;
  3886F                 // 2 Quadrature phase error
  3887F  Uint16 QDC : 1 ;
  3888F                 // 3 Quadrature dir change
  3889F  Uint16 WTO : 1 ;
  3890F                 // 4 Watchdog timeout
  3891F  Uint16 PCU : 1 ;
  3892F                 // 5 Position counter underflow
  3893F  Uint16 PCO : 1 ;
  3894F                 // 6 Position counter overflow
  3895F  Uint16 PCR : 1 ;
  3896F                 // 7 Position compare ready
  3897F  Uint16 PCM : 1 ;
  3898F                 // 8 Position compare match
  3899F  Uint16 SEL : 1 ;
  3900F                 // 9 Strobe event latch
  3901F  Uint16 IEL : 1 ;
  3902F                 // 10 Event latch
  3903F  Uint16 UTO : 1 ;
  3904F                 // 11 Unit timeout
  3905F  Uint16 rsvd2 : 4 ;
  3906F                   // 15:12 reserved
  3907F} ;
  3908F
  3909Funion QFRC_REG
  3910F{
  3911F  Uint16 all ;
  3912F  struct QFRC_BITS bit ;
  3913F} ;
  3914F// V1.1 Added UPEVNT (bit 7) This reflects changes
  3915F// made as of F2833x Rev A devices
  3916F//----------------------------------------------------
  3917F// QEP status register bit definitions */
  3918F
  3919Fstruct QEPSTS_BITS
  3920F{                    // bits description
  3921F  Uint16 PCEF : 1 ;
  3922F                  // 0 Position counter error
  3923F  Uint16 FIMF : 1 ;
  3924F                  // 1 First index marker
  3925F  Uint16 CDEF : 1 ;
  3926F                  // 2 Capture direction error
  3927F  Uint16 COEF : 1 ;
  3928F                  // 3 Capture overflow error
  3929F  Uint16 QDLF : 1 ;
  3930F                  // 4 QEP direction latch
  3931F  Uint16 QDF : 1 ;
  3932F                 // 5 Quadrature direction
  3933F  Uint16 FIDF : 1 ;
  3934F                  // 6 Direction on first index marker
  3935F  Uint16 UPEVNT : 1 ;
  3936F                    // 7 Unit position event flag
  3937F  Uint16 rsvd1 : 8 ;
  3938F                   // 15:8 reserved
  3939F} ;
  3940F
  3941Funion QEPSTS_REG
  3942F{
  3943F  Uint16 all ;
  3944F  struct QEPSTS_BITS bit ;
  3945F} ;
  3946F//----------------------------------------------------
  3947F
  3948Fstruct EQEP_REGS
  3949F{
  3950F  Uint32 QPOSCNT ; // Position counter
  3951F  Uint32 QPOSINIT ; // Position counter init
  3952F  Uint32 QPOSMAX ; // Maximum position count
  3953F  Uint32 QPOSCMP ; // Position compare
  3954F  Uint32 QPOSILAT ; // Index position latch
  3955F  Uint32 QPOSSLAT ; // Strobe position latch
  3956F  Uint32 QPOSLAT ; // Position latch
  3957F  Uint32 QUTMR ; // Unit timer
  3958F  Uint32 QUPRD ; // Unit period
  3959F  Uint16 QWDTMR ; // QEP watchdog timer
  3960F  Uint16 QWDPRD ; // QEP watchdog period
  3961F  union QDECCTL_REG QDECCTL ; // Quadrature decoder control
  3962F  union QEPCTL_REG QEPCTL ; // QEP control
  3963F  union QCAPCTL_REG QCAPCTL ; // Quadrature capture control
  3964F  union QPOSCTL_REG QPOSCTL ; // Position compare control
  3965F  union QEINT_REG QEINT ; // QEP interrupt control
  3966F  union QFLG_REG QFLG ; // QEP interrupt flag
  3967F  union QFLG_REG QCLR ; // QEP interrupt clear
  3968F  union QFRC_REG QFRC ; // QEP interrupt force
  3969F  union QEPSTS_REG QEPSTS ; // QEP status
  3970F  Uint16 QCTMR ; // QEP capture timer
  3971F  Uint16 QCPRD ; // QEP capture period
  3972F  Uint16 QCTMRLAT ; // QEP capture latch
  3973F  Uint16 QCPRDLAT ; // QEP capture period latch
  3974F  Uint16 rsvd1 [ 30 ] ;
  3975F                     // reserved
  3976F} ;
  3977F//---------------------------------------------------------------------------
  3978F// GPI/O External References & Function Declarations:
  3979F//
  3980F
  3981Fextern volatile struct EQEP_REGS
  3982F  EQep1Regs ;
  3983F
  3984Fextern volatile struct EQEP_REGS
  3985F  EQep2Regs ;
  3986F       /* extern "C" */
  3987F       // end of DSP2833x_EQEP_H definition
  3988F//===========================================================================
  3989F// End of file.
  3990F//===========================================================================
  3991F 
  3992F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EQep.h*/
  3993F/*   CLOSE_FILE Include File */
  3994F 
  3995F               // Enhanced QEP
  3996F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Gpio.h */
  3997F// TI File $Revision: /main/4 $
  3998F// Checkin $Date: November 15, 2007 09:58:53 $
  3999F//###########################################################################
  4000F//
  4001F// FILE: DSP2833x_Gpio.h
  4002F//
  4003F// TITLE: DSP2833x General Purpose I/O Definitions.
  4004F//
  4005F//###########################################################################
  4006F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  4007F// $Release Date: August 4, 2009 $
  4008F//###########################################################################
  4009F#ifndef DSP2833x_GPIO_H
  4010F#define DSP2833x_GPIO_H
  4011F//----------------------------------------------------
  4012F// GPIO A control register bit definitions */
  4013F
  4014Ftypedef
  4015Fstruct GPACTRL_BITS
  4016F{                             // bits description
  4017F  Uint16 QUALPRD0 : 8 ;
  4018F                      // 7:0 Qual period
  4019F  Uint16 QUALPRD1 : 8 ;
  4020F                      // 15:8 Qual period
  4021F  Uint16 QUALPRD2 : 8 ;
  4022F                      // 23:16 Qual period
  4023F  Uint16 QUALPRD3 : 8 ;
  4024F                      // 31:24 Qual period
  4025F} GPACTRL_BITS ;
  4026F
  4027Ftypedef
  4028Funion GPACTRL_REG
  4029F{
  4030F  Uint32 all ;
  4031F  struct GPACTRL_BITS bit ;
  4032F} GPACTRL_REG ;
  4033F//----------------------------------------------------
  4034F// GPIO B control register bit definitions */
  4035F
  4036Ftypedef
  4037Fstruct GPBCTRL_BITS
  4038F{                             // bits description
  4039F  Uint16 QUALPRD0 : 8 ;
  4040F                      // 7:0 Qual period
  4041F  Uint16 QUALPRD1 : 8 ;
  4042F                      // 15:8 Qual period
  4043F  Uint16 QUALPRD2 : 8 ;
  4044F                      // 23:16 Qual period
  4045F  Uint16 QUALPRD3 : 8 ;
  4046F                      // 31:24
  4047F} GPBCTRL_BITS ;
  4048F
  4049Ftypedef
  4050Funion GPBCTRL_REG
  4051F{
  4052F  Uint32 all ;
  4053F  struct GPBCTRL_BITS bit ;
  4054F} GPBCTRL_REG ;
  4055F//----------------------------------------------------
  4056F// GPIO A Qual/MUX select register bit definitions */
  4057F
  4058Ftypedef
  4059Fstruct GPA1_BITS
  4060F{                          // bits description
  4061F  Uint16 GPIO0 : 2 ;
  4062F                   // 1:0 GPIO0
  4063F  Uint16 GPIO1 : 2 ;
  4064F                   // 3:2 GPIO1
  4065F  Uint16 GPIO2 : 2 ;
  4066F                   // 5:4 GPIO2
  4067F  Uint16 GPIO3 : 2 ;
  4068F                   // 7:6 GPIO3
  4069F  Uint16 GPIO4 : 2 ;
  4070F                   // 9:8 GPIO4
  4071F  Uint16 GPIO5 : 2 ;
  4072F                   // 11:10 GPIO5
  4073F  Uint16 GPIO6 : 2 ;
  4074F                   // 13:12 GPIO6
  4075F  Uint16 GPIO7 : 2 ;
  4076F                   // 15:14 GPIO7
  4077F  Uint16 GPIO8 : 2 ;
  4078F                   // 17:16 GPIO8
  4079F  Uint16 GPIO9 : 2 ;
  4080F                   // 19:18 GPIO9
  4081F  Uint16 GPIO10 : 2 ;
  4082F                    // 21:20 GPIO10
  4083F  Uint16 GPIO11 : 2 ;
  4084F                    // 23:22 GPIO11
  4085F  Uint16 GPIO12 : 2 ;
  4086F                    // 25:24 GPIO12
  4087F  Uint16 GPIO13 : 2 ;
  4088F                    // 27:26 GPIO13
  4089F  Uint16 GPIO14 : 2 ;
  4090F                    // 29:28 GPIO14
  4091F  Uint16 GPIO15 : 2 ;
  4092F                    // 31:30 GPIO15
  4093F} GPA1_BITS ;
  4094F
  4095Ftypedef
  4096Fstruct GPA2_BITS
  4097F{                          // bits description
  4098F  Uint16 GPIO16 : 2 ;
  4099F                    // 1:0 GPIO16
  4100F  Uint16 GPIO17 : 2 ;
  4101F                    // 3:2 GPIO17
  4102F  Uint16 GPIO18 : 2 ;
  4103F                    // 5:4 GPIO18
  4104F  Uint16 GPIO19 : 2 ;
  4105F                    // 7:6 GPIO19
  4106F  Uint16 GPIO20 : 2 ;
  4107F                    // 9:8 GPIO20
  4108F  Uint16 GPIO21 : 2 ;
  4109F                    // 11:10 GPIO21
  4110F  Uint16 GPIO22 : 2 ;
  4111F                    // 13:12 GPIO22
  4112F  Uint16 GPIO23 : 2 ;
  4113F                    // 15:14 GPIO23
  4114F  Uint16 GPIO24 : 2 ;
  4115F                    // 17:16 GPIO24
  4116F  Uint16 GPIO25 : 2 ;
  4117F                    // 19:18 GPIO25
  4118F  Uint16 GPIO26 : 2 ;
  4119F                    // 21:20 GPIO26
  4120F  Uint16 GPIO27 : 2 ;
  4121F                    // 23:22 GPIO27
  4122F  Uint16 GPIO28 : 2 ;
  4123F                    // 25:24 GPIO28
  4124F  Uint16 GPIO29 : 2 ;
  4125F                    // 27:26 GPIO29
  4126F  Uint16 GPIO30 : 2 ;
  4127F                    // 29:28 GPIO30
  4128F  Uint16 GPIO31 : 2 ;
  4129F                    // 31:30 GPIO31
  4130F} GPA2_BITS ;
  4131F
  4132Ftypedef
  4133Fstruct GPB1_BITS
  4134F{                          // bits description
  4135F  Uint16 GPIO32 : 2 ;
  4136F                    // 1:0 GPIO32
  4137F  Uint16 GPIO33 : 2 ;
  4138F                    // 3:2 GPIO33
  4139F  Uint16 GPIO34 : 2 ;
  4140F                    // 5:4 GPIO34
  4141F  Uint16 GPIO35 : 2 ;
  4142F                    // 7:6 GPIO35
  4143F  Uint16 GPIO36 : 2 ;
  4144F                    // 9:8 GPIO36
  4145F  Uint16 GPIO37 : 2 ;
  4146F                    // 11:10 GPIO37
  4147F  Uint16 GPIO38 : 2 ;
  4148F                    // 13:12 GPIO38
  4149F  Uint16 GPIO39 : 2 ;
  4150F                    // 15:14 GPIO39
  4151F  Uint16 GPIO40 : 2 ;
  4152F                    // 17:16 GPIO40
  4153F  Uint16 GPIO41 : 2 ;
  4154F                    // 19:16 GPIO41
  4155F  Uint16 GPIO42 : 2 ;
  4156F                    // 21:20 GPIO42
  4157F  Uint16 GPIO43 : 2 ;
  4158F                    // 23:22 GPIO43
  4159F  Uint16 GPIO44 : 2 ;
  4160F                    // 25:24 GPIO44
  4161F  Uint16 GPIO45 : 2 ;
  4162F                    // 27:26 GPIO45
  4163F  Uint16 GPIO46 : 2 ;
  4164F                    // 29:28 GPIO46
  4165F  Uint16 GPIO47 : 2 ;
  4166F                    // 31:30 GPIO47
  4167F} GPB1_BITS ;
  4168F
  4169Ftypedef
  4170Fstruct GPB2_BITS
  4171F{                          // bits description
  4172F  Uint16 GPIO48 : 2 ;
  4173F                    // 1:0 GPIO48
  4174F  Uint16 GPIO49 : 2 ;
  4175F                    // 3:2 GPIO49
  4176F  Uint16 GPIO50 : 2 ;
  4177F                    // 5:4 GPIO50
  4178F  Uint16 GPIO51 : 2 ;
  4179F                    // 7:6 GPIO51
  4180F  Uint16 GPIO52 : 2 ;
  4181F                    // 9:8 GPIO52
  4182F  Uint16 GPIO53 : 2 ;
  4183F                    // 11:10 GPIO53
  4184F  Uint16 GPIO54 : 2 ;
  4185F                    // 13:12 GPIO54
  4186F  Uint16 GPIO55 : 2 ;
  4187F                    // 15:14 GPIO55
  4188F  Uint16 GPIO56 : 2 ;
  4189F                    // 17:16 GPIO56
  4190F  Uint16 GPIO57 : 2 ;
  4191F                    // 19:18 GPIO57
  4192F  Uint16 GPIO58 : 2 ;
  4193F                    // 21:20 GPIO58
  4194F  Uint16 GPIO59 : 2 ;
  4195F                    // 23:22 GPIO59
  4196F  Uint16 GPIO60 : 2 ;
  4197F                    // 25:24 GPIO60
  4198F  Uint16 GPIO61 : 2 ;
  4199F                    // 27:26 GPIO61
  4200F  Uint16 GPIO62 : 2 ;
  4201F                    // 29:28 GPIO62
  4202F  Uint16 GPIO63 : 2 ;
  4203F                    // 31:30 GPIO63
  4204F} GPB2_BITS ;
  4205F
  4206Ftypedef
  4207Fstruct GPC1_BITS
  4208F{                          // bits description
  4209F  Uint16 GPIO64 : 2 ;
  4210F                    // 1:0 GPIO64
  4211F  Uint16 GPIO65 : 2 ;
  4212F                    // 3:2 GPIO65
  4213F  Uint16 GPIO66 : 2 ;
  4214F                    // 5:4 GPIO66
  4215F  Uint16 GPIO67 : 2 ;
  4216F                    // 7:6 GPIO67
  4217F  Uint16 GPIO68 : 2 ;
  4218F                    // 9:8 GPIO68
  4219F  Uint16 GPIO69 : 2 ;
  4220F                    // 11:10 GPIO69
  4221F  Uint16 GPIO70 : 2 ;
  4222F                    // 13:12 GPIO70
  4223F  Uint16 GPIO71 : 2 ;
  4224F                    // 15:14 GPIO71
  4225F  Uint16 GPIO72 : 2 ;
  4226F                    // 17:16 GPIO72
  4227F  Uint16 GPIO73 : 2 ;
  4228F                    // 19:18 GPIO73
  4229F  Uint16 GPIO74 : 2 ;
  4230F                    // 21:20 GPIO74
  4231F  Uint16 GPIO75 : 2 ;
  4232F                    // 23:22 GPIO75
  4233F  Uint16 GPIO76 : 2 ;
  4234F                    // 25:24 GPIO76
  4235F  Uint16 GPIO77 : 2 ;
  4236F                    // 27:26 GPIO77
  4237F  Uint16 GPIO78 : 2 ;
  4238F                    // 29:28 GPIO78
  4239F  Uint16 GPIO79 : 2 ;
  4240F                    // 31:30 GPIO79
  4241F} GPC1_BITS ;
  4242F
  4243Ftypedef
  4244Fstruct GPC2_BITS
  4245F{                          // bits description
  4246F  Uint16 GPIO80 : 2 ;
  4247F                    // 1:0 GPIO80
  4248F  Uint16 GPIO81 : 2 ;
  4249F                    // 3:2 GPIO81
  4250F  Uint16 GPIO82 : 2 ;
  4251F                    // 5:4 GPIO82
  4252F  Uint16 GPIO83 : 2 ;
  4253F                    // 7:6 GPIO83
  4254F  Uint16 GPIO84 : 2 ;
  4255F                    // 9:8 GPIO84
  4256F  Uint16 GPIO85 : 2 ;
  4257F                    // 11:10 GPIO85
  4258F  Uint16 GPIO86 : 2 ;
  4259F                    // 13:12 GPIO86
  4260F  Uint16 GPIO87 : 2 ;
  4261F                    // 15:14 GPIO87
  4262F  Uint16 rsvd : 16 ;
  4263F                   // 31:16 reserved
  4264F} GPC2_BITS ;
  4265F
  4266Ftypedef
  4267Funion GPA1_REG
  4268F{
  4269F  Uint32 all ;
  4270F  struct GPA1_BITS bit ;
  4271F} GPA1_REG ;
  4272F
  4273Ftypedef
  4274Funion GPA2_REG
  4275F{
  4276F  Uint32 all ;
  4277F  struct GPA2_BITS bit ;
  4278F} GPA2_REG ;
  4279F
  4280Ftypedef
  4281Funion GPB1_REG
  4282F{
  4283F  Uint32 all ;
  4284F  struct GPB1_BITS bit ;
  4285F} GPB1_REG ;
  4286F
  4287Ftypedef
  4288Funion GPB2_REG
  4289F{
  4290F  Uint32 all ;
  4291F  struct GPB2_BITS bit ;
  4292F} GPB2_REG ;
  4293F
  4294Ftypedef
  4295Funion GPC1_REG
  4296F{
  4297F  Uint32 all ;
  4298F  struct GPC1_BITS bit ;
  4299F} GPC1_REG ;
  4300F
  4301Ftypedef
  4302Funion GPC2_REG
  4303F{
  4304F  Uint32 all ;
  4305F  struct GPC2_BITS bit ;
  4306F} GPC2_REG ;
  4307F//----------------------------------------------------
  4308F// GPIO A DIR/TOGGLE/SET/CLEAR register bit definitions */
  4309F
  4310Ftypedef
  4311Fstruct GPADAT_BITS
  4312F{                            // bits description
  4313F  Uint16 GPIO0 : 1 ;
  4314F                   // 0 GPIO0
  4315F  Uint16 GPIO1 : 1 ;
  4316F                   // 1 GPIO1
  4317F  Uint16 GPIO2 : 1 ;
  4318F                   // 2 GPIO2
  4319F  Uint16 GPIO3 : 1 ;
  4320F                   // 3 GPIO3
  4321F  Uint16 GPIO4 : 1 ;
  4322F                   // 4 GPIO4
  4323F  Uint16 GPIO5 : 1 ;
  4324F                   // 5 GPIO5
  4325F  Uint16 GPIO6 : 1 ;
  4326F                   // 6 GPIO6
  4327F  Uint16 GPIO7 : 1 ;
  4328F                   // 7 GPIO7
  4329F  Uint16 GPIO8 : 1 ;
  4330F                   // 8 GPIO8
  4331F  Uint16 GPIO9 : 1 ;
  4332F                   // 9 GPIO9
  4333F  Uint16 GPIO10 : 1 ;
  4334F                    // 10 GPIO10
  4335F  Uint16 GPIO11 : 1 ;
  4336F                    // 11 GPIO11
  4337F  Uint16 GPIO12 : 1 ;
  4338F                    // 12 GPIO12
  4339F  Uint16 GPIO13 : 1 ;
  4340F                    // 13 GPIO13
  4341F  Uint16 GPIO14 : 1 ;
  4342F                    // 14 GPIO14
  4343F  Uint16 GPIO15 : 1 ;
  4344F                    // 15 GPIO15
  4345F  Uint16 GPIO16 : 1 ;
  4346F                    // 16 GPIO16
  4347F  Uint16 GPIO17 : 1 ;
  4348F                    // 17 GPIO17
  4349F  Uint16 GPIO18 : 1 ;
  4350F                    // 18 GPIO18
  4351F  Uint16 GPIO19 : 1 ;
  4352F                    // 19 GPIO19
  4353F  Uint16 GPIO20 : 1 ;
  4354F                    // 20 GPIO20
  4355F  Uint16 GPIO21 : 1 ;
  4356F                    // 21 GPIO21
  4357F  Uint16 GPIO22 : 1 ;
  4358F                    // 22 GPIO22
  4359F  Uint16 GPIO23 : 1 ;
  4360F                    // 23 GPIO23
  4361F  Uint16 GPIO24 : 1 ;
  4362F                    // 24 GPIO24
  4363F  Uint16 GPIO25 : 1 ;
  4364F                    // 25 GPIO25
  4365F  Uint16 GPIO26 : 1 ;
  4366F                    // 26 GPIO26
  4367F  Uint16 GPIO27 : 1 ;
  4368F                    // 27 GPIO27
  4369F  Uint16 GPIO28 : 1 ;
  4370F                    // 28 GPIO28
  4371F  Uint16 GPIO29 : 1 ;
  4372F                    // 29 GPIO29
  4373F  Uint16 GPIO30 : 1 ;
  4374F                    // 30 GPIO30
  4375F  Uint16 GPIO31 : 1 ;
  4376F                    // 31 GPIO31
  4377F} GPADAT_BITS ;
  4378F
  4379Ftypedef
  4380Fstruct GPBDAT_BITS
  4381F{                            // bits description
  4382F  Uint16 GPIO32 : 1 ;
  4383F                    // 0 GPIO32
  4384F  Uint16 GPIO33 : 1 ;
  4385F                    // 1 GPIO33
  4386F  Uint16 GPIO34 : 1 ;
  4387F                    // 2 GPIO34
  4388F  Uint16 GPIO35 : 1 ;
  4389F                    // 3 GPIO35
  4390F  Uint16 GPIO36 : 1 ;
  4391F                    // 4 GPIO36
  4392F  Uint16 GPIO37 : 1 ;
  4393F                    // 5 GPIO37
  4394F  Uint16 GPIO38 : 1 ;
  4395F                    // 6 GPIO38
  4396F  Uint16 GPIO39 : 1 ;
  4397F                    // 7 GPIO39
  4398F  Uint16 GPIO40 : 1 ;
  4399F                    // 8 GPIO40
  4400F  Uint16 GPIO41 : 1 ;
  4401F                    // 9 GPIO41
  4402F  Uint16 GPIO42 : 1 ;
  4403F                    // 10 GPIO42
  4404F  Uint16 GPIO43 : 1 ;
  4405F                    // 11 GPIO43
  4406F  Uint16 GPIO44 : 1 ;
  4407F                    // 12 GPIO44
  4408F  Uint16 GPIO45 : 1 ;
  4409F                    // 13 GPIO45
  4410F  Uint16 GPIO46 : 1 ;
  4411F                    // 14 GPIO46
  4412F  Uint16 GPIO47 : 1 ;
  4413F                    // 15 GPIO47
  4414F  Uint16 GPIO48 : 1 ;
  4415F                    // 16 GPIO48
  4416F  Uint16 GPIO49 : 1 ;
  4417F                    // 17 GPIO49
  4418F  Uint16 GPIO50 : 1 ;
  4419F                    // 18 GPIO50
  4420F  Uint16 GPIO51 : 1 ;
  4421F                    // 19 GPIO51
  4422F  Uint16 GPIO52 : 1 ;
  4423F                    // 20 GPIO52
  4424F  Uint16 GPIO53 : 1 ;
  4425F                    // 21 GPIO53
  4426F  Uint16 GPIO54 : 1 ;
  4427F                    // 22 GPIO54
  4428F  Uint16 GPIO55 : 1 ;
  4429F                    // 23 GPIO55
  4430F  Uint16 GPIO56 : 1 ;
  4431F                    // 24 GPIO56
  4432F  Uint16 GPIO57 : 1 ;
  4433F                    // 25 GPIO57
  4434F  Uint16 GPIO58 : 1 ;
  4435F                    // 26 GPIO58
  4436F  Uint16 GPIO59 : 1 ;
  4437F                    // 27 GPIO59
  4438F  Uint16 GPIO60 : 1 ;
  4439F                    // 28 GPIO60
  4440F  Uint16 GPIO61 : 1 ;
  4441F                    // 29 GPIO61
  4442F  Uint16 GPIO62 : 1 ;
  4443F                    // 30 GPIO62
  4444F  Uint16 GPIO63 : 1 ;
  4445F                    // 31 GPIO63
  4446F} GPBDAT_BITS ;
  4447F
  4448Ftypedef
  4449Fstruct GPCDAT_BITS
  4450F{                            // bits description
  4451F  Uint16 GPIO64 : 1 ;
  4452F                    // 0 GPIO64
  4453F  Uint16 GPIO65 : 1 ;
  4454F                    // 1 GPIO65
  4455F  Uint16 GPIO66 : 1 ;
  4456F                    // 2 GPIO66
  4457F  Uint16 GPIO67 : 1 ;
  4458F                    // 3 GPIO67
  4459F  Uint16 GPIO68 : 1 ;
  4460F                    // 4 GPIO68
  4461F  Uint16 GPIO69 : 1 ;
  4462F                    // 5 GPIO69
  4463F  Uint16 GPIO70 : 1 ;
  4464F                    // 6 GPIO70
  4465F  Uint16 GPIO71 : 1 ;
  4466F                    // 7 GPIO71
  4467F  Uint16 GPIO72 : 1 ;
  4468F                    // 8 GPIO72
  4469F  Uint16 GPIO73 : 1 ;
  4470F                    // 9 GPIO73
  4471F  Uint16 GPIO74 : 1 ;
  4472F                    // 10 GPIO74
  4473F  Uint16 GPIO75 : 1 ;
  4474F                    // 11 GPIO75
  4475F  Uint16 GPIO76 : 1 ;
  4476F                    // 12 GPIO76
  4477F  Uint16 GPIO77 : 1 ;
  4478F                    // 13 GPIO77
  4479F  Uint16 GPIO78 : 1 ;
  4480F                    // 14 GPIO78
  4481F  Uint16 GPIO79 : 1 ;
  4482F                    // 15 GPIO79
  4483F  Uint16 GPIO80 : 1 ;
  4484F                    // 16 GPIO80
  4485F  Uint16 GPIO81 : 1 ;
  4486F                    // 17 GPIO81
  4487F  Uint16 GPIO82 : 1 ;
  4488F                    // 18 GPIO82
  4489F  Uint16 GPIO83 : 1 ;
  4490F                    // 19 GPIO83
  4491F  Uint16 GPIO84 : 1 ;
  4492F                    // 20 GPIO84
  4493F  Uint16 GPIO85 : 1 ;
  4494F                    // 21 GPIO85
  4495F  Uint16 GPIO86 : 1 ;
  4496F                    // 22 GPIO86
  4497F  Uint16 GPIO87 : 1 ;
  4498F                    // 23 GPIO87
  4499F  Uint16 rsvd1 : 8 ;
  4500F                   // 31:24 reserved
  4501F} GPCDAT_BITS ;
  4502F
  4503Ftypedef
  4504Funion GPADAT_REG
  4505F{
  4506F  Uint32 all ;
  4507F  struct GPADAT_BITS bit ;
  4508F} GPADAT_REG ;
  4509F
  4510Ftypedef
  4511Funion GPBDAT_REG
  4512F{
  4513F  Uint32 all ;
  4514F  struct GPBDAT_BITS bit ;
  4515F} GPBDAT_REG ;
  4516F
  4517Ftypedef
  4518Funion GPCDAT_REG
  4519F{
  4520F  Uint32 all ;
  4521F  struct GPCDAT_BITS bit ;
  4522F} GPCDAT_REG ;
  4523F//----------------------------------------------------
  4524F// GPIO Xint1/XINT2/XNMI select register bit definitions */
  4525F
  4526Ftypedef
  4527Fstruct GPIOXINT_BITS
  4528F{                              // bits description
  4529F  Uint16 GPIOSEL : 5 ;// 4:0 Select GPIO interrupt input source
  4530F  Uint16 rsvd1 : 11 ;// 15:5 reserved
  4531F} GPIOXINT_BITS ;
  4532F
  4533Ftypedef
  4534Funion GPIOXINT_REG
  4535F{
  4536F  Uint16 all ;
  4537F  struct GPIOXINT_BITS bit ;
  4538F} GPIOXINT_REG ;
  4539F
  4540Ftypedef
  4541Fstruct GPIO_CTRL_REGS
  4542F{
  4543F  union GPACTRL_REG GPACTRL ; // GPIO A Control Register (GPIO0 to 31)
  4544F  union GPA1_REG GPAQSEL1 ; // GPIO A Qualifier Select 1 Register (GPIO0 to 15)
  4545F  union GPA2_REG GPAQSEL2 ; // GPIO A Qualifier Select 2 Register (GPIO16 to 31)
  4546F  union GPA1_REG GPAMUX1 ; // GPIO A Mux 1 Register (GPIO0 to 15)
  4547F  union GPA2_REG GPAMUX2 ; // GPIO A Mux 2 Register (GPIO16 to 31)
  4548F  union GPADAT_REG GPADIR ; // GPIO A Direction Register (GPIO0 to 31)
  4549F  union GPADAT_REG GPAPUD ; // GPIO A Pull Up Disable Register (GPIO0 to 31)
  4550F  Uint32 rsvd1 ;
  4551F  union GPBCTRL_REG GPBCTRL ; // GPIO B Control Register (GPIO32 to 63)
  4552F  union GPB1_REG GPBQSEL1 ; // GPIO B Qualifier Select 1 Register (GPIO32 to 47)
  4553F  union GPB2_REG GPBQSEL2 ; // GPIO B Qualifier Select 2 Register (GPIO48 to 63)
  4554F  union GPB1_REG GPBMUX1 ; // GPIO B Mux 1 Register (GPIO32 to 47)
  4555F  union GPB2_REG GPBMUX2 ; // GPIO B Mux 2 Register (GPIO48 to 63)
  4556F  union GPBDAT_REG GPBDIR ; // GPIO B Direction Register (GPIO32 to 63)
  4557F  union GPBDAT_REG GPBPUD ; // GPIO B Pull Up Disable Register (GPIO32 to 63)
  4558F  Uint16 rsvd2 [ 8 ] ;
  4559F  union GPC1_REG GPCMUX1 ; // GPIO C Mux 1 Register (GPIO64 to 79)
  4560F  union GPC2_REG GPCMUX2 ; // GPIO C Mux 2 Register (GPIO80 to 95)
  4561F  union GPCDAT_REG GPCDIR ; // GPIO C Direction Register (GPIO64 to 95)
  4562F  union GPCDAT_REG GPCPUD ; // GPIO C Pull Up Disable Register (GPIO64 to 95)
  4563F} GPIO_CTRL_REGS ;
  4564F
  4565Ftypedef
  4566Fstruct GPIO_DATA_REGS
  4567F{
  4568F  union GPADAT_REG GPADAT ; // GPIO Data Register (GPIO0 to 31)
  4569F  union GPADAT_REG GPASET ; // GPIO Data Set Register (GPIO0 to 31)
  4570F  union GPADAT_REG GPACLEAR ; // GPIO Data Clear Register (GPIO0 to 31)
  4571F  union GPADAT_REG GPATOGGLE ; // GPIO Data Toggle Register (GPIO0 to 31)
  4572F  union GPBDAT_REG GPBDAT ; // GPIO Data Register (GPIO32 to 63)
  4573F  union GPBDAT_REG GPBSET ; // GPIO Data Set Register (GPIO32 to 63)
  4574F  union GPBDAT_REG GPBCLEAR ; // GPIO Data Clear Register (GPIO32 to 63)
  4575F  union GPBDAT_REG GPBTOGGLE ; // GPIO Data Toggle Register (GPIO32 to 63)
  4576F  union GPCDAT_REG GPCDAT ; // GPIO Data Register (GPIO64 to 95)
  4577F  union GPCDAT_REG GPCSET ; // GPIO Data Set Register (GPIO64 to 95)
  4578F  union GPCDAT_REG GPCCLEAR ; // GPIO Data Clear Register (GPIO64 to 95)
  4579F  union GPCDAT_REG GPCTOGGLE ; // GPIO Data Toggle Register (GPIO64 to 95)
  4580F  Uint16 rsvd1 [ 8 ] ;
  4581F} GPIO_DATA_REGS ;
  4582F
  4583Ftypedef
  4584Fstruct GPIO_INT_REGS
  4585F{
  4586F  union GPIOXINT_REG GPIOXINT1SEL ; // XINT1 GPIO Input Selection
  4587F  union GPIOXINT_REG GPIOXINT2SEL ; // XINT2 GPIO Input Selection
  4588F  union GPIOXINT_REG GPIOXNMISEL ; // XNMI_Xint13 GPIO Input Selection
  4589F  union GPIOXINT_REG GPIOXINT3SEL ; // XINT3 GPIO Input Selection
  4590F  union GPIOXINT_REG GPIOXINT4SEL ; // XINT4 GPIO Input Selection
  4591F  union GPIOXINT_REG GPIOXINT5SEL ; // XINT5 GPIO Input Selection
  4592F  union GPIOXINT_REG GPIOXINT6SEL ; // XINT6 GPIO Input Selection
  4593F  union GPIOXINT_REG GPIOXINT7SEL ; // XINT7 GPIO Input Selection
  4594F  union GPADAT_REG GPIOLPMSEL ; // Low power modes GP I/O input select
  4595F} GPIO_INT_REGS ;
  4596F//---------------------------------------------------------------------------
  4597F// GPI/O External References & Function Declarations:
  4598F//
  4599F
  4600Fextern volatile struct GPIO_CTRL_REGS
  4601F  GpioCtrlRegs ;
  4602F
  4603Fextern volatile struct GPIO_DATA_REGS
  4604F  GpioDataRegs ;
  4605F
  4606Fextern volatile struct GPIO_INT_REGS
  4607F  GpioIntRegs ;
  4608F       // end of DSP2833x_GPIO_H definition
  4609F//===========================================================================
  4610F// End of file.
  4611F//===========================================================================
  4612F 
  4613F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Gpio.h*/
  4614F/*   CLOSE_FILE Include File */
  4615F 
  4616F               // General Purpose I/O Registers
  4617F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_I2c.h */
  4618F// TI File $Revision: /main/2 $
  4619F// Checkin $Date: March 22, 2007 10:40:22 $
  4620F//###########################################################################
  4621F//
  4622F// FILE: DSP2833x_I2c.h
  4623F//
  4624F// TITLE: DSP2833x Enhanced Quadrature Encoder Pulse Module
  4625F// Register Bit Definitions.
  4626F//
  4627F//###########################################################################
  4628F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  4629F// $Release Date: August 4, 2009 $
  4630F//###########################################################################
  4631F#ifndef DSP2833x_I2C_H
  4632F#define DSP2833x_I2C_H
  4633F//----------------------------------------------------
  4634F// I2C interrupt vector register bit definitions */
  4635F
  4636Fstruct I2CISRC_BITS
  4637F{                     // bits description
  4638F  Uint16 INTCODE : 3 ;
  4639F                     // 2:0 Interrupt code
  4640F  Uint16 rsvd1 : 13 ;
  4641F                    // 15:3 reserved
  4642F} ;
  4643F
  4644Funion I2CISRC_REG
  4645F{
  4646F  Uint16 all ;
  4647F  struct I2CISRC_BITS bit ;
  4648F} ;
  4649F//----------------------------------------------------
  4650F// I2C interrupt mask register bit definitions */
  4651F
  4652Fstruct I2CIER_BITS
  4653F{                    // bits description
  4654F  Uint16 ARBL : 1 ;
  4655F                  // 0 Arbitration lost interrupt
  4656F  Uint16 NACK : 1 ;
  4657F                  // 1 No ack interrupt
  4658F  Uint16 ARDY : 1 ;
  4659F                  // 2 Register access ready interrupt
  4660F  Uint16 RRDY : 1 ;
  4661F                  // 3 Recieve data ready interrupt
  4662F  Uint16 XRDY : 1 ;
  4663F                  // 4 Transmit data ready interrupt
  4664F  Uint16 SCD : 1 ;
  4665F                 // 5 Stop condition detection
  4666F  Uint16 AAS : 1 ;
  4667F                 // 6 Address as slave
  4668F  Uint16 rsvd : 9 ;
  4669F                  // 15:7 reserved
  4670F} ;
  4671F
  4672Funion I2CIER_REG
  4673F{
  4674F  Uint16 all ;
  4675F  struct I2CIER_BITS bit ;
  4676F} ;
  4677F//----------------------------------------------------
  4678F// I2C status register bit definitions */
  4679F
  4680Fstruct I2CSTR_BITS
  4681F{                    // bits description
  4682F  Uint16 ARBL : 1 ;
  4683F                  // 0 Arbitration lost interrupt
  4684F  Uint16 NACK : 1 ;
  4685F                  // 1 No ack interrupt
  4686F  Uint16 ARDY : 1 ;
  4687F                  // 2 Register access ready interrupt
  4688F  Uint16 RRDY : 1 ;
  4689F                  // 3 Recieve data ready interrupt
  4690F  Uint16 XRDY : 1 ;
  4691F                  // 4 Transmit data ready interrupt
  4692F  Uint16 SCD : 1 ;
  4693F                 // 5 Stop condition detection
  4694F  Uint16 rsvd1 : 2 ;
  4695F                   // 7:6 reserved
  4696F  Uint16 AD0 : 1 ;
  4697F                 // 8 Address Zero
  4698F  Uint16 AAS : 1 ;
  4699F                 // 9 Address as slave
  4700F  Uint16 XSMT : 1 ;
  4701F                  // 10 XMIT shift empty
  4702F  Uint16 RSFULL : 1 ;
  4703F                    // 11 Recieve shift full
  4704F  Uint16 BB : 1 ;
  4705F                // 12 Bus busy
  4706F  Uint16 NACKSNT : 1 ;
  4707F                     // 13 A no ack sent
  4708F  Uint16 SDIR : 1 ;
  4709F                  // 14 Slave direction
  4710F  Uint16 rsvd2 : 1 ;
  4711F                   // 15 reserved
  4712F} ;
  4713F
  4714Funion I2CSTR_REG
  4715F{
  4716F  Uint16 all ;
  4717F  struct I2CSTR_BITS bit ;
  4718F} ;
  4719F//----------------------------------------------------
  4720F// I2C mode control register bit definitions */
  4721F
  4722Fstruct I2CMDR_BITS
  4723F{                    // bits description
  4724F  Uint16 BC : 3 ;
  4725F                // 2:0 Bit count
  4726F  Uint16 FDF : 1 ;
  4727F                 // 3 Free data format
  4728F  Uint16 STB : 1 ;
  4729F                 // 4 Start byte
  4730F  Uint16 IRS : 1 ;
  4731F                 // 5 I2C Reset not
  4732F  Uint16 DLB : 1 ;
  4733F                 // 6 Digital loopback
  4734F  Uint16 RM : 1 ;
  4735F                // 7 Repeat mode
  4736F  Uint16 XA : 1 ;
  4737F                // 8 Expand address
  4738F  Uint16 TRX : 1 ;
  4739F                 // 9 Transmitter/reciever
  4740F  Uint16 MST : 1 ;
  4741F                 // 10 Master/slave
  4742F  Uint16 STP : 1 ;
  4743F                 // 11 Stop condition
  4744F  Uint16 rsvd1 : 1 ;
  4745F                   // 12 reserved
  4746F  Uint16 STT : 1 ;
  4747F                 // 13 Start condition
  4748F  Uint16 FREE : 1 ;
  4749F                  // 14 Emulation mode
  4750F  Uint16 NACKMOD : 1 ;
  4751F                     // 15 No Ack mode
  4752F} ;
  4753F
  4754Funion I2CMDR_REG
  4755F{
  4756F  Uint16 all ;
  4757F  struct I2CMDR_BITS bit ;
  4758F} ;
  4759F//----------------------------------------------------
  4760F// I2C pre-scaler register bit definitions */
  4761F
  4762Fstruct I2CPSC_BITS
  4763F{                    // bits description
  4764F  Uint16 IPSC : 8 ;
  4765F                  // 7:0 pre-scaler
  4766F  Uint16 rsvd1 : 8 ;
  4767F                   // 15:8 reserved
  4768F} ;
  4769F
  4770Funion I2CPSC_REG
  4771F{
  4772F  Uint16 all ;
  4773F  struct I2CPSC_BITS bit ;
  4774F} ;
  4775F//----------------------------------------------------
  4776F// TX FIFO control register bit definitions */
  4777F
  4778Fstruct I2CFFTX_BITS
  4779F{                     // bits description
  4780F  Uint16 TXFFIL : 5 ;
  4781F                    // 4:0 FIFO interrupt level
  4782F  Uint16 TXFFIENA : 1 ;
  4783F                      // 5 FIFO interrupt enable/disable
  4784F  Uint16 TXFFINTCLR : 1 ;
  4785F                        // 6 FIFO clear
  4786F  Uint16 TXFFINT : 1 ;
  4787F                     // 7 FIFO interrupt flag
  4788F  Uint16 TXFFST : 5 ;
  4789F                    // 12:8 FIFO level status
  4790F  Uint16 TXFFRST : 1 ;
  4791F                     // 13 FIFO reset
  4792F  Uint16 I2CFFEN : 1 ;
  4793F                     // 14 enable/disable TX & RX FIFOs
  4794F  Uint16 rsvd1 : 1 ;
  4795F                   // 15 reserved
  4796F} ;
  4797F
  4798Funion I2CFFTX_REG
  4799F{
  4800F  Uint16 all ;
  4801F  struct I2CFFTX_BITS bit ;
  4802F} ;
  4803F//----------------------------------------------------
  4804F// RX FIFO control register bit definitions */
  4805F
  4806Fstruct I2CFFRX_BITS
  4807F{                     // bits description
  4808F  Uint16 RXFFIL : 5 ;
  4809F                    // 4:0 FIFO interrupt level
  4810F  Uint16 RXFFIENA : 1 ;
  4811F                      // 5 FIFO interrupt enable/disable
  4812F  Uint16 RXFFINTCLR : 1 ;
  4813F                        // 6 FIFO clear
  4814F  Uint16 RXFFINT : 1 ;
  4815F                     // 7 FIFO interrupt flag
  4816F  Uint16 RXFFST : 5 ;
  4817F                    // 12:8 FIFO level
  4818F  Uint16 RXFFRST : 1 ;
  4819F                     // 13 FIFO reset
  4820F  Uint16 rsvd1 : 2 ;
  4821F                   // 15:14 reserved
  4822F} ;
  4823F
  4824Funion I2CFFRX_REG
  4825F{
  4826F  Uint16 all ;
  4827F  struct I2CFFRX_BITS bit ;
  4828F} ;
  4829F//----------------------------------------------------
  4830F
  4831Fstruct I2C_REGS
  4832F{
  4833F  Uint16 I2COAR ; // Own address register
  4834F  union I2CIER_REG I2CIER ; // Interrupt enable
  4835F  union I2CSTR_REG I2CSTR ; // Interrupt status
  4836F  Uint16 I2CCLKL ; // Clock divider low
  4837F  Uint16 I2CCLKH ; // Clock divider high
  4838F  Uint16 I2CCNT ; // Data count
  4839F  Uint16 I2CDRR ; // Data recieve
  4840F  Uint16 I2CSAR ; // Slave address
  4841F  Uint16 I2CDXR ; // Data transmit
  4842F  union I2CMDR_REG I2CMDR ; // Mode
  4843F  union I2CISRC_REG I2CISRC ; // Interrupt source
  4844F  Uint16 rsvd1 ; // reserved
  4845F  union I2CPSC_REG I2CPSC ; // Pre-scaler
  4846F  Uint16 rsvd2 [ 19 ] ;
  4847F                     // reserved
  4848F  union I2CFFTX_REG I2CFFTX ; // Transmit FIFO
  4849F  union I2CFFRX_REG I2CFFRX ; // Recieve FIFO
  4850F} ;
  4851F//---------------------------------------------------------------------------
  4852F// External References & Function Declarations:
  4853F//
  4854F
  4855Fextern volatile struct I2C_REGS
  4856F  I2caRegs ;
  4857F       /* extern "C" */
  4858F       // end of DSP2833x_I2C_H definition
  4859F//===========================================================================
  4860F// End of file.
  4861F//===========================================================================
  4862F 
  4863F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_I2c.h*/
  4864F/*   CLOSE_FILE Include File */
  4865F 
  4866F                // I2C Registers
  4867F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_McBSP.h */
  4868F// TI File $Revision: /main/5 $
  4869F// Checkin $Date: May 14, 2008 16:30:31 $
  4870F//###########################################################################
  4871F//
  4872F// FILE: DSP2833x_Mcbsp.h
  4873F//
  4874F// TITLE: DSP2833x Device McBSP Register Definitions.
  4875F//
  4876F//###########################################################################
  4877F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  4878F// $Release Date: August 4, 2009 $
  4879F//###########################################################################
  4880F#ifndef DSP2833x_MCBSP_H
  4881F#define DSP2833x_MCBSP_H
  4882F//---------------------------------------------------------------------------
  4883F// McBSP Individual Register Bit Definitions:
  4884F//
  4885F// McBSP DRR2 register bit definitions:
  4886F
  4887Fstruct DRR2_BITS
  4888F{                  // bit description
  4889F  Uint16 HWLB : 8 ;
  4890F                  // 16:23 High word low byte
  4891F  Uint16 HWHB : 8 ;
  4892F                  // 24:31 High word high byte
  4893F} ;
  4894F
  4895Funion DRR2_REG
  4896F{
  4897F  Uint16 all ;
  4898F  struct DRR2_BITS bit ;
  4899F} ;
  4900F// McBSP DRR1 register bit definitions:
  4901F
  4902Fstruct DRR1_BITS
  4903F{                  // bit description
  4904F  Uint16 LWLB : 8 ;
  4905F                  // 16:23 Low word low byte
  4906F  Uint16 LWHB : 8 ;
  4907F                  // 24:31 low word high byte
  4908F} ;
  4909F
  4910Funion DRR1_REG
  4911F{
  4912F  Uint16 all ;
  4913F  struct DRR1_BITS bit ;
  4914F} ;
  4915F// McBSP DXR2 register bit definitions:
  4916F
  4917Fstruct DXR2_BITS
  4918F{                  // bit description
  4919F  Uint16 HWLB : 8 ;
  4920F                  // 16:23 High word low byte
  4921F  Uint16 HWHB : 8 ;
  4922F                  // 24:31 High word high byte
  4923F} ;
  4924F
  4925Funion DXR2_REG
  4926F{
  4927F  Uint16 all ;
  4928F  struct DXR2_BITS bit ;
  4929F} ;
  4930F// McBSP DXR1 register bit definitions:
  4931F
  4932Fstruct DXR1_BITS
  4933F{                  // bit description
  4934F  Uint16 LWLB : 8 ;
  4935F                  // 16:23 Low word low byte
  4936F  Uint16 LWHB : 8 ;
  4937F                  // 24:31 low word high byte
  4938F} ;
  4939F
  4940Funion DXR1_REG
  4941F{
  4942F  Uint16 all ;
  4943F  struct DXR1_BITS bit ;
  4944F} ;
  4945F// SPCR2 control register bit definitions:
  4946F
  4947Fstruct SPCR2_BITS
  4948F{                   // bit description
  4949F  Uint16 XRST : 1 ;
  4950F                  // 0 transmit reset
  4951F  Uint16 XRDY : 1 ;
  4952F                  // 1 transmit ready
  4953F  Uint16 XEMPTY : 1 ;
  4954F                    // 2 Transmit empty
  4955F  Uint16 XSYNCERR : 1 ;
  4956F                      // 3 Transmit syn errorINT flag
  4957F  Uint16 XINTM : 2 ;
  4958F                   // 5:4 Transmit interrupt types
  4959F  Uint16 GRST : 1 ;
  4960F                  // 6 CLKG reset
  4961F  Uint16 FRST : 1 ;
  4962F                  // 7 Frame sync reset
  4963F  Uint16 SOFT : 1 ;
  4964F                  // 8 SOFT bit
  4965F  Uint16 FREE : 1 ;
  4966F                  // 9 FREE bit
  4967F  Uint16 rsvd : 6 ;
  4968F                  // 15:10 reserved
  4969F} ;
  4970F
  4971Funion SPCR2_REG
  4972F{
  4973F  Uint16 all ;
  4974F  struct SPCR2_BITS bit ;
  4975F} ;
  4976F// SPCR1 control register bit definitions:
  4977F
  4978Fstruct SPCR1_BITS
  4979F{                   // bit description
  4980F  Uint16 RRST : 1 ;
  4981F                  // 0 Receive reset
  4982F  Uint16 RRDY : 1 ;
  4983F                  // 1 Receive ready
  4984F  Uint16 RFULL : 1 ;
  4985F                   // 2 Receive full
  4986F  Uint16 RSYNCERR : 1 ;
  4987F                      // 7 Receive syn error
  4988F  Uint16 RINTM : 2 ;
  4989F                   // 5:4 Receive interrupt types
  4990F  Uint16 ABIS : 1 ;
  4991F                  // 6 ABIS mode select
  4992F  Uint16 DXENA : 1 ;
  4993F                   // 7 DX hi-z enable
  4994F  Uint16 rsvd : 3 ;
  4995F                  // 10:8 reserved
  4996F  Uint16 CLKSTP : 2 ;
  4997F                    // 12:11 CLKSTOP mode bit
  4998F  Uint16 RJUST : 2 ;
  4999F                   // 13:14 Right justified
  5000F  Uint16 DLB : 1 ;
  5001F                 // 15 Digital loop back
  5002F} ;
  5003F
  5004Funion SPCR1_REG
  5005F{
  5006F  Uint16 all ;
  5007F  struct SPCR1_BITS bit ;
  5008F} ;
  5009F// RCR2 control register bit definitions:
  5010F
  5011Fstruct RCR2_BITS
  5012F{                  // bit description
  5013F  Uint16 RDATDLY : 2 ;
  5014F                     // 1:0 Receive data delay
  5015F  Uint16 RFIG : 1 ;
  5016F                  // 2 Receive frame sync ignore
  5017F  Uint16 RCOMPAND : 2 ;
  5018F                      // 4:3 Receive Companding Mode selects
  5019F  Uint16 RWDLEN2 : 3 ;
  5020F                     // 7:5 Receive word length
  5021F  Uint16 RFRLEN2 : 7 ;
  5022F                     // 14:8 Receive Frame sync
  5023F  Uint16 RPHASE : 1 ;
  5024F                    // 15 Receive Phase
  5025F} ;
  5026F
  5027Funion RCR2_REG
  5028F{
  5029F  Uint16 all ;
  5030F  struct RCR2_BITS bit ;
  5031F} ;
  5032F// RCR1 control register bit definitions:
  5033F
  5034Fstruct RCR1_BITS
  5035F{                  // bit description
  5036F  Uint16 rsvd1 : 5 ;
  5037F                   // 4:0 reserved
  5038F  Uint16 RWDLEN1 : 3 ;
  5039F                     // 7:5 Receive word length
  5040F  Uint16 RFRLEN1 : 7 ;
  5041F                     // 14:8 Receive frame length
  5042F  Uint16 rsvd2 : 1 ;
  5043F                   // 15 reserved
  5044F} ;
  5045F
  5046Funion RCR1_REG
  5047F{
  5048F  Uint16 all ;
  5049F  struct RCR1_BITS bit ;
  5050F} ;
  5051F// XCR2 control register bit definitions:
  5052F
  5053Fstruct XCR2_BITS
  5054F{                  // bit description
  5055F  Uint16 XDATDLY : 2 ;
  5056F                     // 1:0 Transmit data delay
  5057F  Uint16 XFIG : 1 ;
  5058F                  // 2 Transmit frame sync ignore
  5059F  Uint16 XCOMPAND : 2 ;
  5060F                      // 4:3 Transmit Companding Mode selects
  5061F  Uint16 XWDLEN2 : 3 ;
  5062F                     // 7:5 Transmit word length
  5063F  Uint16 XFRLEN2 : 7 ;
  5064F                     // 14:8 Transmit Frame sync
  5065F  Uint16 XPHASE : 1 ;
  5066F                    // 15 Transmit Phase
  5067F} ;
  5068F
  5069Funion XCR2_REG
  5070F{
  5071F  Uint16 all ;
  5072F  struct XCR2_BITS bit ;
  5073F} ;
  5074F// XCR1 control register bit definitions:
  5075F
  5076Fstruct XCR1_BITS
  5077F{                  // bit description
  5078F  Uint16 rsvd1 : 5 ;
  5079F                   // 4:0 reserved
  5080F  Uint16 XWDLEN1 : 3 ;
  5081F                     // 7:5 Transmit word length
  5082F  Uint16 XFRLEN1 : 7 ;
  5083F                     // 14:8 Transmit frame length
  5084F  Uint16 rsvd2 : 1 ;
  5085F                   // 15 reserved
  5086F} ;
  5087F
  5088Funion XCR1_REG
  5089F{
  5090F  Uint16 all ;
  5091F  struct XCR1_BITS bit ;
  5092F} ;
  5093F// SRGR2 Sample rate generator control register bit definitions:
  5094F
  5095Fstruct SRGR2_BITS
  5096F{                   // bit description
  5097F  Uint16 FPER : 12 ;
  5098F                   // 11:0 Frame period
  5099F  Uint16 FSGM : 1 ;
  5100F                  // 12 Frame sync generator mode
  5101F  Uint16 CLKSM : 1 ;
  5102F                   // 13 Sample rate generator mode
  5103F  Uint16 rsvd : 1 ;
  5104F                  // 14 reserved
  5105F  Uint16 GSYNC : 1 ;
  5106F                   // 15 CLKG sync
  5107F} ;
  5108F
  5109Funion SRGR2_REG
  5110F{
  5111F  Uint16 all ;
  5112F  struct SRGR2_BITS bit ;
  5113F} ;
  5114F// SRGR1 control register bit definitions:
  5115F
  5116Fstruct SRGR1_BITS
  5117F{                   // bit description
  5118F  Uint16 CLKGDV : 8 ;
  5119F                    // 7:0 CLKG divider
  5120F  Uint16 FWID : 8 ;
  5121F                  // 15:8 Frame width
  5122F} ;
  5123F
  5124Funion SRGR1_REG
  5125F{
  5126F  Uint16 all ;
  5127F  struct SRGR1_BITS bit ;
  5128F} ;
  5129F// MCR2 Multichannel control register bit definitions:
  5130F
  5131Fstruct MCR2_BITS
  5132F{                  // bit description
  5133F  Uint16 XMCM : 2 ;
  5134F                  // 1:0 Transmit multichannel mode
  5135F  Uint16 XCBLK : 3 ;
  5136F                   // 2:4 Transmit current block
  5137F  Uint16 XPABLK : 2 ;
  5138F                    // 5:6 Transmit partition A Block
  5139F  Uint16 XPBBLK : 2 ;
  5140F                    // 7:8 Transmit partition B Block
  5141F  Uint16 XMCME : 1 ;
  5142F                   // 9 Transmit multi-channel enhance mode
  5143F  Uint16 rsvd : 6 ;
  5144F                  // 15:10 reserved
  5145F} ;
  5146F
  5147Funion MCR2_REG
  5148F{
  5149F  Uint16 all ;
  5150F  struct MCR2_BITS bit ;
  5151F} ;
  5152F// MCR1 Multichannel control register bit definitions:
  5153F
  5154Fstruct MCR1_BITS
  5155F{                  // bit description
  5156F  Uint16 RMCM : 1 ;
  5157F                  // 0 Receive multichannel mode
  5158F  Uint16 rsvd : 1 ;
  5159F                  // 1 reserved
  5160F  Uint16 RCBLK : 3 ;
  5161F                   // 4:2 Receive current block
  5162F  Uint16 RPABLK : 2 ;
  5163F                    // 6:5 Receive partition A Block
  5164F  Uint16 RPBBLK : 2 ;
  5165F                    // 7:8 Receive partition B Block
  5166F  Uint16 RMCME : 1 ;
  5167F                   // 9 Receive multi-channel enhance mode
  5168F  Uint16 rsvd1 : 6 ;
  5169F                   // 15:10 reserved
  5170F} ;
  5171F
  5172Funion MCR1_REG
  5173F{
  5174F  Uint16 all ;
  5175F  struct MCR1_BITS bit ;
  5176F} ;
  5177F// RCERA control register bit definitions:
  5178F
  5179Fstruct RCERA_BITS
  5180F{                   // bit description
  5181F  Uint16 RCEA0 : 1 ;
  5182F                   // 0 Receive Channel enable bit
  5183F  Uint16 RCEA1 : 1 ;
  5184F                   // 1 Receive Channel enable bit
  5185F  Uint16 RCEA2 : 1 ;
  5186F                   // 2 Receive Channel enable bit
  5187F  Uint16 RCEA3 : 1 ;
  5188F                   // 3 Receive Channel enable bit
  5189F  Uint16 RCEA4 : 1 ;
  5190F                   // 4 Receive Channel enable bit
  5191F  Uint16 RCEA5 : 1 ;
  5192F                   // 5 Receive Channel enable bit
  5193F  Uint16 RCEA6 : 1 ;
  5194F                   // 6 Receive Channel enable bit
  5195F  Uint16 RCEA7 : 1 ;
  5196F                   // 7 Receive Channel enable bit
  5197F  Uint16 RCEA8 : 1 ;
  5198F                   // 8 Receive Channel enable bit
  5199F  Uint16 RCEA9 : 1 ;
  5200F                   // 9 Receive Channel enable bit
  5201F  Uint16 RCEA10 : 1 ;
  5202F                    // 10 Receive Channel enable bit
  5203F  Uint16 RCEA11 : 1 ;
  5204F                    // 11 Receive Channel enable bit
  5205F  Uint16 RCEA12 : 1 ;
  5206F                    // 12 Receive Channel enable bit
  5207F  Uint16 RCEA13 : 1 ;
  5208F                    // 13 Receive Channel enable bit
  5209F  Uint16 RCEA14 : 1 ;
  5210F                    // 14 Receive Channel enable bit
  5211F  Uint16 RCEA15 : 1 ;
  5212F                    // 15 Receive Channel enable bit
  5213F} ;
  5214F
  5215Funion RCERA_REG
  5216F{
  5217F  Uint16 all ;
  5218F  struct RCERA_BITS bit ;
  5219F} ;
  5220F// RCERB control register bit definitions:
  5221F
  5222Fstruct RCERB_BITS
  5223F{                   // bit description
  5224F  Uint16 RCEB0 : 1 ;
  5225F                   // 0 Receive Channel enable bit
  5226F  Uint16 RCEB1 : 1 ;
  5227F                   // 1 Receive Channel enable bit
  5228F  Uint16 RCEB2 : 1 ;
  5229F                   // 2 Receive Channel enable bit
  5230F  Uint16 RCEB3 : 1 ;
  5231F                   // 3 Receive Channel enable bit
  5232F  Uint16 RCEB4 : 1 ;
  5233F                   // 4 Receive Channel enable bit
  5234F  Uint16 RCEB5 : 1 ;
  5235F                   // 5 Receive Channel enable bit
  5236F  Uint16 RCEB6 : 1 ;
  5237F                   // 6 Receive Channel enable bit
  5238F  Uint16 RCEB7 : 1 ;
  5239F                   // 7 Receive Channel enable bit
  5240F  Uint16 RCEB8 : 1 ;
  5241F                   // 8 Receive Channel enable bit
  5242F  Uint16 RCEB9 : 1 ;
  5243F                   // 9 Receive Channel enable bit
  5244F  Uint16 RCEB10 : 1 ;
  5245F                    // 10 Receive Channel enable bit
  5246F  Uint16 RCEB11 : 1 ;
  5247F                    // 11 Receive Channel enable bit
  5248F  Uint16 RCEB12 : 1 ;
  5249F                    // 12 Receive Channel enable bit
  5250F  Uint16 RCEB13 : 1 ;
  5251F                    // 13 Receive Channel enable bit
  5252F  Uint16 RCEB14 : 1 ;
  5253F                    // 14 Receive Channel enable bit
  5254F  Uint16 RCEB15 : 1 ;
  5255F                    // 15 Receive Channel enable bit
  5256F} ;
  5257F
  5258Funion RCERB_REG
  5259F{
  5260F  Uint16 all ;
  5261F  struct RCERB_BITS bit ;
  5262F} ;
  5263F// XCERA control register bit definitions:
  5264F
  5265Fstruct XCERA_BITS
  5266F{                   // bit description
  5267F  Uint16 XCERA0 : 1 ;
  5268F                    // 0 Receive Channel enable bit
  5269F  Uint16 XCERA1 : 1 ;
  5270F                    // 1 Receive Channel enable bit
  5271F  Uint16 XCERA2 : 1 ;
  5272F                    // 2 Receive Channel enable bit
  5273F  Uint16 XCERA3 : 1 ;
  5274F                    // 3 Receive Channel enable bit
  5275F  Uint16 XCERA4 : 1 ;
  5276F                    // 4 Receive Channel enable bit
  5277F  Uint16 XCERA5 : 1 ;
  5278F                    // 5 Receive Channel enable bit
  5279F  Uint16 XCERA6 : 1 ;
  5280F                    // 6 Receive Channel enable bit
  5281F  Uint16 XCERA7 : 1 ;
  5282F                    // 7 Receive Channel enable bit
  5283F  Uint16 XCERA8 : 1 ;
  5284F                    // 8 Receive Channel enable bit
  5285F  Uint16 XCERA9 : 1 ;
  5286F                    // 9 Receive Channel enable bit
  5287F  Uint16 XCERA10 : 1 ;
  5288F                     // 10 Receive Channel enable bit
  5289F  Uint16 XCERA11 : 1 ;
  5290F                     // 11 Receive Channel enable bit
  5291F  Uint16 XCERA12 : 1 ;
  5292F                     // 12 Receive Channel enable bit
  5293F  Uint16 XCERA13 : 1 ;
  5294F                     // 13 Receive Channel enable bit
  5295F  Uint16 XCERA14 : 1 ;
  5296F                     // 14 Receive Channel enable bit
  5297F  Uint16 XCERA15 : 1 ;
  5298F                     // 15 Receive Channel enable bit
  5299F} ;
  5300F
  5301Funion XCERA_REG
  5302F{
  5303F  Uint16 all ;
  5304F  struct XCERA_BITS bit ;
  5305F} ;
  5306F// XCERB control register bit definitions:
  5307F
  5308Fstruct XCERB_BITS
  5309F{                   // bit description
  5310F  Uint16 XCERB0 : 1 ;
  5311F                    // 0 Receive Channel enable bit
  5312F  Uint16 XCERB1 : 1 ;
  5313F                    // 1 Receive Channel enable bit
  5314F  Uint16 XCERB2 : 1 ;
  5315F                    // 2 Receive Channel enable bit
  5316F  Uint16 XCERB3 : 1 ;
  5317F                    // 3 Receive Channel enable bit
  5318F  Uint16 XCERB4 : 1 ;
  5319F                    // 4 Receive Channel enable bit
  5320F  Uint16 XCERB5 : 1 ;
  5321F                    // 5 Receive Channel enable bit
  5322F  Uint16 XCERB6 : 1 ;
  5323F                    // 6 Receive Channel enable bit
  5324F  Uint16 XCERB7 : 1 ;
  5325F                    // 7 Receive Channel enable bit
  5326F  Uint16 XCERB8 : 1 ;
  5327F                    // 8 Receive Channel enable bit
  5328F  Uint16 XCERB9 : 1 ;
  5329F                    // 9 Receive Channel enable bit
  5330F  Uint16 XCERB10 : 1 ;
  5331F                     // 10 Receive Channel enable bit
  5332F  Uint16 XCERB11 : 1 ;
  5333F                     // 11 Receive Channel enable bit
  5334F  Uint16 XCERB12 : 1 ;
  5335F                     // 12 Receive Channel enable bit
  5336F  Uint16 XCERB13 : 1 ;
  5337F                     // 13 Receive Channel enable bit
  5338F  Uint16 XCERB14 : 1 ;
  5339F                     // 14 Receive Channel enable bit
  5340F  Uint16 XCERB15 : 1 ;
  5341F                     // 15 Receive Channel enable bit
  5342F} ;
  5343F
  5344Funion XCERB_REG
  5345F{
  5346F  Uint16 all ;
  5347F  struct XCERB_BITS bit ;
  5348F} ;
  5349F// PCR control register bit definitions:
  5350F
  5351Fstruct PCR_BITS
  5352F{                 // bit description
  5353F  Uint16 CLKRP : 1 ;
  5354F                   // 0 Receive Clock polarity
  5355F  Uint16 CLKXP : 1 ;
  5356F                   // 1 Transmit clock polarity
  5357F  Uint16 FSRP : 1 ;
  5358F                  // 2 Receive Frame synchronization polarity
  5359F  Uint16 FSXP : 1 ;
  5360F                  // 3 Transmit Frame synchronization polarity
  5361F  Uint16 DR_STAT : 1 ;
  5362F                     // 4 DR pin status - reserved for this McBSP
  5363F  Uint16 DX_STAT : 1 ;
  5364F                     // 5 DX pin status - reserved for this McBSP
  5365F  Uint16 CLKS_STAT : 1 ;
  5366F                       // 6 CLKS pin status - reserved for 28x -McBSP
  5367F  Uint16 SCLKME : 1 ;
  5368F                    // 7 Enhanced sample clock mode selection bit.
  5369F  Uint16 CLKRM : 1 ;
  5370F                   // 8 Receiver Clock Mode
  5371F  Uint16 CLKXM : 1 ;
  5372F                   // 9 Transmitter Clock Mode.
  5373F  Uint16 FSRM : 1 ;
  5374F                  // 10 Receive Frame Synchronization Mode
  5375F  Uint16 FSXM : 1 ;
  5376F                  // 11 Transmit Frame Synchronization Mode
  5377F  Uint16 RIOEN : 1 ;
  5378F                   // 12 General Purpose I/O Mode - reserved in this 28x-McBSP
  5379F  Uint16 XIOEN : 1 ;
  5380F                   // 13 General Purpose I/O Mode - reserved in this 28x-McBSP
  5381F  Uint16 IDEL_EN : 1 ;
  5382F                     // 14 reserved in this 28x-McBSP
  5383F  Uint16 rsvd : 1 ;// 15 reserved
  5384F} ;
  5385F
  5386Funion PCR_REG
  5387F{
  5388F  Uint16 all ;
  5389F  struct PCR_BITS bit ;
  5390F} ;
  5391F// RCERC control register bit definitions:
  5392F
  5393Fstruct RCERC_BITS
  5394F{                   // bit description
  5395F  Uint16 RCEC0 : 1 ;
  5396F                   // 0 Receive Channel enable bit
  5397F  Uint16 RCEC1 : 1 ;
  5398F                   // 1 Receive Channel enable bit
  5399F  Uint16 RCEC2 : 1 ;
  5400F                   // 2 Receive Channel enable bit
  5401F  Uint16 RCEC3 : 1 ;
  5402F                   // 3 Receive Channel enable bit
  5403F  Uint16 RCEC4 : 1 ;
  5404F                   // 4 Receive Channel enable bit
  5405F  Uint16 RCEC5 : 1 ;
  5406F                   // 5 Receive Channel enable bit
  5407F  Uint16 RCEC6 : 1 ;
  5408F                   // 6 Receive Channel enable bit
  5409F  Uint16 RCEC7 : 1 ;
  5410F                   // 7 Receive Channel enable bit
  5411F  Uint16 RCEC8 : 1 ;
  5412F                   // 8 Receive Channel enable bit
  5413F  Uint16 RCEC9 : 1 ;
  5414F                   // 9 Receive Channel enable bit
  5415F  Uint16 RCEC10 : 1 ;
  5416F                    // 10 Receive Channel enable bit
  5417F  Uint16 RCEC11 : 1 ;
  5418F                    // 11 Receive Channel enable bit
  5419F  Uint16 RCEC12 : 1 ;
  5420F                    // 12 Receive Channel enable bit
  5421F  Uint16 RCEC13 : 1 ;
  5422F                    // 13 Receive Channel enable bit
  5423F  Uint16 RCEC14 : 1 ;
  5424F                    // 14 Receive Channel enable bit
  5425F  Uint16 RCEC15 : 1 ;
  5426F                    // 15 Receive Channel enable bit
  5427F} ;
  5428F
  5429Funion RCERC_REG
  5430F{
  5431F  Uint16 all ;
  5432F  struct RCERC_BITS bit ;
  5433F} ;
  5434F// RCERD control register bit definitions:
  5435F
  5436Fstruct RCERD_BITS
  5437F{                   // bit description
  5438F  Uint16 RCED0 : 1 ;
  5439F                   // 0 Receive Channel enable bit
  5440F  Uint16 RCED1 : 1 ;
  5441F                   // 1 Receive Channel enable bit
  5442F  Uint16 RCED2 : 1 ;
  5443F                   // 2 Receive Channel enable bit
  5444F  Uint16 RCED3 : 1 ;
  5445F                   // 3 Receive Channel enable bit
  5446F  Uint16 RCED4 : 1 ;
  5447F                   // 4 Receive Channel enable bit
  5448F  Uint16 RCED5 : 1 ;
  5449F                   // 5 Receive Channel enable bit
  5450F  Uint16 RCED6 : 1 ;
  5451F                   // 6 Receive Channel enable bit
  5452F  Uint16 RCED7 : 1 ;
  5453F                   // 7 Receive Channel enable bit
  5454F  Uint16 RCED8 : 1 ;
  5455F                   // 8 Receive Channel enable bit
  5456F  Uint16 RCED9 : 1 ;
  5457F                   // 9 Receive Channel enable bit
  5458F  Uint16 RCED10 : 1 ;
  5459F                    // 10 Receive Channel enable bit
  5460F  Uint16 RCED11 : 1 ;
  5461F                    // 11 Receive Channel enable bit
  5462F  Uint16 RCED12 : 1 ;
  5463F                    // 12 Receive Channel enable bit
  5464F  Uint16 RCED13 : 1 ;
  5465F                    // 13 Receive Channel enable bit
  5466F  Uint16 RCED14 : 1 ;
  5467F                    // 14 Receive Channel enable bit
  5468F  Uint16 RCED15 : 1 ;
  5469F                    // 15 Receive Channel enable bit
  5470F} ;
  5471F
  5472Funion RCERD_REG
  5473F{
  5474F  Uint16 all ;
  5475F  struct RCERD_BITS bit ;
  5476F} ;
  5477F// XCERC control register bit definitions:
  5478F
  5479Fstruct XCERC_BITS
  5480F{                   // bit description
  5481F  Uint16 XCERC0 : 1 ;
  5482F                    // 0 Receive Channel enable bit
  5483F  Uint16 XCERC1 : 1 ;
  5484F                    // 1 Receive Channel enable bit
  5485F  Uint16 XCERC2 : 1 ;
  5486F                    // 2 Receive Channel enable bit
  5487F  Uint16 XCERC3 : 1 ;
  5488F                    // 3 Receive Channel enable bit
  5489F  Uint16 XCERC4 : 1 ;
  5490F                    // 4 Receive Channel enable bit
  5491F  Uint16 XCERC5 : 1 ;
  5492F                    // 5 Receive Channel enable bit
  5493F  Uint16 XCERC6 : 1 ;
  5494F                    // 6 Receive Channel enable bit
  5495F  Uint16 XCERC7 : 1 ;
  5496F                    // 7 Receive Channel enable bit
  5497F  Uint16 XCERC8 : 1 ;
  5498F                    // 8 Receive Channel enable bit
  5499F  Uint16 XCERC9 : 1 ;
  5500F                    // 9 Receive Channel enable bit
  5501F  Uint16 XCERC10 : 1 ;
  5502F                     // 10 Receive Channel enable bit
  5503F  Uint16 XCERC11 : 1 ;
  5504F                     // 11 Receive Channel enable bit
  5505F  Uint16 XCERC12 : 1 ;
  5506F                     // 12 Receive Channel enable bit
  5507F  Uint16 XCERC13 : 1 ;
  5508F                     // 13 Receive Channel enable bit
  5509F  Uint16 XCERC14 : 1 ;
  5510F                     // 14 Receive Channel enable bit
  5511F  Uint16 XCERC15 : 1 ;
  5512F                     // 15 Receive Channel enable bit
  5513F} ;
  5514F
  5515Funion XCERC_REG
  5516F{
  5517F  Uint16 all ;
  5518F  struct XCERC_BITS bit ;
  5519F} ;
  5520F// XCERD control register bit definitions:
  5521F
  5522Fstruct XCERD_BITS
  5523F{                   // bit description
  5524F  Uint16 XCERD0 : 1 ;
  5525F                    // 0 Receive Channel enable bit
  5526F  Uint16 XCERD1 : 1 ;
  5527F                    // 1 Receive Channel enable bit
  5528F  Uint16 XCERD2 : 1 ;
  5529F                    // 2 Receive Channel enable bit
  5530F  Uint16 XCERD3 : 1 ;
  5531F                    // 3 Receive Channel enable bit
  5532F  Uint16 XCERD4 : 1 ;
  5533F                    // 4 Receive Channel enable bit
  5534F  Uint16 XCERD5 : 1 ;
  5535F                    // 5 Receive Channel enable bit
  5536F  Uint16 XCERD6 : 1 ;
  5537F                    // 6 Receive Channel enable bit
  5538F  Uint16 XCERD7 : 1 ;
  5539F                    // 7 Receive Channel enable bit
  5540F  Uint16 XCERD8 : 1 ;
  5541F                    // 8 Receive Channel enable bit
  5542F  Uint16 XCERD9 : 1 ;
  5543F                    // 9 Receive Channel enable bit
  5544F  Uint16 XCERD10 : 1 ;
  5545F                     // 10 Receive Channel enable bit
  5546F  Uint16 XCERD11 : 1 ;
  5547F                     // 11 Receive Channel enable bit
  5548F  Uint16 XCERD12 : 1 ;
  5549F                     // 12 Receive Channel enable bit
  5550F  Uint16 XCERD13 : 1 ;
  5551F                     // 13 Receive Channel enable bit
  5552F  Uint16 XCERD14 : 1 ;
  5553F                     // 14 Receive Channel enable bit
  5554F  Uint16 XCERD15 : 1 ;
  5555F                     // 15 Receive Channel enable bit
  5556F} ;
  5557F
  5558Funion XCERD_REG
  5559F{
  5560F  Uint16 all ;
  5561F  struct XCERD_BITS bit ;
  5562F} ;
  5563F// RCERE control register bit definitions:
  5564F
  5565Fstruct RCERE_BITS
  5566F{                   // bit description
  5567F  Uint16 RCEE0 : 1 ;
  5568F                   // 0 Receive Channel enable bit
  5569F  Uint16 RCEE1 : 1 ;
  5570F                   // 1 Receive Channel enable bit
  5571F  Uint16 RCEE2 : 1 ;
  5572F                   // 2 Receive Channel enable bit
  5573F  Uint16 RCEE3 : 1 ;
  5574F                   // 3 Receive Channel enable bit
  5575F  Uint16 RCEE4 : 1 ;
  5576F                   // 4 Receive Channel enable bit
  5577F  Uint16 RCEE5 : 1 ;
  5578F                   // 5 Receive Channel enable bit
  5579F  Uint16 RCEE6 : 1 ;
  5580F                   // 6 Receive Channel enable bit
  5581F  Uint16 RCEE7 : 1 ;
  5582F                   // 7 Receive Channel enable bit
  5583F  Uint16 RCEE8 : 1 ;
  5584F                   // 8 Receive Channel enable bit
  5585F  Uint16 RCEE9 : 1 ;
  5586F                   // 9 Receive Channel enable bit
  5587F  Uint16 RCEE10 : 1 ;
  5588F                    // 10 Receive Channel enable bit
  5589F  Uint16 RCEE11 : 1 ;
  5590F                    // 11 Receive Channel enable bit
  5591F  Uint16 RCEE12 : 1 ;
  5592F                    // 12 Receive Channel enable bit
  5593F  Uint16 RCEE13 : 1 ;
  5594F                    // 13 Receive Channel enable bit
  5595F  Uint16 RCEE14 : 1 ;
  5596F                    // 14 Receive Channel enable bit
  5597F  Uint16 RCEE15 : 1 ;
  5598F                    // 15 Receive Channel enable bit
  5599F} ;
  5600F
  5601Funion RCERE_REG
  5602F{
  5603F  Uint16 all ;
  5604F  struct RCERE_BITS bit ;
  5605F} ;
  5606F// RCERF control register bit definitions:
  5607F
  5608Fstruct RCERF_BITS
  5609F{                   // bit description
  5610F  Uint16 RCEF0 : 1 ;
  5611F                   // 0 Receive Channel enable bit
  5612F  Uint16 RCEF1 : 1 ;
  5613F                   // 1 Receive Channel enable bit
  5614F  Uint16 RCEF2 : 1 ;
  5615F                   // 2 Receive Channel enable bit
  5616F  Uint16 RCEF3 : 1 ;
  5617F                   // 3 Receive Channel enable bit
  5618F  Uint16 RCEF4 : 1 ;
  5619F                   // 4 Receive Channel enable bit
  5620F  Uint16 RCEF5 : 1 ;
  5621F                   // 5 Receive Channel enable bit
  5622F  Uint16 RCEF6 : 1 ;
  5623F                   // 6 Receive Channel enable bit
  5624F  Uint16 RCEF7 : 1 ;
  5625F                   // 7 Receive Channel enable bit
  5626F  Uint16 RCEF8 : 1 ;
  5627F                   // 8 Receive Channel enable bit
  5628F  Uint16 RCEF9 : 1 ;
  5629F                   // 9 Receive Channel enable bit
  5630F  Uint16 RCEF10 : 1 ;
  5631F                    // 10 Receive Channel enable bit
  5632F  Uint16 RCEF11 : 1 ;
  5633F                    // 11 Receive Channel enable bit
  5634F  Uint16 RCEF12 : 1 ;
  5635F                    // 12 Receive Channel enable bit
  5636F  Uint16 RCEF13 : 1 ;
  5637F                    // 13 Receive Channel enable bit
  5638F  Uint16 RCEF14 : 1 ;
  5639F                    // 14 Receive Channel enable bit
  5640F  Uint16 RCEF15 : 1 ;
  5641F                    // 15 Receive Channel enable bit
  5642F} ;
  5643F
  5644Funion RCERF_REG
  5645F{
  5646F  Uint16 all ;
  5647F  struct RCERF_BITS bit ;
  5648F} ;
  5649F// XCERE control register bit definitions:
  5650F
  5651Fstruct XCERE_BITS
  5652F{                   // bit description
  5653F  Uint16 XCERE0 : 1 ;
  5654F                    // 0 Receive Channel enable bit
  5655F  Uint16 XCERE1 : 1 ;
  5656F                    // 1 Receive Channel enable bit
  5657F  Uint16 XCERE2 : 1 ;
  5658F                    // 2 Receive Channel enable bit
  5659F  Uint16 XCERE3 : 1 ;
  5660F                    // 3 Receive Channel enable bit
  5661F  Uint16 XCERE4 : 1 ;
  5662F                    // 4 Receive Channel enable bit
  5663F  Uint16 XCERE5 : 1 ;
  5664F                    // 5 Receive Channel enable bit
  5665F  Uint16 XCERE6 : 1 ;
  5666F                    // 6 Receive Channel enable bit
  5667F  Uint16 XCERE7 : 1 ;
  5668F                    // 7 Receive Channel enable bit
  5669F  Uint16 XCERE8 : 1 ;
  5670F                    // 8 Receive Channel enable bit
  5671F  Uint16 XCERE9 : 1 ;
  5672F                    // 9 Receive Channel enable bit
  5673F  Uint16 XCERE10 : 1 ;
  5674F                     // 10 Receive Channel enable bit
  5675F  Uint16 XCERE11 : 1 ;
  5676F                     // 11 Receive Channel enable bit
  5677F  Uint16 XCERE12 : 1 ;
  5678F                     // 12 Receive Channel enable bit
  5679F  Uint16 XCERE13 : 1 ;
  5680F                     // 13 Receive Channel enable bit
  5681F  Uint16 XCERE14 : 1 ;
  5682F                     // 14 Receive Channel enable bit
  5683F  Uint16 XCERE15 : 1 ;
  5684F                     // 15 Receive Channel enable bit
  5685F} ;
  5686F
  5687Funion XCERE_REG
  5688F{
  5689F  Uint16 all ;
  5690F  struct XCERE_BITS bit ;
  5691F} ;
  5692F// XCERF control register bit definitions:
  5693F
  5694Fstruct XCERF_BITS
  5695F{                   // bit description
  5696F  Uint16 XCERF0 : 1 ;
  5697F                    // 0 Receive Channel enable bit
  5698F  Uint16 XCERF1 : 1 ;
  5699F                    // 1 Receive Channel enable bit
  5700F  Uint16 XCERF2 : 1 ;
  5701F                    // 2 Receive Channel enable bit
  5702F  Uint16 XCERF3 : 1 ;
  5703F                    // 3 Receive Channel enable bit
  5704F  Uint16 XCERF4 : 1 ;
  5705F                    // 4 Receive Channel enable bit
  5706F  Uint16 XCERF5 : 1 ;
  5707F                    // 5 Receive Channel enable bit
  5708F  Uint16 XCERF6 : 1 ;
  5709F                    // 6 Receive Channel enable bit
  5710F  Uint16 XCERF7 : 1 ;
  5711F                    // 7 Receive Channel enable bit
  5712F  Uint16 XCERF8 : 1 ;
  5713F                    // 8 Receive Channel enable bit
  5714F  Uint16 XCERF9 : 1 ;
  5715F                    // 9 Receive Channel enable bit
  5716F  Uint16 XCERF10 : 1 ;
  5717F                     // 10 Receive Channel enable bit
  5718F  Uint16 XCERF11 : 1 ;
  5719F                     // 11 Receive Channel enable bit
  5720F  Uint16 XCERF12 : 1 ;
  5721F                     // 12 Receive Channel enable bit
  5722F  Uint16 XCERF13 : 1 ;
  5723F                     // 13 Receive Channel enable bit
  5724F  Uint16 XCERF14 : 1 ;
  5725F                     // 14 Receive Channel enable bit
  5726F  Uint16 XCERF15 : 1 ;
  5727F                     // 15 Receive Channel enable bit
  5728F} ;
  5729F
  5730Funion XCERF_REG
  5731F{
  5732F  Uint16 all ;
  5733F  struct XCERF_BITS bit ;
  5734F} ;
  5735F// RCERG control register bit definitions:
  5736F
  5737Fstruct RCERG_BITS
  5738F{                   // bit description
  5739F  Uint16 RCEG0 : 1 ;
  5740F                   // 0 Receive Channel enable bit
  5741F  Uint16 RCEG1 : 1 ;
  5742F                   // 1 Receive Channel enable bit
  5743F  Uint16 RCEG2 : 1 ;
  5744F                   // 2 Receive Channel enable bit
  5745F  Uint16 RCEG3 : 1 ;
  5746F                   // 3 Receive Channel enable bit
  5747F  Uint16 RCEG4 : 1 ;
  5748F                   // 4 Receive Channel enable bit
  5749F  Uint16 RCEG5 : 1 ;
  5750F                   // 5 Receive Channel enable bit
  5751F  Uint16 RCEG6 : 1 ;
  5752F                   // 6 Receive Channel enable bit
  5753F  Uint16 RCEG7 : 1 ;
  5754F                   // 7 Receive Channel enable bit
  5755F  Uint16 RCEG8 : 1 ;
  5756F                   // 8 Receive Channel enable bit
  5757F  Uint16 RCEG9 : 1 ;
  5758F                   // 9 Receive Channel enable bit
  5759F  Uint16 RCEG10 : 1 ;
  5760F                    // 10 Receive Channel enable bit
  5761F  Uint16 RCEG11 : 1 ;
  5762F                    // 11 Receive Channel enable bit
  5763F  Uint16 RCEG12 : 1 ;
  5764F                    // 12 Receive Channel enable bit
  5765F  Uint16 RCEG13 : 1 ;
  5766F                    // 13 Receive Channel enable bit
  5767F  Uint16 RCEG14 : 1 ;
  5768F                    // 14 Receive Channel enable bit
  5769F  Uint16 RCEG15 : 1 ;
  5770F                    // 15 Receive Channel enable bit
  5771F} ;
  5772F
  5773Funion RCERG_REG
  5774F{
  5775F  Uint16 all ;
  5776F  struct RCERG_BITS bit ;
  5777F} ;
  5778F// RCERH control register bit definitions:
  5779F
  5780Fstruct RCERH_BITS
  5781F{                   // bit description
  5782F  Uint16 RCEH0 : 1 ;
  5783F                   // 0 Receive Channel enable bit
  5784F  Uint16 RCEH1 : 1 ;
  5785F                   // 1 Receive Channel enable bit
  5786F  Uint16 RCEH2 : 1 ;
  5787F                   // 2 Receive Channel enable bit
  5788F  Uint16 RCEH3 : 1 ;
  5789F                   // 3 Receive Channel enable bit
  5790F  Uint16 RCEH4 : 1 ;
  5791F                   // 4 Receive Channel enable bit
  5792F  Uint16 RCEH5 : 1 ;
  5793F                   // 5 Receive Channel enable bit
  5794F  Uint16 RCEH6 : 1 ;
  5795F                   // 6 Receive Channel enable bit
  5796F  Uint16 RCEH7 : 1 ;
  5797F                   // 7 Receive Channel enable bit
  5798F  Uint16 RCEH8 : 1 ;
  5799F                   // 8 Receive Channel enable bit
  5800F  Uint16 RCEH9 : 1 ;
  5801F                   // 9 Receive Channel enable bit
  5802F  Uint16 RCEH10 : 1 ;
  5803F                    // 10 Receive Channel enable bit
  5804F  Uint16 RCEH11 : 1 ;
  5805F                    // 11 Receive Channel enable bit
  5806F  Uint16 RCEH12 : 1 ;
  5807F                    // 12 Receive Channel enable bit
  5808F  Uint16 RCEH13 : 1 ;
  5809F                    // 13 Receive Channel enable bit
  5810F  Uint16 RCEH14 : 1 ;
  5811F                    // 14 Receive Channel enable bit
  5812F  Uint16 RCEH15 : 1 ;
  5813F                    // 15 Receive Channel enable bit
  5814F} ;
  5815F
  5816Funion RCERH_REG
  5817F{
  5818F  Uint16 all ;
  5819F  struct RCERH_BITS bit ;
  5820F} ;
  5821F// XCERG control register bit definitions:
  5822F
  5823Fstruct XCERG_BITS
  5824F{                   // bit description
  5825F  Uint16 XCERG0 : 1 ;
  5826F                    // 0 Receive Channel enable bit
  5827F  Uint16 XCERG1 : 1 ;
  5828F                    // 1 Receive Channel enable bit
  5829F  Uint16 XCERG2 : 1 ;
  5830F                    // 2 Receive Channel enable bit
  5831F  Uint16 XCERG3 : 1 ;
  5832F                    // 3 Receive Channel enable bit
  5833F  Uint16 XCERG4 : 1 ;
  5834F                    // 4 Receive Channel enable bit
  5835F  Uint16 XCERG5 : 1 ;
  5836F                    // 5 Receive Channel enable bit
  5837F  Uint16 XCERG6 : 1 ;
  5838F                    // 6 Receive Channel enable bit
  5839F  Uint16 XCERG7 : 1 ;
  5840F                    // 7 Receive Channel enable bit
  5841F  Uint16 XCERG8 : 1 ;
  5842F                    // 8 Receive Channel enable bit
  5843F  Uint16 XCERG9 : 1 ;
  5844F                    // 9 Receive Channel enable bit
  5845F  Uint16 XCERG10 : 1 ;
  5846F                     // 10 Receive Channel enable bit
  5847F  Uint16 XCERG11 : 1 ;
  5848F                     // 11 Receive Channel enable bit
  5849F  Uint16 XCERG12 : 1 ;
  5850F                     // 12 Receive Channel enable bit
  5851F  Uint16 XCERG13 : 1 ;
  5852F                     // 13 Receive Channel enable bit
  5853F  Uint16 XCERG14 : 1 ;
  5854F                     // 14 Receive Channel enable bit
  5855F  Uint16 XCERG15 : 1 ;
  5856F                     // 15 Receive Channel enable bit
  5857F} ;
  5858F
  5859Funion XCERG_REG
  5860F{
  5861F  Uint16 all ;
  5862F  struct XCERG_BITS bit ;
  5863F} ;
  5864F// XCERH control register bit definitions:
  5865F
  5866Fstruct XCERH_BITS
  5867F{                   // bit description
  5868F  Uint16 XCEH0 : 1 ;
  5869F                   // 0 Receive Channel enable bit
  5870F  Uint16 XCEH1 : 1 ;
  5871F                   // 1 Receive Channel enable bit
  5872F  Uint16 XCEH2 : 1 ;
  5873F                   // 2 Receive Channel enable bit
  5874F  Uint16 XCEH3 : 1 ;
  5875F                   // 3 Receive Channel enable bit
  5876F  Uint16 XCEH4 : 1 ;
  5877F                   // 4 Receive Channel enable bit
  5878F  Uint16 XCEH5 : 1 ;
  5879F                   // 5 Receive Channel enable bit
  5880F  Uint16 XCEH6 : 1 ;
  5881F                   // 6 Receive Channel enable bit
  5882F  Uint16 XCEH7 : 1 ;
  5883F                   // 7 Receive Channel enable bit
  5884F  Uint16 XCEH8 : 1 ;
  5885F                   // 8 Receive Channel enable bit
  5886F  Uint16 XCEH9 : 1 ;
  5887F                   // 9 Receive Channel enable bit
  5888F  Uint16 XCEH10 : 1 ;
  5889F                    // 10 Receive Channel enable bit
  5890F  Uint16 XCEH11 : 1 ;
  5891F                    // 11 Receive Channel enable bit
  5892F  Uint16 XCEH12 : 1 ;
  5893F                    // 12 Receive Channel enable bit
  5894F  Uint16 XCEH13 : 1 ;
  5895F                    // 13 Receive Channel enable bit
  5896F  Uint16 XCEH14 : 1 ;
  5897F                    // 14 Receive Channel enable bit
  5898F  Uint16 XCEH15 : 1 ;
  5899F                    // 15 Receive Channel enable bit
  5900F} ;
  5901F
  5902Funion XCERH_REG
  5903F{
  5904F  Uint16 all ;
  5905F  struct XCERH_BITS bit ;
  5906F} ;
  5907F// McBSP Interrupt enable register for RINT/XINT
  5908F
  5909Fstruct MFFINT_BITS
  5910F{                    // bits description
  5911F  Uint16 XINT : 1 ;// 0 XINT interrupt enable
  5912F  Uint16 rsvd1 : 1 ;// 1 reserved
  5913F  Uint16 RINT : 1 ;// 2 RINT interrupt enable
  5914F  Uint16 rsvd2 : 13 ;// 15:3 reserved
  5915F} ;
  5916F
  5917Funion MFFINT_REG
  5918F{
  5919F  Uint16 all ;
  5920F  struct MFFINT_BITS bit ;
  5921F} ;
  5922F//---------------------------------------------------------------------------
  5923F// McBSP Register File:
  5924F//
  5925F
  5926Fstruct MCBSP_REGS
  5927F{
  5928F  union DRR2_REG DRR2 ; // MCBSP Data receive register bits 31-16
  5929F  union DRR1_REG DRR1 ; // MCBSP Data receive register bits 15-0
  5930F  union DXR2_REG DXR2 ; // MCBSP Data transmit register bits 31-16
  5931F  union DXR1_REG DXR1 ; // MCBSP Data transmit register bits 15-0
  5932F  union SPCR2_REG SPCR2 ; // MCBSP control register bits 31-16
  5933F  union SPCR1_REG SPCR1 ; // MCBSP control register bits 15-0
  5934F  union RCR2_REG RCR2 ; // MCBSP receive control register bits 31-16
  5935F  union RCR1_REG RCR1 ; // MCBSP receive control register bits 15-0
  5936F  union XCR2_REG XCR2 ; // MCBSP transmit control register bits 31-16
  5937F  union XCR1_REG XCR1 ; // MCBSP transmit control register bits 15-0
  5938F  union SRGR2_REG SRGR2 ; // MCBSP sample rate gen register bits 31-16
  5939F  union SRGR1_REG SRGR1 ; // MCBSP sample rate gen register bits 15-0
  5940F  union MCR2_REG MCR2 ; // MCBSP multichannel register bits 31-16
  5941F  union MCR1_REG MCR1 ; // MCBSP multichannel register bits 15-0
  5942F  union RCERA_REG RCERA ; // MCBSP Receive channel enable partition A
  5943F  union RCERB_REG RCERB ; // MCBSP Receive channel enable partition B
  5944F  union XCERA_REG XCERA ; // MCBSP Transmit channel enable partition A
  5945F  union XCERB_REG XCERB ; // MCBSP Transmit channel enable partition B
  5946F  union PCR_REG PCR ; // MCBSP Pin control register bits 15-0
  5947F  union RCERC_REG RCERC ; // MCBSP Receive channel enable partition C
  5948F  union RCERD_REG RCERD ; // MCBSP Receive channel enable partition D
  5949F  union XCERC_REG XCERC ; // MCBSP Transmit channel enable partition C
  5950F  union XCERD_REG XCERD ; // MCBSP Transmit channel enable partition D
  5951F  union RCERE_REG RCERE ; // MCBSP Receive channel enable partition E
  5952F  union RCERF_REG RCERF ; // MCBSP Receive channel enable partition F
  5953F  union XCERE_REG XCERE ; // MCBSP Transmit channel enable partition E
  5954F  union XCERF_REG XCERF ; // MCBSP Transmit channel enable partition F
  5955F  union RCERG_REG RCERG ; // MCBSP Receive channel enable partition G
  5956F  union RCERH_REG RCERH ; // MCBSP Receive channel enable partition H
  5957F  union XCERG_REG XCERG ; // MCBSP Transmit channel enable partition G
  5958F  union XCERH_REG XCERH ; // MCBSP Transmit channel enable partition H
  5959F  Uint16 rsvd1 [ 4 ] ;
  5960F                    // reserved
  5961F  union MFFINT_REG MFFINT ; // MCBSP Interrupt enable register for RINT/XINT
  5962F  Uint16 rsvd2 ; // reserved
  5963F} ;
  5964F//---------------------------------------------------------------------------
  5965F// McBSP External References & Function Declarations:
  5966F//
  5967F
  5968Fextern volatile struct MCBSP_REGS
  5969F  McbspaRegs ;
  5970F
  5971Fextern volatile struct MCBSP_REGS
  5972F  McbspbRegs ;
  5973F       /* extern "C" */
  5974F       // end of DSP2833x_MCBSP_H definition
  5975F//===========================================================================
  5976F// No more.
  5977F//===========================================================================
  5978F 
  5979F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_McBSP.h*/
  5980F/*   CLOSE_FILE Include File */
  5981F 
  5982F              // McBSP
  5983F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieCtrl.h */
  5984F// TI File $Revision: /main/1 $
  5985F// Checkin $Date: August 18, 2006 13:52:24 $
  5986F//###########################################################################
  5987F//
  5988F// FILE: DSP2833x_PieCtrl.h
  5989F//
  5990F// TITLE: DSP2833x Device PIE Control Register Definitions.
  5991F//
  5992F//###########################################################################
  5993F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  5994F// $Release Date: August 4, 2009 $
  5995F//###########################################################################
  5996F#ifndef DSP2833x_PIE_CTRL_H
  5997F#define DSP2833x_PIE_CTRL_H
  5998F//---------------------------------------------------------------------------
  5999F// PIE Control Register Bit Definitions:
  6000F//
  6001F// PIECTRL: Register bit definitions:
  6002F
  6003Ftypedef
  6004Fstruct PIECTRL_BITS
  6005F{                            // bits description
  6006F  Uint16 ENPIE : 1 ;
  6007F                   // 0 Enable PIE block
  6008F  Uint16 PIEVECT : 15 ;
  6009F                      // 15:1 Fetched vector address
  6010F} PIECTRL_BITS ;
  6011F
  6012Ftypedef
  6013Funion PIECTRL_REG
  6014F{
  6015F  Uint16 all ;
  6016F  struct PIECTRL_BITS bit ;
  6017F} PIECTRL_REG ;
  6018F// PIEIER: Register bit definitions:
  6019F
  6020Ftypedef
  6021Fstruct PIEIER_BITS
  6022F{                            // bits description
  6023F  Uint16 INTx1 : 1 ;
  6024F                   // 0 INTx.1
  6025F  Uint16 INTx2 : 1 ;
  6026F                   // 1 INTx.2
  6027F  Uint16 INTx3 : 1 ;
  6028F                   // 2 INTx.3
  6029F  Uint16 INTx4 : 1 ;
  6030F                   // 3 INTx.4
  6031F  Uint16 INTx5 : 1 ;
  6032F                   // 4 INTx.5
  6033F  Uint16 INTx6 : 1 ;
  6034F                   // 5 INTx.6
  6035F  Uint16 INTx7 : 1 ;
  6036F                   // 6 INTx.7
  6037F  Uint16 INTx8 : 1 ;
  6038F                   // 7 INTx.8
  6039F  Uint16 rsvd : 8 ;
  6040F                  // 15:8 reserved
  6041F} PIEIER_BITS ;
  6042F
  6043Ftypedef
  6044Funion PIEIER_REG
  6045F{
  6046F  Uint16 all ;
  6047F  struct PIEIER_BITS bit ;
  6048F} PIEIER_REG ;
  6049F// PIEIFR: Register bit definitions:
  6050F
  6051Ftypedef
  6052Fstruct PIEIFR_BITS
  6053F{                            // bits description
  6054F  Uint16 INTx1 : 1 ;
  6055F                   // 0 INTx.1
  6056F  Uint16 INTx2 : 1 ;
  6057F                   // 1 INTx.2
  6058F  Uint16 INTx3 : 1 ;
  6059F                   // 2 INTx.3
  6060F  Uint16 INTx4 : 1 ;
  6061F                   // 3 INTx.4
  6062F  Uint16 INTx5 : 1 ;
  6063F                   // 4 INTx.5
  6064F  Uint16 INTx6 : 1 ;
  6065F                   // 5 INTx.6
  6066F  Uint16 INTx7 : 1 ;
  6067F                   // 6 INTx.7
  6068F  Uint16 INTx8 : 1 ;
  6069F                   // 7 INTx.8
  6070F  Uint16 rsvd : 8 ;
  6071F                  // 15:8 reserved
  6072F} PIEIFR_BITS ;
  6073F
  6074Ftypedef
  6075Funion PIEIFR_REG
  6076F{
  6077F  Uint16 all ;
  6078F  struct PIEIFR_BITS bit ;
  6079F} PIEIFR_REG ;
  6080F// PIEACK: Register bit definitions:
  6081F
  6082Ftypedef
  6083Fstruct PIEACK_BITS
  6084F{                            // bits description
  6085F  Uint16 ACK1 : 1 ;
  6086F                  // 0 Acknowledge PIE interrupt group 1
  6087F  Uint16 ACK2 : 1 ;
  6088F                  // 1 Acknowledge PIE interrupt group 2
  6089F  Uint16 ACK3 : 1 ;
  6090F                  // 2 Acknowledge PIE interrupt group 3
  6091F  Uint16 ACK4 : 1 ;
  6092F                  // 3 Acknowledge PIE interrupt group 4
  6093F  Uint16 ACK5 : 1 ;
  6094F                  // 4 Acknowledge PIE interrupt group 5
  6095F  Uint16 ACK6 : 1 ;
  6096F                  // 5 Acknowledge PIE interrupt group 6
  6097F  Uint16 ACK7 : 1 ;
  6098F                  // 6 Acknowledge PIE interrupt group 7
  6099F  Uint16 ACK8 : 1 ;
  6100F                  // 7 Acknowledge PIE interrupt group 8
  6101F  Uint16 ACK9 : 1 ;
  6102F                  // 8 Acknowledge PIE interrupt group 9
  6103F  Uint16 ACK10 : 1 ;
  6104F                   // 9 Acknowledge PIE interrupt group 10
  6105F  Uint16 ACK11 : 1 ;
  6106F                   // 10 Acknowledge PIE interrupt group 11
  6107F  Uint16 ACK12 : 1 ;
  6108F                   // 11 Acknowledge PIE interrupt group 12
  6109F  Uint16 rsvd : 4 ;
  6110F                  // 15:12 reserved
  6111F} PIEACK_BITS ;
  6112F
  6113Ftypedef
  6114Funion PIEACK_REG
  6115F{
  6116F  Uint16 all ;
  6117F  struct PIEACK_BITS bit ;
  6118F} PIEACK_REG ;
  6119F//---------------------------------------------------------------------------
  6120F// PIE Control Register File:
  6121F//
  6122F
  6123Ftypedef
  6124Fstruct PIE_CTRL_REGS
  6125F{
  6126F  union PIECTRL_REG PIECTRL ; // PIE control register
  6127F  union PIEACK_REG PIEACK ; // PIE acknowledge
  6128F  union PIEIER_REG PIEIER1 ; // PIE int1 IER register
  6129F  union PIEIFR_REG PIEIFR1 ; // PIE int1 IFR register
  6130F  union PIEIER_REG PIEIER2 ; // PIE INT2 IER register
  6131F  union PIEIFR_REG PIEIFR2 ; // PIE INT2 IFR register
  6132F  union PIEIER_REG PIEIER3 ; // PIE INT3 IER register
  6133F  union PIEIFR_REG PIEIFR3 ; // PIE INT3 IFR register
  6134F  union PIEIER_REG PIEIER4 ; // PIE INT4 IER register
  6135F  union PIEIFR_REG PIEIFR4 ; // PIE INT4 IFR register
  6136F  union PIEIER_REG PIEIER5 ; // PIE INT5 IER register
  6137F  union PIEIFR_REG PIEIFR5 ; // PIE INT5 IFR register
  6138F  union PIEIER_REG PIEIER6 ; // PIE INT6 IER register
  6139F  union PIEIFR_REG PIEIFR6 ; // PIE INT6 IFR register
  6140F  union PIEIER_REG PIEIER7 ; // PIE INT7 IER register
  6141F  union PIEIFR_REG PIEIFR7 ; // PIE INT7 IFR register
  6142F  union PIEIER_REG PIEIER8 ; // PIE INT8 IER register
  6143F  union PIEIFR_REG PIEIFR8 ; // PIE INT8 IFR register
  6144F  union PIEIER_REG PIEIER9 ; // PIE INT9 IER register
  6145F  union PIEIFR_REG PIEIFR9 ; // PIE INT9 IFR register
  6146F  union PIEIER_REG PIEIER10 ; // PIE int10 IER register
  6147F  union PIEIFR_REG PIEIFR10 ; // PIE int10 IFR register
  6148F  union PIEIER_REG PIEIER11 ; // PIE int11 IER register
  6149F  union PIEIFR_REG PIEIFR11 ; // PIE int11 IFR register
  6150F  union PIEIER_REG PIEIER12 ; // PIE int12 IER register
  6151F  union PIEIFR_REG PIEIFR12 ; // PIE int12 IFR register
  6152F} PIE_CTRL_REGS ;
  6153F#define PIEACK_GROUP1 0x0001
  6154F#define PIEACK_GROUP2 0x0002
  6155F#define PIEACK_GROUP3 0x0004
  6156F#define PIEACK_GROUP4 0x0008
  6157F#define PIEACK_GROUP5 0x0010
  6158F#define PIEACK_GROUP6 0x0020
  6159F#define PIEACK_GROUP7 0x0040
  6160F#define PIEACK_GROUP8 0x0080
  6161F#define PIEACK_GROUP9 0x0100
  6162F#define PIEACK_GROUP10 0x0200
  6163F#define PIEACK_GROUP11 0x0400
  6164F#define PIEACK_GROUP12 0x0800
  6165F//---------------------------------------------------------------------------
  6166F// PIE Control Registers External References & Function Declarations:
  6167F//
  6168F
  6169Fextern volatile struct PIE_CTRL_REGS
  6170F  PieCtrlRegs ;
  6171F       // end of DSP2833x_PIE_CTRL_H definition
  6172F//===========================================================================
  6173F// End of file.
  6174F//===========================================================================
  6175F 
  6176F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieCtrl.h*/
  6177F/*   CLOSE_FILE Include File */
  6178F 
  6179F            // PIE Control Registers
  6180F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieVect.h */
  6181F// TI File $Revision: /main/2 $
  6182F// Checkin $Date: March 16, 2007 09:00:21 $
  6183F//###########################################################################
  6184F//
  6185F// FILE: DSP2833x_PieVect.h
  6186F//
  6187F// TITLE: DSP2833x Devices PIE Vector Table Definitions.
  6188F//
  6189F//###########################################################################
  6190F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6191F// $Release Date: August 4, 2009 $
  6192F//###########################################################################
  6193F#ifndef DSP2833x_PIE_VECT_H
  6194F#define DSP2833x_PIE_VECT_H
  6195F//---------------------------------------------------------------------------
  6196F// PIE Interrupt Vector Table Definition:
  6197F//
  6198F// Create a user type called PINT (pointer to interrupt):
  6199F
  6200Ftypedef
  6201Fconst
  6202Finterrupt void ( * PINT ) ( void ) ;
  6203F// Define Vector Table:
  6204F
  6205Ftypedef
  6206Fstruct PIE_VECT_TABLE
  6207F{
  6208F// Reset is never fetched from this table.
  6209F// It will always be fetched from 0x3FFFC0 in
  6210F// boot ROM
  6211F  PINT PIE1_RESERVED ;
  6212F  PINT PIE2_RESERVED ;
  6213F  PINT PIE3_RESERVED ;
  6214F  PINT PIE4_RESERVED ;
  6215F  PINT PIE5_RESERVED ;
  6216F  PINT PIE6_RESERVED ;
  6217F  PINT PIE7_RESERVED ;
  6218F  PINT PIE8_RESERVED ;
  6219F  PINT PIE9_RESERVED ;
  6220F  PINT PIE10_RESERVED ;
  6221F  PINT PIE11_RESERVED ;
  6222F  PINT PIE12_RESERVED ;
  6223F  PINT PIE13_RESERVED ;
  6224F// Non-Peripheral Interrupts:
  6225F  PINT XINT13 ;    // XINT13 / CPU-Timer1
  6226F  PINT TINT2 ;    // CPU-Timer2
  6227F  PINT DATALOG ;    // Datalogging interrupt
  6228F  PINT RTOSINT ;    // RTOS interrupt
  6229F  PINT EMUINT ;    // Emulation interrupt
  6230F  PINT XNMI ;    // Non-maskable interrupt
  6231F  PINT ILLEGAL ;    // Illegal operation TRAP
  6232F  PINT USER1 ;    // User Defined trap 1
  6233F  PINT USER2 ;    // User Defined trap 2
  6234F  PINT USER3 ;    // User Defined trap 3
  6235F  PINT USER4 ;    // User Defined trap 4
  6236F  PINT USER5 ;    // User Defined trap 5
  6237F  PINT USER6 ;    // User Defined trap 6
  6238F  PINT USER7 ;    // User Defined trap 7
  6239F  PINT USER8 ;    // User Defined trap 8
  6240F  PINT USER9 ;    // User Defined trap 9
  6241F  PINT USER10 ;    // User Defined trap 10
  6242F  PINT USER11 ;    // User Defined trap 11
  6243F  PINT USER12 ;    // User Defined trap 12
  6244F// Group 1 PIE Peripheral Vectors:
  6245F  PINT SEQ1INT ;
  6246F  PINT SEQ2INT ;
  6247F  PINT rsvd1_3 ;
  6248F  PINT XINT1 ;
  6249F  PINT XINT2 ;
  6250F  PINT ADCINT ;    // ADC
  6251F  PINT TINT0 ;    // Timer 0
  6252F  PINT WAKEINT ;    // WD
  6253F// Group 2 PIE Peripheral Vectors:
  6254F  PINT EPWM1_TZINT ;    // EPWM-1
  6255F  PINT EPWM2_TZINT ;    // EPWM-2
  6256F  PINT EPWM3_TZINT ;    // EPWM-3
  6257F  PINT EPWM4_TZINT ;    // EPWM-4
  6258F  PINT EPWM5_TZINT ;    // EPWM-5
  6259F  PINT EPWM6_TZINT ;    // EPWM-6
  6260F  PINT rsvd2_7 ;
  6261F  PINT rsvd2_8 ;
  6262F// Group 3 PIE Peripheral Vectors:
  6263F  PINT EPWM1_INT ;    // EPWM-1
  6264F  PINT EPWM2_INT ;    // EPWM-2
  6265F  PINT EPWM3_INT ;    // EPWM-3
  6266F  PINT EPWM4_INT ;    // EPWM-4
  6267F  PINT EPWM5_INT ;    // EPWM-5
  6268F  PINT EPWM6_INT ;    // EPWM-6
  6269F  PINT rsvd3_7 ;
  6270F  PINT rsvd3_8 ;
  6271F// Group 4 PIE Peripheral Vectors:
  6272F  PINT ECAP1_INT ;    // ECAP-1
  6273F  PINT ECAP2_INT ;    // ECAP-2
  6274F  PINT ECAP3_INT ;    // ECAP-3
  6275F  PINT ECAP4_INT ;    // ECAP-4
  6276F  PINT ECAP5_INT ;    // ECAP-5
  6277F  PINT ECAP6_INT ;    // ECAP-6
  6278F  PINT rsvd4_7 ;
  6279F  PINT rsvd4_8 ;
  6280F// Group 5 PIE Peripheral Vectors:
  6281F  PINT EQEP1_INT ;    // EQEP-1
  6282F  PINT EQEP2_INT ;    // EQEP-2
  6283F  PINT rsvd5_3 ;
  6284F  PINT rsvd5_4 ;
  6285F  PINT rsvd5_5 ;
  6286F  PINT rsvd5_6 ;
  6287F  PINT rsvd5_7 ;
  6288F  PINT rsvd5_8 ;
  6289F// Group 6 PIE Peripheral Vectors:
  6290F  PINT SPIRXINTA ;    // SPI-A
  6291F  PINT SPITXINTA ;    // SPI-A
  6292F  PINT MRINTB ;    // McBSP-B
  6293F  PINT MXINTB ;    // McBSP-B
  6294F  PINT MRINTA ;        // McBSP-A
  6295F  PINT MXINTA ;    // McBSP-A
  6296F  PINT rsvd6_7 ;
  6297F  PINT rsvd6_8 ;
  6298F// Group 7 PIE Peripheral Vectors:
  6299F  PINT DINTCH1 ;    // DMA
  6300F  PINT DINTCH2 ;    // DMA
  6301F  PINT DINTCH3 ;    // DMA
  6302F  PINT DINTCH4 ;    // DMA
  6303F  PINT DINTCH5 ;    // DMA
  6304F  PINT DINTCH6 ;    // DMA
  6305F  PINT rsvd7_7 ;
  6306F  PINT rsvd7_8 ;
  6307F// Group 8 PIE Peripheral Vectors:
  6308F  PINT I2CINT1A ;    // I2C-A
  6309F  PINT I2CINT2A ;    // I2C-A
  6310F  PINT rsvd8_3 ;
  6311F  PINT rsvd8_4 ;
  6312F  PINT SCIRXINTC ;    // SCI-C
  6313F  PINT SCITXINTC ;    // SCI-C
  6314F  PINT rsvd8_7 ;
  6315F  PINT rsvd8_8 ;
  6316F// Group 9 PIE Peripheral Vectors:
  6317F  PINT SCIRXINTA ;    // SCI-A
  6318F  PINT SCITXINTA ;    // SCI-A
  6319F  PINT SCIRXINTB ;    // SCI-B
  6320F  PINT SCITXINTB ;    // SCI-B
  6321F  PINT ECAN0INTA ;    // eCAN-A
  6322F  PINT ECAN1INTA ;    // eCAN-A
  6323F  PINT ECAN0INTB ;    // eCAN-B
  6324F  PINT ECAN1INTB ;    // eCAN-B
  6325F// Group 10 PIE Peripheral Vectors:
  6326F  PINT rsvd10_1 ;
  6327F  PINT rsvd10_2 ;
  6328F  PINT rsvd10_3 ;
  6329F  PINT rsvd10_4 ;
  6330F  PINT rsvd10_5 ;
  6331F  PINT rsvd10_6 ;
  6332F  PINT rsvd10_7 ;
  6333F  PINT rsvd10_8 ;
  6334F// Group 11 PIE Peripheral Vectors:
  6335F  PINT rsvd11_1 ;
  6336F  PINT rsvd11_2 ;
  6337F  PINT rsvd11_3 ;
  6338F  PINT rsvd11_4 ;
  6339F  PINT rsvd11_5 ;
  6340F  PINT rsvd11_6 ;
  6341F  PINT rsvd11_7 ;
  6342F  PINT rsvd11_8 ;
  6343F// Group 12 PIE Peripheral Vectors:
  6344F  PINT XINT3 ;    // External interrupt
  6345F  PINT XINT4 ;
  6346F  PINT XINT5 ;
  6347F  PINT XINT6 ;
  6348F  PINT XINT7 ;
  6349F  PINT rsvd12_6 ;
  6350F  PINT LVF ;    // Latched overflow
  6351F  PINT LUF ;    // Latched underflow
  6352F} PIE_VECT_TABLE ;
  6353F//---------------------------------------------------------------------------
  6354F// PIE Interrupt Vector Table External References & Function Declarations:
  6355F//
  6356F
  6357Fextern struct PIE_VECT_TABLE
  6358F  PieVectTable ;
  6359F       // end of DSP2833x_PIE_VECT_H definition
  6360F//===========================================================================
  6361F// End of file.
  6362F//===========================================================================
  6363F 
  6364F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieVect.h*/
  6365F/*   CLOSE_FILE Include File */
  6366F 
  6367F            // PIE Vector Table
  6368F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Spi.h */
  6369F// TI File $Revision: /main/3 $
  6370F// Checkin $Date: April 17, 2008 11:08:27 $
  6371F//###########################################################################
  6372F//
  6373F// FILE: DSP2833x_Spi.h
  6374F//
  6375F// TITLE: DSP2833x Device SPI Register Definitions.
  6376F//
  6377F//###########################################################################
  6378F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6379F// $Release Date: August 4, 2009 $
  6380F//###########################################################################
  6381F#ifndef DSP2833x_SPI_H
  6382F#define DSP2833x_SPI_H
  6383F//---------------------------------------------------------------------------
  6384F// SPI Individual Register Bit Definitions:
  6385F//
  6386F// SPI FIFO Transmit register bit definitions:
  6387F
  6388Fstruct SPIFFTX_BITS
  6389F{                     // bit description
  6390F  Uint16 TXFFIL : 5 ;
  6391F                    // 4:0 Interrupt level
  6392F  Uint16 TXFFIENA : 1 ;
  6393F                      // 5 Interrupt enable
  6394F  Uint16 TXFFINTCLR : 1 ;
  6395F                        // 6 Clear INT flag
  6396F  Uint16 TXFFINT : 1 ;
  6397F                     // 7 INT flag
  6398F  Uint16 TXFFST : 5 ;
  6399F                    // 12:8 FIFO status
  6400F  Uint16 TXFIFO : 1 ;
  6401F                    // 13 FIFO reset
  6402F  Uint16 SPIFFENA : 1 ;
  6403F                      // 14 Enhancement enable
  6404F  Uint16 SPIRST : 1 ;
  6405F                    // 15 Reset SPI
  6406F} ;
  6407F
  6408Funion SPIFFTX_REG
  6409F{
  6410F  Uint16 all ;
  6411F  struct SPIFFTX_BITS bit ;
  6412F} ;
  6413F//--------------------------------------------
  6414F// SPI FIFO recieve register bit definitions:
  6415F//
  6416F//
  6417F
  6418Fstruct SPIFFRX_BITS
  6419F{                     // bits description
  6420F  Uint16 RXFFIL : 5 ;
  6421F                    // 4:0 Interrupt level
  6422F  Uint16 RXFFIENA : 1 ;
  6423F                      // 5 Interrupt enable
  6424F  Uint16 RXFFINTCLR : 1 ;
  6425F                        // 6 Clear INT flag
  6426F  Uint16 RXFFINT : 1 ;
  6427F                     // 7 INT flag
  6428F  Uint16 RXFFST : 5 ;
  6429F                    // 12:8 FIFO status
  6430F  Uint16 RXFIFORESET : 1 ;
  6431F                         // 13 FIFO reset
  6432F  Uint16 RXFFOVFCLR : 1 ;
  6433F                        // 14 Clear overflow
  6434F  Uint16 RXFFOVF : 1 ;
  6435F                     // 15 FIFO overflow
  6436F} ;
  6437F
  6438Funion SPIFFRX_REG
  6439F{
  6440F  Uint16 all ;
  6441F  struct SPIFFRX_BITS bit ;
  6442F} ;
  6443F//--------------------------------------------
  6444F// SPI FIFO control register bit definitions:
  6445F//
  6446F//
  6447F
  6448Fstruct SPIFFCT_BITS
  6449F{                     // bits description
  6450F  Uint16 TXDLY : 8 ;
  6451F                   // 7:0 FIFO transmit delay
  6452F  Uint16 rsvd : 8 ;
  6453F                  // 15:8 reserved
  6454F} ;
  6455F
  6456Funion SPIFFCT_REG
  6457F{
  6458F  Uint16 all ;
  6459F  struct SPIFFCT_BITS bit ;
  6460F} ;
  6461F//---------------------------------------------
  6462F// SPI configuration register bit definitions:
  6463F//
  6464F//
  6465F
  6466Fstruct SPICCR_BITS
  6467F{                    // bits description
  6468F  Uint16 SPICHAR : 4 ;
  6469F                     // 3:0 Character length control
  6470F  Uint16 SPILBK : 1 ;
  6471F                    // 4 Loop-back enable/disable
  6472F  Uint16 rsvd1 : 1 ;
  6473F                   // 5 reserved
  6474F  Uint16 CLKPOLARITY : 1 ;
  6475F                         // 6 Clock polarity
  6476F  Uint16 SPISWRESET : 1 ;
  6477F                        // 7 SPI SW Reset
  6478F  Uint16 rsvd2 : 8 ;
  6479F                   // 15:8 reserved
  6480F} ;
  6481F
  6482Funion SPICCR_REG
  6483F{
  6484F  Uint16 all ;
  6485F  struct SPICCR_BITS bit ;
  6486F} ;
  6487F//-------------------------------------------------
  6488F// SPI operation control register bit definitions:
  6489F//
  6490F//
  6491F
  6492Fstruct SPICTL_BITS
  6493F{                    // bits description
  6494F  Uint16 SPIINTENA : 1 ;
  6495F                       // 0 Interrupt enable
  6496F  Uint16 TALK : 1 ;
  6497F                  // 1 Master/Slave transmit enable
  6498F  Uint16 MASTER_SLAVE : 1 ;
  6499F                          // 2 Network control mode
  6500F  Uint16 CLK_PHASE : 1 ;
  6501F                       // 3 Clock phase select
  6502F  Uint16 OVERRUNINTENA : 1 ;
  6503F                           // 4 Overrun interrupt enable
  6504F  Uint16 rsvd : 11 ;
  6505F                   // 15:5 reserved
  6506F} ;
  6507F
  6508Funion SPICTL_REG
  6509F{
  6510F  Uint16 all ;
  6511F  struct SPICTL_BITS bit ;
  6512F} ;
  6513F//--------------------------------------
  6514F// SPI status register bit definitions:
  6515F//
  6516F//
  6517F
  6518Fstruct SPISTS_BITS
  6519F{                    // bits description
  6520F  Uint16 rsvd1 : 5 ;
  6521F                   // 4:0 reserved
  6522F  Uint16 BUFFULL_FLAG : 1 ;
  6523F                          // 5 SPI transmit buffer full flag
  6524F  Uint16 INT_FLAG : 1 ;
  6525F                      // 6 SPI interrupt flag
  6526F  Uint16 OVERRUN_FLAG : 1 ;
  6527F                          // 7 SPI reciever overrun flag
  6528F  Uint16 rsvd2 : 8 ;
  6529F                   // 15:8 reserved
  6530F} ;
  6531F
  6532Funion SPISTS_REG
  6533F{
  6534F  Uint16 all ;
  6535F  struct SPISTS_BITS bit ;
  6536F} ;
  6537F//------------------------------------------------
  6538F// SPI priority control register bit definitions:
  6539F//
  6540F//
  6541F
  6542Fstruct SPIPRI_BITS
  6543F{                    // bits description
  6544F  Uint16 rsvd1 : 4 ;
  6545F                   // 3:0 reserved
  6546F  Uint16 FREE : 1 ;
  6547F                  // 4 Free emulation mode control
  6548F  Uint16 SOFT : 1 ;
  6549F                  // 5 Soft emulation mode control
  6550F  Uint16 rsvd2 : 1 ;
  6551F                   // 6 reserved
  6552F  Uint16 rsvd3 : 9 ;
  6553F                   // 15:7 reserved
  6554F} ;
  6555F
  6556Funion SPIPRI_REG
  6557F{
  6558F  Uint16 all ;
  6559F  struct SPIPRI_BITS bit ;
  6560F} ;
  6561F//---------------------------------------------------------------------------
  6562F// SPI Register File:
  6563F//
  6564F
  6565Fstruct SPI_REGS
  6566F{
  6567F  union SPICCR_REG SPICCR ; // Configuration register
  6568F  union SPICTL_REG SPICTL ; // Operation control register
  6569F  union SPISTS_REG SPISTS ; // Status register
  6570F  Uint16 rsvd1 ; // reserved
  6571F  Uint16 SPIBRR ; // Baud Rate
  6572F  Uint16 rsvd2 ; // reserved
  6573F  Uint16 SPIRXEMU ; // Emulation buffer
  6574F  Uint16 SPIRXBUF ; // Serial input buffer
  6575F  Uint16 SPITXBUF ; // Serial output buffer
  6576F  Uint16 SPIDAT ; // Serial data
  6577F  union SPIFFTX_REG SPIFFTX ; // FIFO transmit register
  6578F  union SPIFFRX_REG SPIFFRX ; // FIFO recieve register
  6579F  union SPIFFCT_REG SPIFFCT ; // FIFO control register
  6580F  Uint16 rsvd3 [ 2 ] ;
  6581F                    // reserved
  6582F  union SPIPRI_REG SPIPRI ; // FIFO Priority control
  6583F} ;
  6584F//---------------------------------------------------------------------------
  6585F// SPI External References & Function Declarations:
  6586F//
  6587F
  6588Fextern volatile struct SPI_REGS
  6589F  SpiaRegs ;
  6590F       /* extern "C" */
  6591F       // end of DSP2833x_SPI_H definition
  6592F//===========================================================================
  6593F// End of file.
  6594F//===========================================================================
  6595F 
  6596F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Spi.h*/
  6597F/*   CLOSE_FILE Include File */
  6598F 
  6599F                // SPI Registers
  6600F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Sci.h */
  6601F// TI File $Revision: /main/2 $
  6602F// Checkin $Date: March 1, 2007 15:57:02 $
  6603F//###########################################################################
  6604F//
  6605F// FILE:        DSP2833x_Sci.h
  6606F//
  6607F// TITLE:       DSP2833x Device SCI Register Definitions.
  6608F//
  6609F//###########################################################################
  6610F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6611F// $Release Date: August 4, 2009 $
  6612F//###########################################################################
  6613F#ifndef DSP2833x_SCI_H
  6614F#define DSP2833x_SCI_H
  6615F//---------------------------------------------------------------------------
  6616F// SCI Individual Register Bit Definitions
  6617F//----------------------------------------------------------
  6618F// SCICCR communication control register bit definitions:
  6619F//
  6620F
  6621Fstruct SCICCR_BITS
  6622F{                    // bit description
  6623F  Uint16 SCICHAR : 3 ;
  6624F                     // 2:0 Character length control
  6625F  Uint16 ADDRIDLE_MODE : 1 ;
  6626F                           // 3 ADDR/IDLE Mode control
  6627F  Uint16 LOOPBKENA : 1 ;
  6628F                       // 4 Loop Back enable
  6629F  Uint16 PARITYENA : 1 ;
  6630F                       // 5 Parity enable
  6631F  Uint16 PARITY : 1 ;
  6632F                    // 6 Even or Odd Parity
  6633F  Uint16 STOPBITS : 1 ;
  6634F                      // 7 Number of Stop Bits
  6635F  Uint16 rsvd1 : 8 ;
  6636F                   // 15:8 reserved
  6637F} ;
  6638F
  6639Funion SCICCR_REG
  6640F{
  6641F  Uint16 all ;
  6642F  struct SCICCR_BITS bit ;
  6643F} ;
  6644F//-------------------------------------------
  6645F// SCICTL1 control register 1 bit definitions:
  6646F//
  6647F
  6648Fstruct SCICTL1_BITS
  6649F{                     // bit description
  6650F  Uint16 RXENA : 1 ;
  6651F                   // 0 SCI receiver enable
  6652F  Uint16 TXENA : 1 ;
  6653F                   // 1 SCI transmitter enable
  6654F  Uint16 SLEEP : 1 ;
  6655F                   // 2 SCI sleep
  6656F  Uint16 TXWAKE : 1 ;
  6657F                    // 3 Transmitter wakeup method
  6658F  Uint16 rsvd : 1 ;
  6659F                  // 4 reserved
  6660F  Uint16 SWRESET : 1 ;
  6661F                     // 5 Software reset
  6662F  Uint16 RXERRINTENA : 1 ;
  6663F                         // 6 Recieve interrupt enable
  6664F  Uint16 rsvd1 : 9 ;
  6665F                   // 15:7 reserved
  6666F} ;
  6667F
  6668Funion SCICTL1_REG
  6669F{
  6670F  Uint16 all ;
  6671F  struct SCICTL1_BITS bit ;
  6672F} ;
  6673F//---------------------------------------------
  6674F// SCICTL2 control register 2 bit definitions:
  6675F//
  6676F
  6677Fstruct SCICTL2_BITS
  6678F{                     // bit description
  6679F  Uint16 TXINTENA : 1 ;
  6680F                      // 0 Transmit interrupt enable
  6681F  Uint16 RXBKINTENA : 1 ;
  6682F                        // 1 Receiver-buffer break enable
  6683F  Uint16 rsvd : 4 ;
  6684F                  // 5:2 reserved
  6685F  Uint16 TXEMPTY : 1 ;
  6686F                     // 6 Transmitter empty flag
  6687F  Uint16 TXRDY : 1 ;
  6688F                   // 7 Transmitter ready flag
  6689F  Uint16 rsvd1 : 8 ;
  6690F                   // 15:8 reserved
  6691F} ;
  6692F
  6693Funion SCICTL2_REG
  6694F{
  6695F  Uint16 all ;
  6696F  struct SCICTL2_BITS bit ;
  6697F} ;
  6698F//---------------------------------------------------
  6699F// SCIRXST Receiver status register bit definitions:
  6700F//
  6701F
  6702Fstruct SCIRXST_BITS
  6703F{                     // bit description
  6704F  Uint16 rsvd : 1 ;
  6705F                  // 0 reserved
  6706F  Uint16 RXWAKE : 1 ;
  6707F                    // 1 Receiver wakeup detect flag
  6708F  Uint16 PE : 1 ;
  6709F                // 2 Parity error flag
  6710F  Uint16 OE : 1 ;
  6711F                // 3 Overrun error flag
  6712F  Uint16 FE : 1 ;
  6713F                // 4 Framing error flag
  6714F  Uint16 BRKDT : 1 ;
  6715F                   // 5 Break-detect flag
  6716F  Uint16 RXRDY : 1 ;
  6717F                   // 6 Receiver ready flag
  6718F  Uint16 RXERROR : 1 ;
  6719F                     // 7 Receiver error flag
  6720F} ;
  6721F
  6722Funion SCIRXST_REG
  6723F{
  6724F  Uint16 all ;
  6725F  struct SCIRXST_BITS bit ;
  6726F} ;
  6727F//----------------------------------------------------
  6728F// SCIRXBUF Receiver Data Buffer with FIFO bit definitions:
  6729F//
  6730F
  6731Fstruct SCIRXBUF_BITS
  6732F{                      // bits description
  6733F  Uint16 RXDT : 8 ;
  6734F                  // 7:0 Receive word
  6735F  Uint16 rsvd : 6 ;
  6736F                  // 13:8 reserved
  6737F  Uint16 SCIFFPE : 1 ;
  6738F                     // 14 SCI PE error in FIFO mode
  6739F  Uint16 SCIFFFE : 1 ;
  6740F                     // 15 SCI FE error in FIFO mode
  6741F} ;
  6742F
  6743Funion SCIRXBUF_REG
  6744F{
  6745F  Uint16 all ;
  6746F  struct SCIRXBUF_BITS bit ;
  6747F} ;
  6748F//--------------------------------------------------
  6749F// SCIPRI Priority control register bit definitions:
  6750F//
  6751F//
  6752F
  6753Fstruct SCIPRI_BITS
  6754F{                    // bit description
  6755F  Uint16 rsvd : 3 ;
  6756F                  // 2:0 reserved
  6757F  Uint16 FREE : 1 ;
  6758F                  // 3 Free emulation suspend mode
  6759F  Uint16 SOFT : 1 ;
  6760F                  // 4 Soft emulation suspend mode
  6761F  Uint16 rsvd1 : 3 ;
  6762F                   // 7:5 reserved
  6763F} ;
  6764F
  6765Funion SCIPRI_REG
  6766F{
  6767F  Uint16 all ;
  6768F  struct SCIPRI_BITS bit ;
  6769F} ;
  6770F//-------------------------------------------------
  6771F// SCI FIFO Transmit register bit definitions:
  6772F//
  6773F//
  6774F
  6775Fstruct SCIFFTX_BITS
  6776F{                     // bit description
  6777F  Uint16 TXFFIL : 5 ;
  6778F                    // 4:0 Interrupt level
  6779F  Uint16 TXFFIENA : 1 ;
  6780F                      // 5 Interrupt enable
  6781F  Uint16 TXFFINTCLR : 1 ;
  6782F                        // 6 Clear INT flag
  6783F  Uint16 TXFFINT : 1 ;
  6784F                     // 7 INT flag
  6785F  Uint16 TXFFST : 5 ;
  6786F                    // 12:8 FIFO status
  6787F  Uint16 TXFIFOXRESET : 1 ;
  6788F                          // 13 FIFO reset
  6789F  Uint16 SCIFFENA : 1 ;
  6790F                      // 14 Enhancement enable
  6791F  Uint16 SCIRST : 1 ;
  6792F                    // 15 SCI reset rx/tx channels
  6793F} ;
  6794F
  6795Funion SCIFFTX_REG
  6796F{
  6797F  Uint16 all ;
  6798F  struct SCIFFTX_BITS bit ;
  6799F} ;
  6800F//------------------------------------------------
  6801F// SCI FIFO recieve register bit definitions:
  6802F//
  6803F//
  6804F
  6805Fstruct SCIFFRX_BITS
  6806F{                     // bits description
  6807F  Uint16 RXFFIL : 5 ;
  6808F                    // 4:0 Interrupt level
  6809F  Uint16 RXFFIENA : 1 ;
  6810F                      // 5 Interrupt enable
  6811F  Uint16 RXFFINTCLR : 1 ;
  6812F                        // 6 Clear INT flag
  6813F  Uint16 RXFFINT : 1 ;
  6814F                     // 7 INT flag
  6815F  Uint16 RXFFST : 5 ;
  6816F                    // 12:8 FIFO status
  6817F  Uint16 RXFIFORESET : 1 ;
  6818F                         // 13 FIFO reset
  6819F  Uint16 RXFFOVRCLR : 1 ;
  6820F                        // 14 Clear overflow
  6821F  Uint16 RXFFOVF : 1 ;
  6822F                     // 15 FIFO overflow
  6823F} ;
  6824F
  6825Funion SCIFFRX_REG
  6826F{
  6827F  Uint16 all ;
  6828F  struct SCIFFRX_BITS bit ;
  6829F} ;
  6830F// SCI FIFO control register bit definitions:
  6831F
  6832Fstruct SCIFFCT_BITS
  6833F{                     // bits description
  6834F  Uint16 FFTXDLY : 8 ;
  6835F                     // 7:0 FIFO transmit delay
  6836F  Uint16 rsvd : 5 ;
  6837F                  // 12:8 reserved
  6838F  Uint16 CDC : 1 ;
  6839F                 // 13 Auto baud mode enable
  6840F  Uint16 ABDCLR : 1 ;
  6841F                    // 14 Auto baud clear
  6842F  Uint16 ABD : 1 ;
  6843F                 // 15 Auto baud detect
  6844F} ;
  6845F
  6846Funion SCIFFCT_REG
  6847F{
  6848F  Uint16 all ;
  6849F  struct SCIFFCT_BITS bit ;
  6850F} ;
  6851F//---------------------------------------------------------------------------
  6852F// SCI Register File:
  6853F//
  6854F
  6855Fstruct SCI_REGS
  6856F{
  6857F  union SCICCR_REG SCICCR ; // Communications control register
  6858F  union SCICTL1_REG SCICTL1 ; // Control register 1
  6859F  Uint16 SCIHBAUD ; // Baud rate (high) register
  6860F  Uint16 SCILBAUD ; // Baud rate (low) register
  6861F  union SCICTL2_REG SCICTL2 ; // Control register 2
  6862F  union SCIRXST_REG SCIRXST ; // Recieve status register
  6863F  Uint16 SCIRXEMU ; // Recieve emulation buffer register
  6864F  union SCIRXBUF_REG SCIRXBUF ; // Recieve data buffer
  6865F  Uint16 rsvd1 ; // reserved
  6866F  Uint16 SCITXBUF ; // Transmit data buffer
  6867F  union SCIFFTX_REG SCIFFTX ; // FIFO transmit register
  6868F  union SCIFFRX_REG SCIFFRX ; // FIFO recieve register
  6869F  union SCIFFCT_REG SCIFFCT ; // FIFO control register
  6870F  Uint16 rsvd2 ; // reserved
  6871F  Uint16 rsvd3 ; // reserved
  6872F  union SCIPRI_REG SCIPRI ; // FIFO Priority control
  6873F} ;
  6874F//---------------------------------------------------------------------------
  6875F// SCI External References & Function Declarations:
  6876F//
  6877F
  6878Fextern volatile struct SCI_REGS
  6879F  SciaRegs ;
  6880F
  6881Fextern volatile struct SCI_REGS
  6882F  ScibRegs ;
  6883F
  6884Fextern volatile struct SCI_REGS
  6885F  ScicRegs ;
  6886F       /* extern "C" */
  6887F       // end of DSP2833x_SCI_H definition
  6888F//===========================================================================
  6889F// End of file.
  6890F//===========================================================================
  6891F 
  6892F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Sci.h*/
  6893F/*   CLOSE_FILE Include File */
  6894F 
  6895F                // SCI Registers
  6896F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_SysCtrl.h */
  6897F// TI File $Revision: /main/5 $
  6898F// Checkin $Date: May 12, 2008 09:34:58 $
  6899F//###########################################################################
  6900F//
  6901F// FILE: DSP2833x_SysCtrl.h
  6902F//
  6903F// TITLE: DSP2833x Device System Control Register Definitions.
  6904F//
  6905F//###########################################################################
  6906F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6907F// $Release Date: August 4, 2009 $
  6908F//###########################################################################
  6909F#ifndef DSP2833x_SYS_CTRL_H
  6910F#define DSP2833x_SYS_CTRL_H
  6911F//---------------------------------------------------------------------------
  6912F// System Control Individual Register Bit Definitions:
  6913F//
  6914F// PLL Status Register
  6915F
  6916Ftypedef
  6917Fstruct PLLSTS_BITS
  6918F{                            // bits description
  6919F  Uint16 PLLLOCKS : 1 ;
  6920F                      // 0 PLL lock status
  6921F  Uint16 rsvd1 : 1 ;
  6922F                   // 1 reserved
  6923F  Uint16 PLLOFF : 1 ;
  6924F                    // 2 PLL off bit
  6925F  Uint16 MCLKSTS : 1 ;
  6926F                     // 3 Missing clock status bit
  6927F  Uint16 MCLKCLR : 1 ;
  6928F                     // 4 Missing clock clear bit
  6929F  Uint16 OSCOFF : 1 ;
  6930F                    // 5 Oscillator clock off
  6931F  Uint16 MCLKOFF : 1 ;
  6932F                     // 6 Missing clock detect
  6933F  Uint16 DIVSEL : 2 ;
  6934F                    // 7 Divide Select
  6935F  Uint16 rsvd2 : 7 ;
  6936F                   // 15:7 reserved
  6937F} PLLSTS_BITS ;
  6938F
  6939Ftypedef
  6940Funion PLLSTS_REG
  6941F{
  6942F  Uint16 all ;
  6943F  struct PLLSTS_BITS bit ;
  6944F} PLLSTS_REG ;
  6945F// High speed peripheral clock register bit definitions:
  6946F
  6947Ftypedef
  6948Fstruct HISPCP_BITS
  6949F{                            // bits description
  6950F  Uint16 HSPCLK : 3 ;
  6951F                    // 2:0 Rate relative to SYSCLKOUT
  6952F  Uint16 rsvd1 : 13 ;
  6953F                    // 15:3 reserved
  6954F} HISPCP_BITS ;
  6955F
  6956Ftypedef
  6957Funion HISPCP_REG
  6958F{
  6959F  Uint16 all ;
  6960F  struct HISPCP_BITS bit ;
  6961F} HISPCP_REG ;
  6962F// Low speed peripheral clock register bit definitions:
  6963F
  6964Ftypedef
  6965Fstruct LOSPCP_BITS
  6966F{                            // bits description
  6967F  Uint16 LSPCLK : 3 ;
  6968F                    // 2:0 Rate relative to SYSCLKOUT
  6969F  Uint16 rsvd1 : 13 ;
  6970F                    // 15:3 reserved
  6971F} LOSPCP_BITS ;
  6972F
  6973Ftypedef
  6974Funion LOSPCP_REG
  6975F{
  6976F  Uint16 all ;
  6977F  struct LOSPCP_BITS bit ;
  6978F} LOSPCP_REG ;
  6979F// Peripheral clock control register 0 bit definitions:
  6980F
  6981Ftypedef
  6982Fstruct PCLKCR0_BITS
  6983F{                             // bits description
  6984F  Uint16 rsvd1 : 2 ;
  6985F                   // 1:0 reserved
  6986F  Uint16 TBCLKSYNC : 1 ;
  6987F                       // 2 EWPM Module TBCLK enable/sync
  6988F  Uint16 ADCENCLK : 1 ;
  6989F                      // 3 Enable high speed clk to ADC
  6990F  Uint16 I2CAENCLK : 1 ;
  6991F                       // 4 Enable SYSCLKOUT to I2C-A
  6992F  Uint16 SCICENCLK : 1 ;
  6993F                       // 5 Enalbe low speed clk to SCI-C
  6994F  Uint16 rsvd2 : 2 ;
  6995F                   // 7:6 reserved
  6996F  Uint16 SPIAENCLK : 1 ;
  6997F                       // 8 Enable low speed clk to SPI-A
  6998F  Uint16 rsvd3 : 1 ;
  6999F                   // 9 reserved
  7000F  Uint16 SCIAENCLK : 1 ;
  7001F                       // 10 Enable low speed clk to SCI-A
  7002F  Uint16 SCIBENCLK : 1 ;
  7003F                       // 11 Enable low speed clk to SCI-B
  7004F  Uint16 MCBSPAENCLK : 1 ;
  7005F                         // 12 Enable low speed clk to McBSP-A
  7006F  Uint16 MCBSPBENCLK : 1 ;
  7007F                         // 13 Enable low speed clk to McBSP-B
  7008F  Uint16 ECANAENCLK : 1 ;
  7009F                        // 14 Enable system clk to eCAN-A
  7010F  Uint16 ECANBENCLK : 1 ;
  7011F                        // 15 Enable system clk to eCAN-B
  7012F} PCLKCR0_BITS ;
  7013F
  7014Ftypedef
  7015Funion PCLKCR0_REG
  7016F{
  7017F  Uint16 all ;
  7018F  struct PCLKCR0_BITS bit ;
  7019F} PCLKCR0_REG ;
  7020F// Peripheral clock control register 1 bit definitions:
  7021F
  7022Ftypedef
  7023Fstruct PCLKCR1_BITS
  7024F{                             // bits description
  7025F  Uint16 EPWM1ENCLK : 1 ;
  7026F                        // 0 Enable SYSCLKOUT to EPWM1
  7027F  Uint16 EPWM2ENCLK : 1 ;
  7028F                        // 1 Enable SYSCLKOUT to EPWM2
  7029F  Uint16 EPWM3ENCLK : 1 ;
  7030F                        // 2 Enable SYSCLKOUT to EPWM3
  7031F  Uint16 EPWM4ENCLK : 1 ;
  7032F                        // 3 Enable SYSCLKOUT to EPWM4
  7033F  Uint16 EPWM5ENCLK : 1 ;
  7034F                        // 4 Enable SYSCLKOUT to EPWM5
  7035F  Uint16 EPWM6ENCLK : 1 ;
  7036F                        // 5 Enable SYSCLKOUT to EPWM6
  7037F  Uint16 rsvd1 : 2 ;
  7038F                   // 7:6 reserved
  7039F  Uint16 ECAP1ENCLK : 1 ;
  7040F                        // 8 Enable SYSCLKOUT to ECAP1
  7041F  Uint16 ECAP2ENCLK : 1 ;
  7042F                        // 9 Enable SYSCLKOUT to ECAP2
  7043F  Uint16 ECAP3ENCLK : 1 ;
  7044F                        // 10 Enable SYSCLKOUT to ECAP3
  7045F  Uint16 ECAP4ENCLK : 1 ;
  7046F                        // 11 Enable SYSCLKOUT to ECAP4
  7047F  Uint16 ECAP5ENCLK : 1 ;
  7048F                        // 12 Enable SYSCLKOUT to ECAP5
  7049F  Uint16 ECAP6ENCLK : 1 ;
  7050F                        // 13 Enable SYSCLKOUT to ECAP6
  7051F  Uint16 EQEP1ENCLK : 1 ;
  7052F                        // 14 Enable SYSCLKOUT to EQEP1
  7053F  Uint16 EQEP2ENCLK : 1 ;
  7054F                        // 15 Enable SYSCLKOUT to EQEP2
  7055F} PCLKCR1_BITS ;
  7056F
  7057Ftypedef
  7058Funion PCLKCR1_REG
  7059F{
  7060F  Uint16 all ;
  7061F  struct PCLKCR1_BITS bit ;
  7062F} PCLKCR1_REG ;
  7063F// Peripheral clock control register 2 bit definitions:
  7064F
  7065Ftypedef
  7066Fstruct PCLKCR3_BITS
  7067F{                             // bits description
  7068F  Uint16 rsvd1 : 8 ;
  7069F                   // 7:0 reserved
  7070F  Uint16 CPUTIMER0ENCLK : 1 ;
  7071F                            // 8 Enable SYSCLKOUT to CPU-Timer 0
  7072F  Uint16 CPUTIMER1ENCLK : 1 ;
  7073F                            // 9 Enable SYSCLKOUT to CPU-Timer 1
  7074F  Uint16 CPUTIMER2ENCLK : 1 ;
  7075F                            // 10 Enable SYSCLKOUT to CPU-Timer 2
  7076F  Uint16 DMAENCLK : 1 ;
  7077F                      // 11 Enable the DMA clock
  7078F  Uint16 XINTFENCLK : 1 ;
  7079F                        // 12 Enable SYSCLKOUT to XINTF
  7080F  Uint16 GPIOINENCLK : 1 ;
  7081F                         // Enable GPIO input clock
  7082F  Uint16 rsvd2 : 2 ;
  7083F                   // 15:14 reserved
  7084F} PCLKCR3_BITS ;
  7085F
  7086Ftypedef
  7087Funion PCLKCR3_REG
  7088F{
  7089F  Uint16 all ;
  7090F  struct PCLKCR3_BITS bit ;
  7091F} PCLKCR3_REG ;
  7092F// PLL control register bit definitions:
  7093F
  7094Ftypedef
  7095Fstruct PLLCR_BITS
  7096F{                           // bits description
  7097F  Uint16 DIV : 4 ;
  7098F                 // 3:0 Set clock ratio for the PLL
  7099F  Uint16 rsvd1 : 12 ;
  7100F                    // 15:4 reserved
  7101F} PLLCR_BITS ;
  7102F
  7103Ftypedef
  7104Funion PLLCR_REG
  7105F{
  7106F  Uint16 all ;
  7107F  struct PLLCR_BITS bit ;
  7108F} PLLCR_REG ;
  7109F// Low Power Mode 0 control register bit definitions:
  7110F
  7111Ftypedef
  7112Fstruct LPMCR0_BITS
  7113F{                            // bits description
  7114F  Uint16 LPM : 2 ;
  7115F                 // 1:0 Set the low power mode
  7116F  Uint16 QUALSTDBY : 6 ;
  7117F                       // 7:2 Qualification
  7118F  Uint16 rsvd1 : 7 ;
  7119F                   // 14:8 reserved
  7120F  Uint16 WDINTE : 1 ;
  7121F                    // 15 Enables WD to wake the device from STANDBY
  7122F} LPMCR0_BITS ;
  7123F
  7124Ftypedef
  7125Funion LPMCR0_REG
  7126F{
  7127F  Uint16 all ;
  7128F  struct LPMCR0_BITS bit ;
  7129F} LPMCR0_REG ;
  7130F// Dual-mapping configuration register bit definitions:
  7131F
  7132Ftypedef
  7133Fstruct MAPCNF_BITS
  7134F{                            // bits description
  7135F  Uint16 MAPEPWM : 1 ;// 0 EPWM dual-map enable
  7136F  Uint16 rsvd1 : 15 ;// 15:1 reserved
  7137F} MAPCNF_BITS ;
  7138F
  7139Ftypedef
  7140Funion MAPCNF_REG
  7141F{
  7142F  Uint16 all ;
  7143F  struct MAPCNF_BITS bit ;
  7144F} MAPCNF_REG ;
  7145F//---------------------------------------------------------------------------
  7146F// System Control Register File:
  7147F//
  7148F
  7149Ftypedef
  7150Fstruct SYS_CTRL_REGS
  7151F{
  7152F  Uint16 rsvd1 ; // 0
  7153F  union PLLSTS_REG PLLSTS ; // 1
  7154F  Uint16 rsvd2 [ 8 ] ;
  7155F                    // 2-9
  7156F  union HISPCP_REG HISPCP ; // 10: High-speed peripheral clock pre-scaler
  7157F  union LOSPCP_REG LOSPCP ; // 11: Low-speed peripheral clock pre-scaler
  7158F  union PCLKCR0_REG PCLKCR0 ; // 12: Peripheral clock control register
  7159F  union PCLKCR1_REG PCLKCR1 ; // 13: Peripheral clock control register
  7160F  union LPMCR0_REG LPMCR0 ; // 14: Low-power mode control register 0
  7161F  Uint16 rsvd3 ; // 15: reserved
  7162F  union PCLKCR3_REG PCLKCR3 ; // 16: Peripheral clock control register
  7163F  union PLLCR_REG PLLCR ;
  7164F                          // 17: PLL control register
  7165F   // No bit definitions are defined for SCSR because
  7166F   // a read-modify-write instruction can clear the WDOVERRIDE bit
  7167F  Uint16 SCSR ; // 18: System control and status register
  7168F  Uint16 WDCNTR ; // 19: WD counter register
  7169F  Uint16 rsvd4 ; // 20
  7170F  Uint16 WDKEY ; // 21: WD reset key register
  7171F  Uint16 rsvd5 [ 3 ] ;
  7172F                    // 22-24
  7173F   // No bit definitions are defined for WDCR because
  7174F   // the proper value must be written to the WDCHK field
  7175F   // whenever writing to this register.
  7176F  Uint16 WDCR ; // 25: WD timer control register
  7177F  Uint16 rsvd6 [ 4 ] ;
  7178F                    // 26-29
  7179F  union MAPCNF_REG MAPCNF ; // 30: Dual-mapping configuration register
  7180F  Uint16 rsvd7 [ 1 ] ;
  7181F                    // 31
  7182F} SYS_CTRL_REGS ;
  7183F/* --------------------------------------------------- */
  7184F/* CSM Registers */
  7185F/* */
  7186F/* ----------------------------------------------------*/
  7187F/* CSM Status & Control register bit definitions */
  7188F
  7189Ftypedef
  7190Fstruct CSMSCR_BITS
  7191F{                            // bit description
  7192F  Uint16 SECURE : 1 ;
  7193F                    // 0 Secure flag
  7194F  Uint16 rsvd1 : 14 ;
  7195F                    // 14-1 reserved
  7196F  Uint16 FORCESEC : 1 ;
  7197F                      // 15 Force Secure control bit
  7198F} CSMSCR_BITS ;
  7199F/* Allow access to the bit fields or entire register */
  7200F
  7201Ftypedef
  7202Funion CSMSCR_REG
  7203F{
  7204F  Uint16 all ;
  7205F  struct CSMSCR_BITS bit ;
  7206F} CSMSCR_REG ;
  7207F/* CSM Register File */
  7208F
  7209Ftypedef
  7210Fstruct CSM_REGS
  7211F{
  7212F  Uint16 KEY0 ; // KEY reg bits 15-0
  7213F  Uint16 KEY1 ; // KEY reg bits 31-16
  7214F  Uint16 KEY2 ; // KEY reg bits 47-32
  7215F  Uint16 KEY3 ; // KEY reg bits 63-48
  7216F  Uint16 KEY4 ; // KEY reg bits 79-64
  7217F  Uint16 KEY5 ; // KEY reg bits 95-80
  7218F  Uint16 KEY6 ; // KEY reg bits 111-96
  7219F  Uint16 KEY7 ; // KEY reg bits 127-112
  7220F  Uint16 rsvd1 ; // reserved
  7221F  Uint16 rsvd2 ; // reserved
  7222F  Uint16 rsvd3 ; // reserved
  7223F  Uint16 rsvd4 ; // reserved
  7224F  Uint16 rsvd5 ; // reserved
  7225F  Uint16 rsvd6 ; // reserved
  7226F  Uint16 rsvd7 ; // reserved
  7227F  union CSMSCR_REG CSMSCR ; // CSM Status & Control register
  7228F} CSM_REGS ;
  7229F/* Password locations */
  7230F
  7231Ftypedef
  7232Fstruct CSM_PWL
  7233F{
  7234F  Uint16 PSWD0 ; // PSWD bits 15-0
  7235F  Uint16 PSWD1 ; // PSWD bits 31-16
  7236F  Uint16 PSWD2 ; // PSWD bits 47-32
  7237F  Uint16 PSWD3 ; // PSWD bits 63-48
  7238F  Uint16 PSWD4 ; // PSWD bits 79-64
  7239F  Uint16 PSWD5 ; // PSWD bits 95-80
  7240F  Uint16 PSWD6 ; // PSWD bits 111-96
  7241F  Uint16 PSWD7 ; // PSWD bits 127-112
  7242F} CSM_PWL ;
  7243F/* Flash Registers */
  7244F#define FLASH_SLEEP 0x0000 ;
  7245F#define FLASH_STANDBY 0x0001 ;
  7246F#define FLASH_ACTIVE 0x0003 ;
  7247F/* Flash Option Register bit definitions */
  7248F
  7249Ftypedef
  7250Fstruct FOPT_BITS
  7251F{                          // bit description
  7252F  Uint16 ENPIPE : 1 ;
  7253F                    // 0 Enable Pipeline Mode
  7254F  Uint16 rsvd : 15 ;
  7255F                   // 1-15 reserved
  7256F} FOPT_BITS ;
  7257F/* Allow access to the bit fields or entire register */
  7258F
  7259Ftypedef
  7260Funion FOPT_REG
  7261F{
  7262F  Uint16 all ;
  7263F  struct FOPT_BITS bit ;
  7264F} FOPT_REG ;
  7265F/* Flash Power Modes Register bit definitions */
  7266F
  7267Ftypedef
  7268Fstruct FPWR_BITS
  7269F{                          // bit description
  7270F  Uint16 PWR : 2 ;
  7271F                 // 0-1 Power Mode bits
  7272F  Uint16 rsvd : 14 ;
  7273F                   // 2-15 reserved
  7274F} FPWR_BITS ;
  7275F/* Allow access to the bit fields or entire register */
  7276F
  7277Ftypedef
  7278Funion FPWR_REG
  7279F{
  7280F  Uint16 all ;
  7281F  struct FPWR_BITS bit ;
  7282F} FPWR_REG ;
  7283F/* Flash Status Register bit definitions */
  7284F
  7285Ftypedef
  7286Fstruct FSTATUS_BITS
  7287F{                             // bit description
  7288F  Uint16 PWRS : 2 ;
  7289F                  // 0-1 Power Mode Status bits
  7290F  Uint16 STDBYWAITS : 1 ;
  7291F                        // 2 Bank/Pump Sleep to Standby Wait Counter Status bits
  7292F  Uint16 ACTIVEWAITS : 1 ;
  7293F                         // 3 Bank/Pump Standby to Active Wait Counter Status bits
  7294F  Uint16 rsvd1 : 4 ;
  7295F                   // 4-7 reserved
  7296F  Uint16 V3STAT : 1 ;
  7297F                    // 8 VDD3V Status Latch bit
  7298F  Uint16 rsvd2 : 7 ;
  7299F                   // 9-15 reserved
  7300F} FSTATUS_BITS ;
  7301F/* Allow access to the bit fields or entire register */
  7302F
  7303Ftypedef
  7304Funion FSTATUS_REG
  7305F{
  7306F  Uint16 all ;
  7307F  struct FSTATUS_BITS bit ;
  7308F} FSTATUS_REG ;
  7309F/* Flash Sleep to Standby Wait Counter Register bit definitions */
  7310F
  7311Ftypedef
  7312Fstruct FSTDBYWAIT_BITS
  7313F{                                // bit description
  7314F  Uint16 STDBYWAIT : 9 ;
  7315F                       // 0-8 Bank/Pump Sleep to Standby Wait Count bits
  7316F  Uint16 rsvd : 7 ;
  7317F                  // 9-15 reserved
  7318F} FSTDBYWAIT_BITS ;
  7319F/* Allow access to the bit fields or entire register */
  7320F
  7321Ftypedef
  7322Funion FSTDBYWAIT_REG
  7323F{
  7324F  Uint16 all ;
  7325F  struct FSTDBYWAIT_BITS bit ;
  7326F} FSTDBYWAIT_REG ;
  7327F/* Flash Standby to Active Wait Counter Register bit definitions */
  7328F
  7329Ftypedef
  7330Fstruct FACTIVEWAIT_BITS
  7331F{                                 // bit description
  7332F  Uint16 ACTIVEWAIT : 9 ;
  7333F                        // 0-8 Bank/Pump Standby to Active Wait Count bits
  7334F  Uint16 rsvd : 7 ;
  7335F                  // 9-15 reserved
  7336F} FACTIVEWAIT_BITS ;
  7337F/* Allow access to the bit fields or entire register */
  7338F
  7339Ftypedef
  7340Funion FACTIVEWAIT_REG
  7341F{
  7342F  Uint16 all ;
  7343F  struct FACTIVEWAIT_BITS bit ;
  7344F} FACTIVEWAIT_REG ;
  7345F/* Bank Read Access Wait State Register bit definitions */
  7346F
  7347Ftypedef
  7348Fstruct FBANKWAIT_BITS
  7349F{                               // bit description
  7350F  Uint16 RANDWAIT : 4 ;
  7351F                      // 0-3 Flash Random Read Wait State bits
  7352F  Uint16 rsvd1 : 4 ;
  7353F                   // 4-7 reserved
  7354F  Uint16 PAGEWAIT : 4 ;
  7355F                      // 8-11 Flash Paged Read Wait State bits
  7356F  Uint16 rsvd2 : 4 ;
  7357F                   // 12-15 reserved
  7358F} FBANKWAIT_BITS ;
  7359F/* Allow access to the bit fields or entire register */
  7360F
  7361Ftypedef
  7362Funion FBANKWAIT_REG
  7363F{
  7364F  Uint16 all ;
  7365F  struct FBANKWAIT_BITS bit ;
  7366F} FBANKWAIT_REG ;
  7367F/* OTP Read Access Wait State Register bit definitions */
  7368F
  7369Ftypedef
  7370Fstruct FOTPWAIT_BITS
  7371F{                              // bit description
  7372F  Uint16 OTPWAIT : 5 ;
  7373F                     // 0-4 OTP Read Wait State bits
  7374F  Uint16 rsvd : 11 ;
  7375F                   // 5-15 reserved
  7376F} FOTPWAIT_BITS ;
  7377F/* Allow access to the bit fields or entire register */
  7378F
  7379Ftypedef
  7380Funion FOTPWAIT_REG
  7381F{
  7382F  Uint16 all ;
  7383F  struct FOTPWAIT_BITS bit ;
  7384F} FOTPWAIT_REG ;
  7385F
  7386Ftypedef
  7387Fstruct FLASH_REGS
  7388F{
  7389F  union FOPT_REG FOPT ; // Option Register
  7390F  Uint16 rsvd1 ; // reserved
  7391F  union FPWR_REG FPWR ; // Power Modes Register
  7392F  union FSTATUS_REG FSTATUS ; // Status Register
  7393F  union FSTDBYWAIT_REG FSTDBYWAIT ; // Pump/Bank Sleep to Standby Wait State Register
  7394F  union FACTIVEWAIT_REG FACTIVEWAIT ; // Pump/Bank Standby to Active Wait State Register
  7395F  union FBANKWAIT_REG FBANKWAIT ; // Bank Read Access Wait State Register
  7396F  union FOTPWAIT_REG FOTPWAIT ; // OTP Read Access Wait State Register
  7397F} FLASH_REGS ;
  7398F//---------------------------------------------------------------------------
  7399F// System Control External References & Function Declarations:
  7400F//
  7401F
  7402Fextern volatile struct SYS_CTRL_REGS
  7403F  SysCtrlRegs ;
  7404F
  7405Fextern volatile struct CSM_REGS
  7406F  CsmRegs ;
  7407F
  7408Fextern volatile struct CSM_PWL
  7409F  CsmPwl ;
  7410F
  7411Fextern volatile struct FLASH_REGS
  7412F  FlashRegs ;
  7413F       // end of DSP2833x_SYS_CTRL_H definition
  7414F//===========================================================================
  7415F// End of file.
  7416F//===========================================================================
  7417F 
  7418F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_SysCtrl.h*/
  7419F/*   CLOSE_FILE Include File */
  7420F 
  7421F            // System Control/Power Modes
  7422F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_XIntrupt.h */
  7423F// TI File $Revision: /main/1 $
  7424F// Checkin $Date: August 18, 2006 13:52:39 $
  7425F//###########################################################################
  7426F//
  7427F// FILE: DSP2833x_XIntrupt.h
  7428F//
  7429F// TITLE: DSP2833x Device External Interrupt Register Definitions.
  7430F//
  7431F//###########################################################################
  7432F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  7433F// $Release Date: August 4, 2009 $
  7434F//###########################################################################
  7435F#ifndef DSP2833x_XINTRUPT_H
  7436F#define DSP2833x_XINTRUPT_H
  7437F//---------------------------------------------------------------------------
  7438F
  7439Fstruct XINTCR_BITS
  7440F{
  7441F  Uint16 ENABLE : 1 ;// 0 enable/disable
  7442F  Uint16 rsvd1 : 1 ;// 1 reserved
  7443F  Uint16 POLARITY : 2 ;// 3:2 pos/neg, both triggered
  7444F  Uint16 rsvd2 : 12 ;//15:4 reserved
  7445F} ;
  7446F
  7447Funion XINTCR_REG
  7448F{
  7449F  Uint16 all ;
  7450F  struct XINTCR_BITS bit ;
  7451F} ;
  7452F
  7453Fstruct XNMICR_BITS
  7454F{
  7455F  Uint16 ENABLE : 1 ;// 0 enable/disable
  7456F  Uint16 SELECT : 1 ;// 1 Timer 1 or XNMI connected to int13
  7457F  Uint16 POLARITY : 2 ;// 3:2 pos/neg, or both triggered
  7458F  Uint16 rsvd2 : 12 ;// 15:4 reserved
  7459F} ;
  7460F
  7461Funion XNMICR_REG
  7462F{
  7463F  Uint16 all ;
  7464F  struct XNMICR_BITS bit ;
  7465F} ;
  7466F//---------------------------------------------------------------------------
  7467F// External Interrupt Register File:
  7468F//
  7469F
  7470Fstruct XINTRUPT_REGS
  7471F{
  7472F  union XINTCR_REG XINT1CR ;
  7473F  union XINTCR_REG XINT2CR ;
  7474F  union XINTCR_REG XINT3CR ;
  7475F  union XINTCR_REG XINT4CR ;
  7476F  union XINTCR_REG XINT5CR ;
  7477F  union XINTCR_REG XINT6CR ;
  7478F  union XINTCR_REG XINT7CR ;
  7479F  union XNMICR_REG XNMICR ;
  7480F  Uint16 XINT1CTR ;
  7481F  Uint16 XINT2CTR ;
  7482F  Uint16 rsvd [ 5 ] ;
  7483F  Uint16 XNMICTR ;
  7484F} ;
  7485F//---------------------------------------------------------------------------
  7486F// External Interrupt References & Function Declarations:
  7487F//
  7488F
  7489Fextern volatile struct XINTRUPT_REGS
  7490F  XIntruptRegs ;
  7491F       /* extern "C" */
  7492F       // end of DSP2833x_XINTF_H definition
  7493F//===========================================================================
  7494F// End of file.
  7495F//===========================================================================
  7496F 
  7497F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_XIntrupt.h*/
  7498F/*   CLOSE_FILE Include File */
  7499F 
  7500F           // External Interrupts
  7501F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Xintf.h */
  7502F// TI File $Revision: /main/4 $
  7503F// Checkin $Date: July 27, 2009 13:57:25 $
  7504F//###########################################################################
  7505F//
  7506F// FILE: DSP2833x_Xintf.h
  7507F//
  7508F// TITLE: DSP2833x Device External Interface Register Definitions.
  7509F//
  7510F//###########################################################################
  7511F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  7512F// $Release Date: August 4, 2009 $
  7513F//###########################################################################
  7514F#ifndef DSP2833x_XINTF_H
  7515F#define DSP2833x_XINTF_H
  7516F// XINTF timing register bit definitions:
  7517F
  7518Fstruct XTIMING_BITS
  7519F{                     // bits description
  7520F  Uint16 XWRTRAIL : 2 ;
  7521F                      // 1:0 Write access trail timing
  7522F  Uint16 XWRACTIVE : 3 ;
  7523F                       // 4:2 Write access active timing
  7524F  Uint16 XWRLEAD : 2 ;
  7525F                     // 6:5 Write access lead timing
  7526F  Uint16 XRDTRAIL : 2 ;
  7527F                      // 8:7 Read access trail timing
  7528F  Uint16 XRDACTIVE : 3 ;
  7529F                       // 11:9 Read access active timing
  7530F  Uint16 XRDLEAD : 2 ;
  7531F                     // 13:12 Read access lead timing
  7532F  Uint16 USEREADY : 1 ;
  7533F                      // 14 Extend access using HW waitstates
  7534F  Uint16 READYMODE : 1 ;
  7535F                       // 15 Ready mode
  7536F  Uint16 XSIZE : 2 ;
  7537F                   // 17:16 XINTF bus width - must be written as 11b
  7538F  Uint16 rsvd1 : 4 ;
  7539F                   // 21:18 reserved
  7540F  Uint16 X2TIMING : 1 ;
  7541F                      // 22 Double lead/active/trail timing
  7542F  Uint16 rsvd3 : 9 ;
  7543F                   // 31:23 reserved
  7544F} ;
  7545F
  7546Funion XTIMING_REG
  7547F{
  7548F  Uint32 all ;
  7549F  struct XTIMING_BITS bit ;
  7550F} ;
  7551F// XINTF control register bit definitions:
  7552F
  7553Fstruct XINTCNF2_BITS
  7554F{                      // bits description
  7555F  Uint16 WRBUFF : 2 ;
  7556F                    // 1:0 Write buffer depth
  7557F  Uint16 CLKMODE : 1 ;
  7558F                     // 2 Ratio for XCLKOUT with respect to XTIMCLK
  7559F  Uint16 CLKOFF : 1 ;
  7560F                    // 3 Disable XCLKOUT
  7561F  Uint16 rsvd1 : 2 ;
  7562F                   // 5:4 reserved
  7563F  Uint16 WLEVEL : 2 ;
  7564F                    // 7:6 Current level of the write buffer
  7565F  Uint16 rsvd2 : 1 ;
  7566F                   // 8 reserved
  7567F  Uint16 HOLD : 1 ;
  7568F                  // 9 Hold enable/disable
  7569F  Uint16 HOLDS : 1 ;
  7570F                   // 10 Current state of HOLDn input
  7571F  Uint16 HOLDAS : 1 ;
  7572F                    // 11 Current state of HOLDAn output
  7573F  Uint16 rsvd3 : 4 ;
  7574F                   // 15:12 reserved
  7575F  Uint16 XTIMCLK : 3 ;
  7576F                     // 18:16 Ratio for XTIMCLK
  7577F  Uint16 rsvd4 : 13 ;
  7578F                    // 31:19 reserved
  7579F} ;
  7580F
  7581Funion XINTCNF2_REG
  7582F{
  7583F  Uint32 all ;
  7584F  struct XINTCNF2_BITS bit ;
  7585F} ;
  7586F// XINTF bank switching register bit definitions:
  7587F
  7588Fstruct XBANK_BITS
  7589F{                   // bits description
  7590F  Uint16 BANK : 3 ;
  7591F                  // 2:0 Zone for which banking is enabled
  7592F  Uint16 BCYC : 3 ;
  7593F                  // 5:3 XTIMCLK cycles to add
  7594F  Uint16 rsvd : 10 ;
  7595F                   // 15:6 reserved
  7596F} ;
  7597F
  7598Funion XBANK_REG
  7599F{
  7600F  Uint16 all ;
  7601F  struct XBANK_BITS bit ;
  7602F} ;
  7603F
  7604Fstruct XRESET_BITS
  7605F{
  7606F  Uint16 XHARDRESET : 1 ;
  7607F  Uint16 rsvd1 : 15 ;
  7608F} ;
  7609F
  7610Funion XRESET_REG
  7611F{
  7612F  Uint16 all ;
  7613F  struct XRESET_BITS bit ;
  7614F} ;
  7615F//---------------------------------------------------------------------------
  7616F// XINTF Register File:
  7617F//
  7618F
  7619Fstruct XINTF_REGS
  7620F{
  7621F  union XTIMING_REG XTIMING0 ;
  7622F  Uint32 rsvd1 [ 5 ] ;
  7623F  union XTIMING_REG XTIMING6 ;
  7624F  union XTIMING_REG XTIMING7 ;
  7625F  Uint32 rsvd2 [ 2 ] ;
  7626F  union XINTCNF2_REG XINTCNF2 ;
  7627F  Uint32 rsvd3 ;
  7628F  union XBANK_REG XBANK ;
  7629F  Uint16 rsvd4 ;
  7630F  Uint16 XREVISION ;
  7631F  Uint16 rsvd5 [ 2 ] ;
  7632F  union XRESET_REG XRESET ;
  7633F} ;
  7634F//---------------------------------------------------------------------------
  7635F// XINTF External References & Function Declarations:
  7636F//
  7637F
  7638Fextern volatile struct XINTF_REGS
  7639F  XintfRegs ;
  7640F       /* extern "C" */
  7641F       // end of DSP2833x_XINTF_H definition
  7642F//===========================================================================
  7643F// No more.
  7644F//===========================================================================
  7645F 
  7646F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Xintf.h*/
  7647F/*   CLOSE_FILE Include File */
  7648F 
  7649F              // XINTF External Interface
  7650F#define DSP28_EPWM1 1
  7651F#define DSP28_EPWM2 1
  7652F#define DSP28_EPWM3 1
  7653F#define DSP28_EPWM4 1
  7654F#define DSP28_EPWM5 1
  7655F#define DSP28_EPWM6 1
  7656F#define DSP28_ECAP1 1
  7657F#define DSP28_ECAP2 1
  7658F#define DSP28_ECAP3 1
  7659F#define DSP28_ECAP4 1
  7660F#define DSP28_ECAP5 1
  7661F#define DSP28_ECAP6 1
  7662F#define DSP28_EQEP1 1
  7663F#define DSP28_EQEP2 1
  7664F#define DSP28_ECANA 1
  7665F#define DSP28_ECANB 1
  7666F#define DSP28_MCBSPA 1
  7667F#define DSP28_MCBSPB 1
  7668F#define DSP28_SPIA 1
  7669F#define DSP28_SCIA 1
  7670F#define DSP28_SCIB 1
  7671F#define DSP28_SCIC 1
  7672F#define DSP28_I2CA 1
  7673F       // end DSP28_28335
  7674F       // end DSP28_28334
  7675F       // end DSP28_28332
  7676F       /* extern "C" */
  7677F       // end of DSP2833x_DEVICE_H definition
  7678F//===========================================================================
  7679F// End of file.
  7680F//===========================================================================
  7681F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Device.h*/
  7682F/*   CLOSE_FILE Include File */
  7683F 
  7684F/* LDRA REMOVE #include "DSP2833x_Gpio.h" */
  7685F/******************************************************************************
  7686F* FUNCTION NAME : GPIO_Select
  7687F* INPUT : None
  7688F* OUTPUT : None
  7689F* RETURN : No return
  7690F* DESCRIPTION : Configure peripheral modules in use as its functionalities.
  7691F******************************************************************************/
  7692F
  7693Fvoid
  7694T  gpio_select ( void )
  7695F  {
  7696Fasm (" EALLOW")
  7697F;
  7698T    GpioCtrlRegs.GPAMUX1.all = 0U ;/* GPIO15 ... GPIO0 = General Puropse I/O */
  7699T    GpioCtrlRegs.GPAMUX2.all = 0U ;
  7700F                                   /* GPIO31 ... GPIO16 = General Purpose I/O */
  7701F    /* SCI-A I/O config */
  7702T    GpioCtrlRegs.GPAMUX2.bit.GPIO28 = 1U ;/* SCIRXDA */
  7703T    GpioCtrlRegs.GPAMUX2.bit.GPIO29 = 1U ;
  7704F                                          /* SCITXDA*/
  7705F    /* SPI-A I/O config */
  7706T    GpioCtrlRegs.GPAPUD.bit.GPIO16 = 0U ;/* Enable pull-up GPIO16 (SPISIMOA) */
  7707T    GpioCtrlRegs.GPAPUD.bit.GPIO17 = 0U ;/* Enable pull-up GPIO17 (SPISOMIA) */
  7708T    GpioCtrlRegs.GPAPUD.bit.GPIO18 = 0U ;/* Enable pull-up GPIO18 (SPICLKA) */
  7709T    GpioCtrlRegs.GPAPUD.bit.GPIO19 = 0U ;
  7710F                                         /* Enable pull-up GPIO19 (SPISTEA) */
  7711F    /* Set qualification for selected pins to asynch only
  7712F       This will select asynch (no qualification) for the selected pins. */
  7713T    GpioCtrlRegs.GPAQSEL2.bit.GPIO16 = 3U ;/* Asynch input GPIO16 (SPISIMOA) */
  7714T    GpioCtrlRegs.GPAQSEL2.bit.GPIO17 = 3U ;/* Asynch input GPIO17 (SPISOMIA) */
  7715T    GpioCtrlRegs.GPAQSEL2.bit.GPIO18 = 3U ;/* Asynch input GPIO18 (SPICLKA) */
  7716T    GpioCtrlRegs.GPAQSEL2.bit.GPIO19 = 3U ;
  7717F                                           /* Asynch input GPIO19 (SPISTEA) */
  7718F    /* Configure SPI-A pins using GPIO regs
  7719F       This specifies which of the possible GPIO pins will be SPI functional
  7720F       pins. */
  7721T    GpioCtrlRegs.GPAMUX2.bit.GPIO16 = 1U ;/* Configure GPIO16 as SPISIMOA */
  7722T    GpioCtrlRegs.GPAMUX2.bit.GPIO17 = 1U ;/* Configure GPIO17 as SPISOMIA */
  7723T    GpioCtrlRegs.GPAMUX2.bit.GPIO18 = 1U ;/* Configure GPIO18 as SPICLKA */
  7724T    GpioCtrlRegs.GPAMUX2.bit.GPIO19 = 1U ;
  7725F                                          /* Configure GPIO19 as SPISTEA */
  7726F    /* I2C-A I/O config */
  7727T    GpioCtrlRegs.GPBMUX1.bit.GPIO32 = 1U ;/* GPIO32 = I2C - SDA */
  7728T    GpioCtrlRegs.GPBMUX1.bit.GPIO33 = 1U ;/* GPIO33 = I2C - SCL */
  7729T    GpioCtrlRegs.GPBPUD.bit.GPIO32 = 0U ;/* Enable pull-up for GPIO32 (SDAA)*/
  7730T    GpioCtrlRegs.GPBPUD.bit.GPIO33 = 0U ;/* Enable pull-up for GPIO33 (SCLA)*/
  7731T    GpioCtrlRegs.GPBQSEL1.bit.GPIO32 = 3U ;/* Asynch input GPIO32 (SDAA)*/
  7732T    GpioCtrlRegs.GPBQSEL1.bit.GPIO33 = 3U ;/* Asynch input GPIO33 (SCLA)*/
  7733T    GpioCtrlRegs.GPBDIR.bit.GPIO32 = 0U ;/* GPIO32 (SDAA) as input*/
  7734T    GpioCtrlRegs.GPBDIR.bit.GPIO33 = 0U ;
  7735F                                         /* GPIO33 (SCLA) as input */
  7736F    /* XINT1 I/O config => Make GPIO23 the input source for XINT1 */
  7737T    GpioCtrlRegs.GPAPUD.bit.GPIO23 = 0U ;/* Enable pull-up on GPIO23 */
  7738T    GpioCtrlRegs.GPAMUX2.bit.GPIO23 = 0U ;/* GPIO23 = GPIO23 */
  7739T    GpioCtrlRegs.GPADIR.bit.GPIO23 = 0U ;/* GPIO23 = input */
  7740T    GpioIntRegs.GPIOXINT1SEL.all = 23U ;
  7741F                                        /* XINT1 connected to GPIO23 */
  7742F    /* XINT2 I/O config => Make GPIO20 the input source for XINT2 */
  7743T    GpioCtrlRegs.GPAPUD.bit.GPIO20 = 0U ;/* Enable pull-up on GPIO20 */
  7744T    GpioCtrlRegs.GPAMUX2.bit.GPIO20 = 0U ;/* GPIO20 = GPIO20 */
  7745T    GpioCtrlRegs.GPADIR.bit.GPIO20 = 0U ;/* GPIO20 = input */
  7746T    GpioIntRegs.GPIOXINT2SEL.all = 20U ;
  7747F                                        /* XINT2 connected to GPIO20 */
  7748F    /* GPIO06 I/O config => GPIO set for output to generate an output signal for GPS timing*/
  7749T    GpioCtrlRegs.GPAMUX1.bit.GPIO6 = 0U ;/* GPIO06 = General Purpose I/O */
  7750T    GpioCtrlRegs.GPADIR.bit.GPIO6 = 1U ;/* Output: Buzzer at GPIO06 */
  7751Fasm (" EDIS")
  7752T;
  7753T  }
  7754F
  7755Fvoid
  7756T  setup_epwm1a ( void )
  7757F  {
  7758T    EPwm1Regs.TBCTL.bit.CLKDIV = 4U ;// CLKDIV = 4 (0x0100) /16
  7759T    EPwm1Regs.TBCTL.bit.HSPCLKDIV = 2U ;// HSPCLKDIV = 2 (0x0001) /2
  7760F                                        // CLKDIV*HSPCLKDIV -> Divided by 32
  7761T    EPwm1Regs.TBCTL.bit.CTRMODE = 0U ;// up mode
  7762T    EPwm1Regs.AQCTLA.all = 0x0008U ;// set ePWM1A on CTR = PRD
  7763T    EPwm1Regs.TBPRD = 46875U ;// timer period for 50 Hz
  7764F// EPwm1Regs.CMPA.half.CMPA = EPwm1Regs.TBPRD / 2; // 50% duty cycle first
  7765T    EPwm1Regs.ETSEL.all = 0U ;
  7766T    EPwm1Regs.ETSEL.bit.INTEN = 0U ;// interrupt disable for ePWM1 (enable at Timer0 ISR)
  7767T    EPwm1Regs.ETSEL.bit.INTSEL = 2U ;// interrupt on CTR = PRD
  7768T    EPwm1Regs.ETPS.bit.INTPRD = 1U ;// interrupt on first event
  7769T  }
  7770F 
