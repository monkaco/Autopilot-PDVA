<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'
'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'>
<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en' dir='ltr'>
<head>
  <!-- Force (well, try) IE8 to use IE8 standards mode -->
  <meta http-equiv='X-UA-Compatible' content='IE=8' />
  <meta http-equiv='Content-Type' content='text/html' />
  <title>HIC++ Standards Model for C++</title>
  <meta name='generator' content='LDRA Standards Tool' />
  <meta name='date' content='2014-04-25_08-31-23' />
  <style>

* {
    padding : 0em;
    margin  : 0em;
}

body {
    padding     : 0px;
    margin      : 0px;
    background  : #ffffff;
    font-family : Verdana, sans-serif;
    font-size   : 100%; /* Forces font sizes to work in all browsers (i.e. IE) */
}

div.nav {
    width : 100%;
}

div.floating-menu {
    position    : fixed;
    width       : 100%;
    margin-left : 1em;
    margin-top  : 1.5em;
    font-size   : 1em;
    z-index     : 20; /* Ensure popup is over page title */
}

div.nav div.page_title {
    top            : 0px;
    left           : 0px;
    width          : 100%;
    height         : 1em;
    font-size      : 200%;
    font-weight    : bold;
    text-align     : center;
    padding-top    : 0.25em;
    padding-bottom : 0.25em;
    color          : #5f4970;
    border-bottom  : 2px solid #eb6c00;
    z-index        : 10; /* Ensure page title is over page body */
}

div.nav div.page_title span.registered {
    font-size      : 50%;
    vertical-align : top;
}

.floating-menu .title:hover {
    color        : #000000;
    background   : #ccc0da;
}

.floating-menu ul {
    font-family   : Arial, Helvetica, sans-serif;
    margin  : 0em;
    padding : 0em;
}

.floating-menu li.sep {
  border-top : 0.125em solid #eb6c00;
}

.floating-menu li {
  position          : relative;
/*   width             : 8em; --- move to :hover to fix IE7 stuck hover */
  width             : 8em;
  list-style        : none;
  border-left       : 0.25em solid #eb6c00;
  border-bottom     : 1px solid #ccc0da;
  vertical-align    : bottom; /* Fix IE5-Win */
}

.floating-menu ul a,
.floating-menu ul li {
  display           : block;
  text-decoration   : none;
  text-align        : center;
  color             : #ccc0da;
  background        : #5f4970;
  vertical-align    : bottom; /* Fix IE5-Win */
}

.floating-menu ul ul {
/*  Rest of styling in hover to fix IE hover bug */
    display : none;
}

/* Menu item hover effects */
.floating-menu a:hover,
.floating-menu li:hover {
    color           : #5f4970;
    background      : #ccc0da;
    width           : 8em;
}

.floating-menu ul.l-1 li:hover ul.l-2 {
    position    : absolute;
    left        : -0.25em;
    top         : 0px;
    display     : block;

    /* These give tracking error bands around popup items.
     * This doesn't work for IE7 without a background image.
     */
    padding             : 1.5em 1.5em 1.5em 0em;
    background-image    : url(ie7/transparent-bg.gif);
    background-repeat   : repeat;
}

.floating-menu ul.l-2 li:hover ul.l-3,
.floating-menu ul.l-3 li:hover ul.l-4,
.floating-menu ul.l-4 li:hover ul.l-5 {
    position    : absolute;
    left        : 7.75em;   /* Just inside the right edge of the parent */
    top         : -1.5em;   /* Compensate for tracking guard band at top */
    display     : block;

    /* These give tracking error bands around popup items.
     * This doesn't work for IE7 without a background image.
     */
    padding             : 1.5em 1.5em 1.5em 0em;
    background-image    : url(ie7/transparent-bg.gif);
    background-repeat   : repeat;
}

.floating-menu ul.h-menu li {
    display         : inline;
    float           : left;
    border-right    : 0px; /* Turn off right border. */
}

.floating-menu li div.standard-range {
    margin : 0 auto;
    width  : 100%;
}

li div.right-align-standard {
    width      : 40%;
    text-align : right;
    display    : inline-block;
}
li div.center {
    width      : 20%;
    display    : inline-block;
    text-align : center;
}
li div.left-align-standard {
    width      : 40%;
    display    : inline-block;
    text-align : left;
}
.floating-menu ul.h-standards li,
.floating-menu ul.h-standards a {
    width : 3.5em;
}

.floating-menu ul.h-standards div.standard {
}
.floating-menu ul.h-standards li.unused-standard:hover,
.floating-menu ul.h-standards li.unused-standard {
    color      : #837093;
    background : #5f4970;
}
.floating-menu ul.h-standards li.standard div,
.floating-menu ul.h-standards li.unused-standard div {
    width      : 80%;
    text-align : right;
    display    : inline-block;
}
.floating-menu ul.h-keywords {
    width : 43.75em; /* 5 * ( 8.5em + 0.25em ) */
}

.floating-menu ul.h-models {
    width : 43.75em; /* 5 * ( 8.5em + 0.25em ) */
}

.floating-menu ul.h-models li,
.floating-menu ul.h-models a {
    width : 8.5em;
}

div.body {
    background : #ffffff;
    position   : absolute;
    top        : 3em;
    bottom     : 0em;
    left       : 0em;
    right      : 0em;
}

div.body * {
    padding : 0em;
    margin  : 0.5em 0em 0em 0em;
    border  : none;
}

div.body div {
    margin-top : 0em;
}

div.body-content {
    background  : #ffffff;
    border-left : 2px solid #eb6c00;
}

div.body_block {
    margin-left     : 10px;
    margin-right    : 10px;
    margin-bottom   : 0em;
    margin-top      : 0.5em;
    padding-top     : 0.25em;
    padding-bottom  : 1.5em;
    border-bottom   : 1px solid #eb6c00;
    font-size       : 80%;
}

.body_block .block_title {
    color         : #5f4970;
    font-size     : 135%;
    margin-bottom : 0.5em;
}

thead .block_title {
    margin-left : -1.25em;
}

.body_block .block_title div.standard {
    font-family : Arial, Helvetica, sans-serif;
    margin-left : -7em;
    width       : 6.25em;
    float       : left;
    font-size   : 115%;
    text-align  : right;
}

.body_block .block_title div.rule {
    font-family : Arial, Helvetica, sans-serif;
    font-size   : 110%;
    margin-left : -8.75em;
    width       : 7.75em;
    float       : left;
}

.body_block .block_title div.rule div {
    text-align : right;
}

.body_block .block_title div.rule span {
    font-size  : 80%;
    font-style : italic;
}

div.body_block .title {
    color         : #5f4970;
    text-align    : left;
    font-weight   : bold;
    margin-top    : 0.75em;
    margin-bottom : 0.5em;
}

div.body_block ul,
div.body_block ol {
    margin-left : 2em;
}

div.footer {
    text-align     : center;
    padding-bottom : 1em;
}

div.footer span {
    font-size : 75%;
}

pre {
    font-family : 'Courier New', monospace;
    font-size   : 85%; /* Forces font sizes to work in all browsers (i.e. IE) */
}

pre .kw1, pre .kw2, pre .kw3, pre .kw4, pre .kw5 {
    color:#0000ff;
}

pre .coMULTI, pre .co0, pre .co1, pre .co2, pre .co3 {
    color:#008000;
}

pre .es0, pre .es1, pre .es2, pre .es3, pre .es4, pre .es5, pre .esHARD, pre .nu0, pre .nu1, pre .nu2, pre .nu3, pre .nu4, pre .nu5, pre .nu6, pre .nu7, pre .nu8, pre .nu9, pre .nu10, pre .nu11, pre .nu12, pre .nu13, pre .nu14, pre .nu15, pre .nu16, pre .nu17, pre .nu18, pre .nu19, pre .st0 {
    color:#8080ff;
}

pre .br0 {
    color:#ff8080;
}

pre .me1, pre .me2 {
    color:#c00000;
}

pre .sy0, pre .sy1, pre .sy2, pre .sy3, pre .sy4 {
    color:#888888;
}

div.xref {
    margin-top  : 6pt;
    margin-left : 20px;
}

div.xref td {
    color          : #5f4970;
    vertical-align : top;
}

div.xref td.from {
    text-align : right;
}

div.xref td.level,
div.xref td.target {
    padding-left:1em;
}

div.body-content a {
    text-decoration : none;
    color           : #eb6c00;
}

div.body-content a:hover {
    text-decoration : underline;
}

@media screen {
    div.nav div.page_title {
        position : fixed;
    }
    div.body-content {
        margin-left : 10em;
    }
    div.body {
        overflow : auto;
    }
}
@media print {
    div.nav div.page_title {
        position  : relative;
        font-size : 150%;
    }
    div.floating-menu,
    div.noprint {
        display : none;
    }
    div.body {
        overflow : visible;
    }
}
@media print {
    div.body-content {
        margin-left : 10em;
    }
}

  </style>
</head>
<body>
  <!--[if lt IE 8]>
  <script src='ie7/IE8.js'></script>
  <![endif]-->
  <div class='nav'>
    <div class='floating-menu'>
  <ul class='l-1'>
    <li style='z-index:10000'>Menu
      <ul class='l-2'>
       <li style='z-index:9999;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         S Standards
    <ul class='l-3'>
      <li style='z-index:10000;'>
        <div class='standard-range'><div class='right-align-standard'>1&nbsp;S</div><div class='center'>to</div><div class='left-align-standard'>100&nbsp;S</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_s1'><div>1&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s2'><div>2&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s3'><div>3&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s4'><div>4&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s5'><div>5&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s6'><div>6&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s7'><div>7&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s8'><div>8&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s9'><div>9&nbsp;S</div></a></li>
      <li class='unused-standard'><div>10&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s11'><div>11&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s12'><div>12&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s13'><div>13&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s14'><div>14&nbsp;S</div></a></li>
      <li class='unused-standard'><div>15&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s16'><div>16&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s17'><div>17&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s18'><div>18&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s19'><div>19&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s20'><div>20&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s21'><div>21&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s22'><div>22&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s23'><div>23&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s24'><div>24&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s25'><div>25&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s26'><div>26&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s27'><div>27&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s28'><div>28&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s29'><div>29&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s30'><div>30&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s31'><div>31&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s32'><div>32&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s33'><div>33&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s34'><div>34&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s35'><div>35&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s36'><div>36&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s37'><div>37&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s38'><div>38&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s39'><div>39&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s40'><div>40&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s41'><div>41&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s42'><div>42&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s43'><div>43&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s44'><div>44&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s45'><div>45&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s46'><div>46&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s47'><div>47&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s48'><div>48&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s49'><div>49&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s50'><div>50&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s51'><div>51&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s52'><div>52&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s53'><div>53&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s54'><div>54&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s55'><div>55&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s56'><div>56&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s57'><div>57&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s58'><div>58&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s59'><div>59&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s60'><div>60&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s61'><div>61&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s62'><div>62&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s63'><div>63&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s64'><div>64&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s65'><div>65&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s66'><div>66&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s67'><div>67&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s68'><div>68&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s69'><div>69&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s70'><div>70&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s71'><div>71&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s72'><div>72&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s73'><div>73&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s74'><div>74&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s75'><div>75&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s76'><div>76&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s77'><div>77&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s78'><div>78&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s79'><div>79&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s80'><div>80&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s81'><div>81&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s82'><div>82&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s83'><div>83&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s84'><div>84&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s85'><div>85&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s86'><div>86&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s87'><div>87&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s88'><div>88&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s89'><div>89&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s90'><div>90&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s91'><div>91&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s92'><div>92&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s93'><div>93&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s94'><div>94&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s95'><div>95&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s96'><div>96&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s97'><div>97&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s98'><div>98&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s99'><div>99&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s100'><div>100&nbsp;S</div></a></li>
    </ul> <!-- l-4 -->
      </li>
      <li style='z-index:9999;'>
        <div class='standard-range'><div class='right-align-standard'>101&nbsp;S</div><div class='center'>to</div><div class='left-align-standard'>200&nbsp;S</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_s101'><div>101&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s102'><div>102&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s103'><div>103&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s104'><div>104&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s105'><div>105&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s106'><div>106&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s107'><div>107&nbsp;S</div></a></li>
      <li class='unused-standard'><div>108&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s109'><div>109&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s110'><div>110&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s111'><div>111&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s112'><div>112&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s113'><div>113&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s114'><div>114&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s115'><div>115&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s116'><div>116&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s117'><div>117&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s118'><div>118&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s119'><div>119&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s120'><div>120&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s121'><div>121&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s122'><div>122&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s123'><div>123&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s124'><div>124&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s125'><div>125&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s126'><div>126&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s127'><div>127&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s128'><div>128&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s129'><div>129&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s130'><div>130&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s131'><div>131&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s132'><div>132&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s133'><div>133&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s134'><div>134&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s135'><div>135&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s136'><div>136&nbsp;S</div></a></li>
      <li class='unused-standard'><div>137&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s138'><div>138&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s139'><div>139&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s140'><div>140&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s141'><div>141&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s142'><div>142&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s143'><div>143&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s144'><div>144&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s145'><div>145&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s146'><div>146&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s147'><div>147&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s148'><div>148&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s149'><div>149&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s150'><div>150&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s151'><div>151&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s152'><div>152&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s153'><div>153&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s154'><div>154&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s155'><div>155&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s156'><div>156&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s157'><div>157&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s158'><div>158&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s159'><div>159&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s160'><div>160&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s161'><div>161&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s162'><div>162&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s163'><div>163&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s164'><div>164&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s165'><div>165&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s166'><div>166&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s167'><div>167&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s168'><div>168&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s169'><div>169&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s170'><div>170&nbsp;S</div></a></li>
      <li class='unused-standard'><div>171&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s172'><div>172&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s173'><div>173&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s174'><div>174&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s175'><div>175&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s176'><div>176&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s177'><div>177&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s178'><div>178&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s179'><div>179&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s180'><div>180&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s181'><div>181&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s182'><div>182&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s183'><div>183&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s184'><div>184&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s185'><div>185&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s186'><div>186&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s187'><div>187&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s188'><div>188&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s189'><div>189&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s190'><div>190&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s191'><div>191&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s192'><div>192&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s193'><div>193&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s194'><div>194&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s195'><div>195&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s196'><div>196&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s197'><div>197&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s198'><div>198&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s199'><div>199&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s200'><div>200&nbsp;S</div></a></li>
    </ul> <!-- l-4 -->
      </li>
      <li style='z-index:9998;'>
        <div class='standard-range'><div class='right-align-standard'>201&nbsp;S</div><div class='center'>to</div><div class='left-align-standard'>300&nbsp;S</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_s201'><div>201&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s202'><div>202&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s203'><div>203&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s204'><div>204&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s205'><div>205&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s206'><div>206&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s207'><div>207&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s208'><div>208&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s209'><div>209&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s210'><div>210&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s211'><div>211&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s212'><div>212&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s213'><div>213&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s214'><div>214&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s215'><div>215&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s216'><div>216&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s217'><div>217&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s218'><div>218&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s219'><div>219&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s220'><div>220&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s221'><div>221&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s222'><div>222&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s223'><div>223&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s224'><div>224&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s225'><div>225&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s226'><div>226&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s227'><div>227&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s228'><div>228&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s229'><div>229&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s230'><div>230&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s231'><div>231&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s232'><div>232&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s233'><div>233&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s234'><div>234&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s235'><div>235&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s236'><div>236&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s237'><div>237&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s238'><div>238&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s239'><div>239&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s240'><div>240&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s241'><div>241&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s242'><div>242&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s243'><div>243&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s244'><div>244&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s245'><div>245&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s246'><div>246&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s247'><div>247&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s248'><div>248&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s249'><div>249&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s250'><div>250&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s251'><div>251&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s252'><div>252&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s253'><div>253&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s254'><div>254&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s255'><div>255&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s256'><div>256&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s257'><div>257&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s258'><div>258&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s259'><div>259&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s260'><div>260&nbsp;S</div></a></li>
      <li class='unused-standard'><div>261&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s262'><div>262&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s263'><div>263&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s264'><div>264&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s265'><div>265&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s266'><div>266&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s267'><div>267&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s268'><div>268&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s269'><div>269&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s270'><div>270&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s271'><div>271&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s272'><div>272&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s273'><div>273&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s274'><div>274&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s275'><div>275&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s276'><div>276&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s277'><div>277&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s278'><div>278&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s279'><div>279&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s280'><div>280&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s281'><div>281&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s282'><div>282&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s283'><div>283&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s284'><div>284&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s285'><div>285&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s286'><div>286&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s287'><div>287&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s288'><div>288&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s289'><div>289&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s290'><div>290&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s291'><div>291&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s292'><div>292&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s293'><div>293&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s294'><div>294&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s295'><div>295&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s296'><div>296&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s297'><div>297&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s298'><div>298&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s299'><div>299&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s300'><div>300&nbsp;S</div></a></li>
    </ul> <!-- l-4 -->
      </li>
      <li style='z-index:9997;'>
        <div class='standard-range'><div class='right-align-standard'>301&nbsp;S</div><div class='center'>to</div><div class='left-align-standard'>400&nbsp;S</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_s301'><div>301&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s302'><div>302&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s303'><div>303&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s304'><div>304&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s305'><div>305&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s306'><div>306&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s307'><div>307&nbsp;S</div></a></li>
      <li class='unused-standard'><div>308&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s309'><div>309&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s310'><div>310&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s311'><div>311&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s312'><div>312&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s313'><div>313&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s314'><div>314&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s315'><div>315&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s316'><div>316&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s317'><div>317&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s318'><div>318&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s319'><div>319&nbsp;S</div></a></li>
      <li class='unused-standard'><div>320&nbsp;S</div></li>
      <li class='unused-standard'><div>321&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s322'><div>322&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s323'><div>323&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s324'><div>324&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s325'><div>325&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s326'><div>326&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s327'><div>327&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s328'><div>328&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s329'><div>329&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s330'><div>330&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s331'><div>331&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s332'><div>332&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s333'><div>333&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s334'><div>334&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s335'><div>335&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s336'><div>336&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s337'><div>337&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s338'><div>338&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s339'><div>339&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s340'><div>340&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s341'><div>341&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s342'><div>342&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s343'><div>343&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s344'><div>344&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s345'><div>345&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s346'><div>346&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s347'><div>347&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s348'><div>348&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s349'><div>349&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s350'><div>350&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s351'><div>351&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s352'><div>352&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s353'><div>353&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s354'><div>354&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s355'><div>355&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s356'><div>356&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s357'><div>357&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s358'><div>358&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s359'><div>359&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s360'><div>360&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s361'><div>361&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s362'><div>362&nbsp;S</div></a></li>
      <li class='unused-standard'><div>363&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s364'><div>364&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s365'><div>365&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s366'><div>366&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s367'><div>367&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s368'><div>368&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s369'><div>369&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s370'><div>370&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s371'><div>371&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s372'><div>372&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s373'><div>373&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s374'><div>374&nbsp;S</div></a></li>
      <li class='unused-standard'><div>375&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s376'><div>376&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s377'><div>377&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s378'><div>378&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s379'><div>379&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s380'><div>380&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s381'><div>381&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s382'><div>382&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s383'><div>383&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s384'><div>384&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s385'><div>385&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s386'><div>386&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s387'><div>387&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s388'><div>388&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s389'><div>389&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s390'><div>390&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s391'><div>391&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s392'><div>392&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s393'><div>393&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s394'><div>394&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s395'><div>395&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s396'><div>396&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s397'><div>397&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s398'><div>398&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s399'><div>399&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s400'><div>400&nbsp;S</div></a></li>
    </ul> <!-- l-4 -->
      </li>
      <li style='z-index:9996;'>
        <div class='standard-range'><div class='right-align-standard'>401&nbsp;S</div><div class='center'>to</div><div class='left-align-standard'>500&nbsp;S</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_s401'><div>401&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s402'><div>402&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s403'><div>403&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s404'><div>404&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s405'><div>405&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s406'><div>406&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s407'><div>407&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s408'><div>408&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s409'><div>409&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s410'><div>410&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s411'><div>411&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s412'><div>412&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s413'><div>413&nbsp;S</div></a></li>
      <li class='unused-standard'><div>414&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s415'><div>415&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s416'><div>416&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s417'><div>417&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s418'><div>418&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s419'><div>419&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s420'><div>420&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s421'><div>421&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s422'><div>422&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s423'><div>423&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s424'><div>424&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s425'><div>425&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s426'><div>426&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s427'><div>427&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s428'><div>428&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s429'><div>429&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s430'><div>430&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s431'><div>431&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s432'><div>432&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s433'><div>433&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s434'><div>434&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s435'><div>435&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s436'><div>436&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s437'><div>437&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s438'><div>438&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s439'><div>439&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s440'><div>440&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s441'><div>441&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s442'><div>442&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s443'><div>443&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s444'><div>444&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s445'><div>445&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s446'><div>446&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s447'><div>447&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s448'><div>448&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s449'><div>449&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s450'><div>450&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s451'><div>451&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s452'><div>452&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s453'><div>453&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s454'><div>454&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s455'><div>455&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s456'><div>456&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s457'><div>457&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s458'><div>458&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s459'><div>459&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s460'><div>460&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s461'><div>461&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s462'><div>462&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s463'><div>463&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s464'><div>464&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s465'><div>465&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s466'><div>466&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s467'><div>467&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s468'><div>468&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s469'><div>469&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s470'><div>470&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s471'><div>471&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s472'><div>472&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s473'><div>473&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s474'><div>474&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s475'><div>475&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s476'><div>476&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s477'><div>477&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s478'><div>478&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s479'><div>479&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s480'><div>480&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s481'><div>481&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s482'><div>482&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s483'><div>483&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s484'><div>484&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s485'><div>485&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s486'><div>486&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s487'><div>487&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s488'><div>488&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s489'><div>489&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s490'><div>490&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s491'><div>491&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s492'><div>492&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s493'><div>493&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s494'><div>494&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s495'><div>495&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s496'><div>496&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s497'><div>497&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s498'><div>498&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s499'><div>499&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s500'><div>500&nbsp;S</div></a></li>
    </ul> <!-- l-4 -->
      </li>
      <li style='z-index:9995;'>
        <div class='standard-range'><div class='right-align-standard'>501&nbsp;S</div><div class='center'>to</div><div class='left-align-standard'>600&nbsp;S</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_s501'><div>501&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s502'><div>502&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s503'><div>503&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s504'><div>504&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s505'><div>505&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s506'><div>506&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s507'><div>507&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s508'><div>508&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s509'><div>509&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s510'><div>510&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s511'><div>511&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s512'><div>512&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s513'><div>513&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s514'><div>514&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s515'><div>515&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s516'><div>516&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s517'><div>517&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s518'><div>518&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s519'><div>519&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s520'><div>520&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s521'><div>521&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s522'><div>522&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s523'><div>523&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s524'><div>524&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s525'><div>525&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s526'><div>526&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s527'><div>527&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s528'><div>528&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s529'><div>529&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s530'><div>530&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s531'><div>531&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s532'><div>532&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s533'><div>533&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s534'><div>534&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s535'><div>535&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s536'><div>536&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s537'><div>537&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s538'><div>538&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s539'><div>539&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s540'><div>540&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s541'><div>541&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s542'><div>542&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s543'><div>543&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s544'><div>544&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s545'><div>545&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s546'><div>546&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s547'><div>547&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s548'><div>548&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s549'><div>549&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s550'><div>550&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s551'><div>551&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s552'><div>552&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s553'><div>553&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s554'><div>554&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s555'><div>555&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s556'><div>556&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s557'><div>557&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s558'><div>558&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s559'><div>559&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s560'><div>560&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s561'><div>561&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s562'><div>562&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s563'><div>563&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s564'><div>564&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s565'><div>565&nbsp;S</div></a></li>
      <li class='unused-standard'><div>566&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s567'><div>567&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s568'><div>568&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s569'><div>569&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s570'><div>570&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s571'><div>571&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s572'><div>572&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s573'><div>573&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s574'><div>574&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s575'><div>575&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s576'><div>576&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s577'><div>577&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s578'><div>578&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s579'><div>579&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s580'><div>580&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s581'><div>581&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s582'><div>582&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s583'><div>583&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s584'><div>584&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s585'><div>585&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s586'><div>586&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s587'><div>587&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s588'><div>588&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s589'><div>589&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s590'><div>590&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s591'><div>591&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s592'><div>592&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s593'><div>593&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s594'><div>594&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s595'><div>595&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s596'><div>596&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s597'><div>597&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s598'><div>598&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s599'><div>599&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s600'><div>600&nbsp;S</div></a></li>
    </ul> <!-- l-4 -->
      </li>
      <li style='z-index:9994;'>
        <div class='standard-range'><div class='right-align-standard'>601&nbsp;S</div><div class='center'>to</div><div class='left-align-standard'>639&nbsp;S</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_s601'><div>601&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s602'><div>602&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s603'><div>603&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s604'><div>604&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s605'><div>605&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s606'><div>606&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s607'><div>607&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s608'><div>608&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s609'><div>609&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s610'><div>610&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s611'><div>611&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s612'><div>612&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s613'><div>613&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s614'><div>614&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s615'><div>615&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s616'><div>616&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s617'><div>617&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s618'><div>618&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s619'><div>619&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s620'><div>620&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s621'><div>621&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s622'><div>622&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s623'><div>623&nbsp;S</div></a></li>
      <li class='unused-standard'><div>624&nbsp;S</div></li>
      <li class='unused-standard'><div>625&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s626'><div>626&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s627'><div>627&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s628'><div>628&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s629'><div>629&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s630'><div>630&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s631'><div>631&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s632'><div>632&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s633'><div>633&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s634'><div>634&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s635'><div>635&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s636'><div>636&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s637'><div>637&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s638'><div>638&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s639'><div>639&nbsp;S</div></a></li>
    </ul> <!-- l-4 -->
      </li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9998;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         C Standards
    <ul class='l-3 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_c1'><div>1&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c2'><div>2&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c3'><div>3&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c4'><div>4&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c5'><div>5&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c6'><div>6&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c7'><div>7&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c8'><div>8&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c9'><div>9&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c10'><div>10&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c11'><div>11&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c12'><div>12&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c13'><div>13&nbsp;C</div></a></li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9997;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         D Standards
    <ul class='l-3'>
      <li style='z-index:10000;'>
        <div class='standard-range'><div class='right-align-standard'>1&nbsp;D</div><div class='center'>to</div><div class='left-align-standard'>100&nbsp;D</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_d1'><div>1&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d2'><div>2&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d3'><div>3&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d4'><div>4&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d5'><div>5&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d6'><div>6&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d7'><div>7&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d8'><div>8&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d9'><div>9&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d10'><div>10&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d11'><div>11&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d12'><div>12&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d13'><div>13&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d14'><div>14&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d15'><div>15&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d16'><div>16&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d17'><div>17&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d18'><div>18&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d19'><div>19&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d20'><div>20&nbsp;D</div></a></li>
      <li class='unused-standard'><div>21&nbsp;D</div></li>
      <li class='standard'><a href='standards.htm#standard_d22'><div>22&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d23'><div>23&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d24'><div>24&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d25'><div>25&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d26'><div>26&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d27'><div>27&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d28'><div>28&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d29'><div>29&nbsp;D</div></a></li>
      <li class='unused-standard'><div>30&nbsp;D</div></li>
      <li class='unused-standard'><div>31&nbsp;D</div></li>
      <li class='unused-standard'><div>32&nbsp;D</div></li>
      <li class='standard'><a href='standards.htm#standard_d33'><div>33&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d34'><div>34&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d35'><div>35&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d36'><div>36&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d37'><div>37&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d38'><div>38&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d39'><div>39&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d40'><div>40&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d41'><div>41&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d42'><div>42&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d43'><div>43&nbsp;D</div></a></li>
      <li class='unused-standard'><div>44&nbsp;D</div></li>
      <li class='standard'><a href='standards.htm#standard_d45'><div>45&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d46'><div>46&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d47'><div>47&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d48'><div>48&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d49'><div>49&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d50'><div>50&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d51'><div>51&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d52'><div>52&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d53'><div>53&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d54'><div>54&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d55'><div>55&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d56'><div>56&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d57'><div>57&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d58'><div>58&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d59'><div>59&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d60'><div>60&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d61'><div>61&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d62'><div>62&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d63'><div>63&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d64'><div>64&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d65'><div>65&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d66'><div>66&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d67'><div>67&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d68'><div>68&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d69'><div>69&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d70'><div>70&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d71'><div>71&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d72'><div>72&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d73'><div>73&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d74'><div>74&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d75'><div>75&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d76'><div>76&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d77'><div>77&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d78'><div>78&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d79'><div>79&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d80'><div>80&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d81'><div>81&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d82'><div>82&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d83'><div>83&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d84'><div>84&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d85'><div>85&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d86'><div>86&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d87'><div>87&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d88'><div>88&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d89'><div>89&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d90'><div>90&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d91'><div>91&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d92'><div>92&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d93'><div>93&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d94'><div>94&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d95'><div>95&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d96'><div>96&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d97'><div>97&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d98'><div>98&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d99'><div>99&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d100'><div>100&nbsp;D</div></a></li>
    </ul> <!-- l-4 -->
      </li>
      <li style='z-index:9999;'>
        <div class='standard-range'><div class='right-align-standard'>101&nbsp;D</div><div class='center'>to</div><div class='left-align-standard'>113&nbsp;D</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_d101'><div>101&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d102'><div>102&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d103'><div>103&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d104'><div>104&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d105'><div>105&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d106'><div>106&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d107'><div>107&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d108'><div>108&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d109'><div>109&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d110'><div>110&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d111'><div>111&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d112'><div>112&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d113'><div>113&nbsp;D</div></a></li>
    </ul> <!-- l-4 -->
      </li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9996;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         X Standards
    <ul class='l-3 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_x1'><div>1&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x2'><div>2&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x3'><div>3&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x4'><div>4&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x5'><div>5&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x6'><div>6&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x7'><div>7&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x8'><div>8&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x9'><div>9&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x10'><div>10&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x11'><div>11&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x12'><div>12&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x13'><div>13&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x14'><div>14&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x15'><div>15&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x16'><div>16&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x17'><div>17&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x18'><div>18&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x19'><div>19&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x20'><div>20&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x21'><div>21&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x22'><div>22&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x23'><div>23&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x24'><div>24&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x25'><div>25&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x26'><div>26&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x27'><div>27&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x28'><div>28&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x29'><div>29&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x30'><div>30&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x31'><div>31&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x32'><div>32&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x33'><div>33&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x34'><div>34&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x35'><div>35&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x36'><div>36&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x37'><div>37&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x38'><div>38&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x39'><div>39&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x40'><div>40&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x41'><div>41&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x42'><div>42&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x43'><div>43&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x44'><div>44&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x45'><div>45&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x46'><div>46&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x47'><div>47&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x48'><div>48&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x49'><div>49&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x50'><div>50&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x51'><div>51&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x52'><div>52&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x53'><div>53&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x54'><div>54&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x55'><div>55&nbsp;X</div></a></li>
      <li class='unused-standard'><div>56&nbsp;X</div></li>
      <li class='standard'><a href='standards.htm#standard_x57'><div>57&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x58'><div>58&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x59'><div>59&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x60'><div>60&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x61'><div>61&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x62'><div>62&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x63'><div>63&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x64'><div>64&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x65'><div>65&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x66'><div>66&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x67'><div>67&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x68'><div>68&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x69'><div>69&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x70'><div>70&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x71'><div>71&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x72'><div>72&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x73'><div>73&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x74'><div>74&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x75'><div>75&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x76'><div>76&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x77'><div>77&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x78'><div>78&nbsp;X</div></a></li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9995;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         I Standards
    <ul class='l-3 h-menu h-standards' style='width:3.75em;'>
      <li class='standard'><a href='standards.htm#standard_i1'><div>1&nbsp;I</div></a></li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9994;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         Q Standards
    <ul class='l-3 h-menu h-standards' style='width:18.75em;'>
      <li class='standard'><a href='standards.htm#standard_q1'><div>1&nbsp;Q</div></a></li>
      <li class='standard'><a href='standards.htm#standard_q2'><div>2&nbsp;Q</div></a></li>
      <li class='standard'><a href='standards.htm#standard_q3'><div>3&nbsp;Q</div></a></li>
      <li class='standard'><a href='standards.htm#standard_q4'><div>4&nbsp;Q</div></a></li>
      <li class='standard'><a href='standards.htm#standard_q5'><div>5&nbsp;Q</div></a></li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9993;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         U Standards
    <ul class='l-3 h-menu h-standards' style='width:11.25em;'>
      <li class='standard'><a href='standards.htm#standard_u1'><div>1&nbsp;U</div></a></li>
      <li class='standard'><a href='standards.htm#standard_u2'><div>2&nbsp;U</div></a></li>
      <li class='standard'><a href='standards.htm#standard_u3'><div>3&nbsp;U</div></a></li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9992;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         J Standards
    <ul class='l-3 h-menu h-standards' style='width:11.25em;'>
      <li class='standard'><a href='standards.htm#standard_j1'><div>1&nbsp;J</div></a></li>
      <li class='standard'><a href='standards.htm#standard_j2'><div>2&nbsp;J</div></a></li>
      <li class='standard'><a href='standards.htm#standard_j3'><div>3&nbsp;J</div></a></li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9991;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         Z Standards
    <ul class='l-3 h-menu h-standards' style='width:3.75em;'>
      <li class='standard'><a href='standards.htm#standard_z1'><div>1&nbsp;Z</div></a></li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9990;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         H Standards
    <ul class='l-3 h-menu h-standards' style='width:30em;'>
      <li class='standard'><a href='standards.htm#standard_h1'><div>1&nbsp;H</div></a></li>
      <li class='standard'><a href='standards.htm#standard_h2'><div>2&nbsp;H</div></a></li>
      <li class='standard'><a href='standards.htm#standard_h3'><div>3&nbsp;H</div></a></li>
      <li class='standard'><a href='standards.htm#standard_h4'><div>4&nbsp;H</div></a></li>
      <li class='standard'><a href='standards.htm#standard_h5'><div>5&nbsp;H</div></a></li>
      <li class='standard'><a href='standards.htm#standard_h6'><div>6&nbsp;H</div></a></li>
      <li class='standard'><a href='standards.htm#standard_h7'><div>7&nbsp;H</div></a></li>
      <li class='standard'><a href='standards.htm#standard_h8'><div>8&nbsp;H</div></a></li>
    </ul> <!-- l-3 -->
       </li>
    <li class='sep' style='z-index:9999;' />
        <li style='z-index:9989;'>
          <!-- No <a> tag round content means item stays lit when in popup -->
          By Keyword
          <ul class='l-3 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_decl'>Decl</a></div>
          <ul class='l-4 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_class'>Class</a></div>
          <ul class='l-5 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_inherit'>Inherit</a></div>
            </li>
            <li style='z-index:9999;'>
              <div class='standard-range'><a href='keywords.htm#keyword_op'>Op</a></div>
            </li>
          </ul>
            </li>
            <li style='z-index:9999;'>
              <div class='standard-range'><a href='keywords.htm#keyword_fn'>Fn</a></div>
          <ul class='l-5 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_fnpar'>Fnpar</a></div>
            </li>
          </ul>
            </li>
            <li style='z-index:9998;'>
              <div class='standard-range'><a href='keywords.htm#keyword_id'>Id</a></div>
            </li>
            <li style='z-index:9997;'>
              <div class='standard-range'><a href='keywords.htm#keyword_obj'>Obj</a></div>
            </li>
            <li style='z-index:9996;'>
              <div class='standard-range'><a href='keywords.htm#keyword_template'>Template</a></div>
            </li>
            <li style='z-index:9995;'>
              <div class='standard-range'><a href='keywords.htm#keyword_type'>Type</a></div>
          <ul class='l-5 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_struct'>Struct</a></div>
            </li>
          </ul>
            </li>
          </ul>
            </li>
            <li style='z-index:9999;'>
              <div class='standard-range'><a href='keywords.htm#keyword_exp'>Exp</a></div>
          <ul class='l-4 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_arr'>Arr</a></div>
            </li>
            <li style='z-index:9999;'>
              <div class='standard-range'><a href='keywords.htm#keyword_conv'>Conv</a></div>
            </li>
            <li style='z-index:9998;'>
              <div class='standard-range'><a href='keywords.htm#keyword_ptr'>Ptr</a></div>
            </li>
          </ul>
            </li>
            <li style='z-index:9998;'>
              <div class='standard-range'><a href='keywords.htm#keyword_file'>File</a></div>
          <ul class='l-4 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_namespace'>Namespace</a></div>
            </li>
          </ul>
            </li>
            <li style='z-index:9997;'>
              <div class='standard-range'><a href='keywords.htm#keyword_flow'>Flow</a></div>
            </li>
            <li style='z-index:9996;'>
              <div class='standard-range'><a href='keywords.htm#keyword_lib'>Lib</a></div>
          <ul class='l-4 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_io'>Io</a></div>
            </li>
          </ul>
            </li>
            <li style='z-index:9995;'>
              <div class='standard-range'><a href='keywords.htm#keyword_lit'>Lit</a></div>
            </li>
            <li style='z-index:9994;'>
              <div class='standard-range'><a href='keywords.htm#keyword_metric'>Metric</a></div>
            </li>
            <li style='z-index:9993;'>
              <div class='standard-range'><a href='keywords.htm#keyword_misc'>Misc</a></div>
            </li>
            <li style='z-index:9992;'>
              <div class='standard-range'><a href='keywords.htm#keyword_pre'>Pre</a></div>
            </li>
            <li style='z-index:9991;'>
              <div class='standard-range'><a href='keywords.htm#keyword_stmt'>Stmt</a></div>
          <ul class='l-4 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_cond'>Cond</a></div>
          <ul class='l-5 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_if'>If</a></div>
            </li>
            <li style='z-index:9999;'>
              <div class='standard-range'><a href='keywords.htm#keyword_switch'>Switch</a></div>
            </li>
          </ul>
            </li>
            <li style='z-index:9999;'>
              <div class='standard-range'><a href='keywords.htm#keyword_loop'>Loop</a></div>
            </li>
            <li style='z-index:9998;'>
              <div class='standard-range'><a href='keywords.htm#keyword_jmp'>Jmp</a></div>
            </li>
            <li style='z-index:9997;'>
              <div class='standard-range'><a href='keywords.htm#keyword_except'>Except</a></div>
            </li>
          </ul>
            </li>
            <li style='z-index:9990;'>
              <div class='standard-range'><a href='keywords.htm#keyword_style'>Style</a></div>
            </li>
          </ul>
        </li>
        <li style='z-index:9988;'>
          <!-- No <a> tag round content means item stays lit when in popup -->
          By Classification
          <ul class='l-3 h-menu h-keywords'>
    <li><a href='classifications.htm#classification_allocation'>Allocation</a></li>
    <li><a href='classifications.htm#classification_complexity'>Complexity</a></li>
    <li><a href='classifications.htm#classification_dependability'>Dependability</a></li>
    <li><a href='classifications.htm#classification_fault'>Fault</a></li>
    <li><a href='classifications.htm#classification_maintainability'>Maintainability</a></li>
    <li><a href='classifications.htm#classification_portability'>Portability</a></li>
    <li><a href='classifications.htm#classification_style'>Style</a></li>
    <li><a href='classifications.htm#classification_testability'>Testability</a></li>
    <li><a href='classifications.htm#classification_vulnerabilities'>Vulnerabilities</a></li>
          </ul>
        </li>
    <li><a href='standard_flags.htm'>Std Modifiers</a></li>
    <li class='sep' style='z-index:9999;' />
        <li style='z-index:9987;'>
          <!-- No <a> tag round content means item stays lit when in popup -->
          Models
          <ul class='l-3 h-menu h-models'>
    <li><a href='cast_model.htm'>CAST</a></li>
    <li><a href='cert-c_model.htm'>CERT-C</a></li>
    <li><a href='cmse_model.htm'>CMSE</a></li>
    <li><a href='conform_model.htm'>CONFORM</a></li>
    <li><a href='cwe_model.htm'>CWE</a></li>
    <li><a href='customer_sample_model.htm'>Customer Sample</a></li>
    <li><a href='dera_model.htm'>DERA</a></li>
    <li><a href='eads-c_model.htm'>EADS-C</a></li>
    <li><a href='eads-cpp_model.htm'>EADS-C++</a></li>
    <li><a href='fsb582-c_model.htm'>FSB582-C</a></li>
    <li><a href='fsb582-cpp_model.htm'>FSB582-C++</a></li>
    <li><a href='gjb_model.htm'>GJB</a></li>
    <li><a href='hicpp_model.htm'>HIC++</a></li>
    <li><a href='his_model.htm'>HIS</a></li>
    <li><a href='jpl_model.htm'>JPL</a></li>
    <li><a href='jsf++_av_model.htm'>JSF++ AV</a></li>
    <li><a href='lmtcp_model.htm'>LMTCP</a></li>
    <li><a href='legacy_model.htm'>Legacy</a></li>
    <li><a href='misra-ac_model.htm'>MISRA-AC</a></li>
    <li><a href='misra-cpp_2008_model.htm'>MISRA-C++:2008</a></li>
    <li><a href='misra-c_1998_model.htm'>MISRA-C:1998</a></li>
    <li><a href='misra-c_2004_model.htm'>MISRA-C:2004</a></li>
    <li><a href='misra-c_2012_model.htm'>MISRA-C:2012</a></li>
    <li><a href='netrino_model.htm'>NETRINO</a></li>
    <li><a href='runtime_model.htm'>RUNTIME</a></li>
    <li><a href='sec-c_model.htm'>SEC-C</a></li>
    <li><a href='standard_model.htm'>Standard</a></li>
    <li><a href='tbrun_requires_model.htm'>TBrun Requires</a></li>
    <li><a href='uml_model.htm'>UML</a></li>
    <li><a href='vsos_model.htm'>VSOS</a></li>
          </ul>
        </li>
      </ul>
    </li>
  </ul><!-- l-1 -->
    </div><!-- floating-menu -->
    <div class='page_title'>HIC++ Standards Model for C++</div>
  </div><!-- nav -->
  <div class='body'>
    <div class='body-content'>
<div class='body_block'>
  <div class='title'>Acknowledgements</div>
  <p>Extracts from "High-Integrity C++ Coding Standard Manual, Version 2.2" &copy; The Programming Research Group</p>
  <div class='title'>Compliance Matrix</div>
  <p>A compliance matrix for the HIC++ standards model is available in the Microsoft Excel XML file <i>standards_info/compliance/hicpp_compliance.xml</i>, which may be found relative to the LDRA tool suite installation directory.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.1.1' name='rule_hic%2B%2B_3.1.1'><div class='rule'><div class='id'>3.1.1<br/><span>Rule (checking)</span></div></div></a><div class='headline'>Organise 'class' definitions by access level, in the following order : 'public', 'protected', 'private'.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>197&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s197'>Access specifiers in invalid order.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_210'>210</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.1.2' name='rule_hic%2B%2B_3.1.2'><div class='rule'><div class='id'>3.1.2<br/><span>Rule</span></div></div></a><div class='headline'>Define class type variables using direct initialisation rather than copy initialisation.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>419&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s419'>Deprecated class initialisation.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.1.3' name='rule_hic%2B%2B_3.1.3'><div class='rule'><div class='id'>3.1.3<br/><span>Rule</span></div></div></a><div class='headline'>Declare or define a copy constructor, a copy assignment operator and a destructor for classes which manage resources.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>233&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s233'>No copy constructor for class with pointers.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>234&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s234'>No assignment operator for class with pointers.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>235&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s235'>No destructor for class with pointers.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>236&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s236'>New used in class without assignment op.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>239&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s239'>New used in class without copy constructor.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>469&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s469'>No copy constructor for complex destructor.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>470&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s470'>No assignment operator for complex destrtor.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.1.4' name='rule_hic%2B%2B_3.1.4'><div class='rule'><div class='id'>3.1.4<br/><span>Rule</span></div></div></a><div class='headline'>Use an atomic, non-throwing swap operation to implement the copy-assignment operator ('operator=')</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.1.5' name='rule_hic%2B%2B_3.1.5'><div class='rule'><div class='id'>3.1.5<br/><span>Rule</span></div></div></a><div class='headline'>Ensure copy assignment is implemented correctly in terms of self assignment, inheritance, resource management and behaves consistently with the built in assignment operator.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>52&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d52'>Member(s) not assigned in = operator.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_262'>262</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>254&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s254'>Operator = doesn't return reference to *this.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.1.6' name='rule_hic%2B%2B_3.1.6'><div class='rule'><div class='id'>3.1.6<br/><span>Rule</span></div></div></a><div class='headline'>Only inline simple and non virtual functions, such as one line getters and setters.</div></div><p>LDRA Associated HIC++ 3.1.6, 11.8</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>266&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s266'>Constructor defined within class declaration.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>297&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s297'>Inline member has more than *** source lines.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>420&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s420'>Virtual function should not be inline.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.1.7' name='rule_hic%2B%2B_3.1.7'><div class='rule'><div class='id'>3.1.7<br/><span>Guideline</span></div></div></a><div class='headline'>Do not use the 'inline' keyword for member functions, inline functions by defining them in the class body.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>498&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s498'>Use of inline keyword.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.1.8' name='rule_hic%2B%2B_3.1.8'><div class='rule'><div class='id'>3.1.8<br/><span>Rule (checking)</span></div></div></a><div class='headline'>Declare 'const' any class member function that does not modify the externally visible state of the object.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>46&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d46'>Member function may be declared const.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.1.9' name='rule_hic%2B%2B_3.1.9'><div class='rule'><div class='id'>3.1.9<br/><span>Guideline</span></div></div></a><div class='headline'>Behaviour should be implemented by only one member function in a class.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.1.10' name='rule_hic%2B%2B_3.1.10'><div class='rule'><div class='id'>3.1.10<br/><span>Rule</span></div></div></a><div class='headline'>Do not declare conversion operators to fundamental types.</div></div><p>LDRA Associated HIC++ 3.1.10, 3.1.11, 3.2.3</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>393&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s393'>Single parameter constructor not 'explicit'.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>394&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s394'>Conversion function found.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.1.11' name='rule_hic%2B%2B_3.1.11'><div class='rule'><div class='id'>3.1.11<br/><span>Rule</span></div></div></a><div class='headline'>Do not provide conversion operators for class types.</div></div><p>LDRA Associated HIC++ 3.1.10, 3.1.11</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>394&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s394'>Conversion function found.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.1.12' name='rule_hic%2B%2B_3.1.12'><div class='rule'><div class='id'>3.1.12<br/><span>Guideline</span></div></div></a><div class='headline'>Provide an output operator ('operator &lt;&lt;') for ostream for all classes.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>500&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s500'>Class does not have a &lt;&lt; output operator.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.1.13' name='rule_hic%2B%2B_3.1.13'><div class='rule'><div class='id'>3.1.13<br/><span>Rule</span></div></div></a><div class='headline'>Verify that all classes provide a minimal standard interface against a checklist comprising: a default constructor; a copy constructor; a copy assignment operator and a destructor.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>230&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s230'>No copy constructor defined for class.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>231&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s231'>No assignment operator defined for class.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>232&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s232'>No destructor defined for class.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>260&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s260'>No default constructor declared for class.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_205'>205</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.2.1' name='rule_hic%2B%2B_3.2.1'><div class='rule'><div class='id'>3.2.1<br/><span>Rule (checking)</span></div></div></a><div class='headline'>Ensure all constructors supply an initial value (or invoke a constructor) for each virtual base class, each non virtual base class and all non-static data members.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>319&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s319'>Constructor has insufficient initialisers.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_237'>237</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.2.2' name='rule_hic%2B%2B_3.2.2'><div class='rule'><div class='id'>3.2.2<br/><span>Rule</span></div></div></a><div class='headline'>Write members in an initialisation list in the order in which they are declared.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>206&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s206'>Class initialiser out of order.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.2.3' name='rule_hic%2B%2B_3.2.3'><div class='rule'><div class='id'>3.2.3<br/><span>Rule</span></div></div></a><div class='headline'>Declare all single argument constructors as explicit thus preventing their use as implicit type convertors.</div></div><p>LDRA Associated HIC++ 3.1.10, 3.2.3</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>393&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s393'>Single parameter constructor not 'explicit'.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.2.4' name='rule_hic%2B%2B_3.2.4'><div class='rule'><div class='id'>3.2.4<br/><span>Guideline</span></div></div></a><div class='headline'>An abstract class shall have no public constructors.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>391&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s391'>Public constructor in abstract class.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.2.5' name='rule_hic%2B%2B_3.2.5'><div class='rule'><div class='id'>3.2.5<br/><span>Rule</span></div></div></a><div class='headline'>Ensure destructors release all resources owned by the object.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.3.1' name='rule_hic%2B%2B_3.3.1'><div class='rule'><div class='id'>3.3.1<br/><span>Rule</span></div></div></a><div class='headline'>Use public derivation only.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>418&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s418'>Class Derivation is not public.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.3.2' name='rule_hic%2B%2B_3.3.2'><div class='rule'><div class='id'>3.3.2<br/><span>Rule</span></div></div></a><div class='headline'>Write a 'virtual' destructor for base classes.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>303&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s303'>Virtual class members need virtual destructor.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_292'>292</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.3.3' name='rule_hic%2B%2B_3.3.3'><div class='rule'><div class='id'>3.3.3<br/><span>Rule</span></div></div></a><div class='headline'>Avoid downcasting base class object pointers to derived class.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>448&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s448'>Base class pointer cast to derived class.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.3.4' name='rule_hic%2B%2B_3.3.4'><div class='rule'><div class='id'>3.3.4<br/><span>Rule</span></div></div></a><div class='headline'>Avoid casting to a virtual base class as this is irreversible.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>449&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s449'>Derived class pointer cast to virtual base.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.3.5' name='rule_hic%2B%2B_3.3.5'><div class='rule'><div class='id'>3.3.5<br/><span>Rule</span></div></div></a><div class='headline'>Override all overloads of a base class virtual function.</div></div><p>NotAutomatically Checkable.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>601&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s601'>Insufficient overridden members.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.3.6' name='rule_hic%2B%2B_3.3.6'><div class='rule'><div class='id'>3.3.6<br/><span>Rule</span></div></div></a><div class='headline'>If a virtual function in a base class is not overridden in any derived class then make it non virtual.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.3.7' name='rule_hic%2B%2B_3.3.7'><div class='rule'><div class='id'>3.3.7<br/><span>Rule</span></div></div></a><div class='headline'>Only define virtual functions in a base class if the behaviour will always be valid default behaviour for derived classes.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.3.8' name='rule_hic%2B%2B_3.3.8'><div class='rule'><div class='id'>3.3.8<br/><span>Rule</span></div></div></a><div class='headline'>Declare a function pure virtual in the base class if each derived class has to provide specific behaviour.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.3.9' name='rule_hic%2B%2B_3.3.9'><div class='rule'><div class='id'>3.3.9<br/><span>Rule</span></div></div></a><div class='headline'>If a virtual function is overridden in each derived class with the same implementation then make it a non virtual function in the base class.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.3.10' name='rule_hic%2B%2B_3.3.10'><div class='rule'><div class='id'>3.3.10<br/><span>Rule</span></div></div></a><div class='headline'>Ensure that the return type of the virtual function being overridden is compatible.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.3.11' name='rule_hic%2B%2B_3.3.11'><div class='rule'><div class='id'>3.3.11<br/><span>Rule</span></div></div></a><div class='headline'>Do not overload or hide inherited non-virtual functions.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>262&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s262'>Non virtual function redefined.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_379'>379</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.3.12' name='rule_hic%2B%2B_3.3.12'><div class='rule'><div class='id'>3.3.12<br/><span>Rule</span></div></div></a><div class='headline'>When redeclaring and overriding functions use the same default parameter values as in other declarations.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>364&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s364'>Inherited default parameter redefined.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_385'>385</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.3.13' name='rule_hic%2B%2B_3.3.13'><div class='rule'><div class='id'>3.3.13<br/><span>Rule</span></div></div></a><div class='headline'>Do not invoke virtual methods of the declared class in a constructor or destructor.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>92&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d92'>C'tor/d'tor calls virtual function.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>467&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s467'>Virtual member called in ctor/dtor.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.3.14' name='rule_hic%2B%2B_3.3.14'><div class='rule'><div class='id'>3.3.14<br/><span>Rule</span></div></div></a><div class='headline'>Declare the copy assignment operator protected in an abstract class.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>522&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s522'>Public assign operator in abstract class.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.3.15' name='rule_hic%2B%2B_3.3.15'><div class='rule'><div class='id'>3.3.15<br/><span>Rule</span></div></div></a><div class='headline'>Ensure base classes common to more than one derived class are virtual.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>28&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s28'>Duplicated Base Classes in a Derived class.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.3.16' name='rule_hic%2B%2B_3.3.16'><div class='rule'><div class='id'>3.3.16<br/><span>Rule</span></div></div></a><div class='headline'>Explicitly declare polymorphic member functions virtual in a derived class.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>214&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s214'>Member not declared virtual.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.4.1' name='rule_hic%2B%2B_3.4.1'><div class='rule'><div class='id'>3.4.1<br/><span>Rule</span></div></div></a><div class='headline'>Make member data private.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>202&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s202'>Class data is not explicitly private.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.4.2' name='rule_hic%2B%2B_3.4.2'><div class='rule'><div class='id'>3.4.2<br/><span>Rule</span></div></div></a><div class='headline'>Do not return non-const handles to class data from const member functions.</div></div><p>LDRA Associated HIC++ 3.4.2, 3.4.3</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>392&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s392'>Class data accessible thru non const member.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.4.3' name='rule_hic%2B%2B_3.4.3'><div class='rule'><div class='id'>3.4.3<br/><span>Rule</span></div></div></a><div class='headline'>Do not write member functions which return non const pointers or references to data less accessible than the member function.</div></div><p>LDRA Associated HIC++ 3.4.2, 3.4.3</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>392&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s392'>Class data accessible thru non const member.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.4.4' name='rule_hic%2B%2B_3.4.4'><div class='rule'><div class='id'>3.4.4<br/><span>Rule (checking)</span></div></div></a><div class='headline'>Ensure friends have a legitimate basis in design, otherwise avoid.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>212&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s212'>Use of friend function in class.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>213&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s213'>Use of friend class.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.4.5' name='rule_hic%2B%2B_3.4.5'><div class='rule'><div class='id'>3.4.5<br/><span>Rule</span></div></div></a><div class='headline'>When publicly deriving from a base class, the base class should be abstract.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.4.6' name='rule_hic%2B%2B_3.4.6'><div class='rule'><div class='id'>3.4.6<br/><span>Rule (checking)</span></div></div></a><div class='headline'>Write derived classes to have at most one base class which is not a pure abstract class.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>283&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s283'>Multiple direct inheritance found.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_378'>378</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.4.7' name='rule_hic%2B%2B_3.4.7'><div class='rule'><div class='id'>3.4.7<br/><span>Guideline</span></div></div></a><div class='headline'>All members of a public base class must be valid for a derived class.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.5.1' name='rule_hic%2B%2B_3.5.1'><div class='rule'><div class='id'>3.5.1<br/><span>Rule</span></div></div></a><div class='headline'>Avoid overloading the comma operator (','), operator AND ('&amp;&amp;'), and operator OR ('||').</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>211&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s211'>Overloaded &amp;&amp;, || or comma.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.5.2' name='rule_hic%2B%2B_3.5.2'><div class='rule'><div class='id'>3.5.2<br/><span>Rule</span></div></div></a><div class='headline'>Always write operations, that are normally equivalent, to be equivalent when overloaded.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.5.3' name='rule_hic%2B%2B_3.5.3'><div class='rule'><div class='id'>3.5.3<br/><span>Rule</span></div></div></a><div class='headline'>Ensure that overloaded binary operators have expected behaviour</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.5.4' name='rule_hic%2B%2B_3.5.4'><div class='rule'><div class='id'>3.5.4<br/><span>Rule</span></div></div></a><div class='headline'>Make binary operators non-members to allow implicit conversions of the left hand operand.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>569&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s569'>Operator should be non class member.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_3.5.5' name='rule_hic%2B%2B_3.5.5'><div class='rule'><div class='id'>3.5.5<br/><span>Guideline</span></div></div></a><div class='headline'>When overloading the subscript operator ('operator[]') implement both const and non-const versions.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_4.1' name='rule_hic%2B%2B_4.1'><div class='rule'><div class='id'>4.1<br/><span>Rule</span></div></div></a><div class='headline'>Do not write functions with an excessive McCabe Cyclomatic Complexity.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>1&nbsp;C</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_c1'>Cyclomatic complexity greater than ***.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_4.2' name='rule_hic%2B%2B_4.2'><div class='rule'><div class='id'>4.2<br/><span>Rule</span></div></div></a><div class='headline'>Avoid functions with a high static program path count.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_4.3' name='rule_hic%2B%2B_4.3'><div class='rule'><div class='id'>4.3<br/><span>Rule</span></div></div></a><div class='headline'>Avoid functions with many arguments.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>18&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s18'>More than *** parameters in procedure.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_209'>209</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_5.1' name='rule_hic%2B%2B_5.1'><div class='rule'><div class='id'>5.1<br/><span>Rule</span></div></div></a><div class='headline'>Follow each flow control primitive ('if', 'else', 'while', 'for', 'do' and 'switch') by a block enclosed by braces, even if the block is empty or contains only one line.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>11&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s11'>No brackets to loop body (added by Testbed).</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>12&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s12'>No brackets to then/else (added by Testbed).</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : tbend = &lt;Default&gt;</td>    </tr>
    <tr>    <td class='from'>428&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s428'>No {} for switch (added by Testbed).</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_5.2' name='rule_hic%2B%2B_5.2'><div class='rule'><div class='id'>5.2<br/><span>Rule</span></div></div></a><div class='headline'>For boolean expressions ('if', 'for', 'while', 'do' and the first operand of the ternary operator '?:') involving non-boolean values, always use an explicit test of equality or non-equality.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>114&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s114'>Expression is not Boolean.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_386'>386</a> = 1 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_5.3' name='rule_hic%2B%2B_5.3'><div class='rule'><div class='id'>5.3<br/><span>Rule (checking)</span></div></div></a><div class='headline'>Avoid conditional expressions that always have the same result.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>26&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s26'>Loop control expression may not terminate loop.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_425'>425</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>139&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s139'>Construct leads to infeasible code.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>140&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s140'>Infeasible loop condition found.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_5.4' name='rule_hic%2B%2B_5.4'><div class='rule'><div class='id'>5.4<br/><span>Rule</span></div></div></a><div class='headline'>Follow each non-empty case statement block in a switch statement with a break statement.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>62&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s62'>Switch case not terminated with break.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_283'>283</a> = 0 (Default), <a href='standard_flags.htm#flag_384'>384</a> = c++ : 0, java : 1 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_5.5' name='rule_hic%2B%2B_5.5'><div class='rule'><div class='id'>5.5<br/><span>Rule</span></div></div></a><div class='headline'>Do not alter a control variable in the body of a for statement.</div></div><p>LDRA Associated HIC++ 5.5, 5.6</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>55&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d55'>Modification of loop counter in loop body.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_5.6' name='rule_hic%2B%2B_5.6'><div class='rule'><div class='id'>5.6<br/><span>Rule</span></div></div></a><div class='headline'>Do not alter a control variable more than once in a for, do or while statement.</div></div><p>LDRA Associated HIC++ 5.5, 5.6</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>55&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d55'>Modification of loop counter in loop body.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_5.7' name='rule_hic%2B%2B_5.7'><div class='rule'><div class='id'>5.7<br/><span>Guideline</span></div></div></a><div class='headline'>The control variable in a for loop should be tested against a constant value, not a function or expression.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>447&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s447'>Loop termination not a simple constant test.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_5.8' name='rule_hic%2B%2B_5.8'><div class='rule'><div class='id'>5.8<br/><span>Rule</span></div></div></a><div class='headline'>Do not use 'goto'.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>13&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s13'>goto detected.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_5.9' name='rule_hic%2B%2B_5.9'><div class='rule'><div class='id'>5.9<br/><span>Rule (checking)</span></div></div></a><div class='headline'>Ensure that every compound statement except the body of a switch statement has a single entry point and (barring the propagation of C++ exceptions) a single exit point.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>7&nbsp;C</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_c7'>Procedure has more than one exit point.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>39&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d39'>More than one entry to a loop.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>40&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d40'>More than one exit from a loop.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>122&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s122'>Use of abort, exit, etc.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_5.10' name='rule_hic%2B%2B_5.10'><div class='rule'><div class='id'>5.10<br/><span>Rule</span></div></div></a><div class='headline'>For functions with non-void return type, ensure all paths have a return statement that contains an expression of the return type.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>2&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d2'>Function does not return a value on all paths.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>36&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s36'>Function has no return statement.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>66&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s66'>Function with empty return expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>101&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s101'>Function return type inconsistent.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_374'>374</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_5.11' name='rule_hic%2B%2B_5.11'><div class='rule'><div class='id'>5.11<br/><span>Rule</span></div></div></a><div class='headline'>Include explicit cases for all alternatives in multi-way conditional structures.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>59&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s59'>Else alternative missing in if.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : tbend = &lt;Default&gt;</td>    </tr>
    <tr>    <td class='from'>278&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s278'>Switch has missing or extra cases.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_233'>233</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_5.12' name='rule_hic%2B%2B_5.12'><div class='rule'><div class='id'>5.12<br/><span>Rule</span></div></div></a><div class='headline'>Declare for loop control variables within the for statement instead of using an existing variable.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>40&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s40'>Loop index is not declared locally.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>505&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s505'>Control variable not declared in for loop.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_6.1' name='rule_hic%2B%2B_6.1'><div class='rule'><div class='id'>6.1<br/><span>Rule</span></div></div></a><div class='headline'>Use suffixes L, U, and UL for all constants of type 'long', 'unsigned int' and 'unsigned long'.</div></div><p>LDRA Associated HIC++ 6.1, 6.2</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>252&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s252'>Lower case suffix to literal number.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_418'>418</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>331&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s331'>Literal value requires a U suffix.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_309'>309</a> = 0 (Default), <a href='standard_flags.htm#flag_358'>358</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_6.2' name='rule_hic%2B%2B_6.2'><div class='rule'><div class='id'>6.2<br/><span>Rule</span></div></div></a><div class='headline'>Use suffixes F and L for all constants of type 'float' and 'long double'.</div></div><p>LDRA Associated HIC++ 6.1, 6.2</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>252&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s252'>Lower case suffix to literal number.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_418'>418</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>425&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s425'>float literal with no F suffix.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_6.3' name='rule_hic%2B%2B_6.3'><div class='rule'><div class='id'>6.3<br/><span>Rule</span></div></div></a><div class='headline'>Write the value of a character constant to be in the range of its type.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>488&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s488'>Value outside range of underlying type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_6.4' name='rule_hic%2B%2B_6.4'><div class='rule'><div class='id'>6.4<br/><span>Rule</span></div></div></a><div class='headline'>Only use escape sequences defined by the ISO C++ Standard.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>176&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s176'>Non standard escape sequence    in source.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_6.5' name='rule_hic%2B%2B_6.5'><div class='rule'><div class='id'>6.5<br/><span>Rule</span></div></div></a><div class='headline'>Do not write character string literal tokens adjacent to wide string literal tokens.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>450&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s450'>Wide string and string concatenated.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_6.6' name='rule_hic%2B%2B_6.6'><div class='rule'><div class='id'>6.6<br/><span>Guideline</span></div></div></a><div class='headline'>Global and static data should be const.</div></div><p>LDRA Associated HIC++ 6.6, 8.2.2</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>10&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d10'>Globals used inside procedure.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>95&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d95'>Named global function pointer used in procedure.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>100&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d100'>Named static member object used in procedure.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_7.1' name='rule_hic%2B%2B_7.1'><div class='rule'><div class='id'>7.1<br/><span>Rule</span></div></div></a><div class='headline'>Always use casting forms: 'static_cast', 'const_cast', 'dynamic_cast' and 'reinterpret_cast' or explicit constructor call. Do not use any other form.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>306&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s306'>Use of C type cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_7.2' name='rule_hic%2B%2B_7.2'><div class='rule'><div class='id'>7.2<br/><span>Guideline</span></div></div></a><div class='headline'>Minimise the use of casts.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_7.3' name='rule_hic%2B%2B_7.3'><div class='rule'><div class='id'>7.3<br/><span>Rule</span></div></div></a><div class='headline'>Avoid casting away volatile qualification.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>344&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s344'>Cast on volatile value.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_395'>395</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_7.4' name='rule_hic%2B%2B_7.4'><div class='rule'><div class='id'>7.4<br/><span>Rule</span></div></div></a><div class='headline'>Avoid casting away const qualification.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>203&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s203'>Cast on a constant value.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_390'>390</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>242&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s242'>Use of const_cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_7.5' name='rule_hic%2B%2B_7.5'><div class='rule'><div class='id'>7.5<br/><span>Rule</span></div></div></a><div class='headline'>Avoid using pointer or reference casts.</div></div><p>LDRA Associated HIC++ 7.5, 7.7, 13.7</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>94&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s94'>Casting operation on a pointer.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_396'>396</a> = 0 (Default), <a href='standard_flags.htm#flag_397'>397</a> = 0 (Default), <a href='standard_flags.htm#flag_439'>439</a> = 0 (Default), <a href='standard_flags.htm#flag_440'>440</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>95&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s95'>Casting operation to a pointer.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_381'>381</a> = 0 (Default), <a href='standard_flags.htm#flag_396'>396</a> = 0 (Default), <a href='standard_flags.htm#flag_397'>397</a> = 0 (Default), <a href='standard_flags.htm#flag_440'>440</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>439&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s439'>Cast from pointer to integral type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_397'>397</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>440&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s440'>Cast from integral type to pointer.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_397'>397</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_7.6' name='rule_hic%2B%2B_7.6'><div class='rule'><div class='id'>7.6<br/><span>Rule</span></div></div></a><div class='headline'>Do not convert floating values to integral types except through use of standard library routines.</div></div><p>LDRA Associated HIC++ 7.6, 10.13, 10.14</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>96&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s96'>Use of mixed mode arithmetic.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : 267 = 1</td>    </tr>
    <tr>    <td class='from'>107&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s107'>Type mismatch in ternary expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>435&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s435'>Float/integer conversion without cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_7.7' name='rule_hic%2B%2B_7.7'><div class='rule'><div class='id'>7.7<br/><span>Rule</span></div></div></a><div class='headline'>Do not cast pointers to and from fundamental types.</div></div><p>LDRA Associated HIC++ 7.5, 7.7, 13.7</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>94&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s94'>Casting operation on a pointer.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_396'>396</a> = 0 (Default), <a href='standard_flags.htm#flag_397'>397</a> = 0 (Default), <a href='standard_flags.htm#flag_439'>439</a> = 0 (Default), <a href='standard_flags.htm#flag_440'>440</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>439&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s439'>Cast from pointer to integral type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_397'>397</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>635&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s635'>Cast from pointer to float type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>636&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s636'>Cast from float type to pointer.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_7.8' name='rule_hic%2B%2B_7.8'><div class='rule'><div class='id'>7.8<br/><span>Rule (checking)</span></div></div></a><div class='headline'>Do not write code that relies on implicit conversions of arguments in function calls.</div></div><p>LDRA Associated HIC++ 7.8, 10.7</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>458&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s458'>Implicit conversion: actual to formal param.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_8.1.1' name='rule_hic%2B%2B_8.1.1'><div class='rule'><div class='id'>8.1.1<br/><span>Guideline</span></div></div></a><div class='headline'>With the exception of object definitions and unnamed namespace declarations and definitions, declare in header files: all non-inline functions, classes, variables, enumerations and enumerators, which are named at namespace scope and which have external linkage.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>352&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s352'>Declaration of type not in header file.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>354&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s354'>Extern declaration is not in header file.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_8.1.2' name='rule_hic%2B%2B_8.1.2'><div class='rule'><div class='id'>8.1.2<br/><span>Guideline</span></div></div></a><div class='headline'>With the exception of unnamed namespace declarations and definitions, define in header files all inline functions which are at namespace scope and which have external linkage.</div></div><p>LDRA Associated HIC++ 8.1.2, 8.1.3</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>460&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s460'>Inline or template function not in header.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_8.1.3' name='rule_hic%2B%2B_8.1.3'><div class='rule'><div class='id'>8.1.3<br/><span>Guideline</span></div></div></a><div class='headline'>With the exception of unnamed namespace declarations and definitions, define in header files all template definitions which are at namespace scope and which have external linkage.</div></div><p>LDRA Associated HIC++ 8.1.2, 8.1.3</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>460&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s460'>Inline or template function not in header.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_8.2.1' name='rule_hic%2B%2B_8.2.1'><div class='rule'><div class='id'>8.2.1<br/><span>Rule</span></div></div></a><div class='headline'>Do not hide declarations in other scopes.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>131&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s131'>Name reused in inner scope.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>358&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s358'>Class member name reused.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_246'>246</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_8.2.2' name='rule_hic%2B%2B_8.2.2'><div class='rule'><div class='id'>8.2.2<br/><span>Rule</span></div></div></a><div class='headline'>Avoid global variables.</div></div><p>LDRA Associated HIC++ 6.6, 8.2.2</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>10&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d10'>Globals used inside procedure.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>95&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d95'>Named global function pointer used in procedure.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>100&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d100'>Named static member object used in procedure.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_8.2.3' name='rule_hic%2B%2B_8.2.3'><div class='rule'><div class='id'>8.2.3<br/><span>Guideline</span></div></div></a><div class='headline'>Always use using declarations or write explicit namespace qualifiers. Do not use using directives.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>513&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s513'>Use of using directive.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_8.2.4' name='rule_hic%2B%2B_8.2.4'><div class='rule'><div class='id'>8.2.4<br/><span>Guideline</span></div></div></a><div class='headline'>Only have using namespace directives in the main source file, after all include directives.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>514&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s514'>Using directive or declaration in header.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_8.3.1' name='rule_hic%2B%2B_8.3.1'><div class='rule'><div class='id'>8.3.1<br/><span>Rule</span></div></div></a><div class='headline'>Avoid using the keyword 'static' when declaring objects in namespaces.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>570&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s570'>Static object declared in namespace.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_8.3.2' name='rule_hic%2B%2B_8.3.2'><div class='rule'><div class='id'>8.3.2<br/><span>Guideline</span></div></div></a><div class='headline'>Restrict the use of the 'extern' keyword. Do not write 'extern' where it is implicit.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>461&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s461'>Identifier with ambiguous linkage.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_8.3.3' name='rule_hic%2B%2B_8.3.3'><div class='rule'><div class='id'>8.3.3<br/><span>Rule</span></div></div></a><div class='headline'>Do not use the 'auto' or 'register' keywords.</div></div><p>LDRA Associated HIC++ 8.3.3, 12.2, 17.9, 17.13</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>44&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s44'>Use of banned function or variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>84&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s84'>Register variable declared.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>464&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s464'>Use of auto specifier.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_8.3.4' name='rule_hic%2B%2B_8.3.4'><div class='rule'><div class='id'>8.3.4<br/><span>Rule</span></div></div></a><div class='headline'>Ensure each identifier is distinct.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>217&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s217'>Names only differ by case.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_8.3.5' name='rule_hic%2B%2B_8.3.5'><div class='rule'><div class='id'>8.3.5<br/><span>Rule</span></div></div></a><div class='headline'>Avoid ambiguous grammar between function style casts and declarations.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_8.4.1' name='rule_hic%2B%2B_8.4.1'><div class='rule'><div class='id'>8.4.1<br/><span>Rule</span></div></div></a><div class='headline'>Do not write the characters 'l' (ell) and '1' (one) or 'O' (oh) and '0' (zero) in the same identifier.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>571&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s571'>Identifier with 'l' and 1, 'O' and zero.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_8.4.2' name='rule_hic%2B%2B_8.4.2'><div class='rule'><div class='id'>8.4.2<br/><span>Rule</span></div></div></a><div class='headline'>Declare each variable on a separate line in a separate declaration statement. If the declaration is not self-explanatory, append a comment describing the variable.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>177&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s177'>Identifier not declared on new line.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_220'>220</a> = 1</td>    </tr>
    <tr>    <td class='from'>178&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s178'>Declaration statement not on new line.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_8.4.3' name='rule_hic%2B%2B_8.4.3'><div class='rule'><div class='id'>8.4.3<br/><span>Rule</span></div></div></a><div class='headline'>Initialise all objects at definition. Never use an object before it has been given a value.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>57&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d57'>Global not initialised at declaration.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>64&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d64'>Local not initialised at declaration.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>69&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d69'>UR anomaly, variable used before assignment.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_8.4.4' name='rule_hic%2B%2B_8.4.4'><div class='rule'><div class='id'>8.4.4<br/><span>Rule</span></div></div></a><div class='headline'>Postpone variable definitions as long as possible.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>25&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d25'>Scope of variable could be reduced.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_8.4.5' name='rule_hic%2B%2B_8.4.5'><div class='rule'><div class='id'>8.4.5<br/><span>Rule</span></div></div></a><div class='headline'>Do not use the plain 'char' type when declaring objects that are subject to numeric operations. In this case always use an explicit 'signed char' or 'unsigned char' declaration.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>329&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s329'>Operation not appropriate to plain char.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_391'>391</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_8.4.6' name='rule_hic%2B%2B_8.4.6'><div class='rule'><div class='id'>8.4.6<br/><span>Guideline</span></div></div></a><div class='headline'>Use class types or typedefs to indicate scalar quantities.</div></div><p>LDRA Associated HIC++ 8.4.6, 13.6</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>90&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s90'>Basic type declaration used.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_219'>219</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_8.4.7' name='rule_hic%2B%2B_8.4.7'><div class='rule'><div class='id'>8.4.7<br/><span>Rule</span></div></div></a><div class='headline'>Declare one type name only in each typedef declaration.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>422&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s422'>More than one synonym in typedef.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_8.4.8' name='rule_hic%2B%2B_8.4.8'><div class='rule'><div class='id'>8.4.8<br/><span>Rule</span></div></div></a><div class='headline'>Do not typedef array types.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>390&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s390'>Typedef array declaration.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_8.4.9' name='rule_hic%2B%2B_8.4.9'><div class='rule'><div class='id'>8.4.9<br/><span>Rule</span></div></div></a><div class='headline'>Do not use unbounded (C-style) aggregate types.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>310&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s310'>Array parameter found.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_285'>285</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_8.4.10' name='rule_hic%2B%2B_8.4.10'><div class='rule'><div class='id'>8.4.10<br/><span>Guideline</span></div></div></a><div class='headline'>Avoid pointers to members.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_8.4.11' name='rule_hic%2B%2B_8.4.11'><div class='rule'><div class='id'>8.4.11<br/><span>Rule</span></div></div></a><div class='headline'>Use 'const' whenever possible.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>168&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s168'>Call by value parameter not const.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_8.4.12' name='rule_hic%2B%2B_8.4.12'><div class='rule'><div class='id'>8.4.12<br/><span>Guideline</span></div></div></a><div class='headline'>Directly append the '*' and '&amp;' to type names in declarations and definitions.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>309&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s309'>* or &amp; not attached to type in declaration.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_8.4.13' name='rule_hic%2B%2B_8.4.13'><div class='rule'><div class='id'>8.4.13<br/><span>Guideline</span></div></div></a><div class='headline'>Prefer to use signed numeric values, not unsigned.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>304&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s304'>Arithmetic performed on unsigned values.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_9.1' name='rule_hic%2B%2B_9.1'><div class='rule'><div class='id'>9.1<br/><span>Rule</span></div></div></a><div class='headline'>Do not throw exceptions from within destructors.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>453&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s453'>Throw found in destructor.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_9.2' name='rule_hic%2B%2B_9.2'><div class='rule'><div class='id'>9.2<br/><span>Rule</span></div></div></a><div class='headline'>Only throw objects of class type.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>454&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s454'>Throw type is not a class type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_9.3' name='rule_hic%2B%2B_9.3'><div class='rule'><div class='id'>9.3<br/><span>Rule</span></div></div></a><div class='headline'>Catch exceptions by reference.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>455&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s455'>Catch is not by reference.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_9.4' name='rule_hic%2B%2B_9.4'><div class='rule'><div class='id'>9.4<br/><span>Guideline</span></div></div></a><div class='headline'>Only use the C++ exception handling mechanism to handle error conditions.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_9.5' name='rule_hic%2B%2B_9.5'><div class='rule'><div class='id'>9.5<br/><span>Guideline</span></div></div></a><div class='headline'>Each application must have some scheme for ensuring that all orphaned resources are properly released when an exception is thrown.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_9.6' name='rule_hic%2B%2B_9.6'><div class='rule'><div class='id'>9.6<br/><span>Guideline</span></div></div></a><div class='headline'>Each application that acquires resources that are not automatically freed at programtermination must use some mechanism to ensure that acquired resources are freed if the program unexpectedly terminates.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_10.1' name='rule_hic%2B%2B_10.1'><div class='rule'><div class='id'>10.1<br/><span>Rule</span></div></div></a><div class='headline'>Use symbolic names instead of literal values in code. Do not use &quot;magic&quot; numbers.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>58&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d58'>Character or string literal re-used.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>201&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s201'>Use of numeric literal in expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_217'>217</a> = 1, <a href='standard_flags.htm#flag_163'>163</a> = 1 (Default), <a href='standard_flags.htm#flag_237'>237</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_10.2' name='rule_hic%2B%2B_10.2'><div class='rule'><div class='id'>10.2<br/><span>Rule</span></div></div></a><div class='headline'>Access to an array should be demonstrably within the bounds of the array.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>47&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s47'>Array bound exceeded.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_10.3' name='rule_hic%2B%2B_10.3'><div class='rule'><div class='id'>10.3<br/><span>Rule (checking)</span></div></div></a><div class='headline'>Do not assume the order of evaluation of operands in an expression.</div></div><p>LDRA Associated HIC++ 10.3, 10.5, 10.9</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>35&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d35'>Expression has side effects.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>1&nbsp;Q</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_q1'>Call has execution order dependant side effects.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>9&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s9'>Assignment operation in expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_259'>259</a> = 0 (Default), <a href='standard_flags.htm#flag_266'>266</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>30&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s30'>Deprecated usage of ++ or -- operators found.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_122'>122</a> = 1 (Default)</td>    </tr>
    <tr>    <td class='from'>134&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s134'>Volatile variable in complex expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_10.4' name='rule_hic%2B%2B_10.4'><div class='rule'><div class='id'>10.4<br/><span>Rule</span></div></div></a><div class='headline'>Use parentheses in expressions to specify the intent of the expression.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>49&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s49'>Logical conjunctions need brackets.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_206'>206</a> = 1</td>    </tr>
    <tr>    <td class='from'>361&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s361'>Expression needs brackets.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_119'>119</a> = 0 (Default), <a href='standard_flags.htm#flag_264'>264</a> = 1, <a href='standard_flags.htm#flag_414'>414</a> = 0 (Default), <a href='standard_flags.htm#flag_420'>420</a> = 0 (Default), <a href='standard_flags.htm#flag_421'>421</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_10.5' name='rule_hic%2B%2B_10.5'><div class='rule'><div class='id'>10.5<br/><span>Rule</span></div></div></a><div class='headline'>Always discard the result of an assignment operator.</div></div><p>LDRA Associated HIC++ 10.3, 10.5</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>9&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s9'>Assignment operation in expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_259'>259</a> = 0 (Default), <a href='standard_flags.htm#flag_266'>266</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>132&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s132'>Assignment operator in boolean expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : 247 = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_10.6' name='rule_hic%2B%2B_10.6'><div class='rule'><div class='id'>10.6<br/><span>Guideline</span></div></div></a><div class='headline'>When comparing variables and constants for equality always place the constant on the left hand side.</div></div><p>NotAutomatically Checkable.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>9&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s9'>Assignment operation in expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_259'>259</a> = 0 (Default), <a href='standard_flags.htm#flag_266'>266</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>132&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s132'>Assignment operator in boolean expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : 247 = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>133&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s133'>Assignment operator in RHS of &amp;&amp; or ||.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_10.7' name='rule_hic%2B%2B_10.7'><div class='rule'><div class='id'>10.7<br/><span>Guideline</span></div></div></a><div class='headline'>Do not use expressions which rely on implicit conversion of an operand.</div></div><p>LDRA Associated HIC++ 7.8, 10.7, 10.14</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>433&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s433'>Type conversion without cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 0 (Default), <a href='standard_flags.htm#flag_441'>441</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>445&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s445'>Narrower float conversion without cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>446&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s446'>Narrower int conversion without cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>456&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s456'>Implicit float widening for function return.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>457&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s457'>Implicit int widening for function return.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>458&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s458'>Implicit conversion: actual to formal param.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_10.8' name='rule_hic%2B%2B_10.8'><div class='rule'><div class='id'>10.8<br/><span>Rule</span></div></div></a><div class='headline'>Ensure expressions used in assertions are free from side-effects.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>572&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s572'>Side effect in assert.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_10.9' name='rule_hic%2B%2B_10.9'><div class='rule'><div class='id'>10.9<br/><span>Rule</span></div></div></a><div class='headline'>Do not code side effects into the right-hand operands of '&amp;&amp;', '||', 'sizeof' or 'typeid'.</div></div><p>LDRA Associated HIC++ 10.3, 10.9</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>1&nbsp;Q</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_q1'>Call has execution order dependant side effects.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>54&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s54'>Sizeof operator with side effects.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>133&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s133'>Assignment operator in RHS of &amp;&amp; or ||.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>406&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s406'>Use of ++ or -- on RHS of &amp;&amp; or || operator.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>408&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s408'>Volatile variable accessed on RHS of &amp;&amp; or ||.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_10.10' name='rule_hic%2B%2B_10.10'><div class='rule'><div class='id'>10.10<br/><span>Rule (checking)</span></div></div></a><div class='headline'>Avoid statements that have no side effects.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>57&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s57'>Statement with no side effect.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_10.11' name='rule_hic%2B%2B_10.11'><div class='rule'><div class='id'>10.11<br/><span>Rule</span></div></div></a><div class='headline'>Do not apply the following bitwise operators to signed operands: shift operators ('&lt;&lt;', '&gt;&gt;'),bitwise AND ('&amp;'), exclusive OR ('^') and inclusive OR ('|').</div></div><p>LDRA Associated HIC++ 10.11, 10.12, 13.6</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>50&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s50'>Use of shift operator on signed type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>120&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s120'>Use of bit operator on signed type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>136&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s136'>Bit operator with boolean operand.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>345&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s345'>Bit operator with floating point operand.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_10.12' name='rule_hic%2B%2B_10.12'><div class='rule'><div class='id'>10.12<br/><span>Rule</span></div></div></a><div class='headline'>Validate arguments to be used in shift operators.</div></div><p>LDRA Associated HIC++ 10.11, 10.12</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>50&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s50'>Use of shift operator on signed type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>51&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s51'>Shifting value too far.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>403&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s403'>Negative (or potentially negative) shift.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_10.13' name='rule_hic%2B%2B_10.13'><div class='rule'><div class='id'>10.13<br/><span>Rule</span></div></div></a><div class='headline'>Do not mix signed and unsigned data items in the same expression.</div></div><p>LDRA Associated HIC++ 7.6, 10.13, 10.14</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>107&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s107'>Type mismatch in ternary expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>96&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s96'>Use of mixed mode arithmetic.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : 267 = 1</td>    </tr>
    <tr>    <td class='from'>434&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s434'>Signed/unsigned conversion without cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_358'>358</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_10.14' name='rule_hic%2B%2B_10.14'><div class='rule'><div class='id'>10.14<br/><span>Rule</span></div></div></a><div class='headline'>Do not mix arithmetic precision in expressions.</div></div><p>LDRA Associated HIC++ 7.6, 10.7, 10.13, 10.14</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>96&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s96'>Use of mixed mode arithmetic.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : 267 = 1</td>    </tr>
    <tr>    <td class='from'>107&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s107'>Type mismatch in ternary expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>434&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s434'>Signed/unsigned conversion without cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_358'>358</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>445&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s445'>Narrower float conversion without cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>446&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s446'>Narrower int conversion without cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>456&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s456'>Implicit float widening for function return.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>457&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s457'>Implicit int widening for function return.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_10.15' name='rule_hic%2B%2B_10.15'><div class='rule'><div class='id'>10.15<br/><span>Rule</span></div></div></a><div class='headline'>Do not write code that expects floating point calculations to yield exact results.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>56&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s56'>Equality comparison of floating point.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_223'>223</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_10.16' name='rule_hic%2B%2B_10.16'><div class='rule'><div class='id'>10.16<br/><span>Rule</span></div></div></a><div class='headline'>Do not use the increment operator ('++') on a variable of type 'bool'.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>389&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s389'>Bool value incremented/decremented.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_10.17' name='rule_hic%2B%2B_10.17'><div class='rule'><div class='id'>10.17<br/><span>Rule</span></div></div></a><div class='headline'>Guard both division and remainder operations by a test on the right hand operand being non-zero.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>43&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d43'>Divide by 0 found.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_10.18' name='rule_hic%2B%2B_10.18'><div class='rule'><div class='id'>10.18<br/><span>Guideline</span></div></div></a><div class='headline'>Guard the modulus operation to ensure that both arguments are non-negative.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>584&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s584'>Remainder of % op could be negative.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_10.19' name='rule_hic%2B%2B_10.19'><div class='rule'><div class='id'>10.19<br/><span>Rule</span></div></div></a><div class='headline'>Do not use the comma operator.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>53&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s53'>Use of comma operator.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_263'>263</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_10.20' name='rule_hic%2B%2B_10.20'><div class='rule'><div class='id'>10.20<br/><span>Rule</span></div></div></a><div class='headline'>Do not use the ternary operator (?:) in expressions.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>33&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s33'>Use of ternary operator found.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_10.21' name='rule_hic%2B%2B_10.21'><div class='rule'><div class='id'>10.21<br/><span>Rule</span></div></div></a><div class='headline'>Apply unary minus to operands of signed type only.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>52&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s52'>Unsigned expression negated.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_11.1' name='rule_hic%2B%2B_11.1'><div class='rule'><div class='id'>11.1<br/><span>Rule</span></div></div></a><div class='headline'>All functions that have the same name should have similar behaviour, varying only in the number and/or types of parameters.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_11.2' name='rule_hic%2B%2B_11.2'><div class='rule'><div class='id'>11.2<br/><span>Rule</span></div></div></a><div class='headline'>Enclose all non-member functions that are not part of the external interface in the unnamed namespace in the source file.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>311&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s311'>Non local declaration not in a namespace.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_11.3' name='rule_hic%2B%2B_11.3'><div class='rule'><div class='id'>11.3<br/><span>Rule</span></div></div></a><div class='headline'>Specify the name of each function parameter in both the function declaration and the function definition. Use the same names in the function declaration and definition.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>36&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d36'>Prototype and definition name mismatch.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>103&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s103'>Function and prototype param inconsistent (MR).</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_331'>331</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_11.4' name='rule_hic%2B%2B_11.4'><div class='rule'><div class='id'>11.4<br/><span>Rule</span></div></div></a><div class='headline'>Use pass-by-reference in preference to pass by value or pass by pointer.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>215&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s215'>Struct or class called by value.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_328'>328</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_11.5' name='rule_hic%2B%2B_11.5'><div class='rule'><div class='id'>11.5<br/><span>Rule</span></div></div></a><div class='headline'>Declare read-only parameters of class type as const references. Pass by value read-only parameters that are of a fundamental type.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>62&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d62'>Pointer parameter should be declared const.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_11.6' name='rule_hic%2B%2B_11.6'><div class='rule'><div class='id'>11.6<br/><span>Rule</span></div></div></a><div class='headline'>Do not use ellipsis '...' in function parameters.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>41&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s41'>Ellipsis used in procedure parameter list.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_11.7' name='rule_hic%2B%2B_11.7'><div class='rule'><div class='id'>11.7<br/><span>Rule</span></div></div></a><div class='headline'>A function should not return a reference or a pointer to an automatic variable defined within the function. Instead, it should return a copy of the object.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>42&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d42'>Local pointer returned in function result.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>71&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s71'>Pointer assignment to wider scope.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_222'>222</a> = 1</td>    </tr>
    <tr>    <td class='from'>564&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s564'>Reference assignment to wider scope.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_11.8' name='rule_hic%2B%2B_11.8'><div class='rule'><div class='id'>11.8<br/><span>Rule</span></div></div></a><div class='headline'>Only declare trivial functions 'inline'.</div></div><p>LDRA Associated HIC++ 3.1.6, 11.8</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>297&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s297'>Inline member has more than *** source lines.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>353&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s353'>Inline member has more than *** statements.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_290'>290</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_11.9' name='rule_hic%2B%2B_11.9'><div class='rule'><div class='id'>11.9<br/><span>Rule</span></div></div></a><div class='headline'>Do not overload on both numeric and pointer types.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>396&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s396'>Possible ambiguous numeric/pointer overloads.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_12.1' name='rule_hic%2B%2B_12.1'><div class='rule'><div class='id'>12.1<br/><span>Rule</span></div></div></a><div class='headline'>Do not use default arguments with overloaded functions.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>359&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s359'>Default parameter use.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_401'>401</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_12.2' name='rule_hic%2B%2B_12.2'><div class='rule'><div class='id'>12.2<br/><span>Rule</span></div></div></a><div class='headline'>Allocate memory using 'new' and release using 'delete'. Do not use the C memory management functions malloc(), realloc(), and free().</div></div><p>LDRA Associated HIC++ 8.3.3, 12.2, 17.9, 17.13</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>44&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s44'>Use of banned function or variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_12.3' name='rule_hic%2B%2B_12.3'><div class='rule'><div class='id'>12.3<br/><span>Rule</span></div></div></a><div class='headline'>Ensure the form used when invoking 'delete' is the same form that was used when memory was allocated using 'new'.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>424&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s424'>Operator new[] and no operator delete[].</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_12.4' name='rule_hic%2B%2B_12.4'><div class='rule'><div class='id'>12.4<br/><span>Rule</span></div></div></a><div class='headline'>Do not specify the number of elements when deleting an array of objects.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>502&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s502'>Delete contains number of elements.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_12.5' name='rule_hic%2B%2B_12.5'><div class='rule'><div class='id'>12.5<br/><span>Rule</span></div></div></a><div class='headline'>Do not return a dereferenced pointer initialised by dynamic allocation within a function.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>503&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s503'>Function returns local resources.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_12.6' name='rule_hic%2B%2B_12.6'><div class='rule'><div class='id'>12.6<br/><span>Rule</span></div></div></a><div class='headline'>Write operator delete if you write operator new.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>423&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s423'>Operator new and no operator delete.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_12.7' name='rule_hic%2B%2B_12.7'><div class='rule'><div class='id'>12.7<br/><span>Rule</span></div></div></a><div class='headline'>Document that operator new and operator delete are static by declaring them static.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>421&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s421'>New or delete not explicitly static.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_12.8' name='rule_hic%2B%2B_12.8'><div class='rule'><div class='id'>12.8<br/><span>Rule</span></div></div></a><div class='headline'>On use of delete always set the pointer to zero after the delete.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_13.1' name='rule_hic%2B%2B_13.1'><div class='rule'><div class='id'>13.1<br/><span>Guideline</span></div></div></a><div class='headline'>Avoid implementation defined behaviour.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_13.2' name='rule_hic%2B%2B_13.2'><div class='rule'><div class='id'>13.2<br/><span>Guideline</span></div></div></a><div class='headline'>Use standard language features and standard library functions in preference to extra functionality provided by the operating system or environment.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_13.3' name='rule_hic%2B%2B_13.3'><div class='rule'><div class='id'>13.3<br/><span>Rule</span></div></div></a><div class='headline'>Do not exceed the translation limits imposed by the ISO C++ Standard.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_13.4' name='rule_hic%2B%2B_13.4'><div class='rule'><div class='id'>13.4<br/><span>Rule (checking)</span></div></div></a><div class='headline'>Do not use compiler specific language or pre-processor extensions.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>69&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s69'>#pragma used.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>293&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s293'>Non ANSI/ISO construct used.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_13.5' name='rule_hic%2B%2B_13.5'><div class='rule'><div class='id'>13.5<br/><span>Rule</span></div></div></a><div class='headline'>Do not use the 'asm' declaration.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>17&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s17'>Code insert found.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>88&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s88'>Procedure is not pure assembler.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_13.6' name='rule_hic%2B%2B_13.6'><div class='rule'><div class='id'>13.6<br/><span>Rule</span></div></div></a><div class='headline'>Do not make any assumptions about the internal representation of a value or object.</div></div><p>LDRA Associated HIC++ 8.4.6, 10.11, 13.6, 15.3</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>50&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s50'>Use of shift operator on signed type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>90&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s90'>Basic type declaration used.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_219'>219</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>123&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s123'>Use of underlying enum representation value.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>345&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s345'>Bit operator with floating point operand.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_13.7' name='rule_hic%2B%2B_13.7'><div class='rule'><div class='id'>13.7<br/><span>Rule</span></div></div></a><div class='headline'>Do not cast a pointer to fundamental type, to a pointer to a more restrictively aligned fundamental type.</div></div><p>LDRA Associated HIC++ 7.5, 7.7, 13.7</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>94&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s94'>Casting operation on a pointer.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_396'>396</a> = 0 (Default), <a href='standard_flags.htm#flag_397'>397</a> = 0 (Default), <a href='standard_flags.htm#flag_439'>439</a> = 0 (Default), <a href='standard_flags.htm#flag_440'>440</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>439&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s439'>Cast from pointer to integral type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_397'>397</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>554&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s554'>Cast to an unrelated type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_14.1' name='rule_hic%2B%2B_14.1'><div class='rule'><div class='id'>14.1<br/><span>Rule (checking)</span></div></div></a><div class='headline'>Use the C++ comment delimiters &quot;//&quot;. Do not use the C comment delimiters &quot;/* ... */&quot;.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>207&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s207'>Use of old style /* comments in C++.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_14.2' name='rule_hic%2B%2B_14.2'><div class='rule'><div class='id'>14.2<br/><span>Guideline</span></div></div></a><div class='headline'>Do not use tab characters in source files.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>187&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s187'>Tab character in source.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_14.3' name='rule_hic%2B%2B_14.3'><div class='rule'><div class='id'>14.3<br/><span>Guideline</span></div></div></a><div class='headline'>Write pre-processor directives to begin in column 1 with no whitespace between the '#' and the pre-processor directive.</div></div><p>LDRA Associated HIC++ 14.3, 14.4</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>209&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s209'>Preprocessor command indented.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_14.4' name='rule_hic%2B%2B_14.4'><div class='rule'><div class='id'>14.4<br/><span>Guideline</span></div></div></a><div class='headline'>Write pre-processor directives to begin in column 1 with whitespace between the '#' and the pre-processor directive representing nesting in preprocessor conditionals.</div></div><p>LDRA Associated HIC++ 14.3, 14.4</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>209&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s209'>Preprocessor command indented.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_14.5' name='rule_hic%2B%2B_14.5'><div class='rule'><div class='id'>14.5<br/><span>Rule</span></div></div></a><div class='headline'>Control conditional compilation by the use of, or absence of, a pre-processor token definition.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>417&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s417'>Use of #if preprocessor command.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_14.6' name='rule_hic%2B%2B_14.6'><div class='rule'><div class='id'>14.6<br/><span>Rule</span></div></div></a><div class='headline'>Use the __cplusplus identifier to distinguish between C and C++ compilation.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_14.7' name='rule_hic%2B%2B_14.7'><div class='rule'><div class='id'>14.7<br/><span>Rule (checking)</span></div></div></a><div class='headline'>Do not include comment text in the definition of a pre-processor macro.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>152&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s152'>Use of a comment in a macro definition.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_14.8' name='rule_hic%2B%2B_14.8'><div class='rule'><div class='id'>14.8<br/><span>Rule</span></div></div></a><div class='headline'>Ensure that the last line of all files containing source code is followed by a new-line.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>412&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s412'>Undefined behaviour, \ before E-O-F.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>5&nbsp;Q</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_q5'>File does not end with new line.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_14.9' name='rule_hic%2B%2B_14.9'><div class='rule'><div class='id'>14.9<br/><span>Rule</span></div></div></a><div class='headline'>Use &lt;&gt; brackets for system and standard library headers. Use &quot;&quot; quotes for all other headers.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>568&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s568'>#include &quot;filename&quot; uses standard library name.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_344'>344</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_14.10' name='rule_hic%2B%2B_14.10'><div class='rule'><div class='id'>14.10<br/><span>Rule</span></div></div></a><div class='headline'>Do not include a path specifier in file names supplied in #include directives.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>4&nbsp;Q</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_q4'>Included file has path.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_14.11' name='rule_hic%2B%2B_14.11'><div class='rule'><div class='id'>14.11<br/><span>Rule (checking)</span></div></div></a><div class='headline'>Incorporate include guards in header files to prevent multiple inclusions of the same file</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>243&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s243'>Included file not protected with #define.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_14.12' name='rule_hic%2B%2B_14.12'><div class='rule'><div class='id'>14.12<br/><span>Rule</span></div></div></a><div class='headline'>Use lower-case for file names and references to file names (such as include directives).</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>3&nbsp;Q</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_q3'>Filename contains upper case letters.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_14.13' name='rule_hic%2B%2B_14.13'><div class='rule'><div class='id'>14.13<br/><span>Rule</span></div></div></a><div class='headline'>Write header files such that all files necessary for their compilation are included.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_14.14' name='rule_hic%2B%2B_14.14'><div class='rule'><div class='id'>14.14<br/><span>Rule</span></div></div></a><div class='headline'>Enclose macro arguments and body in parentheses.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>77&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s77'>Macro replacement list needs parentheses.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>78&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s78'>Macro parameter not in brackets.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_14.15' name='rule_hic%2B%2B_14.15'><div class='rule'><div class='id'>14.15<br/><span>Rule</span></div></div></a><div class='headline'>Do not use pre-processor macros to define code segments.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>79&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s79'>Macro contains unacceptable items.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_298'>298</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>340&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s340'>Use of function like macro.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_14.16' name='rule_hic%2B%2B_14.16'><div class='rule'><div class='id'>14.16<br/><span>Rule</span></div></div></a><div class='headline'>Do not use the NULL macro.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>348&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s348'>Use of the NULL macro.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_14.17' name='rule_hic%2B%2B_14.17'><div class='rule'><div class='id'>14.17<br/><span>Rule</span></div></div></a><div class='headline'>Use const objects or enumerators to define constants, not #define.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>200&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s200'>Define used for numeric constant.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_14.18' name='rule_hic%2B%2B_14.18'><div class='rule'><div class='id'>14.18<br/><span>Rule</span></div></div></a><div class='headline'>Do not use digraphs or trigraphs.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>81&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s81'>Use of trigraph.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>295&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s295'>Use of digraph.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_15.1' name='rule_hic%2B%2B_15.1'><div class='rule'><div class='id'>15.1<br/><span>Rule</span></div></div></a><div class='headline'>Do not use variant structures (unions).</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>74&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s74'>Union declared.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_15.2' name='rule_hic%2B%2B_15.2'><div class='rule'><div class='id'>15.2<br/><span>Rule</span></div></div></a><div class='headline'>Do not include member functions or access specifiers in struct types.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>198&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s198'>Use of privacy statement in struct.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_15.3' name='rule_hic%2B%2B_15.3'><div class='rule'><div class='id'>15.3<br/><span>Rule</span></div></div></a><div class='headline'>Do not rely on the value of an enumerator.</div></div><p>LDRA Associated HIC++ 13.6, 15.3</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>123&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s123'>Use of underlying enum representation value.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_15.4' name='rule_hic%2B%2B_15.4'><div class='rule'><div class='id'>15.4<br/><span>Rule</span></div></div></a><div class='headline'>Avoid casting an integer to an enumeration as the result of this cast is unspecified if the value is not within the range of the enumeration.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>411&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s411'>Inappropriate value assigned to enum.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_16.1' name='rule_hic%2B%2B_16.1'><div class='rule'><div class='id'>16.1<br/><span>Rule</span></div></div></a><div class='headline'>Avoid implicit conversions from class templates to non-dependent types as this ensures that clients cannot bypass the class interface.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_16.2' name='rule_hic%2B%2B_16.2'><div class='rule'><div class='id'>16.2<br/><span>Rule</span></div></div></a><div class='headline'>Do not define a class template with potentially conflicting methods.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_16.3' name='rule_hic%2B%2B_16.3'><div class='rule'><div class='id'>16.3<br/><span>Rule</span></div></div></a><div class='headline'>Only instantiate templates with template arguments which fulfill the interface requirements of the 'template'.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_16.4' name='rule_hic%2B%2B_16.4'><div class='rule'><div class='id'>16.4<br/><span>Guideline</span></div></div></a><div class='headline'>Only use templates when the behaviour of the class or function template is completely independent of the type of object to which it is applied.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_17.1' name='rule_hic%2B%2B_17.1'><div class='rule'><div class='id'>17.1<br/><span>Rule</span></div></div></a><div class='headline'>Use Standard C++ Library headers defined by the language standard and not outdated .h headers. For example, use &lt;iostream&gt; and not &lt;iostream.h&gt;, &lt;cstdio&gt; and not &lt;stdio.h&gt;.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>130&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s130'>Included file is not permitted.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_17.2' name='rule_hic%2B%2B_17.2'><div class='rule'><div class='id'>17.2<br/><span>Rule</span></div></div></a><div class='headline'>Use Standard Template Library containers and algorithms in preference to custom designs.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_17.3' name='rule_hic%2B%2B_17.3'><div class='rule'><div class='id'>17.3<br/><span>Guideline</span></div></div></a><div class='headline'>Make copying efficient for objects in containers.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_17.4' name='rule_hic%2B%2B_17.4'><div class='rule'><div class='id'>17.4<br/><span>Guideline</span></div></div></a><div class='headline'>Where copying is expensive use containers of pointers or smart pointers.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_17.5' name='rule_hic%2B%2B_17.5'><div class='rule'><div class='id'>17.5<br/><span>Rule</span></div></div></a><div class='headline'>Do not attempt to insert derived class objects in a container that holds base class objects.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_17.6' name='rule_hic%2B%2B_17.6'><div class='rule'><div class='id'>17.6<br/><span>Rule</span></div></div></a><div class='headline'>Use empty() instead of checking size() against zero.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_17.7' name='rule_hic%2B%2B_17.7'><div class='rule'><div class='id'>17.7<br/><span>Guideline</span></div></div></a><div class='headline'>Do not use STL containers as public base classes.</div></div><p>Testbed must first be configured to list the STL members that are to be checked. The names must be added to the STLTRE list in the cpptbend.dat file, prefixed by the number of letters in the name.  Normally this list is empty apart for a fictitious example called example_name_zz.</p>
<pre>C list of standard template library class names. RDSTL, STLTRE
   15 example_name_zz</pre><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>395&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s395'>Public base use of STL library member.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_17.8' name='rule_hic%2B%2B_17.8'><div class='rule'><div class='id'>17.8<br/><span>Rule</span></div></div></a><div class='headline'>Never create containers of auto_ptrs.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_17.9' name='rule_hic%2B%2B_17.9'><div class='rule'><div class='id'>17.9<br/><span>Rule</span></div></div></a><div class='headline'>Use vector and string in place of dynamically allocated arrays.</div></div><p>LDRA Associated HIC++ 8.3.3, 12.2, 17.9, 17.13</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>44&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s44'>Use of banned function or variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_17.10' name='rule_hic%2B%2B_17.10'><div class='rule'><div class='id'>17.10<br/><span>Guideline</span></div></div></a><div class='headline'>Where possible pre-allocate in containers to save unnecessary reallocations.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_17.11' name='rule_hic%2B%2B_17.11'><div class='rule'><div class='id'>17.11<br/><span>Rule</span></div></div></a><div class='headline'>When passing vector types to C style functions use 'v [ 0 ]'.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_17.12' name='rule_hic%2B%2B_17.12'><div class='rule'><div class='id'>17.12<br/><span>Rule</span></div></div></a><div class='headline'>Only use STL string's member c_str to get a const char* to use with legacy functions.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_17.13' name='rule_hic%2B%2B_17.13'><div class='rule'><div class='id'>17.13<br/><span>Rule</span></div></div></a><div class='headline'>Do not use vector &lt;bool&gt;.</div></div><p>LDRA Associated HIC++ 8.3.3, 12.2, 17.9, 17.13</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>44&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s44'>Use of banned function or variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_17.14' name='rule_hic%2B%2B_17.14'><div class='rule'><div class='id'>17.14<br/><span>Rule</span></div></div></a><div class='headline'>Return false for equivalent values in relational predicates.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_17.15' name='rule_hic%2B%2B_17.15'><div class='rule'><div class='id'>17.15<br/><span>Rule</span></div></div></a><div class='headline'>Never modify the key part of a set or multiset element.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_17.16' name='rule_hic%2B%2B_17.16'><div class='rule'><div class='id'>17.16<br/><span>Guideline</span></div></div></a><div class='headline'>Minimise mixing of iterator types.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_17.17' name='rule_hic%2B%2B_17.17'><div class='rule'><div class='id'>17.17<br/><span>Rule</span></div></div></a><div class='headline'>The result of a predicate should depend only on its parameters.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_17.18' name='rule_hic%2B%2B_17.18'><div class='rule'><div class='id'>17.18<br/><span>Guideline</span></div></div></a><div class='headline'>Use STL algorithms rather than hand-written loops.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_17.19' name='rule_hic%2B%2B_17.19'><div class='rule'><div class='id'>17.19<br/><span>Rule</span></div></div></a><div class='headline'>Use container member functions rather than algorithms with the same name. with the provisions of this document, and shall have been subject to appropriate validation</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_17.20' name='rule_hic%2B%2B_17.20'><div class='rule'><div class='id'>17.20<br/><span>Rule</span></div></div></a><div class='headline'>Directly include necessary STL headers.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_hic%2B%2B_17.21' name='rule_hic%2B%2B_17.21'><div class='rule'><div class='id'>17.21<br/><span>Guideline</span></div></div></a><div class='headline'>Minimise use of the Standard Template Library 'auto_ptr'.</div></div><p>NotAutomatically Checkable.</p>
</div><!-- body_block -->
    </div><!-- body-content -->
    <div class='footer'><p>     &copy; Copyright 2014 LDRA Ltd. All rights reserved.<br />     <span>Version 9.4.4, generated on 25th April 2014 at 08:31:23</span>    </p></div>
  </div><!-- body -->
</body>
</html>
