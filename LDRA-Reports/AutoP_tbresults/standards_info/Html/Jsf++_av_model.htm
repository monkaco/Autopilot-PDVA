<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'
'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'>
<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en' dir='ltr'>
<head>
  <!-- Force (well, try) IE8 to use IE8 standards mode -->
  <meta http-equiv='X-UA-Compatible' content='IE=8' />
  <meta http-equiv='Content-Type' content='text/html' />
  <title>JSF++ AV Standards Model for C++</title>
  <meta name='generator' content='LDRA Standards Tool' />
  <meta name='date' content='2014-04-25_08-31-23' />
  <style>

* {
    padding : 0em;
    margin  : 0em;
}

body {
    padding     : 0px;
    margin      : 0px;
    background  : #ffffff;
    font-family : Verdana, sans-serif;
    font-size   : 100%; /* Forces font sizes to work in all browsers (i.e. IE) */
}

div.nav {
    width : 100%;
}

div.floating-menu {
    position    : fixed;
    width       : 100%;
    margin-left : 1em;
    margin-top  : 1.5em;
    font-size   : 1em;
    z-index     : 20; /* Ensure popup is over page title */
}

div.nav div.page_title {
    top            : 0px;
    left           : 0px;
    width          : 100%;
    height         : 1em;
    font-size      : 200%;
    font-weight    : bold;
    text-align     : center;
    padding-top    : 0.25em;
    padding-bottom : 0.25em;
    color          : #5f4970;
    border-bottom  : 2px solid #eb6c00;
    z-index        : 10; /* Ensure page title is over page body */
}

div.nav div.page_title span.registered {
    font-size      : 50%;
    vertical-align : top;
}

.floating-menu .title:hover {
    color        : #000000;
    background   : #ccc0da;
}

.floating-menu ul {
    font-family   : Arial, Helvetica, sans-serif;
    margin  : 0em;
    padding : 0em;
}

.floating-menu li.sep {
  border-top : 0.125em solid #eb6c00;
}

.floating-menu li {
  position          : relative;
/*   width             : 8em; --- move to :hover to fix IE7 stuck hover */
  width             : 8em;
  list-style        : none;
  border-left       : 0.25em solid #eb6c00;
  border-bottom     : 1px solid #ccc0da;
  vertical-align    : bottom; /* Fix IE5-Win */
}

.floating-menu ul a,
.floating-menu ul li {
  display           : block;
  text-decoration   : none;
  text-align        : center;
  color             : #ccc0da;
  background        : #5f4970;
  vertical-align    : bottom; /* Fix IE5-Win */
}

.floating-menu ul ul {
/*  Rest of styling in hover to fix IE hover bug */
    display : none;
}

/* Menu item hover effects */
.floating-menu a:hover,
.floating-menu li:hover {
    color           : #5f4970;
    background      : #ccc0da;
    width           : 8em;
}

.floating-menu ul.l-1 li:hover ul.l-2 {
    position    : absolute;
    left        : -0.25em;
    top         : 0px;
    display     : block;

    /* These give tracking error bands around popup items.
     * This doesn't work for IE7 without a background image.
     */
    padding             : 1.5em 1.5em 1.5em 0em;
    background-image    : url(ie7/transparent-bg.gif);
    background-repeat   : repeat;
}

.floating-menu ul.l-2 li:hover ul.l-3,
.floating-menu ul.l-3 li:hover ul.l-4,
.floating-menu ul.l-4 li:hover ul.l-5 {
    position    : absolute;
    left        : 7.75em;   /* Just inside the right edge of the parent */
    top         : -1.5em;   /* Compensate for tracking guard band at top */
    display     : block;

    /* These give tracking error bands around popup items.
     * This doesn't work for IE7 without a background image.
     */
    padding             : 1.5em 1.5em 1.5em 0em;
    background-image    : url(ie7/transparent-bg.gif);
    background-repeat   : repeat;
}

.floating-menu ul.h-menu li {
    display         : inline;
    float           : left;
    border-right    : 0px; /* Turn off right border. */
}

.floating-menu li div.standard-range {
    margin : 0 auto;
    width  : 100%;
}

li div.right-align-standard {
    width      : 40%;
    text-align : right;
    display    : inline-block;
}
li div.center {
    width      : 20%;
    display    : inline-block;
    text-align : center;
}
li div.left-align-standard {
    width      : 40%;
    display    : inline-block;
    text-align : left;
}
.floating-menu ul.h-standards li,
.floating-menu ul.h-standards a {
    width : 3.5em;
}

.floating-menu ul.h-standards div.standard {
}
.floating-menu ul.h-standards li.unused-standard:hover,
.floating-menu ul.h-standards li.unused-standard {
    color      : #837093;
    background : #5f4970;
}
.floating-menu ul.h-standards li.standard div,
.floating-menu ul.h-standards li.unused-standard div {
    width      : 80%;
    text-align : right;
    display    : inline-block;
}
.floating-menu ul.h-keywords {
    width : 43.75em; /* 5 * ( 8.5em + 0.25em ) */
}

.floating-menu ul.h-models {
    width : 43.75em; /* 5 * ( 8.5em + 0.25em ) */
}

.floating-menu ul.h-models li,
.floating-menu ul.h-models a {
    width : 8.5em;
}

div.body {
    background : #ffffff;
    position   : absolute;
    top        : 3em;
    bottom     : 0em;
    left       : 0em;
    right      : 0em;
}

div.body * {
    padding : 0em;
    margin  : 0.5em 0em 0em 0em;
    border  : none;
}

div.body div {
    margin-top : 0em;
}

div.body-content {
    background  : #ffffff;
    border-left : 2px solid #eb6c00;
}

div.body_block {
    margin-left     : 10px;
    margin-right    : 10px;
    margin-bottom   : 0em;
    margin-top      : 0.5em;
    padding-top     : 0.25em;
    padding-bottom  : 1.5em;
    border-bottom   : 1px solid #eb6c00;
    font-size       : 80%;
}

.body_block .block_title {
    color         : #5f4970;
    font-size     : 135%;
    margin-bottom : 0.5em;
}

thead .block_title {
    margin-left : -1.25em;
}

.body_block .block_title div.standard {
    font-family : Arial, Helvetica, sans-serif;
    margin-left : -7em;
    width       : 6.25em;
    float       : left;
    font-size   : 115%;
    text-align  : right;
}

.body_block .block_title div.rule {
    font-family : Arial, Helvetica, sans-serif;
    font-size   : 110%;
    margin-left : -8.75em;
    width       : 7.75em;
    float       : left;
}

.body_block .block_title div.rule div {
    text-align : right;
}

.body_block .block_title div.rule span {
    font-size  : 80%;
    font-style : italic;
}

div.body_block .title {
    color         : #5f4970;
    text-align    : left;
    font-weight   : bold;
    margin-top    : 0.75em;
    margin-bottom : 0.5em;
}

div.body_block ul,
div.body_block ol {
    margin-left : 2em;
}

div.footer {
    text-align     : center;
    padding-bottom : 1em;
}

div.footer span {
    font-size : 75%;
}

pre {
    font-family : 'Courier New', monospace;
    font-size   : 85%; /* Forces font sizes to work in all browsers (i.e. IE) */
}

pre .kw1, pre .kw2, pre .kw3, pre .kw4, pre .kw5 {
    color:#0000ff;
}

pre .coMULTI, pre .co0, pre .co1, pre .co2, pre .co3 {
    color:#008000;
}

pre .es0, pre .es1, pre .es2, pre .es3, pre .es4, pre .es5, pre .esHARD, pre .nu0, pre .nu1, pre .nu2, pre .nu3, pre .nu4, pre .nu5, pre .nu6, pre .nu7, pre .nu8, pre .nu9, pre .nu10, pre .nu11, pre .nu12, pre .nu13, pre .nu14, pre .nu15, pre .nu16, pre .nu17, pre .nu18, pre .nu19, pre .st0 {
    color:#8080ff;
}

pre .br0 {
    color:#ff8080;
}

pre .me1, pre .me2 {
    color:#c00000;
}

pre .sy0, pre .sy1, pre .sy2, pre .sy3, pre .sy4 {
    color:#888888;
}

div.xref {
    margin-top  : 6pt;
    margin-left : 20px;
}

div.xref td {
    color          : #5f4970;
    vertical-align : top;
}

div.xref td.from {
    text-align : right;
}

div.xref td.level,
div.xref td.target {
    padding-left:1em;
}

div.body-content a {
    text-decoration : none;
    color           : #eb6c00;
}

div.body-content a:hover {
    text-decoration : underline;
}

@media screen {
    div.nav div.page_title {
        position : fixed;
    }
    div.body-content {
        margin-left : 10em;
    }
    div.body {
        overflow : auto;
    }
}
@media print {
    div.nav div.page_title {
        position  : relative;
        font-size : 150%;
    }
    div.floating-menu,
    div.noprint {
        display : none;
    }
    div.body {
        overflow : visible;
    }
}
@media print {
    div.body-content {
        margin-left : 10em;
    }
}

  </style>
</head>
<body>
  <!--[if lt IE 8]>
  <script src='ie7/IE8.js'></script>
  <![endif]-->
  <div class='nav'>
    <div class='floating-menu'>
  <ul class='l-1'>
    <li style='z-index:10000'>Menu
      <ul class='l-2'>
       <li style='z-index:9999;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         S Standards
    <ul class='l-3'>
      <li style='z-index:10000;'>
        <div class='standard-range'><div class='right-align-standard'>1&nbsp;S</div><div class='center'>to</div><div class='left-align-standard'>100&nbsp;S</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_s1'><div>1&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s2'><div>2&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s3'><div>3&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s4'><div>4&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s5'><div>5&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s6'><div>6&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s7'><div>7&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s8'><div>8&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s9'><div>9&nbsp;S</div></a></li>
      <li class='unused-standard'><div>10&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s11'><div>11&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s12'><div>12&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s13'><div>13&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s14'><div>14&nbsp;S</div></a></li>
      <li class='unused-standard'><div>15&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s16'><div>16&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s17'><div>17&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s18'><div>18&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s19'><div>19&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s20'><div>20&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s21'><div>21&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s22'><div>22&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s23'><div>23&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s24'><div>24&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s25'><div>25&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s26'><div>26&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s27'><div>27&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s28'><div>28&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s29'><div>29&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s30'><div>30&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s31'><div>31&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s32'><div>32&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s33'><div>33&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s34'><div>34&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s35'><div>35&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s36'><div>36&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s37'><div>37&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s38'><div>38&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s39'><div>39&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s40'><div>40&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s41'><div>41&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s42'><div>42&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s43'><div>43&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s44'><div>44&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s45'><div>45&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s46'><div>46&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s47'><div>47&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s48'><div>48&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s49'><div>49&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s50'><div>50&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s51'><div>51&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s52'><div>52&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s53'><div>53&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s54'><div>54&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s55'><div>55&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s56'><div>56&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s57'><div>57&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s58'><div>58&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s59'><div>59&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s60'><div>60&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s61'><div>61&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s62'><div>62&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s63'><div>63&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s64'><div>64&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s65'><div>65&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s66'><div>66&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s67'><div>67&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s68'><div>68&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s69'><div>69&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s70'><div>70&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s71'><div>71&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s72'><div>72&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s73'><div>73&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s74'><div>74&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s75'><div>75&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s76'><div>76&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s77'><div>77&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s78'><div>78&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s79'><div>79&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s80'><div>80&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s81'><div>81&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s82'><div>82&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s83'><div>83&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s84'><div>84&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s85'><div>85&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s86'><div>86&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s87'><div>87&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s88'><div>88&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s89'><div>89&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s90'><div>90&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s91'><div>91&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s92'><div>92&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s93'><div>93&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s94'><div>94&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s95'><div>95&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s96'><div>96&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s97'><div>97&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s98'><div>98&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s99'><div>99&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s100'><div>100&nbsp;S</div></a></li>
    </ul> <!-- l-4 -->
      </li>
      <li style='z-index:9999;'>
        <div class='standard-range'><div class='right-align-standard'>101&nbsp;S</div><div class='center'>to</div><div class='left-align-standard'>200&nbsp;S</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_s101'><div>101&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s102'><div>102&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s103'><div>103&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s104'><div>104&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s105'><div>105&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s106'><div>106&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s107'><div>107&nbsp;S</div></a></li>
      <li class='unused-standard'><div>108&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s109'><div>109&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s110'><div>110&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s111'><div>111&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s112'><div>112&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s113'><div>113&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s114'><div>114&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s115'><div>115&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s116'><div>116&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s117'><div>117&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s118'><div>118&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s119'><div>119&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s120'><div>120&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s121'><div>121&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s122'><div>122&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s123'><div>123&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s124'><div>124&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s125'><div>125&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s126'><div>126&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s127'><div>127&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s128'><div>128&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s129'><div>129&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s130'><div>130&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s131'><div>131&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s132'><div>132&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s133'><div>133&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s134'><div>134&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s135'><div>135&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s136'><div>136&nbsp;S</div></a></li>
      <li class='unused-standard'><div>137&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s138'><div>138&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s139'><div>139&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s140'><div>140&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s141'><div>141&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s142'><div>142&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s143'><div>143&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s144'><div>144&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s145'><div>145&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s146'><div>146&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s147'><div>147&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s148'><div>148&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s149'><div>149&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s150'><div>150&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s151'><div>151&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s152'><div>152&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s153'><div>153&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s154'><div>154&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s155'><div>155&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s156'><div>156&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s157'><div>157&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s158'><div>158&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s159'><div>159&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s160'><div>160&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s161'><div>161&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s162'><div>162&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s163'><div>163&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s164'><div>164&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s165'><div>165&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s166'><div>166&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s167'><div>167&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s168'><div>168&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s169'><div>169&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s170'><div>170&nbsp;S</div></a></li>
      <li class='unused-standard'><div>171&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s172'><div>172&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s173'><div>173&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s174'><div>174&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s175'><div>175&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s176'><div>176&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s177'><div>177&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s178'><div>178&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s179'><div>179&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s180'><div>180&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s181'><div>181&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s182'><div>182&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s183'><div>183&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s184'><div>184&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s185'><div>185&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s186'><div>186&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s187'><div>187&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s188'><div>188&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s189'><div>189&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s190'><div>190&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s191'><div>191&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s192'><div>192&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s193'><div>193&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s194'><div>194&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s195'><div>195&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s196'><div>196&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s197'><div>197&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s198'><div>198&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s199'><div>199&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s200'><div>200&nbsp;S</div></a></li>
    </ul> <!-- l-4 -->
      </li>
      <li style='z-index:9998;'>
        <div class='standard-range'><div class='right-align-standard'>201&nbsp;S</div><div class='center'>to</div><div class='left-align-standard'>300&nbsp;S</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_s201'><div>201&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s202'><div>202&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s203'><div>203&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s204'><div>204&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s205'><div>205&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s206'><div>206&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s207'><div>207&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s208'><div>208&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s209'><div>209&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s210'><div>210&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s211'><div>211&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s212'><div>212&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s213'><div>213&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s214'><div>214&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s215'><div>215&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s216'><div>216&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s217'><div>217&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s218'><div>218&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s219'><div>219&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s220'><div>220&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s221'><div>221&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s222'><div>222&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s223'><div>223&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s224'><div>224&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s225'><div>225&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s226'><div>226&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s227'><div>227&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s228'><div>228&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s229'><div>229&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s230'><div>230&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s231'><div>231&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s232'><div>232&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s233'><div>233&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s234'><div>234&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s235'><div>235&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s236'><div>236&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s237'><div>237&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s238'><div>238&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s239'><div>239&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s240'><div>240&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s241'><div>241&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s242'><div>242&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s243'><div>243&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s244'><div>244&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s245'><div>245&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s246'><div>246&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s247'><div>247&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s248'><div>248&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s249'><div>249&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s250'><div>250&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s251'><div>251&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s252'><div>252&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s253'><div>253&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s254'><div>254&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s255'><div>255&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s256'><div>256&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s257'><div>257&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s258'><div>258&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s259'><div>259&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s260'><div>260&nbsp;S</div></a></li>
      <li class='unused-standard'><div>261&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s262'><div>262&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s263'><div>263&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s264'><div>264&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s265'><div>265&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s266'><div>266&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s267'><div>267&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s268'><div>268&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s269'><div>269&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s270'><div>270&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s271'><div>271&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s272'><div>272&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s273'><div>273&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s274'><div>274&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s275'><div>275&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s276'><div>276&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s277'><div>277&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s278'><div>278&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s279'><div>279&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s280'><div>280&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s281'><div>281&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s282'><div>282&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s283'><div>283&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s284'><div>284&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s285'><div>285&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s286'><div>286&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s287'><div>287&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s288'><div>288&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s289'><div>289&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s290'><div>290&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s291'><div>291&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s292'><div>292&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s293'><div>293&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s294'><div>294&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s295'><div>295&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s296'><div>296&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s297'><div>297&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s298'><div>298&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s299'><div>299&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s300'><div>300&nbsp;S</div></a></li>
    </ul> <!-- l-4 -->
      </li>
      <li style='z-index:9997;'>
        <div class='standard-range'><div class='right-align-standard'>301&nbsp;S</div><div class='center'>to</div><div class='left-align-standard'>400&nbsp;S</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_s301'><div>301&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s302'><div>302&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s303'><div>303&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s304'><div>304&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s305'><div>305&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s306'><div>306&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s307'><div>307&nbsp;S</div></a></li>
      <li class='unused-standard'><div>308&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s309'><div>309&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s310'><div>310&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s311'><div>311&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s312'><div>312&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s313'><div>313&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s314'><div>314&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s315'><div>315&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s316'><div>316&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s317'><div>317&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s318'><div>318&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s319'><div>319&nbsp;S</div></a></li>
      <li class='unused-standard'><div>320&nbsp;S</div></li>
      <li class='unused-standard'><div>321&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s322'><div>322&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s323'><div>323&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s324'><div>324&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s325'><div>325&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s326'><div>326&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s327'><div>327&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s328'><div>328&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s329'><div>329&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s330'><div>330&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s331'><div>331&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s332'><div>332&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s333'><div>333&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s334'><div>334&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s335'><div>335&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s336'><div>336&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s337'><div>337&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s338'><div>338&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s339'><div>339&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s340'><div>340&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s341'><div>341&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s342'><div>342&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s343'><div>343&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s344'><div>344&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s345'><div>345&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s346'><div>346&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s347'><div>347&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s348'><div>348&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s349'><div>349&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s350'><div>350&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s351'><div>351&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s352'><div>352&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s353'><div>353&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s354'><div>354&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s355'><div>355&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s356'><div>356&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s357'><div>357&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s358'><div>358&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s359'><div>359&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s360'><div>360&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s361'><div>361&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s362'><div>362&nbsp;S</div></a></li>
      <li class='unused-standard'><div>363&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s364'><div>364&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s365'><div>365&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s366'><div>366&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s367'><div>367&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s368'><div>368&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s369'><div>369&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s370'><div>370&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s371'><div>371&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s372'><div>372&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s373'><div>373&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s374'><div>374&nbsp;S</div></a></li>
      <li class='unused-standard'><div>375&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s376'><div>376&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s377'><div>377&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s378'><div>378&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s379'><div>379&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s380'><div>380&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s381'><div>381&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s382'><div>382&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s383'><div>383&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s384'><div>384&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s385'><div>385&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s386'><div>386&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s387'><div>387&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s388'><div>388&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s389'><div>389&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s390'><div>390&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s391'><div>391&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s392'><div>392&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s393'><div>393&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s394'><div>394&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s395'><div>395&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s396'><div>396&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s397'><div>397&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s398'><div>398&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s399'><div>399&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s400'><div>400&nbsp;S</div></a></li>
    </ul> <!-- l-4 -->
      </li>
      <li style='z-index:9996;'>
        <div class='standard-range'><div class='right-align-standard'>401&nbsp;S</div><div class='center'>to</div><div class='left-align-standard'>500&nbsp;S</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_s401'><div>401&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s402'><div>402&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s403'><div>403&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s404'><div>404&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s405'><div>405&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s406'><div>406&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s407'><div>407&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s408'><div>408&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s409'><div>409&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s410'><div>410&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s411'><div>411&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s412'><div>412&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s413'><div>413&nbsp;S</div></a></li>
      <li class='unused-standard'><div>414&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s415'><div>415&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s416'><div>416&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s417'><div>417&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s418'><div>418&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s419'><div>419&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s420'><div>420&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s421'><div>421&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s422'><div>422&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s423'><div>423&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s424'><div>424&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s425'><div>425&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s426'><div>426&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s427'><div>427&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s428'><div>428&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s429'><div>429&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s430'><div>430&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s431'><div>431&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s432'><div>432&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s433'><div>433&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s434'><div>434&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s435'><div>435&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s436'><div>436&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s437'><div>437&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s438'><div>438&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s439'><div>439&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s440'><div>440&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s441'><div>441&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s442'><div>442&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s443'><div>443&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s444'><div>444&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s445'><div>445&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s446'><div>446&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s447'><div>447&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s448'><div>448&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s449'><div>449&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s450'><div>450&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s451'><div>451&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s452'><div>452&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s453'><div>453&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s454'><div>454&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s455'><div>455&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s456'><div>456&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s457'><div>457&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s458'><div>458&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s459'><div>459&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s460'><div>460&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s461'><div>461&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s462'><div>462&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s463'><div>463&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s464'><div>464&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s465'><div>465&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s466'><div>466&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s467'><div>467&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s468'><div>468&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s469'><div>469&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s470'><div>470&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s471'><div>471&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s472'><div>472&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s473'><div>473&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s474'><div>474&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s475'><div>475&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s476'><div>476&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s477'><div>477&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s478'><div>478&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s479'><div>479&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s480'><div>480&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s481'><div>481&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s482'><div>482&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s483'><div>483&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s484'><div>484&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s485'><div>485&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s486'><div>486&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s487'><div>487&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s488'><div>488&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s489'><div>489&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s490'><div>490&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s491'><div>491&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s492'><div>492&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s493'><div>493&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s494'><div>494&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s495'><div>495&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s496'><div>496&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s497'><div>497&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s498'><div>498&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s499'><div>499&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s500'><div>500&nbsp;S</div></a></li>
    </ul> <!-- l-4 -->
      </li>
      <li style='z-index:9995;'>
        <div class='standard-range'><div class='right-align-standard'>501&nbsp;S</div><div class='center'>to</div><div class='left-align-standard'>600&nbsp;S</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_s501'><div>501&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s502'><div>502&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s503'><div>503&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s504'><div>504&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s505'><div>505&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s506'><div>506&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s507'><div>507&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s508'><div>508&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s509'><div>509&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s510'><div>510&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s511'><div>511&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s512'><div>512&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s513'><div>513&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s514'><div>514&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s515'><div>515&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s516'><div>516&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s517'><div>517&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s518'><div>518&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s519'><div>519&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s520'><div>520&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s521'><div>521&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s522'><div>522&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s523'><div>523&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s524'><div>524&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s525'><div>525&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s526'><div>526&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s527'><div>527&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s528'><div>528&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s529'><div>529&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s530'><div>530&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s531'><div>531&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s532'><div>532&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s533'><div>533&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s534'><div>534&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s535'><div>535&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s536'><div>536&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s537'><div>537&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s538'><div>538&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s539'><div>539&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s540'><div>540&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s541'><div>541&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s542'><div>542&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s543'><div>543&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s544'><div>544&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s545'><div>545&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s546'><div>546&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s547'><div>547&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s548'><div>548&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s549'><div>549&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s550'><div>550&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s551'><div>551&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s552'><div>552&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s553'><div>553&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s554'><div>554&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s555'><div>555&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s556'><div>556&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s557'><div>557&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s558'><div>558&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s559'><div>559&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s560'><div>560&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s561'><div>561&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s562'><div>562&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s563'><div>563&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s564'><div>564&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s565'><div>565&nbsp;S</div></a></li>
      <li class='unused-standard'><div>566&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s567'><div>567&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s568'><div>568&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s569'><div>569&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s570'><div>570&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s571'><div>571&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s572'><div>572&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s573'><div>573&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s574'><div>574&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s575'><div>575&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s576'><div>576&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s577'><div>577&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s578'><div>578&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s579'><div>579&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s580'><div>580&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s581'><div>581&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s582'><div>582&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s583'><div>583&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s584'><div>584&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s585'><div>585&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s586'><div>586&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s587'><div>587&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s588'><div>588&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s589'><div>589&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s590'><div>590&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s591'><div>591&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s592'><div>592&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s593'><div>593&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s594'><div>594&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s595'><div>595&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s596'><div>596&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s597'><div>597&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s598'><div>598&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s599'><div>599&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s600'><div>600&nbsp;S</div></a></li>
    </ul> <!-- l-4 -->
      </li>
      <li style='z-index:9994;'>
        <div class='standard-range'><div class='right-align-standard'>601&nbsp;S</div><div class='center'>to</div><div class='left-align-standard'>639&nbsp;S</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_s601'><div>601&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s602'><div>602&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s603'><div>603&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s604'><div>604&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s605'><div>605&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s606'><div>606&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s607'><div>607&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s608'><div>608&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s609'><div>609&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s610'><div>610&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s611'><div>611&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s612'><div>612&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s613'><div>613&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s614'><div>614&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s615'><div>615&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s616'><div>616&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s617'><div>617&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s618'><div>618&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s619'><div>619&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s620'><div>620&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s621'><div>621&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s622'><div>622&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s623'><div>623&nbsp;S</div></a></li>
      <li class='unused-standard'><div>624&nbsp;S</div></li>
      <li class='unused-standard'><div>625&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s626'><div>626&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s627'><div>627&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s628'><div>628&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s629'><div>629&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s630'><div>630&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s631'><div>631&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s632'><div>632&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s633'><div>633&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s634'><div>634&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s635'><div>635&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s636'><div>636&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s637'><div>637&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s638'><div>638&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s639'><div>639&nbsp;S</div></a></li>
    </ul> <!-- l-4 -->
      </li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9998;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         C Standards
    <ul class='l-3 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_c1'><div>1&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c2'><div>2&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c3'><div>3&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c4'><div>4&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c5'><div>5&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c6'><div>6&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c7'><div>7&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c8'><div>8&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c9'><div>9&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c10'><div>10&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c11'><div>11&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c12'><div>12&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c13'><div>13&nbsp;C</div></a></li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9997;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         D Standards
    <ul class='l-3'>
      <li style='z-index:10000;'>
        <div class='standard-range'><div class='right-align-standard'>1&nbsp;D</div><div class='center'>to</div><div class='left-align-standard'>100&nbsp;D</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_d1'><div>1&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d2'><div>2&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d3'><div>3&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d4'><div>4&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d5'><div>5&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d6'><div>6&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d7'><div>7&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d8'><div>8&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d9'><div>9&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d10'><div>10&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d11'><div>11&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d12'><div>12&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d13'><div>13&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d14'><div>14&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d15'><div>15&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d16'><div>16&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d17'><div>17&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d18'><div>18&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d19'><div>19&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d20'><div>20&nbsp;D</div></a></li>
      <li class='unused-standard'><div>21&nbsp;D</div></li>
      <li class='standard'><a href='standards.htm#standard_d22'><div>22&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d23'><div>23&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d24'><div>24&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d25'><div>25&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d26'><div>26&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d27'><div>27&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d28'><div>28&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d29'><div>29&nbsp;D</div></a></li>
      <li class='unused-standard'><div>30&nbsp;D</div></li>
      <li class='unused-standard'><div>31&nbsp;D</div></li>
      <li class='unused-standard'><div>32&nbsp;D</div></li>
      <li class='standard'><a href='standards.htm#standard_d33'><div>33&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d34'><div>34&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d35'><div>35&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d36'><div>36&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d37'><div>37&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d38'><div>38&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d39'><div>39&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d40'><div>40&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d41'><div>41&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d42'><div>42&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d43'><div>43&nbsp;D</div></a></li>
      <li class='unused-standard'><div>44&nbsp;D</div></li>
      <li class='standard'><a href='standards.htm#standard_d45'><div>45&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d46'><div>46&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d47'><div>47&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d48'><div>48&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d49'><div>49&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d50'><div>50&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d51'><div>51&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d52'><div>52&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d53'><div>53&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d54'><div>54&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d55'><div>55&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d56'><div>56&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d57'><div>57&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d58'><div>58&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d59'><div>59&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d60'><div>60&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d61'><div>61&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d62'><div>62&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d63'><div>63&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d64'><div>64&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d65'><div>65&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d66'><div>66&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d67'><div>67&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d68'><div>68&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d69'><div>69&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d70'><div>70&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d71'><div>71&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d72'><div>72&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d73'><div>73&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d74'><div>74&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d75'><div>75&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d76'><div>76&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d77'><div>77&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d78'><div>78&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d79'><div>79&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d80'><div>80&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d81'><div>81&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d82'><div>82&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d83'><div>83&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d84'><div>84&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d85'><div>85&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d86'><div>86&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d87'><div>87&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d88'><div>88&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d89'><div>89&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d90'><div>90&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d91'><div>91&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d92'><div>92&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d93'><div>93&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d94'><div>94&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d95'><div>95&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d96'><div>96&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d97'><div>97&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d98'><div>98&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d99'><div>99&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d100'><div>100&nbsp;D</div></a></li>
    </ul> <!-- l-4 -->
      </li>
      <li style='z-index:9999;'>
        <div class='standard-range'><div class='right-align-standard'>101&nbsp;D</div><div class='center'>to</div><div class='left-align-standard'>113&nbsp;D</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_d101'><div>101&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d102'><div>102&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d103'><div>103&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d104'><div>104&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d105'><div>105&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d106'><div>106&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d107'><div>107&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d108'><div>108&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d109'><div>109&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d110'><div>110&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d111'><div>111&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d112'><div>112&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d113'><div>113&nbsp;D</div></a></li>
    </ul> <!-- l-4 -->
      </li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9996;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         X Standards
    <ul class='l-3 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_x1'><div>1&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x2'><div>2&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x3'><div>3&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x4'><div>4&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x5'><div>5&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x6'><div>6&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x7'><div>7&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x8'><div>8&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x9'><div>9&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x10'><div>10&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x11'><div>11&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x12'><div>12&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x13'><div>13&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x14'><div>14&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x15'><div>15&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x16'><div>16&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x17'><div>17&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x18'><div>18&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x19'><div>19&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x20'><div>20&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x21'><div>21&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x22'><div>22&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x23'><div>23&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x24'><div>24&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x25'><div>25&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x26'><div>26&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x27'><div>27&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x28'><div>28&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x29'><div>29&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x30'><div>30&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x31'><div>31&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x32'><div>32&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x33'><div>33&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x34'><div>34&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x35'><div>35&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x36'><div>36&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x37'><div>37&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x38'><div>38&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x39'><div>39&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x40'><div>40&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x41'><div>41&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x42'><div>42&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x43'><div>43&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x44'><div>44&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x45'><div>45&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x46'><div>46&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x47'><div>47&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x48'><div>48&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x49'><div>49&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x50'><div>50&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x51'><div>51&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x52'><div>52&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x53'><div>53&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x54'><div>54&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x55'><div>55&nbsp;X</div></a></li>
      <li class='unused-standard'><div>56&nbsp;X</div></li>
      <li class='standard'><a href='standards.htm#standard_x57'><div>57&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x58'><div>58&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x59'><div>59&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x60'><div>60&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x61'><div>61&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x62'><div>62&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x63'><div>63&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x64'><div>64&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x65'><div>65&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x66'><div>66&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x67'><div>67&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x68'><div>68&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x69'><div>69&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x70'><div>70&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x71'><div>71&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x72'><div>72&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x73'><div>73&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x74'><div>74&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x75'><div>75&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x76'><div>76&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x77'><div>77&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x78'><div>78&nbsp;X</div></a></li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9995;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         I Standards
    <ul class='l-3 h-menu h-standards' style='width:3.75em;'>
      <li class='standard'><a href='standards.htm#standard_i1'><div>1&nbsp;I</div></a></li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9994;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         Q Standards
    <ul class='l-3 h-menu h-standards' style='width:18.75em;'>
      <li class='standard'><a href='standards.htm#standard_q1'><div>1&nbsp;Q</div></a></li>
      <li class='standard'><a href='standards.htm#standard_q2'><div>2&nbsp;Q</div></a></li>
      <li class='standard'><a href='standards.htm#standard_q3'><div>3&nbsp;Q</div></a></li>
      <li class='standard'><a href='standards.htm#standard_q4'><div>4&nbsp;Q</div></a></li>
      <li class='standard'><a href='standards.htm#standard_q5'><div>5&nbsp;Q</div></a></li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9993;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         U Standards
    <ul class='l-3 h-menu h-standards' style='width:11.25em;'>
      <li class='standard'><a href='standards.htm#standard_u1'><div>1&nbsp;U</div></a></li>
      <li class='standard'><a href='standards.htm#standard_u2'><div>2&nbsp;U</div></a></li>
      <li class='standard'><a href='standards.htm#standard_u3'><div>3&nbsp;U</div></a></li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9992;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         J Standards
    <ul class='l-3 h-menu h-standards' style='width:11.25em;'>
      <li class='standard'><a href='standards.htm#standard_j1'><div>1&nbsp;J</div></a></li>
      <li class='standard'><a href='standards.htm#standard_j2'><div>2&nbsp;J</div></a></li>
      <li class='standard'><a href='standards.htm#standard_j3'><div>3&nbsp;J</div></a></li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9991;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         Z Standards
    <ul class='l-3 h-menu h-standards' style='width:3.75em;'>
      <li class='standard'><a href='standards.htm#standard_z1'><div>1&nbsp;Z</div></a></li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9990;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         H Standards
    <ul class='l-3 h-menu h-standards' style='width:30em;'>
      <li class='standard'><a href='standards.htm#standard_h1'><div>1&nbsp;H</div></a></li>
      <li class='standard'><a href='standards.htm#standard_h2'><div>2&nbsp;H</div></a></li>
      <li class='standard'><a href='standards.htm#standard_h3'><div>3&nbsp;H</div></a></li>
      <li class='standard'><a href='standards.htm#standard_h4'><div>4&nbsp;H</div></a></li>
      <li class='standard'><a href='standards.htm#standard_h5'><div>5&nbsp;H</div></a></li>
      <li class='standard'><a href='standards.htm#standard_h6'><div>6&nbsp;H</div></a></li>
      <li class='standard'><a href='standards.htm#standard_h7'><div>7&nbsp;H</div></a></li>
      <li class='standard'><a href='standards.htm#standard_h8'><div>8&nbsp;H</div></a></li>
    </ul> <!-- l-3 -->
       </li>
    <li class='sep' style='z-index:9999;' />
        <li style='z-index:9989;'>
          <!-- No <a> tag round content means item stays lit when in popup -->
          By Keyword
          <ul class='l-3 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_decl'>Decl</a></div>
          <ul class='l-4 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_class'>Class</a></div>
          <ul class='l-5 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_inherit'>Inherit</a></div>
            </li>
            <li style='z-index:9999;'>
              <div class='standard-range'><a href='keywords.htm#keyword_op'>Op</a></div>
            </li>
          </ul>
            </li>
            <li style='z-index:9999;'>
              <div class='standard-range'><a href='keywords.htm#keyword_fn'>Fn</a></div>
          <ul class='l-5 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_fnpar'>Fnpar</a></div>
            </li>
          </ul>
            </li>
            <li style='z-index:9998;'>
              <div class='standard-range'><a href='keywords.htm#keyword_id'>Id</a></div>
            </li>
            <li style='z-index:9997;'>
              <div class='standard-range'><a href='keywords.htm#keyword_obj'>Obj</a></div>
            </li>
            <li style='z-index:9996;'>
              <div class='standard-range'><a href='keywords.htm#keyword_template'>Template</a></div>
            </li>
            <li style='z-index:9995;'>
              <div class='standard-range'><a href='keywords.htm#keyword_type'>Type</a></div>
          <ul class='l-5 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_struct'>Struct</a></div>
            </li>
          </ul>
            </li>
          </ul>
            </li>
            <li style='z-index:9999;'>
              <div class='standard-range'><a href='keywords.htm#keyword_exp'>Exp</a></div>
          <ul class='l-4 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_arr'>Arr</a></div>
            </li>
            <li style='z-index:9999;'>
              <div class='standard-range'><a href='keywords.htm#keyword_conv'>Conv</a></div>
            </li>
            <li style='z-index:9998;'>
              <div class='standard-range'><a href='keywords.htm#keyword_ptr'>Ptr</a></div>
            </li>
          </ul>
            </li>
            <li style='z-index:9998;'>
              <div class='standard-range'><a href='keywords.htm#keyword_file'>File</a></div>
          <ul class='l-4 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_namespace'>Namespace</a></div>
            </li>
          </ul>
            </li>
            <li style='z-index:9997;'>
              <div class='standard-range'><a href='keywords.htm#keyword_flow'>Flow</a></div>
            </li>
            <li style='z-index:9996;'>
              <div class='standard-range'><a href='keywords.htm#keyword_lib'>Lib</a></div>
          <ul class='l-4 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_io'>Io</a></div>
            </li>
          </ul>
            </li>
            <li style='z-index:9995;'>
              <div class='standard-range'><a href='keywords.htm#keyword_lit'>Lit</a></div>
            </li>
            <li style='z-index:9994;'>
              <div class='standard-range'><a href='keywords.htm#keyword_metric'>Metric</a></div>
            </li>
            <li style='z-index:9993;'>
              <div class='standard-range'><a href='keywords.htm#keyword_misc'>Misc</a></div>
            </li>
            <li style='z-index:9992;'>
              <div class='standard-range'><a href='keywords.htm#keyword_pre'>Pre</a></div>
            </li>
            <li style='z-index:9991;'>
              <div class='standard-range'><a href='keywords.htm#keyword_stmt'>Stmt</a></div>
          <ul class='l-4 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_cond'>Cond</a></div>
          <ul class='l-5 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_if'>If</a></div>
            </li>
            <li style='z-index:9999;'>
              <div class='standard-range'><a href='keywords.htm#keyword_switch'>Switch</a></div>
            </li>
          </ul>
            </li>
            <li style='z-index:9999;'>
              <div class='standard-range'><a href='keywords.htm#keyword_loop'>Loop</a></div>
            </li>
            <li style='z-index:9998;'>
              <div class='standard-range'><a href='keywords.htm#keyword_jmp'>Jmp</a></div>
            </li>
            <li style='z-index:9997;'>
              <div class='standard-range'><a href='keywords.htm#keyword_except'>Except</a></div>
            </li>
          </ul>
            </li>
            <li style='z-index:9990;'>
              <div class='standard-range'><a href='keywords.htm#keyword_style'>Style</a></div>
            </li>
          </ul>
        </li>
        <li style='z-index:9988;'>
          <!-- No <a> tag round content means item stays lit when in popup -->
          By Classification
          <ul class='l-3 h-menu h-keywords'>
    <li><a href='classifications.htm#classification_allocation'>Allocation</a></li>
    <li><a href='classifications.htm#classification_complexity'>Complexity</a></li>
    <li><a href='classifications.htm#classification_dependability'>Dependability</a></li>
    <li><a href='classifications.htm#classification_fault'>Fault</a></li>
    <li><a href='classifications.htm#classification_maintainability'>Maintainability</a></li>
    <li><a href='classifications.htm#classification_portability'>Portability</a></li>
    <li><a href='classifications.htm#classification_style'>Style</a></li>
    <li><a href='classifications.htm#classification_testability'>Testability</a></li>
    <li><a href='classifications.htm#classification_vulnerabilities'>Vulnerabilities</a></li>
          </ul>
        </li>
    <li><a href='standard_flags.htm'>Std Modifiers</a></li>
    <li class='sep' style='z-index:9999;' />
        <li style='z-index:9987;'>
          <!-- No <a> tag round content means item stays lit when in popup -->
          Models
          <ul class='l-3 h-menu h-models'>
    <li><a href='cast_model.htm'>CAST</a></li>
    <li><a href='cert-c_model.htm'>CERT-C</a></li>
    <li><a href='cmse_model.htm'>CMSE</a></li>
    <li><a href='conform_model.htm'>CONFORM</a></li>
    <li><a href='cwe_model.htm'>CWE</a></li>
    <li><a href='customer_sample_model.htm'>Customer Sample</a></li>
    <li><a href='dera_model.htm'>DERA</a></li>
    <li><a href='eads-c_model.htm'>EADS-C</a></li>
    <li><a href='eads-cpp_model.htm'>EADS-C++</a></li>
    <li><a href='fsb582-c_model.htm'>FSB582-C</a></li>
    <li><a href='fsb582-cpp_model.htm'>FSB582-C++</a></li>
    <li><a href='gjb_model.htm'>GJB</a></li>
    <li><a href='hicpp_model.htm'>HIC++</a></li>
    <li><a href='his_model.htm'>HIS</a></li>
    <li><a href='jpl_model.htm'>JPL</a></li>
    <li><a href='jsf++_av_model.htm'>JSF++ AV</a></li>
    <li><a href='lmtcp_model.htm'>LMTCP</a></li>
    <li><a href='legacy_model.htm'>Legacy</a></li>
    <li><a href='misra-ac_model.htm'>MISRA-AC</a></li>
    <li><a href='misra-cpp_2008_model.htm'>MISRA-C++:2008</a></li>
    <li><a href='misra-c_1998_model.htm'>MISRA-C:1998</a></li>
    <li><a href='misra-c_2004_model.htm'>MISRA-C:2004</a></li>
    <li><a href='misra-c_2012_model.htm'>MISRA-C:2012</a></li>
    <li><a href='netrino_model.htm'>NETRINO</a></li>
    <li><a href='runtime_model.htm'>RUNTIME</a></li>
    <li><a href='sec-c_model.htm'>SEC-C</a></li>
    <li><a href='standard_model.htm'>Standard</a></li>
    <li><a href='tbrun_requires_model.htm'>TBrun Requires</a></li>
    <li><a href='uml_model.htm'>UML</a></li>
    <li><a href='vsos_model.htm'>VSOS</a></li>
          </ul>
        </li>
      </ul>
    </li>
  </ul><!-- l-1 -->
    </div><!-- floating-menu -->
    <div class='page_title'>JSF++ AV Standards Model for C++</div>
  </div><!-- nav -->
  <div class='body'>
    <div class='body-content'>
<div class='body_block'>
  <div class='title'>Acknowledgements</div>
  <p>Extracts from "Joint Strike Fighter Air Vehicle C++ Coding Standards, Doc. No. 2RDU00001 Rev C" &copy; Lockheed Martin Corporation</p>
  <div class='title'>Compliance Matrix</div>
  <p>A compliance matrix for the JSF++ AV standards model is available in the Microsoft Excel XML file <i>standards_info/compliance/jsf++_av_compliance.xml</i>, which may be found relative to the LDRA tool suite installation directory.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_1' name='rule_jsf%2B%2B_av_1'><div class='rule'><div class='id'>1<br/><span>Will</span></div></div></a><div class='headline'>Any one function (or method) will contain no more than 200 logical source lines of code (L-SLOCs).</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>256&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s256'>Procedure exceeds *** source lines of code.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_203'>203</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_2' name='rule_jsf%2B%2B_av_2'><div class='rule'><div class='id'>2<br/><span>Shall</span></div></div></a><div class='headline'>There shall not be any self-modifying code.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_3' name='rule_jsf%2B%2B_av_3'><div class='rule'><div class='id'>3<br/><span>Shall</span></div></div></a><div class='headline'>All functions shall have a cyclomatic complexity number of 20 or less.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>1&nbsp;C</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_c1'>Cyclomatic complexity greater than ***.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_4' name='rule_jsf%2B%2B_av_4'><div class='rule'><div class='id'>4<br/><span>Shall</span></div></div></a><div class='headline'>To break a &quot;should&quot; rule, the following approval must be received by the developer: * approval from the software engineering lead (obtained by the unit approval in the developmental CM tool)</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_5' name='rule_jsf%2B%2B_av_5'><div class='rule'><div class='id'>5<br/><span>Shall</span></div></div></a><div class='headline'>To break a &quot;will&quot; or a &quot;shall&quot; rule, the following approvals must be received by the developer: * approval from the software engineering lead (obtained by the unit approval in the developmental CM tool) * approval from the software product manager (obtained by the unit approval in the developmental CM tool)</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_6' name='rule_jsf%2B%2B_av_6'><div class='rule'><div class='id'>6<br/><span>Shall</span></div></div></a><div class='headline'>Each deviation from a &quot;shall&quot; rule shall be documented in the file that contains the deviation). Deviations from this rule shall not be allowed, AV Rule 5 notwithstanding.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_7' name='rule_jsf%2B%2B_av_7'><div class='rule'><div class='id'>7<br/><span>Will</span></div></div></a><div class='headline'>Approval will not be required for a deviation from a &quot;shall&quot; or &quot;will&quot; rule that complies with an exception specified by that rule.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_8' name='rule_jsf%2B%2B_av_8'><div class='rule'><div class='id'>8<br/><span>Shall</span></div></div></a><div class='headline'>All code shall conform to ISO/IEC 14882:2002(E) standard C++.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>22&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s22'>Use of obsolete language feature ( use = - ).</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>293&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s293'>Non ANSI/ISO construct used.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_9' name='rule_jsf%2B%2B_av_9'><div class='rule'><div class='id'>9<br/><span>Will</span></div></div></a><div class='headline'>Only those characters specified in the C++ basic source character set will be used.</div></div><p>This set includes 96 characters: the space character, the control characters representing horizontal tab, vertical tab, form feed, and newline, and the following 91 graphical characters:</p>
<pre>a b c d e f g h i j k l m n o p q r s t u v w x y z
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
0 1 2 3 4 5 6 7 8 9
_ { } [ ] # ( ) &lt; &gt; % : ; . ? * + -
/ ^ &amp; | ~ ! = , \ &quot; ' </pre><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>113&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s113'>Non standard character   in source.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_408'>408</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_10' name='rule_jsf%2B%2B_av_10'><div class='rule'><div class='id'>10<br/><span>Will</span></div></div></a><div class='headline'>Values of character types will be restricted to a defined and documented subset of ISO 10646-1.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_11' name='rule_jsf%2B%2B_av_11'><div class='rule'><div class='id'>11<br/><span>Will</span></div></div></a><div class='headline'>Trigraphs will not be used.</div></div><p>Trigraph sequences are three-character sequences that are replaced by a corresponding single character, as follows:</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>81&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s81'>Use of trigraph.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_12' name='rule_jsf%2B%2B_av_12'><div class='rule'><div class='id'>12<br/><span>Will</span></div></div></a><div class='headline'>Digraphs will not be used.</div></div><p>Digraph sequences are two-character sequences that are replaced by a corresponding single character, as follows:</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>295&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s295'>Use of digraph.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_13' name='rule_jsf%2B%2B_av_13'><div class='rule'><div class='id'>13<br/><span>Will</span></div></div></a><div class='headline'>Multi-byte characters and wide string literals will not be used.</div></div><p>LDRA Associated JSF++ AV 13, 17, 18, 19, 21, 22, 23, 24</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>44&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s44'>Use of banned function or variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>82&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s82'>Use of wide string literal.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_14' name='rule_jsf%2B%2B_av_14'><div class='rule'><div class='id'>14<br/><span>Shall</span></div></div></a><div class='headline'>Literal suffixes shall use uppercase rather than lowercase letters.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>252&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s252'>Lower case suffix to literal number.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_418'>418</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_15' name='rule_jsf%2B%2B_av_15'><div class='rule'><div class='id'>15<br/><span>Shall</span></div></div></a><div class='headline'>Provision shall be made for run-time checking (defensive programming).</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_16' name='rule_jsf%2B%2B_av_16'><div class='rule'><div class='id'>16<br/><span>Shall</span></div></div></a><div class='headline'>Only DO-178B level A certifiable or SEAL 1 C/C++ libraries shall be used with safety- critical (i.e. SEAL 1) code.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_17' name='rule_jsf%2B%2B_av_17'><div class='rule'><div class='id'>17<br/><span>Shall</span></div></div></a><div class='headline'>The error indicator errno shall not be used.</div></div><p>LDRA Associated JSF++ AV 13, 17, 18, 19, 21, 22, 23, 24, 25</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>44&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s44'>Use of banned function or variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>130&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s130'>Included file is not permitted.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_18' name='rule_jsf%2B%2B_av_18'><div class='rule'><div class='id'>18<br/><span>Shall</span></div></div></a><div class='headline'>The macro offsetof, in library &lt;stddef.h&gt;, shall not be used.</div></div><p>LDRA Associated JSF++ AV 13, 17, 18, 19, 21, 22, 23, 24</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>44&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s44'>Use of banned function or variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_19' name='rule_jsf%2B%2B_av_19'><div class='rule'><div class='id'>19<br/><span>Shall</span></div></div></a><div class='headline'>&lt;locale.h&gt; and the setlocale function shall not be used.</div></div><p>LDRA Associated JSF++ AV 13, 17, 18, 19, 21, 22, 23, 24, 25</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>44&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s44'>Use of banned function or variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>130&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s130'>Included file is not permitted.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_20' name='rule_jsf%2B%2B_av_20'><div class='rule'><div class='id'>20<br/><span>Shall</span></div></div></a><div class='headline'>The setjmp macro and the longjmp function shall not be used.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>43&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s43'>Use of setjmp/longjmp.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_21' name='rule_jsf%2B%2B_av_21'><div class='rule'><div class='id'>21<br/><span>Shall</span></div></div></a><div class='headline'>The signal handling facilities of &lt;signal.h&gt; shall not be used.</div></div><p>LDRA Associated JSF++ AV 13, 17, 18, 19, 21, 22, 23, 24, 25</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>44&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s44'>Use of banned function or variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>130&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s130'>Included file is not permitted.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_22' name='rule_jsf%2B%2B_av_22'><div class='rule'><div class='id'>22<br/><span>Shall</span></div></div></a><div class='headline'>The input/output library &lt;stdio.h&gt; shall not be used.</div></div><p>LDRA Associated JSF++ AV 13, 17, 18, 19, 21, 22, 23, 24, 25</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>44&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s44'>Use of banned function or variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>130&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s130'>Included file is not permitted.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_23' name='rule_jsf%2B%2B_av_23'><div class='rule'><div class='id'>23<br/><span>Shall</span></div></div></a><div class='headline'>The library functions atof, atoi and atol from library &lt;stdlib.h&gt; shall not be used.</div></div><p>LDRA Associated JSF++ AV 13, 17, 18, 19, 21, 22, 23, 24</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>44&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s44'>Use of banned function or variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_24' name='rule_jsf%2B%2B_av_24'><div class='rule'><div class='id'>24<br/><span>Shall</span></div></div></a><div class='headline'>The library functions abort, exit, getenv and system from library &lt;stdlib.h&gt; shall not be used.</div></div><p>LDRA Associated JSF++ AV 13, 17, 18, 19, 21, 22, 23, 24</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>44&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s44'>Use of banned function or variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>122&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s122'>Use of abort, exit, etc.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_25' name='rule_jsf%2B%2B_av_25'><div class='rule'><div class='id'>25<br/><span>Shall</span></div></div></a><div class='headline'>The time handling functions of library &lt;time.h&gt; shall not be used.</div></div><p>LDRA Associated JSF++ AV 17, 19, 21, 22, 25</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>44&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s44'>Use of banned function or variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>130&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s130'>Included file is not permitted.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_26' name='rule_jsf%2B%2B_av_26'><div class='rule'><div class='id'>26<br/><span>Shall</span></div></div></a><div class='headline'>Only the following pre-processor directives shall be used: #ifndef, #define, #endif, #include</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>69&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s69'>#pragma used.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>255&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s255'>Found #if, #ifdef, #else, #elif .</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>307&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s307'>Use of #line, #error preprocessor directives.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_27' name='rule_jsf%2B%2B_av_27'><div class='rule'><div class='id'>27<br/><span>Will</span></div></div></a><div class='headline'>#ifndef, #define and #endif will be used to prevent multiple inclusions of the same header file. Other techniques to prevent the multiple inclusions of header files will not be used.</div></div><p>LDRA Associated JSF++ AV 27, 35</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>243&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s243'>Included file not protected with #define.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_28' name='rule_jsf%2B%2B_av_28'><div class='rule'><div class='id'>28<br/><span>Will</span></div></div></a><div class='headline'>The #ifndef and #endif pre-processor directives will only be used as defined in AV Rule 27 to prevent multiple inclusions of the same header file.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>272&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s272'>Found #ifndef (ref. removed).</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_29' name='rule_jsf%2B%2B_av_29'><div class='rule'><div class='id'>29<br/><span>Shall</span></div></div></a><div class='headline'>The #define pre-processor directive shall not be used to create inline macros. Inline functions shall be used instead.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>77&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s77'>Macro replacement list needs parentheses.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>340&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s340'>Use of function like macro.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>347&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s347'>Macro parameter list has leading space.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_30' name='rule_jsf%2B%2B_av_30'><div class='rule'><div class='id'>30<br/><span>Shall</span></div></div></a><div class='headline'>The #define pre-processor directive shall not be used to define constant values. Instead, the const qualifier shall be applied to variable declarations to specify constant values.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>200&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s200'>Define used for numeric constant.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_31' name='rule_jsf%2B%2B_av_31'><div class='rule'><div class='id'>31<br/><span>Will</span></div></div></a><div class='headline'>The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>273&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s273'>Found #define.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_32' name='rule_jsf%2B%2B_av_32'><div class='rule'><div class='id'>32<br/><span>Will</span></div></div></a><div class='headline'>The #include pre-processor directive will only be used to include header (*.h) files.</div></div><p>LDRA Associated JSF++ AV 32, 53</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>288&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s288'>Header file is not .h.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_301'>301</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_33' name='rule_jsf%2B%2B_av_33'><div class='rule'><div class='id'>33<br/><span>Shall</span></div></div></a><div class='headline'>The #include directive shall use the &lt;filename.h&gt; notation to include header files. Note that relative pathnames may also be used.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>257&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s257'>Filename in #include not in &lt; &gt; .</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_34' name='rule_jsf%2B%2B_av_34'><div class='rule'><div class='id'>34<br/><span>Should</span></div></div></a><div class='headline'>Header files should contain logically related declarations only.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_35' name='rule_jsf%2B%2B_av_35'><div class='rule'><div class='id'>35<br/><span>Will</span></div></div></a><div class='headline'>A header file will contain a mechanism that prevents multiple inclusions of itself.</div></div><p>LDRA Associated JSF++ AV 27, 35</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>243&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s243'>Included file not protected with #define.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_36' name='rule_jsf%2B%2B_av_36'><div class='rule'><div class='id'>36<br/><span>Should</span></div></div></a><div class='headline'>Compilation dependencies should be minimized when possible.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_37' name='rule_jsf%2B%2B_av_37'><div class='rule'><div class='id'>37<br/><span>Should</span></div></div></a><div class='headline'>Header (include) files should include only those header files that are required for them to successfully compile. Files that are only used by the associated .cpp file should be placed in the .cpp file--not the .h file.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_38' name='rule_jsf%2B%2B_av_38'><div class='rule'><div class='id'>38<br/><span>Should</span></div></div></a><div class='headline'>Declarations of classes that are only accessed via pointers (*) or references (&amp;) should be supplied by forward headers that contain only forward declarations.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>285&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s285'>Class definition not needed in file.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_39' name='rule_jsf%2B%2B_av_39'><div class='rule'><div class='id'>39<br/><span>Will</span></div></div></a><div class='headline'>Header files (*.h) will not contain non-const variable definitions or function definitions.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>286&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s286'>Functions defined in header file.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_238'>238</a> = 1</td>    </tr>
    <tr>    <td class='from'>287&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s287'>Variable definition in header file.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_250'>250</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_40' name='rule_jsf%2B%2B_av_40'><div class='rule'><div class='id'>40<br/><span>Shall</span></div></div></a><div class='headline'>Every implementation file shall include the header files that uniquely define the inline functions, types, and templates used.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>352&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s352'>Declaration of type not in header file.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>460&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s460'>Inline or template function not in header.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_41' name='rule_jsf%2B%2B_av_41'><div class='rule'><div class='id'>41<br/><span>Will</span></div></div></a><div class='headline'>Source lines will be kept to a length of 120 characters or less.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>189&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s189'>Input line exceeds limit.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_177'>177</a> = 120</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_42' name='rule_jsf%2B%2B_av_42'><div class='rule'><div class='id'>42<br/><span>Will</span></div></div></a><div class='headline'>Each expression-statement will be on a separate line.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>183&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s183'>No newline after semi colon.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>259&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s259'>Statement not on new line (added by Testbed).</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_43' name='rule_jsf%2B%2B_av_43'><div class='rule'><div class='id'>43<br/><span>Should</span></div></div></a><div class='headline'>Tabs should be avoided.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>187&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s187'>Tab character in source.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_44' name='rule_jsf%2B%2B_av_44'><div class='rule'><div class='id'>44<br/><span>Will</span></div></div></a><div class='headline'>All indentations will be at least two spaces and be consistent within the same source file.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>190&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s190'>{ ... } contents not indented by *** spaces.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_324'>324</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_45' name='rule_jsf%2B%2B_av_45'><div class='rule'><div class='id'>45<br/><span>Will</span></div></div></a><div class='headline'>All words in an identifier will be separated by the '_' character.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_46' name='rule_jsf%2B%2B_av_46'><div class='rule'><div class='id'>46<br/><span>Will</span></div></div></a><div class='headline'>User-specified identifiers (internal and external) will not rely on significance of more than 64 characters.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>17&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d17'>Identifier not unique within *** characters.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>355&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s355'>Variables not unique within *** characters.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>61&nbsp;X</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_x61'>Identifier match in *** chars.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_47' name='rule_jsf%2B%2B_av_47'><div class='rule'><div class='id'>47<br/><span>Will</span></div></div></a><div class='headline'>Identifiers will not begin with the underscore character '_'.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>219&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s219'>User name starts with underscore.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_412'>412</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_48' name='rule_jsf%2B%2B_av_48'><div class='rule'><div class='id'>48<br/><span>Will</span></div></div></a><div class='headline'>Identifiers will not differ by: * Only a mixture of case * The presence/absence of the underscore character * The interchange of the letter 'O', with the number '0' or the letter 'D' * The interchange of the letter 'I', with the number '1' or the letter 'l' * The interchange of the letter 'S' with the number '5' * The interchange of the letter 'Z' with the number 2 * The interchange of the letter 'n' with the letter 'h'.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>217&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s217'>Names only differ by case.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>67&nbsp;X</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_x67'>Identifier is typographically ambiguous.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_49' name='rule_jsf%2B%2B_av_49'><div class='rule'><div class='id'>49<br/><span>Will</span></div></div></a><div class='headline'>All acronyms in an identifier will be composed of uppercase letters.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_50' name='rule_jsf%2B%2B_av_50'><div class='rule'><div class='id'>50<br/><span>Will</span></div></div></a><div class='headline'>The first word of the name of a class, structure, namespace, enumeration, or type created with typedef will begin with an uppercase letter. All others letters will be lowercase.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>221&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s221'>Start of class/struct/union/enum lower case.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_204'>204</a> = 1</td>    </tr>
    <tr>    <td class='from'>317&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s317'>Typedef name starts with lower case letter.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>318&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s318'>Name letters after first not lower case.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_256'>256</a> = 1</td>    </tr>
    <tr>    <td class='from'>596&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s596'>Namespace name starts with lower case letter.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_51' name='rule_jsf%2B%2B_av_51'><div class='rule'><div class='id'>51<br/><span>Will</span></div></div></a><div class='headline'>All letters contained in function and variable names will be composed entirely of lowercase letters.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>312&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s312'>Function name is not all lower case.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>313&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s313'>Variable name is not all lower case.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_52' name='rule_jsf%2B%2B_av_52'><div class='rule'><div class='id'>52<br/><span>Shall</span></div></div></a><div class='headline'>Identifiers for constant and enumerator values shall be lowercase.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>224&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s224'>Start of enumeration is upper case.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>349&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s349'>Enumeration is not all lower case.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>350&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s350'>Const variable is not all lower case.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_53' name='rule_jsf%2B%2B_av_53'><div class='rule'><div class='id'>53<br/><span>Will</span></div></div></a><div class='headline'>Header files will always have a file name extension of &quot;.h&quot;.</div></div><p>LDRA Associated JSF++ AV 32, 53</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>288&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s288'>Header file is not .h.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_301'>301</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_53.1' name='rule_jsf%2B%2B_av_53.1'><div class='rule'><div class='id'>53.1<br/><span>Shall</span></div></div></a><div class='headline'>The following character sequences shall not appear in header file names: `, \, /*, //, or &quot;.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>100&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s100'>#include filename is non conformant.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_120'>120</a> = '\&#44; (Default), <a href='standard_flags.htm#flag_331'>331</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_54' name='rule_jsf%2B%2B_av_54'><div class='rule'><div class='id'>54<br/><span>Will</span></div></div></a><div class='headline'>Implementation files will always have a file name extension of &quot;.cpp&quot;.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>300&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s300'>Filename extension is not .cpp.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_55' name='rule_jsf%2B%2B_av_55'><div class='rule'><div class='id'>55<br/><span>Should</span></div></div></a><div class='headline'>The name of a header file should reflect the logical entity for which it provides declarations.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>289&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s289'>Header file name does not include class name.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_56' name='rule_jsf%2B%2B_av_56'><div class='rule'><div class='id'>56<br/><span>Should</span></div></div></a><div class='headline'>The name of an implementation file should reflect the logical entity for which it provides definitions and have a &quot;.cpp&quot; extension (this name will normally be identical to the header file that provides the corresponding declarations.) At times, more than one .cpp file for a given logical entity will be required. In these cases, a suffix should be appended to reflect a logical differentiation.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>290&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s290'>File name does not contain defined class name.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>300&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s300'>Filename extension is not .cpp.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_57' name='rule_jsf%2B%2B_av_57'><div class='rule'><div class='id'>57<br/><span>Will</span></div></div></a><div class='headline'>The public, protected, and private sections of a class will be declared in that order (the public section is declared before the protected section which is declared before the private section).</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>197&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s197'>Access specifiers in invalid order.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_210'>210</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_58' name='rule_jsf%2B%2B_av_58'><div class='rule'><div class='id'>58<br/><span>Will</span></div></div></a><div class='headline'>When declaring and defining functions with more than two parameters, the leading parenthesis and the first argument will be written on the same line as the function name. Each additional argument will be written on a separate line (with the closing parenthesis directly after the last argument).</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>291&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s291'>First parameter not on same line as function.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>492&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s492'>Parameter not declared on new line.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_220'>220</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_59' name='rule_jsf%2B%2B_av_59'><div class='rule'><div class='id'>59<br/><span>Shall</span></div></div></a><div class='headline'>The statements forming the body of an if, else if, else, while, do ... while or for statement shall always be enclosed in braces, even if the braces form an empty block.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>11&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s11'>No brackets to loop body (added by Testbed).</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>12&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s12'>No brackets to then/else (added by Testbed).</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : tbend F</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_60' name='rule_jsf%2B%2B_av_60'><div class='rule'><div class='id'>60<br/><span>Will</span></div></div></a><div class='headline'>Braces (&quot;{}&quot;) which enclose a block will be placed in the same column, on separate lines directly before and after the block.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>301&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s301'>} not aligned vertically below {.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_61' name='rule_jsf%2B%2B_av_61'><div class='rule'><div class='id'>61<br/><span>Will</span></div></div></a><div class='headline'>Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments (if necessary).</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>188&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s188'>{ or } not on line by itself.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_62' name='rule_jsf%2B%2B_av_62'><div class='rule'><div class='id'>62<br/><span>Will</span></div></div></a><div class='headline'>The dereference operator '*' and the address-of operator '&amp; ' will be directly connected with the type-specifier.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>309&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s309'>* or &amp; not attached to type in declaration.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_63' name='rule_jsf%2B%2B_av_63'><div class='rule'><div class='id'>63<br/><span>Will</span></div></div></a><div class='headline'>Spaces will not be used around '.' or '-&gt; ', nor between unary operators and operands.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>184&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s184'>Spaces round -&gt; or [] operators.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_240'>240</a> = 1</td>    </tr>
    <tr>    <td class='from'>185&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s185'>Space between unary operator and operand.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>315&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s315'>Blank before/after . operator.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_64' name='rule_jsf%2B%2B_av_64'><div class='rule'><div class='id'>64<br/><span>Should</span></div></div></a><div class='headline'>A class interface should be complete and minimal.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_65' name='rule_jsf%2B%2B_av_65'><div class='rule'><div class='id'>65<br/><span>Should</span></div></div></a><div class='headline'>A structure should be used to model an entity that does not require an invariant.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_66' name='rule_jsf%2B%2B_av_66'><div class='rule'><div class='id'>66<br/><span>Should</span></div></div></a><div class='headline'>A class should be used to model an entity that maintains an invariant.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_67' name='rule_jsf%2B%2B_av_67'><div class='rule'><div class='id'>67<br/><span>Should</span></div></div></a><div class='headline'>Public and protected data should only be used in structs--not classes.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>202&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s202'>Class data is not explicitly private.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_68' name='rule_jsf%2B%2B_av_68'><div class='rule'><div class='id'>68<br/><span>Shall</span></div></div></a><div class='headline'>Unneeded implicitly generated member functions shall be explicitly disallowed.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_69' name='rule_jsf%2B%2B_av_69'><div class='rule'><div class='id'>69<br/><span>Will</span></div></div></a><div class='headline'>A member function that does not affect the state of an object (its instance variables) will be declared const. Member functions should be const by default. Only when there is a clear, explicit reason should the const modifier on member functions be omitted.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>46&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d46'>Member function may be declared const.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_70' name='rule_jsf%2B%2B_av_70'><div class='rule'><div class='id'>70<br/><span>Will</span></div></div></a><div class='headline'>A class will have friends only when a function or object requires access to the private elements of the class, but is unable to be a member of the class for logical or efficiency reasons.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_70.1' name='rule_jsf%2B%2B_av_70.1'><div class='rule'><div class='id'>70.1<br/><span>Shall</span></div></div></a><div class='headline'>An object shall not be improperly used before its lifetime begins or after its lifetime ends.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_71' name='rule_jsf%2B%2B_av_71'><div class='rule'><div class='id'>71<br/><span>Shall</span></div></div></a><div class='headline'>Calls to an externally visible operation of an object, other than its constructors, shall not be allowed until the object has been fully initialized.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_71.1' name='rule_jsf%2B%2B_av_71.1'><div class='rule'><div class='id'>71.1<br/><span>Shall</span></div></div></a><div class='headline'>A class's virtual functions shall not be invoked from its destructor or any of its constructors.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>92&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d92'>C'tor/d'tor calls virtual function.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>467&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s467'>Virtual member called in ctor/dtor.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_72' name='rule_jsf%2B%2B_av_72'><div class='rule'><div class='id'>72<br/><span>Should</span></div></div></a><div class='headline'>The invariant for a class should be: * a part of the postcondition of every class constructor, * a part of the precondition of the class destructor (if any), * a part of the precondition and postcondition of every other publicly accessible operation.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_73' name='rule_jsf%2B%2B_av_73'><div class='rule'><div class='id'>73<br/><span>Shall</span></div></div></a><div class='headline'>Unnecessary default constructors shall not be defined.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_74' name='rule_jsf%2B%2B_av_74'><div class='rule'><div class='id'>74<br/><span>Will</span></div></div></a><div class='headline'>Initialization of nonstatic class members will be performed through the member initialization list rather than through assignment in the body of a constructor.</div></div><p>LDRA Associated JSF++ AV 74, 77</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>319&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s319'>Constructor has insufficient initialisers.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_237'>237</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_75' name='rule_jsf%2B%2B_av_75'><div class='rule'><div class='id'>75<br/><span>Shall</span></div></div></a><div class='headline'>Members of the initialization list shall be listed in the order in which they are declared in the class.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>206&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s206'>Class initialiser out of order.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_76' name='rule_jsf%2B%2B_av_76'><div class='rule'><div class='id'>76<br/><span>Shall</span></div></div></a><div class='headline'>A copy constructor and an assignment operator shall be declared for classes that contain pointers to data items or nontrivial destructors.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>233&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s233'>No copy constructor for class with pointers.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>234&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s234'>No assignment operator for class with pointers.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>469&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s469'>No copy constructor for complex destructor.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>470&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s470'>No assignment operator for complex destrtor.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_77' name='rule_jsf%2B%2B_av_77'><div class='rule'><div class='id'>77<br/><span>Shall</span></div></div></a><div class='headline'>A copy constructor shall copy all data members and bases that affect the class invariant (a data element representing a cache, for example, would not need to be copied).</div></div><p>LDRA Associated JSF++ AV 74, 77</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>319&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s319'>Constructor has insufficient initialisers.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_237'>237</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_77.1' name='rule_jsf%2B%2B_av_77.1'><div class='rule'><div class='id'>77.1<br/><span>Shall</span></div></div></a><div class='headline'>The definition of a member function shall not contain default arguments that produce a signature identical to that of the implicitly-declared copy constructor for the corresponding class/structure.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>499&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s499'>Too many default parameters in copy ctor.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_78' name='rule_jsf%2B%2B_av_78'><div class='rule'><div class='id'>78<br/><span>Shall</span></div></div></a><div class='headline'>All base classes with a virtual function shall define a virtual destructor.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>303&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s303'>Virtual class members need virtual destructor.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_292'>292</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_79' name='rule_jsf%2B%2B_av_79'><div class='rule'><div class='id'>79<br/><span>Shall</span></div></div></a><div class='headline'>All resources acquired by a class shall be released by the class's destructor.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_80' name='rule_jsf%2B%2B_av_80'><div class='rule'><div class='id'>80<br/><span>Will</span></div></div></a><div class='headline'>The default copy and assignment operators will be used for classes when those operators offer reasonable semantics.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_81' name='rule_jsf%2B%2B_av_81'><div class='rule'><div class='id'>81<br/><span>Shall</span></div></div></a><div class='headline'>The assignment operator shall handle self-assignment correctly.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_82' name='rule_jsf%2B%2B_av_82'><div class='rule'><div class='id'>82<br/><span>Shall</span></div></div></a><div class='headline'>An assignment operator shall return a reference to *this .</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>254&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s254'>Operator = doesn't return reference to *this.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_83' name='rule_jsf%2B%2B_av_83'><div class='rule'><div class='id'>83<br/><span>Shall</span></div></div></a><div class='headline'>An assignment operator shall assign all data members and bases that affect the class invariant (a data element representing a cache, for example, would not need to be copied).</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>52&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d52'>Member(s) not assigned in = operator.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_262'>262</a> = 1</td>    </tr>
    <tr>    <td class='from'>53&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d53'>Attempt to use uninitialised pointer.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_84' name='rule_jsf%2B%2B_av_84'><div class='rule'><div class='id'>84<br/><span>Will</span></div></div></a><div class='headline'>Operator overloading will be used sparingly and in a conventional manner.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_85' name='rule_jsf%2B%2B_av_85'><div class='rule'><div class='id'>85<br/><span>Will</span></div></div></a><div class='headline'>When two operators are opposites (such as == and !=), both will be defined and one will be defined in terms of the other.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_86' name='rule_jsf%2B%2B_av_86'><div class='rule'><div class='id'>86<br/><span>Should</span></div></div></a><div class='headline'>Concrete types should be used to represent simple independent concepts.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_87' name='rule_jsf%2B%2B_av_87'><div class='rule'><div class='id'>87<br/><span>Should</span></div></div></a><div class='headline'>Hierarchies should be based on abstract classes.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_88' name='rule_jsf%2B%2B_av_88'><div class='rule'><div class='id'>88<br/><span>Shall</span></div></div></a><div class='headline'>Multiple inheritance shall only be allowed in the following restricted form: n interfaces plus m private implementations, plus at most one protected implementation.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>283&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s283'>Multiple direct inheritance found.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_378'>378</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_88.1' name='rule_jsf%2B%2B_av_88.1'><div class='rule'><div class='id'>88.1<br/><span>Shall</span></div></div></a><div class='headline'>A stateful virtual base shall be explicitly declared in each derived class that accesses it.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_89' name='rule_jsf%2B%2B_av_89'><div class='rule'><div class='id'>89<br/><span>Shall</span></div></div></a><div class='headline'>A base class shall not be both virtual and non-virtual in the same hierarchy.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>357&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s357'>Base class is mixed virtual and non virtual.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_90' name='rule_jsf%2B%2B_av_90'><div class='rule'><div class='id'>90<br/><span>Should</span></div></div></a><div class='headline'>Heavily used interfaces should be minimal, general and abstract.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_91' name='rule_jsf%2B%2B_av_91'><div class='rule'><div class='id'>91<br/><span>Will</span></div></div></a><div class='headline'>Public inheritance will be used to implement &quot;is-a&quot; relationships.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_92' name='rule_jsf%2B%2B_av_92'><div class='rule'><div class='id'>92<br/><span>Will</span></div></div></a><div class='headline'>A subtype (publicly derived classes) will conform to the following guidelines with respect to all classes involved in the polymorphic assignment of different subclass instances to the same variable or parameter during the execution of the system: * Preconditions of derived methods must be at least as weak as the preconditions of the methods they override. * Postconditions of derived methods must be at least as strong as the postconditions of the methods they override. In other words, subclass methods must expect less and deliver more than the base class methods they override. This rule implies that subtypes will conform to the Liskov Substitution Principle.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_93' name='rule_jsf%2B%2B_av_93'><div class='rule'><div class='id'>93<br/><span>Will</span></div></div></a><div class='headline'>&quot;has-a&quot; or &quot;is-implemented-in-terms-of&quot; relationships will be modeled through membership or non-public inheritance.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_94' name='rule_jsf%2B%2B_av_94'><div class='rule'><div class='id'>94<br/><span>Shall</span></div></div></a><div class='headline'>An inherited nonvirtual function shall not be redefined in a derived class.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>262&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s262'>Non virtual function redefined.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_379'>379</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_95' name='rule_jsf%2B%2B_av_95'><div class='rule'><div class='id'>95<br/><span>Shall</span></div></div></a><div class='headline'>An inherited default parameter shall never be redefined.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>364&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s364'>Inherited default parameter redefined.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_385'>385</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_96' name='rule_jsf%2B%2B_av_96'><div class='rule'><div class='id'>96<br/><span>Shall</span></div></div></a><div class='headline'>Arrays shall not be treated polymorphically.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_97' name='rule_jsf%2B%2B_av_97'><div class='rule'><div class='id'>97<br/><span>Shall</span></div></div></a><div class='headline'>Arrays shall not be used in interfaces. Instead, the Array class should be used.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>310&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s310'>Array parameter found.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_285'>285</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>459&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s459'>Array passed as actual parameter.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_443'>443</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_97.1' name='rule_jsf%2B%2B_av_97.1'><div class='rule'><div class='id'>97.1<br/><span>Shall</span></div></div></a><div class='headline'>Neither operand of an equality operator (== or !=) shall be a pointer to a virtual member function.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_98' name='rule_jsf%2B%2B_av_98'><div class='rule'><div class='id'>98<br/><span>Should</span></div></div></a><div class='headline'>Every nonlocal name, except main(), should be placed in some namespace.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>311&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s311'>Non local declaration not in a namespace.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>362&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s362'>main program in a namespace.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_99' name='rule_jsf%2B%2B_av_99'><div class='rule'><div class='id'>99<br/><span>Will</span></div></div></a><div class='headline'>Namespaces will not be nested more than two levels deep.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>294&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s294'>Namespace nested more than *** deep.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_100' name='rule_jsf%2B%2B_av_100'><div class='rule'><div class='id'>100<br/><span>Should</span></div></div></a><div class='headline'>Elements from a namespace should be selected as follows: * using declaration or explicit qualification for few (approximately five) names, * using directive for many names.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_101' name='rule_jsf%2B%2B_av_101'><div class='rule'><div class='id'>101<br/><span>Shall</span></div></div></a><div class='headline'>Templates shall be reviewed as follows: 1. with respect to the template in isolation considering assumptions or requirements placed on its arguments. 2. with respect to all functions instantiated by actual arguments.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_102' name='rule_jsf%2B%2B_av_102'><div class='rule'><div class='id'>102<br/><span>Shall</span></div></div></a><div class='headline'>Template tests shall be created to cover all actual template instantiations.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_103' name='rule_jsf%2B%2B_av_103'><div class='rule'><div class='id'>103<br/><span>Should</span></div></div></a><div class='headline'>Constraint checks should be applied to template arguments.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_104' name='rule_jsf%2B%2B_av_104'><div class='rule'><div class='id'>104<br/><span>Shall</span></div></div></a><div class='headline'>A template specialization shall be declared before its use.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_105' name='rule_jsf%2B%2B_av_105'><div class='rule'><div class='id'>105<br/><span>Should</span></div></div></a><div class='headline'>A template definition's dependence on its instantiation contexts should be minimized.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_106' name='rule_jsf%2B%2B_av_106'><div class='rule'><div class='id'>106<br/><span>Should</span></div></div></a><div class='headline'>Specializations for pointer types should be made where appropriate.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_107' name='rule_jsf%2B%2B_av_107'><div class='rule'><div class='id'>107<br/><span>Shall</span></div></div></a><div class='headline'>Functions shall always be declared at file scope.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>296&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s296'>Function declared at block scope.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_108' name='rule_jsf%2B%2B_av_108'><div class='rule'><div class='id'>108<br/><span>Shall</span></div></div></a><div class='headline'>Functions with variable numbers of arguments shall not be used.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>41&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s41'>Ellipsis used in procedure parameter list.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_109' name='rule_jsf%2B%2B_av_109'><div class='rule'><div class='id'>109<br/><span>Should</span></div></div></a><div class='headline'>A function definition should not be placed in a class specification unless the function is intended to be inlined.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_110' name='rule_jsf%2B%2B_av_110'><div class='rule'><div class='id'>110<br/><span>Will</span></div></div></a><div class='headline'>Functions with more than 7 arguments will not be used.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>18&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s18'>More than *** parameters in procedure.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_209'>209</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_111' name='rule_jsf%2B%2B_av_111'><div class='rule'><div class='id'>111<br/><span>Shall</span></div></div></a><div class='headline'>A function shall not return a pointer or reference to a non-static local object.</div></div><p>LDRA Associated JSF++ AV 111, 173</p>
<p>Functions that return pointers to data created by allocators will need to be identified in cpptbend.dat as described in <a href='standards.htm#standard_s71'>S71</a>.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>42&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d42'>Local pointer returned in function result.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>71&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s71'>Pointer assignment to wider scope.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_222'>222</a> = 1</td>    </tr>
    <tr>    <td class='from'>564&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s564'>Reference assignment to wider scope.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_112' name='rule_jsf%2B%2B_av_112'><div class='rule'><div class='id'>112<br/><span>Should</span></div></div></a><div class='headline'>Function return values should not obscure resource ownership.</div></div><p>Not Automatically Checkable.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>42&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d42'>Local pointer returned in function result.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>503&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s503'>Function returns local resources.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>519&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s519'>Return of reference parameter.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_113' name='rule_jsf%2B%2B_av_113'><div class='rule'><div class='id'>113<br/><span>Will</span></div></div></a><div class='headline'>Functions will have a single exit point.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>7&nbsp;C</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_c7'>Procedure has more than one exit point.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_114' name='rule_jsf%2B%2B_av_114'><div class='rule'><div class='id'>114<br/><span>Shall</span></div></div></a><div class='headline'>All exit points of value-returning functions shall be through return statements.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>2&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d2'>Function does not return a value on all paths.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>36&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s36'>Function has no return statement.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>66&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s66'>Function with empty return expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_115' name='rule_jsf%2B%2B_av_115'><div class='rule'><div class='id'>115<br/><span>Will</span></div></div></a><div class='headline'>If a function returns error information, then that error information will be tested.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>91&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d91'>Function return value potentially unused.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_116' name='rule_jsf%2B%2B_av_116'><div class='rule'><div class='id'>116<br/><span>Should</span></div></div></a><div class='headline'>Small, concrete-type arguments (two or three words in size) should be passed by value if changes made to formal parameters should not be reflected in the calling function.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_117' name='rule_jsf%2B%2B_av_117'><div class='rule'><div class='id'>117<br/><span>Should</span></div></div></a><div class='headline'>Arguments should be passed by reference if NULL values are not possible:</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_117.1' name='rule_jsf%2B%2B_av_117.1'><div class='rule'><div class='id'>117.1<br/><span>Should</span></div></div></a><div class='headline'>An object should be passed as const T&amp; if the function should not change the value of the object.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_117.2' name='rule_jsf%2B%2B_av_117.2'><div class='rule'><div class='id'>117.2<br/><span>Should</span></div></div></a><div class='headline'>An object should be passed as T&amp; if the function may change the value of the object.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_118' name='rule_jsf%2B%2B_av_118'><div class='rule'><div class='id'>118<br/><span>Should</span></div></div></a><div class='headline'>Arguments should be passed via pointers if NULL values are possible:</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_118.1' name='rule_jsf%2B%2B_av_118.1'><div class='rule'><div class='id'>118.1<br/><span>Should</span></div></div></a><div class='headline'>An object should be passed as const T* if its value should not be modified.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_118.2' name='rule_jsf%2B%2B_av_118.2'><div class='rule'><div class='id'>118.2<br/><span>Should</span></div></div></a><div class='headline'>An object should be passed as T* if its value may be modified.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_119' name='rule_jsf%2B%2B_av_119'><div class='rule'><div class='id'>119<br/><span>Shall</span></div></div></a><div class='headline'>Functions shall not call themselves, either directly or indirectly (i.e. recursion shall not be allowed).</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>6&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d6'>Recursion in procedure calls found.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>1&nbsp;U</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_u1'>Inter-file recursion found.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_120' name='rule_jsf%2B%2B_av_120'><div class='rule'><div class='id'>120<br/><span>Should</span></div></div></a><div class='headline'>Overloaded operations or methods should form families that use the same semantics, share the same name, have the same purpose, and that are differentiated by formal parameters.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_121' name='rule_jsf%2B%2B_av_121'><div class='rule'><div class='id'>121<br/><span>Should</span></div></div></a><div class='headline'>Only functions with 1 or 2 statements should be considered candidates for inline functions.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>353&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s353'>Inline member has more than *** statements.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_290'>290</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_122' name='rule_jsf%2B%2B_av_122'><div class='rule'><div class='id'>122<br/><span>Should</span></div></div></a><div class='headline'>Trivial accessor and mutator functions should be inlined.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_123' name='rule_jsf%2B%2B_av_123'><div class='rule'><div class='id'>123<br/><span>Should</span></div></div></a><div class='headline'>The number of accessor and mutator functions should be minimized.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_124' name='rule_jsf%2B%2B_av_124'><div class='rule'><div class='id'>124<br/><span>Should</span></div></div></a><div class='headline'>Trivial forwarding functions should be inlined.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_125' name='rule_jsf%2B%2B_av_125'><div class='rule'><div class='id'>125<br/><span>Should</span></div></div></a><div class='headline'>Unnecessary temporary objects should be avoided.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_126' name='rule_jsf%2B%2B_av_126'><div class='rule'><div class='id'>126<br/><span>Shall</span></div></div></a><div class='headline'>Only valid C++ style comments (//) shall be used.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>207&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s207'>Use of old style /* comments in C++.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_127' name='rule_jsf%2B%2B_av_127'><div class='rule'><div class='id'>127<br/><span>Shall</span></div></div></a><div class='headline'>Code that is not used (commented out) shall be deleted.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>302&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s302'>Comment possibly contains code.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_128' name='rule_jsf%2B%2B_av_128'><div class='rule'><div class='id'>128<br/><span>Will</span></div></div></a><div class='headline'>Comments that document actions or sources (e.g. tables, figures, paragraphs, etc.) outside of the file being documented will not be allowed.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_129' name='rule_jsf%2B%2B_av_129'><div class='rule'><div class='id'>129<br/><span>Should</span></div></div></a><div class='headline'>Comments in header files should describe the externally visible behavior of the functions or classes being documented.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_130' name='rule_jsf%2B%2B_av_130'><div class='rule'><div class='id'>130<br/><span>Should</span></div></div></a><div class='headline'>The purpose of every line of executable code should be explained by a comment, although one comment may describe more than one line of code.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_131' name='rule_jsf%2B%2B_av_131'><div class='rule'><div class='id'>131<br/><span>Should</span></div></div></a><div class='headline'>One should avoid stating in comments what is better stated in code (i.e. do not simply repeat what is in the code).</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_132' name='rule_jsf%2B%2B_av_132'><div class='rule'><div class='id'>132<br/><span>Will</span></div></div></a><div class='headline'>Each variable declaration, typedef, enumeration value, and structure member will be commented.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_133' name='rule_jsf%2B%2B_av_133'><div class='rule'><div class='id'>133<br/><span>Will</span></div></div></a><div class='headline'>Every source file will be documented with an introductory comment that provides information on the file name, its contents, and any program-required information (e.g. legal statements, copyright information, etc).</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_134' name='rule_jsf%2B%2B_av_134'><div class='rule'><div class='id'>134<br/><span>Should</span></div></div></a><div class='headline'>Assumptions (limitations) made by functions should be documented in the function's preamble.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_135' name='rule_jsf%2B%2B_av_135'><div class='rule'><div class='id'>135<br/><span>Shall</span></div></div></a><div class='headline'>Identifiers in an inner scope shall not use the same name as an identifier in an outer scope, and therefore hide that identifier.</div></div><p>LDRA Associated JSF++ AV 135, 138</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>131&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s131'>Name reused in inner scope.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>358&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s358'>Class member name reused.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_246'>246</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_136' name='rule_jsf%2B%2B_av_136'><div class='rule'><div class='id'>136<br/><span>Should</span></div></div></a><div class='headline'>Declarations should be at the smallest feasible scope.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_137' name='rule_jsf%2B%2B_av_137'><div class='rule'><div class='id'>137<br/><span>Should</span></div></div></a><div class='headline'>All declarations at file scope should be static where possible.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_138' name='rule_jsf%2B%2B_av_138'><div class='rule'><div class='id'>138<br/><span>Shall</span></div></div></a><div class='headline'>Identifiers shall not simultaneously have both internal and external linkage in the same translation unit.</div></div><p>LDRA Associated JSF++ AV 135, 138</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>131&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s131'>Name reused in inner scope.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>461&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s461'>Identifier with ambiguous linkage.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_139' name='rule_jsf%2B%2B_av_139'><div class='rule'><div class='id'>139<br/><span>Will</span></div></div></a><div class='headline'>External objects will not be declared in more than one file.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>26&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d26'>Variable should be defined once in only one file.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>354&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s354'>Extern declaration is not in header file.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_140' name='rule_jsf%2B%2B_av_140'><div class='rule'><div class='id'>140<br/><span>Shall</span></div></div></a><div class='headline'>The register storage class specifier shall not be used.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>84&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s84'>Register variable declared.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_141' name='rule_jsf%2B%2B_av_141'><div class='rule'><div class='id'>141<br/><span>Will</span></div></div></a><div class='headline'>A class, structure, or enumeration will not be declared in the definition of its type.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>167&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s167'>Class variable declared in class definition.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>351&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s351'>Type declaration with variable definition.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_142' name='rule_jsf%2B%2B_av_142'><div class='rule'><div class='id'>142<br/><span>Shall</span></div></div></a><div class='headline'>All variables shall be initialized before use.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>69&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d69'>UR anomaly, variable used before assignment.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>57&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d57'>Global not initialised at declaration.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_143' name='rule_jsf%2B%2B_av_143'><div class='rule'><div class='id'>143<br/><span>Will</span></div></div></a><div class='headline'>Variables will not be introduced until they can be initialized with meaningful values.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_144' name='rule_jsf%2B%2B_av_144'><div class='rule'><div class='id'>144<br/><span>Shall</span></div></div></a><div class='headline'>Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>105&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s105'>Initialisation brace { } fault.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_145' name='rule_jsf%2B%2B_av_145'><div class='rule'><div class='id'>145<br/><span>Shall</span></div></div></a><div class='headline'>In an enumerator list, the '=' construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>85&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s85'>Incomplete initialisation of enumerator.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_377'>377</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_146' name='rule_jsf%2B%2B_av_146'><div class='rule'><div class='id'>146<br/><span>Shall</span></div></div></a><div class='headline'>Floating point implementations shall comply with a defined floating point standard. The standard that will be used is the ANSI/IEEE Std 754.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_147' name='rule_jsf%2B%2B_av_147'><div class='rule'><div class='id'>147<br/><span>Shall</span></div></div></a><div class='headline'>The underlying bit representations of floating point numbers shall not be used in any way by the programmer.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_148' name='rule_jsf%2B%2B_av_148'><div class='rule'><div class='id'>148<br/><span>Shall</span></div></div></a><div class='headline'>Enumeration types shall be used instead of integer types (and constants) to select from a limited series of choices.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_149' name='rule_jsf%2B%2B_av_149'><div class='rule'><div class='id'>149<br/><span>Shall</span></div></div></a><div class='headline'>Octal constants (other than zero) shall not be used.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>83&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s83'>Octal number found.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_150' name='rule_jsf%2B%2B_av_150'><div class='rule'><div class='id'>150<br/><span>Will</span></div></div></a><div class='headline'>Hexadecimal constants will be represented using all uppercase letters.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>267&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s267'>Hexadecimal number with lower case char.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_208'>208</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_151' name='rule_jsf%2B%2B_av_151'><div class='rule'><div class='id'>151<br/><span>Will</span></div></div></a><div class='headline'>Numeric values in code will not be used; symbolic values will be used instead.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>201&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s201'>Use of numeric literal in expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_217'>217</a> = 1, <a href='standard_flags.htm#flag_163'>163</a> = 1 (Default), <a href='standard_flags.htm#flag_237'>237</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>604&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s604'>Use of numeric literal as array bound/subscript.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_217'>217</a> = 1, <a href='standard_flags.htm#flag_163'>163</a> = 1 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_151.1' name='rule_jsf%2B%2B_av_151.1'><div class='rule'><div class='id'>151.1<br/><span>Shall</span></div></div></a><div class='headline'>A string literal shall not be modified. Note that strictly conforming compilers should catch violations, but many do not.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>157&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s157'>Modification of string literal.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_438'>438</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_152' name='rule_jsf%2B%2B_av_152'><div class='rule'><div class='id'>152<br/><span>Shall</span></div></div></a><div class='headline'>Multiple variable declarations shall not be allowed on the same line.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>177&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s177'>Identifier not declared on new line.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_220'>220</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_153' name='rule_jsf%2B%2B_av_153'><div class='rule'><div class='id'>153<br/><span>Shall</span></div></div></a><div class='headline'>Unions shall not be used.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>74&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s74'>Union declared.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_154' name='rule_jsf%2B%2B_av_154'><div class='rule'><div class='id'>154<br/><span>Shall</span></div></div></a><div class='headline'>Bit-fields shall have explicitly unsigned integral or enumeration types only.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>316&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s316'>Bit field is not unsigned integral.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_234'>234</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>346&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s346'>Bit field is not unsigned integral or enum type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_234'>234</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_155' name='rule_jsf%2B%2B_av_155'><div class='rule'><div class='id'>155<br/><span>Will</span></div></div></a><div class='headline'>Bit-fields will not be used to pack data into a word for the sole purpose of saving space.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_156' name='rule_jsf%2B%2B_av_156'><div class='rule'><div class='id'>156<br/><span>Shall</span></div></div></a><div class='headline'>All the members of a structure (or class) shall be named and shall only be accessed via their names.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>138&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s138'>Anonymous bit field used in structure.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_248'>248</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_157' name='rule_jsf%2B%2B_av_157'><div class='rule'><div class='id'>157<br/><span>Shall</span></div></div></a><div class='headline'>The right hand operand of a &amp;&amp; or || operator shall not contain side effects.</div></div><p>LDRA Associated JSF++ AV 157, 204</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>35&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d35'>Expression has side effects.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>1&nbsp;Q</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_q1'>Call has execution order dependant side effects.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>133&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s133'>Assignment operator in RHS of &amp;&amp; or ||.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>406&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s406'>Use of ++ or -- on RHS of &amp;&amp; or || operator.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>408&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s408'>Volatile variable accessed on RHS of &amp;&amp; or ||.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_158' name='rule_jsf%2B%2B_av_158'><div class='rule'><div class='id'>158<br/><span>Shall</span></div></div></a><div class='headline'>The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators.</div></div><p>LDRA Associated JSF++ AV 158, 213</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>49&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s49'>Logical conjunctions need brackets.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_206'>206</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_159' name='rule_jsf%2B%2B_av_159'><div class='rule'><div class='id'>159<br/><span>Shall</span></div></div></a><div class='headline'>Operators ||, &amp;&amp;, and unary &amp; shall not be overloaded.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>211&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s211'>Overloaded &amp;&amp;, || or comma.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_160' name='rule_jsf%2B%2B_av_160'><div class='rule'><div class='id'>160<br/><span>Shall</span></div></div></a><div class='headline'>An assignment expression shall be used only as the expression in an expression statement.</div></div><p>LDRA Associated JSF++ AV 160, 204</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>9&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s9'>Assignment operation in expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_259'>259</a> = 1, <a href='standard_flags.htm#flag_266'>266</a> = 1</td>    </tr>
    <tr>    <td class='from'>132&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s132'>Assignment operator in boolean expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : 247 = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_162' name='rule_jsf%2B%2B_av_162'><div class='rule'><div class='id'>162<br/><span>Shall</span></div></div></a><div class='headline'>Signed and unsigned values shall not be mixed in arithmetic or comparison operations.</div></div><p>LDRA Associated JSF++ AV 162, 180, 184</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>96&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s96'>Use of mixed mode arithmetic.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : 267 = 1</td>    </tr>
    <tr>    <td class='from'>107&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s107'>Type mismatch in ternary expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>434&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s434'>Signed/unsigned conversion without cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_358'>358</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_163' name='rule_jsf%2B%2B_av_163'><div class='rule'><div class='id'>163<br/><span>Shall</span></div></div></a><div class='headline'>Unsigned arithmetic shall not be used.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>304&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s304'>Arithmetic performed on unsigned values.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_164' name='rule_jsf%2B%2B_av_164'><div class='rule'><div class='id'>164<br/><span>Shall</span></div></div></a><div class='headline'>The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the left-hand operand (inclusive).</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>51&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s51'>Shifting value too far.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>403&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s403'>Negative (or potentially negative) shift.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_164.1' name='rule_jsf%2B%2B_av_164.1'><div class='rule'><div class='id'>164.1<br/><span>Shall</span></div></div></a><div class='headline'>The left-hand operand of a right-shift operator shall not have a negative value.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_165' name='rule_jsf%2B%2B_av_165'><div class='rule'><div class='id'>165<br/><span>Shall</span></div></div></a><div class='headline'>The unary minus operator shall not be applied to an unsigned expression.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>52&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s52'>Unsigned expression negated.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_166' name='rule_jsf%2B%2B_av_166'><div class='rule'><div class='id'>166<br/><span>Will</span></div></div></a><div class='headline'>The sizeof operator will not be used on expressions that contain side effects.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>54&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s54'>Sizeof operator with side effects.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_167' name='rule_jsf%2B%2B_av_167'><div class='rule'><div class='id'>167<br/><span>Shall</span></div></div></a><div class='headline'>The implementation of integer division in the chosen compiler shall be determined, documented and taken into account.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_168' name='rule_jsf%2B%2B_av_168'><div class='rule'><div class='id'>168<br/><span>Shall</span></div></div></a><div class='headline'>The comma operator shall not be used.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>53&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s53'>Use of comma operator.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_263'>263</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_169' name='rule_jsf%2B%2B_av_169'><div class='rule'><div class='id'>169<br/><span>Should</span></div></div></a><div class='headline'>Pointers to pointers should be avoided when possible.</div></div><p>LDRA Associated JSF++ AV 169, 170</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>80&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s80'>Pointer indirection exceeds 2 levels.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>356&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s356'>Pointer to pointer declared.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_170' name='rule_jsf%2B%2B_av_170'><div class='rule'><div class='id'>170<br/><span>Shall</span></div></div></a><div class='headline'>More than 2 levels of pointer indirection shall not be used.</div></div><p>LDRA Associated JSF++ AV 169, 170</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>80&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s80'>Pointer indirection exceeds 2 levels.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_171' name='rule_jsf%2B%2B_av_171'><div class='rule'><div class='id'>171<br/><span>Shall</span></div></div></a><div class='headline'>Relational operators shall not be applied to pointer types except where both operands are of the same type and point to: * the same object, * the same function, * members of the same object, or * elements of the same array (including one past the end of the same array). Note that if either operand is null, then both shall be null. Also, &quot;members of the same object&quot; should not be construed to include base class subobjects.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>70&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s70'>Logical comparison of pointers.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_173' name='rule_jsf%2B%2B_av_173'><div class='rule'><div class='id'>173<br/><span>Shall</span></div></div></a><div class='headline'>The address of an object with automatic storage shall not be assigned to an object which persists after the object has ceased to exist.</div></div><p>LDRA Associated JSF++ AV 111, 173</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>71&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s71'>Pointer assignment to wider scope.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_222'>222</a> = 1</td>    </tr>
    <tr>    <td class='from'>564&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s564'>Reference assignment to wider scope.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_174' name='rule_jsf%2B%2B_av_174'><div class='rule'><div class='id'>174<br/><span>Shall</span></div></div></a><div class='headline'>The null pointer shall not be de-referenced.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>45&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d45'>Pointer not checked for null before use.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_175' name='rule_jsf%2B%2B_av_175'><div class='rule'><div class='id'>175<br/><span>Shall</span></div></div></a><div class='headline'>A pointer shall not be compared to NULL or be assigned NULL; use plain 0 instead.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>348&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s348'>Use of the NULL macro.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_176' name='rule_jsf%2B%2B_av_176'><div class='rule'><div class='id'>176<br/><span>Will</span></div></div></a><div class='headline'>A typedef will be used to simplify program syntax when declaring function pointers.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>299&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s299'>Pointer to function declared without typedef.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_177' name='rule_jsf%2B%2B_av_177'><div class='rule'><div class='id'>177<br/><span>Should</span></div></div></a><div class='headline'>User-defined conversion functions should be avoided.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_178' name='rule_jsf%2B%2B_av_178'><div class='rule'><div class='id'>178<br/><span>Shall</span></div></div></a><div class='headline'>Down casting (casting from base to derived class) shall only be allowed through one of the following mechanism: * Virtual functions that act like dynamic casts (most likely useful in relatively simple cases) * Use of the visitor (or similar) pattern (most likely useful in complicated cases)</div></div><p>LDRA Associated JSF++ AV 178, 179</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>448&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s448'>Base class pointer cast to derived class.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_179' name='rule_jsf%2B%2B_av_179'><div class='rule'><div class='id'>179<br/><span>Shall</span></div></div></a><div class='headline'>A pointer to a virtual base class shall not be converted to a pointer to a derived class.</div></div><p>LDRA Associated JSF++ AV 178, 179</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>448&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s448'>Base class pointer cast to derived class.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_180' name='rule_jsf%2B%2B_av_180'><div class='rule'><div class='id'>180<br/><span>Shall</span></div></div></a><div class='headline'>Implicit conversions that may result in a loss of information shall not be used.</div></div><p>LDRA Associated JSF++ AV 162, 180, 184</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>96&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s96'>Use of mixed mode arithmetic.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : 267 = 1</td>    </tr>
    <tr>    <td class='from'>107&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s107'>Type mismatch in ternary expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>433&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s433'>Type conversion without cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 0 (Default), <a href='standard_flags.htm#flag_441'>441</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>435&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s435'>Float/integer conversion without cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>442&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s442'>Signed integral type cast to unsigned.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_323'>323</a> = 0 (Default), <a href='standard_flags.htm#flag_191'>191</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>443&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s443'>Unsigned integral type cast to signed.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_323'>323</a> = 0 (Default), <a href='standard_flags.htm#flag_191'>191</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>444&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s444'>Integral type cast to non-integral.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_323'>323</a> = 0 (Default), <a href='standard_flags.htm#flag_191'>191</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>445&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s445'>Narrower float conversion without cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>446&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s446'>Narrower int conversion without cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>456&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s456'>Implicit float widening for function return.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>457&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s457'>Implicit int widening for function return.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_181' name='rule_jsf%2B%2B_av_181'><div class='rule'><div class='id'>181<br/><span>Will</span></div></div></a><div class='headline'>Redundant explicit casts will not be used.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>97&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s97'>Use of redundant cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_182' name='rule_jsf%2B%2B_av_182'><div class='rule'><div class='id'>182<br/><span>Shall</span></div></div></a><div class='headline'>Type casting from any type to or from pointers shall not be used.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>94&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s94'>Casting operation on a pointer.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_396'>396</a> = 0 (Default), <a href='standard_flags.htm#flag_397'>397</a> = 0 (Default), <a href='standard_flags.htm#flag_439'>439</a> = 0 (Default), <a href='standard_flags.htm#flag_440'>440</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>95&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s95'>Casting operation to a pointer.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_381'>381</a> = 1, <a href='standard_flags.htm#flag_396'>396</a> = 0 (Default), <a href='standard_flags.htm#flag_397'>397</a> = 0 (Default), <a href='standard_flags.htm#flag_440'>440</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>439&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s439'>Cast from pointer to integral type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_397'>397</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>440&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s440'>Cast from integral type to pointer.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_397'>397</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>554&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s554'>Cast to an unrelated type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>635&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s635'>Cast from pointer to float type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>636&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s636'>Cast from float type to pointer.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_183' name='rule_jsf%2B%2B_av_183'><div class='rule'><div class='id'>183<br/><span>Should</span></div></div></a><div class='headline'>Every possible measure should be taken to avoid type casting.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_184' name='rule_jsf%2B%2B_av_184'><div class='rule'><div class='id'>184<br/><span>Shall</span></div></div></a><div class='headline'>Floating point numbers shall not be converted to integers unless such a conversion is a specified algorithmic requirement or is necessary for a hardware interface.</div></div><p>LDRA Associated JSF++ AV 162, 180, 184</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>96&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s96'>Use of mixed mode arithmetic.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : 267 = 1</td>    </tr>
    <tr>    <td class='from'>435&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s435'>Float/integer conversion without cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>441&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s441'>Float cast to non-float.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_323'>323</a> = 1, <a href='standard_flags.htm#flag_191'>191</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_185' name='rule_jsf%2B%2B_av_185'><div class='rule'><div class='id'>185<br/><span>Shall</span></div></div></a><div class='headline'>C++ style casts (const_cast, reinterpret_cast, and static_cast) shall be used instead of the traditional C-style casts.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>240&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s240'>Use of dynamic_cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>306&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s306'>Use of C type cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_186' name='rule_jsf%2B%2B_av_186'><div class='rule'><div class='id'>186<br/><span>Shall</span></div></div></a><div class='headline'>There shall be no unreachable code.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>1&nbsp;J</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_j1'>Unreachable Code found.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_187' name='rule_jsf%2B%2B_av_187'><div class='rule'><div class='id'>187<br/><span>Shall</span></div></div></a><div class='headline'>All non-null statements shall potentially have a side-effect.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>57&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s57'>Statement with no side effect.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_188' name='rule_jsf%2B%2B_av_188'><div class='rule'><div class='id'>188<br/><span>Will</span></div></div></a><div class='headline'>Labels will not be used, except in switch statements.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>111&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s111'>Label is not part of switch statement (MR).</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_331'>331</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_189' name='rule_jsf%2B%2B_av_189'><div class='rule'><div class='id'>189<br/><span>Shall</span></div></div></a><div class='headline'>The goto statement shall not be used.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>13&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s13'>goto detected.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_190' name='rule_jsf%2B%2B_av_190'><div class='rule'><div class='id'>190<br/><span>Shall</span></div></div></a><div class='headline'>The continue statement shall not be used.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>32&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s32'>Use of continue statement.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_191' name='rule_jsf%2B%2B_av_191'><div class='rule'><div class='id'>191<br/><span>Shall</span></div></div></a><div class='headline'>The break statement shall not be used (except to terminate the cases of a switch statement).</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>31&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s31'>Use of break statement in loop.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_192' name='rule_jsf%2B%2B_av_192'><div class='rule'><div class='id'>192<br/><span>Will</span></div></div></a><div class='headline'>All if, else if constructs will contain either a final else clause or a comment indicating why a final else clause is not necessary.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>59&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s59'>Else alternative missing in if.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : tbend = &lt;Default&gt;</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_193' name='rule_jsf%2B%2B_av_193'><div class='rule'><div class='id'>193<br/><span>Shall</span></div></div></a><div class='headline'>Every non-empty case clause in a switch statement shall be terminated with a break statement.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>62&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s62'>Switch case not terminated with break.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_283'>283</a> = 1, <a href='standard_flags.htm#flag_384'>384</a> = c++ : 0, java : 1 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_194' name='rule_jsf%2B%2B_av_194'><div class='rule'><div class='id'>194<br/><span>Shall</span></div></div></a><div class='headline'>All switch statements that do not intend to test for every enumeration value shall contain a final default clause.</div></div><p>LDRA Associated JSF++ AV 194, 196</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>48&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s48'>No default case in switch statement.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_252'>252</a> = 1, <a href='standard_flags.htm#flag_233'>233</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>278&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s278'>Switch has missing or extra cases.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_233'>233</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_195' name='rule_jsf%2B%2B_av_195'><div class='rule'><div class='id'>195<br/><span>Will</span></div></div></a><div class='headline'>A switch expression will not represent a Boolean value.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>121&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s121'>Use of boolean expression in switch.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_196' name='rule_jsf%2B%2B_av_196'><div class='rule'><div class='id'>196<br/><span>Will</span></div></div></a><div class='headline'>Every switch statement will have at least two cases and a potential default .</div></div><p>LDRA Associated JSF++ AV 194, 196</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>48&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s48'>No default case in switch statement.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_252'>252</a> = 1, <a href='standard_flags.htm#flag_233'>233</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>60&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s60'>Empty switch statement.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>61&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s61'>Switch contains default only.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_437'>437</a> = 1</td>    </tr>
    <tr>    <td class='from'>314&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s314'>Switch has only 1 case and default.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_197' name='rule_jsf%2B%2B_av_197'><div class='rule'><div class='id'>197<br/><span>Shall</span></div></div></a><div class='headline'>Floating point variables shall not be used as loop counters.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>39&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s39'>Unsuitable type for loop variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_198' name='rule_jsf%2B%2B_av_198'><div class='rule'><div class='id'>198<br/><span>Will</span></div></div></a><div class='headline'>The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter.</div></div><p>Note that the initialization expression may invoke an accessor that returns an initial element in a sequence:</p>
<pre>for (Iter_type p = c.begin() ; p != c.end() ; ++p) // Good{...}</pre><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>270&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s270'>For loop initialisation is not simple.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_249'>249</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_199' name='rule_jsf%2B%2B_av_199'><div class='rule'><div class='id'>199<br/><span>Will</span></div></div></a><div class='headline'>The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>271&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s271'>For loop incrementation is not simple.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_331'>331</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_200' name='rule_jsf%2B%2B_av_200'><div class='rule'><div class='id'>200<br/><span>Will</span></div></div></a><div class='headline'>Null initialize or increment expressions in for loops will not be used; a while loop will be used instead.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>268&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s268'>Empty initialisation exprsn in for loop.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>269&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s269'>Empty increment exprsn in for loop.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_424'>424</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_201' name='rule_jsf%2B%2B_av_201'><div class='rule'><div class='id'>201<br/><span>Shall</span></div></div></a><div class='headline'>Numeric variables being used within a for loop for iteration counting shall not be modified in the body of the loop.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>55&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d55'>Modification of loop counter in loop body.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_202' name='rule_jsf%2B%2B_av_202'><div class='rule'><div class='id'>202<br/><span>Shall</span></div></div></a><div class='headline'>Floating point variables shall not be tested for exact equality or inequality.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>56&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s56'>Equality comparison of floating point.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_223'>223</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_203' name='rule_jsf%2B%2B_av_203'><div class='rule'><div class='id'>203<br/><span>Shall</span></div></div></a><div class='headline'>Evaluation of expressions shall not lead to overflow/underflow (unless required algorithmically and then should be heavily documented).</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_204' name='rule_jsf%2B%2B_av_204'><div class='rule'><div class='id'>204<br/><span>Shall</span></div></div></a><div class='headline'>A single operation with side-effects shall only be used in the following contexts: 1. by itself 2. the right-hand side of an assignment 3. a condition 4. the only argument expression with a side-effect in a function call 5. condition of a loop 6. switch condition 7. single part of a chained operation.</div></div><p>LDRA Associated JSF++ AV AV 157, 160, 204</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>35&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d35'>Expression has side effects.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>1&nbsp;Q</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_q1'>Call has execution order dependant side effects.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>9&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s9'>Assignment operation in expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_259'>259</a> = 1, <a href='standard_flags.htm#flag_266'>266</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_204.1' name='rule_jsf%2B%2B_av_204.1'><div class='rule'><div class='id'>204.1<br/><span>Shall</span></div></div></a><div class='headline'>The value of an expression shall be the same under any order of evaluation that the standard permits.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_205' name='rule_jsf%2B%2B_av_205'><div class='rule'><div class='id'>205<br/><span>Shall</span></div></div></a><div class='headline'>The volatile keyword shall not be used unless directly interfacing with hardware.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>106&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s106'>Volatile declaration.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_206' name='rule_jsf%2B%2B_av_206'><div class='rule'><div class='id'>206<br/><span>Shall</span></div></div></a><div class='headline'>Allocation/deallocation from/to the free store (heap) shall not occur after initialization.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_207' name='rule_jsf%2B%2B_av_207'><div class='rule'><div class='id'>207<br/><span>Will</span></div></div></a><div class='headline'>Unencapsulated global data will be avoided.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_208' name='rule_jsf%2B%2B_av_208'><div class='rule'><div class='id'>208<br/><span>Shall</span></div></div></a><div class='headline'>C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.)</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>279&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s279'>Try keyword found.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>280&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s280'>Catch keyword found.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>281&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s281'>Throw keyword found.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_209' name='rule_jsf%2B%2B_av_209'><div class='rule'><div class='id'>209<br/><span>Shall</span></div></div></a><div class='headline'>The basic types of int, short, long, float and double shall not be used, but specific-length equivalents should be typedef'd accordingly for each compiler, and these type names used in the code.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>90&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s90'>Basic type declaration used.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_219'>219</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_210' name='rule_jsf%2B%2B_av_210'><div class='rule'><div class='id'>210<br/><span>Shall</span></div></div></a><div class='headline'>Algorithms shall not make assumptions concerning how data is represented in memory (e.g. big endian vs. little endian, base class subobject ordering in derived classes, nonstatic data member ordering across access specifiers, etc.)</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_210.1' name='rule_jsf%2B%2B_av_210.1'><div class='rule'><div class='id'>210.1<br/><span>Shall</span></div></div></a><div class='headline'>Algorithms shall not make assumptions concerning the order of allocation of nonstatic data members separated by an access specifier.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_211' name='rule_jsf%2B%2B_av_211'><div class='rule'><div class='id'>211<br/><span>Shall</span></div></div></a><div class='headline'>Algorithms shall not assume that shorts, ints, longs, floats, doubles or long doubles begin at particular addresses.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_212' name='rule_jsf%2B%2B_av_212'><div class='rule'><div class='id'>212<br/><span>Shall</span></div></div></a><div class='headline'>Underflow or overflow functioning shall not be depended on in any special way.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_213' name='rule_jsf%2B%2B_av_213'><div class='rule'><div class='id'>213<br/><span>Shall</span></div></div></a><div class='headline'>No dependence shall be placed on C++'s operator precedence rules, below arithmetic operators, in expressions.</div></div><p>LDRA Associated JSF++ AV 158, 160, 213</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>49&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s49'>Logical conjunctions need brackets.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_206'>206</a> = 1</td>    </tr>
    <tr>    <td class='from'>361&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s361'>Expression needs brackets.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_119'>119</a> = 0 (Default), <a href='standard_flags.htm#flag_264'>264</a> = 1, <a href='standard_flags.htm#flag_414'>414</a> = 0 (Default), <a href='standard_flags.htm#flag_420'>420</a> = 0 (Default), <a href='standard_flags.htm#flag_421'>421</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_214' name='rule_jsf%2B%2B_av_214'><div class='rule'><div class='id'>214<br/><span>Shall</span></div></div></a><div class='headline'>Assuming that non-local static objects, in separate translation units, are initialized in a special order shall not be done.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_215' name='rule_jsf%2B%2B_av_215'><div class='rule'><div class='id'>215<br/><span>Will</span></div></div></a><div class='headline'>Pointer arithmetic will not be used.</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>87&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s87'>Use of pointer arithmetic.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : tbend = &lt;Default&gt;, <a href='standard_flags.htm#flag_266'>266</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_216' name='rule_jsf%2B%2B_av_216'><div class='rule'><div class='id'>216<br/><span>Should</span></div></div></a><div class='headline'>Programmers should not attempt to prematurely optimize code.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_217' name='rule_jsf%2B%2B_av_217'><div class='rule'><div class='id'>217<br/><span>Should</span></div></div></a><div class='headline'>Compile-time and link-time errors should be preferred over run-time errors.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_jsf%2B%2B_av_218' name='rule_jsf%2B%2B_av_218'><div class='rule'><div class='id'>218<br/><span>Will</span></div></div></a><div class='headline'>Compiler warning levels will be set in compliance with project policies.</div></div><p>Not Automatically Checkable.</p>
</div><!-- body_block -->
    </div><!-- body-content -->
    <div class='footer'><p>     &copy; Copyright 2014 LDRA Ltd. All rights reserved.<br />     <span>Version 9.4.4, generated on 25th April 2014 at 08:31:23</span>    </p></div>
  </div><!-- body -->
</body>
</html>
