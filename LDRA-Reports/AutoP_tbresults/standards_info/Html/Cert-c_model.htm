<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'
'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'>
<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en' dir='ltr'>
<head>
  <!-- Force (well, try) IE8 to use IE8 standards mode -->
  <meta http-equiv='X-UA-Compatible' content='IE=8' />
  <meta http-equiv='Content-Type' content='text/html' />
  <title>CERT-C Standards Model for C / C++</title>
  <meta name='generator' content='LDRA Standards Tool' />
  <meta name='date' content='2014-04-25_08-31-23' />
  <style>

* {
    padding : 0em;
    margin  : 0em;
}

body {
    padding     : 0px;
    margin      : 0px;
    background  : #ffffff;
    font-family : Verdana, sans-serif;
    font-size   : 100%; /* Forces font sizes to work in all browsers (i.e. IE) */
}

div.nav {
    width : 100%;
}

div.floating-menu {
    position    : fixed;
    width       : 100%;
    margin-left : 1em;
    margin-top  : 1.5em;
    font-size   : 1em;
    z-index     : 20; /* Ensure popup is over page title */
}

div.nav div.page_title {
    top            : 0px;
    left           : 0px;
    width          : 100%;
    height         : 1em;
    font-size      : 200%;
    font-weight    : bold;
    text-align     : center;
    padding-top    : 0.25em;
    padding-bottom : 0.25em;
    color          : #5f4970;
    border-bottom  : 2px solid #eb6c00;
    z-index        : 10; /* Ensure page title is over page body */
}

div.nav div.page_title span.registered {
    font-size      : 50%;
    vertical-align : top;
}

.floating-menu .title:hover {
    color        : #000000;
    background   : #ccc0da;
}

.floating-menu ul {
    font-family   : Arial, Helvetica, sans-serif;
    margin  : 0em;
    padding : 0em;
}

.floating-menu li.sep {
  border-top : 0.125em solid #eb6c00;
}

.floating-menu li {
  position          : relative;
/*   width             : 8em; --- move to :hover to fix IE7 stuck hover */
  width             : 8em;
  list-style        : none;
  border-left       : 0.25em solid #eb6c00;
  border-bottom     : 1px solid #ccc0da;
  vertical-align    : bottom; /* Fix IE5-Win */
}

.floating-menu ul a,
.floating-menu ul li {
  display           : block;
  text-decoration   : none;
  text-align        : center;
  color             : #ccc0da;
  background        : #5f4970;
  vertical-align    : bottom; /* Fix IE5-Win */
}

.floating-menu ul ul {
/*  Rest of styling in hover to fix IE hover bug */
    display : none;
}

/* Menu item hover effects */
.floating-menu a:hover,
.floating-menu li:hover {
    color           : #5f4970;
    background      : #ccc0da;
    width           : 8em;
}

.floating-menu ul.l-1 li:hover ul.l-2 {
    position    : absolute;
    left        : -0.25em;
    top         : 0px;
    display     : block;

    /* These give tracking error bands around popup items.
     * This doesn't work for IE7 without a background image.
     */
    padding             : 1.5em 1.5em 1.5em 0em;
    background-image    : url(ie7/transparent-bg.gif);
    background-repeat   : repeat;
}

.floating-menu ul.l-2 li:hover ul.l-3,
.floating-menu ul.l-3 li:hover ul.l-4,
.floating-menu ul.l-4 li:hover ul.l-5 {
    position    : absolute;
    left        : 7.75em;   /* Just inside the right edge of the parent */
    top         : -1.5em;   /* Compensate for tracking guard band at top */
    display     : block;

    /* These give tracking error bands around popup items.
     * This doesn't work for IE7 without a background image.
     */
    padding             : 1.5em 1.5em 1.5em 0em;
    background-image    : url(ie7/transparent-bg.gif);
    background-repeat   : repeat;
}

.floating-menu ul.h-menu li {
    display         : inline;
    float           : left;
    border-right    : 0px; /* Turn off right border. */
}

.floating-menu li div.standard-range {
    margin : 0 auto;
    width  : 100%;
}

li div.right-align-standard {
    width      : 40%;
    text-align : right;
    display    : inline-block;
}
li div.center {
    width      : 20%;
    display    : inline-block;
    text-align : center;
}
li div.left-align-standard {
    width      : 40%;
    display    : inline-block;
    text-align : left;
}
.floating-menu ul.h-standards li,
.floating-menu ul.h-standards a {
    width : 3.5em;
}

.floating-menu ul.h-standards div.standard {
}
.floating-menu ul.h-standards li.unused-standard:hover,
.floating-menu ul.h-standards li.unused-standard {
    color      : #837093;
    background : #5f4970;
}
.floating-menu ul.h-standards li.standard div,
.floating-menu ul.h-standards li.unused-standard div {
    width      : 80%;
    text-align : right;
    display    : inline-block;
}
.floating-menu ul.h-keywords {
    width : 43.75em; /* 5 * ( 8.5em + 0.25em ) */
}

.floating-menu ul.h-models {
    width : 43.75em; /* 5 * ( 8.5em + 0.25em ) */
}

.floating-menu ul.h-models li,
.floating-menu ul.h-models a {
    width : 8.5em;
}

div.body {
    background : #ffffff;
    position   : absolute;
    top        : 3em;
    bottom     : 0em;
    left       : 0em;
    right      : 0em;
}

div.body * {
    padding : 0em;
    margin  : 0.5em 0em 0em 0em;
    border  : none;
}

div.body div {
    margin-top : 0em;
}

div.body-content {
    background  : #ffffff;
    border-left : 2px solid #eb6c00;
}

div.body_block {
    margin-left     : 10px;
    margin-right    : 10px;
    margin-bottom   : 0em;
    margin-top      : 0.5em;
    padding-top     : 0.25em;
    padding-bottom  : 1.5em;
    border-bottom   : 1px solid #eb6c00;
    font-size       : 80%;
}

.body_block .block_title {
    color         : #5f4970;
    font-size     : 135%;
    margin-bottom : 0.5em;
}

thead .block_title {
    margin-left : -1.25em;
}

.body_block .block_title div.standard {
    font-family : Arial, Helvetica, sans-serif;
    margin-left : -7em;
    width       : 6.25em;
    float       : left;
    font-size   : 115%;
    text-align  : right;
}

.body_block .block_title div.rule {
    font-family : Arial, Helvetica, sans-serif;
    font-size   : 110%;
    margin-left : -8.75em;
    width       : 7.75em;
    float       : left;
}

.body_block .block_title div.rule div {
    text-align : right;
}

.body_block .block_title div.rule span {
    font-size  : 80%;
    font-style : italic;
}

div.body_block .title {
    color         : #5f4970;
    text-align    : left;
    font-weight   : bold;
    margin-top    : 0.75em;
    margin-bottom : 0.5em;
}

div.body_block ul,
div.body_block ol {
    margin-left : 2em;
}

div.footer {
    text-align     : center;
    padding-bottom : 1em;
}

div.footer span {
    font-size : 75%;
}

pre {
    font-family : 'Courier New', monospace;
    font-size   : 85%; /* Forces font sizes to work in all browsers (i.e. IE) */
}

pre .kw1, pre .kw2, pre .kw3, pre .kw4, pre .kw5 {
    color:#0000ff;
}

pre .coMULTI, pre .co0, pre .co1, pre .co2, pre .co3 {
    color:#008000;
}

pre .es0, pre .es1, pre .es2, pre .es3, pre .es4, pre .es5, pre .esHARD, pre .nu0, pre .nu1, pre .nu2, pre .nu3, pre .nu4, pre .nu5, pre .nu6, pre .nu7, pre .nu8, pre .nu9, pre .nu10, pre .nu11, pre .nu12, pre .nu13, pre .nu14, pre .nu15, pre .nu16, pre .nu17, pre .nu18, pre .nu19, pre .st0 {
    color:#8080ff;
}

pre .br0 {
    color:#ff8080;
}

pre .me1, pre .me2 {
    color:#c00000;
}

pre .sy0, pre .sy1, pre .sy2, pre .sy3, pre .sy4 {
    color:#888888;
}

div.xref {
    margin-top  : 6pt;
    margin-left : 20px;
}

div.xref td {
    color          : #5f4970;
    vertical-align : top;
}

div.xref td.from {
    text-align : right;
}

div.xref td.level,
div.xref td.target {
    padding-left:1em;
}

div.body-content a {
    text-decoration : none;
    color           : #eb6c00;
}

div.body-content a:hover {
    text-decoration : underline;
}

@media screen {
    div.nav div.page_title {
        position : fixed;
    }
    div.body-content {
        margin-left : 10em;
    }
    div.body {
        overflow : auto;
    }
}
@media print {
    div.nav div.page_title {
        position  : relative;
        font-size : 150%;
    }
    div.floating-menu,
    div.noprint {
        display : none;
    }
    div.body {
        overflow : visible;
    }
}
@media print {
    div.body-content {
        margin-left : 10em;
    }
}

  </style>
</head>
<body>
  <!--[if lt IE 8]>
  <script src='ie7/IE8.js'></script>
  <![endif]-->
  <div class='nav'>
    <div class='floating-menu'>
  <ul class='l-1'>
    <li style='z-index:10000'>Menu
      <ul class='l-2'>
       <li style='z-index:9999;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         S Standards
    <ul class='l-3'>
      <li style='z-index:10000;'>
        <div class='standard-range'><div class='right-align-standard'>1&nbsp;S</div><div class='center'>to</div><div class='left-align-standard'>100&nbsp;S</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_s1'><div>1&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s2'><div>2&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s3'><div>3&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s4'><div>4&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s5'><div>5&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s6'><div>6&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s7'><div>7&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s8'><div>8&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s9'><div>9&nbsp;S</div></a></li>
      <li class='unused-standard'><div>10&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s11'><div>11&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s12'><div>12&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s13'><div>13&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s14'><div>14&nbsp;S</div></a></li>
      <li class='unused-standard'><div>15&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s16'><div>16&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s17'><div>17&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s18'><div>18&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s19'><div>19&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s20'><div>20&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s21'><div>21&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s22'><div>22&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s23'><div>23&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s24'><div>24&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s25'><div>25&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s26'><div>26&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s27'><div>27&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s28'><div>28&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s29'><div>29&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s30'><div>30&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s31'><div>31&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s32'><div>32&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s33'><div>33&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s34'><div>34&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s35'><div>35&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s36'><div>36&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s37'><div>37&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s38'><div>38&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s39'><div>39&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s40'><div>40&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s41'><div>41&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s42'><div>42&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s43'><div>43&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s44'><div>44&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s45'><div>45&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s46'><div>46&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s47'><div>47&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s48'><div>48&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s49'><div>49&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s50'><div>50&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s51'><div>51&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s52'><div>52&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s53'><div>53&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s54'><div>54&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s55'><div>55&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s56'><div>56&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s57'><div>57&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s58'><div>58&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s59'><div>59&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s60'><div>60&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s61'><div>61&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s62'><div>62&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s63'><div>63&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s64'><div>64&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s65'><div>65&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s66'><div>66&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s67'><div>67&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s68'><div>68&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s69'><div>69&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s70'><div>70&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s71'><div>71&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s72'><div>72&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s73'><div>73&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s74'><div>74&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s75'><div>75&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s76'><div>76&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s77'><div>77&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s78'><div>78&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s79'><div>79&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s80'><div>80&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s81'><div>81&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s82'><div>82&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s83'><div>83&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s84'><div>84&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s85'><div>85&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s86'><div>86&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s87'><div>87&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s88'><div>88&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s89'><div>89&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s90'><div>90&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s91'><div>91&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s92'><div>92&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s93'><div>93&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s94'><div>94&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s95'><div>95&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s96'><div>96&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s97'><div>97&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s98'><div>98&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s99'><div>99&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s100'><div>100&nbsp;S</div></a></li>
    </ul> <!-- l-4 -->
      </li>
      <li style='z-index:9999;'>
        <div class='standard-range'><div class='right-align-standard'>101&nbsp;S</div><div class='center'>to</div><div class='left-align-standard'>200&nbsp;S</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_s101'><div>101&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s102'><div>102&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s103'><div>103&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s104'><div>104&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s105'><div>105&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s106'><div>106&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s107'><div>107&nbsp;S</div></a></li>
      <li class='unused-standard'><div>108&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s109'><div>109&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s110'><div>110&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s111'><div>111&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s112'><div>112&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s113'><div>113&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s114'><div>114&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s115'><div>115&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s116'><div>116&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s117'><div>117&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s118'><div>118&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s119'><div>119&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s120'><div>120&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s121'><div>121&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s122'><div>122&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s123'><div>123&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s124'><div>124&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s125'><div>125&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s126'><div>126&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s127'><div>127&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s128'><div>128&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s129'><div>129&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s130'><div>130&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s131'><div>131&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s132'><div>132&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s133'><div>133&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s134'><div>134&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s135'><div>135&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s136'><div>136&nbsp;S</div></a></li>
      <li class='unused-standard'><div>137&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s138'><div>138&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s139'><div>139&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s140'><div>140&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s141'><div>141&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s142'><div>142&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s143'><div>143&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s144'><div>144&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s145'><div>145&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s146'><div>146&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s147'><div>147&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s148'><div>148&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s149'><div>149&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s150'><div>150&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s151'><div>151&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s152'><div>152&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s153'><div>153&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s154'><div>154&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s155'><div>155&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s156'><div>156&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s157'><div>157&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s158'><div>158&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s159'><div>159&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s160'><div>160&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s161'><div>161&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s162'><div>162&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s163'><div>163&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s164'><div>164&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s165'><div>165&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s166'><div>166&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s167'><div>167&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s168'><div>168&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s169'><div>169&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s170'><div>170&nbsp;S</div></a></li>
      <li class='unused-standard'><div>171&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s172'><div>172&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s173'><div>173&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s174'><div>174&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s175'><div>175&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s176'><div>176&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s177'><div>177&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s178'><div>178&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s179'><div>179&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s180'><div>180&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s181'><div>181&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s182'><div>182&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s183'><div>183&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s184'><div>184&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s185'><div>185&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s186'><div>186&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s187'><div>187&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s188'><div>188&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s189'><div>189&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s190'><div>190&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s191'><div>191&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s192'><div>192&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s193'><div>193&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s194'><div>194&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s195'><div>195&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s196'><div>196&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s197'><div>197&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s198'><div>198&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s199'><div>199&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s200'><div>200&nbsp;S</div></a></li>
    </ul> <!-- l-4 -->
      </li>
      <li style='z-index:9998;'>
        <div class='standard-range'><div class='right-align-standard'>201&nbsp;S</div><div class='center'>to</div><div class='left-align-standard'>300&nbsp;S</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_s201'><div>201&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s202'><div>202&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s203'><div>203&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s204'><div>204&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s205'><div>205&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s206'><div>206&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s207'><div>207&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s208'><div>208&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s209'><div>209&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s210'><div>210&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s211'><div>211&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s212'><div>212&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s213'><div>213&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s214'><div>214&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s215'><div>215&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s216'><div>216&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s217'><div>217&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s218'><div>218&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s219'><div>219&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s220'><div>220&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s221'><div>221&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s222'><div>222&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s223'><div>223&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s224'><div>224&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s225'><div>225&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s226'><div>226&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s227'><div>227&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s228'><div>228&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s229'><div>229&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s230'><div>230&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s231'><div>231&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s232'><div>232&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s233'><div>233&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s234'><div>234&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s235'><div>235&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s236'><div>236&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s237'><div>237&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s238'><div>238&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s239'><div>239&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s240'><div>240&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s241'><div>241&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s242'><div>242&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s243'><div>243&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s244'><div>244&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s245'><div>245&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s246'><div>246&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s247'><div>247&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s248'><div>248&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s249'><div>249&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s250'><div>250&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s251'><div>251&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s252'><div>252&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s253'><div>253&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s254'><div>254&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s255'><div>255&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s256'><div>256&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s257'><div>257&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s258'><div>258&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s259'><div>259&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s260'><div>260&nbsp;S</div></a></li>
      <li class='unused-standard'><div>261&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s262'><div>262&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s263'><div>263&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s264'><div>264&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s265'><div>265&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s266'><div>266&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s267'><div>267&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s268'><div>268&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s269'><div>269&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s270'><div>270&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s271'><div>271&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s272'><div>272&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s273'><div>273&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s274'><div>274&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s275'><div>275&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s276'><div>276&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s277'><div>277&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s278'><div>278&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s279'><div>279&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s280'><div>280&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s281'><div>281&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s282'><div>282&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s283'><div>283&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s284'><div>284&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s285'><div>285&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s286'><div>286&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s287'><div>287&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s288'><div>288&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s289'><div>289&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s290'><div>290&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s291'><div>291&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s292'><div>292&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s293'><div>293&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s294'><div>294&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s295'><div>295&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s296'><div>296&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s297'><div>297&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s298'><div>298&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s299'><div>299&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s300'><div>300&nbsp;S</div></a></li>
    </ul> <!-- l-4 -->
      </li>
      <li style='z-index:9997;'>
        <div class='standard-range'><div class='right-align-standard'>301&nbsp;S</div><div class='center'>to</div><div class='left-align-standard'>400&nbsp;S</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_s301'><div>301&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s302'><div>302&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s303'><div>303&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s304'><div>304&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s305'><div>305&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s306'><div>306&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s307'><div>307&nbsp;S</div></a></li>
      <li class='unused-standard'><div>308&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s309'><div>309&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s310'><div>310&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s311'><div>311&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s312'><div>312&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s313'><div>313&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s314'><div>314&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s315'><div>315&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s316'><div>316&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s317'><div>317&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s318'><div>318&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s319'><div>319&nbsp;S</div></a></li>
      <li class='unused-standard'><div>320&nbsp;S</div></li>
      <li class='unused-standard'><div>321&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s322'><div>322&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s323'><div>323&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s324'><div>324&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s325'><div>325&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s326'><div>326&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s327'><div>327&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s328'><div>328&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s329'><div>329&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s330'><div>330&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s331'><div>331&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s332'><div>332&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s333'><div>333&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s334'><div>334&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s335'><div>335&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s336'><div>336&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s337'><div>337&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s338'><div>338&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s339'><div>339&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s340'><div>340&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s341'><div>341&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s342'><div>342&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s343'><div>343&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s344'><div>344&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s345'><div>345&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s346'><div>346&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s347'><div>347&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s348'><div>348&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s349'><div>349&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s350'><div>350&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s351'><div>351&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s352'><div>352&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s353'><div>353&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s354'><div>354&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s355'><div>355&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s356'><div>356&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s357'><div>357&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s358'><div>358&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s359'><div>359&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s360'><div>360&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s361'><div>361&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s362'><div>362&nbsp;S</div></a></li>
      <li class='unused-standard'><div>363&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s364'><div>364&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s365'><div>365&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s366'><div>366&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s367'><div>367&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s368'><div>368&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s369'><div>369&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s370'><div>370&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s371'><div>371&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s372'><div>372&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s373'><div>373&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s374'><div>374&nbsp;S</div></a></li>
      <li class='unused-standard'><div>375&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s376'><div>376&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s377'><div>377&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s378'><div>378&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s379'><div>379&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s380'><div>380&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s381'><div>381&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s382'><div>382&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s383'><div>383&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s384'><div>384&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s385'><div>385&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s386'><div>386&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s387'><div>387&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s388'><div>388&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s389'><div>389&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s390'><div>390&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s391'><div>391&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s392'><div>392&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s393'><div>393&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s394'><div>394&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s395'><div>395&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s396'><div>396&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s397'><div>397&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s398'><div>398&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s399'><div>399&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s400'><div>400&nbsp;S</div></a></li>
    </ul> <!-- l-4 -->
      </li>
      <li style='z-index:9996;'>
        <div class='standard-range'><div class='right-align-standard'>401&nbsp;S</div><div class='center'>to</div><div class='left-align-standard'>500&nbsp;S</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_s401'><div>401&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s402'><div>402&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s403'><div>403&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s404'><div>404&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s405'><div>405&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s406'><div>406&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s407'><div>407&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s408'><div>408&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s409'><div>409&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s410'><div>410&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s411'><div>411&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s412'><div>412&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s413'><div>413&nbsp;S</div></a></li>
      <li class='unused-standard'><div>414&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s415'><div>415&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s416'><div>416&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s417'><div>417&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s418'><div>418&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s419'><div>419&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s420'><div>420&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s421'><div>421&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s422'><div>422&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s423'><div>423&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s424'><div>424&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s425'><div>425&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s426'><div>426&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s427'><div>427&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s428'><div>428&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s429'><div>429&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s430'><div>430&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s431'><div>431&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s432'><div>432&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s433'><div>433&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s434'><div>434&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s435'><div>435&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s436'><div>436&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s437'><div>437&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s438'><div>438&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s439'><div>439&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s440'><div>440&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s441'><div>441&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s442'><div>442&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s443'><div>443&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s444'><div>444&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s445'><div>445&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s446'><div>446&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s447'><div>447&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s448'><div>448&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s449'><div>449&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s450'><div>450&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s451'><div>451&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s452'><div>452&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s453'><div>453&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s454'><div>454&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s455'><div>455&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s456'><div>456&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s457'><div>457&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s458'><div>458&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s459'><div>459&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s460'><div>460&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s461'><div>461&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s462'><div>462&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s463'><div>463&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s464'><div>464&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s465'><div>465&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s466'><div>466&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s467'><div>467&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s468'><div>468&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s469'><div>469&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s470'><div>470&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s471'><div>471&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s472'><div>472&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s473'><div>473&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s474'><div>474&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s475'><div>475&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s476'><div>476&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s477'><div>477&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s478'><div>478&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s479'><div>479&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s480'><div>480&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s481'><div>481&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s482'><div>482&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s483'><div>483&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s484'><div>484&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s485'><div>485&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s486'><div>486&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s487'><div>487&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s488'><div>488&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s489'><div>489&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s490'><div>490&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s491'><div>491&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s492'><div>492&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s493'><div>493&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s494'><div>494&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s495'><div>495&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s496'><div>496&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s497'><div>497&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s498'><div>498&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s499'><div>499&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s500'><div>500&nbsp;S</div></a></li>
    </ul> <!-- l-4 -->
      </li>
      <li style='z-index:9995;'>
        <div class='standard-range'><div class='right-align-standard'>501&nbsp;S</div><div class='center'>to</div><div class='left-align-standard'>600&nbsp;S</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_s501'><div>501&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s502'><div>502&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s503'><div>503&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s504'><div>504&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s505'><div>505&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s506'><div>506&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s507'><div>507&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s508'><div>508&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s509'><div>509&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s510'><div>510&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s511'><div>511&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s512'><div>512&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s513'><div>513&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s514'><div>514&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s515'><div>515&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s516'><div>516&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s517'><div>517&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s518'><div>518&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s519'><div>519&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s520'><div>520&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s521'><div>521&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s522'><div>522&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s523'><div>523&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s524'><div>524&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s525'><div>525&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s526'><div>526&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s527'><div>527&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s528'><div>528&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s529'><div>529&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s530'><div>530&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s531'><div>531&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s532'><div>532&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s533'><div>533&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s534'><div>534&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s535'><div>535&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s536'><div>536&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s537'><div>537&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s538'><div>538&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s539'><div>539&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s540'><div>540&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s541'><div>541&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s542'><div>542&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s543'><div>543&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s544'><div>544&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s545'><div>545&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s546'><div>546&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s547'><div>547&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s548'><div>548&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s549'><div>549&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s550'><div>550&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s551'><div>551&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s552'><div>552&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s553'><div>553&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s554'><div>554&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s555'><div>555&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s556'><div>556&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s557'><div>557&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s558'><div>558&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s559'><div>559&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s560'><div>560&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s561'><div>561&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s562'><div>562&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s563'><div>563&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s564'><div>564&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s565'><div>565&nbsp;S</div></a></li>
      <li class='unused-standard'><div>566&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s567'><div>567&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s568'><div>568&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s569'><div>569&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s570'><div>570&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s571'><div>571&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s572'><div>572&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s573'><div>573&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s574'><div>574&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s575'><div>575&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s576'><div>576&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s577'><div>577&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s578'><div>578&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s579'><div>579&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s580'><div>580&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s581'><div>581&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s582'><div>582&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s583'><div>583&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s584'><div>584&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s585'><div>585&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s586'><div>586&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s587'><div>587&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s588'><div>588&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s589'><div>589&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s590'><div>590&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s591'><div>591&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s592'><div>592&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s593'><div>593&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s594'><div>594&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s595'><div>595&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s596'><div>596&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s597'><div>597&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s598'><div>598&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s599'><div>599&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s600'><div>600&nbsp;S</div></a></li>
    </ul> <!-- l-4 -->
      </li>
      <li style='z-index:9994;'>
        <div class='standard-range'><div class='right-align-standard'>601&nbsp;S</div><div class='center'>to</div><div class='left-align-standard'>639&nbsp;S</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_s601'><div>601&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s602'><div>602&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s603'><div>603&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s604'><div>604&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s605'><div>605&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s606'><div>606&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s607'><div>607&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s608'><div>608&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s609'><div>609&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s610'><div>610&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s611'><div>611&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s612'><div>612&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s613'><div>613&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s614'><div>614&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s615'><div>615&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s616'><div>616&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s617'><div>617&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s618'><div>618&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s619'><div>619&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s620'><div>620&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s621'><div>621&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s622'><div>622&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s623'><div>623&nbsp;S</div></a></li>
      <li class='unused-standard'><div>624&nbsp;S</div></li>
      <li class='unused-standard'><div>625&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s626'><div>626&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s627'><div>627&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s628'><div>628&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s629'><div>629&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s630'><div>630&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s631'><div>631&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s632'><div>632&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s633'><div>633&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s634'><div>634&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s635'><div>635&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s636'><div>636&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s637'><div>637&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s638'><div>638&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s639'><div>639&nbsp;S</div></a></li>
    </ul> <!-- l-4 -->
      </li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9998;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         C Standards
    <ul class='l-3 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_c1'><div>1&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c2'><div>2&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c3'><div>3&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c4'><div>4&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c5'><div>5&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c6'><div>6&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c7'><div>7&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c8'><div>8&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c9'><div>9&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c10'><div>10&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c11'><div>11&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c12'><div>12&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c13'><div>13&nbsp;C</div></a></li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9997;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         D Standards
    <ul class='l-3'>
      <li style='z-index:10000;'>
        <div class='standard-range'><div class='right-align-standard'>1&nbsp;D</div><div class='center'>to</div><div class='left-align-standard'>100&nbsp;D</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_d1'><div>1&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d2'><div>2&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d3'><div>3&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d4'><div>4&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d5'><div>5&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d6'><div>6&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d7'><div>7&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d8'><div>8&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d9'><div>9&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d10'><div>10&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d11'><div>11&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d12'><div>12&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d13'><div>13&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d14'><div>14&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d15'><div>15&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d16'><div>16&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d17'><div>17&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d18'><div>18&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d19'><div>19&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d20'><div>20&nbsp;D</div></a></li>
      <li class='unused-standard'><div>21&nbsp;D</div></li>
      <li class='standard'><a href='standards.htm#standard_d22'><div>22&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d23'><div>23&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d24'><div>24&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d25'><div>25&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d26'><div>26&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d27'><div>27&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d28'><div>28&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d29'><div>29&nbsp;D</div></a></li>
      <li class='unused-standard'><div>30&nbsp;D</div></li>
      <li class='unused-standard'><div>31&nbsp;D</div></li>
      <li class='unused-standard'><div>32&nbsp;D</div></li>
      <li class='standard'><a href='standards.htm#standard_d33'><div>33&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d34'><div>34&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d35'><div>35&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d36'><div>36&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d37'><div>37&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d38'><div>38&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d39'><div>39&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d40'><div>40&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d41'><div>41&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d42'><div>42&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d43'><div>43&nbsp;D</div></a></li>
      <li class='unused-standard'><div>44&nbsp;D</div></li>
      <li class='standard'><a href='standards.htm#standard_d45'><div>45&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d46'><div>46&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d47'><div>47&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d48'><div>48&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d49'><div>49&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d50'><div>50&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d51'><div>51&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d52'><div>52&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d53'><div>53&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d54'><div>54&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d55'><div>55&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d56'><div>56&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d57'><div>57&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d58'><div>58&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d59'><div>59&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d60'><div>60&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d61'><div>61&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d62'><div>62&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d63'><div>63&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d64'><div>64&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d65'><div>65&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d66'><div>66&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d67'><div>67&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d68'><div>68&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d69'><div>69&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d70'><div>70&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d71'><div>71&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d72'><div>72&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d73'><div>73&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d74'><div>74&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d75'><div>75&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d76'><div>76&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d77'><div>77&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d78'><div>78&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d79'><div>79&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d80'><div>80&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d81'><div>81&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d82'><div>82&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d83'><div>83&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d84'><div>84&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d85'><div>85&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d86'><div>86&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d87'><div>87&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d88'><div>88&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d89'><div>89&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d90'><div>90&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d91'><div>91&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d92'><div>92&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d93'><div>93&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d94'><div>94&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d95'><div>95&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d96'><div>96&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d97'><div>97&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d98'><div>98&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d99'><div>99&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d100'><div>100&nbsp;D</div></a></li>
    </ul> <!-- l-4 -->
      </li>
      <li style='z-index:9999;'>
        <div class='standard-range'><div class='right-align-standard'>101&nbsp;D</div><div class='center'>to</div><div class='left-align-standard'>113&nbsp;D</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_d101'><div>101&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d102'><div>102&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d103'><div>103&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d104'><div>104&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d105'><div>105&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d106'><div>106&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d107'><div>107&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d108'><div>108&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d109'><div>109&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d110'><div>110&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d111'><div>111&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d112'><div>112&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d113'><div>113&nbsp;D</div></a></li>
    </ul> <!-- l-4 -->
      </li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9996;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         X Standards
    <ul class='l-3 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_x1'><div>1&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x2'><div>2&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x3'><div>3&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x4'><div>4&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x5'><div>5&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x6'><div>6&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x7'><div>7&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x8'><div>8&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x9'><div>9&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x10'><div>10&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x11'><div>11&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x12'><div>12&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x13'><div>13&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x14'><div>14&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x15'><div>15&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x16'><div>16&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x17'><div>17&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x18'><div>18&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x19'><div>19&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x20'><div>20&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x21'><div>21&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x22'><div>22&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x23'><div>23&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x24'><div>24&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x25'><div>25&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x26'><div>26&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x27'><div>27&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x28'><div>28&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x29'><div>29&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x30'><div>30&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x31'><div>31&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x32'><div>32&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x33'><div>33&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x34'><div>34&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x35'><div>35&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x36'><div>36&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x37'><div>37&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x38'><div>38&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x39'><div>39&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x40'><div>40&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x41'><div>41&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x42'><div>42&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x43'><div>43&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x44'><div>44&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x45'><div>45&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x46'><div>46&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x47'><div>47&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x48'><div>48&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x49'><div>49&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x50'><div>50&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x51'><div>51&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x52'><div>52&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x53'><div>53&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x54'><div>54&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x55'><div>55&nbsp;X</div></a></li>
      <li class='unused-standard'><div>56&nbsp;X</div></li>
      <li class='standard'><a href='standards.htm#standard_x57'><div>57&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x58'><div>58&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x59'><div>59&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x60'><div>60&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x61'><div>61&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x62'><div>62&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x63'><div>63&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x64'><div>64&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x65'><div>65&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x66'><div>66&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x67'><div>67&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x68'><div>68&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x69'><div>69&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x70'><div>70&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x71'><div>71&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x72'><div>72&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x73'><div>73&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x74'><div>74&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x75'><div>75&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x76'><div>76&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x77'><div>77&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x78'><div>78&nbsp;X</div></a></li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9995;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         I Standards
    <ul class='l-3 h-menu h-standards' style='width:3.75em;'>
      <li class='standard'><a href='standards.htm#standard_i1'><div>1&nbsp;I</div></a></li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9994;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         Q Standards
    <ul class='l-3 h-menu h-standards' style='width:18.75em;'>
      <li class='standard'><a href='standards.htm#standard_q1'><div>1&nbsp;Q</div></a></li>
      <li class='standard'><a href='standards.htm#standard_q2'><div>2&nbsp;Q</div></a></li>
      <li class='standard'><a href='standards.htm#standard_q3'><div>3&nbsp;Q</div></a></li>
      <li class='standard'><a href='standards.htm#standard_q4'><div>4&nbsp;Q</div></a></li>
      <li class='standard'><a href='standards.htm#standard_q5'><div>5&nbsp;Q</div></a></li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9993;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         U Standards
    <ul class='l-3 h-menu h-standards' style='width:11.25em;'>
      <li class='standard'><a href='standards.htm#standard_u1'><div>1&nbsp;U</div></a></li>
      <li class='standard'><a href='standards.htm#standard_u2'><div>2&nbsp;U</div></a></li>
      <li class='standard'><a href='standards.htm#standard_u3'><div>3&nbsp;U</div></a></li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9992;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         J Standards
    <ul class='l-3 h-menu h-standards' style='width:11.25em;'>
      <li class='standard'><a href='standards.htm#standard_j1'><div>1&nbsp;J</div></a></li>
      <li class='standard'><a href='standards.htm#standard_j2'><div>2&nbsp;J</div></a></li>
      <li class='standard'><a href='standards.htm#standard_j3'><div>3&nbsp;J</div></a></li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9991;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         Z Standards
    <ul class='l-3 h-menu h-standards' style='width:3.75em;'>
      <li class='standard'><a href='standards.htm#standard_z1'><div>1&nbsp;Z</div></a></li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9990;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         H Standards
    <ul class='l-3 h-menu h-standards' style='width:30em;'>
      <li class='standard'><a href='standards.htm#standard_h1'><div>1&nbsp;H</div></a></li>
      <li class='standard'><a href='standards.htm#standard_h2'><div>2&nbsp;H</div></a></li>
      <li class='standard'><a href='standards.htm#standard_h3'><div>3&nbsp;H</div></a></li>
      <li class='standard'><a href='standards.htm#standard_h4'><div>4&nbsp;H</div></a></li>
      <li class='standard'><a href='standards.htm#standard_h5'><div>5&nbsp;H</div></a></li>
      <li class='standard'><a href='standards.htm#standard_h6'><div>6&nbsp;H</div></a></li>
      <li class='standard'><a href='standards.htm#standard_h7'><div>7&nbsp;H</div></a></li>
      <li class='standard'><a href='standards.htm#standard_h8'><div>8&nbsp;H</div></a></li>
    </ul> <!-- l-3 -->
       </li>
    <li class='sep' style='z-index:9999;' />
        <li style='z-index:9989;'>
          <!-- No <a> tag round content means item stays lit when in popup -->
          By Keyword
          <ul class='l-3 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_decl'>Decl</a></div>
          <ul class='l-4 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_class'>Class</a></div>
          <ul class='l-5 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_inherit'>Inherit</a></div>
            </li>
            <li style='z-index:9999;'>
              <div class='standard-range'><a href='keywords.htm#keyword_op'>Op</a></div>
            </li>
          </ul>
            </li>
            <li style='z-index:9999;'>
              <div class='standard-range'><a href='keywords.htm#keyword_fn'>Fn</a></div>
          <ul class='l-5 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_fnpar'>Fnpar</a></div>
            </li>
          </ul>
            </li>
            <li style='z-index:9998;'>
              <div class='standard-range'><a href='keywords.htm#keyword_id'>Id</a></div>
            </li>
            <li style='z-index:9997;'>
              <div class='standard-range'><a href='keywords.htm#keyword_obj'>Obj</a></div>
            </li>
            <li style='z-index:9996;'>
              <div class='standard-range'><a href='keywords.htm#keyword_template'>Template</a></div>
            </li>
            <li style='z-index:9995;'>
              <div class='standard-range'><a href='keywords.htm#keyword_type'>Type</a></div>
          <ul class='l-5 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_struct'>Struct</a></div>
            </li>
          </ul>
            </li>
          </ul>
            </li>
            <li style='z-index:9999;'>
              <div class='standard-range'><a href='keywords.htm#keyword_exp'>Exp</a></div>
          <ul class='l-4 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_arr'>Arr</a></div>
            </li>
            <li style='z-index:9999;'>
              <div class='standard-range'><a href='keywords.htm#keyword_conv'>Conv</a></div>
            </li>
            <li style='z-index:9998;'>
              <div class='standard-range'><a href='keywords.htm#keyword_ptr'>Ptr</a></div>
            </li>
          </ul>
            </li>
            <li style='z-index:9998;'>
              <div class='standard-range'><a href='keywords.htm#keyword_file'>File</a></div>
          <ul class='l-4 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_namespace'>Namespace</a></div>
            </li>
          </ul>
            </li>
            <li style='z-index:9997;'>
              <div class='standard-range'><a href='keywords.htm#keyword_flow'>Flow</a></div>
            </li>
            <li style='z-index:9996;'>
              <div class='standard-range'><a href='keywords.htm#keyword_lib'>Lib</a></div>
          <ul class='l-4 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_io'>Io</a></div>
            </li>
          </ul>
            </li>
            <li style='z-index:9995;'>
              <div class='standard-range'><a href='keywords.htm#keyword_lit'>Lit</a></div>
            </li>
            <li style='z-index:9994;'>
              <div class='standard-range'><a href='keywords.htm#keyword_metric'>Metric</a></div>
            </li>
            <li style='z-index:9993;'>
              <div class='standard-range'><a href='keywords.htm#keyword_misc'>Misc</a></div>
            </li>
            <li style='z-index:9992;'>
              <div class='standard-range'><a href='keywords.htm#keyword_pre'>Pre</a></div>
            </li>
            <li style='z-index:9991;'>
              <div class='standard-range'><a href='keywords.htm#keyword_stmt'>Stmt</a></div>
          <ul class='l-4 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_cond'>Cond</a></div>
          <ul class='l-5 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_if'>If</a></div>
            </li>
            <li style='z-index:9999;'>
              <div class='standard-range'><a href='keywords.htm#keyword_switch'>Switch</a></div>
            </li>
          </ul>
            </li>
            <li style='z-index:9999;'>
              <div class='standard-range'><a href='keywords.htm#keyword_loop'>Loop</a></div>
            </li>
            <li style='z-index:9998;'>
              <div class='standard-range'><a href='keywords.htm#keyword_jmp'>Jmp</a></div>
            </li>
            <li style='z-index:9997;'>
              <div class='standard-range'><a href='keywords.htm#keyword_except'>Except</a></div>
            </li>
          </ul>
            </li>
            <li style='z-index:9990;'>
              <div class='standard-range'><a href='keywords.htm#keyword_style'>Style</a></div>
            </li>
          </ul>
        </li>
        <li style='z-index:9988;'>
          <!-- No <a> tag round content means item stays lit when in popup -->
          By Classification
          <ul class='l-3 h-menu h-keywords'>
    <li><a href='classifications.htm#classification_allocation'>Allocation</a></li>
    <li><a href='classifications.htm#classification_complexity'>Complexity</a></li>
    <li><a href='classifications.htm#classification_dependability'>Dependability</a></li>
    <li><a href='classifications.htm#classification_fault'>Fault</a></li>
    <li><a href='classifications.htm#classification_maintainability'>Maintainability</a></li>
    <li><a href='classifications.htm#classification_portability'>Portability</a></li>
    <li><a href='classifications.htm#classification_style'>Style</a></li>
    <li><a href='classifications.htm#classification_testability'>Testability</a></li>
    <li><a href='classifications.htm#classification_vulnerabilities'>Vulnerabilities</a></li>
          </ul>
        </li>
    <li><a href='standard_flags.htm'>Std Modifiers</a></li>
    <li class='sep' style='z-index:9999;' />
        <li style='z-index:9987;'>
          <!-- No <a> tag round content means item stays lit when in popup -->
          Models
          <ul class='l-3 h-menu h-models'>
    <li><a href='cast_model.htm'>CAST</a></li>
    <li><a href='cert-c_model.htm'>CERT-C</a></li>
    <li><a href='cmse_model.htm'>CMSE</a></li>
    <li><a href='conform_model.htm'>CONFORM</a></li>
    <li><a href='cwe_model.htm'>CWE</a></li>
    <li><a href='customer_sample_model.htm'>Customer Sample</a></li>
    <li><a href='dera_model.htm'>DERA</a></li>
    <li><a href='eads-c_model.htm'>EADS-C</a></li>
    <li><a href='eads-cpp_model.htm'>EADS-C++</a></li>
    <li><a href='fsb582-c_model.htm'>FSB582-C</a></li>
    <li><a href='fsb582-cpp_model.htm'>FSB582-C++</a></li>
    <li><a href='gjb_model.htm'>GJB</a></li>
    <li><a href='hicpp_model.htm'>HIC++</a></li>
    <li><a href='his_model.htm'>HIS</a></li>
    <li><a href='jpl_model.htm'>JPL</a></li>
    <li><a href='jsf++_av_model.htm'>JSF++ AV</a></li>
    <li><a href='lmtcp_model.htm'>LMTCP</a></li>
    <li><a href='legacy_model.htm'>Legacy</a></li>
    <li><a href='misra-ac_model.htm'>MISRA-AC</a></li>
    <li><a href='misra-cpp_2008_model.htm'>MISRA-C++:2008</a></li>
    <li><a href='misra-c_1998_model.htm'>MISRA-C:1998</a></li>
    <li><a href='misra-c_2004_model.htm'>MISRA-C:2004</a></li>
    <li><a href='misra-c_2012_model.htm'>MISRA-C:2012</a></li>
    <li><a href='netrino_model.htm'>NETRINO</a></li>
    <li><a href='runtime_model.htm'>RUNTIME</a></li>
    <li><a href='sec-c_model.htm'>SEC-C</a></li>
    <li><a href='standard_model.htm'>Standard</a></li>
    <li><a href='tbrun_requires_model.htm'>TBrun Requires</a></li>
    <li><a href='uml_model.htm'>UML</a></li>
    <li><a href='vsos_model.htm'>VSOS</a></li>
          </ul>
        </li>
      </ul>
    </li>
  </ul><!-- l-1 -->
    </div><!-- floating-menu -->
    <div class='page_title'>CERT-C Standards Model for C / C++</div>
  </div><!-- nav -->
  <div class='body'>
    <div class='body-content'>
<div class='body_block'>
  <div class='title'>Acknowledgements</div>
  <p>Extracts from "The CERT C Secure Coding Standard, Version 1.0" &copy; Carnegie Mellon University</p>
  <div class='title'>Compliance Matrix</div>
  <p>A compliance matrix for the CERT-C standards model is available in the Microsoft Excel XML file <i>standards_info/compliance/cert-c_compliance.xml</i>, which may be found relative to the LDRA tool suite installation directory.</p>
<p>Many of the CERT-C guidelines are undecidable. Such guidelines will be marked as Fully Implemented if all statically checkable aspects of the guideline are addressed.
Note Where a piece of code violates more than one guideline, only one violation may be output.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_arr00-c' name='rule_cert-c_arr00-c'><div class='rule'><div class='id'>ARR00-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Understand how arrays work</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>401&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s401'>Use of sizeof on an array parameter.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_arr01-c' name='rule_cert-c_arr01-c'><div class='rule'><div class='id'>ARR01-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Do not apply the sizeof operator to a pointer when taking the size of an array</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>401&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s401'>Use of sizeof on an array parameter.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_arr02-c' name='rule_cert-c_arr02-c'><div class='rule'><div class='id'>ARR02-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Explicitly specify array bounds, even if implicitly defined by an initializer</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>127&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s127'>Array has no bounds specified.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_285'>285</a> = 0 (Default), <a href='standard_flags.htm#flag_286'>286</a> = 1, <a href='standard_flags.htm#flag_426'>426</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>397&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s397'>Array initialisation has insufficient items.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_415'>415</a> = 1</td>    </tr>
    <tr>    <td class='from'>404&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s404'>Array initialisation has too many items.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_399'>399</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_arr30-c' name='rule_cert-c_arr30-c'><div class='rule'><div class='id'>ARR30-C<br/><span>Rule</span></div></div></a><div class='headline'>Guarantee that array indices are within the valid range</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>47&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s47'>Array bound exceeded.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>476&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s476'>Array index not unsigned.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>64&nbsp;X</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_x64'>Array bound exceeded at call.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>68&nbsp;X</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_x68'>Parameter indexing array too big at call.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>69&nbsp;X</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_x69'>Global array bound exceeded at use.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_arr31-c' name='rule_cert-c_arr31-c'><div class='rule'><div class='id'>ARR31-C<br/><span>Rule</span></div></div></a><div class='headline'>Use consistent array notation across all source files</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>1&nbsp;X</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_x1'>Declaration types do not match across a system.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_arr32-c' name='rule_cert-c_arr32-c'><div class='rule'><div class='id'>ARR32-C<br/><span>Rule</span></div></div></a><div class='headline'>Ensure size arguments for variable length arrays are in a valid range</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_arr33-c' name='rule_cert-c_arr33-c'><div class='rule'><div class='id'>ARR33-C<br/><span>Rule</span></div></div></a><div class='headline'>Guarantee that copies are made into storage of sufficient size</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>489&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s489'>Insufficient space for operation.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>66&nbsp;X</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_x66'>Insufficient array space at call.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>70&nbsp;X</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_x70'>Array has insufficient space.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>71&nbsp;X</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_x71'>Insufficient space for copy.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_arr34-c' name='rule_cert-c_arr34-c'><div class='rule'><div class='id'>ARR34-C<br/><span>Rule</span></div></div></a><div class='headline'>Ensure that array types in expressions are compatible</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_arr35-c' name='rule_cert-c_arr35-c'><div class='rule'><div class='id'>ARR35-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not allow loops to iterate beyond the end of an array</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>47&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s47'>Array bound exceeded.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_arr36-c' name='rule_cert-c_arr36-c'><div class='rule'><div class='id'>ARR36-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Do not subtract or compare two pointers that do not refer to the same array</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>438&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s438'>Pointer subtraction not addressing one array.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_arr37-c' name='rule_cert-c_arr37-c'><div class='rule'><div class='id'>ARR37-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not add or subtract an integer to a pointer to a non-array object</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>567&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s567'>Pointer arithmetic is not on array.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_436'>436</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_arr38-c' name='rule_cert-c_arr38-c'><div class='rule'><div class='id'>ARR38-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not add or subtract an integer to a pointer if the resulting value does not refer to a valid array element</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_dcl00-c' name='rule_cert-c_dcl00-c'><div class='rule'><div class='id'>DCL00-C<br/><span>Recommendation</span></div></div></a><div class='headline'>const-qualify immutable objects</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>78&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d78'>Global variable should be declared const.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>93&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d93'>Local variable should be declared const.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>200&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s200'>Define used for numeric constant.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_dcl01-c' name='rule_cert-c_dcl01-c'><div class='rule'><div class='id'>DCL01-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Do not reuse variable names in subscopes</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>131&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s131'>Name reused in inner scope.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_dcl02-c' name='rule_cert-c_dcl02-c'><div class='rule'><div class='id'>DCL02-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Use visually distinct identifiers</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>67&nbsp;X</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_x67'>Identifier is typographically ambiguous.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_dcl03-c' name='rule_cert-c_dcl03-c'><div class='rule'><div class='id'>DCL03-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Use a static assertion to test the value of a constant expression</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>44&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s44'>Use of banned function or variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_dcl04-c' name='rule_cert-c_dcl04-c'><div class='rule'><div class='id'>DCL04-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Do not declare more than one variable per declaration</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>177&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s177'>Identifier not declared on new line.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_220'>220</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>579&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s579'>More than one variable per declaration.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_dcl05-c' name='rule_cert-c_dcl05-c'><div class='rule'><div class='id'>DCL05-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Use type definitions to improve code readability</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>299&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s299'>Pointer to function declared without typedef.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>381&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s381'>Enum, struct or union not typedeffed.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_dcl06-c' name='rule_cert-c_dcl06-c'><div class='rule'><div class='id'>DCL06-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Use meaningful symbolic constants to represent literal values in program logic</div></div><p>Exception DLC06-EX1 permits numeric constants where this aids readability. This is not statically checkable, and therefore the analysis highlights all use of numeric literals in expressions.  However, the documentation for <a href='standards.htm#standard_s201'>201 S</a> shows how the analysis can be relaxed to permit a range of integer literals.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>201&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s201'>Use of numeric literal in expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_217'>217</a> = 0 (Default), <a href='standard_flags.htm#flag_163'>163</a> = 1 (Default), <a href='standard_flags.htm#flag_237'>237</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_dcl07-c' name='rule_cert-c_dcl07-c'><div class='rule'><div class='id'>DCL07-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Include the appropriate type information in function declarators</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>21&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s21'>Number of parameters does not match.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>135&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s135'>Parameter list is KR.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>170&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s170'>Procedure call has no prototype and no defn.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_dcl08-c' name='rule_cert-c_dcl08-c'><div class='rule'><div class='id'>DCL08-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Properly encode relationships in constant definitions</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>387&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s387'>Enum initialisation not integer literal.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_dcl09-c' name='rule_cert-c_dcl09-c'><div class='rule'><div class='id'>DCL09-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Declare functions that return an errno error code with a return type of errno_t</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_dcl10-c' name='rule_cert-c_dcl10-c'><div class='rule'><div class='id'>DCL10-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Maintain the contract between the writer and caller of variadic functions</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>41&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s41'>Ellipsis used in procedure parameter list.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_dcl11-c' name='rule_cert-c_dcl11-c'><div class='rule'><div class='id'>DCL11-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Understand the type issues associated with variadic functions</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>41&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s41'>Ellipsis used in procedure parameter list.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>589&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s589'>Format is not appropriate type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_dcl12-c' name='rule_cert-c_dcl12-c'><div class='rule'><div class='id'>DCL12-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Implement abstract data types using opaque types</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>352&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s352'>Declaration of type not in header file.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_dcl13-c' name='rule_cert-c_dcl13-c'><div class='rule'><div class='id'>DCL13-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Declare function parameters that are pointers to values not changed by the function as const</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>62&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d62'>Pointer parameter should be declared const.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_dcl14-c' name='rule_cert-c_dcl14-c'><div class='rule'><div class='id'>DCL14-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Do not make assumptions about the order of global variable initialization across translation units</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_dcl15-c' name='rule_cert-c_dcl15-c'><div class='rule'><div class='id'>DCL15-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Declare objects that do not need external linkage with the storage-class specifier static</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>27&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d27'>Variable should be declared static.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>61&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d61'>Procedure should be declared static.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>553&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s553'>Function and proto should both be static.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_dcl30-c' name='rule_cert-c_dcl30-c'><div class='rule'><div class='id'>DCL30-C<br/><span>Rule</span></div></div></a><div class='headline'>Declare objects with appropriate storage durations</div></div><p>In general, it is not possible to determine statically whether a pointer contains the address of an object that has lifetime greater than the current scope. The analysis highlights the assignment of all pointers to a wider scope. More details can be found in the documentation for <a href='standards.htm#standard_s71'>71 S</a> .</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>42&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d42'>Local pointer returned in function result.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>77&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d77'>Local structure returned in function result.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>71&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s71'>Pointer assignment to wider scope.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_222'>222</a> = 1</td>    </tr>
    <tr>    <td class='from'>565&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s565'>Assignment to wider scope.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_dcl31-c' name='rule_cert-c_dcl31-c'><div class='rule'><div class='id'>DCL31-C<br/><span>Rule</span></div></div></a><div class='headline'>Declare identifiers before using them</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>24&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d24'>Procedure definition has no associated prototype.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>41&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d41'>Procedure call has no prototype declared.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>20&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s20'>Parameter not declared explicitly.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>326&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s326'>Declaration is missing type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>496&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s496'>Function call with no prior declaration.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_dcl32-c' name='rule_cert-c_dcl32-c'><div class='rule'><div class='id'>DCL32-C<br/><span>Rule</span></div></div></a><div class='headline'>Guarantee that mutually visible identifiers are unique</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>17&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d17'>Identifier not unique within *** characters.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>355&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s355'>Variables not unique within *** characters.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>61&nbsp;X</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_x61'>Identifier match in *** chars.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_dcl33-c' name='rule_cert-c_dcl33-c'><div class='rule'><div class='id'>DCL33-C<br/><span>Rule</span></div></div></a><div class='headline'>Ensure that restrict-qualified source and destination pointers in function arguments do not reference overlapping objects</div></div><p><a href='standards.htm#standard_s613'>613 S</a> highlights all uses of the restrict qualifier.  The user must then manually check that the pointers cannot point to the same object.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>480&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s480'>String function params access same variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>613&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s613'>Use of restrict keyword.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_350'>350</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_dcl34-c' name='rule_cert-c_dcl34-c'><div class='rule'><div class='id'>DCL34-C<br/><span>Rule</span></div></div></a><div class='headline'>Use volatile for data that cannot be cached</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_dcl35-c' name='rule_cert-c_dcl35-c'><div class='rule'><div class='id'>DCL35-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not convert a function using a type that does not match the function definition</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>576&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s576'>Function pointer is of wrong type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_dcl36-c' name='rule_cert-c_dcl36-c'><div class='rule'><div class='id'>DCL36-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not declare an identifier with conflicting linkage classifications</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>461&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s461'>Identifier with ambiguous linkage.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>575&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s575'>Linkage differs from previous declaration.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>2&nbsp;X</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_x2'>Ambiguous declaration of variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_env00-c' name='rule_cert-c_env00-c'><div class='rule'><div class='id'>ENV00-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Do not store the pointer to the string returned by getenv()</div></div><p><a href='standards.htm#standard_s44'>44 S</a> highlights all uses of getenv.  The user must then manually check that the pointer is not used incorrectly.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>44&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s44'>Use of banned function or variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_env01-c' name='rule_cert-c_env01-c'><div class='rule'><div class='id'>ENV01-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Do not make assumptions about the size of an environment variable</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_env02-c' name='rule_cert-c_env02-c'><div class='rule'><div class='id'>ENV02-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Beware of multiple environment variables with the same effective name</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_env03-c' name='rule_cert-c_env03-c'><div class='rule'><div class='id'>ENV03-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Sanitize the environment when invoking external programs</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_env04-c' name='rule_cert-c_env04-c'><div class='rule'><div class='id'>ENV04-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Do not call system() if you do not need a command processor</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>588&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s588'>Use of system function.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_env30-c' name='rule_cert-c_env30-c'><div class='rule'><div class='id'>ENV30-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not modify the string returned by getenv()</div></div><p>Note: The current web version of ENV30-C has been expanded to include localconv, setlocale, and strerror which are also checked by 107 D.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>107&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d107'>Attempt to change system call capture string.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_env31-c' name='rule_cert-c_env31-c'><div class='rule'><div class='id'>ENV31-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not rely on an environment pointer following an operation that may invalidate it</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>118&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s118'>main must be int (void) or int (int,char*[]).</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_env32-c' name='rule_cert-c_env32-c'><div class='rule'><div class='id'>ENV32-C<br/><span>Rule</span></div></div></a><div class='headline'>No atexit handler should terminate in any way other than by returning</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_env33-c' name='rule_cert-c_env33-c'><div class='rule'><div class='id'>ENV33-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not call the longjmp function to terminate a call to a function registered by atexit()</div></div><p><a href='standards.htm#standard_s43'>43 S</a> highlights all uses of setjmp and longjmp  The user must then manually check that the jump is used in a correct manner.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>43&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s43'>Use of setjmp/longjmp.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_err00-c' name='rule_cert-c_err00-c'><div class='rule'><div class='id'>ERR00-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Adopt and implement a consistent and comprehensive error-handling policy</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_err01-c' name='rule_cert-c_err01-c'><div class='rule'><div class='id'>ERR01-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Use ferror() rather than errno to check for FILE stream errors</div></div><p><a href='standards.htm#standard_s44'>44 S</a> highlights all uses of errno.  The user must then manually check whether the use is related to the File stream.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>44&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s44'>Use of banned function or variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_err02-c' name='rule_cert-c_err02-c'><div class='rule'><div class='id'>ERR02-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Avoid in-band error indicators</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_err03-c' name='rule_cert-c_err03-c'><div class='rule'><div class='id'>ERR03-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Use runtime-constraint handlers when calling functions defined by TR31-1</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_err04-c' name='rule_cert-c_err04-c'><div class='rule'><div class='id'>ERR04-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Choose an appropriate termination strategy</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_err05-c' name='rule_cert-c_err05-c'><div class='rule'><div class='id'>ERR05-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Application-independent code should provide error detection without dictating error handling</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_err06-c' name='rule_cert-c_err06-c'><div class='rule'><div class='id'>ERR06-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Understand the termination behavior of assert() and abort()</div></div><p><a href='standards.htm#standard_s44'>44 S</a> highlights all uses of assert.  The user must then manually check whether the use is compliant with this rule.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>44&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s44'>Use of banned function or variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_err30-c' name='rule_cert-c_err30-c'><div class='rule'><div class='id'>ERR30-C<br/><span>Rule</span></div></div></a><div class='headline'>Set errno to zero before calling a library function known to set errno, and check errno only after the function returns a value indicating failure</div></div><p><a href='standards.htm#standard_s44'>44 S</a> highlights all uses of errno.  The user must then manually check whether the use is compliant with this rule.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>111&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d111'>Errno checked without having been set.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>44&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s44'>Use of banned function or variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_err31-c' name='rule_cert-c_err31-c'><div class='rule'><div class='id'>ERR31-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not redefine errno</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>86&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s86'>Attempt to define reserved word.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>218&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s218'>Name is used in standard libraries.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_err32-c' name='rule_cert-c_err32-c'><div class='rule'><div class='id'>ERR32-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not rely on indeterminate values of errno</div></div><p><a href='standards.htm#standard_s44'>44 S</a> highlights all uses of errno.  The user must then manually check whether the use is compliant with this rule.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>44&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s44'>Use of banned function or variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_exp00-c' name='rule_cert-c_exp00-c'><div class='rule'><div class='id'>EXP00-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Use parentheses for precedence of operation</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>49&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s49'>Logical conjunctions need brackets.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_206'>206</a> = 1</td>    </tr>
    <tr>    <td class='from'>361&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s361'>Expression needs brackets.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_119'>119</a> = 0 (Default), <a href='standard_flags.htm#flag_264'>264</a> = 1, <a href='standard_flags.htm#flag_414'>414</a> = 0 (Default), <a href='standard_flags.htm#flag_420'>420</a> = 0 (Default), <a href='standard_flags.htm#flag_421'>421</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_exp01-c' name='rule_cert-c_exp01-c'><div class='rule'><div class='id'>EXP01-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Do not take the size of a pointer to determine the size of the pointed-to type</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>577&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s577'>Sizeof argument is a pointer.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_exp02-c' name='rule_cert-c_exp02-c'><div class='rule'><div class='id'>EXP02-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Be aware of the short-circuit behavior of the logical AND and OR operators</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>35&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d35'>Expression has side effects.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>1&nbsp;Q</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_q1'>Call has execution order dependant side effects.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>133&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s133'>Assignment operator in RHS of &amp;&amp; or ||.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>406&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s406'>Use of ++ or -- on RHS of &amp;&amp; or || operator.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>408&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s408'>Volatile variable accessed on RHS of &amp;&amp; or ||.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_exp03-c' name='rule_cert-c_exp03-c'><div class='rule'><div class='id'>EXP03-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Do not assume the size of a structure is the sum of the sizes of its members</div></div><p><a href='standards.htm#standard_s578'>578 S</a> highlights all uses of sizeof on an arithmetic expression.  The user must then manually check whether the expression violates this rule.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>578&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s578'>Sizeof used in arithmetic expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_exp04-c' name='rule_cert-c_exp04-c'><div class='rule'><div class='id'>EXP04-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Do not perform byte-by-byte comparisons between structures</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>618&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s618'>Use of memcmp between structures.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_exp05-c' name='rule_cert-c_exp05-c'><div class='rule'><div class='id'>EXP05-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Do not cast away a const qualification</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>203&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s203'>Cast on a constant value.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_390'>390</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_exp06-c' name='rule_cert-c_exp06-c'><div class='rule'><div class='id'>EXP06-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Operands to the sizeof operator should not contain side effects</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>54&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s54'>Sizeof operator with side effects.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_exp07-c' name='rule_cert-c_exp07-c'><div class='rule'><div class='id'>EXP07-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Do not diminish the benefits of constants by assuming their values in expressions</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>201&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s201'>Use of numeric literal in expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_217'>217</a> = 0 (Default), <a href='standard_flags.htm#flag_163'>163</a> = 1 (Default), <a href='standard_flags.htm#flag_237'>237</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_exp08-c' name='rule_cert-c_exp08-c'><div class='rule'><div class='id'>EXP08-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Ensure pointer arithmetic is used correctly</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>45&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d45'>Pointer not checked for null before use.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>53&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d53'>Attempt to use uninitialised pointer.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>54&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d54'>Unsafe use of function pointer variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>438&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s438'>Pointer subtraction not addressing one array.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>576&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s576'>Function pointer is of wrong type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_exp09-c' name='rule_cert-c_exp09-c'><div class='rule'><div class='id'>EXP09-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Use sizeof to determine the size of a type or variable</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>201&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s201'>Use of numeric literal in expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_217'>217</a> = 0 (Default), <a href='standard_flags.htm#flag_163'>163</a> = 1 (Default), <a href='standard_flags.htm#flag_237'>237</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_exp10-c' name='rule_cert-c_exp10-c'><div class='rule'><div class='id'>EXP10-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Do not depend on the order of evaluation of subexpressions or the order in which side effects take place</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>35&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d35'>Expression has side effects.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>72&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d72'>Potential side effect problem in expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>74&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d74'>Potential side effect from repeated function call.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>1&nbsp;Q</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_q1'>Call has execution order dependant side effects.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>134&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s134'>Volatile variable in complex expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_exp11-c' name='rule_cert-c_exp11-c'><div class='rule'><div class='id'>EXP11-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Do not apply operators expecting one type to data of an incompatible type</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>94&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s94'>Casting operation on a pointer.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_396'>396</a> = 1, <a href='standard_flags.htm#flag_397'>397</a> = 0 (Default), <a href='standard_flags.htm#flag_439'>439</a> = 1, <a href='standard_flags.htm#flag_440'>440</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>95&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s95'>Casting operation to a pointer.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_381'>381</a> = 0 (Default), <a href='standard_flags.htm#flag_396'>396</a> = 0 (Default), <a href='standard_flags.htm#flag_397'>397</a> = 0 (Default), <a href='standard_flags.htm#flag_440'>440</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>554&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s554'>Cast to an unrelated type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>635&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s635'>Cast from pointer to float type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>636&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s636'>Cast from float type to pointer.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_exp12-c' name='rule_cert-c_exp12-c'><div class='rule'><div class='id'>EXP12-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Do not ignore values returned by functions</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>382&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s382'>(void) missing for discarded return value.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_383'>383</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_exp30-c' name='rule_cert-c_exp30-c'><div class='rule'><div class='id'>EXP30-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not depend on order of evaluation between sequence points</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>35&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d35'>Expression has side effects.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>1&nbsp;Q</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_q1'>Call has execution order dependant side effects.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>9&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s9'>Assignment operation in expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_259'>259</a> = 0 (Default), <a href='standard_flags.htm#flag_266'>266</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>30&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s30'>Deprecated usage of ++ or -- operators found.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_122'>122</a> = 1 (Default)</td>    </tr>
    <tr>    <td class='from'>134&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s134'>Volatile variable in complex expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_exp31-c' name='rule_cert-c_exp31-c'><div class='rule'><div class='id'>EXP31-C<br/><span>Rule</span></div></div></a><div class='headline'>Avoid side effects in assertions</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>9&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s9'>Assignment operation in expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_259'>259</a> = 0 (Default), <a href='standard_flags.htm#flag_266'>266</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>30&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s30'>Deprecated usage of ++ or -- operators found.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_122'>122</a> = 1 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_exp32-c' name='rule_cert-c_exp32-c'><div class='rule'><div class='id'>EXP32-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not cast away a volatile qualification</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>344&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s344'>Cast on volatile value.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_395'>395</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_exp33-c' name='rule_cert-c_exp33-c'><div class='rule'><div class='id'>EXP33-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not reference uninitialized memory</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>53&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d53'>Attempt to use uninitialised pointer.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>69&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d69'>UR anomaly, variable used before assignment.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>631&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s631'>Declaration not reachable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_exp34-c' name='rule_cert-c_exp34-c'><div class='rule'><div class='id'>EXP34-C<br/><span>Rule</span></div></div></a><div class='headline'>Ensure a null pointer is not dereferenced</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>45&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d45'>Pointer not checked for null before use.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_exp35-c' name='rule_cert-c_exp35-c'><div class='rule'><div class='id'>EXP35-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not access or modify the result of a function call after a subsequent sequence point</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_exp36-c' name='rule_cert-c_exp36-c'><div class='rule'><div class='id'>EXP36-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not convert pointers into more strictly aligned pointer types</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>94&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s94'>Casting operation on a pointer.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_396'>396</a> = 1, <a href='standard_flags.htm#flag_397'>397</a> = 0 (Default), <a href='standard_flags.htm#flag_439'>439</a> = 1, <a href='standard_flags.htm#flag_440'>440</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>540&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s540'>Cast from pointer to void to pointer.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>554&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s554'>Cast to an unrelated type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>606&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s606'>Cast involving function pointer.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_398'>398</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_exp37-c' name='rule_cert-c_exp37-c'><div class='rule'><div class='id'>EXP37-C<br/><span>Rule</span></div></div></a><div class='headline'>Call functions with the arguments intended by the API</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>41&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d41'>Procedure call has no prototype declared.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>21&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s21'>Number of parameters does not match.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>98&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s98'>Actual and formal parameters inconsistent (MR).</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>170&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s170'>Procedure call has no prototype and no defn.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>496&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s496'>Function call with no prior declaration.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_exp38-c' name='rule_cert-c_exp38-c'><div class='rule'><div class='id'>EXP38-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not call offsetof() on bit-field members or invalid types</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>44&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s44'>Use of banned function or variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio00-c' name='rule_cert-c_fio00-c'><div class='rule'><div class='id'>FIO00-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Take care when creating format strings</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>486&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s486'>Incorrect number of formats in output function.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>589&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s589'>Format is not appropriate type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio01-c' name='rule_cert-c_fio01-c'><div class='rule'><div class='id'>FIO01-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Be careful using functions that use file names for identification</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>592&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s592'>Use of filename based functions.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio02-c' name='rule_cert-c_fio02-c'><div class='rule'><div class='id'>FIO02-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Canonicalize path names originating from untrusted sources</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>85&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d85'>Filename not verified before fopen.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio03-c' name='rule_cert-c_fio03-c'><div class='rule'><div class='id'>FIO03-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Do not make assumptions about fopen() and file creation</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio04-c' name='rule_cert-c_fio04-c'><div class='rule'><div class='id'>FIO04-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Detect and handle input and output errors</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>80&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d80'>Potentially unused function-modified value.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>382&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s382'>(void) missing for discarded return value.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_383'>383</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio05-c' name='rule_cert-c_fio05-c'><div class='rule'><div class='id'>FIO05-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Identify files using multiple file attributes</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio06-c' name='rule_cert-c_fio06-c'><div class='rule'><div class='id'>FIO06-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Create files with appropriate access permissions</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio07-c' name='rule_cert-c_fio07-c'><div class='rule'><div class='id'>FIO07-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Prefer fseek() to rewind()</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>593&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s593'>Use fseek() rather than rewind().</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio08-c' name='rule_cert-c_fio08-c'><div class='rule'><div class='id'>FIO08-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Take care when calling remove() on an open file</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>81&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d81'>Attempt to remove an open file.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio09-c' name='rule_cert-c_fio09-c'><div class='rule'><div class='id'>FIO09-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Be careful with binary data when transferring data across systems</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio10-c' name='rule_cert-c_fio10-c'><div class='rule'><div class='id'>FIO10-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Take care when using the rename() function</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio11-c' name='rule_cert-c_fio11-c'><div class='rule'><div class='id'>FIO11-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Take care when specifying the mode parameter of fopen()</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>590&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s590'>Mode fault in fopen.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio12-c' name='rule_cert-c_fio12-c'><div class='rule'><div class='id'>FIO12-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Prefer setvbuf() to setbuf()</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>594&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s594'>Use setvbuf() rather than setbuf().</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio13-c' name='rule_cert-c_fio13-c'><div class='rule'><div class='id'>FIO13-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Never push back anything other than one read character</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>83&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d83'>Potentially repeated call to ungetc.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio14-c' name='rule_cert-c_fio14-c'><div class='rule'><div class='id'>FIO14-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Understand the difference between text mode and binary mode with file streams</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio15-c' name='rule_cert-c_fio15-c'><div class='rule'><div class='id'>FIO15-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Ensure that file operations are performed in a secure directory</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio16-c' name='rule_cert-c_fio16-c'><div class='rule'><div class='id'>FIO16-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Limit access to files by creating a jail</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio30-c' name='rule_cert-c_fio30-c'><div class='rule'><div class='id'>FIO30-C<br/><span>Rule</span></div></div></a><div class='headline'>Exclude user input from format strings</div></div><p>The analysis highlights all uses of possibly tainted values from the I/O library functions.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>86&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d86'>User input not checked before use.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio31-c' name='rule_cert-c_fio31-c'><div class='rule'><div class='id'>FIO31-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not simultaneously open the same file multiple times</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>75&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d75'>Attempt to open file pointer more than once.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio32-c' name='rule_cert-c_fio32-c'><div class='rule'><div class='id'>FIO32-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not perform operations on devices that are only appropriate for files</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio33-c' name='rule_cert-c_fio33-c'><div class='rule'><div class='id'>FIO33-C<br/><span>Rule</span></div></div></a><div class='headline'>Detect and handle input output errors resulting in undefined behavior</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>80&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d80'>Potentially unused function-modified value.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>382&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s382'>(void) missing for discarded return value.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_383'>383</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio34-c' name='rule_cert-c_fio34-c'><div class='rule'><div class='id'>FIO34-C<br/><span>Rule</span></div></div></a><div class='headline'>Use int to capture the return value of character I/O functions</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>433&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s433'>Type conversion without cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1, <a href='standard_flags.htm#flag_441'>441</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio35-c' name='rule_cert-c_fio35-c'><div class='rule'><div class='id'>FIO35-C<br/><span>Rule</span></div></div></a><div class='headline'>Use feof() and ferror() to detect end-of-file and file errors when sizeof(int) == sizeof(char)</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio36-c' name='rule_cert-c_fio36-c'><div class='rule'><div class='id'>FIO36-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not assume a new-line character is read when using fgets()</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio37-c' name='rule_cert-c_fio37-c'><div class='rule'><div class='id'>FIO37-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not assume character data has been read</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio38-c' name='rule_cert-c_fio38-c'><div class='rule'><div class='id'>FIO38-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not use a copy of a FILE object for input and output</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>591&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s591'>Inappropriate use of file pointer.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio39-c' name='rule_cert-c_fio39-c'><div class='rule'><div class='id'>FIO39-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not alternately input and output from a stream without an intervening flush or positioning call</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>84&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d84'>No fseek or flush before I/O.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio40-c' name='rule_cert-c_fio40-c'><div class='rule'><div class='id'>FIO40-C<br/><span>Rule</span></div></div></a><div class='headline'>Reset strings on fgets() failure</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio41-c' name='rule_cert-c_fio41-c'><div class='rule'><div class='id'>FIO41-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not call getc() or putc() with stream arguments that have side effects</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>35&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d35'>Expression has side effects.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>1&nbsp;Q</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_q1'>Call has execution order dependant side effects.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>9&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s9'>Assignment operation in expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_259'>259</a> = 0 (Default), <a href='standard_flags.htm#flag_266'>266</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>30&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s30'>Deprecated usage of ++ or -- operators found.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_122'>122</a> = 1 (Default)</td>    </tr>
    <tr>    <td class='from'>134&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s134'>Volatile variable in complex expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio42-c' name='rule_cert-c_fio42-c'><div class='rule'><div class='id'>FIO42-C<br/><span>Rule</span></div></div></a><div class='headline'>Ensure files are properly closed when they are no longer needed</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>49&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d49'>File pointer not closed on exit.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio43-c' name='rule_cert-c_fio43-c'><div class='rule'><div class='id'>FIO43-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not create temporary files in shared directories</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>44&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s44'>Use of banned function or variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_fio44-c' name='rule_cert-c_fio44-c'><div class='rule'><div class='id'>FIO44-C<br/><span>Rule</span></div></div></a><div class='headline'>Only use values for fsetpos() that are returned from fgetpos()</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>82&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d82'>fsetpos values not generated by fgetpos.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_flp00-c' name='rule_cert-c_flp00-c'><div class='rule'><div class='id'>FLP00-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Understand the limitations of floating-point numbers</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_flp01-c' name='rule_cert-c_flp01-c'><div class='rule'><div class='id'>FLP01-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Take care in rearranging floating-point expressions</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_flp02-c' name='rule_cert-c_flp02-c'><div class='rule'><div class='id'>FLP02-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Consider avoiding floating-point numbers when precise computation is needed</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_flp03-c' name='rule_cert-c_flp03-c'><div class='rule'><div class='id'>FLP03-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Detect and handle floating-point errors</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>43&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d43'>Divide by 0 found.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>433&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s433'>Type conversion without cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1, <a href='standard_flags.htm#flag_441'>441</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_flp30-c' name='rule_cert-c_flp30-c'><div class='rule'><div class='id'>FLP30-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not use floating-point variables as loop counters</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>39&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s39'>Unsuitable type for loop variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_flp31-c' name='rule_cert-c_flp31-c'><div class='rule'><div class='id'>FLP31-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not call functions expecting real values with complex values</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_flp32-c' name='rule_cert-c_flp32-c'><div class='rule'><div class='id'>FLP32-C<br/><span>Rule</span></div></div></a><div class='headline'>Prevent or detect domain and range errors in math functions</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_flp33-c' name='rule_cert-c_flp33-c'><div class='rule'><div class='id'>FLP33-C<br/><span>Rule</span></div></div></a><div class='headline'>Convert integers to floating point for floating-point operations</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>435&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s435'>Float/integer conversion without cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_flp34-c' name='rule_cert-c_flp34-c'><div class='rule'><div class='id'>FLP34-C<br/><span>Rule</span></div></div></a><div class='headline'>Ensure that floating-point conversions are within range of the new type</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_flp35-c' name='rule_cert-c_flp35-c'><div class='rule'><div class='id'>FLP35-C<br/><span>Rule</span></div></div></a><div class='headline'>Take granularity into account when comparing floating point values</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>56&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s56'>Equality comparison of floating point.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_223'>223</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_int00-c' name='rule_cert-c_int00-c'><div class='rule'><div class='id'>INT00-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Understand the data model used by your implementation(s)</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_int01-c' name='rule_cert-c_int01-c'><div class='rule'><div class='id'>INT01-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Use rsize_t or size_t for all integer values representing the size of an object</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>93&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s93'>Value is not of appropriate type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1, <a href='standard_flags.htm#flag_372'>372</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_int02-c' name='rule_cert-c_int02-c'><div class='rule'><div class='id'>INT02-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Understand integer conversion rules</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>52&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s52'>Unsigned expression negated.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>93&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s93'>Value is not of appropriate type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1, <a href='standard_flags.htm#flag_372'>372</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>96&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s96'>Use of mixed mode arithmetic.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : 267 = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>101&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s101'>Function return type inconsistent.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_374'>374</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>107&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s107'>Type mismatch in ternary expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>332&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s332'>Widening cast on complex integer expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>334&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s334'>No cast when ~ or &lt;&lt; applied to small types.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>433&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s433'>Type conversion without cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1, <a href='standard_flags.htm#flag_441'>441</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>434&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s434'>Signed/unsigned conversion without cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_358'>358</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>442&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s442'>Signed integral type cast to unsigned.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_323'>323</a> = 1, <a href='standard_flags.htm#flag_191'>191</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>443&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s443'>Unsigned integral type cast to signed.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_323'>323</a> = 1, <a href='standard_flags.htm#flag_191'>191</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>446&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s446'>Narrower int conversion without cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>452&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s452'>No cast for widening complex int expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>457&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s457'>Implicit int widening for function return.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>458&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s458'>Implicit conversion: actual to formal param.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>491&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s491'>No cast for widening int parameter.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_int03-c' name='rule_cert-c_int03-c'><div class='rule'><div class='id'>INT03-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Use a secure integer library</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_int04-c' name='rule_cert-c_int04-c'><div class='rule'><div class='id'>INT04-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Enforce limits on integer values originating from untrusted sources</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_int05-c' name='rule_cert-c_int05-c'><div class='rule'><div class='id'>INT05-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Do not use input functions to convert character data if they cannot handle all possible inputs</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_int06-c' name='rule_cert-c_int06-c'><div class='rule'><div class='id'>INT06-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Use strtol() or a related function to convert a string token to an integer</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>44&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s44'>Use of banned function or variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_int07-c' name='rule_cert-c_int07-c'><div class='rule'><div class='id'>INT07-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Use only explicitly signed or unsigned char type for numeric values</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>93&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s93'>Value is not of appropriate type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1, <a href='standard_flags.htm#flag_372'>372</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>101&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s101'>Function return type inconsistent.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_374'>374</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>329&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s329'>Operation not appropriate to plain char.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_391'>391</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>432&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s432'>Inappropriate type - should be plain char.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>458&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s458'>Implicit conversion: actual to formal param.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_int08-c' name='rule_cert-c_int08-c'><div class='rule'><div class='id'>INT08-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Verify that all integer values are in range</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>488&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s488'>Value outside range of underlying type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_int09-c' name='rule_cert-c_int09-c'><div class='rule'><div class='id'>INT09-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Ensure enumeration constants map to unique values</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>85&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s85'>Incomplete initialisation of enumerator.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_377'>377</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_int10-c' name='rule_cert-c_int10-c'><div class='rule'><div class='id'>INT10-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Do not assume a positive remainder when using the % operator</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>584&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s584'>Remainder of % op could be negative.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_int11-c' name='rule_cert-c_int11-c'><div class='rule'><div class='id'>INT11-C<br/><span>Rule</span></div></div></a><div class='headline'>Take care when converting from pointer to integer or integer to pointer</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>439&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s439'>Cast from pointer to integral type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_397'>397</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>440&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s440'>Cast from integral type to pointer.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_397'>397</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_int12-c' name='rule_cert-c_int12-c'><div class='rule'><div class='id'>INT12-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Do not make assumptions about the type of a plain int bit-field when used in an expression</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>73&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s73'>Bit field not signed or unsigned int.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_int13-c' name='rule_cert-c_int13-c'><div class='rule'><div class='id'>INT13-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Use bitwise operators only on unsigned operands</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>50&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s50'>Use of shift operator on signed type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>120&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s120'>Use of bit operator on signed type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>331&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s331'>Literal value requires a U suffix.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_309'>309</a> = 0 (Default), <a href='standard_flags.htm#flag_358'>358</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_int14-c' name='rule_cert-c_int14-c'><div class='rule'><div class='id'>INT14-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Avoid performing bitwise and arithmetic operations on the same data</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>585&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s585'>Bitwise and arith operations on same data.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_int15-c' name='rule_cert-c_int15-c'><div class='rule'><div class='id'>INT15-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Use intmax_t or uintmax_t for formatted I/O on programmer-defined integer types</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>439&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s439'>Cast from pointer to integral type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_397'>397</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>440&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s440'>Cast from integral type to pointer.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_397'>397</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>586&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s586'>Format is not %j for user defined type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_350'>350</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_int30-c' name='rule_cert-c_int30-c'><div class='rule'><div class='id'>INT30-C<br/><span>Rule</span></div></div></a><div class='headline'>Ensure that unsigned integer operations do not wrap</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_int31-c' name='rule_cert-c_int31-c'><div class='rule'><div class='id'>INT31-C<br/><span>Rule</span></div></div></a><div class='headline'>Ensure that integer conversions do not result in lost or misinterpreted data</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>93&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s93'>Value is not of appropriate type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1, <a href='standard_flags.htm#flag_372'>372</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>433&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s433'>Type conversion without cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1, <a href='standard_flags.htm#flag_441'>441</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>434&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s434'>Signed/unsigned conversion without cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_358'>358</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_int32-c' name='rule_cert-c_int32-c'><div class='rule'><div class='id'>INT32-C<br/><span>Rule</span></div></div></a><div class='headline'>Ensure that operations on signed integers do not result in overflow</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>493&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s493'>Numeric overflow.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>494&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s494'>Numeric underflow.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_int33-c' name='rule_cert-c_int33-c'><div class='rule'><div class='id'>INT33-C<br/><span>Rule</span></div></div></a><div class='headline'>Ensure that division and modulo operations do not result in divide-by-zero errors</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>43&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d43'>Divide by 0 found.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>248&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s248'>Divide by zero in preprocessor directive.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>629&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s629'>Divide by zero found.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_int34-c' name='rule_cert-c_int34-c'><div class='rule'><div class='id'>INT34-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not shift a negative number of bits or more bits than exist in the operand</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>51&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s51'>Shifting value too far.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>403&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s403'>Negative (or potentially negative) shift.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>479&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s479'>Right shift loses all bits.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_int35-c' name='rule_cert-c_int35-c'><div class='rule'><div class='id'>INT35-C<br/><span>Rule</span></div></div></a><div class='headline'>Evaluate integer expressions in a larger size before comparing or assigning to that size</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>452&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s452'>No cast for widening complex int expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_mem00-c' name='rule_cert-c_mem00-c'><div class='rule'><div class='id'>MEM00-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Allocate and free memory in the same module at the same level of abstraction</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>50&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d50'>Memory not freed after last reference.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_mem01-c' name='rule_cert-c_mem01-c'><div class='rule'><div class='id'>MEM01-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Store a new value in pointers immediately after free()</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>484&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s484'>Attempt to use already freed object.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_mem02-c' name='rule_cert-c_mem02-c'><div class='rule'><div class='id'>MEM02-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Immediately cast the result of a memory allocation function call into a pointer to the allocated type</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_mem03-c' name='rule_cert-c_mem03-c'><div class='rule'><div class='id'>MEM03-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Clear sensitive information stored in reusable resources returned for reuse</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_mem04-c' name='rule_cert-c_mem04-c'><div class='rule'><div class='id'>MEM04-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Do not perform zero-length allocations</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_mem05-c' name='rule_cert-c_mem05-c'><div class='rule'><div class='id'>MEM05-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Avoid large stack allocations</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_mem06-c' name='rule_cert-c_mem06-c'><div class='rule'><div class='id'>MEM06-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Ensure that sensitive data is not written out to disk</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_mem07-c' name='rule_cert-c_mem07-c'><div class='rule'><div class='id'>MEM07-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Ensure that the arguments to calloc(), when multiplied, can be represented as a size_t</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_mem08-c' name='rule_cert-c_mem08-c'><div class='rule'><div class='id'>MEM08-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Use realloc() only to resize dynamically allocated arrays</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_mem09-c' name='rule_cert-c_mem09-c'><div class='rule'><div class='id'>MEM09-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Do not assume memory allocation routines initialize memory</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_mem10-c' name='rule_cert-c_mem10-c'><div class='rule'><div class='id'>MEM10-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Use a pointer validation function</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_mem30-c' name='rule_cert-c_mem30-c'><div class='rule'><div class='id'>MEM30-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not access freed memory</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>51&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d51'>Attempt to read from freed memory.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_mem31-c' name='rule_cert-c_mem31-c'><div class='rule'><div class='id'>MEM31-C<br/><span>Rule</span></div></div></a><div class='headline'>Free dynamically allocated memory exactly once</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>112&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d112'>Free called twice on same variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>484&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s484'>Attempt to use already freed object.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_mem32-c' name='rule_cert-c_mem32-c'><div class='rule'><div class='id'>MEM32-C<br/><span>Rule</span></div></div></a><div class='headline'>Detect and handle memory allocation errors</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>45&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d45'>Pointer not checked for null before use.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_mem33-c' name='rule_cert-c_mem33-c'><div class='rule'><div class='id'>MEM33-C<br/><span>Rule</span></div></div></a><div class='headline'>Use the correct syntax for flexible array members</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_mem34-c' name='rule_cert-c_mem34-c'><div class='rule'><div class='id'>MEM34-C<br/><span>Rule</span></div></div></a><div class='headline'>Only free memory allocated dynamically</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>407&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s407'>free used on string.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>483&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s483'>free parameter is not heap item.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_mem35-c' name='rule_cert-c_mem35-c'><div class='rule'><div class='id'>MEM35-C<br/><span>Rule</span></div></div></a><div class='headline'>Allocate sufficient memory for an object</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>487&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s487'>Insufficient space allocated.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_mem36-c' name='rule_cert-c_mem36-c'><div class='rule'><div class='id'>MEM36-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not use volatile as a synchronization primitive</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>71&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s71'>Pointer assignment to wider scope.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_222'>222</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_msc00-c' name='rule_cert-c_msc00-c'><div class='rule'><div class='id'>MSC00-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Compile cleanly at high warning levels</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_msc01-c' name='rule_cert-c_msc01-c'><div class='rule'><div class='id'>MSC01-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Strive for logical completeness</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>12&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s12'>No brackets to then/else (added by Testbed).</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : tbend = &lt;Default&gt;</td>    </tr>
    <tr>    <td class='from'>48&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s48'>No default case in switch statement.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_252'>252</a> = 0 (Default), <a href='standard_flags.htm#flag_233'>233</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>59&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s59'>Else alternative missing in if.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : tbend = &lt;Default&gt;</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_msc02-c' name='rule_cert-c_msc02-c'><div class='rule'><div class='id'>MSC02-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Avoid errors of omission</div></div><p><a href='standards.htm#standard_s132'>132 S</a> highlights all uses of the assignment operator in boolean expressions.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>99&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s99'>Function use is not a call.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>132&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s132'>Assignment operator in boolean expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : 247 = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_msc03-c' name='rule_cert-c_msc03-c'><div class='rule'><div class='id'>MSC03-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Avoid errors of addition</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>5&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s5'>Empty then clause.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>57&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s57'>Statement with no side effect.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>58&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s58'>Null statement found.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>59&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s59'>Else alternative missing in if.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : tbend = &lt;Default&gt;</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_msc04-c' name='rule_cert-c_msc04-c'><div class='rule'><div class='id'>MSC04-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Use comments consistently and in a readable fashion</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>119&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s119'>Nested comment found.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_413'>413</a> = 0 (Default), <a href='standard_flags.htm#flag_434'>434</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>302&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s302'>Comment possibly contains code.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>611&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s611'>Line splice used in // comment.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_402'>402</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_msc05-c' name='rule_cert-c_msc05-c'><div class='rule'><div class='id'>MSC05-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Do not manipulate time_t typed values directly</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_msc06-c' name='rule_cert-c_msc06-c'><div class='rule'><div class='id'>MSC06-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Be aware of compiler optimization when dealing with sensitive data</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>105&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d105'>DU anomaly dead code, variable value is unused on all paths.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_msc07-c' name='rule_cert-c_msc07-c'><div class='rule'><div class='id'>MSC07-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Detect and remove dead code</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>1&nbsp;J</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_j1'>Unreachable Code found.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>139&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s139'>Construct leads to infeasible code.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>140&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s140'>Infeasible loop condition found.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_msc08-c' name='rule_cert-c_msc08-c'><div class='rule'><div class='id'>MSC08-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Library functions should validate their parameters</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_msc09-c' name='rule_cert-c_msc09-c'><div class='rule'><div class='id'>MSC09-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Character encoding: use subset of ASCII for safety</div></div><p>This rule applies to naming files, variables, and other objects, which includes the naming of files via strings.  Testbed includes a check for  strings that contain characters outside the C basic character set. The user must then manually check whether the string is used as a filename.
In order to minimise false positives, @ and $ are permitted but can be prohibited by using modifier 408 as described in documentation for  <a href='standards.htm#standard_s113'>113 S</a>.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>113&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s113'>Non standard character   in source.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_408'>408</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_msc10-c' name='rule_cert-c_msc10-c'><div class='rule'><div class='id'>MSC10-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Character encoding: UTF-8-related issues</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>176&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s176'>Non standard escape sequence    in source.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>376&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s376'>Use of octal escape sequence.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_msc11-c' name='rule_cert-c_msc11-c'><div class='rule'><div class='id'>MSC11-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Incorporate diagnostic tests using assertions</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_msc12-c' name='rule_cert-c_msc12-c'><div class='rule'><div class='id'>MSC12-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Detect and remove code that has no effect</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>65&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d65'>Void function has no side effects.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>105&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d105'>DU anomaly dead code, variable value is unused on all paths.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>57&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s57'>Statement with no side effect.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_msc13-c' name='rule_cert-c_msc13-c'><div class='rule'><div class='id'>MSC13-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Detect and remove unused values</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>1&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d1'>Unused procedure parameter.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>15&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d15'>Unused procedural parameter.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>94&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d94'>Named variable declared but not used in code.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>105&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d105'>DU anomaly dead code, variable value is unused on all paths.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_msc14-c' name='rule_cert-c_msc14-c'><div class='rule'><div class='id'>MSC14-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Do not introduce unnecessary platform dependencies</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_msc15-c' name='rule_cert-c_msc15-c'><div class='rule'><div class='id'>MSC15-C<br/><span>Recommendation</span></div></div></a><div class='headline'>There shall be no occurrence of undefined or critical unspecified behaviour</div></div><p>The mappings in this rule refer to the undefined features that are not covered by more specific rule.</p>
<table><tr><td> C90_4 </td><td> 608 S </td></tr>
<tr><td> C90_13 </td><td> 450 S </td></tr>
<tr><td> C90_49 </td><td> 324 S </td></tr>
<tr><td> C99_2 </td><td> 412 S, 5 Q </td></tr>
<tr><td> C99_14 </td><td> 63 X </td></tr>
<tr><td> C99_15 </td><td> 441 S </td></tr>
<tr><td> C99_16 </td><td> 445 S </td></tr>
<tr><td> C99_20 </td><td> 64 S, 65 S </td></tr>
<tr><td> C99_31 </td><td> 100 S </td></tr>
<tr><td> C99_39 </td><td> 62 X, 63 X </td></tr>
<tr><td> C99_43 </td><td> 72 X </td></tr>
<tr><td> C99_50 </td><td> 437 S </td></tr>
<tr><td> C99_51 </td><td> 545 S </td></tr>
<tr><td> C99_52 </td><td> 109 S </td></tr>
<tr><td> C99_56 </td><td> 465 S, 482 S, 497 S </td></tr>
<tr><td> C99_57 </td><td> 296 S </td></tr>
<tr><td> C99_58 </td><td> 497 S </td></tr>
<tr><td> C99_61 </td><td> 582 S, 587 S </td></tr>
<tr><td> C99_76 </td><td> 105 S </td></tr>
<tr><td> C99_77 </td><td> 105 S </td></tr>
<tr><td> C99_78 </td><td> 63 D </td></tr>
<tr><td> C99_82 </td><td> 2 D, 36 S, 66 S </td></tr>
<tr><td> C99_84 </td><td> 335 S, 336 S </td></tr>
<tr><td> C99_85 </td><td> 100 S, 339 S, 427 S </td></tr>
<tr><td> C99_87 </td><td> 341 S </td></tr>
<tr><td> C99_93 </td><td> 156 S </td></tr>
<tr><td> C99_138 </td><td> 130 S </td></tr>
<tr><td> C99_139 </td><td> 130 S </td></tr>
<tr><td> C99_140 </td><td> 48 D, 113 D </td></tr>
<tr><td> C99_144 </td><td> 130 S </td></tr>
<tr><td> C99_146 </td><td> 130 S </td></tr>
<tr><td> C99_147 </td><td> 130 S </td></tr>
<tr><td> C99_148 </td><td> 130 S </td></tr>
<tr><td> C99_149 </td><td> 130 S </td></tr>
<tr><td> C99_150 </td><td> 130 S </td></tr>
<tr><td> C99_151 </td><td> 130 S </td></tr>
<tr><td> C99_152 </td><td> 130 S </td></tr>
<tr><td> C99_153 </td><td> 130 S </td></tr>
<tr><td> C99_154 </td><td> 130 S </td></tr>
<tr><td> C99_155 </td><td> 130 S </td></tr>
<tr><td> C99_156 </td><td> 130 S </td></tr>
<tr><td> C99_157 </td><td> 130 S </td></tr>
<tr><td> C99_158 </td><td> 130 S </td></tr>
<tr><td> C99_159 </td><td> 130 S </td></tr>
<tr><td> C99_160 </td><td> 130 S </td></tr>
<tr><td> C99_161 </td><td> 130 S </td></tr>
<tr><td> C99_164 </td><td> 130 S </td></tr>
<tr><td> C99_165 </td><td> 130 S </td></tr>
<tr><td> C99_25 </td><td> 76 S, 608 S, 609 S </td></tr>
<tr><td> C90_ </td><td> 617 S </td></tr>
</table>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>2&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d2'>Function does not return a value on all paths.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>48&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d48'>Attempt to write to unopened file.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>63&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d63'>No definition in system for prototyped procedure.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>113&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d113'>File closed more than once.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>5&nbsp;Q</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_q5'>File does not end with new line.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>36&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s36'>Function has no return statement.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>64&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s64'>Void procedure used in expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_218'>218</a> = 1</td>    </tr>
    <tr>    <td class='from'>65&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s65'>Void variable passed as parameter.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>66&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s66'>Function with empty return expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>76&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s76'>More than one of # or ## in a macro.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>100&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s100'>#include filename is non conformant.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_120'>120</a> = '\&#44; (Default), <a href='standard_flags.htm#flag_331'>331</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>105&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s105'>Initialisation brace { } fault.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>109&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s109'>Array subscript is not integral.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>130&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s130'>Included file is not permitted.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>156&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s156'>Use of 'defined' keyword in macro body.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>296&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s296'>Function declared at block scope.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>324&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s324'>Macro call has wrong number of parameters.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>335&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s335'>Operator defined contains illegal items.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>336&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s336'>#if expansion contains define operator.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>339&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s339'>#include directive with illegal items.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>341&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s341'>Preprocessor construct as macro parameter.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>412&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s412'>Undefined behaviour, \ before E-O-F.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>427&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s427'>Filename in #include not in &lt; &gt; or &quot; &quot;.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>437&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s437'>&lt; &gt; &lt;= &gt;= used on different object pointers.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>441&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s441'>Float cast to non-float.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_323'>323</a> = 1, <a href='standard_flags.htm#flag_191'>191</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>445&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s445'>Narrower float conversion without cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>450&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s450'>Wide string and string concatenated.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>465&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s465'>Struct/union not completely specified.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>482&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s482'>Incomplete structure referenced.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>497&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s497'>Type is incomplete in translation unit.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>545&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s545'>Assignment of overlapping storage.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>582&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s582'>const object reassigned.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>587&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s587'>Const local variable not immediately initialised.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>608&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s608'>Use of explicitly undefined language feature.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>609&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s609'>Use of implicitly undefined language feature.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>617&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s617'>Function call may return unexpected value.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>62&nbsp;X</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_x62'>Function prototype/defn return type mismatch (MR).</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>63&nbsp;X</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_x63'>Function prototype/defn param type mismatch (MR).</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>72&nbsp;X</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_x72'>Parameter indexing array too small at call.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_msc30-c' name='rule_cert-c_msc30-c'><div class='rule'><div class='id'>MSC30-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not use the rand() function for generating pseudorandom numbers</div></div><p><a href='standards.htm#standard_s44'>44 S</a> highlights all uses of rand  The user must then manually check that the function is used a permitted by the rule.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>44&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s44'>Use of banned function or variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_msc31-c' name='rule_cert-c_msc31-c'><div class='rule'><div class='id'>MSC31-C<br/><span>Rule</span></div></div></a><div class='headline'>Ensure that return values are compared against the proper type</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>96&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s96'>Use of mixed mode arithmetic.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : 267 = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_pos00-c' name='rule_cert-c_pos00-c'><div class='rule'><div class='id'>POS00-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Avoid race conditions with multiple threads</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_pos01-c' name='rule_cert-c_pos01-c'><div class='rule'><div class='id'>POS01-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Check for the existence of links</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_pos02-c' name='rule_cert-c_pos02-c'><div class='rule'><div class='id'>POS02-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Follow the principle of least privilege</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_pos30-c' name='rule_cert-c_pos30-c'><div class='rule'><div class='id'>POS30-C<br/><span>Rule</span></div></div></a><div class='headline'>Use the readlink() function properly</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_pos31-c' name='rule_cert-c_pos31-c'><div class='rule'><div class='id'>POS31-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not unlock or destroy another thread's mutex</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_pos32-c' name='rule_cert-c_pos32-c'><div class='rule'><div class='id'>POS32-C<br/><span>Rule</span></div></div></a><div class='headline'>Include a mutex when using bit-fields in a multithreaded environment</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_pos33-c' name='rule_cert-c_pos33-c'><div class='rule'><div class='id'>POS33-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not use vfork()</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>44&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s44'>Use of banned function or variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_pos34-c' name='rule_cert-c_pos34-c'><div class='rule'><div class='id'>POS34-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not call putenv() with a pointer to an automatic variable as the argument</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_pos35-c' name='rule_cert-c_pos35-c'><div class='rule'><div class='id'>POS35-C<br/><span>Rule</span></div></div></a><div class='headline'>Avoid race conditions while checking for the existence of a symbolic link</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_pos36-c' name='rule_cert-c_pos36-c'><div class='rule'><div class='id'>POS36-C<br/><span>Rule</span></div></div></a><div class='headline'>Observe correct revocation order while relinquishing privileges</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_pos37-c' name='rule_cert-c_pos37-c'><div class='rule'><div class='id'>POS37-C<br/><span>Rule</span></div></div></a><div class='headline'>Ensure that privilege relinquishment is successful</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_pre00-c' name='rule_cert-c_pre00-c'><div class='rule'><div class='id'>PRE00-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Prefer inline or static functions to function-like macros</div></div><p>The analysis highlights all uses of function-like macros. The user must then manually check whether they can be replaced by a function without causing a compiler error.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>340&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s340'>Use of function like macro.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_pre01-c' name='rule_cert-c_pre01-c'><div class='rule'><div class='id'>PRE01-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Use parentheses within macros around parameter names</div></div><p>The analysis highlights all missing brackets. The user must then manually check whether they are allowed by the exceptions to this rule.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>78&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s78'>Macro parameter not in brackets.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_pre02-c' name='rule_cert-c_pre02-c'><div class='rule'><div class='id'>PRE02-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Macro replacement lists should be parenthesized</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>77&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s77'>Macro replacement list needs parentheses.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_pre03-c' name='rule_cert-c_pre03-c'><div class='rule'><div class='id'>PRE03-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Prefer type definitions to defines for encoding types</div></div><p>The analysis restricts the use of macro to those places permitted by MISRA-C:2004 rule 19.4. The user must then manually filter the messages for those relating to PRE03-C and PRE09-C.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>79&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s79'>Macro contains unacceptable items.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_298'>298</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_pre04-c' name='rule_cert-c_pre04-c'><div class='rule'><div class='id'>PRE04-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Do not reuse a standard header file name</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>568&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s568'>#include &quot;filename&quot; uses standard library name.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_344'>344</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_pre05-c' name='rule_cert-c_pre05-c'><div class='rule'><div class='id'>PRE05-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Understand macro replacement when concatenating tokens or performing stringification</div></div><p>The analysis highlights all uses of # and ##. The user must then manually check that the use is permitted by the rule.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>125&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s125'>Use of ## or # in a macro.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_pre06-c' name='rule_cert-c_pre06-c'><div class='rule'><div class='id'>PRE06-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Enclose header files in an inclusion guard</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>243&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s243'>Included file not protected with #define.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_pre07-c' name='rule_cert-c_pre07-c'><div class='rule'><div class='id'>PRE07-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Avoid using repeated question marks</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>81&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s81'>Use of trigraph.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_pre08-c' name='rule_cert-c_pre08-c'><div class='rule'><div class='id'>PRE08-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Guarantee that header file names are unique</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_pre09-c' name='rule_cert-c_pre09-c'><div class='rule'><div class='id'>PRE09-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Do not replace secure functions with less secure functions</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_pre10-c' name='rule_cert-c_pre10-c'><div class='rule'><div class='id'>PRE10-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Wrap multistatement macros in a do-while loop</div></div><p>The analysis restricts the use of macro to those places permitted by MISRA-C:2004 rule 19.4. The user must then manually filter the messages for those relating to  PRE03-C and PRE09-C.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>79&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s79'>Macro contains unacceptable items.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_298'>298</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_pre30-c' name='rule_cert-c_pre30-c'><div class='rule'><div class='id'>PRE30-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not create a universal character name through concatenation</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>573&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s573'>Macro concatenation of uni char names.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_pre31-c' name='rule_cert-c_pre31-c'><div class='rule'><div class='id'>PRE31-C<br/><span>Rule</span></div></div></a><div class='headline'>Never invoke an unsafe macro with arguments containing assignment, increment, decrement, volatile access, or function call</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>9&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s9'>Assignment operation in expression.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_259'>259</a> = 0 (Default), <a href='standard_flags.htm#flag_266'>266</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>562&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s562'>Use of ++,-- or = in macro parameters.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_sig00-c' name='rule_cert-c_sig00-c'><div class='rule'><div class='id'>SIG00-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Mask signals handled by noninterruptible signal handlers</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_sig01-c' name='rule_cert-c_sig01-c'><div class='rule'><div class='id'>SIG01-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Understand implementation-specific details regarding signal handler persistence</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_sig02-c' name='rule_cert-c_sig02-c'><div class='rule'><div class='id'>SIG02-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Avoid using signals to implement normal functionality</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_sig30-c' name='rule_cert-c_sig30-c'><div class='rule'><div class='id'>SIG30-C<br/><span>Rule</span></div></div></a><div class='headline'>Call only asynchronous-safe functions within signal handlers</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_sig31-c' name='rule_cert-c_sig31-c'><div class='rule'><div class='id'>SIG31-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not access or modify shared objects in signal handlers</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>87&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d87'>Illegal shared object in signal handler.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_sig32-c' name='rule_cert-c_sig32-c'><div class='rule'><div class='id'>SIG32-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not call longjmp() from inside a signal handler</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>88&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d88'>Illegal use of longjmp in signal handler.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_sig33-c' name='rule_cert-c_sig33-c'><div class='rule'><div class='id'>SIG33-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not recursively invoke the raise() function</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>89&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d89'>Illegal use of raise in signal handler.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_sig34-c' name='rule_cert-c_sig34-c'><div class='rule'><div class='id'>SIG34-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not call signal() from within interruptible signal handlers</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>97&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d97'>Signal called from within signal handler.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_str00-c' name='rule_cert-c_str00-c'><div class='rule'><div class='id'>STR00-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Represent characters using an appropriate type</div></div><p>This rule gives a Philosophy rather than instructions as to what is allowed. This rule overlaps with  INT07-C and STR04-C.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>329&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s329'>Operation not appropriate to plain char.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_391'>391</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>432&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s432'>Inappropriate type - should be plain char.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_str01-c' name='rule_cert-c_str01-c'><div class='rule'><div class='id'>STR01-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Adopt and implement a consistent plan for managing strings</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_str02-c' name='rule_cert-c_str02-c'><div class='rule'><div class='id'>STR02-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Sanitize data passed to complex subsystems</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_str03-c' name='rule_cert-c_str03-c'><div class='rule'><div class='id'>STR03-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Do not inadvertently truncate a null-terminated byte string</div></div><p>The analysis highlights use of strncpy, strncat,fgets and snprintf. Other functions can be added as described in the documentation for <a href='standards.htm#standard_s44'>44 S</a>.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>44&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s44'>Use of banned function or variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>115&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s115'>String incorrectly terminated.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_str04-c' name='rule_cert-c_str04-c'><div class='rule'><div class='id'>STR04-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Use plain char for characters in the basic character set</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>93&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s93'>Value is not of appropriate type.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1, <a href='standard_flags.htm#flag_372'>372</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>101&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s101'>Function return type inconsistent.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_374'>374</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>329&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s329'>Operation not appropriate to plain char.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_391'>391</a> = 0 (Default)</td>    </tr>
    <tr>    <td class='from'>432&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s432'>Inappropriate type - should be plain char.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>458&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s458'>Implicit conversion: actual to formal param.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_str05-c' name='rule_cert-c_str05-c'><div class='rule'><div class='id'>STR05-C<br/><span>Rule</span></div></div></a><div class='headline'>Use pointers to const when referring to string literals</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>623&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s623'>String assigned to non const object.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_str06-c' name='rule_cert-c_str06-c'><div class='rule'><div class='id'>STR06-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Do not assume that strtok() leaves the parse string unchanged</div></div><p>The analysis highlights all uses of strtok with a string parameter. The user must then manually check that the use is permitted by the rule.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>602&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s602'>strtok may change the parse string.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_str07-c' name='rule_cert-c_str07-c'><div class='rule'><div class='id'>STR07-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Use TR31 for remediation of existing string manipulation code</div></div><p>If ISO/IEC TR 24731 functions ( such as strcpy_s ) are available,  th n the corresponding standard functions ( such as strcpy) should be added to the list of banned functions as described in the documentation for <a href='standards.htm#standard_s44'>44 S</a>.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_str08-c' name='rule_cert-c_str08-c'><div class='rule'><div class='id'>STR08-C<br/><span>Recommendation</span></div></div></a><div class='headline'>Use managed strings for development of new string manipulation code</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_str30-c' name='rule_cert-c_str30-c'><div class='rule'><div class='id'>STR30-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not attempt to modify string literals</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>157&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s157'>Modification of string literal.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_438'>438</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_str31-c' name='rule_cert-c_str31-c'><div class='rule'><div class='id'>STR31-C<br/><span>Rule</span></div></div></a><div class='headline'>Guarantee that storage for strings has sufficient space for character data and the null terminator</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>109&nbsp;D</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_d109'>Tainted argument to formatted i/o function.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>489&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s489'>Insufficient space for operation.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>66&nbsp;X</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_x66'>Insufficient array space at call.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>70&nbsp;X</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_x70'>Array has insufficient space.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>71&nbsp;X</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_x71'>Insufficient space for copy.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_str32-c' name='rule_cert-c_str32-c'><div class='rule'><div class='id'>STR32-C<br/><span>Rule</span></div></div></a><div class='headline'>Null-terminate byte strings as required</div></div><p><a href='standards.htm#standard_s404'>404S</a> (ARR02-C) highlights the case when an strlen is called on an array which was initialised without enough space for the null terminator.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>600&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s600'>Argument of strlen is unterminated.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_str33-c' name='rule_cert-c_str33-c'><div class='rule'><div class='id'>STR33-C<br/><span>Rule</span></div></div></a><div class='headline'>Size wide character strings correctly</div></div></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_str34-c' name='rule_cert-c_str34-c'><div class='rule'><div class='id'>STR34-C<br/><span>Rule</span></div></div></a><div class='headline'>Cast characters to unsigned types before converting to larger integer sizes</div></div><div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>433&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s433'>Type conversion without cast.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1, <a href='standard_flags.htm#flag_441'>441</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_str35-c' name='rule_cert-c_str35-c'><div class='rule'><div class='id'>STR35-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not copy data from an unbounded source to a fixed-length array</div></div><p>The analysis highlights use of gets. Other functions can be added as described in the documentation for <a href='standards.htm#standard_s44'>44 S</a>.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>44&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s44'>Use of banned function or variable.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_str36-c' name='rule_cert-c_str36-c'><div class='rule'><div class='id'>STR36-C<br/><span>Rule</span></div></div></a><div class='headline'>Do not specify the bound of a character array initialized with a string literal</div></div><p>Exception STR36-EX2 permits bounds if the string being initialized might change in the future. This is not staitcally checkable, so the analysis permits such initializations and reports only those initialisations where the the NULL terminator is not stored.</p>
<div class='title'>Mapped standards</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>404&nbsp;S</td>    <td class='seperator'>:</td>    <td class='target'><a href='standards.htm#standard_s404'>Array initialisation has too many items.</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_399'>399</a> = 0 (Default)</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='rule_cert-c_str37-c' name='rule_cert-c_str37-c'><div class='rule'><div class='id'>STR37-C<br/><span>Rule</span></div></div></a><div class='headline'>Arguments to character-handling functions must be representable as an unsigned char</div></div></div><!-- body_block -->
    </div><!-- body-content -->
    <div class='footer'><p>     &copy; Copyright 2014 LDRA Ltd. All rights reserved.<br />     <span>Version 9.4.4, generated on 25th April 2014 at 08:31:23</span>    </p></div>
  </div><!-- body -->
</body>
</html>
