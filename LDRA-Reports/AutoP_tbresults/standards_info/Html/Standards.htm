<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'
'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'>
<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en' dir='ltr'>
<head>
  <!-- Force (well, try) IE8 to use IE8 standards mode -->
  <meta http-equiv='X-UA-Compatible' content='IE=8' />
  <meta http-equiv='Content-Type' content='text/html' />
  <title>LDRA Standards for C / C++</title>
  <meta name='generator' content='LDRA Standards Tool' />
  <meta name='date' content='2014-04-25_08-31-23' />
  <style>

* {
    padding : 0em;
    margin  : 0em;
}

body {
    padding     : 0px;
    margin      : 0px;
    background  : #ffffff;
    font-family : Verdana, sans-serif;
    font-size   : 100%; /* Forces font sizes to work in all browsers (i.e. IE) */
}

div.nav {
    width : 100%;
}

div.floating-menu {
    position    : fixed;
    width       : 100%;
    margin-left : 1em;
    margin-top  : 1.5em;
    font-size   : 1em;
    z-index     : 20; /* Ensure popup is over page title */
}

div.nav div.page_title {
    top            : 0px;
    left           : 0px;
    width          : 100%;
    height         : 1em;
    font-size      : 200%;
    font-weight    : bold;
    text-align     : center;
    padding-top    : 0.25em;
    padding-bottom : 0.25em;
    color          : #5f4970;
    border-bottom  : 2px solid #eb6c00;
    z-index        : 10; /* Ensure page title is over page body */
}

div.nav div.page_title span.registered {
    font-size      : 50%;
    vertical-align : top;
}

.floating-menu .title:hover {
    color        : #000000;
    background   : #ccc0da;
}

.floating-menu ul {
    font-family   : Arial, Helvetica, sans-serif;
    margin  : 0em;
    padding : 0em;
}

.floating-menu li.sep {
  border-top : 0.125em solid #eb6c00;
}

.floating-menu li {
  position          : relative;
/*   width             : 8em; --- move to :hover to fix IE7 stuck hover */
  width             : 8em;
  list-style        : none;
  border-left       : 0.25em solid #eb6c00;
  border-bottom     : 1px solid #ccc0da;
  vertical-align    : bottom; /* Fix IE5-Win */
}

.floating-menu ul a,
.floating-menu ul li {
  display           : block;
  text-decoration   : none;
  text-align        : center;
  color             : #ccc0da;
  background        : #5f4970;
  vertical-align    : bottom; /* Fix IE5-Win */
}

.floating-menu ul ul {
/*  Rest of styling in hover to fix IE hover bug */
    display : none;
}

/* Menu item hover effects */
.floating-menu a:hover,
.floating-menu li:hover {
    color           : #5f4970;
    background      : #ccc0da;
    width           : 8em;
}

.floating-menu ul.l-1 li:hover ul.l-2 {
    position    : absolute;
    left        : -0.25em;
    top         : 0px;
    display     : block;

    /* These give tracking error bands around popup items.
     * This doesn't work for IE7 without a background image.
     */
    padding             : 1.5em 1.5em 1.5em 0em;
    background-image    : url(ie7/transparent-bg.gif);
    background-repeat   : repeat;
}

.floating-menu ul.l-2 li:hover ul.l-3,
.floating-menu ul.l-3 li:hover ul.l-4,
.floating-menu ul.l-4 li:hover ul.l-5 {
    position    : absolute;
    left        : 7.75em;   /* Just inside the right edge of the parent */
    top         : -1.5em;   /* Compensate for tracking guard band at top */
    display     : block;

    /* These give tracking error bands around popup items.
     * This doesn't work for IE7 without a background image.
     */
    padding             : 1.5em 1.5em 1.5em 0em;
    background-image    : url(ie7/transparent-bg.gif);
    background-repeat   : repeat;
}

.floating-menu ul.h-menu li {
    display         : inline;
    float           : left;
    border-right    : 0px; /* Turn off right border. */
}

.floating-menu li div.standard-range {
    margin : 0 auto;
    width  : 100%;
}

li div.right-align-standard {
    width      : 40%;
    text-align : right;
    display    : inline-block;
}
li div.center {
    width      : 20%;
    display    : inline-block;
    text-align : center;
}
li div.left-align-standard {
    width      : 40%;
    display    : inline-block;
    text-align : left;
}
.floating-menu ul.h-standards li,
.floating-menu ul.h-standards a {
    width : 3.5em;
}

.floating-menu ul.h-standards div.standard {
}
.floating-menu ul.h-standards li.unused-standard:hover,
.floating-menu ul.h-standards li.unused-standard {
    color      : #837093;
    background : #5f4970;
}
.floating-menu ul.h-standards li.standard div,
.floating-menu ul.h-standards li.unused-standard div {
    width      : 80%;
    text-align : right;
    display    : inline-block;
}
.floating-menu ul.h-keywords {
    width : 43.75em; /* 5 * ( 8.5em + 0.25em ) */
}

.floating-menu ul.h-models {
    width : 43.75em; /* 5 * ( 8.5em + 0.25em ) */
}

.floating-menu ul.h-models li,
.floating-menu ul.h-models a {
    width : 8.5em;
}

div.body {
    background : #ffffff;
    position   : absolute;
    top        : 3em;
    bottom     : 0em;
    left       : 0em;
    right      : 0em;
}

div.body * {
    padding : 0em;
    margin  : 0.5em 0em 0em 0em;
    border  : none;
}

div.body div {
    margin-top : 0em;
}

div.body-content {
    background  : #ffffff;
    border-left : 2px solid #eb6c00;
}

div.body_block {
    margin-left     : 10px;
    margin-right    : 10px;
    margin-bottom   : 0em;
    margin-top      : 0.5em;
    padding-top     : 0.25em;
    padding-bottom  : 1.5em;
    border-bottom   : 1px solid #eb6c00;
    font-size       : 80%;
}

.body_block .block_title {
    color         : #5f4970;
    font-size     : 135%;
    margin-bottom : 0.5em;
}

thead .block_title {
    margin-left : -1.25em;
}

.body_block .block_title div.standard {
    font-family : Arial, Helvetica, sans-serif;
    margin-left : -7em;
    width       : 6.25em;
    float       : left;
    font-size   : 115%;
    text-align  : right;
}

.body_block .block_title div.rule {
    font-family : Arial, Helvetica, sans-serif;
    font-size   : 110%;
    margin-left : -8.75em;
    width       : 7.75em;
    float       : left;
}

.body_block .block_title div.rule div {
    text-align : right;
}

.body_block .block_title div.rule span {
    font-size  : 80%;
    font-style : italic;
}

div.body_block .title {
    color         : #5f4970;
    text-align    : left;
    font-weight   : bold;
    margin-top    : 0.75em;
    margin-bottom : 0.5em;
}

div.body_block ul,
div.body_block ol {
    margin-left : 2em;
}

div.footer {
    text-align     : center;
    padding-bottom : 1em;
}

div.footer span {
    font-size : 75%;
}

pre {
    font-family : 'Courier New', monospace;
    font-size   : 85%; /* Forces font sizes to work in all browsers (i.e. IE) */
}

pre .kw1, pre .kw2, pre .kw3, pre .kw4, pre .kw5 {
    color:#0000ff;
}

pre .coMULTI, pre .co0, pre .co1, pre .co2, pre .co3 {
    color:#008000;
}

pre .es0, pre .es1, pre .es2, pre .es3, pre .es4, pre .es5, pre .esHARD, pre .nu0, pre .nu1, pre .nu2, pre .nu3, pre .nu4, pre .nu5, pre .nu6, pre .nu7, pre .nu8, pre .nu9, pre .nu10, pre .nu11, pre .nu12, pre .nu13, pre .nu14, pre .nu15, pre .nu16, pre .nu17, pre .nu18, pre .nu19, pre .st0 {
    color:#8080ff;
}

pre .br0 {
    color:#ff8080;
}

pre .me1, pre .me2 {
    color:#c00000;
}

pre .sy0, pre .sy1, pre .sy2, pre .sy3, pre .sy4 {
    color:#888888;
}

div.xref {
    margin-top  : 6pt;
    margin-left : 20px;
}

div.xref td {
    color          : #5f4970;
    vertical-align : top;
}

div.xref td.from {
    text-align : right;
}

div.xref td.level,
div.xref td.target {
    padding-left:1em;
}

div.body-content a {
    text-decoration : none;
    color           : #eb6c00;
}

div.body-content a:hover {
    text-decoration : underline;
}

@media screen {
    div.nav div.page_title {
        position : fixed;
    }
    div.body-content {
        margin-left : 10em;
    }
    div.body {
        overflow : auto;
    }
}
@media print {
    div.nav div.page_title {
        position  : relative;
        font-size : 150%;
    }
    div.floating-menu,
    div.noprint {
        display : none;
    }
    div.body {
        overflow : visible;
    }
}
@media print {
    div.body-content {
        margin-left : 3.5em;
    }
}

  </style>
</head>
<body>
  <!--[if lt IE 8]>
  <script src='ie7/IE8.js'></script>
  <![endif]-->
  <div class='nav'>
    <div class='floating-menu'>
  <ul class='l-1'>
    <li style='z-index:10000'>Menu
      <ul class='l-2'>
       <li style='z-index:9999;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         S Standards
    <ul class='l-3'>
      <li style='z-index:10000;'>
        <div class='standard-range'><div class='right-align-standard'>1&nbsp;S</div><div class='center'>to</div><div class='left-align-standard'>100&nbsp;S</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_s1'><div>1&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s2'><div>2&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s3'><div>3&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s4'><div>4&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s5'><div>5&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s6'><div>6&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s7'><div>7&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s8'><div>8&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s9'><div>9&nbsp;S</div></a></li>
      <li class='unused-standard'><div>10&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s11'><div>11&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s12'><div>12&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s13'><div>13&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s14'><div>14&nbsp;S</div></a></li>
      <li class='unused-standard'><div>15&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s16'><div>16&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s17'><div>17&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s18'><div>18&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s19'><div>19&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s20'><div>20&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s21'><div>21&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s22'><div>22&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s23'><div>23&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s24'><div>24&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s25'><div>25&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s26'><div>26&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s27'><div>27&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s28'><div>28&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s29'><div>29&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s30'><div>30&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s31'><div>31&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s32'><div>32&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s33'><div>33&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s34'><div>34&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s35'><div>35&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s36'><div>36&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s37'><div>37&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s38'><div>38&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s39'><div>39&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s40'><div>40&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s41'><div>41&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s42'><div>42&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s43'><div>43&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s44'><div>44&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s45'><div>45&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s46'><div>46&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s47'><div>47&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s48'><div>48&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s49'><div>49&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s50'><div>50&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s51'><div>51&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s52'><div>52&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s53'><div>53&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s54'><div>54&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s55'><div>55&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s56'><div>56&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s57'><div>57&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s58'><div>58&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s59'><div>59&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s60'><div>60&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s61'><div>61&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s62'><div>62&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s63'><div>63&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s64'><div>64&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s65'><div>65&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s66'><div>66&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s67'><div>67&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s68'><div>68&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s69'><div>69&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s70'><div>70&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s71'><div>71&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s72'><div>72&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s73'><div>73&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s74'><div>74&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s75'><div>75&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s76'><div>76&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s77'><div>77&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s78'><div>78&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s79'><div>79&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s80'><div>80&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s81'><div>81&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s82'><div>82&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s83'><div>83&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s84'><div>84&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s85'><div>85&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s86'><div>86&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s87'><div>87&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s88'><div>88&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s89'><div>89&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s90'><div>90&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s91'><div>91&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s92'><div>92&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s93'><div>93&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s94'><div>94&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s95'><div>95&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s96'><div>96&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s97'><div>97&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s98'><div>98&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s99'><div>99&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s100'><div>100&nbsp;S</div></a></li>
    </ul> <!-- l-4 -->
      </li>
      <li style='z-index:9999;'>
        <div class='standard-range'><div class='right-align-standard'>101&nbsp;S</div><div class='center'>to</div><div class='left-align-standard'>200&nbsp;S</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_s101'><div>101&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s102'><div>102&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s103'><div>103&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s104'><div>104&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s105'><div>105&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s106'><div>106&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s107'><div>107&nbsp;S</div></a></li>
      <li class='unused-standard'><div>108&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s109'><div>109&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s110'><div>110&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s111'><div>111&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s112'><div>112&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s113'><div>113&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s114'><div>114&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s115'><div>115&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s116'><div>116&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s117'><div>117&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s118'><div>118&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s119'><div>119&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s120'><div>120&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s121'><div>121&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s122'><div>122&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s123'><div>123&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s124'><div>124&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s125'><div>125&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s126'><div>126&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s127'><div>127&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s128'><div>128&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s129'><div>129&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s130'><div>130&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s131'><div>131&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s132'><div>132&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s133'><div>133&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s134'><div>134&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s135'><div>135&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s136'><div>136&nbsp;S</div></a></li>
      <li class='unused-standard'><div>137&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s138'><div>138&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s139'><div>139&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s140'><div>140&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s141'><div>141&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s142'><div>142&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s143'><div>143&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s144'><div>144&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s145'><div>145&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s146'><div>146&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s147'><div>147&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s148'><div>148&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s149'><div>149&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s150'><div>150&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s151'><div>151&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s152'><div>152&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s153'><div>153&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s154'><div>154&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s155'><div>155&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s156'><div>156&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s157'><div>157&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s158'><div>158&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s159'><div>159&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s160'><div>160&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s161'><div>161&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s162'><div>162&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s163'><div>163&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s164'><div>164&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s165'><div>165&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s166'><div>166&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s167'><div>167&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s168'><div>168&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s169'><div>169&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s170'><div>170&nbsp;S</div></a></li>
      <li class='unused-standard'><div>171&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s172'><div>172&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s173'><div>173&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s174'><div>174&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s175'><div>175&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s176'><div>176&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s177'><div>177&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s178'><div>178&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s179'><div>179&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s180'><div>180&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s181'><div>181&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s182'><div>182&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s183'><div>183&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s184'><div>184&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s185'><div>185&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s186'><div>186&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s187'><div>187&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s188'><div>188&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s189'><div>189&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s190'><div>190&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s191'><div>191&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s192'><div>192&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s193'><div>193&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s194'><div>194&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s195'><div>195&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s196'><div>196&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s197'><div>197&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s198'><div>198&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s199'><div>199&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s200'><div>200&nbsp;S</div></a></li>
    </ul> <!-- l-4 -->
      </li>
      <li style='z-index:9998;'>
        <div class='standard-range'><div class='right-align-standard'>201&nbsp;S</div><div class='center'>to</div><div class='left-align-standard'>300&nbsp;S</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_s201'><div>201&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s202'><div>202&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s203'><div>203&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s204'><div>204&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s205'><div>205&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s206'><div>206&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s207'><div>207&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s208'><div>208&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s209'><div>209&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s210'><div>210&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s211'><div>211&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s212'><div>212&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s213'><div>213&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s214'><div>214&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s215'><div>215&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s216'><div>216&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s217'><div>217&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s218'><div>218&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s219'><div>219&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s220'><div>220&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s221'><div>221&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s222'><div>222&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s223'><div>223&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s224'><div>224&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s225'><div>225&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s226'><div>226&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s227'><div>227&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s228'><div>228&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s229'><div>229&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s230'><div>230&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s231'><div>231&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s232'><div>232&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s233'><div>233&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s234'><div>234&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s235'><div>235&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s236'><div>236&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s237'><div>237&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s238'><div>238&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s239'><div>239&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s240'><div>240&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s241'><div>241&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s242'><div>242&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s243'><div>243&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s244'><div>244&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s245'><div>245&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s246'><div>246&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s247'><div>247&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s248'><div>248&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s249'><div>249&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s250'><div>250&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s251'><div>251&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s252'><div>252&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s253'><div>253&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s254'><div>254&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s255'><div>255&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s256'><div>256&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s257'><div>257&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s258'><div>258&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s259'><div>259&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s260'><div>260&nbsp;S</div></a></li>
      <li class='unused-standard'><div>261&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s262'><div>262&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s263'><div>263&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s264'><div>264&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s265'><div>265&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s266'><div>266&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s267'><div>267&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s268'><div>268&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s269'><div>269&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s270'><div>270&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s271'><div>271&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s272'><div>272&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s273'><div>273&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s274'><div>274&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s275'><div>275&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s276'><div>276&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s277'><div>277&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s278'><div>278&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s279'><div>279&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s280'><div>280&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s281'><div>281&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s282'><div>282&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s283'><div>283&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s284'><div>284&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s285'><div>285&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s286'><div>286&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s287'><div>287&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s288'><div>288&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s289'><div>289&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s290'><div>290&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s291'><div>291&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s292'><div>292&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s293'><div>293&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s294'><div>294&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s295'><div>295&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s296'><div>296&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s297'><div>297&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s298'><div>298&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s299'><div>299&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s300'><div>300&nbsp;S</div></a></li>
    </ul> <!-- l-4 -->
      </li>
      <li style='z-index:9997;'>
        <div class='standard-range'><div class='right-align-standard'>301&nbsp;S</div><div class='center'>to</div><div class='left-align-standard'>400&nbsp;S</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_s301'><div>301&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s302'><div>302&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s303'><div>303&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s304'><div>304&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s305'><div>305&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s306'><div>306&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s307'><div>307&nbsp;S</div></a></li>
      <li class='unused-standard'><div>308&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s309'><div>309&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s310'><div>310&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s311'><div>311&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s312'><div>312&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s313'><div>313&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s314'><div>314&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s315'><div>315&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s316'><div>316&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s317'><div>317&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s318'><div>318&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s319'><div>319&nbsp;S</div></a></li>
      <li class='unused-standard'><div>320&nbsp;S</div></li>
      <li class='unused-standard'><div>321&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s322'><div>322&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s323'><div>323&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s324'><div>324&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s325'><div>325&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s326'><div>326&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s327'><div>327&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s328'><div>328&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s329'><div>329&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s330'><div>330&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s331'><div>331&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s332'><div>332&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s333'><div>333&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s334'><div>334&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s335'><div>335&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s336'><div>336&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s337'><div>337&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s338'><div>338&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s339'><div>339&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s340'><div>340&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s341'><div>341&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s342'><div>342&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s343'><div>343&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s344'><div>344&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s345'><div>345&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s346'><div>346&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s347'><div>347&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s348'><div>348&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s349'><div>349&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s350'><div>350&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s351'><div>351&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s352'><div>352&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s353'><div>353&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s354'><div>354&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s355'><div>355&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s356'><div>356&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s357'><div>357&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s358'><div>358&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s359'><div>359&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s360'><div>360&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s361'><div>361&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s362'><div>362&nbsp;S</div></a></li>
      <li class='unused-standard'><div>363&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s364'><div>364&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s365'><div>365&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s366'><div>366&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s367'><div>367&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s368'><div>368&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s369'><div>369&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s370'><div>370&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s371'><div>371&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s372'><div>372&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s373'><div>373&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s374'><div>374&nbsp;S</div></a></li>
      <li class='unused-standard'><div>375&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s376'><div>376&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s377'><div>377&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s378'><div>378&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s379'><div>379&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s380'><div>380&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s381'><div>381&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s382'><div>382&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s383'><div>383&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s384'><div>384&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s385'><div>385&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s386'><div>386&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s387'><div>387&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s388'><div>388&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s389'><div>389&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s390'><div>390&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s391'><div>391&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s392'><div>392&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s393'><div>393&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s394'><div>394&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s395'><div>395&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s396'><div>396&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s397'><div>397&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s398'><div>398&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s399'><div>399&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s400'><div>400&nbsp;S</div></a></li>
    </ul> <!-- l-4 -->
      </li>
      <li style='z-index:9996;'>
        <div class='standard-range'><div class='right-align-standard'>401&nbsp;S</div><div class='center'>to</div><div class='left-align-standard'>500&nbsp;S</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_s401'><div>401&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s402'><div>402&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s403'><div>403&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s404'><div>404&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s405'><div>405&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s406'><div>406&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s407'><div>407&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s408'><div>408&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s409'><div>409&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s410'><div>410&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s411'><div>411&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s412'><div>412&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s413'><div>413&nbsp;S</div></a></li>
      <li class='unused-standard'><div>414&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s415'><div>415&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s416'><div>416&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s417'><div>417&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s418'><div>418&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s419'><div>419&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s420'><div>420&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s421'><div>421&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s422'><div>422&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s423'><div>423&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s424'><div>424&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s425'><div>425&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s426'><div>426&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s427'><div>427&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s428'><div>428&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s429'><div>429&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s430'><div>430&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s431'><div>431&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s432'><div>432&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s433'><div>433&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s434'><div>434&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s435'><div>435&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s436'><div>436&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s437'><div>437&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s438'><div>438&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s439'><div>439&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s440'><div>440&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s441'><div>441&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s442'><div>442&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s443'><div>443&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s444'><div>444&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s445'><div>445&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s446'><div>446&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s447'><div>447&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s448'><div>448&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s449'><div>449&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s450'><div>450&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s451'><div>451&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s452'><div>452&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s453'><div>453&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s454'><div>454&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s455'><div>455&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s456'><div>456&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s457'><div>457&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s458'><div>458&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s459'><div>459&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s460'><div>460&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s461'><div>461&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s462'><div>462&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s463'><div>463&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s464'><div>464&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s465'><div>465&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s466'><div>466&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s467'><div>467&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s468'><div>468&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s469'><div>469&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s470'><div>470&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s471'><div>471&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s472'><div>472&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s473'><div>473&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s474'><div>474&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s475'><div>475&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s476'><div>476&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s477'><div>477&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s478'><div>478&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s479'><div>479&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s480'><div>480&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s481'><div>481&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s482'><div>482&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s483'><div>483&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s484'><div>484&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s485'><div>485&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s486'><div>486&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s487'><div>487&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s488'><div>488&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s489'><div>489&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s490'><div>490&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s491'><div>491&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s492'><div>492&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s493'><div>493&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s494'><div>494&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s495'><div>495&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s496'><div>496&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s497'><div>497&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s498'><div>498&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s499'><div>499&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s500'><div>500&nbsp;S</div></a></li>
    </ul> <!-- l-4 -->
      </li>
      <li style='z-index:9995;'>
        <div class='standard-range'><div class='right-align-standard'>501&nbsp;S</div><div class='center'>to</div><div class='left-align-standard'>600&nbsp;S</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_s501'><div>501&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s502'><div>502&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s503'><div>503&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s504'><div>504&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s505'><div>505&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s506'><div>506&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s507'><div>507&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s508'><div>508&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s509'><div>509&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s510'><div>510&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s511'><div>511&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s512'><div>512&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s513'><div>513&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s514'><div>514&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s515'><div>515&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s516'><div>516&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s517'><div>517&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s518'><div>518&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s519'><div>519&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s520'><div>520&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s521'><div>521&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s522'><div>522&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s523'><div>523&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s524'><div>524&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s525'><div>525&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s526'><div>526&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s527'><div>527&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s528'><div>528&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s529'><div>529&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s530'><div>530&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s531'><div>531&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s532'><div>532&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s533'><div>533&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s534'><div>534&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s535'><div>535&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s536'><div>536&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s537'><div>537&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s538'><div>538&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s539'><div>539&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s540'><div>540&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s541'><div>541&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s542'><div>542&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s543'><div>543&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s544'><div>544&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s545'><div>545&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s546'><div>546&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s547'><div>547&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s548'><div>548&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s549'><div>549&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s550'><div>550&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s551'><div>551&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s552'><div>552&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s553'><div>553&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s554'><div>554&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s555'><div>555&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s556'><div>556&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s557'><div>557&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s558'><div>558&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s559'><div>559&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s560'><div>560&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s561'><div>561&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s562'><div>562&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s563'><div>563&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s564'><div>564&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s565'><div>565&nbsp;S</div></a></li>
      <li class='unused-standard'><div>566&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s567'><div>567&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s568'><div>568&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s569'><div>569&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s570'><div>570&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s571'><div>571&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s572'><div>572&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s573'><div>573&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s574'><div>574&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s575'><div>575&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s576'><div>576&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s577'><div>577&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s578'><div>578&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s579'><div>579&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s580'><div>580&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s581'><div>581&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s582'><div>582&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s583'><div>583&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s584'><div>584&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s585'><div>585&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s586'><div>586&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s587'><div>587&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s588'><div>588&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s589'><div>589&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s590'><div>590&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s591'><div>591&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s592'><div>592&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s593'><div>593&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s594'><div>594&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s595'><div>595&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s596'><div>596&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s597'><div>597&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s598'><div>598&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s599'><div>599&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s600'><div>600&nbsp;S</div></a></li>
    </ul> <!-- l-4 -->
      </li>
      <li style='z-index:9994;'>
        <div class='standard-range'><div class='right-align-standard'>601&nbsp;S</div><div class='center'>to</div><div class='left-align-standard'>639&nbsp;S</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_s601'><div>601&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s602'><div>602&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s603'><div>603&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s604'><div>604&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s605'><div>605&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s606'><div>606&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s607'><div>607&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s608'><div>608&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s609'><div>609&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s610'><div>610&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s611'><div>611&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s612'><div>612&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s613'><div>613&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s614'><div>614&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s615'><div>615&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s616'><div>616&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s617'><div>617&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s618'><div>618&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s619'><div>619&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s620'><div>620&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s621'><div>621&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s622'><div>622&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s623'><div>623&nbsp;S</div></a></li>
      <li class='unused-standard'><div>624&nbsp;S</div></li>
      <li class='unused-standard'><div>625&nbsp;S</div></li>
      <li class='standard'><a href='standards.htm#standard_s626'><div>626&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s627'><div>627&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s628'><div>628&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s629'><div>629&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s630'><div>630&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s631'><div>631&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s632'><div>632&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s633'><div>633&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s634'><div>634&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s635'><div>635&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s636'><div>636&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s637'><div>637&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s638'><div>638&nbsp;S</div></a></li>
      <li class='standard'><a href='standards.htm#standard_s639'><div>639&nbsp;S</div></a></li>
    </ul> <!-- l-4 -->
      </li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9998;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         C Standards
    <ul class='l-3 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_c1'><div>1&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c2'><div>2&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c3'><div>3&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c4'><div>4&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c5'><div>5&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c6'><div>6&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c7'><div>7&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c8'><div>8&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c9'><div>9&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c10'><div>10&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c11'><div>11&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c12'><div>12&nbsp;C</div></a></li>
      <li class='standard'><a href='standards.htm#standard_c13'><div>13&nbsp;C</div></a></li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9997;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         D Standards
    <ul class='l-3'>
      <li style='z-index:10000;'>
        <div class='standard-range'><div class='right-align-standard'>1&nbsp;D</div><div class='center'>to</div><div class='left-align-standard'>100&nbsp;D</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_d1'><div>1&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d2'><div>2&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d3'><div>3&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d4'><div>4&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d5'><div>5&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d6'><div>6&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d7'><div>7&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d8'><div>8&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d9'><div>9&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d10'><div>10&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d11'><div>11&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d12'><div>12&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d13'><div>13&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d14'><div>14&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d15'><div>15&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d16'><div>16&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d17'><div>17&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d18'><div>18&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d19'><div>19&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d20'><div>20&nbsp;D</div></a></li>
      <li class='unused-standard'><div>21&nbsp;D</div></li>
      <li class='standard'><a href='standards.htm#standard_d22'><div>22&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d23'><div>23&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d24'><div>24&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d25'><div>25&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d26'><div>26&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d27'><div>27&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d28'><div>28&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d29'><div>29&nbsp;D</div></a></li>
      <li class='unused-standard'><div>30&nbsp;D</div></li>
      <li class='unused-standard'><div>31&nbsp;D</div></li>
      <li class='unused-standard'><div>32&nbsp;D</div></li>
      <li class='standard'><a href='standards.htm#standard_d33'><div>33&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d34'><div>34&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d35'><div>35&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d36'><div>36&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d37'><div>37&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d38'><div>38&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d39'><div>39&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d40'><div>40&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d41'><div>41&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d42'><div>42&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d43'><div>43&nbsp;D</div></a></li>
      <li class='unused-standard'><div>44&nbsp;D</div></li>
      <li class='standard'><a href='standards.htm#standard_d45'><div>45&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d46'><div>46&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d47'><div>47&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d48'><div>48&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d49'><div>49&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d50'><div>50&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d51'><div>51&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d52'><div>52&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d53'><div>53&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d54'><div>54&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d55'><div>55&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d56'><div>56&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d57'><div>57&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d58'><div>58&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d59'><div>59&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d60'><div>60&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d61'><div>61&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d62'><div>62&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d63'><div>63&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d64'><div>64&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d65'><div>65&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d66'><div>66&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d67'><div>67&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d68'><div>68&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d69'><div>69&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d70'><div>70&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d71'><div>71&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d72'><div>72&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d73'><div>73&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d74'><div>74&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d75'><div>75&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d76'><div>76&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d77'><div>77&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d78'><div>78&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d79'><div>79&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d80'><div>80&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d81'><div>81&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d82'><div>82&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d83'><div>83&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d84'><div>84&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d85'><div>85&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d86'><div>86&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d87'><div>87&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d88'><div>88&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d89'><div>89&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d90'><div>90&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d91'><div>91&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d92'><div>92&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d93'><div>93&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d94'><div>94&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d95'><div>95&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d96'><div>96&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d97'><div>97&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d98'><div>98&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d99'><div>99&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d100'><div>100&nbsp;D</div></a></li>
    </ul> <!-- l-4 -->
      </li>
      <li style='z-index:9999;'>
        <div class='standard-range'><div class='right-align-standard'>101&nbsp;D</div><div class='center'>to</div><div class='left-align-standard'>113&nbsp;D</div></div>
    <ul class='l-4 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_d101'><div>101&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d102'><div>102&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d103'><div>103&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d104'><div>104&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d105'><div>105&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d106'><div>106&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d107'><div>107&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d108'><div>108&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d109'><div>109&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d110'><div>110&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d111'><div>111&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d112'><div>112&nbsp;D</div></a></li>
      <li class='standard'><a href='standards.htm#standard_d113'><div>113&nbsp;D</div></a></li>
    </ul> <!-- l-4 -->
      </li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9996;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         X Standards
    <ul class='l-3 h-menu h-standards' style='width:37.5em;'>
      <li class='standard'><a href='standards.htm#standard_x1'><div>1&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x2'><div>2&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x3'><div>3&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x4'><div>4&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x5'><div>5&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x6'><div>6&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x7'><div>7&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x8'><div>8&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x9'><div>9&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x10'><div>10&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x11'><div>11&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x12'><div>12&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x13'><div>13&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x14'><div>14&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x15'><div>15&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x16'><div>16&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x17'><div>17&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x18'><div>18&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x19'><div>19&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x20'><div>20&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x21'><div>21&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x22'><div>22&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x23'><div>23&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x24'><div>24&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x25'><div>25&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x26'><div>26&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x27'><div>27&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x28'><div>28&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x29'><div>29&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x30'><div>30&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x31'><div>31&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x32'><div>32&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x33'><div>33&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x34'><div>34&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x35'><div>35&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x36'><div>36&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x37'><div>37&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x38'><div>38&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x39'><div>39&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x40'><div>40&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x41'><div>41&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x42'><div>42&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x43'><div>43&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x44'><div>44&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x45'><div>45&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x46'><div>46&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x47'><div>47&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x48'><div>48&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x49'><div>49&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x50'><div>50&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x51'><div>51&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x52'><div>52&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x53'><div>53&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x54'><div>54&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x55'><div>55&nbsp;X</div></a></li>
      <li class='unused-standard'><div>56&nbsp;X</div></li>
      <li class='standard'><a href='standards.htm#standard_x57'><div>57&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x58'><div>58&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x59'><div>59&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x60'><div>60&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x61'><div>61&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x62'><div>62&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x63'><div>63&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x64'><div>64&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x65'><div>65&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x66'><div>66&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x67'><div>67&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x68'><div>68&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x69'><div>69&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x70'><div>70&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x71'><div>71&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x72'><div>72&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x73'><div>73&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x74'><div>74&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x75'><div>75&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x76'><div>76&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x77'><div>77&nbsp;X</div></a></li>
      <li class='standard'><a href='standards.htm#standard_x78'><div>78&nbsp;X</div></a></li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9995;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         I Standards
    <ul class='l-3 h-menu h-standards' style='width:3.75em;'>
      <li class='standard'><a href='standards.htm#standard_i1'><div>1&nbsp;I</div></a></li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9994;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         Q Standards
    <ul class='l-3 h-menu h-standards' style='width:18.75em;'>
      <li class='standard'><a href='standards.htm#standard_q1'><div>1&nbsp;Q</div></a></li>
      <li class='standard'><a href='standards.htm#standard_q2'><div>2&nbsp;Q</div></a></li>
      <li class='standard'><a href='standards.htm#standard_q3'><div>3&nbsp;Q</div></a></li>
      <li class='standard'><a href='standards.htm#standard_q4'><div>4&nbsp;Q</div></a></li>
      <li class='standard'><a href='standards.htm#standard_q5'><div>5&nbsp;Q</div></a></li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9993;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         U Standards
    <ul class='l-3 h-menu h-standards' style='width:11.25em;'>
      <li class='standard'><a href='standards.htm#standard_u1'><div>1&nbsp;U</div></a></li>
      <li class='standard'><a href='standards.htm#standard_u2'><div>2&nbsp;U</div></a></li>
      <li class='standard'><a href='standards.htm#standard_u3'><div>3&nbsp;U</div></a></li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9992;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         J Standards
    <ul class='l-3 h-menu h-standards' style='width:11.25em;'>
      <li class='standard'><a href='standards.htm#standard_j1'><div>1&nbsp;J</div></a></li>
      <li class='standard'><a href='standards.htm#standard_j2'><div>2&nbsp;J</div></a></li>
      <li class='standard'><a href='standards.htm#standard_j3'><div>3&nbsp;J</div></a></li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9991;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         Z Standards
    <ul class='l-3 h-menu h-standards' style='width:3.75em;'>
      <li class='standard'><a href='standards.htm#standard_z1'><div>1&nbsp;Z</div></a></li>
    </ul> <!-- l-3 -->
       </li>
       <li style='z-index:9990;'>
         <!-- No <a> tag round content means item stays lit when in popup -->
         H Standards
    <ul class='l-3 h-menu h-standards' style='width:30em;'>
      <li class='standard'><a href='standards.htm#standard_h1'><div>1&nbsp;H</div></a></li>
      <li class='standard'><a href='standards.htm#standard_h2'><div>2&nbsp;H</div></a></li>
      <li class='standard'><a href='standards.htm#standard_h3'><div>3&nbsp;H</div></a></li>
      <li class='standard'><a href='standards.htm#standard_h4'><div>4&nbsp;H</div></a></li>
      <li class='standard'><a href='standards.htm#standard_h5'><div>5&nbsp;H</div></a></li>
      <li class='standard'><a href='standards.htm#standard_h6'><div>6&nbsp;H</div></a></li>
      <li class='standard'><a href='standards.htm#standard_h7'><div>7&nbsp;H</div></a></li>
      <li class='standard'><a href='standards.htm#standard_h8'><div>8&nbsp;H</div></a></li>
    </ul> <!-- l-3 -->
       </li>
    <li class='sep' style='z-index:9999;' />
        <li style='z-index:9989;'>
          <!-- No <a> tag round content means item stays lit when in popup -->
          By Keyword
          <ul class='l-3 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_decl'>Decl</a></div>
          <ul class='l-4 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_class'>Class</a></div>
          <ul class='l-5 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_inherit'>Inherit</a></div>
            </li>
            <li style='z-index:9999;'>
              <div class='standard-range'><a href='keywords.htm#keyword_op'>Op</a></div>
            </li>
          </ul>
            </li>
            <li style='z-index:9999;'>
              <div class='standard-range'><a href='keywords.htm#keyword_fn'>Fn</a></div>
          <ul class='l-5 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_fnpar'>Fnpar</a></div>
            </li>
          </ul>
            </li>
            <li style='z-index:9998;'>
              <div class='standard-range'><a href='keywords.htm#keyword_id'>Id</a></div>
            </li>
            <li style='z-index:9997;'>
              <div class='standard-range'><a href='keywords.htm#keyword_obj'>Obj</a></div>
            </li>
            <li style='z-index:9996;'>
              <div class='standard-range'><a href='keywords.htm#keyword_template'>Template</a></div>
            </li>
            <li style='z-index:9995;'>
              <div class='standard-range'><a href='keywords.htm#keyword_type'>Type</a></div>
          <ul class='l-5 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_struct'>Struct</a></div>
            </li>
          </ul>
            </li>
          </ul>
            </li>
            <li style='z-index:9999;'>
              <div class='standard-range'><a href='keywords.htm#keyword_exp'>Exp</a></div>
          <ul class='l-4 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_arr'>Arr</a></div>
            </li>
            <li style='z-index:9999;'>
              <div class='standard-range'><a href='keywords.htm#keyword_conv'>Conv</a></div>
            </li>
            <li style='z-index:9998;'>
              <div class='standard-range'><a href='keywords.htm#keyword_ptr'>Ptr</a></div>
            </li>
          </ul>
            </li>
            <li style='z-index:9998;'>
              <div class='standard-range'><a href='keywords.htm#keyword_file'>File</a></div>
          <ul class='l-4 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_namespace'>Namespace</a></div>
            </li>
          </ul>
            </li>
            <li style='z-index:9997;'>
              <div class='standard-range'><a href='keywords.htm#keyword_flow'>Flow</a></div>
            </li>
            <li style='z-index:9996;'>
              <div class='standard-range'><a href='keywords.htm#keyword_lib'>Lib</a></div>
          <ul class='l-4 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_io'>Io</a></div>
            </li>
          </ul>
            </li>
            <li style='z-index:9995;'>
              <div class='standard-range'><a href='keywords.htm#keyword_lit'>Lit</a></div>
            </li>
            <li style='z-index:9994;'>
              <div class='standard-range'><a href='keywords.htm#keyword_metric'>Metric</a></div>
            </li>
            <li style='z-index:9993;'>
              <div class='standard-range'><a href='keywords.htm#keyword_misc'>Misc</a></div>
            </li>
            <li style='z-index:9992;'>
              <div class='standard-range'><a href='keywords.htm#keyword_pre'>Pre</a></div>
            </li>
            <li style='z-index:9991;'>
              <div class='standard-range'><a href='keywords.htm#keyword_stmt'>Stmt</a></div>
          <ul class='l-4 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_cond'>Cond</a></div>
          <ul class='l-5 h-menu'>
            <li style='z-index:10000;'>
              <div class='standard-range'><a href='keywords.htm#keyword_if'>If</a></div>
            </li>
            <li style='z-index:9999;'>
              <div class='standard-range'><a href='keywords.htm#keyword_switch'>Switch</a></div>
            </li>
          </ul>
            </li>
            <li style='z-index:9999;'>
              <div class='standard-range'><a href='keywords.htm#keyword_loop'>Loop</a></div>
            </li>
            <li style='z-index:9998;'>
              <div class='standard-range'><a href='keywords.htm#keyword_jmp'>Jmp</a></div>
            </li>
            <li style='z-index:9997;'>
              <div class='standard-range'><a href='keywords.htm#keyword_except'>Except</a></div>
            </li>
          </ul>
            </li>
            <li style='z-index:9990;'>
              <div class='standard-range'><a href='keywords.htm#keyword_style'>Style</a></div>
            </li>
          </ul>
        </li>
        <li style='z-index:9988;'>
          <!-- No <a> tag round content means item stays lit when in popup -->
          By Classification
          <ul class='l-3 h-menu h-keywords'>
    <li><a href='classifications.htm#classification_allocation'>Allocation</a></li>
    <li><a href='classifications.htm#classification_complexity'>Complexity</a></li>
    <li><a href='classifications.htm#classification_dependability'>Dependability</a></li>
    <li><a href='classifications.htm#classification_fault'>Fault</a></li>
    <li><a href='classifications.htm#classification_maintainability'>Maintainability</a></li>
    <li><a href='classifications.htm#classification_portability'>Portability</a></li>
    <li><a href='classifications.htm#classification_style'>Style</a></li>
    <li><a href='classifications.htm#classification_testability'>Testability</a></li>
    <li><a href='classifications.htm#classification_vulnerabilities'>Vulnerabilities</a></li>
          </ul>
        </li>
    <li><a href='standard_flags.htm'>Std Modifiers</a></li>
    <li class='sep' style='z-index:9999;' />
        <li style='z-index:9987;'>
          <!-- No <a> tag round content means item stays lit when in popup -->
          Models
          <ul class='l-3 h-menu h-models'>
    <li><a href='cast_model.htm'>CAST</a></li>
    <li><a href='cert-c_model.htm'>CERT-C</a></li>
    <li><a href='cmse_model.htm'>CMSE</a></li>
    <li><a href='conform_model.htm'>CONFORM</a></li>
    <li><a href='cwe_model.htm'>CWE</a></li>
    <li><a href='customer_sample_model.htm'>Customer Sample</a></li>
    <li><a href='dera_model.htm'>DERA</a></li>
    <li><a href='eads-c_model.htm'>EADS-C</a></li>
    <li><a href='eads-cpp_model.htm'>EADS-C++</a></li>
    <li><a href='fsb582-c_model.htm'>FSB582-C</a></li>
    <li><a href='fsb582-cpp_model.htm'>FSB582-C++</a></li>
    <li><a href='gjb_model.htm'>GJB</a></li>
    <li><a href='hicpp_model.htm'>HIC++</a></li>
    <li><a href='his_model.htm'>HIS</a></li>
    <li><a href='jpl_model.htm'>JPL</a></li>
    <li><a href='jsf++_av_model.htm'>JSF++ AV</a></li>
    <li><a href='lmtcp_model.htm'>LMTCP</a></li>
    <li><a href='legacy_model.htm'>Legacy</a></li>
    <li><a href='misra-ac_model.htm'>MISRA-AC</a></li>
    <li><a href='misra-cpp_2008_model.htm'>MISRA-C++:2008</a></li>
    <li><a href='misra-c_1998_model.htm'>MISRA-C:1998</a></li>
    <li><a href='misra-c_2004_model.htm'>MISRA-C:2004</a></li>
    <li><a href='misra-c_2012_model.htm'>MISRA-C:2012</a></li>
    <li><a href='netrino_model.htm'>NETRINO</a></li>
    <li><a href='runtime_model.htm'>RUNTIME</a></li>
    <li><a href='sec-c_model.htm'>SEC-C</a></li>
    <li><a href='standard_model.htm'>Standard</a></li>
    <li><a href='tbrun_requires_model.htm'>TBrun Requires</a></li>
    <li><a href='uml_model.htm'>UML</a></li>
    <li><a href='vsos_model.htm'>VSOS</a></li>
          </ul>
        </li>
      </ul>
    </li>
  </ul><!-- l-1 -->
    </div><!-- floating-menu -->
    <div class='page_title'>LDRA Standards for C / C++</div>
  </div><!-- nav -->
  <div class='body'>
    <div class='body-content'>
<div class='body_block'>
<div class='block_title'><a id='standard_s1' name='standard_s1'><div class='standard'><div>1&nbsp;S</div></div></a><div class='headline'>Procedure name reused.</div></div><p>Names to be used in different contexts such as blocks and namespaces. This may lead to confusion as to which variant is active at the time. This standard reports when a procedure name is reused in any another context within the same file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span>UINT_32 p_1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 x <span class="sy0">=</span> p_1<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/********************************************************
 *  Standard 1 S : Procedure name reused.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_1<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 foo <span class="sy0">=</span> 1u<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.1.1'>5.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.1'>1.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_21'>21</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.5.5'>3.5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.1.1'>4.1.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_21'>21</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_248'>248</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.2'>5.2</a>, <a href='misra-ac_model.htm#rule_misra-ac_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_21'>21</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.2'>5.2</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.8'>R.5.8</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.9'>R.5.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s2' name='standard_s2'><div class='standard'><div>2&nbsp;S</div></div></a><div class='headline'>Label name reused.</div></div><p>Names to be used in different contexts such as blocks and namespaces. This may lead to confusion as to which variant is active at the time. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 2 S : Label name reused.
 *  (Superceded by other penalties depending on implementation)
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_2 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 y <span class="sy0">=</span> 0u<span class="sy0">;</span>
&nbsp;
value_x<span class="sy0">:</span>
   y <span class="sy0">=</span> 1u<span class="sy0">;</span>
   <span class="br0">&#123;</span>  value_x<span class="sy0">:</span> <span class="coMULTI">/* not compliant; label already used */</span>
       y<span class="sy0">=</span> 2u<span class="sy0">;</span>
   <span class="br0">&#125;</span>
   <span class="coMULTI">/* ... */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.1.2'>5.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.2'>1.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_12'>12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.1.2'>4.1.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_16'>16</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_12'>12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s3' name='standard_s3'><div class='standard'><div>3&nbsp;S</div></div></a><div class='headline'>More than *** executable reformatted lines in file.</div></div><p>This standard enables managers to control the amount of code in each file. The limit is user definable. The *** symbols refer to a user definable number for this standard, defaulting to 2000. The configuration is made in the c/cpppen.dat file. Instructions for making alterations can be found in the manual.</p>
<div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_2.2.1'>2.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_4'>4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.2.2.1'>4.2.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s4' name='standard_s4'><div class='standard'><div>4&nbsp;S</div></div></a><div class='headline'>Procedure exceeds *** reformatted lines.</div></div><p>This standard enables managers to control the size of the procedures. The *** symbols refer to a user definable number for this standard, defaulting to 200. The configuration is made in the c/cpppen.dat file. Instructions for making alterations can be found in the manual.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 4 S : Procedure exceeds *** reformatted lines
 *
 * Note: To see the message in this example,
 *       set the parameter to 20 in the pen.dat file
 ********************************************************/</span> 
&nbsp;
BOOL isHexDigit<span class="br0">&#40;</span> CHAR Hex <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  BOOL bResult <span class="sy0">=</span> FALSE<span class="sy0">;</span>
&nbsp;
  <span class="kw1">if</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'0'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'1'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'2'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'3'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'4'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'5'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'6'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'7'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'8'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'9'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'A'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'a'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'B'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'b'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'C'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'c'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'D'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'d'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'E'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'e'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'F'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'f'</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    bResult <span class="sy0">=</span> TRUE<span class="sy0">;</span>
  <span class="br0">&#125;</span>
  <span class="kw1">return</span> bResult<span class="sy0">;</span>
&nbsp;
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.2.7'>5.2.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_2.2.2'>2.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_2.4.1'>2.4.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_3.5'>3.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.2.2.2'>4.2.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s5' name='standard_s5'><div class='standard'><div>5&nbsp;S</div></div></a><div class='headline'>Empty then clause.</div></div><p>The use of empty then clauses can be due either to errors or deliberate avoidance of negative boolean expressions. The options flagged are: </p>
<pre>        if(...) else
	if(...) {} else
	if(...) {;} else
</pre><p>The inclusion of a comment within the empty then clause { /*  */ } is deemed to indicate that the absence of executable code is deliberate, and hence no standard will report in this circumstance. </p>
<pre>
	if(...) { /* ... */ } else
</pre><div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 5 S : Empty then clause
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_5<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 value_x <span class="sy0">=</span> 1u<span class="sy0">;</span>
&nbsp;
   <span class="kw1">if</span> <span class="br0">&#40;</span>value_x <span class="sy0">==</span> 0u<span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
<span class="co2">#if FALSE</span>
     value_x <span class="sy0">=</span> value_x <span class="sy0">+</span> 1u<span class="sy0">;</span>
<span class="co2">#endif</span>
   <span class="br0">&#125;</span> 
   <span class="coMULTI">/* not compliant */</span>
&nbsp;
   <span class="kw1">if</span> <span class="br0">&#40;</span>value_x <span class="sy0">==</span> 0u<span class="br0">&#41;</span> <span class="br0">&#123;</span><span class="sy0">;</span><span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.3.1'>5.3.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc03-c'>MSC03-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_3.1.1'>3.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_480'>480</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_141'>141</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.9.1.1'>3.9.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.1'>9.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.3.1.1'>4.3.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.9.1'>M1.9.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s6' name='standard_s6'><div class='standard'><div>6&nbsp;S</div></div></a><div class='headline'>Procedure pointer declared.</div></div><p>The use of procedure pointers is considered to be dangerous by some bodies and needs to be tightly controlled. For example, the pointer could be rogue, and also will obscure control flow.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span>UINT_32 p_1<span class="sy0">,</span> UINT_16 p_2<span class="br0">&#41;</span>
<span class="br0">&#123;</span> <span class="coMULTI">/* ... */</span> <span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 6 S : Procedure pointer declared.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_6<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">void</span> <span class="br0">&#40;</span><span class="sy0">*</span>proc_pointer<span class="br0">&#41;</span> <span class="br0">&#40;</span>UINT_32 p_1<span class="sy0">,</span> UINT_16 p_2<span class="br0">&#41;</span> <span class="sy0">=</span> foo<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
  proc_pointer<span class="br0">&#40;</span>1u<span class="sy0">,</span> <span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.4.3'>5.4.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_4.1.3'>4.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.4.1.3'>4.4.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_9'>9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s7' name='standard_s7'><div class='standard'><div>7&nbsp;S</div></div></a><div class='headline'>Jump out of procedure.</div></div><p>This is compiler dependent but most commonly is a use of longjmp. This is generally considered bad practice.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &lt;setjmp.h&gt; </span>
<span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/******************************************************************
 * Standard 7 S : jump out of procedure
 ******************************************************************/</span> 
<span class="kw4">static</span> <span class="kw4">void</span> static_7<span class="br0">&#40;</span>jmp_buf mark<span class="sy0">,</span> SINT_32 val<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   longjmp<span class="br0">&#40;</span>mark<span class="sy0">,</span>val<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.5.1'>5.5.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_5.1.1'>5.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.5.1.1'>4.5.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s8' name='standard_s8'><div class='standard'><div>8&nbsp;S</div></div></a><div class='headline'>Empty else clause.</div></div><p>The use of empty else clauses can either be due to incomplete code or deliberate policy to show that the possibility has been considered. The options flagged are: </p>
<pre>
	else ;
	else { }
	else {;}
</pre><p>The inclusion of a comment within the empty else clause { /*  */ } is deemed to indicate that the absence of executable code is deliberate, and hence no standard will report in this circumstance: </p>
<pre>
	else { /* ... */ }
</pre><div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 8 S : Empty else clause
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_8 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 name_x <span class="sy0">=</span> 1u<span class="sy0">;</span>
&nbsp;
   <span class="kw1">if</span> <span class="br0">&#40;</span>name_x <span class="sy0">==</span> 0u<span class="br0">&#41;</span>
   <span class="br0">&#123;</span> <span class="coMULTI">/* ... */</span> <span class="br0">&#125;</span>
   <span class="kw1">else</span> <span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
   <span class="kw1">if</span> <span class="br0">&#40;</span>name_x <span class="sy0">==</span> 0u<span class="br0">&#41;</span>
   <span class="br0">&#123;</span> <span class="coMULTI">/* ... */</span> <span class="br0">&#125;</span>
   <span class="kw1">else</span>   <span class="coMULTI">/* not compliant */</span>
   <span class="br0">&#123;</span>
<span class="co2">#if FALSE</span>
      name_x <span class="sy0">=</span> name_x <span class="sy0">+</span> 1u<span class="sy0">;</span>
<span class="co2">#endif</span>
   <span class="br0">&#125;</span>
&nbsp;
   <span class="kw1">if</span> <span class="br0">&#40;</span>name_x <span class="sy0">==</span> 0u<span class="br0">&#41;</span>
   <span class="br0">&#123;</span> <span class="coMULTI">/* ... */</span> <span class="br0">&#125;</span>
   <span class="kw1">else</span>
   <span class="br0">&#123;</span> <span class="sy0">;</span> <span class="br0">&#125;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.3.2'>5.3.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_3.1.3'>3.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.9.1.1'>3.9.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.1'>9.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.3.1.3'>4.3.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.9.1'>M1.9.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s9' name='standard_s9'><div class='standard'><div>9&nbsp;S</div></div></a><div class='headline'>Assignment operation in expression.</div></div><p>The assignment operator (=) sets an lvalue, whereas the equality operator (==) performs a comparison. It is possible that the assignment operator was typed in error. It can also cause unexpected side effects.</p>
<p>This standard can be relaxed to allow postfix increment and decrement operators on the RHS of an assignment or in a comparison to NULL by setting the modifiers <a href='standard_flags.htm#flag_259'>259</a> and <a href='standard_flags.htm#flag_266'>266</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 9 S : Assignment operator in expression.
 ********************************************************/</span> 
&nbsp;
BOOL static_9<span class="br0">&#40;</span>BOOL test<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   BOOL result<span class="sy0">,</span>flag<span class="sy0">;</span>
&nbsp;
   result <span class="sy0">=</span> <span class="br0">&#40;</span> flag <span class="sy0">=</span> test <span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
   <span class="kw1">return</span> result<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp30-c'>EXP30-C</a>, <a href='cert-c_model.htm#rule_cert-c_exp31-c'>EXP31-C</a>, <a href='cert-c_model.htm#rule_cert-c_fio41-c'>FIO41-C</a>, <a href='cert-c_model.htm#rule_cert-c_pre31-c'>PRE31-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.1.1'>6.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_33'>33</a>, <a href='dera_model.htm#rule_dera_35'>35</a>, <a href='dera_model.htm#rule_dera_40'>40</a>, <a href='dera_model.htm#rule_dera_46'>46</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_166'>166</a>, <a href='eads-c_model.htm#rule_eads-c_167'>167</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.10.1'>3.10.1</a>, <a href='fsb582-c_model.htm#rule_fsb582-c_3.10.2'>3.10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.17'>9.17</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.6.1.1'>4.6.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.3'>10.3</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_10.5'>10.5</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_10.6'>10.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_33'>33</a>, <a href='his_model.htm#rule_his_35'>35</a>, <a href='his_model.htm#rule_his_40'>40</a>, <a href='his_model.htm#rule_his_46'>46</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_160'>160</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_204'>204</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_259'>259</a> = 1, <a href='standard_flags.htm#flag_266'>266</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_362'>362</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_12.2'>12.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-1'>5-0-1</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-2-1'>6-2-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_33'>33</a>, <a href='misra-c_1998_model.htm#rule_misra-c%3A1998_35'>35</a>, <a href='misra-c_1998_model.htm#rule_misra-c%3A1998_40'>40</a>, <a href='misra-c_1998_model.htm#rule_misra-c%3A1998_46'>46</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.2'>12.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.13.1'>R.13.1</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.13.2'>R.13.2</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.13.4'>R.13.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_8.6.a'>8.6.a</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m3.2.2'>M3.2.2</a>, <a href='sec-c_model.htm#rule_sec-c_r3.6.1'>R3.6.1</a>, <a href='sec-c_model.htm#rule_sec-c_r3.6.2'>R3.6.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s11' name='standard_s11'><div class='standard'><div>11&nbsp;S</div></div></a><div class='headline'>No brackets to loop body (added by Testbed).</div></div><p>The use of curly brackets, {}, in controlled clauses is recommended for maintenance purposes. Upon detection of this standards violation LDRA Testbed inserts the required brackets into the reformatted code to permit instrumentation.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 11 S : No brackets to loop body
 ********************************************************/</span> 
&nbsp;
SINT_32 static_11<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  SINT_32 j <span class="sy0">=</span> <span class="nu0">10</span><span class="sy0">;</span>
  SINT_32 k <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
  <span class="kw1">for</span> <span class="br0">&#40;</span>k <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> k <span class="sy0">&lt;</span> <span class="nu0">10</span><span class="sy0">;</span> k <span class="sy0">=</span> k <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">&#41;</span> j<span class="sy0">--;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
  <span class="kw1">return</span> j<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.2.1'>5.2.1</a>, <a href='cast_model.htm#rule_cast_5.2.2'>5.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_2.1.2'>2.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_483'>483</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_59'>59</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_145'>145</a>, <a href='eads-c_model.htm#rule_eads-c_165'>165</a>, <a href='eads-c_model.htm#rule_eads-c_166'>166</a>, <a href='eads-c_model.htm#rule_eads-c_167'>167</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.1'>9.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.2.1.1'>4.2.1.1</a>, <a href='gjb_model.htm#rule_gjb_4.2.1.2'>4.2.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_5.1'>5.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_59'>59</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_59'>59</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_84'>84</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_14.8'>14.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-3-1'>6-3-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_59'>59</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_14.8'>14.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.15.6'>R.15.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_1.3.a'>1.3.a</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m2.1.2'>M2.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s12' name='standard_s12'><div class='standard'><div>12&nbsp;S</div></div></a><div class='headline'>No brackets to then/else (added by Testbed).</div></div><p>The use of curly brackets, {}, in controlled clauses is recommended for maintenance purposes. Upon detection of this standards violation LDRA Testbed inserts the required brackets into the reformatted code to permit instrumentation. </p>
<p>This standard can be relaxed to allow else if ( rather than else { if  } ) by setting the tbend modifier to F in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 12 S : No brackets to then/else
 ********************************************************/</span> 
&nbsp;
SINT_32 static_12<span class="br0">&#40;</span>SINT_32 p_1<span class="sy0">,</span> SINT_32 p_2<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   SINT_32 i <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
   SINT_32 j <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
   <span class="kw1">if</span> <span class="br0">&#40;</span>p_1 <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
     i <span class="sy0">=</span> i <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span>
   <span class="br0">&#125;</span>
   <span class="kw1">else</span>
      i <span class="sy0">=</span> i <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>          <span class="coMULTI">/* not compliant */</span>
&nbsp;
   <span class="kw1">if</span> <span class="br0">&#40;</span>p_2 <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      j <span class="sy0">=</span> j <span class="sy0">+</span> p_2<span class="sy0">;</span>
   <span class="br0">&#125;</span>
   <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>p_2 <span class="sy0">&lt;</span> <span class="nu0">0</span><span class="br0">&#41;</span>    <span class="coMULTI">/* not compliant but permitted with modifier */</span>
   <span class="br0">&#123;</span>
      j <span class="sy0">=</span> j <span class="sy0">-</span> p_2<span class="sy0">;</span>
   <span class="br0">&#125;</span>
   <span class="kw1">else</span>
   <span class="br0">&#123;</span>
      j <span class="sy0">=</span> i<span class="sy0">;</span>
   <span class="br0">&#125;</span>
   <span class="kw1">return</span> j<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.2.3'>5.2.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc01-c'>MSC01-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_2.1.3'>2.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_483'>483</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_59'>59</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_145'>145</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : tbend F</td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.9.1.1'>3.9.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.1'>9.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.2.1.3'>4.2.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_5.1'>5.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_59'>59</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : tbend F</td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_59'>59</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : tbend F</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_84'>84</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_14.9'>14.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : tbend F</td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-4-1'>6-4-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : tbend F</td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_59'>59</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : tbend F</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_14.9'>14.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : tbend F</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.15.6'>R.15.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : tbend F</td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_1.3.a'>1.3.a</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m2.1.2'>M2.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : tbend F</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s13' name='standard_s13'><div class='standard'><div>13&nbsp;S</div></div></a><div class='headline'>goto detected.</div></div><p>The use of goto is usually considered bad practice, as its use leads to code that can be difficult to read and maintain.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 13 S : goto detected.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_13<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   SINT_32 jump_flag <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
start<span class="sy0">:</span>
   jump_flag<span class="sy0">++;</span>
   <span class="kw1">if</span> <span class="br0">&#40;</span>jump_flag <span class="sy0">&lt;</span> <span class="nu0">10</span><span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      <span class="kw1">goto</span> start<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
   <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.5.2'>5.5.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_5.1.2'>5.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_56'>56</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_119'>119</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.10'>9.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.5.1.2'>4.5.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_5.8'>5.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_56'>56</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_1'>1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_189'>189</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_340'>340</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_14.4'>14.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_56'>56</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_14.4'>14.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.15.1'>R.15.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_1.7.c'>1.7.c</a>, <a href='netrino_model.htm#rule_netrino_8.5.a'>8.5.a</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m3.1.2'>M3.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s14' name='standard_s14'><div class='standard'><div>14&nbsp;S</div></div></a><div class='headline'>Procedural parameter declared.</div></div><p>Passing procedures as parameters is an issue on which authorities are divided. They can be used to generalise software, but also to obscure control flow. This standard will report any instances encountered.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">void</span> test_14s<span class="br0">&#40;</span>SINT_32 p_1<span class="br0">&#41;</span>
<span class="br0">&#123;</span> <span class="coMULTI">/* ... */</span> <span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 14 S : Procedural parameter declared.
 ********************************************************/</span> 
<span class="kw4">void</span> static_14<span class="br0">&#40;</span><span class="kw4">void</span> <span class="br0">&#40;</span><span class="sy0">*</span>p_proc_pointer<span class="br0">&#41;</span><span class="br0">&#40;</span>SINT_32 parameter_1<span class="br0">&#41;</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   p_proc_pointer <span class="sy0">=</span> test_14s<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.2.2'>1.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_149'>149</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.2.2'>4.1.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s16' name='standard_s16'><div class='standard'><div>16&nbsp;S</div></div></a><div class='headline'>Multiple labels declared.</div></div><p>With the exception of case labels, the use of multiple consecutive labels is considered redundant by some authorities; only one is required.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/********************************************************
 * Standard 16 C : Multiple labels declared
 ********************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_16<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
start<span class="sy0">:</span>begin<span class="sy0">:</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
   <span class="coMULTI">/* ... */</span> <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.1.3'>5.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.4'>1.1.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.1.4'>4.1.1.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s17' name='standard_s17'><div class='standard'><div>17&nbsp;S</div></div></a><div class='headline'>Code insert found.</div></div><p>This standard reports the presence of any sections of assembler code, which are compiler dependent. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/*******************************************************
 * Standard 17 S : Code insert found.
 *******************************************************/</span> 
<span class="kw4">static</span> <span class="kw4">void</span> static_17<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   _asm
   <span class="br0">&#123;</span>
      mov eax<span class="sy0">,</span>01h
   <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_3'>3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_13.5'>13.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_7-4-1'>7-4-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_3'>3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_d.4.2'>D.4.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s18' name='standard_s18'><div class='standard'><div>18&nbsp;S</div></div></a><div class='headline'>More than *** parameters in procedure.</div></div><p>The trade-off between the use of global variables and parameters is a complex issue, but parameter passing is less efficient than using globals. Also parameters could be grouped into structures to reduce the complexity of the interface. The *** symbols refer to a user definable number for this standard, defaulting to six. The configuration is made in the c/cpppen.dat file. Instructions for making alterations can be found in the manual.</p>
<p>This standard can be relaxed to allow constructors to exceed the specific number of parameters by setting the modifier <a href='standard_flags.htm#flag_209'>209</a> to 1 in the c/cppreport.dat file.  <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard 18 S : More than *** parameters in procedure.
 *******************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_18<span class="br0">&#40;</span>UINT_32 p_1<span class="sy0">,</span>
               UINT_32 p_2<span class="sy0">,</span>
               UINT_32 p_3<span class="sy0">,</span>
               UINT_32 p_4<span class="sy0">,</span>
               UINT_32 p_5<span class="sy0">,</span>
               UINT_32 p_6<span class="sy0">,</span>
               UINT_32 p_7<span class="sy0">,</span>
               UINT_32 p_8<span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.1.20'>5.1.20</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.2.3'>1.2.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.7.10'>3.7.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.2.3'>4.1.2.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_4.3'>4.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_110'>110</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_209'>209</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_205'>205</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_209'>209</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s19' name='standard_s19'><div class='standard'><div>19&nbsp;S</div></div></a><div class='headline'>Procedural para used in an uncalled procedure.</div></div><p>This standard reports when an uncalled procedure receives a procedural parameter, which therefore is never called.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/******************************************************************
 * Standard 19 S : Procedural parameter used in uncalled procedure.
 ****************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_19<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#40;</span> <span class="sy0">*</span> p_proc_pointer <span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
   p_proc_pointer<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.7.8'>5.7.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_7.2.1'>7.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.7.2.1'>4.7.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s20' name='standard_s20'><div class='standard'><div>20&nbsp;S</div></div></a><div class='headline'>Parameter not declared explicitly.</div></div><p>As part of LDRA Testbed's strong type checking, this standard reports when a partial declaration or definition of a procedure is encountered. Some compilers allow default types for parameters, which introduces non-portability and relies on the underlying implementation, rather than the specific code. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 20 S : Parameter not declared explicitly.
 ********************************************************/</span>
&nbsp;
UINT_32 static_20_135<span class="br0">&#40;</span> p_1 <span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
   UINT_32 result<span class="sy0">;</span>
   result <span class="sy0">=</span> p_1 <span class="sy0">*</span> <span class="nu0">2</span><span class="sy0">;</span>
   <span class="kw1">return</span> result<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.1.4'>5.1.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl31-c'>DCL31-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.5'>1.1.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_628'>628</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_71'>71</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.1.5'>4.1.1.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_71'>71</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_8.1'>8.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_71'>71</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_8.1'>8.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.1'>R.8.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c++.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s21' name='standard_s21'><div class='standard'><div>21&nbsp;S</div></div></a><div class='headline'>Number of parameters does not match.</div></div><p>Some compilers will successfully link regardless of the numbers of actual and formal parameters. In particular, this may happen for functions without a prototype as such behaviour is undefined in C. This standard reports any mismatches in the number of parameters between the declaration and the call. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
UINT_32 test_21<span class="br0">&#40;</span>UINT_32 p_1<span class="sy0">,</span> UINT_16 p_2<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 result <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
   result <span class="sy0">=</span> p_1 <span class="sy0">+</span> p_2<span class="sy0">;</span>
   <span class="kw1">return</span> result<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 21 S : Number of parameters does not match.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_21<span class="br0">&#40;</span>UINT_32 p_1<span class="sy0">,</span> UINT_16 p_2<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   test_21<span class="br0">&#40;</span>1u<span class="sy0">,</span> 2u <span class="sy0">,</span>2u<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.7.1'>5.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl07-c'>DCL07-C</a>, <a href='cert-c_model.htm#rule_cert-c_exp37-c'>EXP37-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_7.1.1'>7.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_234'>234</a>, <a href='cwe_model.htm#rule_cwe_235'>235</a>, <a href='cwe_model.htm#rule_cwe_685'>685</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_78'>78</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.1.1'>3.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.7.1.1'>4.7.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_78'>78</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_16.6'>16.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_78'>78</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_16.6'>16.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.1'>R.1.1</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c++.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s22' name='standard_s22'><div class='standard'><div>22&nbsp;S</div></div></a><div class='headline'>Use of obsolete language feature ( use = - ).</div></div><p>Early versions of languages (non-ANSI) had a reverse ordering for [operator] assign syntax. Examples of the ambiguous operators are: </p>
<pre>
			=-  =*  =+
</pre><p>where a careless initialisation of</p>
<pre>
			i = -1;
			val = *ptr;
</pre><p>is not the same as</p>
<pre>
			i =- 1;
			val =* ptr;
</pre><div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * Standard 22 S : Use of obsolete language feature ( use = - ).
 *****************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_22<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   SINT_32 b <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">,</span> a <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
   a <span class="sy0">=-</span> b<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
   a <span class="sy0">=+</span> b<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_1'>1</a>, <a href='dera_model.htm#rule_dera_137'>137</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.8.2.1'>4.8.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_1'>1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_8'>8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_1'>1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s23' name='standard_s23'><div class='standard'><div>23&nbsp;S</div></div></a><div class='headline'>Procedure is not explicitly called in code analysed.</div></div><p>This standard reports procedures in a file containing a main procedure, that are not called by any procedures in that file. If the procedure is not used in the file then it could be removed or moved to another file where it is used. </p>
<p>Note that this standard detects explicit procedure calls and so will also give a warning if a procedure is only accessed via its address. In such cases the procedure may not be removed. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*********************************************************************
 * Standard 23 S : Procedure is not explicitly called in code analysed.
 *********************************************************************/</span> 
&nbsp;
UINT_32 static_23<span class="br0">&#40;</span>UINT_32 p<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 x <span class="sy0">=</span> 1u<span class="sy0">;</span>
&nbsp;
   x <span class="sy0">=</span> x <span class="sy0">+</span> p<span class="sy0">;</span>
&nbsp;
   <span class="kw1">return</span> x<span class="sy0">;</span>
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
&nbsp;
INT_32 main<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    <span class="coMULTI">/* ... */</span> 
    <span class="kw1">return</span> <span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.16.18'>5.16.18</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.2.10'>1.2.10</a>, <a href='cmse_model.htm#rule_cmse_7.1.2'>7.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_561'>561</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.7.1.2'>4.7.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s24' name='standard_s24'><div class='standard'><div>24&nbsp;S</div></div></a><div class='headline'>Use of Noanalysis annotation.</div></div><p>Warns that LDRA Testbed NO_ANALYSIS annotation has been utilised within the analysis scope. This means that the user has intentionally not analysed all of the code within the source file. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="coMULTI">/*******************************************************
 * Standard 24 S : Use of Noanalysis annotation.
 *******************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_24<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32  x<span class="sy0">;</span>
&nbsp;
   x <span class="sy0">=</span> 1u<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*LDRA_NOANALYSIS*/</span> <span class="coMULTI">/* not compliant */</span>
   x <span class="sy0">=</span> x <span class="sy0">+</span> 1u<span class="sy0">;</span>
<span class="coMULTI">/*LDRA_ANALYSIS*/</span>
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_10.2.1'>10.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.10.2.1'>4.10.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s25' name='standard_s25'><div class='standard'><div>25&nbsp;S</div></div></a><div class='headline'>Null case in switch statement.</div></div><p>These correspond to cases which fall through to the following case or default. They should be inspected to see if a break statement is missing.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 25 S :  Null case in switch statement.
 ********************************************************/</span> 
&nbsp;
SINT_32 static_25<span class="br0">&#40;</span>SINT_32 p_1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  SINT_32 i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span> j <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
  <span class="kw1">switch</span> <span class="br0">&#40;</span>p_1<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
     <span class="kw1">case</span> <span class="nu0">0</span><span class="sy0">:</span>
        j <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
        <span class="kw2">break</span><span class="sy0">;</span>
     <span class="kw1">case</span> <span class="nu0">1</span><span class="sy0">:</span>
     <span class="kw1">case</span> <span class="nu0">2</span><span class="sy0">:</span>  <span class="coMULTI">/* not compliant */</span>
        j<span class="sy0">=</span>i<span class="sy0">;</span>
        <span class="kw2">break</span><span class="sy0">;</span>
     <span class="kw1">default</span><span class="sy0">:</span>
        i <span class="sy0">=</span> j <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
&nbsp;
  <span class="kw1">return</span> i <span class="sy0">+</span> j<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.3.5'>5.3.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_3.1.8'>3.1.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.3.1.8'>4.3.1.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s26' name='standard_s26'><div class='standard'><div>26&nbsp;S</div></div></a><div class='headline'>Loop control expression may not terminate loop.</div></div><p>An infinite loop may be present if the control expression is never zero. This may occur in cases such as:</p>
<pre>
   for ( ; ; )        empty control expression
   for ( ; i &lt; 10; )  no incrementer
   while ( 1 )        non-zero constant
   do.. while(!0)     non-zero constant</pre><p>This standard takes no account of other methods of changing the controlling expression nor of any breaks within the loop body.  More precise forms of infinite loop detection are performed by <a href='standards.htm#standard_c5'>5 C</a> and <a href='standards.htm#standard_d28'>28 D</a>. Infinite loops may be used for legitimate purposes, for example in Real-Time systems, but the potential for dangerous behaviour is still reported.</p>
<p>This standard can be relaxed so that only checks for non-zero constants are performed by setting the modifier <a href='standard_flags.htm#flag_425'>425</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.  An exception is made for for loops where all the clauses are empty.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/******************************************************************
 * Standard 26 S : Loop control expression may not terminate loop.
 ******************************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_26 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 a <span class="sy0">=</span> 0U<span class="sy0">;</span>
&nbsp;
  <span class="kw1">while</span> <span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#123;</span>
     <span class="coMULTI">/* ... */</span> 
  <span class="br0">&#125;</span>
&nbsp;
  <span class="kw1">do</span>
  <span class="br0">&#123;</span>
     <span class="coMULTI">/* ... */</span> 
  <span class="br0">&#125;</span> <span class="kw1">while</span> <span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span>
&nbsp;
  <span class="kw1">for</span> <span class="br0">&#40;</span>a <span class="sy0">=</span> 0U<span class="sy0">;</span> <span class="sy0">;</span> a<span class="sy0">++</span><span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant */</span> 
  <span class="br0">&#123;</span>
     <span class="coMULTI">/* ... */</span> 
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.11.3'>5.11.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_11.2.1'>11.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_142'>142</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_133'>133</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.11.2.1'>4.11.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_5.3'>5.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_2'>2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.9.2'>M1.9.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_425'>425</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='tbrun_requires_model.htm'>TBrun Requires</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s27' name='standard_s27'><div class='standard'><div>27&nbsp;S</div></div></a><div class='headline'>Void procedure with return statement.</div></div><p>If the procedure returns void, then any return statement should not return a value. <a href='standards.htm#standard_s36'>36 S</a> reports on functions without a corresponding return value. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 27 S : Void procedure with return statement.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_27<span class="br0">&#40;</span> UINT_32 p_1<span class="sy0">,</span> UINT_32 p_2<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 result<span class="sy0">;</span>
   result <span class="sy0">=</span> p_1 <span class="sy0">+</span> p_2<span class="sy0">;</span>
   <span class="kw1">return</span> result<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.9.2'>5.9.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_9.1.2'>9.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_398'>398</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_84'>84</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_112'>112</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.9.1.2'>4.9.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_84'>84</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_84'>84</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s28' name='standard_s28'><div class='standard'><div>28&nbsp;S</div></div></a><div class='headline'>Duplicated Base Classes in a Derived class.</div></div><p>This standard reports when a derived class is based upon different classes which have a common base class. In such cases multiple base class objects are created and it can be ambiguous as to which member function is called. Virtual inheritance should be used instead.</p>
<div class='title'>Example</div>
<pre class="code c++">class Base
<span class="br0">&#123;</span>
   public<span class="sy0">:</span>
      <span class="kw4">void</span> func <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
class Sub1<span class="sy0">:</span> public Base <span class="br0">&#123;</span> <span class="coMULTI">/* ... */</span> <span class="br0">&#125;</span><span class="sy0">;</span>
class Sub2<span class="sy0">:</span> public Base <span class="br0">&#123;</span> <span class="coMULTI">/* ... */</span> <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 28 S : Duplicated Base Classes in a Derived class.
 ********************************************************/</span>
&nbsp;
class derived <span class="sy0">:</span> public Sub1<span class="sy0">,</span> public Sub2 <span class="br0">&#123;</span> <span class="coMULTI">/* ... */</span> <span class="br0">&#125;</span><span class="sy0">;</span> <span class="co1">// not compliant</span>
&nbsp;
<span class="kw4">void</span> static_028 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	derived d<span class="sy0">;</span>
	d.<span class="me1">func</span> <span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>  <span class="co1">// ambiguous whether Sub1::Base::func()</span>
	            <span class="co1">//                or Sub2::Base::func()</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.3.15'>3.3.15</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s29' name='standard_s29'><div class='standard'><div>29&nbsp;S</div></div></a><div class='headline'>Use of += or -= operators found.</div></div><p>Some organisations believe that the use of these constructs is dangerous. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * Standard 29 S : Use of += or -= operators found.
 *****************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_29<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 x <span class="sy0">=</span> 1u<span class="sy0">;</span>
   UINT_32 y <span class="sy0">=</span> 2u<span class="sy0">;</span>
   UINT_32 z <span class="sy0">=</span> 3u<span class="sy0">;</span>
&nbsp;
   x <span class="sy0">+=</span> 1u<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
   z <span class="sy0">-=</span> y<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.8.1'>5.8.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_8.2.1'>8.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.8.2.1'>4.8.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s30' name='standard_s30'><div class='standard'><div>30&nbsp;S</div></div></a><div class='headline'>Deprecated usage of ++ or -- operators found.</div></div><p>The use of these operators in an expression is considered dangerous because of the side effect. This standard should also be considered in conjunction with <a href='standards.htm#standard_s124'>124 S</a> which flags all prefix uses of ++ and --. Users are advised to select one or other of these standards.</p>
<p>This standard can be relaxed to allow the use of ++ and --  in stand-alone expressions and the 3rd expression of a for loop by setting the modifier <a href='standard_flags.htm#flag_122'>122</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. By default, the standard is configured to permit the relaxed use as described.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span> UINT_32 p_x<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * Standard 30 S : Deprecated usage of ++ or -- operators found.
 *****************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_30<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 x <span class="sy0">=</span> 1u<span class="sy0">;</span>
   UINT_32 y <span class="sy0">=</span> 2u<span class="sy0">;</span>
&nbsp;
   BOOL flag <span class="sy0">=</span> FALSE<span class="sy0">;</span>
&nbsp;
   <span class="kw1">if</span> <span class="br0">&#40;</span>flag <span class="sy0">==</span> FALSE<span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      x<span class="sy0">++;</span>   <span class="coMULTI">/* not compliant but permitted with modifier 122 */</span>
   <span class="br0">&#125;</span>
&nbsp;
   x <span class="sy0">=</span> x <span class="sy0">+</span> y<span class="sy0">++;</span>  <span class="coMULTI">/* not compliant */</span>
   foo<span class="br0">&#40;</span> x<span class="sy0">++</span> <span class="br0">&#41;</span><span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp30-c'>EXP30-C</a>, <a href='cert-c_model.htm#rule_cert-c_exp31-c'>EXP31-C</a>, <a href='cert-c_model.htm#rule_cert-c_fio41-c'>FIO41-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_8.2.2'>8.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_737'>737</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_122'>122</a> = 1</td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_33'>33</a>, <a href='dera_model.htm#rule_dera_46'>46</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.10.1'>3.10.1</a>, <a href='fsb582-c_model.htm#rule_fsb582-c_3.10.2'>3.10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_122'>122</a> = 1</td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.17'>9.17</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.8.2.2'>4.8.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.3'>10.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_33'>33</a>, <a href='his_model.htm#rule_his_46'>46</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_304'>304</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_12.2'>12.2</a>, <a href='misra-ac_model.htm#rule_misra-ac_12.13'>12.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-1'>5-0-1</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-2-10'>5-2-10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_33'>33</a>, <a href='misra-c_1998_model.htm#rule_misra-c%3A1998_46'>46</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.2'>12.2</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.13'>12.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.13.1'>R.13.1</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.13.2'>R.13.2</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.13.3'>R.13.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_122'>122</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m3.2.2'>M3.2.2</a>, <a href='sec-c_model.htm#rule_sec-c_r3.6.1'>R3.6.1</a>, <a href='sec-c_model.htm#rule_sec-c_r3.6.2'>R3.6.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_122'>122</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s31' name='standard_s31'><div class='standard'><div>31&nbsp;S</div></div></a><div class='headline'>Use of break statement in loop.</div></div><p>Using a break statement in a loop is considered by some to violate the rules of structured programming, as it causes a loop to have more than one exit.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 31 S : Use of break statement in loop.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_31 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  SINT_32 i<span class="sy0">=</span><span class="nu0">10</span> <span class="sy0">;</span>
&nbsp;
  <span class="kw1">while</span> <span class="br0">&#40;</span>i <span class="sy0">&gt;</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
     <span class="kw1">if</span> <span class="br0">&#40;</span>i <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span>
     <span class="br0">&#123;</span>
         <span class="kw2">break</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
     <span class="br0">&#125;</span>
     i <span class="sy0">=</span> i <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_11.2.2'>11.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_58'>58</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_120'>120</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.9'>9.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.11.2.2'>4.11.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_58'>58</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_191'>191</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_342'>342</a>, <a href='lmtcp_model.htm#rule_lmtcp_362'>362</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_58'>58</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_1.7.e'>1.7.e</a>, <a href='netrino_model.htm#rule_netrino_8.5.a'>8.5.a</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s32' name='standard_s32'><div class='standard'><div>32&nbsp;S</div></div></a><div class='headline'>Use of continue statement.</div></div><p>The use of the continue statement is considered by some to violate the rules of structured programming. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 32 S : Use of continue statement
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_32 <span class="br0">&#40;</span> SINT_32 p_1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  SINT_32 i <span class="sy0">=</span> p_1<span class="sy0">;</span>
  SINT_32 x <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
  <span class="kw1">while</span> <span class="br0">&#40;</span> i <span class="sy0">!=</span> <span class="nu0">0</span> <span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
      i<span class="sy0">--;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span> x <span class="sy0">==</span> <span class="nu0">0</span> <span class="br0">&#41;</span>
      <span class="br0">&#123;</span>
          <span class="kw1">continue</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
      <span class="br0">&#125;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.8.2'>5.8.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_8.2.3'>8.2.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_57'>57</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_119'>119</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.13'>9.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.8.2.3'>4.8.2.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_57'>57</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_190'>190</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_341'>341</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_14.5'>14.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-6-3'>6-6-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_57'>57</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_14.5'>14.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_1.7.d'>1.7.d</a>, <a href='netrino_model.htm#rule_netrino_8.5.a'>8.5.a</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m3.1.3'>M3.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s33' name='standard_s33'><div class='standard'><div>33&nbsp;S</div></div></a><div class='headline'>Use of ternary operator found.</div></div><p>The use of these expressions can lead to highly complex code which can be unreadable. There are also often difficulties associated with the correct evaluation of the logical expression, and the termination of the final conditional expression. This standard will report any instances encountered. for example: </p>
<pre>
		x = ( a ? b : c )  /* correct logical and condition terms*/ 
</pre><p>In this following sample, the logical term could be (a+b) or just b:</p>
<pre>
		x =  a + b ? b : c /* potential logical term error */ 
</pre><p>In this following sample, the final conditional term could be (c+6) or just c, with an addition of 6 to the result of the ternary expression:</p>
<pre>
		x = a ? b : c + 6 /* potential condition error */ 
</pre><div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * Standard 33 S : Use of ternary expression found.
 *****************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_33<span class="br0">&#40;</span> UINT_32 p_1 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 val0 <span class="sy0">=</span> 0u<span class="sy0">;</span>
   UINT_32 val1 <span class="sy0">=</span> 1u<span class="sy0">;</span>
   UINT_32 result<span class="sy0">;</span>
&nbsp;
   result <span class="sy0">=</span> <span class="br0">&#40;</span> p_1 <span class="sy0">==</span> 0u <span class="br0">&#41;</span> <span class="sy0">?</span> val0 <span class="sy0">:</span> val1 <span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.8.3'>5.8.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_8.2.4'>8.2.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_134'>134</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.8.2.4'>4.8.2.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.20'>10.20</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_366'>366</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s34' name='standard_s34'><div class='standard'><div>34&nbsp;S</div></div></a><div class='headline'>No parameters declared in proc specification.</div></div><p>This standard reports when a function declaration has been specified with no parameters, but the function definition has been specified with parameters.</p>
<p>Standard <a href='standards.htm#standard_s63'>63 S</a> reports on all declarations and definitions with no parameters.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**************************************************************
 * Standard 34 S : No parameters declared in proc specification.
 **************************************************************/</span> 
&nbsp;
UINT_32 static_34<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
UINT_32 static_34<span class="br0">&#40;</span>UINT_32 p<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw1">return</span> p<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.1.5'>5.1.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.6'>1.1.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.1.6'>4.1.1.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c++.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s35' name='standard_s35'><div class='standard'><div>35&nbsp;S</div></div></a><div class='headline'>Static procedure is not explicitly called in code analysed.</div></div><p>If a procedure is declared as static then it has file scope. If the procedure is not used in that file then it is not needed and could be removed.</p>
<p>Note that this standard detects explicit procedure calls and so will also give a warning if a procedure is only accessed via its address. In such cases the procedure may not be removed.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/****************************************************************************
 * Standard 35 S : Static procedure is not explicitly called in code analysed.
 ****************************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> BOOL static_35<span class="br0">&#40;</span>UINT_32 p_1<span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
   BOOL ret <span class="sy0">=</span> <span class="br0">&#40;</span> p_1 <span class="sy0">==</span> 1U <span class="br0">&#41;</span><span class="sy0">;</span>
   <span class="kw1">return</span> ret<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.7.2'>5.7.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_7.1.3'>7.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_561'>561</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.7.1.3'>4.7.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.2.1'>R.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.1.1'>M1.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s36' name='standard_s36'><div class='standard'><div>36&nbsp;S</div></div></a><div class='headline'>Function has no return statement.</div></div><p>A function with a non-void return type and without a return statement will return an indeterminate value, often the top value of the stack.</p>
<p>Functions with a non-void return type should have a return statement or an if statement containing return statements on all branches at the end of the function. Placing the return at the end of the function improves readability and maintainability. This does not preclude additional return statements earlier in the function.</p>
<p>Missing return statements where there is more complicated control flow will be detected using <a href='standards.htm#standard_d2'>2 D</a> rather than by this standard.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 36 S : Function has no return statement.
 ********************************************************/</span> 
&nbsp;
UINT_32 static_36 <span class="br0">&#40;</span> UINT_32 p_1 <span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
   UINT_32 y <span class="sy0">=</span> p_1<span class="sy0">;</span>
&nbsp;
   <span class="coMULTI">/* Not returning a value */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.9.1'>5.9.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_9.1.1'>9.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_75'>75</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_6.1'>6.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.9.1.1'>4.9.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_5.10'>5.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_75'>75</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_114'>114</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_209'>209</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_16.8'>16.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_8-4-3'>8-4-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_75'>75</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_16.8'>16.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.17.4'>R.17.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_x2.x'>X2.x</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s37' name='standard_s37'><div class='standard'><div>37&nbsp;S</div></div></a><div class='headline'>Procedure parameter has a type but no identifier.</div></div><p>It is a constraint error for function definitions to have a type and no parameter name.  However, some compilers allow a parameter to have a type but no name. Such parameters cannot be used. Function declarations are permitted to have a type and no name. </p>
<p>This standard reports all function types where a parameter has type, but no identifier. This includes function declaration, definitions and typedefs.
Guidelines vary in whether typedefs with function types should be checked, so the user will need to check their guideline documentation if they are following a specific set of guidelines.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**********************************************************
 * Standard 37 S : Procedure parameter has a type but no identifier.
 * Does not Compile with VC++
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_37 <span class="br0">&#40;</span> UINT_32 <span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">void</span> static_37 <span class="br0">&#40;</span> UINT_32 <span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant - constraint error */</span>
<span class="br0">&#123;</span>
   <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.1.6'>5.1.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.7'>1.1.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_73'>73</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.6.4'>3.6.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_6.5'>6.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.1.7'>4.1.1.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_73'>73</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_233'>233</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_16.3'>16.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_73'>73</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_16.3'>16.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.2'>R.8.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_6.2.f'>6.2.f</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m4.5.1'>M4.5.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s38' name='standard_s38'><div class='standard'><div>38&nbsp;S</div></div></a><div class='headline'>Use of static class member.</div></div><p>Some bodies consider the use of global variables to be bad practice. A class with a static data member is therefore also considered bad practice. Static member functions also introduce the prospect of runtime initialization errors, so their use is also considered unsafe. </p>
<p>This standard can be relaxed to allow non-public static members and constant static public members by setting the modifier <a href='standard_flags.htm#flag_423'>423</a> to 1 in the c/cppreport.dat file.  <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the c/cppreport.dat file.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 38 S : Use of static class member.
 ********************************************************/</span> 
class Counter
<span class="br0">&#123;</span>
   public<span class="sy0">:</span>
      Counter<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
      ~Counter<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
      <span class="kw4">static</span> UINT_32 Count<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>  <span class="co1">// not compliant</span>
   private<span class="sy0">:</span>
      <span class="kw4">static</span> UINT_32 numItems<span class="sy0">;</span> <span class="co1">// not compliant</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
Counter<span class="sy0">::</span><span class="me2">Counter</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   numItems<span class="sy0">++;</span>
<span class="br0">&#125;</span>
&nbsp;
Counter<span class="sy0">::</span>~Counter<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   numItems<span class="sy0">--;</span>
<span class="br0">&#125;</span>
&nbsp;
UINT_32 Counter<span class="sy0">::</span><span class="me2">Count</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw1">return</span> numItems<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
UINT_32 Counter<span class="sy0">::</span><span class="me2">numItems</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_500'>500</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_423'>423</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s39' name='standard_s39'><div class='standard'><div>39&nbsp;S</div></div></a><div class='headline'>Unsuitable type for loop variable.</div></div><p>The use of variables with floating-point types in the expressions of a for statement may lead to unexpected behaviour.  This standard checks for the use of variables with floating-point types in the 1st and 2nd expressions of a for loop.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 39 S : Unsuitable type for loop variable
 ********************************************************/</span> 
<span class="kw4">void</span> static_39<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  FLOAT_32 f <span class="sy0">=</span> <span class="nu17">0.0F</span><span class="sy0">;</span>
&nbsp;
  <span class="kw1">for</span> <span class="br0">&#40;</span>f <span class="sy0">=</span> <span class="nu17">0.0F</span><span class="sy0">;</span> f <span class="sy0">&lt;</span> <span class="nu17">10.0F</span><span class="sy0">;</span> f <span class="sy0">=</span> f <span class="sy0">+</span> <span class="nu17">1.0F</span><span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#123;</span>
     <span class="coMULTI">/* ... */</span> <span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.11.1'>5.11.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_flp30-c'>FLP30-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_11.1.1'>11.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_739'>739</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_65'>65</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.11.1.1'>4.11.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_65'>65</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_197'>197</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_349'>349</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_13.4'>13.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_65'>65</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_13.4'>13.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.14.1'>R.14.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.1.2'>R2.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s40' name='standard_s40'><div class='standard'><div>40&nbsp;S</div></div></a><div class='headline'>Loop index is not declared locally.</div></div><p>Some authorities believe that loop indices should be declared in the smallest enclosing scope. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
INT_32 global_f <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 40 S : Loop index not declared locally
 ********************************************************/</span>
&nbsp;
SINT_32 loop_standards <span class="br0">&#40;</span>SINT_32 p_1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  SINT_32 j <span class="sy0">=</span> <span class="nu0">10</span><span class="sy0">;</span>
&nbsp;
  <span class="kw1">for</span> <span class="br0">&#40;</span>global_f <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> global_f <span class="sy0">&lt;</span> <span class="nu0">10</span><span class="sy0">;</span> global_f <span class="sy0">=</span> global_f <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#123;</span>
     j<span class="sy0">--;</span>
  <span class="br0">&#125;</span>
  <span class="kw1">return</span> j<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.11.2'>5.11.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_11.1.2'>11.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.11.1.2'>4.11.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_5.12'>5.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_353'>353</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s41' name='standard_s41'><div class='standard'><div>41&nbsp;S</div></div></a><div class='headline'>Ellipsis used in procedure parameter list.</div></div><p>An ellipsis () allows a procedure to receive a variable number of parameters, which prevents any checking activity. This is a construct which can be heavily abused. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdarg.h&gt; </span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 41 S : Ellipsis used in procedure parameter list.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_41<span class="br0">&#40;</span>UCHAR<span class="sy0">*</span> p_1<span class="sy0">,</span> ...<span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
   va_list ap<span class="sy0">;</span>
   UCHAR<span class="sy0">*</span> t<span class="sy0">;</span>
&nbsp;
   va_start<span class="br0">&#40;</span>ap<span class="sy0">,</span> p_1<span class="br0">&#41;</span><span class="sy0">;</span>
   t <span class="sy0">=</span> va_arg<span class="br0">&#40;</span>ap<span class="sy0">,</span> UCHAR<span class="sy0">*</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
   va_end<span class="br0">&#40;</span>ap<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.1.7'>5.1.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl10-c'>DCL10-C</a>, <a href='cert-c_model.htm#rule_cert-c_dcl11-c'>DCL11-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.8'>1.1.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_628'>628</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_69'>69</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_40'>40</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.6.5'>3.6.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.1.8'>4.1.1.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_11.6'>11.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_69'>69</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_8'>8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_108'>108</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_203'>203</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_16.1'>16.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_8-4-1'>8-4-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_69'>69</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_16.1'>16.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.8.2'>R2.8.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s42' name='standard_s42'><div class='standard'><div>42&nbsp;S</div></div></a><div class='headline'>Use of bit field in structure declaration.</div></div><p>Bit fields are a source of difficulty in C because of ambiguities in the ANSI standard. The representation of the bit field is implementation defined, hence no assumptions can be made about such issues as alignment. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 42 S : Use of bit field in structure declaration.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">struct</span> bitfield1 <span class="br0">&#123;</span>UINT_32  x<span class="sy0">:</span><span class="nu0">1</span><span class="sy0">;</span><span class="br0">&#125;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">void</span> static_42<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    <span class="coMULTI">/* ... */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.1.21'>5.1.21</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.2.4'>1.2.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.2.4'>4.1.2.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_3.5'>3.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_9-6-1'>9-6-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_3.5'>3.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_p1.3.3'>P1.3.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s43' name='standard_s43'><div class='standard'><div>43&nbsp;S</div></div></a><div class='headline'>Use of setjmp/longjmp.</div></div><p>The use of these constructs can lead to many difficulties including lack of portability and structure. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &lt;setjmp.h&gt; </span>
<span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
jmp_buf env<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 43 S : Use of setjmp/longjmp.
 ********************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_43 <span class="br0">&#40;</span>SINT_32 val<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   longjmp<span class="br0">&#40;</span>env<span class="sy0">,</span>val<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.5.3'>5.5.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_env33-c'>ENV33-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_5.2.1'>5.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_122'>122</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.5.2.1'>4.5.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_122'>122</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_1'>1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_20'>20</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_24'>24</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_20.7'>20.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_17-0-5'>17-0-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_122'>122</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_20.7'>20.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.21.4'>R.21.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s44' name='standard_s44'><div class='standard'><div>44&nbsp;S</div></div></a><div class='headline'>Use of banned function or variable.</div></div><p>In many installations there are reasons for banning the use of particular items:</p>
<p>procedures or functions from libraries ( malloc, calloc and realloc ),<br/>

library files,<br/>

specific names.</p>
<p>For example:<br/>
</p>
<p>calloc, malloc, realloc, free, errno, offsetof, va_arg, va_start, va_end, atof, atoi, atol, getenv, system, bsearch, qsort, isalnum, qsort, isalnum, isalpha, iscntrl, islower, isprint, isupper, perror, strerror, and fmod are all banned for C by default.</p>
<p>setlocale is banned in C++.</p>
<p>To set up a ban, the c/cppvals.dat file will need specific entries for each procedure or function name, marked as type 240.  Instructions for making alterations can be found in the manual. Users can add extra entries into this data file in the same format as the default entries:</p>
<pre>240  11 banned_proc </pre><p>abort and exit can be banned by using standard <a href='standards.htm#standard_s122'>122 S</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdarg.h&gt; </span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 44 S : Use of banned function or variable.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_44<span class="br0">&#40;</span> CHAR<span class="sy0">*</span> p_1<span class="sy0">,</span>...<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   va_list ap<span class="sy0">;</span>
   CHAR<span class="sy0">*</span> t<span class="sy0">;</span>
&nbsp;
   va_start<span class="br0">&#40;</span>ap<span class="sy0">,</span> p_1<span class="br0">&#41;</span><span class="sy0">;</span>       <span class="coMULTI">/* not compliant */</span>
   t <span class="sy0">=</span> va_arg<span class="br0">&#40;</span>ap<span class="sy0">,</span> CHAR<span class="sy0">*</span><span class="br0">&#41;</span><span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span>
&nbsp;
   va_end<span class="br0">&#40;</span>ap<span class="br0">&#41;</span><span class="sy0">;</span>              <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl03-c'>DCL03-C</a>, <a href='cert-c_model.htm#rule_cert-c_env00-c'>ENV00-C</a>, <a href='cert-c_model.htm#rule_cert-c_err01-c'>ERR01-C</a>, <a href='cert-c_model.htm#rule_cert-c_err06-c'>ERR06-C</a>, <a href='cert-c_model.htm#rule_cert-c_err30-c'>ERR30-C</a>, <a href='cert-c_model.htm#rule_cert-c_err32-c'>ERR32-C</a>, <a href='cert-c_model.htm#rule_cert-c_exp38-c'>EXP38-C</a>, <a href='cert-c_model.htm#rule_cert-c_fio43-c'>FIO43-C</a>, <a href='cert-c_model.htm#rule_cert-c_int06-c'>INT06-C</a>, <a href='cert-c_model.htm#rule_cert-c_msc30-c'>MSC30-C</a>, <a href='cert-c_model.htm#rule_cert-c_pos33-c'>POS33-C</a>, <a href='cert-c_model.htm#rule_cert-c_str03-c'>STR03-C</a>, <a href='cert-c_model.htm#rule_cert-c_str35-c'>STR35-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_7.1.4'>7.1.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_78'>78</a>, <a href='cwe_model.htm#rule_cwe_187'>187</a>, <a href='cwe_model.htm#rule_cwe_242'>242</a>, <a href='cwe_model.htm#rule_cwe_338'>338</a>, <a href='cwe_model.htm#rule_cwe_365'>365</a>, <a href='cwe_model.htm#rule_cwe_475'>475</a>, <a href='cwe_model.htm#rule_cwe_676'>676</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_69'>69</a>, <a href='dera_model.htm#rule_dera_118'>118</a>, <a href='dera_model.htm#rule_dera_119'>119</a>, <a href='dera_model.htm#rule_dera_120'>120</a>, <a href='dera_model.htm#rule_dera_121'>121</a>, <a href='dera_model.htm#rule_dera_125'>125</a>, <a href='dera_model.htm#rule_dera_126'>126</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_59'>59</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_2.3'>2.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.7.1.4'>4.7.1.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_8.3.3'>8.3.3</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_12.2'>12.2</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_17.9'>17.9</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_17.13'>17.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_69'>69</a>, <a href='his_model.htm#rule_his_118'>118</a>, <a href='his_model.htm#rule_his_119'>119</a>, <a href='his_model.htm#rule_his_120'>120</a>, <a href='his_model.htm#rule_his_121'>121</a>, <a href='his_model.htm#rule_his_125'>125</a>, <a href='his_model.htm#rule_his_126'>126</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_3'>3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_13'>13</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_17'>17</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_18'>18</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_19'>19</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_21'>21</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_22'>22</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_23'>23</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_24'>24</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_25'>25</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_21'>21</a>, <a href='lmtcp_model.htm#rule_lmtcp_22'>22</a>, <a href='lmtcp_model.htm#rule_lmtcp_23'>23</a>, <a href='lmtcp_model.htm#rule_lmtcp_27'>27</a>, <a href='lmtcp_model.htm#rule_lmtcp_28'>28</a>, <a href='lmtcp_model.htm#rule_lmtcp_200'>200</a>, <a href='lmtcp_model.htm#rule_lmtcp_368'>368</a>, <a href='lmtcp_model.htm#rule_lmtcp_372'>372</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_20.1'>20.1</a>, <a href='misra-ac_model.htm#rule_misra-ac_20.4'>20.4</a>, <a href='misra-ac_model.htm#rule_misra-ac_20.5'>20.5</a>, <a href='misra-ac_model.htm#rule_misra-ac_20.6'>20.6</a>, <a href='misra-ac_model.htm#rule_misra-ac_20.10'>20.10</a>, <a href='misra-ac_model.htm#rule_misra-ac_20.11'>20.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_17-0-1'>17-0-1</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_18-0-2'>18-0-2</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_18-2-1'>18-2-1</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_18-4-1'>18-4-1</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_19-3-1'>19-3-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_69'>69</a>, <a href='misra-c_1998_model.htm#rule_misra-c%3A1998_118'>118</a>, <a href='misra-c_1998_model.htm#rule_misra-c%3A1998_119'>119</a>, <a href='misra-c_1998_model.htm#rule_misra-c%3A1998_120'>120</a>, <a href='misra-c_1998_model.htm#rule_misra-c%3A1998_121'>121</a>, <a href='misra-c_1998_model.htm#rule_misra-c%3A1998_125'>125</a>, <a href='misra-c_1998_model.htm#rule_misra-c%3A1998_126'>126</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_20.1'>20.1</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_20.4'>20.4</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_20.5'>20.5</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_20.6'>20.6</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_20.10'>20.10</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_20.11'>20.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_d.4.12'>D.4.12</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.17.1'>R.17.1</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.21.3'>R.21.3</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.21.6'>R.21.6</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.21.7'>R.21.7</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.21.8'>R.21.8</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.21.9'>R.21.9</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.21.10'>R.21.10</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.21.12'>R.21.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m5.2.1'>M5.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s45' name='standard_s45'><div class='standard'><div>45&nbsp;S</div></div></a><div class='headline'>Use of C++ keyword.</div></div><p>This standard reports the use of C++ keywords in C files, as specified as type 241 in the cvals.dat file. Instructions for making alterations can be found in the manual. Users can add extra entries into this data file in the same format as the default entries:</p>
<p>241 9 namespace<br/>

241 5 throw<br/>

241 5 class<br/>

241 6 public<br/>

241 7 private<br/>

241 9 protected<br/>

241 8 operator<br/>

241 3 new<br/>

241 8 template<br/>

241 7 virtual<br/>

241 6 delete<br/>

241 6 friend<br/>

241 4 cout<br/>

241 3 cin<br/>

241 4 endl</p>
<p>Whilst these are permitted in C it precludes the code from being compiled by a C++ compiler.</p>
<p>For C code, the cvals.dat file must be altered. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 45 S : Use of C++ keyword.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_45<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 public    <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
   UINT_32 private   <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
   UINT_32 protected <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
   UINT_32 operator  <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
   UINT_32 new       <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
   UINT_32 template  <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
   UINT_32 virtual   <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
   UINT_32 delete    <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
   UINT_32 friend    <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
   UINT_32 <a href="http://www.opengroup.org/onlinepubs/009695399/functions/cout.html"><span class="kw3">cout</span></a>      <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
   UINT_32 cin       <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
   UINT_32 endl      <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
   <span class="coMULTI">/* ... */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.1.8'>5.1.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.9'>1.1.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.1.9'>4.1.1.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_6.1.a'>6.1.a</a>, <a href='netrino_model.htm#rule_netrino_7.1.a'>7.1.a</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c++.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s46' name='standard_s46'><div class='standard'><div>46&nbsp;S</div></div></a><div class='headline'>extern not in nominated include file.</div></div><p>In some environments the use of extern is closely controlled, for instance only specified included files may contain such types. Files allowed to use the extern keyword are identified by including an entry in the data file c/cpptbend.dat. Instructions for making alterations can be found in the manual.</p>
<p>Locate the line: </p>
<pre>
  -1    1     Put File name for permitted extern keyword use before here
</pre><p>and insert any files ahead of the above, using the following structure:</p>
<pre>
   1   28 c:\mysource\extern_in_here.c
  -1    1     Put File name for permitted extern keyword use before here
</pre><p>where the line format is:</p>
<pre>&lt;3 spaces&gt; 1 &lt;spaces&gt; &lt;length of filename&gt; &lt;space&gt; &lt;filename including path&gt;</pre><p>The numbers must line up as shown in the above example.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 46 S : extern not in nominated include file.
 ********************************************************/</span>
&nbsp;
<span class="kw2">extern</span> UINT_32 undef_global<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">void</span> static_46<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
     undef_global <span class="sy0">=</span> 1u<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.16.15'>5.16.15</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_7.1.5'>7.1.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.7.1.5'>4.7.1.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s47' name='standard_s47'><div class='standard'><div>47&nbsp;S</div></div></a><div class='headline'>Array bound exceeded.</div></div><p>An index has been found which is not in the range specified for the array. This standard is enforced for local arrays that are explicitly declared or whose size can be determined from their initialisation. For example:</p>
<pre>int a[4];
int b[] = {0, 0, 0, 0};
    .. a[5] ..
    .. b[5] ..
</pre><p>are detected.  </p>
<p>The use of array manipulation via pointers, i.e. procedure parameters, are reported using <a href='standards.htm#standard_s87'>87 S</a>. The use of global arrays or indexing via procedure calls are reported using <a href='standards.htm#standard_x64'>64 X</a>,  <a href='standards.htm#standard_x68'>68 X</a>, <a href='standards.htm#standard_x69'>69 X</a> and <a href='standards.htm#standard_x72'> 72 X</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*********************************************************
 *  Standard 47 S : Array bound exceeded.
 *********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_047<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  SINT_32 array<span class="br0">&#91;</span><span class="nu0">5</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu0">0</span><span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
  array<span class="br0">&#91;</span><span class="nu0">5</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.6.2'>5.6.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_arr30-c'>ARR30-C</a>, <a href='cert-c_model.htm#rule_cert-c_arr35-c'>ARR35-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.1.2'>6.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_121'>121</a>, <a href='cwe_model.htm#rule_cwe_122'>122</a>, <a href='cwe_model.htm#rule_cwe_124'>124</a>, <a href='cwe_model.htm#rule_cwe_126'>126</a>, <a href='cwe_model.htm#rule_cwe_127'>127</a>, <a href='cwe_model.htm#rule_cwe_129'>129</a>, <a href='cwe_model.htm#rule_cwe_193'>193</a>, <a href='cwe_model.htm#rule_cwe_466'>466</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a>, <a href='cwe_model.htm#rule_cwe_823'>823</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_4'>4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.6.1.2'>4.6.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.2'>10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-16'>5-0-16</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_4'>4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.18.1'>R.18.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_x3.x'>X3.x</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s48' name='standard_s48'><div class='standard'><div>48&nbsp;S</div></div></a><div class='headline'>No default case in switch statement.</div></div><p>If a switch statement contains no default the processing continues at the next statement. Inserting a default clause implies that some thought has been given to the issue. </p>
<p>This standard can be relaxed to allow switch statements on enumerated types with no default statement by setting the modifier <a href='standard_flags.htm#flag_252'>252</a> to 1 in the c/cppreport.dat file. Alternatively, the standard can be relaxed to only allow no default statement if all the enumeration values are covered by setting the modifier <a href='standard_flags.htm#flag_233'>233</a> to 1. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the c/cppreport.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 48 S :  No default case in switch statement.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_48<span class="br0">&#40;</span>SINT_32 p_1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  SINT_32 i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span> j <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
  <span class="kw1">switch</span> <span class="br0">&#40;</span>p_1<span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#123;</span>
     <span class="kw1">case</span> <span class="nu0">0</span><span class="sy0">:</span>
        j <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
        <span class="kw2">break</span><span class="sy0">;</span>
     <span class="kw1">case</span> <span class="nu0">1</span><span class="sy0">:</span>
        j<span class="sy0">=</span>i<span class="sy0">;</span>
        <span class="kw2">break</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.3.3'>5.3.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc01-c'>MSC01-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_3.1.4'>3.1.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_478'>478</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_62'>62</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_163'>163</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.9.2.3'>3.9.2.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.8'>9.8</a>, <a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_10.2'>10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.3.1.4'>4.3.1.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_62'>62</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_194'>194</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_196'>196</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_252'>252</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_346'>346</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-4-6'>6-4-6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_62'>62</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_15.3'>15.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.16.4'>R.16.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_8.3.b'>8.3.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r3.5.2'>R3.5.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s49' name='standard_s49'><div class='standard'><div>49&nbsp;S</div></div></a><div class='headline'>Logical conjunctions need brackets.</div></div><p>The use of brackets to clarify the precedence order of logical conjunctions and (&amp;&amp;) and or (||) can help eliminate errors and improve maintainability.</p>
<p>This standard can be relaxed to allow function calls and array indexing without brackets by setting the modifier <a href='standard_flags.htm#flag_206'>206</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * Standard 49 S : Logical conjunctions need brackets.
 *****************************************************/</span>
&nbsp;
<span class="kw2">extern</span> BOOL get_bool <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> static_49<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   BOOL flag <span class="sy0">=</span> TRUE<span class="sy0">;</span>
   INT_32 y <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span> x <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span> z <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
&nbsp;
   <span class="kw1">if</span> <span class="br0">&#40;</span>x <span class="sy0">&lt;</span> <span class="nu0">0</span> <span class="sy0">||</span> z <span class="sy0">+</span> y <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant */</span>
   <span class="br0">&#123;</span>
      flag <span class="sy0">=</span> FALSE<span class="sy0">;</span>
   <span class="br0">&#125;</span>
&nbsp;
   <span class="kw1">if</span> <span class="br0">&#40;</span> flag <span class="sy0">&amp;&amp;</span> get_bool<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant unless modifier 206 set */</span>
   <span class="br0">&#123;</span>
      flag <span class="sy0">=</span> FALSE<span class="sy0">;</span>
   <span class="br0">&#125;</span>    
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.2.4'>5.2.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp00-c'>EXP00-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_206'>206</a> = 1</td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_2.1.4'>2.1.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_783'>783</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_206'>206</a> = 1</td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_34'>34</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_98'>98</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_206'>206</a> = 1</td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.22'>9.22</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_206'>206</a> = 1</td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.2.1.4'>4.2.1.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.4'>10.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_206'>206</a> = 1</td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_34'>34</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_158'>158</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_213'>213</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_206'>206</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_287'>287</a>, <a href='lmtcp_model.htm#rule_lmtcp_363'>363</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_12.1'>12.1</a>, <a href='misra-ac_model.htm#rule_misra-ac_12.5'>12.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-2'>5-0-2</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-2-1'>5-2-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_206'>206</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_34'>34</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.1'>12.1</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.5'>12.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.12.1'>R.12.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_206'>206</a> = 1</td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_1.4.b'>1.4.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.4.1'>M1.4.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s50' name='standard_s50'><div class='standard'><div>50&nbsp;S</div></div></a><div class='headline'>Use of shift operator on signed type.</div></div><p>The shifting of signed types can lead to surprising effects. The result of a shift on a negative value is implementation defined.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * Standard 50 S : Use of shift operator on signed type.
 *****************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_50<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   SINT_32 b <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
&nbsp;
   b <span class="sy0">&gt;&gt;=</span> <span class="nu0">1</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.6.4'>5.6.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int13-c'>INT13-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.1.3'>6.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_682'>682</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_37'>37</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.6.1.3'>4.6.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.11'>10.11</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_10.12'>10.12</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_13.6'>13.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_37'>37</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_295'>295</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_12.7'>12.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_37'>37</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.7'>12.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.1'>R.10.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_5.3.b'>5.3.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s51' name='standard_s51'><div class='standard'><div>51&nbsp;S</div></div></a><div class='headline'>Shifting value too far.</div></div><p>Some compilers do not check that the shift operation cannot exceed the word length, effectively allowing the loss of all significance of the variable being shifted. The limits for the standard types need to be specified in the c/cpptbend.dat file. Instructions for making alterations can be found in the manual. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * Standard 51 S : Shifting value too far.
 *****************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_51<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 x <span class="sy0">=</span> 0u<span class="sy0">;</span>
   UINT_32 y <span class="sy0">=</span> 2u<span class="sy0">;</span>
&nbsp;
   x <span class="sy0">=</span> y <span class="sy0">&lt;&lt;</span> <span class="nu0">34</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.6.5'>5.6.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int34-c'>INT34-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.1.4'>6.1.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_38'>38</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.6.1.4'>4.6.1.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.12'>10.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_38'>38</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_164'>164</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_294'>294</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_12.8'>12.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-8-1'>5-8-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_38'>38</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.8'>12.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.12.2'>R.12.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.5.4'>R2.5.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s52' name='standard_s52'><div class='standard'><div>52&nbsp;S</div></div></a><div class='headline'>Unsigned expression negated.</div></div><p>There may be an implementation-specific implicit type conversion within the calculation, which can causing surprising results. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * Standard 52 S : Unsigned expression negated.
 *****************************************************/</span> 
<span class="kw4">void</span> static_52<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 x <span class="sy0">=</span> 1u<span class="sy0">;</span>
   UINT_32 y <span class="sy0">=</span> 2u<span class="sy0">;</span>
&nbsp;
   y <span class="sy0">=</span> <span class="sy0">-</span>x<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.6.6'>5.6.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int02-c'>INT02-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.1.5'>6.1.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_192'>192</a>, <a href='cwe_model.htm#rule_cwe_197'>197</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_39'>39</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.6.1.5'>4.6.1.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.21'>10.21</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_39'>39</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_165'>165</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_296'>296</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_12.9'>12.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-3-2'>5-3-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_39'>39</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.9'>12.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.1'>R.10.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.5.2'>R2.5.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s53' name='standard_s53'><div class='standard'><div>53&nbsp;S</div></div></a><div class='headline'>Use of comma operator.</div></div><p>Some authorities believe that the use of the comma operator outside of a for loop can make code more difficult to read. As this operator only returns the result of the rightmost expression, care should be taken with its use.</p>
<p>This standard can be further restricted to prohibit the use of the comma operator in for loops by setting the modifier <a href='standard_flags.htm#flag_263'>263</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
UINT_32 foo<span class="br0">&#40;</span> UINT_32 v_1 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">return</span> <span class="br0">&#40;</span>v_1<span class="sy0">+</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * Standard 53 S : Use of comma operator.
 *****************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_53<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 x <span class="sy0">=</span> 1u<span class="sy0">;</span>
&nbsp;
   x<span class="sy0">++</span> <span class="sy0">,</span> foo<span class="br0">&#40;</span>x<span class="br0">&#41;</span> <span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.6.15'>5.6.15</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.2.1'>6.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_42'>42</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.6.2.1'>4.6.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.19'>10.19</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_42'>42</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_168'>168</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_263'>263</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_303'>303</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_263'>263</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_12.10'>12.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_263'>263</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-18-1'>5-18-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_263'>263</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_42'>42</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.10'>12.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_263'>263</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.12.3'>R.12.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_263'>263</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m3.2.1'>M3.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s54' name='standard_s54'><div class='standard'><div>54&nbsp;S</div></div></a><div class='headline'>Sizeof operator with side effects.</div></div><p>The sizeof operator does not compute its operand and hence this can cause surprises if an expression is present.</p>
<p>For example:</p>
<p>in place of </p>
<pre>x = sizeof(y=z); /* WRONG - NO assignment takes place*/ </pre><p>use:</p>
<pre>y = z;
x = sizeof(y); /* correct - returns sizeof type of y*/ 
</pre><div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * Standard 54 S : Sizeof operator with side effects.
 *****************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_54<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 x <span class="sy0">=</span> 1u<span class="sy0">;</span>
   UINT_32 a <span class="sy0">=</span> 1u<span class="sy0">;</span>
&nbsp;
   a <span class="sy0">=</span> <span class="kw4">sizeof</span><span class="br0">&#40;</span> x<span class="sy0">++</span> <span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp06-c'>EXP06-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.2.2'>6.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_737'>737</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_40'>40</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.6.2.2'>4.6.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.9'>10.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_40'>40</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_166'>166</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_300'>300</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_12.3'>12.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-3-4'>5-3-4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_40'>40</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.3'>12.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.13.6'>R.13.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_x1.x'>X1.x</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s55' name='standard_s55'><div class='standard'><div>55&nbsp;S</div></div></a><div class='headline'>Expression with more than one function.</div></div><p>There is the possibility of side effects being different depending on the order of execution. Note that standard | <a href='standards.htm#standard_d22'>2 D</a> reports functions which do have side effects.</p>
<p>Standard <a href='standards.htm#standard_q1'>1 Q</a> is capable of more sophisticated reporting.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * Standard 55 S : Expression with more than one function.
 *****************************************************/</span> 
&nbsp;
UINT_32 exp_1<span class="br0">&#40;</span>UINT_32 <span class="sy0">*</span>p_1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 x <span class="sy0">=</span> <span class="sy0">*</span>p_1<span class="sy0">;</span>
  <span class="br0">&#40;</span><span class="sy0">*</span>p_1<span class="br0">&#41;</span> <span class="sy0">=</span> x<span class="sy0">*</span>x<span class="sy0">;</span>
  <span class="kw1">return</span> <span class="br0">&#40;</span>x<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
UINT_32 exp_2<span class="br0">&#40;</span>UINT_32 <span class="sy0">*</span>p_1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 x <span class="sy0">=</span> <span class="sy0">*</span>p_1<span class="sy0">;</span>
  <span class="br0">&#40;</span><span class="sy0">*</span>p_1<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="br0">&#40;</span>x <span class="sy0">%</span> 2u<span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">return</span> <span class="br0">&#40;</span>x<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_55<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 y <span class="sy0">=</span> 3u<span class="sy0">,</span> x <span class="sy0">=</span> 0u<span class="sy0">;</span>
  x <span class="sy0">=</span> exp_1<span class="br0">&#40;</span><span class="sy0">&amp;</span>y<span class="br0">&#41;</span> <span class="sy0">+</span> exp_2<span class="br0">&#40;</span><span class="sy0">&amp;</span>y<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.7.3'>5.7.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_7.1.6'>7.1.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_46'>46</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.7.1.6'>4.7.1.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_46'>46</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_46'>46</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s56' name='standard_s56'><div class='standard'><div>56&nbsp;S</div></div></a><div class='headline'>Equality comparison of floating point.</div></div><p>This standard reports comparisons involving equality testing of floating point values. This includes ==, !=, &gt;= and &lt;=. Every float expression has an associated representational error, which cannot be resolved. It is safer to test that the difference between two float values fall below an agreed threshold value, rather than depend on some test featuring an equality comparison, where it is impossible to differentiate between numbers that are really equivalent, and those that are equivalent due to representational errors.</p>
<p>For example:</p>
<pre>
  	float x = 1.0f / 7.0f; 
	float y = 2.0f / 7.0f; 
	x = x * 2; 
	if ( x == y ) { ... } /* incorrect - representational errors*/ 
	if (( x -y ) &lt; threshold ) { ... } /* correct - threshold testing*/ 
</pre><p>This standard can be relaxed to permit the use of &gt;= and &lt;= by setting the modifier <a href='standard_flags.htm#flag_223'>223</a> to 1 in the c/cppreport.dat file. The user of the modifier adds extra checks for possible circumventions of this rule. This includes examples such as </p>
<pre>
       ( ( f1 &lt; f2 ) || ( f1 &gt; f2 ) )
       ( ( f1 &lt;= f2 ) &amp;&amp; (f2 &lt;= f1 ) )</pre><p><a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the c/cppreport.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 56 S : Equality comparison of floating point.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_56 <span class="br0">&#40;</span> <span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   FLOAT_32 fl<span class="sy0">,</span> f2<span class="sy0">;</span>
&nbsp;
   fl <span class="sy0">=</span> <span class="nu17">1.01f</span><span class="sy0">;</span>
   f2 <span class="sy0">=</span> <span class="nu17">2.01f</span><span class="sy0">;</span>
&nbsp;
   <span class="kw1">if</span> <span class="br0">&#40;</span>fl <span class="sy0">==</span> f2<span class="br0">&#41;</span>    <span class="coMULTI">/* not compliant */</span>
   <span class="br0">&#123;</span>
      <span class="coMULTI">/* ... */</span> 
   <span class="br0">&#125;</span>
   <span class="kw1">if</span> <span class="br0">&#40;</span>fl <span class="sy0">&gt;=</span> <span class="nu17">0.0f</span><span class="br0">&#41;</span> <span class="coMULTI">/* compliant when modifier 223 is set */</span>
   <span class="br0">&#123;</span>
      fl <span class="sy0">=</span> fl <span class="sy0">+</span> <span class="nu17">0.01f</span><span class="sy0">;</span>
   <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.14.2'>5.14.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_flp35-c'>FLP35-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_223'>223</a> = 1</td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_14.1.1'>14.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_682'>682</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_223'>223</a> = 1</td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_50'>50</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_102'>102</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.14.1.1'>4.14.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.15'>10.15</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_223'>223</a> = 1</td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_50'>50</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_202'>202</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_223'>223</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_358'>358</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-2-2'>6-2-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_223'>223</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_50'>50</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_13.3'>13.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_223'>223</a> = 1</td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_5.4.b'>5.4.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.1.1'>R2.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_223'>223</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s57' name='standard_s57'><div class='standard'><div>57&nbsp;S</div></div></a><div class='headline'>Statement with no side effect.</div></div><p>This is a statement which changes no local or global variables and does not effect the control flow. It appears that it does not need to be present, and so is reported as a matter for investigation. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 57 S : Statement with no side effect.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_57<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 x <span class="sy0">=</span> 0U<span class="sy0">;</span>
&nbsp;
   x<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.8.6'>5.8.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc03-c'>MSC03-C</a>, <a href='cert-c_model.htm#rule_cert-c_msc12-c'>MSC12-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_8.1.4'>8.1.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_398'>398</a>, <a href='cwe_model.htm#rule_cwe_482'>482</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_53'>53</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.8.2.5'>4.8.2.5</a>, <a href='gjb_model.htm#rule_gjb_5.1.1'>5.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.10'>10.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_53'>53</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_187'>187</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_338'>338</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_14.2'>14.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_53'>53</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_14.2'>14.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.2.2'>R.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.9.1'>M1.9.1</a>, <a href='sec-c_model.htm#rule_sec-c_x1.x'>X1.x</a>, <a href='sec-c_model.htm#rule_sec-c_x5.x'>X5.x</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s58' name='standard_s58'><div class='standard'><div>58&nbsp;S</div></div></a><div class='headline'>Null statement found.</div></div><p>The presence of a null statement may indicate that the coder has forgotten a line of code, and so the potential omission is reported as a matter for investigation. In particular null statements can be a problem if they follow a conditional test and the user believes that the following code is controlled by the test.</p>
<p>If a null statement is intended, the penalty may be suppressed by the addition of a comment /* . */</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 58 S : Null statement found.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_58<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 Timing_Loop <span class="sy0">=</span> 100U<span class="sy0">;</span>
&nbsp;
   <span class="coMULTI">/* not compliant - decrement is not part of loop */</span>
   <span class="kw1">while</span> <span class="br0">&#40;</span> Timing_Loop <span class="sy0">&gt;</span> 0U <span class="br0">&#41;</span><span class="sy0">;</span> 
        Timing_Loop<span class="sy0">--;</span>
&nbsp;
  <span class="sy0">;</span> 
  <span class="coMULTI">/* compliant as followed by comment */</span>
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.8.4'>5.8.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc03-c'>MSC03-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_8.2.5'>8.2.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_747'>747</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_54'>54</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.8.2.6'>4.8.2.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_54'>54</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_91'>91</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_14.3'>14.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-2-3'>6-2-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_54'>54</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_14.3'>14.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.9.1'>M1.9.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s59' name='standard_s59'><div class='standard'><div>59&nbsp;S</div></div></a><div class='headline'>Else alternative missing in if.</div></div><p>This is the complement of <a href='standards.htm#standard_s8'>8 S</a> where a dummy entry is deliberately inserted to show that the alternative has been considered. </p>
<p>This standard can be further restricted to check for a missing else in an if statement with no else if by setting the tbend modifier to T in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 59 S : Else alternative missing in if.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_59 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 x <span class="sy0">=</span> 2u<span class="sy0">;</span>
&nbsp;
   <span class="kw1">if</span> <span class="br0">&#40;</span> x <span class="sy0">==</span> 2u <span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      <span class="coMULTI">/* ... */</span> <span class="sy0">;</span>
   <span class="br0">&#125;</span>
   <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span> x <span class="sy0">==</span> 3u<span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      <span class="coMULTI">/* ... */</span> <span class="sy0">;</span>
   <span class="br0">&#125;</span> 
   <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.3.4'>5.3.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc01-c'>MSC01-C</a>, <a href='cert-c_model.htm#rule_cert-c_msc03-c'>MSC03-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_3.1.2'>3.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_697'>697</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_60'>60</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.9.1.2'>3.9.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.19'>9.19</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.3.1.2'>4.3.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_5.11'>5.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_60'>60</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_192'>192</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_344'>344</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_14.10'>14.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-4-2'>6-4-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_60'>60</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_14.10'>14.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.15.7'>R.15.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r3.5.1'>R3.5.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s60' name='standard_s60'><div class='standard'><div>60&nbsp;S</div></div></a><div class='headline'>Empty switch statement.</div></div><p>This is the case of a switch statement with no internal processing. It is reported as a matter for investigation.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="coMULTI">/********************************************************
 * Standard 60 S :  Empty switch statement.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_060<span class="br0">&#40;</span>SINT_32 p_1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">switch</span> <span class="br0">&#40;</span>p_1<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
  <span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_3.1.5'>3.1.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_64'>64</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.3.1.5'>4.3.1.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_64'>64</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_196'>196</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_15.0'>15.0</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_64'>64</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_15.0'>15.0</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.16.6'>R.16.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s61' name='standard_s61'><div class='standard'><div>61&nbsp;S</div></div></a><div class='headline'>Switch contains default only.</div></div><p>A switch statement which has only a default clause is redundant and may indicate a programming error.</p>
<p>This standard can be further restricted to check for switch statements that have only a single path containing null case labels and a default by setting the modifier <a href='standard_flags.htm#flag_437'>437</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="coMULTI">/********************************************************
 * Standard 61 S :  Switch contains default only.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_061<span class="br0">&#40;</span>SINT_32 p_1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  SINT_32 i <span class="sy0">=</span> p_1<span class="sy0">;</span>
&nbsp;
  <span class="kw1">switch</span> <span class="br0">&#40;</span>p_1<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="kw1">default</span><span class="sy0">:</span>
        i<span class="sy0">++;</span>
  <span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
  <span class="kw1">switch</span> <span class="br0">&#40;</span>p_1<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="kw1">case</span> <span class="nu0">1</span><span class="sy0">:</span>
    <span class="kw1">default</span><span class="sy0">:</span>
        i<span class="sy0">++;</span>
  <span class="br0">&#125;</span> <span class="coMULTI">/* not compliant if modifier is set to 1  */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_3.1.6'>3.1.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_64'>64</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.3.1.6'>4.3.1.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_64'>64</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_196'>196</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_348'>348</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_15.5'>15.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-4-8'>6-4-8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_64'>64</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_15.5'>15.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.16.6'>R.16.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s62' name='standard_s62'><div class='standard'><div>62&nbsp;S</div></div></a><div class='headline'>Switch case not terminated with break.</div></div><p>One major source of errors in switch statements is the fall through from one case to another, which is only preventable with the break statement or other transfer of control. This standard ensures that only one case can ever be accessed within the switch. </p>
<p>In order to clarify the structure of the switch, this standard checks that the default statement appears as the last statement of each case and default clause. It may not appear within an if statement.</p>
<p>This standard can be relaxed to allow the default statement to have no break statement by setting the modifier <a href='standard_flags.htm#flag_283'>283</a> to 1 in the c/cppreport.dat file. The standard can also be relaxed to allow a throw statement instead of a break statement at the end of a case clause by setting the modifier <a href='standard_flags.htm#flag_384'>384</a> to 1. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 62 S :  Switch case not terminated with break.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_62<span class="br0">&#40;</span>SINT_32 p_1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  SINT_32 i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span> j <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
  <span class="kw1">switch</span> <span class="br0">&#40;</span>p_1<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
     <span class="kw1">case</span> <span class="nu0">0</span><span class="sy0">:</span>
        j <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>   <span class="coMULTI">/* not compliant*/</span>
     <span class="kw1">case</span> <span class="nu0">1</span><span class="sy0">:</span>
        j <span class="sy0">=</span> i<span class="sy0">;</span>
        <span class="kw2">break</span><span class="sy0">;</span>
     <span class="kw1">default</span><span class="sy0">:</span>
        i <span class="sy0">=</span> j <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant unless modifier 283 set to 1 */</span>
  <span class="br0">&#125;</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.3.6'>5.3.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_3.1.7'>3.1.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_484'>484</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_61'>61</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_164'>164</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.9.2.1'>3.9.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.7'>9.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.3.1.7'>4.3.1.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_5.4'>5.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_61'>61</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_193'>193</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_283'>283</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_345'>345</a>, <a href='lmtcp_model.htm#rule_lmtcp_348'>348</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_15.2'>15.2</a>, <a href='misra-ac_model.htm#rule_misra-ac_15.5'>15.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-4-5'>6-4-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_384'>384</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_61'>61</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_15.2'>15.2</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_15.5'>15.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.16.3'>R.16.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m3.1.4'>M3.1.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s63' name='standard_s63'><div class='standard'><div>63&nbsp;S</div></div></a><div class='headline'>Empty parameter list to procedure/function.</div></div><p>This standard advocates the use of func(void) rather than func(). This indicates that the lack of parameters is intentional, rather than accidental. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**************************************************************
 * Standard 63 S :  Empty Parameter List to procedure/function
 **************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_63<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.1.9'>5.1.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.10'>1.1.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_76'>76</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_109'>109</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.6.4'>3.6.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_6.2'>6.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.1.10'>4.1.1.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_76'>76</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_234'>234</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_16.5'>16.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_76'>76</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_16.5'>16.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.2'>R.8.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.8.1'>R2.8.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s64' name='standard_s64'><div class='standard'><div>64&nbsp;S</div></div></a><div class='headline'>Void procedure used in expression.</div></div><p>A procedure which yields a void value can be used in expressions and this is considered dangerous. This is compiler dependent, but is usually seen within a ternary expression.</p>
<p>This standard also applies to procedures that yield a void* value.  This standard can be relaxed to allow void* by configuring the modifier <a href='standard_flags.htm#flag_218'>218</a> in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * Standard 64 S : Void procedure used in expression.
 * Code Does Not Compile under VC++
 *****************************************************/</span> 
<span class="kw4">void</span> static_64<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   CHAR x<span class="sy0">;</span>
&nbsp;
   x <span class="sy0">=</span> <span class="br0">&#40;</span>CHAR<span class="br0">&#41;</span> foo<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.7.4'>5.7.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_218'>218</a> = 1</td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_218'>218</a> = 1</td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_7.1.7'>7.1.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_218'>218</a> = 1</td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_218'>218</a> = 1</td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_79'>79</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_218'>218</a> = 1</td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.7.1.7'>4.7.1.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_218'>218</a> = 1</td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_79'>79</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_218'>218</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_218'>218</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_79'>79</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_218'>218</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_218'>218</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_218'>218</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s65' name='standard_s65'><div class='standard'><div>65&nbsp;S</div></div></a><div class='headline'>Void variable passed as parameter.</div></div><p>Passing void as a parameter can lead to surprising effects and should therefore be avoided. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">void</span> void_para_func<span class="br0">&#40;</span><span class="kw4">void</span> P1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* ... */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/******************************************************************
 * Standard 65 S : Void variable passed as parameter.
 * Does not Compile with VC++
 ******************************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_65<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">void</span> v_ptr<span class="sy0">;</span>
  UINT_32 a<span class="sy0">;</span>
&nbsp;
  void_para_func<span class="br0">&#40;</span>v_ptr<span class="br0">&#41;</span><span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span>
&nbsp;
  void_para_func<span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>a<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_7.1.8'>7.1.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_80'>80</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.7.1.8'>4.7.1.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_80'>80</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_80'>80</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s66' name='standard_s66'><div class='standard'><div>66&nbsp;S</div></div></a><div class='headline'>Function with empty return expression.</div></div><p>There is a return in a function but no value is specified so the function will return an indeterminate value.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 66 S : Function with empty return expression.
 ********************************************************/</span> 
&nbsp;
UINT_32 static_66 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="coMULTI">/* ... */</span>
   <span class="kw1">return</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.9.3'>5.9.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_9.1.3'>9.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_83'>83</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.9.1.3'>4.9.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_5.10'>5.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_83'>83</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_114'>114</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_209'>209</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_16.8'>16.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_8-4-3'>8-4-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_83'>83</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_16.8'>16.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.17.4'>R.17.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_x2.x'>X2.x</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s67' name='standard_s67'><div class='standard'><div>67&nbsp;S</div></div></a><div class='headline'>#define used in a block.</div></div><p>Macro definitions can obscure readability and in particular those defined in inner blocks are considered dangerous because the block scope is not relevant.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;string.h&gt;</span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard 67 S : #define used in a block.
 *******************************************************/</span> 
<span class="kw4">void</span> static_067<span class="br0">&#40;</span>UINT_32 p_1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 local_x <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
<span class="co2">#define BLOCKDEF &quot;test&quot;</span>
  local_x <span class="sy0">=</span> strlen<span class="br0">&#40;</span>BLOCKDEF<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.2.5'>1.2.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_91'>91</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.2.5'>4.1.2.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_91'>91</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_19.5'>19.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-0-2'>16-0-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_91'>91</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_19.5'>19.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m4.7.5'>M4.7.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s68' name='standard_s68'><div class='standard'><div>68&nbsp;S</div></div></a><div class='headline'>#undef used.</div></div><p>Redefining macros leads to unreadability and is considered bad practice. This standard reports all instances encountered at file scope, and <a href='standards.htm#standard_s426'>426 S</a> reports those at block level.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;string.h&gt;</span>
&nbsp;
<span class="co2">#define BLOCKDEF &quot;test&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard 68 S : #undef used.
 *******************************************************/</span> 
<span class="kw4">void</span> static_68<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 local_x <span class="sy0">=</span> 0U<span class="sy0">;</span>
&nbsp;
  local_x <span class="sy0">=</span> strlen<span class="br0">&#40;</span>BLOCKDEF<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/* not compliant */</span>
<span class="co2">#undef BLOCKDEF</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.2.6'>1.2.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_92'>92</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.2.6'>4.1.2.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_32'>32</a>, <a href='lmtcp_model.htm#rule_lmtcp_92'>92</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_19.6'>19.6</a>, <a href='misra-ac_model.htm#rule_misra-ac_20.1'>20.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-0-3'>16-0-3</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_17-0-1'>17-0-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_92'>92</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_19.6'>19.6</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_20.1'>20.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.20.5'>R.20.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.2'>M1.7.2</a>, <a href='sec-c_model.htm#rule_sec-c_m4.7.6'>M4.7.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s69' name='standard_s69'><div class='standard'><div>69&nbsp;S</div></div></a><div class='headline'>#pragma used.</div></div><p>Compiler pragmas can be used to cover up all sorts of problems; therefore their use needs to be controlled. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard 69 S : #pragma used.
 *******************************************************/</span> 
<span class="co2">#pragma</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_69<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span> <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.2.7'>1.2.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_99'>99</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.2.7'>4.1.2.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_13.4'>13.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_99'>99</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_26'>26</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_247'>247</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_3.4'>3.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-6-1'>16-6-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_99'>99</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_3.4'>3.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_d.1.1'>D.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_1.1.c'>1.1.c</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s70' name='standard_s70'><div class='standard'><div>70&nbsp;S</div></div></a><div class='headline'>Logical comparison of pointers.</div></div><p>The only safe, portable comparison of pointers is to use equality comparisons ( == and != ). This standard reports any other comparisons.</p>
<p>For example:</p>
<pre>
	char * x;
	char * y;
	....
	if (x&gt;y)		{ /*  Incorrect, Unsafe*/ }
	if (x!=y)		{ /*  Correct usage*/ }
</pre><div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 70 S : Logical comparison of pointers.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_70<span class="br0">&#40;</span>UINT_32 <span class="sy0">*</span> p1_ptr<span class="sy0">,</span> UINT_32 <span class="sy0">*</span> p2_ptr <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw1">if</span> <span class="br0">&#40;</span> p1_ptr <span class="sy0">&gt;</span> p2_ptr <span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
   <span class="br0">&#123;</span>
      <span class="coMULTI">/* ... */</span> 
   <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.4.4'>5.4.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_4.2.1'>4.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_103'>103</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.4.2.1'>4.4.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_103'>103</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_171'>171</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_315'>315</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_103'>103</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s71' name='standard_s71'><div class='standard'><div>71&nbsp;S</div></div></a><div class='headline'>Pointer assignment to wider scope.</div></div><p>This standard checks whether the address of an object is assigned to a wider scope. Accessing an object outside its scope will lead to undefined behaviour. </p>
<p>This standard can be relaxed to allow the use of the address of a static object in a return statement by setting the modifier <a href='standard_flags.htm#flag_222'>222</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<p>In general, it is not possible to determine statically whether a pointer contains the address of an object that has lifetime greater than the current scope. Therefore, Testbed also highlights the assignment of all pointers to a wider scope. The user can configure the tool to allow functions that return such pointers.  For example, for data that is created using malloc. These functions are identified by including an entry in the data file c/cpptbend.dat. Instructions for making alterations can be found in the manual.</p>
<p>Locate the line in the .dat file: </p>
<pre>C list of allocator functions  RDALLC</pre><p>and add the function names after it:</p>
<pre>   15 malloc_function</pre><p>where the line format is: ( &lt;spaces&gt;, &lt;length of function name&gt;, &lt;space&gt;, &lt;name of function&gt; ). The function name length should line up with the preceding lines.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 71 S : Pointer assignment to wider scope.
 ********************************************************/</span> 
&nbsp;
UINT_32 <span class="sy0">*</span>ptr<span class="sy0">;</span>
&nbsp;
UINT_32<span class="sy0">*</span> static_71<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw4">static</span> UINT_32 w <span class="sy0">=</span> 10u<span class="sy0">;</span>
   UINT_32 local <span class="sy0">=</span> 3U<span class="sy0">;</span>
   UINT_32 <span class="sy0">*</span>local_ptr <span class="sy0">=</span> <span class="sy0">&amp;</span>local<span class="sy0">;</span>
&nbsp;
   ptr <span class="sy0">=</span> <span class="sy0">&amp;</span>local<span class="sy0">;</span>     <span class="coMULTI">/* Not Compliant */</span>
&nbsp;
   ptr <span class="sy0">=</span> local_ptr<span class="sy0">;</span>  <span class="coMULTI">/* Not Compliant */</span>
&nbsp;
   <span class="kw1">return</span> <span class="sy0">&amp;</span>w<span class="sy0">;</span>       <span class="coMULTI">/* Not Compliant if modifier is set to 0 */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.4.1'>5.4.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl30-c'>DCL30-C</a>, <a href='cert-c_model.htm#rule_cert-c_mem36-c'>MEM36-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_222'>222</a> = 1</td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_4.1.1'>4.1.1</a>, <a href='cmse_model.htm#rule_cmse_9.1.6'>9.1.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_562'>562</a>, <a href='cwe_model.htm#rule_cwe_672'>672</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a>, <a href='cwe_model.htm#rule_cwe_825'>825</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_222'>222</a> = 1</td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_106'>106</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_222'>222</a> = 1</td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_4.11'>4.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_222'>222</a> = 1</td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.4.1.1'>4.4.1.1</a>, <a href='gjb_model.htm#rule_gjb_5.1.18'>5.1.18</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_11.7'>11.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_222'>222</a> = 1</td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_106'>106</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_222'>222</a> = 1</td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_111'>111</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_173'>173</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_222'>222</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_206'>206</a>, <a href='lmtcp_model.htm#rule_lmtcp_316'>316</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_222'>222</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_17.6'>17.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_222'>222</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_7-5-2'>7-5-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_222'>222</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_106'>106</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_222'>222</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_17.6'>17.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_222'>222</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.18.6'>R.18.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_222'>222</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_x3.x'>X3.x</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_222'>222</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s72' name='standard_s72'><div class='standard'><div>72&nbsp;S</div></div></a><div class='headline'>Signed bit field less than 2 bits wide.</div></div><p>A signed bit field requires 1 bit for the sign, and at least 1 bit for the value.</p>
<p>This standard can be relaxed to allow anonymous bit fields by setting the modifier <a href='standard_flags.htm#flag_416'>416</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 72 S : Signed bit field less than 2 bits wide.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">struct</span> s_72 <span class="br0">&#123;</span>SINT_32 x<span class="sy0">:</span><span class="nu0">1</span><span class="sy0">;</span> <span class="br0">&#125;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">void</span> static_72<span class="br0">&#40;</span> <span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.6.7'>5.6.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.1.6'>6.1.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_112'>112</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.6.1.6'>4.6.1.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_112'>112</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_283'>283</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_6.5'>6.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_9-6-4'>9-6-4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_416'>416</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_112'>112</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_6.5'>6.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.6.2'>R.6.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_416'>416</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.6.1'>R2.6.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s73' name='standard_s73'><div class='standard'><div>73&nbsp;S</div></div></a><div class='headline'>Bit field not signed or unsigned int.</div></div><p>The definition of bit fields make their use for other types dangerous. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 73 S : Bit field not signed or unsigned int.
 ********************************************************/</span> 
<span class="kw4">struct</span> static_73 
<span class="br0">&#123;</span> UCHAR  x<span class="sy0">:</span><span class="nu0">1</span><span class="sy0">;</span>  <span class="coMULTI">/* Not Compliant */</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> dummy<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.6.8'>5.6.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int12-c'>INT12-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.1.7'>6.1.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_111'>111</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.6.1.7'>4.6.1.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_283'>283</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_6.4'>6.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_111'>111</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_6.4'>6.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.6.1'>R.6.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_p1.3.3'>P1.3.3</a>, <a href='sec-c_model.htm#rule_sec-c_r2.6.1'>R2.6.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s74' name='standard_s74'><div class='standard'><div>74&nbsp;S</div></div></a><div class='headline'>Union declared.</div></div><p>Unions can be dangerous when the extent of the overlay cannot be certain. Word boundaries are implementation specific.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 74 S : Union declared.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">union</span> s_74<span class="br0">&#123;</span>UCHAR fu<span class="sy0">;</span> UINT_32 xu<span class="sy0">;</span><span class="br0">&#125;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">void</span> static_74<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.1.22'>5.1.22</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.2.8'>1.2.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_109'>109</a>, <a href='dera_model.htm#rule_dera_110'>110</a>, <a href='dera_model.htm#rule_dera_167'>167</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_53'>53</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.2.8'>4.1.2.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_15.1'>15.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_109'>109</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_153'>153</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_282'>282</a>, <a href='lmtcp_model.htm#rule_lmtcp_283'>283</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_18.4'>18.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_9-5-1'>9-5-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_109'>109</a>, <a href='misra-c_1998_model.htm#rule_misra-c%3A1998_110'>110</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_18.4'>18.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.19.2'>R.19.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.6.2'>M1.6.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s75' name='standard_s75'><div class='standard'><div>75&nbsp;S</div></div></a><div class='headline'>Executable code before an included file.</div></div><p>In an attempt to enforce a clear design, some authorities believe that included files should only occur at the beginning of a file before any executable code. This standard reports any instances of include files after executable code.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/*******************************************************
 * Standard 75 S : Executable code before an included file.
 *******************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_75<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
<span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_2.1.5'>2.1.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_87'>87</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.2.1.5'>4.2.1.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_87'>87</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_39'>39</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_19.1'>19.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-0-1'>16-0-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_87'>87</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_19.1'>19.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.20.1'>R.20.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_4.3.b'>4.3.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s76' name='standard_s76'><div class='standard'><div>76&nbsp;S</div></div></a><div class='headline'>More than one of # or ## in a macro.</div></div><p>Due to poor definition in the language it is dangerous to use more than one of these operators or indeed both in the same macro. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard  76 S : More than one of # or ## in a macro.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> dummy<span class="br0">&#40;</span>CHAR <span class="sy0">*</span>p_1<span class="sy0">,</span> CHAR <span class="sy0">*</span>p_2<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="coMULTI">/* ... */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/* not compliant */</span>
<span class="co2">#define SetVariable( Variable, Value ) ( dummy(NewString##Variable, #Value ))</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_76<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  CHAR NewString1<span class="br0">&#91;</span><span class="nu0">128</span><span class="br0">&#93;</span><span class="sy0">;</span>
  INT_32 value <span class="sy0">=</span> <span class="nu0">10</span><span class="sy0">;</span>
&nbsp;
  SetVariable<span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span> value <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.11'>1.1.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_98'>98</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.1.11'>4.1.1.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_98'>98</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_41'>41</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_19.12'>19.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-3-1'>16-3-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_98'>98</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_19.12'>19.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.20.11'>R.20.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m5.1.2'>M5.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s77' name='standard_s77'><div class='standard'><div>77&nbsp;S</div></div></a><div class='headline'>Macro replacement list needs parentheses.</div></div><p>Some authorities believe that the body of a macro should be enclosed in brackets.  This can help prevent problems with precedence order when the macro is expanded.</p>
<p>The following object-like macro definitions do not require parenthesis: Identifiers, struct selectors, casts and function calls.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="co2">#define increment_NOK(a)    ( a ) + 1</span>
&nbsp;
<span class="co2">#define increment_OK(b)   ( ( b ) + 1 )</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 77 S : Macro replacement list needs parentheses.
 ********************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_77<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   INT_32 result <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
   result <span class="sy0">=</span> increment_NOK<span class="br0">&#40;</span>result<span class="br0">&#41;</span> <span class="sy0">*</span> <span class="nu0">3</span><span class="sy0">;</span> <span class="coMULTI">/* result = 4 */</span>
&nbsp;
   result <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
   result <span class="sy0">=</span> increment_OK<span class="br0">&#40;</span>result<span class="br0">&#41;</span> <span class="sy0">*</span> <span class="nu0">3</span><span class="sy0">;</span>  <span class="coMULTI">/* result = 6 */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.1.14'>5.1.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_pre02-c'>PRE02-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.12'>1.1.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_735'>735</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_96'>96</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_92'>92</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.11.5'>3.11.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.1.12'>4.1.1.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_14.14'>14.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_96'>96</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_29'>29</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_35'>35</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_19.4'>19.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_96'>96</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_19.4'>19.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_6.3.b'>6.3.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m4.7.1'>M4.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s78' name='standard_s78'><div class='standard'><div>78&nbsp;S</div></div></a><div class='headline'>Macro parameter not in brackets.</div></div><p>Some authorities believe that the use of parameters in the macro body should be enclosed in brackets.</p>
<p>For example:</p>
<pre>
	#define abs(x) (((x) &gt;= 0) ? (x) : -(x)) /* Compliant */ 
	#define abs(x) x &gt;= 0 ? x : -x           /* Not compliant */ 
</pre><p>In the incorrect second sample, the problem manifests itself when the following call is made</p>
<pre>
	z=abs(a-b)
</pre><p>which becomes:</p>
<pre>
	z= a - b &gt;= 0 ? a - b : -a - b;
</pre><p>where the last expression -a - b is equivalent to (-a) - b and not - (a - b),  as expected.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 78 S : Macro parameters not in brackets
 ********************************************************/</span> 
&nbsp;
<span class="coMULTI">/* not compliant */</span>
<span class="co2">#define multiply(a1, a2) ((al)*a2)</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_78<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   SINT_32 test<span class="sy0">;</span>
   SINT_32 p1 <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span>
   SINT_32 p2 <span class="sy0">=</span> <span class="nu0">5</span><span class="sy0">;</span>
&nbsp;
   test <span class="sy0">=</span> <span class="br0">&#40;</span> multiply<span class="br0">&#40;</span><span class="nu0">100</span><span class="sy0">,</span>p1<span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy0">;</span>
   test <span class="sy0">=</span> <span class="br0">&#40;</span> multiply<span class="br0">&#40;</span><span class="nu0">100</span><span class="sy0">,</span>p1<span class="sy0">-</span>p2<span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.2.5'>5.2.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_pre01-c'>PRE01-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_2.1.6'>2.1.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_735'>735</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_96'>96</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_92'>92</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.11.5'>3.11.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.2.1.6'>4.2.1.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_14.14'>14.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_96'>96</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_19.10'>19.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-0-6'>16-0-6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_96'>96</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_19.10'>19.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.20.7'>R.20.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_6.3.b'>6.3.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m4.7.1'>M4.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s79' name='standard_s79'><div class='standard'><div>79&nbsp;S</div></div></a><div class='headline'>Macro contains unacceptable items.</div></div><p>Some authorities believe that macros should only be used for constant literals, function-like macros, type qualifiers and storage class specifiers. Statement keywords and type keywords are not permitted.</p>
<p>This standard permits the use of integer constant expressions including casts on constants.
This standard can be further restricted to prohibit the use of &gt;&gt; and &lt;&lt; in macro definitions by setting the modifier <a href='standard_flags.htm#flag_298'>298</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/* not compliant */</span>
<span class="co2">#define t void</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 79 S : Macro contains unacceptable items.
 ********************************************************/</span> 
&nbsp;
t static_79<span class="br0">&#40;</span>t<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.1.15'>5.1.15</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_pre03-c'>PRE03-C</a>, <a href='cert-c_model.htm#rule_cert-c_pre10-c'>PRE10-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.13'>1.1.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_90'>90</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_49'>49</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.11.3'>3.11.3</a>, <a href='fsb582-c_model.htm#rule_fsb582-c_3.11.7'>3.11.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_1.4'>1.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.1.13'>4.1.1.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_14.15'>14.15</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_90'>90</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_35'>35</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_19.4'>19.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-2-2'>16-2-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_90'>90</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_19.4'>19.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.8.2'>M1.8.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s80' name='standard_s80'><div class='standard'><div>80&nbsp;S</div></div></a><div class='headline'>Pointer indirection exceeds 2 levels.</div></div><p>The use of pointers is difficult to control, so levels of indirection greater than two are considered very dangerous. Pointers to pointers are acceptable. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 80 S : Pointer indirection exceeds 2 levels.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_80<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 array<span class="br0">&#91;</span><span class="nu0">10</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span><span class="nu0">0</span><span class="br0">&#125;</span><span class="sy0">;</span>
   UINT_32 <span class="sy0">*</span> p1_ptr<span class="sy0">,</span> <span class="sy0">**</span>p2_ptr<span class="sy0">;</span>
   UINT_32 <span class="sy0">***</span> p3_ptr<span class="sy0">;</span>        <span class="coMULTI">/* not compliant */</span>
   UINT_32 w<span class="sy0">;</span>
&nbsp;
   p1_ptr <span class="sy0">=</span> array<span class="sy0">;</span>
   p2_ptr <span class="sy0">=</span> <span class="sy0">&amp;</span>p1_ptr<span class="sy0">;</span>
   p3_ptr <span class="sy0">=</span> <span class="sy0">&amp;</span>p2_ptr<span class="sy0">;</span>
&nbsp;
   w <span class="sy0">=</span> <span class="sy0">***</span>p3_ptr<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.4.2'>5.4.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_4.1.2'>4.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_102'>102</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.4.1.2'>4.4.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_102'>102</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_9'>9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_169'>169</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_170'>170</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_313'>313</a>, <a href='lmtcp_model.htm#rule_lmtcp_314'>314</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_17.5'>17.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-19'>5-0-19</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_102'>102</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_17.5'>17.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.18.5'>R.18.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m3.4.1'>M3.4.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s81' name='standard_s81'><div class='standard'><div>81&nbsp;S</div></div></a><div class='headline'>Use of trigraph.</div></div><p>C as a language was designed using the standard English character set and requires #[\]^{|}~ characters. Certain platforms or regions do not feature these required characters or symbols, and so trigraphs are allowed to  represent these missing characters. Some authorities believe that the use of trigraphs is dangerous, so this standard reports any trigraph detected. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard 81 S : Use of trigraph.
 *******************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_81<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="sy0">??&lt;</span>   <span class="coMULTI">/* not compliant */</span>
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_pre07-c'>PRE07-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_8.1.2'>8.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_735'>735</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_7'>7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_52'>52</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.8.1.2'>4.8.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_14.18'>14.18</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_7'>7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_11'>11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_12'>12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_4.2'>4.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-3-1'>2-3-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_7'>7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_4.2'>4.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.4.2'>R.4.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.8.4'>M1.8.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s82' name='standard_s82'><div class='standard'><div>82&nbsp;S</div></div></a><div class='headline'>Use of wide string literal.</div></div><p>Some authorities believe that the use of wide string literals is dangerous. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard 82 S : Use of wide string literal.
 *******************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_82<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw4">wchar_t</span> WideChar <span class="sy0">=</span> L<span class="st0">'1'</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_8'>8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_8'>8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_13'>13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_8'>8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s83' name='standard_s83'><div class='standard'><div>83&nbsp;S</div></div></a><div class='headline'>Octal number found.</div></div><p>Since octal numbers, which start with a leading zero, can be confused for decimal numbers with a leading zero they are considered to be dangerous.</p>
<p>For Example: </p>
<pre>
	code[1] = 109   /* set to decimal 109 */ 
	code[2] = 100   /* set to decimal 100 */ 
	code[3] = 052   /* incorrect - set to decimal 42 */ 
	code[4] = 071   /* incorrect - set to decimal 57 */ 
</pre><div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard 83 S : Octal number found.
 *******************************************************/</span> 
<span class="kw4">void</span> static_83<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 i<span class="sy0">;</span>
&nbsp;
   i <span class="sy0">=</span> <span class="br0">&#40;</span>UINT_32<span class="br0">&#41;</span> <span class="nu8">076</span><span class="sy0">;</span>
&nbsp;
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 * This penalty is reported as follows:
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.8.5'>5.8.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_8.1.3'>8.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_19'>19</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.8.1.3'>4.8.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_19'>19</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_149'>149</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_270'>270</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_7.1'>7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-13-2'>2-13-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_19'>19</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_7.1'>7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.7.1'>R.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.8.5'>M1.8.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s84' name='standard_s84'><div class='standard'><div>84&nbsp;S</div></div></a><div class='headline'>Register variable declared.</div></div><p>The register storage-class specifier is a request, not an imperative, to the compiler to allocate the fastest possible access mechanism for the object specified. Its use also places restrictions upon the use of the variable or object specified. It is not possible, for example, to compute the address of any register variable, regardless of what decisions the compiler made. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 84 S : Register variable declared.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_84<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw4">register</span> SINT_32 ri <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.8.7'>5.8.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_8.2.6'>8.2.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_28'>28</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.8.2.7'>4.8.2.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_8.3.3'>8.3.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_140'>140</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_255'>255</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_28'>28</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_1.7.b'>1.7.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s85' name='standard_s85'><div class='standard'><div>85&nbsp;S</div></div></a><div class='headline'>Incomplete initialisation of enumerator.</div></div><p>Enumerator types can be explicitly initialised, but only two forms of initialisation are safe. One is to initialise all the entries and the other is to initialise only the first. An enum without initialisation is safe.</p>
<p>This standard can be further restricted to prohibit enums with no explicit initialisation by setting the modifier <a href='standard_flags.htm#flag_377'>377</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<p>For Example: </p>
<pre>
   enum (x,y,z)	       /*GOOD (unless type 377 is set) - no explicit initialisation*/ 
   enum (x=1,y,z)      /*GOOD - first value only*/ 
   enum (x=2,y=3,z=4)  /*GOOD - all values set*/ 
   enum (x,y,z=1)      /*BAD*/ 
</pre><div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 85 S : Incomplete initialisation of enumerator.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_85<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw2">enum</span> E_type <span class="br0">&#123;</span> num1<span class="sy0">,</span> num2 <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">,</span> num3<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
   <span class="coMULTI">/* ... */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.13.1'>5.13.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int09-c'>INT09-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_13.1.1'>13.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_32'>32</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_81'>81</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_55'>55</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.13.1.1'>4.13.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_32'>32</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_145'>145</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_260'>260</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_9.3'>9.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_8-5-3'>8-5-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_32'>32</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_9.3'>9.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r1.2.2'>R1.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s86' name='standard_s86'><div class='standard'><div>86&nbsp;S</div></div></a><div class='headline'>Attempt to define reserved word.</div></div><p>The macro pre-processor can redefine reserved words which can lead to confusion. This includes redefining an object-like macro as:</p>
<ul>
<li style='margin-left : 0px;'>

 the keywords of a language
</li>
<li style='margin-left : 0px;'>

 the keyword extensions to a language
</li>
<li style='margin-left : 0px;'>

 the types and macros in included standard library files
</li>
</ul>
<p>The list of language keywords can be found in section 10 Alphabetic keywords of the c/cppvals.dat file. The type and macros for the standard library files can be found in section 11 macro names of the same file.</p>
<p>Further checks on defining function-like macro as reserved words can be found as part of the standards <a href='standards.htm#standard_s580'>580 S</a> and <a href='standards.htm#standard_s626'>626 S</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 86 S : Attempt to define reserved word.
 ********************************************************/</span> 
&nbsp;
<span class="co2">#define FILE UINT_32  /* not compliant */</span>
&nbsp;
<span class="kw4">void</span> static_86<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="coMULTI">/* ... */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.1.16'>5.1.16</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_err31-c'>ERR31-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.14'>1.1.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_746'>746</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_114'>114</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.11.6'>3.11.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.1.14'>4.1.1.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_114'>114</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_92'>92</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_20.1'>20.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_17-0-1'>17-0-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_114'>114</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_20.1'>20.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.20.4'>R.20.4</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.21.1'>R.21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s87' name='standard_s87'><div class='standard'><div>87&nbsp;S</div></div></a><div class='headline'>Use of pointer arithmetic.</div></div><p>Performing arithmetic on pointers is considered to be an unsafe activity since there is no guarantee that the result is a valid address. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 87 S : Use of pointer arithmetic.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_87<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 w<span class="sy0">;</span>
   UINT_32 array<span class="br0">&#91;</span><span class="nu0">5</span><span class="br0">&#93;</span><span class="sy0">;</span>
   UINT_32 <span class="sy0">*</span> p1_ptr<span class="sy0">;</span>
&nbsp;
   p1_ptr <span class="sy0">=</span> array<span class="sy0">;</span>
   w <span class="sy0">=</span> <span class="sy0">*</span><span class="br0">&#40;</span>p1_ptr <span class="sy0">+</span> <span class="nu0">8</span><span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.4.5'>5.4.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_4.2.2'>4.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_101'>101</a>, <a href='dera_model.htm#rule_dera_104'>104</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.4.2.2'>4.4.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_101'>101</a>, <a href='his_model.htm#rule_his_104'>104</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_215'>215</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_315'>315</a>, <a href='lmtcp_model.htm#rule_lmtcp_400'>400</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_101'>101</a>, <a href='misra-c_1998_model.htm#rule_misra-c%3A1998_104'>104</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.18.4'>R.18.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r1.3.1'>R1.3.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s88' name='standard_s88'><div class='standard'><div>88&nbsp;S</div></div></a><div class='headline'>Procedure is not pure assembler.</div></div><p>This standard is designed to ensure that all code inserts are pure procedures with a defined interface. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard 88 S : Procedure is not pure assembler.
 *******************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_88<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 x<span class="sy0">;</span>
   x<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
   _asm
   <span class="br0">&#123;</span>
      mov eax<span class="sy0">,</span>x
   <span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#125;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.2.6'>5.2.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_2.1.7'>2.1.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_3'>3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.2.1.7'>4.2.1.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_13.5'>13.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_17'>17</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_2.1'>2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_7-4-3'>7-4-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_3'>3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_2.1'>2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_d.4.3'>D.4.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_1.1.c'>1.1.c</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_p2.1.1'>P2.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s89' name='standard_s89'><div class='standard'><div>89&nbsp;S</div></div></a><div class='headline'>char type not signed or unsigned.</div></div><p>The plain char type can be implemented as either a signed or unsigned type. Some authorities ban the use of the plain char type.</p>
<p>This standard restricts the use of plain char.  Plain char types may not be used in the declaration or definition of functions or objects.  An exception is made where an object is initialised with a plain char literal or a typedef of a plain char is used.</p>
<p>Some authorities allow the declaration of plain char objects, but restrict their use to the storage and use of character values.  If this behaviour is required, this standard may be switched off and replaced by <a href='standards.htm#standard_s329'>329 S</a>, <a href='standards.htm#standard_s432'>432 S</a> and <a href='standards.htm#standard_s433'>433 S</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/********************************************************
 * Standard 89 S : char type not signed or unsigned
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> use_char <span class="br0">&#40;</span> <span class="kw4">char</span> notok <span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span> <span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> static_89 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span> 
<span class="br0">&#123;</span>
   <span class="kw4">char</span> num <span class="sy0">=</span> <span class="nu0">42</span><span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span>
   <span class="coMULTI">/* ... */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.1.10'>5.1.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.15'>1.1.15</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_14'>14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.1.15'>4.1.1.15</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_14'>14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_14'>14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s90' name='standard_s90'><div class='standard'><div>90&nbsp;S</div></div></a><div class='headline'>Basic type declaration used.</div></div><p>This is designed to make code portable between compilers where the sizes of the basic types can vary dramatically. Therefore the use of the basic types is banned except in typedefs. An example of a number of definitions follow: </p>
<pre>
	typedef char						CHAR;
	typedef unsigned char					UCHAR;
	typedef unsigned short					UINT_16;
	typedef unsigned int					UINT_32;
	typedef signed char					SCHAR;
	typedef signed short					SINT_16;
	typedef signed int					SINT_32;
	typedef float						FLOAT_32;
	typedef double						FLOAT_64;
	typedef enum { FALSE = 0, TRUE  = 1}			BOOL;
</pre><p>This standard can be relaxed to allow the plain char basic type to be used by setting the modifier <a href='standard_flags.htm#flag_219'>219</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/********************************************************
 *  Standard 90 S : Basic type declaration used.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">unsigned</span> <span class="kw4">int</span> static_90 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">char</span>           ch<span class="sy0">;</span>
  <span class="kw4">unsigned</span> <span class="kw4">char</span>  uc<span class="sy0">;</span>
  <span class="kw4">unsigned</span> <span class="kw4">int</span>   ui_32<span class="sy0">;</span>
  <span class="kw4">unsigned</span> <span class="kw4">short</span> ui_16<span class="sy0">;</span>
  <span class="kw4">int</span>            i_32<span class="sy0">;</span>
  <span class="kw4">float</span>          f_32<span class="sy0">;</span>
  <span class="kw4">double</span>         f_64<span class="sy0">;</span>
  <span class="kw4">signed</span> <span class="kw4">char</span>    sc<span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
  <span class="kw1">return</span> ui_32<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.1.19'>5.1.19</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_13'>13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_84'>84</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.8.2'>3.8.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_1.10'>1.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.2.1'>4.1.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_8.4.6'>8.4.6</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_13.6'>13.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_13'>13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_209'>209</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_219'>219</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_393'>393</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_219'>219</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_6.3'>6.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_3-9-2'>3-9-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_13'>13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_6.3'>6.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_d.4.6'>D.4.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_219'>219</a> = 1</td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_5.2.a'>5.2.a</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_p2.1.3'>P2.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s91' name='standard_s91'><div class='standard'><div>91&nbsp;S</div></div></a><div class='headline'>Name redeclared in another C name space (MR).</div></div><p>The C language allows the same names to be used in many different contexts (blocks and name spaces), which is unsafe, as it may lead to confusion as to which variant is active at the time. This standard increases readability by enforcing unique names. This standard is restricted to LDRA Testbed installations featuring the MISRA component, as indicated by (MR).</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 *  Standard 91 S : Name redeclared in another C name space.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">struct</span> s_91
<span class="br0">&#123;</span>
  UINT_32 s_91<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
  UINT_32 u_1<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
UINT_32 static_91 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 var_1<span class="sy0">;</span>
&nbsp;
static_91<span class="sy0">:</span>      <span class="coMULTI">/* not compliant */</span>
   var_1 <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
   <span class="kw1">return</span> <span class="br0">&#40;</span>var_1<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.1.11'>5.1.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.16'>1.1.16</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_12'>12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_53'>53</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.1.16'>4.1.1.16</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.2'>5.2</a>, <a href='misra-ac_model.htm#rule_misra-ac_5.6'>5.6</a>, <a href='misra-ac_model.htm#rule_misra-ac_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_12'>12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.2'>5.2</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.6'>5.6</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='tbrun_requires_model.htm'>TBrun Requires</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s92' name='standard_s92'><div class='standard'><div>92&nbsp;S</div></div></a><div class='headline'>Duplicate use of a name in an enumeration.</div></div><p>Languages may permit the use of the same name in different contexts (e.g. blocks and namespaces). This is unsafe as it may lead to confusion as to which variant is active at the time. This standard reports where a field in an enumeration is the same as another name.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
UINT_32 duplicate <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 92 S : Duplicate use of a name in an enumeration.
 ********************************************************/</span> 
<span class="kw4">void</span> static_92 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw2">enum</span> Name_type <span class="br0">&#123;</span> e1<span class="sy0">,</span> duplicate <span class="br0">&#125;</span> EnumVar<span class="sy0">;</span>
&nbsp;
   EnumVar <span class="sy0">=</span> e1<span class="sy0">;</span>
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.15.1'>5.15.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_15.1.1'>15.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_12'>12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.5.5'>3.5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.15.1.1'>4.15.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_248'>248</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.2'>5.2</a>, <a href='misra-ac_model.htm#rule_misra-ac_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_12'>12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.2'>5.2</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.3'>R.5.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s93' name='standard_s93'><div class='standard'><div>93&nbsp;S</div></div></a><div class='headline'>Value is not of appropriate type.</div></div><p>Testbed enforces strict type checking by the use of this standard combined with <a href='standards.htm#standard_s96'>96 S</a>, <a href='standards.htm#standard_s101'>101 S</a>, <a href='standards.htm#standard_s104'>104 S</a>, <a href='standards.htm#standard_s107'>107 S</a>, <a href='standards.htm#standard_s330'>330 S</a>, <a href='standards.htm#standard_s331'>331 S</a>, <a href='standards.htm#standard_s411'>411 S</a>, <a href='standards.htm#standard_s431'>431 S</a>, <a href='standards.htm#standard_s432'>432 S</a>, <a href='standards.htm#standard_s433'>433 S</a>, <a href='standards.htm#standard_s435'>435 S</a>, <a href='standards.htm#standard_s445'>445 S</a>, <a href='standards.htm#standard_s446'>446 S</a>, <a href='standards.htm#standard_s458'>458 S</a> and <a href='standards.htm#standard_s488'>488 S</a>.</p>
<p>In addition, Testbed highlights the use of casts by the use of this standard combined with <a href='standards.htm#standard_s332'>332 S</a>, <a href='standards.htm#standard_s333'>333 S</a>, <a href='standards.htm#standard_s441'>441 S</a>, <a href='standards.htm#standard_s442'>442 S</a>, <a href='standards.htm#standard_s443'>443 S</a>, <a href='standards.htm#standard_s444'>444 S</a>, <a href='standards.htm#standard_s451'>451 S</a> and <a href='standards.htm#standard_s452'>452 S</a>.</p>
<p>This standard includes a check that array indexing is performed using unsigned integers. The array indexing check is switched off when using the MISRA-C:2004 model, but can be enabled by setting the modifier <a href='standard_flags.htm#flag_372'>372</a> to 1 in the creport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 93 S : Value is not of appropriate type.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> STATIC_93<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   FLOAT_32 fl<span class="sy0">;</span>
&nbsp;
   fl <span class="sy0">=</span> <span class="nu16">2.0</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant - Requires explicit assignment of 2.0F */</span> 
&nbsp;
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.6.16'>5.6.16</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int01-c'>INT01-C</a>, <a href='cert-c_model.htm#rule_cert-c_int02-c'>INT02-C</a>, <a href='cert-c_model.htm#rule_cert-c_int07-c'>INT07-C</a>, <a href='cert-c_model.htm#rule_cert-c_int31-c'>INT31-C</a>, <a href='cert-c_model.htm#rule_cert-c_str04-c'>STR04-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.1.8'>6.1.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_192'>192</a>, <a href='cwe_model.htm#rule_cwe_197'>197</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_18'>18</a>, <a href='dera_model.htm#rule_dera_48'>48</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.6.1.8'>4.6.1.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_18'>18</a>, <a href='his_model.htm#rule_his_48'>48</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_6.1'>6.1</a>, <a href='misra-ac_model.htm#rule_misra-ac_6.2'>6.2</a>, <a href='misra-ac_model.htm#rule_misra-ac_10.1'>10.1</a>, <a href='misra-ac_model.htm#rule_misra-ac_10.2'>10.2</a>, <a href='misra-ac_model.htm#rule_misra-ac_10.3'>10.3</a>, <a href='misra-ac_model.htm#rule_misra-ac_10.4'>10.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_18'>18</a>, <a href='misra-c_1998_model.htm#rule_misra-c%3A1998_48'>48</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_6.1'>6.1</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_6.2'>6.2</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.1'>10.1</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.2'>10.2</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.3'>10.3</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.4'>10.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.1'>R.10.1</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.3'>R.10.3</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.4'>R.10.4</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.5'>R.10.5</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.11.1'>R.11.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_5.2.c'>5.2.c</a>, <a href='netrino_model.htm#rule_netrino_5.3.c'>5.3.c</a>, <a href='netrino_model.htm#rule_netrino_5.4.b'>5.4.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.2.2'>M1.2.2</a>, <a href='sec-c_model.htm#rule_sec-c_p1.3.1'>P1.3.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c++.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s94' name='standard_s94'><div class='standard'><div>94&nbsp;S</div></div></a><div class='headline'>Casting operation on a pointer.</div></div><p>Casting pointers to other types can be dangerous. <a href='standards.htm#standard_s439'>439 S</a> covers the casting of a pointer to an integral type <a href='standards.htm#standard_s635'>635 S</a> covers the casting of a pointer to a float type. . </p>
<p>This standard can be relaxed to allow casts between pointers to the same object type by setting the modifier <a href='standard_flags.htm#flag_396'>396</a> to 1 in the c/cppreport.dat file. The standard may also be relaxed to allow casts to void by setting the modifier <a href='standard_flags.htm#flag_439'>439</a> to 1 and to allow casts to char * by setting the modifier <a href='standard_flags.htm#flag_440'>440</a> to 1. Instructions for making alterations can be found in the report.dat file</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw2">extern</span> UINT_32 <span class="sy0">*</span> get_ptr<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 94 S : Casting operation on a pointer.
 ********************************************************/</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_94<span class="br0">&#40;</span>UINT_32 <span class="sy0">*</span> p1_ptr<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   FLOAT_32 v_1<span class="sy0">;</span>
   UINT_32 <span class="sy0">*</span>ptr2<span class="sy0">;</span>
   CHAR <span class="sy0">*</span> ptr_ch<span class="sy0">;</span>
&nbsp;
   v_1 <span class="sy0">=</span> <span class="br0">&#40;</span>FLOAT_32<span class="br0">&#41;</span> p1_ptr<span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span>
&nbsp;
   ptr2 <span class="sy0">=</span> <span class="br0">&#40;</span>UINT_32 <span class="sy0">*</span><span class="br0">&#41;</span> p1_ptr<span class="sy0">;</span>  <span class="coMULTI">/* not compliant, but permitted with modifier 396 */</span>
&nbsp;
   <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> get_ptr<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>           <span class="coMULTI">/* not compliant, but permitted with modifier 439 */</span>
&nbsp;
   ptr_ch <span class="sy0">=</span> <span class="br0">&#40;</span>CHAR <span class="sy0">*</span><span class="br0">&#41;</span> p1_ptr<span class="sy0">;</span>   <span class="coMULTI">/* not compliant, but permitted with modifier 440 */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp11-c'>EXP11-C</a>, <a href='cert-c_model.htm#rule_cert-c_exp36-c'>EXP36-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_439'>439</a> = 1, <a href='standard_flags.htm#flag_396'>396</a> = 1</td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_12.1.1'>12.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_737'>737</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_439'>439</a> = 1</td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_45'>45</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_15'>15</a>, <a href='eads-cpp_model.htm#rule_eads-c%2B%2B_16'>16</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_396'>396</a> = 1</td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.12.1.1'>4.12.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_7.5'>7.5</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_7.7'>7.7</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_13.7'>13.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_45'>45</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_182'>182</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_328'>328</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_11.1'>11.1</a>, <a href='misra-ac_model.htm#rule_misra-ac_11.2'>11.2</a>, <a href='misra-ac_model.htm#rule_misra-ac_11.4'>11.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_396'>396</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-2-7'>5-2-7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_396'>396</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_45'>45</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_11.1'>11.1</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_11.2'>11.2</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_11.4'>11.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_396'>396</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.11.1'>R.11.1</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.11.2'>R.11.2</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.11.3'>R.11.3</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.11.7'>R.11.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_439'>439</a> = 1, <a href='standard_flags.htm#flag_396'>396</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.7.1'>R2.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_396'>396</a> = 1, <a href='standard_flags.htm#flag_439'>439</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s95' name='standard_s95'><div class='standard'><div>95&nbsp;S</div></div></a><div class='headline'>Casting operation to a pointer.</div></div><p>Generating a pointer other than by taking an address is considered dangerous. Note: <a href='standards.htm#standard_s440'>440 S</a> covers casting from an integral type to a pointer and <a href='standards.htm#standard_s636'>636 S</a> covers casting from a float type to a pointer.</p>
<p>This standard can be relaxed to allow casts from void* by setting the modifier <a href='standard_flags.htm#flag_381'>381</a> to 1 in the c/cppreport.dat file, and relaxed to allow casts between pointers to the same object type by setting the modifier <a href='standard_flags.htm#flag_396'>396</a> to 1. The standard may also be relaxed to allow casts to char * by setting the modifier <a href='standard_flags.htm#flag_440'>440</a> to 1. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="coMULTI">/********************************************************
 * Standard 95 S : Casting operation to a pointer.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">struct</span> Astruct <span class="br0">&#123;</span> UINT_32 a<span class="sy0">;</span> <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> static_95 <span class="br0">&#40;</span>UINT_32 <span class="sy0">*</span>intptr<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">struct</span> Astruct <span class="sy0">*</span>Astructptr<span class="sy0">;</span>
  Astructptr <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">struct</span> Astruct <span class="sy0">*</span><span class="br0">&#41;</span> intptr<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.12.1'>5.12.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp11-c'>EXP11-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_12.2.1'>12.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_737'>737</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_45'>45</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_28'>28</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.12.2.1'>4.12.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_7.5'>7.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_45'>45</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_182'>182</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_381'>381</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_328'>328</a>, <a href='lmtcp_model.htm#rule_lmtcp_331'>331</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_11.1'>11.1</a>, <a href='misra-ac_model.htm#rule_misra-ac_11.4'>11.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-2-7'>5-2-7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_45'>45</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_11.1'>11.1</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_11.4'>11.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.11.1'>R.11.1</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.11.2'>R.11.2</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.11.3'>R.11.3</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.11.5'>R.11.5</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.11.7'>R.11.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_440'>440</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.7.1'>R2.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_381'>381</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='tbrun_requires_model.htm'>TBrun Requires</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s96' name='standard_s96'><div class='standard'><div>96&nbsp;S</div></div></a><div class='headline'>Use of mixed mode arithmetic.</div></div><p>In general the programmer should show that they appreciate that they are using mixed mode arithmetic by using explicit casts. This is one of a range of standards that together detect mixed mode arithmetic.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 96 S : Use of mixed mode arithmetic.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_96<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  INT_32 i32 <span class="sy0">=</span> <span class="nu0">10</span><span class="sy0">;</span>
  FLOAT_64 f64 <span class="sy0">=</span> <span class="nu16">20.5</span><span class="sy0">;</span>
  FLOAT_32 f32 <span class="sy0">=</span> <span class="nu17">2.0F</span><span class="sy0">;</span>
&nbsp;
  f64 <span class="sy0">=</span> i32 <span class="sy0">+</span> f64<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
  f64 <span class="sy0">=</span> f64 <span class="sy0">*</span> f32<span class="sy0">;</span>  <span class="coMULTI">/* compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int02-c'>INT02-C</a>, <a href='cert-c_model.htm#rule_cert-c_msc31-c'>MSC31-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.2.3'>6.2.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_192'>192</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_43'>43</a>, <a href='dera_model.htm#rule_dera_48'>48</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_29'>29</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.6.2.3'>4.6.2.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_7.6'>7.6</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_10.13'>10.13</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_10.14'>10.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : 267 = 1</td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_43'>43</a>, <a href='his_model.htm#rule_his_48'>48</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : 267 = 1</td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_162'>162</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_180'>180</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_184'>184</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : 267 = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_292'>292</a>, <a href='lmtcp_model.htm#rule_lmtcp_325'>325</a>, <a href='lmtcp_model.htm#rule_lmtcp_398'>398</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : 267 = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_6.2'>6.2</a>, <a href='misra-ac_model.htm#rule_misra-ac_10.1'>10.1</a>, <a href='misra-ac_model.htm#rule_misra-ac_10.2'>10.2</a>, <a href='misra-ac_model.htm#rule_misra-ac_12.6'>12.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-4'>5-0-4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_43'>43</a>, <a href='misra-c_1998_model.htm#rule_misra-c%3A1998_48'>48</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : 267 = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_6.2'>6.2</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.1'>10.1</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.2'>10.2</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.6'>12.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.1'>R.10.1</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.2'>R.10.2</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.3'>R.10.3</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.4'>R.10.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_1.4.a'>1.4.a</a>, <a href='netrino_model.htm#rule_netrino_5.3.c'>5.3.c</a>, <a href='netrino_model.htm#rule_netrino_5.4.b'>5.4.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_p1.3.1'>P1.3.1</a>, <a href='sec-c_model.htm#rule_sec-c_x2.x'>X2.x</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s97' name='standard_s97'><div class='standard'><div>97&nbsp;S</div></div></a><div class='headline'>Use of redundant cast.</div></div><p>Explicit casting between the same type is unnecessary and may make the code less readable.  Types declared using the typedef specifier are considered to have the same type as their underlying basic type. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 97 S : Use of redundant cast.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_97<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   SINT_32 sx<span class="sy0">,</span>sy <span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">10</span><span class="sy0">;</span>
&nbsp;
   sx <span class="sy0">=</span> <span class="br0">&#40;</span>SINT_32<span class="br0">&#41;</span> sy <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_12.2.2'>12.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_44'>44</a>, <a href='dera_model.htm#rule_dera_48'>48</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.12.2.2'>4.12.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_48'>48</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_181'>181</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_327'>327</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_44'>44</a>, <a href='misra-c_1998_model.htm#rule_misra-c%3A1998_48'>48</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s98' name='standard_s98'><div class='standard'><div>98&nbsp;S</div></div></a><div class='headline'>Actual and formal parameters inconsistent (MR).</div></div><p>The formal parameters are those derived from either the definition or the prototype, whereas the actual parameters are those that are present in the call to the procedure. This standard provides rigorous type checking across procedure boundaries. </p>
<p>The actual and formal parameters must be compatible, but not necessarily identical. The rules regarding compatibility are restrictive and do not extend to distinct types deemed safe for conversion, e.g. between pointer to void and some other pointer type. Examples of compatible type pairs are:</p>
<pre>signed int, int
unsigned short int, unsigned short</pre><p> This standard is restricted to LDRA Testbed installations featuring the MISRA component, as indicated by (MR).</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">void</span> fn<span class="br0">&#40;</span> UINT_16 p_1<span class="sy0">,</span> UINT_16 p_2 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span> <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 98 S : Actual and formal parameters inconsistent.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_98<span class="br0">&#40;</span>UINT_32 p_1<span class="sy0">,</span> UINT_16 p_2<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   fn<span class="br0">&#40;</span>p_1<span class="sy0">,</span> p_2<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span> 
<span class="br0">&#125;</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.7.6'>5.7.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp37-c'>EXP37-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_7.1.9'>7.1.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_685'>685</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_105'>105</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.7.1.9'>4.7.1.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_105'>105</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_105'>105</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c++.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s99' name='standard_s99'><div class='standard'><div>99&nbsp;S</div></div></a><div class='headline'>Function use is not a call.</div></div><p>It is possible to use a procedure identifier in expressions which do not lead either to a call or an assignment of the address of the function.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
BOOL test_99<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   BOOL retval<span class="sy0">=</span> TRUE<span class="sy0">;</span>
   <span class="coMULTI">/* ... */</span> 
   <span class="kw1">return</span> retval<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 99 S : Function use is not a call.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_99<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw1">if</span> <span class="br0">&#40;</span> test_99 <span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
   <span class="br0">&#123;</span>
      <span class="coMULTI">/* ... */</span> 
   <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.7.7'>5.7.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc02-c'>MSC02-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_7.2.2'>7.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_480'>480</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_85'>85</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.7.2.2'>4.7.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_85'>85</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_235'>235</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_16.9'>16.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_8-4-4'>8-4-4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_85'>85</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_16.9'>16.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.5.1'>M1.5.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s100' name='standard_s100'><div class='standard'><div>100&nbsp;S</div></div></a><div class='headline'>#include filename is non conformant.</div></div><p>This standard bans the use of the characters '  \ and the character combination /*  in include file names. For users of the PC the \ is essential so the characters ' and \ are configurable using the modifier <a href='standard_flags.htm#flag_120'>120</a> in the c/cppvals.dat file. Instructions for making alterations can be found in the manual.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/*****************************************************
 * Standard 100 S : #include filename is non conformant.
 *****************************************************/</span> 
<span class="co2">#include &lt;\ctype.h&gt; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_100<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_2.1.8'>2.1.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_88'>88</a>, <a href='dera_model.htm#rule_dera_89'>89</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.2.1.8'>4.2.1.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_88'>88</a>, <a href='his_model.htm#rule_his_89'>89</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_53.1'>53.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_40'>40</a>, <a href='lmtcp_model.htm#rule_lmtcp_77'>77</a>, <a href='lmtcp_model.htm#rule_lmtcp_202'>202</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_19.2'>19.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-2-4'>16-2-4</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-2-5'>16-2-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_331'>331</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_88'>88</a>, <a href='misra-c_1998_model.htm#rule_misra-c%3A1998_89'>89</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_19.2'>19.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.20.2'>R.20.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_p1.4.1'>P1.4.1</a>, <a href='sec-c_model.htm#rule_sec-c_p1.4.3'>P1.4.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s101' name='standard_s101'><div class='standard'><div>101&nbsp;S</div></div></a><div class='headline'>Function return type inconsistent.</div></div><p>LDRA Testbed enforces strong type checking. This standard reports when the type returned by a return statement is not consistent with the function declaration.</p>
<p>It is possible to switch off the check for the return statement of main by setting the modifier <a href='standard_flags.htm#flag_374'>374</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 101 S : Function return type inconsistent.
 ********************************************************/</span> 
&nbsp;
UINT_32 static_101<span class="br0">&#40;</span> UINT_32 par_1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    <span class="kw1">switch</span> <span class="br0">&#40;</span>par_1<span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
       <span class="kw1">case</span> <span class="nu0">0</span><span class="sy0">:</span>
          <span class="kw1">return</span> <span class="br0">&#40;</span><span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>     <span class="coMULTI">/* not compliant */</span>
          <span class="kw2">break</span><span class="sy0">;</span>
       <span class="kw1">case</span> <span class="nu0">1</span><span class="sy0">:</span>
          <span class="kw1">return</span> <span class="br0">&#40;</span>1U<span class="br0">&#41;</span><span class="sy0">;</span>
          <span class="kw2">break</span><span class="sy0">;</span>
       <span class="kw1">case</span> <span class="nu0">2</span><span class="sy0">:</span>
          <span class="kw1">return</span> <span class="br0">&#40;</span><span class="nu0">1L</span><span class="br0">&#41;</span><span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span>
          <span class="kw2">break</span><span class="sy0">;</span>
       <span class="kw1">case</span> <span class="nu0">3</span><span class="sy0">:</span>
          <span class="kw1">return</span> <span class="br0">&#40;</span><span class="nu17">1.0f</span><span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
          <span class="kw2">break</span><span class="sy0">;</span>
       <span class="kw1">default</span><span class="sy0">:</span>
          <span class="kw2">break</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.9.4'>5.9.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int02-c'>INT02-C</a>, <a href='cert-c_model.htm#rule_cert-c_int07-c'>INT07-C</a>, <a href='cert-c_model.htm#rule_cert-c_str04-c'>STR04-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_9.1.4'>9.1.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_192'>192</a>, <a href='cwe_model.htm#rule_cwe_197'>197</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_83'>83</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.9.1.4'>4.9.1.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_5.10'>5.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_83'>83</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_325'>325</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_10.1'>10.1</a>, <a href='misra-ac_model.htm#rule_misra-ac_10.2'>10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-4'>5-0-4</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-5'>5-0-5</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-6'>5-0-6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_83'>83</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.1'>10.1</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.2'>10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.3'>R.10.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_5.3.c'>5.3.c</a>, <a href='netrino_model.htm#rule_netrino_5.4.b'>5.4.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.5.1'>R2.5.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s102' name='standard_s102'><div class='standard'><div>102&nbsp;S</div></div></a><div class='headline'>Function and prototype return inconsistent (MR).</div></div><p>There is a difference between the function prototype and definition return types. This continues the theme of rigorous type checking across procedure boundaries. This standard is restricted to LDRA Testbed installations featuring the MISRA component, as indicated by (MR). </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
UINT_32 static_102<span class="br0">&#40;</span>UINT_32 p_1<span class="sy0">,</span> UINT_16 p_2<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/**************************************************************
 * Standard 102 S : Function and prototype return inconsistent.
 **************************************************************/</span>
&nbsp;
SINT_32 static_102<span class="br0">&#40;</span>UINT_32 p_1<span class="sy0">,</span> UINT_16 p_2<span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
   SINT_32 result <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
   <span class="coMULTI">/* ... */</span> 
   <span class="kw1">return</span> result<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.9.5'>5.9.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.25'>1.1.25</a>, <a href='cmse_model.htm#rule_cmse_9.1.5'>9.1.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_26'>26</a>, <a href='dera_model.htm#rule_dera_72'>72</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.9.1.5'>4.9.1.5</a>, <a href='gjb_model.htm#rule_gjb_5.1.14'>5.1.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_26'>26</a>, <a href='his_model.htm#rule_his_72'>72</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_231'>231</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_8.3'>8.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_3-9-1'>3-9-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_331'>331</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_26'>26</a>, <a href='misra-c_1998_model.htm#rule_misra-c%3A1998_72'>72</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_8.3'>8.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.4'>R.8.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_4.3.c'>4.3.c</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.8.3'>R2.8.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s103' name='standard_s103'><div class='standard'><div>103&nbsp;S</div></div></a><div class='headline'>Function and prototype param inconsistent (MR).</div></div><p>There is a difference between the function prototype and definition parameter types. This standard is restricted to LDRA Testbed installations featuring the MISRA component, as indicated by (MR).</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
BOOL static_103<span class="br0">&#40;</span>FLOAT_32 up_1<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/***************************************************************
 * Standard 103 S : Function and prototype param inconsistent.
 ***************************************************************/</span> 
BOOL static_103<span class="br0">&#40;</span>UINT_32 up_1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   BOOL ret <span class="sy0">=</span> FALSE<span class="sy0">;</span>
   <span class="coMULTI">/* ... */</span> 
   <span class="kw1">return</span> ret<span class="sy0">;</span>
<span class="br0">&#125;</span>
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.7.5'>5.7.5</a>, <a href='cast_model.htm#rule_cast_5.16.6'>5.16.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_7.1.10'>7.1.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_26'>26</a>, <a href='dera_model.htm#rule_dera_72'>72</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.7.1.10'>4.7.1.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_11.3'>11.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_26'>26</a>, <a href='his_model.htm#rule_his_72'>72</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_231'>231</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_8.3'>8.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_3-9-1'>3-9-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_331'>331</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_26'>26</a>, <a href='misra-c_1998_model.htm#rule_misra-c%3A1998_72'>72</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_8.3'>8.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.4'>R.8.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_4.3.c'>4.3.c</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.8.3'>R2.8.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s104' name='standard_s104'><div class='standard'><div>104&nbsp;S</div></div></a><div class='headline'>Struct field initialisation incorrect.</div></div><p>Consistent with strong typing there is an inconsistency between a structure definition and its initialisation.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">struct</span> s_type_a <span class="br0">&#123;</span> SINT_32 xs<span class="sy0">;</span> FLOAT_32 fs<span class="sy0">;</span><span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 104 S : Struct field initialisation incorrect.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_104<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw4">struct</span> s_type_a sta <span class="sy0">=</span> <span class="br0">&#123;</span><span class="nu17">3.14F</span><span class="sy0">,</span> <span class="nu17">0.0f</span><span class="br0">&#125;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.13.2'>5.13.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_13.1.2'>13.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_29'>29</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.13.1.2'>4.13.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_29'>29</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_29'>29</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.3'>R.10.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s105' name='standard_s105'><div class='standard'><div>105&nbsp;S</div></div></a><div class='headline'>Initialisation brace { } fault.</div></div><p>Brace faults are generated if the initialisation does not contain the same brace structure as the nesting of the definition.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">struct</span> pixel<span class="br0">&#123;</span> UINT_32 colour<span class="sy0">;</span> <span class="kw4">struct</span> <span class="br0">&#123;</span>UINT_32 x<span class="sy0">,</span> y<span class="sy0">;</span><span class="br0">&#125;</span> coords<span class="sy0">;</span> <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/***********************************************************
 * Standard 105 S : Struct field initialisation brace fault.
 ***********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_105<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 xs <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
   UINT_32 ys <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
   <span class="kw4">struct</span> pixel spot <span class="sy0">=</span> <span class="br0">&#123;</span>1u<span class="sy0">,</span> xs<span class="sy0">,</span> ys <span class="br0">&#125;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.13.3'>5.13.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_13.1.3'>13.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_31'>31</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.13.1.3'>4.13.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_31'>31</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_144'>144</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_259'>259</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_9.2'>9.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_8-5-2'>8-5-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_31'>31</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_9.2'>9.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.9.2'>R.9.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m2.1.1'>M2.1.1</a>, <a href='sec-c_model.htm#rule_sec-c_r1.2.1'>R1.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s106' name='standard_s106'><div class='standard'><div>106&nbsp;S</div></div></a><div class='headline'>Volatile declaration.</div></div><p>The value of volatile variables can change outside of the control of the application. This standard allows all such declarations to be monitored. The cross reference report gives all the uses of variables identified by this standard. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * Standard 106 S : Volatile declaration.
 *****************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_106<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw4">volatile</span> UINT_32 v <span class="sy0">=</span> 1U<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
   UINT_32 x <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
   x <span class="sy0">=</span> v<span class="sy0">;</span>
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_205'>205</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_364'>364</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s107' name='standard_s107'><div class='standard'><div>107&nbsp;S</div></div></a><div class='headline'>Type mismatch in ternary expression.</div></div><p>This standard performs strong type checking for the two alternatives of a ternary expression.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard 107 S : Type Mismatch in ternary Expression.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_107<span class="br0">&#40;</span> BOOL flag <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32  x <span class="sy0">=</span> 0U<span class="sy0">;</span>
   FLOAT_32 f <span class="sy0">=</span> <span class="nu17">0.0F</span><span class="sy0">;</span>
&nbsp;
   x <span class="sy0">=</span> <span class="br0">&#40;</span>flag <span class="sy0">?</span> f <span class="sy0">:</span> x<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int02-c'>INT02-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.2.3'>6.2.3</a>, <a href='cmse_model.htm#rule_cmse_12.2.3'>12.2.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_192'>192</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_144'>144</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_29'>29</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.6.2.3'>4.6.2.3</a>, <a href='gjb_model.htm#rule_gjb_4.12.2.3'>4.12.2.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_7.6'>7.6</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_10.13'>10.13</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_10.14'>10.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_48'>48</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_162'>162</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_180'>180</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_82'>82</a>, <a href='lmtcp_model.htm#rule_lmtcp_292'>292</a>, <a href='lmtcp_model.htm#rule_lmtcp_325'>325</a>, <a href='lmtcp_model.htm#rule_lmtcp_398'>398</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_10.1'>10.1</a>, <a href='misra-ac_model.htm#rule_misra-ac_10.2'>10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-4'>5-0-4</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-5'>5-0-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_48'>48</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.1'>10.1</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.2'>10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.4'>R.10.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_5.3.c'>5.3.c</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_p1.3.1'>P1.3.1</a>, <a href='sec-c_model.htm#rule_sec-c_r2.3.2'>R2.3.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s109' name='standard_s109'><div class='standard'><div>109&nbsp;S</div></div></a><div class='headline'>Array subscript is not integral.</div></div><p>All array indices should be positive whole numbers. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="co2">#define ArraySize 3.0F</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 109 S : Array subscript is not integral.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_109<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 fl_arr<span class="br0">&#91;</span> <span class="br0">&#40;</span>UINT_32<span class="br0">&#41;</span> ArraySize <span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="br0">&#125;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.6.9'>5.6.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.1.10'>6.1.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_165'>165</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.6.1.10'>4.6.1.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s110' name='standard_s110'><div class='standard'><div>110&nbsp;S</div></div></a><div class='headline'>Use of single line comment //.</div></div><p>The single line comment is not available in all compilers and should not be used.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 110 S : Use of single line comment
 ********************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_110<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
<span class="co1">// This is a single line comment</span>
&nbsp;
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_10.2.2'>10.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_1'>1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.1.1'>3.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.10.2.2'>4.10.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_1'>1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_2.2'>2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_1'>1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_2.2'>2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.2'>R.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_p1.1.1'>P1.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='vsos_model.htm'>VSOS</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c++.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s111' name='standard_s111'><div class='standard'><div>111&nbsp;S</div></div></a><div class='headline'>Label is not part of switch statement (MR).</div></div><p>The only use of labels which can be said to be safe is in a switch statement. This standard is restricted to LDRA Testbed installations featuring the MISRA component, as indicated by (MR). </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 111 S : Label is not part of switch statement.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_111<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   SINT_32 jump_flag <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
start<span class="sy0">:</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
   jump_flag<span class="sy0">++;</span>
   <span class="kw1">if</span> <span class="br0">&#40;</span>jump_flag <span class="sy0">&lt;</span> <span class="nu0">10</span><span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      <span class="kw1">goto</span> start<span class="sy0">;</span>
   <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_55'>55</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_55'>55</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_188'>188</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_339'>339</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_55'>55</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s112' name='standard_s112'><div class='standard'><div>112&nbsp;S</div></div></a><div class='headline'>Typedef name redeclared.</div></div><p>Changing the type of a user-defined type is at best confusing and at worse dangerous. This standard highlights the use of typedef names which are used else-where as a typedef or a tag name.</p>
<p>This standard can be relaxed to allow a typedef with the same tag name by setting the modifier <a href='standard_flags.htm#flag_417'>417</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">typedef</span> SINT_32 mytype<span class="sy0">;</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">struct</span> st1 <span class="br0">&#123;</span> SINT_32 a<span class="sy0">;</span> SINT_32 b<span class="sy0">;</span> <span class="br0">&#125;</span> st1<span class="sy0">;</span> <span class="coMULTI">/* compliant when modifier 417 is set  */</span>
&nbsp;
<span class="coMULTI">/*******************************************
 * Standard 112 S : Typedef name redeclared.
 ********************************************/</span>
&nbsp;
<span class="kw4">void</span> static_112<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw4">typedef</span> FLOAT_32 mytype<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
   <span class="coMULTI">/* ... */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.1.12'>5.1.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.17'>1.1.17</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_17'>17</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.1.17'>4.1.1.17</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_17'>17</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_89'>89</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.3'>5.3</a>, <a href='misra-ac_model.htm#rule_misra-ac_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-3'>2-10-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_17'>17</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.3'>5.3</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.6'>R.5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_417'>417</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s113' name='standard_s113'><div class='standard'><div>113&nbsp;S</div></div></a><div class='headline'>Non standard character   in source.</div></div><p>This is reported whenever a character is found in the source file which is not defined in the character set section of the c/cppvals.dat file. It is primarily used to detect those characters not defined in a character set. </p>
<pre>
	3***** The lines of permissible characters,(80A1),those NOT changed
	ABCDEFGHIJKLMNOPQRSTUVWXYZ
	abcdefghijklmnopqrstuvwxyz
	()[].!~+-*/%&lt;&gt;=&amp; ^|?:;,0123456789_{}'&quot;#\$@&lt;space&gt;&lt;tab&gt; 
</pre><p>Although the @ and $ characters are listed above, they are not members of all character sets and are not permitted by default. This standard can be relaxed to allow the @ and $ characters by setting the modifier <a href='standard_flags.htm#flag_408'>408</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard 113 S : Non standard character in source.
 *******************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_113<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   CHAR non_std_char <span class="sy0">=</span> <span class="st0">'ù'</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
   CHAR poss_string <span class="sy0">=</span> <span class="st0">&quot;$Id: 56$&quot;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant but permitted with modifier 408 */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc09-c'>MSC09-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_408'>408</a> = 1</td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_15.2.1'>15.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_747'>747</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_408'>408</a> = 1</td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_5'>5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.1.5'>3.1.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_408'>408</a> = 1</td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.15.2.1'>4.15.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_5'>5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_9'>9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_9'>9</a>, <a href='lmtcp_model.htm#rule_lmtcp_16'>16</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_408'>408</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_5'>5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_408'>408</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_408'>408</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_p1.2.1'>P1.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s114' name='standard_s114'><div class='standard'><div>114&nbsp;S</div></div></a><div class='headline'>Expression is not Boolean.</div></div><p>Confusion can arise when Boolean values are used as integers and integers are used as Booleans.  A violation of this standard will occur if:</p>
<ul>
<li style='margin-left : 0px;'>

 Both operands of an arithmetic operator are Boolean (other standards handle arithmetic operators with only one Boolean operand)
</li>
<li style='margin-left : 0px;'>

 An operand of a logical operator is not a Boolean
</li>
<li style='margin-left : 0px;'>

 An expression with a non-Boolean type is used where a Boolean is expected.
</li>
</ul>
<p>The C LDRA Testbed treats expressions with Boolean operators as Boolean expressions. If the compiler has Boolean types then strong typing is applied. When the compiler does not have a boolean type the use of bool or BOOL to declare variables will be treated by the C LDRA Testbed as a declaration of a Boolean type. The user will have to add typedef int BOOL; to their code. Users wishing to use another name will need to add that name to the c/cppvals.dat file. Users should copy the c/cppvals.dat settings for BOOLEAN for their replacement name.  Instructions for making alterations can be found in the manual.</p>
<p>This standard can be modified to treat objects with integer types as booleans if their first use is in a boolean context by setting the modifier <a href='standard_flags.htm#flag_386'>386</a> to 0 in the c/cppreport.dat file. The default value is 1. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the c/cppreport.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * Standard 114 S : Expression is not Boolean.
 *****************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_114<span class="br0">&#40;</span>BOOL bl<span class="sy0">,</span> UINT_32 a<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 x<span class="sy0">;</span>
   BOOL flag<span class="sy0">;</span>
&nbsp;
   flag <span class="sy0">=</span> bl <span class="sy0">+</span> bl<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
   <span class="kw1">if</span> <span class="br0">&#40;</span>a<span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
   <span class="br0">&#123;</span>
      <span class="sy0">;</span> <span class="coMULTI">/* ... */</span>
   <span class="br0">&#125;</span>
&nbsp;
   x <span class="sy0">=</span> <span class="br0">&#40;</span> a <span class="sy0">&amp;&amp;</span> bl <span class="sy0">?</span> 1U <span class="sy0">:</span> 0U <span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.14.3'>5.14.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.1.23'>6.1.23</a>, <a href='cmse_model.htm#rule_cmse_14.1.2'>14.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_35'>35</a>, <a href='dera_model.htm#rule_dera_36'>36</a>, <a href='dera_model.htm#rule_dera_49'>49</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.9.1.3'>3.9.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.14'>9.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.14.1.2'>4.14.1.2</a>, <a href='gjb_model.htm#rule_gjb_5.1.12'>5.1.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_5.2'>5.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_35'>35</a>, <a href='his_model.htm#rule_his_36'>36</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_299'>299</a>, <a href='lmtcp_model.htm#rule_lmtcp_307'>307</a>, <a href='lmtcp_model.htm#rule_lmtcp_360'>360</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_12.6'>12.6</a>, <a href='misra-ac_model.htm#rule_misra-ac_13.2'>13.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-13'>5-0-13</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-14'>5-0-14</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-3-1'>5-3-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_35'>35</a>, <a href='misra-c_1998_model.htm#rule_misra-c%3A1998_36'>36</a>, <a href='misra-c_1998_model.htm#rule_misra-c%3A1998_49'>49</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.6'>12.6</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_13.2'>13.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.1'>R.10.1</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.14.4'>R.14.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.5.2'>M1.5.2</a>, <a href='sec-c_model.htm#rule_sec-c_x4.x'>X4.x</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s115' name='standard_s115'><div class='standard'><div>115&nbsp;S</div></div></a><div class='headline'>String incorrectly terminated.</div></div><p>Some non-ANSI compilers allow strings over line boundaries. This standard only permits strings over line boundaries if they are terminated by a backslash.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard 115 S : String incorrectly terminated.
 *******************************************************/</span> 
<span class="kw4">void</span> static_115<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   CHAR<span class="sy0">*</span> str1 <span class="sy0">=</span> <span class="st0">&quot;string<span class="es1">\
</span>                 literal&quot;</span><span class="sy0">;</span>   <span class="coMULTI">/* compliant */</span>
&nbsp;
   CHAR<span class="sy0">*</span> str2 <span class="sy0">=</span> <span class="st0">&quot;string
                 literal&quot;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
 <span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_str03-c'>STR03-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_2.1.9'>2.1.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_741'>741</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.2.1.9'>4.2.1.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s116' name='standard_s116'><div class='standard'><div>116&nbsp;S</div></div></a><div class='headline'>Boolean comparison with 0 preferred.</div></div><p>C uses the value zero (0) for Boolean FALSE, and all non-zero values are equivalent to Boolean TRUE. It is safer to compare against the one known value, FALSE, than to perform a comparison against a single value of the entire set that represents TRUE. This standard reports instances in a Boolean context where a variable is compared for equality with unity (1). </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 116 S : Boolean comparison with 0 preferred.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_116 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 x <span class="sy0">=</span> 2u<span class="sy0">;</span>
&nbsp;
   <span class="kw1">if</span> <span class="br0">&#40;</span> x <span class="sy0">==</span> 1u <span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
   <span class="br0">&#123;</span>
      <span class="coMULTI">/* ... */</span> <span class="sy0">;</span>
   <span class="br0">&#125;</span>
   <span class="kw1">if</span> <span class="br0">&#40;</span> x <span class="sy0">!=</span> 0u <span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      <span class="coMULTI">/* ... */</span> <span class="sy0">;</span>
   <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_138'>138</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.2.1'>R2.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s117' name='standard_s117'><div class='standard'><div>117&nbsp;S</div></div></a><div class='headline'>Logical negation of constant value.</div></div><p>This is to tighten up the use of Boolean expressions. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * Standard 117 S : Logical negation of constant value.
 *****************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_117<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   BOOL flag <span class="sy0">=</span> FALSE<span class="sy0">;</span>
&nbsp;
   <span class="kw1">if</span> <span class="br0">&#40;</span>flag <span class="sy0">==</span> <span class="br0">&#40;</span>BOOL<span class="br0">&#41;</span><span class="sy0">!</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
   <span class="br0">&#123;</span>
      <span class="coMULTI">/* ... */</span> 
   <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.6.10'>5.6.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.1.11'>6.1.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.6.1.11'>4.6.1.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s118' name='standard_s118'><div class='standard'><div>118&nbsp;S</div></div></a><div class='headline'>main must be int (void) or int (int,char*[]).</div></div><p>The C standard only defines two forms for the main function.  All other forms are implementation dependent.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/****************************************************************
 * Standard 118 S : main must be int (void) or int (int,char*[]).
 ****************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> main<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>   <span class="coMULTI">/* Not compliant */</span>
<span class="br0">&#123;</span>
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_env31-c'>ENV31-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_2.1.10'>2.1.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_744'>744</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_148'>148</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.2.1.10'>4.2.1.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s119' name='standard_s119'><div class='standard'><div>119&nbsp;S</div></div></a><div class='headline'>Nested comment found.</div></div><p>The /*  */ style of comments do not nest, but certain compilers allow nested comments without giving a warning. This is dangerous, as the compiler will terminate the comment at the first termination sequence (*/) encountered, potentially regarding all remaining parts of the comment as legal code.</p>
<p>Lines containing both // and /* can be confusing to the reader and under some circumstances may lead to unexpected results.</p>
<p>This standard can be relaxed to allow // within /*  */ comments by setting the modifier <a href='standard_flags.htm#flag_413'>413</a> to 1 in the c/cppreport.dat file. 
Alternatively the standard can be relaxed to allow // within /*  */ comments under a more restricted set of situations by setting the modifier <a href='standard_flags.htm#flag_434'>434</a> to 1. This permits the // providing it is not preceded by /* ; }, space or new line.</p>
<p><a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the c/cppreport.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard 119 S : Nested comment found.
 *******************************************************/</span> 
&nbsp;
<span class="coMULTI">/* http://myweb - not compliant, unless modifier 413 or 434 set */</span>
&nbsp;
<span class="coMULTI">/* x = 2u; // not compliant, unless modifier 413 set */</span>
&nbsp;
<span class="kw4">void</span> static_119<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 x<span class="sy0">;</span>
   x <span class="sy0">=</span> 2U <span class="co1">// /*  - not compliant</span>
        <span class="sy0">+</span> 5U
          <span class="co1">// */</span>
       <span class="sy0">;</span>  <span class="coMULTI">/* User might expect +5U to be commented out */</span>
&nbsp;
<span class="coMULTI">/*  This is the Outer Comment
 /* This is the Inner Comment - not compliant
  */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.10.1'>5.10.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc04-c'>MSC04-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_10.1.1'>10.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_747'>747</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_9'>9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_413'>413</a> = 1</td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.10.1.1'>4.10.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_413'>413</a> = 1</td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_9'>9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_413'>413</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_246'>246</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_2.3'>2.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_413'>413</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-7-1'>2-7-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_413'>413</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_9'>9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_413'>413</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_2.3'>2.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_413'>413</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.3.1'>R.3.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_2.1.b'>2.1.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s120' name='standard_s120'><div class='standard'><div>120&nbsp;S</div></div></a><div class='headline'>Use of bit operator on signed type.</div></div><p>The handling of signed types with bitwise operators is unsafe, for example, and (&amp;) or or (|),  as the results are implementation specific. The sign may be lost, or shifted into the numeric part of the value. </p>
<p>Shift operators are handled by standard <a href='standards.htm#standard_s50'>50 S</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * Standard 120 S : Use of bit operator on signed type.
 *****************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_120<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   SINT_32 b <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
&nbsp;
   b <span class="sy0">=</span> b <span class="sy0">|</span> <span class="nu0">1</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.6.11'>5.6.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int13-c'>INT13-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.1.12'>6.1.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_682'>682</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_37'>37</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.6.1.12'>4.6.1.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.11'>10.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_37'>37</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_297'>297</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_12.7'>12.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-21'>5-0-21</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_37'>37</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.7'>12.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.1'>R.10.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_5.3.b'>5.3.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.6.2'>R2.6.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s121' name='standard_s121'><div class='standard'><div>121&nbsp;S</div></div></a><div class='headline'>Use of boolean expression in switch.</div></div><p>This should be implemented as an if .. then .. else ... The default clause will never be executed. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 121 S : Use of boolean expression in switch.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_121<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   BOOL flag <span class="sy0">=</span> FALSE<span class="sy0">;</span>
&nbsp;
   <span class="kw1">switch</span> <span class="br0">&#40;</span>flag<span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant */</span>
   <span class="br0">&#123;</span>
      <span class="kw1">case</span> TRUE<span class="sy0">:</span>
          <span class="kw2">break</span><span class="sy0">;</span>
      <span class="kw1">case</span> FALSE<span class="sy0">:</span>
          <span class="kw2">break</span><span class="sy0">;</span>
      <span class="kw1">default</span><span class="sy0">:</span>
          <span class="kw2">break</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.14.1'>5.14.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_14.1.3'>14.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_63'>63</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.14.1.3'>4.14.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_63'>63</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_195'>195</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_347'>347</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_15.4'>15.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-4-7'>6-4-7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_63'>63</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_15.4'>15.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.16.7'>R.16.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.3.1'>M1.3.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s122' name='standard_s122'><div class='standard'><div>122&nbsp;S</div></div></a><div class='headline'>Use of abort, exit, etc.</div></div><p>The use of functions which terminate execution is banned. Functions which terminate execution are identified in c/cppvals.dat as type 39 codes, and can be changed as needed. Instructions for making alterations can be found in the manual. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 122 S : Use of abort, exit, etc.
 ********************************************************/</span> 
<span class="kw4">void</span> static_122<span class="br0">&#40;</span>BOOL flag<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw1">if</span> <span class="br0">&#40;</span>flag<span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      abort<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
   <span class="br0">&#125;</span>
   exit<span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_7.2.3'>7.2.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_126'>126</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.7.2.3'>4.7.2.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_5.9'>5.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_126'>126</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_24'>24</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_28'>28</a>, <a href='lmtcp_model.htm#rule_lmtcp_356'>356</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_20.11'>20.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_18-0-3'>18-0-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_126'>126</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_20.11'>20.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.21.8'>R.21.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s123' name='standard_s123'><div class='standard'><div>123&nbsp;S</div></div></a><div class='headline'>Use of underlying enum representation value.</div></div><p>This standard enforces strong type checking. Enumerated types must be used only in comparisons with other enumerated types.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/***************************************************************
 * Standard 123 S : Use of underlying enum representation value.
 ***************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_123<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw2">enum</span> E_type <span class="br0">&#123;</span> Enum1<span class="sy0">,</span> Enum2 <span class="sy0">,</span> Enum3<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
   UINT_32 ui<span class="sy0">;</span>
&nbsp;
   ui <span class="sy0">=</span> Enum1<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.6.12'>5.6.12</a>, <a href='cast_model.htm#rule_cast_5.16.3'>5.16.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.1.13'>6.1.13</a>, <a href='cmse_model.htm#rule_cmse_15.1.7'>15.1.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_66'>66</a>, <a href='dera_model.htm#rule_dera_67'>67</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_56'>56</a>, <a href='eads-cpp_model.htm#rule_eads-c%2B%2B_57'>57</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.6.1.3'>4.6.1.3</a>, <a href='gjb_model.htm#rule_gjb_5.1.22'>5.1.22</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_13.6'>13.6</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_15.3'>15.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_367'>367</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_4-5-2'>4-5-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.1'>R.10.1</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.3'>R.10.3</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.4'>R.10.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s124' name='standard_s124'><div class='standard'><div>124&nbsp;S</div></div></a><div class='headline'>Use of prefix ++ or --.</div></div><p>The ++ and -- operators are considered dangerous. This standard detects the prefix versions. Postfix versions can be detected with <a href='standards.htm#standard_s30'>30 S</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * Standard 124 S : Use of prefix ++ or --.
 *****************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_124<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   SINT_32 x <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
&nbsp;
   <span class="sy0">++</span>x<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_136'>136</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s125' name='standard_s125'><div class='standard'><div>125&nbsp;S</div></div></a><div class='headline'>Use of ## or # in a macro.</div></div><p>These operators are poorly defined and can lead to undefined results.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdio.h&gt; </span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard 125 S : Use of ## or # in a macro.
 ********************************************************/</span> 
&nbsp;
<span class="co2">#define cat(x) (&amp;string[##(x)])</span>
&nbsp;
<span class="kw4">void</span> static_125<span class="br0">&#40;</span> UCHAR string<span class="br0">&#91;</span><span class="nu0">50</span><span class="br0">&#93;</span><span class="sy0">,</span> UINT_32 n<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp;
   UCHAR <span class="sy0">*</span>token1<span class="sy0">;</span>
&nbsp;
   token1<span class="sy0">=</span>cat<span class="br0">&#40;</span>n<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_pre05-c'>PRE05-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_15.2.2'>15.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_157'>157</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.15.2.2'>4.15.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_41'>41</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_19.13'>19.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-3-2'>16-3-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_19.13'>19.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.20.10'>R.20.10</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.20.12'>R.20.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m5.1.2'>M5.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s126' name='standard_s126'><div class='standard'><div>126&nbsp;S</div></div></a><div class='headline'>A #if has no #endif in the same file.</div></div><p>Preprocessor statements should not be spread over more than one file.</p>
<p>This standard is not available if &quot;SHORTEN&quot; is set to TRUE, which is the default value.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#define MISMATCHEDIF 1</span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard 126 S : A #if has no #endif in the same file.
 * Does not compile with VC++
 ********************************************************/</span> 
<span class="co2">#if MISMATCHEDIF == 1</span>
&nbsp;
<span class="kw4">void</span> static_126<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.1.13'>5.1.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.18'>1.1.18</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_160'>160</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.1.18'>4.1.1.18</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_43'>43</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_19.17'>19.17</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-1-2'>16-1-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_19.17'>19.17</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.20.14'>R.20.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m4.7.2'>M4.7.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s127' name='standard_s127'><div class='standard'><div>127&nbsp;S</div></div></a><div class='headline'>Array has no bounds specified.</div></div><p>The use of incomplete array declarations or definitions is not permitted.</p>
<p>This standard can be relaxed to allow initialised array declarations by setting the modifier <a href='standard_flags.htm#flag_426'>426</a> to 1 in the c/cppreport.dat file.  The use of incomplete array declarations in function declarations can be excluded from this check by setting the modifiers <a href='standard_flags.htm#flag_285'>285</a> or <a href='standard_flags.htm#flag_286'>286</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 127 S : Array has no bounds specified.
 ********************************************************/</span> 
&nbsp;
INT_32 garray<span class="br0">&#91;</span><span class="br0">&#93;</span><span class="sy0">;</span>                <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">void</span> static_127<span class="br0">&#40;</span> INT_32 par<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="br0">&#41;</span> <span class="coMULTI">/* not compliant, unless modifier 286 set */</span>
<span class="br0">&#123;</span>
   INT_32 array<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="br0">&#125;</span><span class="sy0">;</span>    <span class="coMULTI">/* not compliant, unless modifier 426 set */</span>
&nbsp;
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.1.18'>5.1.18</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_arr02-c'>ARR02-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_286'>286</a> = 1</td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.19'>1.1.19</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_665'>665</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_286'>286</a> = 1, <a href='standard_flags.htm#flag_426'>426</a> = 1</td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_162'>162</a>, <a href='dera_model.htm#rule_dera_166'>166</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_285'>285</a> = 1</td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.1.19'>4.1.1.19</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_286'>286</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_8.12'>8.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_286'>286</a> = 1, <a href='standard_flags.htm#flag_426'>426</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_3-1-3'>3-1-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_8.12'>8.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_286'>286</a> = 1, <a href='standard_flags.htm#flag_426'>426</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.11'>R.8.11</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.9.5'>R.9.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_286'>286</a> = 1, <a href='standard_flags.htm#flag_426'>426</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r3.1.1'>R3.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_286'>286</a> = 1, <a href='standard_flags.htm#flag_426'>426</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s128' name='standard_s128'><div class='standard'><div>128&nbsp;S</div></div></a><div class='headline'>Parameter has same name as global variable.</div></div><p>Languages may permit the use of the same name in different contexts (e.g. blocks and namespaces).  This is unsafe as it may lead to confusion as to which variant is active at the time.  In this instance, the parameter variable would be used within the procedure, but the coder may be confused over which value or instance of the variable is active. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*-- Global Declarations --*/</span> 
UINT_32 global_int <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 128 S : Parameter has same name as global variable.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_128<span class="br0">&#40;</span>UINT_32<span class="sy0">*</span> global_int<span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.15.3'>5.15.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_15.1.3'>15.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_21'>21</a>, <a href='dera_model.htm#rule_dera_128'>128</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.5.5'>3.5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.15.1.3'>4.15.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_21'>21</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_248'>248</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.2'>5.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-2'>2-10-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_21'>21</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.2'>5.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.3'>R.5.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s129' name='standard_s129'><div class='standard'><div>129&nbsp;S</div></div></a><div class='headline'>Parameter has same name as type or tag.</div></div><p>Languages may permit the use of the same name in different contexts (e.g. blocks and namespaces). This is unsafe as it may lead to confusion as to which variant is active at the time.  In this instance, the parameter variable name is already declared as a type or as a tag, which can be the name of a structure, a union or an enumeration.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">struct</span> DUPLICATE
<span class="br0">&#123;</span>
  UINT_32 field1<span class="sy0">;</span>
  UINT_32 field2<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard 129 S : Parameter has same name as type or tag.
 ********************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_129<span class="br0">&#40;</span>UINT_32 DUPLICATE<span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
   <span class="coMULTI">/* ... */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.15.4'>5.15.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_15.1.4'>15.1.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_12'>12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.15.1.4'>4.15.1.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_248'>248</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_12'>12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s130' name='standard_s130'><div class='standard'><div>130&nbsp;S</div></div></a><div class='headline'>Included file is not permitted.</div></div><p>The use of certain libraries and functions is prohibited by some authorities. This standard prevents the use of nominated include files. The list of include file names that are not permitted are listed as type 260 in the c/cppvals.dat files.  The name of the appropriate model must also be added. Instructions for making alterations can be found in the manual. </p>
<p>e.g.</p>
<pre>QUAL 260 7 stdio.h &quot;MISRA&quot; &quot;MISRA-C:2004&quot;</pre><div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/*******************************************************
 * Standard 130 S : Included file is not permitted.
 ********************************************************/</span> 
&nbsp;
<span class="co2">#include &lt;stdio.h&gt;  /* not compliant */</span>
&nbsp;
<span class="kw4">void</span> static_130 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_121'>121</a>, <a href='dera_model.htm#rule_dera_123'>123</a>, <a href='dera_model.htm#rule_dera_124'>124</a>, <a href='dera_model.htm#rule_dera_127'>127</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_43'>43</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_1.7'>1.7</a>, <a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_1.8'>1.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_17.1'>17.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_121'>121</a>, <a href='his_model.htm#rule_his_123'>123</a>, <a href='his_model.htm#rule_his_124'>124</a>, <a href='his_model.htm#rule_his_127'>127</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_17'>17</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_19'>19</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_21'>21</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_22'>22</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_25'>25</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_23'>23</a>, <a href='lmtcp_model.htm#rule_lmtcp_25'>25</a>, <a href='lmtcp_model.htm#rule_lmtcp_26'>26</a>, <a href='lmtcp_model.htm#rule_lmtcp_29'>29</a>, <a href='lmtcp_model.htm#rule_lmtcp_30'>30</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_20.8'>20.8</a>, <a href='misra-ac_model.htm#rule_misra-ac_20.9'>20.9</a>, <a href='misra-ac_model.htm#rule_misra-ac_20.12'>20.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_18-0-1'>18-0-1</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_18-0-4'>18-0-4</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_18-0-5'>18-0-5</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_18-7-1'>18-7-1</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_27-0-1'>27-0-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_121'>121</a>, <a href='misra-c_1998_model.htm#rule_misra-c%3A1998_123'>123</a>, <a href='misra-c_1998_model.htm#rule_misra-c%3A1998_124'>124</a>, <a href='misra-c_1998_model.htm#rule_misra-c%3A1998_127'>127</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_20.8'>20.8</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_20.9'>20.9</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_20.12'>20.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.21.5'>R.21.5</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.21.6'>R.21.6</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.21.10'>R.21.10</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.21.11'>R.21.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s131' name='standard_s131'><div class='standard'><div>131&nbsp;S</div></div></a><div class='headline'>Name reused in inner scope.</div></div><p>Languages may permit the use of the same name in different contexts (e.g. blocks and namespaces). This is unsafe as it may lead to confusion as to which variant is active at the time.  While block structure rules allow names to be reused in inner blocks, this standard will report any instances encountered. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 131 S : Name reused in inner scope.
 ********************************************************/</span> 
<span class="kw4">void</span> STATIC_131<span class="br0">&#40;</span>UINT_32 p_1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 static_131<span class="sy0">;</span>
   BOOL c_1 <span class="sy0">=</span> FALSE<span class="sy0">;</span>
&nbsp;
   <span class="kw1">if</span> <span class="br0">&#40;</span>c_1<span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      UINT_32 static_131 <span class="sy0">=</span> 1u<span class="sy0">;</span>
      static_131 <span class="sy0">=</span> static_131 <span class="sy0">+</span> 1u<span class="sy0">;</span>
   <span class="br0">&#125;</span>
&nbsp;
   static_131 <span class="sy0">=</span> p_1<span class="sy0">;</span>
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.15.2'>5.15.2</a>, <a href='cast_model.htm#rule_cast_5.15.5'>5.15.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl01-c'>DCL01-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_15.1.2'>15.1.2</a>, <a href='cmse_model.htm#rule_cmse_15.1.5'>15.1.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_736'>736</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_21'>21</a>, <a href='dera_model.htm#rule_dera_128'>128</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_30'>30</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.5.5'>3.5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.15.1.2'>4.15.1.2</a>, <a href='gjb_model.htm#rule_gjb_4.15.1.5'>4.15.1.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_8.2.1'>8.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_21'>21</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_6'>6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_135'>135</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_138'>138</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_248'>248</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.2'>5.2</a>, <a href='misra-ac_model.htm#rule_misra-ac_5.3'>5.3</a>, <a href='misra-ac_model.htm#rule_misra-ac_5.4'>5.4</a>, <a href='misra-ac_model.htm#rule_misra-ac_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-2'>2-10-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_21'>21</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.2'>5.2</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.3'>5.3</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.4'>5.4</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.3'>R.5.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s132' name='standard_s132'><div class='standard'><div>132&nbsp;S</div></div></a><div class='headline'>Assignment operator in boolean expression.</div></div><p>The assignment operator ( = ) set an lvalue, whereas the equality operator ( == ) performs a comparison. It is possible that the assignment operator was typed in error. This is highly likely, and the operator should be the equality operator.</p>
<p>For Example: </p>
<pre>
if (flag=false)  /* Incorrect-assignment made */ 
if (flag==false) /* Correct  - comparison performed */ 
</pre><div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 132 S : Assignment operator in boolean expression.
 *************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_132<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   BOOL flag <span class="sy0">=</span> FALSE<span class="sy0">;</span>
&nbsp;
   <span class="kw1">if</span> <span class="br0">&#40;</span>flag <span class="sy0">=</span> FALSE<span class="br0">&#41;</span> <span class="coMULTI">/* not compliant -  should be (flag == FALSE) */</span> 
   <span class="br0">&#123;</span>
      <span class="coMULTI">/* ... */</span> 
   <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.6.1'>5.6.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc02-c'>MSC02-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.1.15'>6.1.15</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_481'>481</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_35'>35</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.6.1.15'>4.6.1.15</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.5'>10.5</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_10.6'>10.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_35'>35</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_160'>160</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : 247 = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_291'>291</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_13.1'>13.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-2-1'>6-2-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_35'>35</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_13.1'>13.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.13.1'>R.13.1</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.13.4'>R.13.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : 247 = 1</td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_8.2.c'>8.2.c</a>, <a href='netrino_model.htm#rule_netrino_8.6.a'>8.6.a</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m3.3.3'>M3.3.3</a>, <a href='sec-c_model.htm#rule_sec-c_x5.x'>X5.x</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s133' name='standard_s133'><div class='standard'><div>133&nbsp;S</div></div></a><div class='headline'>Assignment operator in RHS of &amp;&amp; or ||.</div></div><p>Any assignment on the right hand side of a logical and (&amp;&amp;) or or (||) operator is conditional on the result of the term to the left of the operator. This is considered to be bad practice. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**********************************************************
 * Standard 133 S : Assignment operator in RHS of &amp;&amp; or ||.
 **********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_133<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   BOOL flag <span class="sy0">=</span> FALSE<span class="sy0">;</span>
   INT_32 y <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span> x <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
   <span class="kw1">if</span> <span class="br0">&#40;</span> flag <span class="sy0">&amp;&amp;</span>
        <span class="br0">&#40;</span><span class="br0">&#40;</span>x <span class="sy0">=</span> y<span class="br0">&#41;</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
      <span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      <span class="coMULTI">/* ... */</span>
   <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.6.13'>5.6.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp02-c'>EXP02-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.1.16'>6.1.16</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_768'>768</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_33'>33</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.6.1.16'>4.6.1.16</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.6'>10.6</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_10.9'>10.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_33'>33</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_157'>157</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_33'>33</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s134' name='standard_s134'><div class='standard'><div>134&nbsp;S</div></div></a><div class='headline'>Volatile variable in complex expression.</div></div><p>The value of volatile variables can change outside of the control of the application. This standard reports any expression that uses the same volatile variable more than once in an expression. This is unsafe, as the value returned may be different at each stage of the expression evaluation. It is safer to use volatiles only in simple expressions which are unlikely to be optimised. If it is required that the same value be used in all parts of an expression, it is better to retain the current value in a local variable and use that in place of the volatile component of the expression.</p>
<p>For example: </p>
<pre>
	volatile UINT_32 v = 1U;
	UINT_32 x, a;
	x = v*v; /* this is unsafe, v could change*/ 
	a = v;
	x = a*a; /* this is safe, the value of v was captured */ 
</pre><div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * Standard 134 S : Volatile variable in complex expression.
 *****************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_134<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 y <span class="sy0">=</span> 2u<span class="sy0">,</span> x <span class="sy0">=</span> 0u<span class="sy0">,</span> z <span class="sy0">=</span> 1u<span class="sy0">;</span>
   <span class="kw4">volatile</span> UINT_32 v <span class="sy0">=</span> 1U<span class="sy0">;</span>
&nbsp;
   x <span class="sy0">=</span> <span class="br0">&#40;</span>v <span class="sy0">+</span> z<span class="br0">&#41;</span> <span class="sy0">/</span> <span class="br0">&#40;</span>v <span class="sy0">*</span> y<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp10-c'>EXP10-C</a>, <a href='cert-c_model.htm#rule_cert-c_exp30-c'>EXP30-C</a>, <a href='cert-c_model.htm#rule_cert-c_fio41-c'>FIO41-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_15.1.6'>15.1.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_46'>46</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.10.1'>3.10.1</a>, <a href='fsb582-c_model.htm#rule_fsb582-c_3.10.2'>3.10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.17'>9.17</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.15.1.6'>4.15.1.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.3'>10.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_46'>46</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_362'>362</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_12.2'>12.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-1'>5-0-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_46'>46</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.2'>12.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.13.1'>R.13.1</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.13.2'>R.13.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r3.6.1'>R3.6.1</a>, <a href='sec-c_model.htm#rule_sec-c_r3.6.2'>R3.6.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s135' name='standard_s135'><div class='standard'><div>135&nbsp;S</div></div></a><div class='headline'>Parameter list is KR.</div></div><p>The original standard for C was devised by Kernighan and Richie (often referred to as K&amp;R ). This allowed parameter lists to be declared using the name ONLY, with the type optionally following the declaration. It is often preferred that programmers only use the newer (ANSI) form of parameter list, even though compilers will accept K&amp;R style declarations. This standard reports any instances encountered. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 135 S : Parameter list is KR.
 ********************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_135<span class="br0">&#40;</span>  p_1<span class="sy0">,</span>  p_2<span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
UINT_32 p_1<span class="sy0">;</span>
UINT_32 p_2<span class="sy0">;</span>
<span class="br0">&#123;</span>
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl07-c'>DCL07-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_8.2.7'>8.2.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_628'>628</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.6.4'>3.6.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.8.2.8'>4.8.2.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.1'>R.8.1</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.2'>R.8.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.8.3'>R2.8.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c++.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s136' name='standard_s136'><div class='standard'><div>136&nbsp;S</div></div></a><div class='headline'>Bit operator with boolean operand.</div></div><p>A bitwise operator, for example, and (&amp;) or or (|), has been detected within an expression which uses a boolean operator. It is highly likely that the wrong operator is being used, e.g.&amp; instead of &amp;&amp;.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="coMULTI">/*****************************************************
 * Standard 136 S : Bit operator with boolean operand.
 *****************************************************/</span> 
<span class="kw4">void</span> static_136<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 x <span class="sy0">=</span> 1u<span class="sy0">;</span>
&nbsp;
   BOOL flag <span class="sy0">=</span> FALSE<span class="sy0">;</span>
&nbsp;
   <span class="kw1">if</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>flag <span class="sy0">|</span> <span class="br0">&#40;</span>x <span class="sy0">!=</span> 0u<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">==</span> FALSE<span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant */</span>
   <span class="br0">&#123;</span>
       <span class="coMULTI">/* ... */</span> 
   <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.6.14'>5.6.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.1.17'>6.1.17</a>, <a href='cmse_model.htm#rule_cmse_6.1.18'>6.1.18</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_480'>480</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_36'>36</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.6.1.17'>4.6.1.17</a>, <a href='gjb_model.htm#rule_gjb_4.6.1.18'>4.6.1.18</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.11'>10.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_36'>36</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_12.6'>12.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_4-5-1'>4-5-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_36'>36</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.6'>12.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.1'>R.10.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s138' name='standard_s138'><div class='standard'><div>138&nbsp;S</div></div></a><div class='headline'>Anonymous bit field used in structure.</div></div><p>All bit fields should have a name. The use of anonymous bit fields could be just packing, but also could be due to an error. For example: </p>
<pre>
	struct  bad {UINT_32 x:1,          :1; UINT_32 z:1;}
	struct good {UINT_32 x:1; UINT_32 y:1; UINT_32 z:1;}
</pre><p>This standard can be relaxed to allow anonymous bit fields of length 0 by setting the modifier <a href='standard_flags.htm#flag_248'>248</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 138 S : Anonymous bit field used in structure.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">struct</span> s_138 <span class="br0">&#123;</span>UINT_32 x<span class="sy0">,</span> <span class="sy0">:</span><span class="nu0">2</span><span class="sy0">;</span><span class="br0">&#125;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">void</span> static_138<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="coMULTI">/* ... */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.1.23'>5.1.23</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.3'>1.1.3</a>, <a href='cmse_model.htm#rule_cmse_1.2.9'>1.2.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_113'>113</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.1.3'>4.1.1.3</a>, <a href='gjb_model.htm#rule_gjb_4.1.2.9'>4.1.2.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_113'>113</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_156'>156</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_248'>248</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_285'>285</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_248'>248</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_113'>113</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s139' name='standard_s139'><div class='standard'><div>139&nbsp;S</div></div></a><div class='headline'>Construct leads to infeasible code.</div></div><p>It is possible that a branch condition evaluates to a constant value. This would cause some control flow structure to be infeasible and lead to the possibility of infeasible code. E.g.</p>
<pre>
	if (0) { /* NEVER EXECUTED */ } else {...};
</pre><p>When determining the condition of a branch, it is assumed that an object with an enumeration type will always have value represented by that type. For example:</p>
<pre>
        typedef enum { LANE_0 = 0, LANE_1 = 1, LANE_LAST = 3 } lane_t;
        if ( (lane &gt; LANE_0) &amp;&amp; ( lane &lt;= LANE_LAST))
</pre><p>If lane is greater than 0, the second operand of &amp;&amp; will always be true since lane is always less than or equal to 3.  This means that there is no way of producing test data for the situation when the 1st operand is True and the 2nd operand is False.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#define defval 0</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw2">enum</span> <span class="br0">&#123;</span> LANE_0 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span> LANE_1 <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">,</span> LANE_LAST <span class="sy0">=</span> <span class="nu0">3</span> <span class="br0">&#125;</span> lane_t<span class="sy0">;</span>
<span class="kw2">extern</span> lane_t get_lane <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 139 S : Construct leads to infeasible code.
 ********************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_139<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   lane_t lane <span class="sy0">=</span> get_lane<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
   <span class="kw1">if</span> <span class="br0">&#40;</span> <span class="br0">&#40;</span>lane <span class="sy0">&gt;</span> LANE_0<span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span> lane <span class="sy0">&lt;=</span> LANE_LAST<span class="br0">&#41;</span><span class="br0">&#41;</span>
      <span class="coMULTI">/* not compliant - False branch of 'lane &lt;= LANE_LAST' never reached */</span>
      <span class="br0">&#123;</span> <span class="coMULTI">/* ... */</span> <span class="br0">&#125;</span>
&nbsp;
   <span class="kw1">if</span> <span class="br0">&#40;</span>defval<span class="br0">&#41;</span>
      <span class="coMULTI">/* not compliant - True branch never reached*/</span>
      <span class="br0">&#123;</span> <span class="coMULTI">/* ... */</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc07-c'>MSC07-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.2.4'>6.2.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_561'>561</a>, <a href='cwe_model.htm#rule_cwe_570'>570</a>, <a href='cwe_model.htm#rule_cwe_571'>571</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_52'>52</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.6.2.4'>4.6.2.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_5.3'>5.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_52'>52</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_306'>306</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_13.7'>13.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_0-1-2'>0-1-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_52'>52</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_13.7'>13.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.14.3'>R.14.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_x2.x'>X2.x</a>, <a href='sec-c_model.htm#rule_sec-c_x4.x'>X4.x</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s140' name='standard_s140'><div class='standard'><div>140&nbsp;S</div></div></a><div class='headline'>Infeasible loop condition found.</div></div><p>Detects when a loop condition evaluates to a constant FALSE value </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="co2">#define defval 0</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 140 S : Infeasible loop condition found.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_140<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw1">while</span> <span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span>          <span class="coMULTI">/* not compliant */</span>
      <span class="br0">&#123;</span> <span class="coMULTI">/* ... */</span> <span class="br0">&#125;</span>
&nbsp;
   <span class="kw1">while</span><span class="br0">&#40;</span> defval <span class="br0">&#41;</span>   <span class="coMULTI">/* not compliant */</span>
      <span class="br0">&#123;</span> <span class="coMULTI">/* ... */</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc07-c'>MSC07-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_11.2.3'>11.2.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_561'>561</a>, <a href='cwe_model.htm#rule_cwe_570'>570</a>, <a href='cwe_model.htm#rule_cwe_571'>571</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_52'>52</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.11.2.3'>4.11.2.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_5.3'>5.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_52'>52</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_13.7'>13.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_52'>52</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_13.7'>13.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.14.3'>R.14.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.9.2'>M1.9.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s141' name='standard_s141'><div class='standard'><div>141&nbsp;S</div></div></a><div class='headline'>Incomplete structure or class declaration.</div></div><p>This identifies incomplete declarations of the form: </p>
<pre>
	struct atagname;
</pre><p>A correct declaration requires a full declaration of all components of the structure. </p>
<pre>
	struct atagname(UINT_32 A, UINT_32 B);
</pre><div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 141 S : Incomplete structure or class declaration.
 *************************************************************/</span> 
&nbsp;
<span class="kw4">struct</span> static_141_s<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">void</span> static_141<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.1.17'>5.1.17</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.21'>1.1.21</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_108'>108</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.1.21'>4.1.1.21</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_108'>108</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_108'>108</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s142' name='standard_s142'><div class='standard'><div>142&nbsp;S</div></div></a><div class='headline'>Parameter list declarations are inconsistent.</div></div><p>This indicates that some parameters have a type and a name and others do not. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/****************************************************************
 * Standard 142 S : Parameter list declarations are inconsistent.
 ****************************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_142<span class="br0">&#40;</span>UINT_32 <span class="sy0">,</span> UINT_16 p_2<span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
    <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.22'>1.1.22</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_73'>73</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.1.22'>4.1.1.22</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_73'>73</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_73'>73</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s143' name='standard_s143'><div class='standard'><div>143&nbsp;S</div></div></a><div class='headline'>Curly brackets used in expression.</div></div><p>Some compilers will permit the use of curly brackets {} in expressions. This can be very confusing to maintainers and is not portable. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 143 S : Curly brackets used in expression.
 ********************************************************/</span> 
&nbsp;
UINT_32 static_143<span class="br0">&#40;</span>UINT_32 p_1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 result<span class="sy0">;</span>
   result <span class="sy0">=</span> p_1<span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
   <span class="kw1">return</span> result<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.1.1'>3.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_1.1'>1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_1.1'>1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.2'>R.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_x6.x'>X6.x</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s144' name='standard_s144'><div class='standard'><div>144&nbsp;S</div></div></a><div class='headline'>Floating point not permitted.</div></div><p>Floating point numbers can introduce computational errors, loss of precision, and unexpected responses in comparison and loops. Floating point needs great care and hence its use is generally not permitted. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*************************************************
 * Standard 144 S : Floating point not permitted.
 *************************************************/</span> 
&nbsp;
FLOAT_32 static_144<span class="br0">&#40;</span>FLOAT_32 p_1<span class="sy0">,</span>FLOAT_32 p_2<span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
   FLOAT_32 result<span class="sy0">;</span>      <span class="coMULTI">/* not compliant */</span>
   result <span class="sy0">=</span> p_1 <span class="sy0">+</span> p_2<span class="sy0">;</span>
   <span class="kw1">return</span> result<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_129'>129</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_5.4.a'>5.4.a</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s145' name='standard_s145'><div class='standard'><div>145&nbsp;S</div></div></a><div class='headline'>#if has invalid expression.</div></div><p>Some compilers fail to parse the expression following a #if, e.g. </p>
<pre>
	#if MACRO_NAME JUNK_NAME
</pre><p>The term that follows a #if should also evaluate to a boolean result, and this type of expression is suspicious. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/************************************************
 *  Standard 145 S : #if has invalid expression.
 ************************************************/</span> 
&nbsp;
<span class="co2">#define static_145 6</span>
&nbsp;
<span class="co2">#if static_145 i  /* not compliant */</span>
<span class="co2">#endif</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.1.1'>3.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_1.1'>1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_1.1'>1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_1-0-1'>1-0-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_1.1'>1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.1'>R.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_x6.x'>X6.x</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s146' name='standard_s146'><div class='standard'><div>146&nbsp;S</div></div></a><div class='headline'>#define with empty parameter list.</div></div><p>C permits macros without parameter lists hence </p>
<pre>
	#define Macro() some_macro_body
</pre><p>is confusing and possibly due to an error.</p>
<pre>
	#define Macro some_macro_body
</pre><p>is more easily understood.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/********************************************************
 *  Standard 146 S : #define with empty parameter list.
 ********************************************************/</span> 
&nbsp;
<span class="co2">#define static_146() (&quot;dummy()&quot;)  /* not compliant */</span>
&nbsp;
<span class="kw4">void</span> dummy<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s147' name='standard_s147'><div class='standard'><div>147&nbsp;S</div></div></a><div class='headline'>Spurious characters after preprocessor directive.</div></div><p>This detects coding errors of the type: </p>
<pre>	#endif ; </pre><p>where the semi colon is a constraint error. However, not all compilers detect this problem.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/*********************************************************************
 *  Standard 147 S : Spurious characters after preprocessor directive.
 *********************************************************************/</span> 
&nbsp;
<span class="co2">#ifdef STATIC_147</span>
&nbsp;
  <span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">char</span> UCHAR<span class="sy0">;</span>
&nbsp;
<span class="co2">#endif ; /* not compliant */</span>
&nbsp;
<span class="kw4">void</span> static_147<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_19.16'>19.16</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-0-8'>16-0-8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_19.16'>19.16</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.20.13'>R.20.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.12.1'>M1.12.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s148' name='standard_s148'><div class='standard'><div>148&nbsp;S</div></div></a><div class='headline'>No return type for function/procedure.</div></div><p>In C, any declaration or definition that omits a return type will use the implementation-specific default return type. No reliance should be made on default types, so this standard reports any instances encountered </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*********************************************************
 *  Standard 148 S : No return type for function/procedure.
 *********************************************************/</span> 
&nbsp;
static_148<span class="br0">&#40;</span>UINT_32 p1<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
static_148<span class="br0">&#40;</span>UINT_32 p1<span class="br0">&#41;</span>   <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
	 <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_628'>628</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_75'>75</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_108'>108</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.6.2'>3.6.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_75'>75</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_75'>75</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s149' name='standard_s149'><div class='standard'><div>149&nbsp;S</div></div></a><div class='headline'>Reference parameter to procedure is reassigned.</div></div><p>Call by reference parameters are declared as pointers and these pointers are initialised by the actual parameter. However these pointer parameters can at any time be reassigned to point to any other suitable object in scope. This is a highly undesirable construct leading to possibly serious errors and unmaintainability.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
CHAR <span class="sy0">*</span>static_149<span class="br0">&#40;</span> CHAR <span class="sy0">*</span>p1<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> test_149<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  CHAR <span class="sy0">*</span>a <span class="sy0">=</span> <span class="st0">&quot;Query&quot;</span><span class="sy0">;</span>
  CHAR <span class="sy0">*</span>b<span class="sy0">;</span>
  b <span class="sy0">=</span> static_149<span class="br0">&#40;</span>a<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 149 S : Reference parameter to procedure is reassigned.
 ********************************************************/</span> 
CHAR <span class="sy0">*</span>static_149<span class="br0">&#40;</span> CHAR <span class="sy0">*</span>p1 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">static</span> CHAR <span class="sy0">*</span>newA <span class="sy0">=</span> <span class="st0">&quot;Response&quot;</span><span class="sy0">;</span>
&nbsp;
  p1<span class="sy0">++;</span>        <span class="coMULTI">/* not compliant */</span>
  p1 <span class="sy0">=</span> p1<span class="sy0">+</span><span class="nu0">1</span><span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span>
  p1 <span class="sy0">=</span> newA<span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span>
&nbsp;
  <span class="kw1">return</span> p1<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.17.8'>R.17.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s150' name='standard_s150'><div class='standard'><div>150&nbsp;S</div></div></a><div class='headline'>Volatile or const used in function type.</div></div><p>volatile and const qualifiers are only meaningful for expressions that are lvalues. Therefore applying volatile or const to a function return type has no effect, but the user may be confused into thinking that its does have an effect. </p>
<p>Return types that are pointers to const or volatile are permitted.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">volatile</span> UINT_32 STATIC_150<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="coMULTI">/***********************************************************
 * Standard 150 S : Volatile or const used in function type.
 ***********************************************************/</span> 
&nbsp;
<span class="kw4">volatile</span> UINT_32 STATIC_150<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  <span class="kw4">volatile</span> UINT_32 r<span class="sy0">;</span>
  <span class="coMULTI">/* ... */</span> 
  <span class="kw1">return</span> r<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_147'>147</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s151' name='standard_s151'><div class='standard'><div>151&nbsp;S</div></div></a><div class='headline'>Use of global variable in macro definition.</div></div><p>Some authorities consider the use of globals in macro definitions to be dangerous. For example, the macro replacement could use a local definition with the same name instead of the required global variable. This standard reports any instances of a global variable within a macro definition.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/***************************************************************
 *  Standard 151 S : Use of global variable in macro definition.
 ***************************************************************/</span> 
&nbsp;
UINT_32 globvar<span class="sy0">;</span>
&nbsp;
<span class="co2">#define STATIC_151 globvar  /* not compliant */</span>
&nbsp;
<span class="kw4">void</span>  static_151 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* ... */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_159'>159</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s152' name='standard_s152'><div class='standard'><div>152&nbsp;S</div></div></a><div class='headline'>Use of a comment in a macro definition.</div></div><p>Macros can expand to unexpected code when combined with an incorrect form of comment, which can be very hard to diagnose.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 *  Standard 152 S : Use of a comment in a macro definition.
 ********************************************************/</span> 
&nbsp;
<span class="co2">#define STATIC_152 3 /* not compliant comment */ </span>
&nbsp;
<span class="kw4">void</span>  static_152 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* ... */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_155'>155</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_14.7'>14.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s153' name='standard_s153'><div class='standard'><div>153&nbsp;S</div></div></a><div class='headline'>Use of a comment in a pre-processor directive.</div></div><p>The mixture of C and preprocessor commands is potentially dangerous. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#ifdef STATIC_153 /* A Comment  - not compliant */ </span>
  <span class="coMULTI">/* ... */</span> 
<span class="co2">#endif /* Another Comment - not compliant */ </span>
&nbsp;
<span class="coMULTI">/*****************************************************************
 *  Standard 153 S : Use of a comment in a pre-processor directive.
 *****************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_153 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_155'>155</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s154' name='standard_s154'><div class='standard'><div>154&nbsp;S</div></div></a><div class='headline'>Nested header files found.</div></div><p>C allows header files to include further header files. Some bodies consider this unsafe, and require a flat file structure, where all include files contain only the information relevant to the file, and NO further includes. This standard will report any include files that have further includes.</p>
<div class='title'>Example</div>
<p>Static_154_1.h</p>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span></pre><p>Static_154.h</p>
<pre class="code c"><span class="co2">#include &quot;Static_154_1.h&quot;</span></pre><p>Static_154.c</p>
<pre class="code c"><span class="co2">#include &quot;Static_154.h&quot;  /* not compliant */</span>
&nbsp;
<span class="coMULTI">/********************************************************
 *  Standard 154 S : Nested Header Files Found
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_154<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span> <span class="coMULTI">/* ... */</span>  
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_168'>168</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_4.2.d'>4.2.d</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s155' name='standard_s155'><div class='standard'><div>155&nbsp;S</div></div></a><div class='headline'>Comments between preprocessor directives.</div></div><p>This standard highlights when the #ifdef preprocessor directive with an undefined name acts like a comment.  This could give problems if the name is later defined.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**************************************************************
 *  Standard 155 S : Comments between preprocessor directives
 **************************************************************/</span> 
&nbsp;
&nbsp;
<span class="co2">#ifdef STATIC_155</span>
  this acts as a comment<span class="sy0">,</span> as STATIC_155 is undefined.
<span class="co2">#endif</span>
&nbsp;
<span class="kw4">void</span> static_155 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_161'>161</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s156' name='standard_s156'><div class='standard'><div>156&nbsp;S</div></div></a><div class='headline'>Use of 'defined' keyword in macro body.</div></div><p>The mixture of C and preprocessor commands is potentially dangerous. This standard reports any macros which feature the preprocessor directive defined.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="co2">#define STATIC_156(x) defined(x)</span>
&nbsp;
<span class="coMULTI">/****************************************************
 *  Standard 156 S : Use of 'defined' keyword in macro body
 ****************************************************/</span> 
&nbsp;
<span class="co2">#if STATIC_156(c)</span>
UINT_32 var1<span class="sy0">;</span>
<span class="co2">#else</span>
SINT_32 var1<span class="sy0">;</span>
<span class="co2">#endif</span>
&nbsp;
<span class="co2">#define c 1</span>
&nbsp;
<span class="co2">#if STATIC_156(c)</span>
UINT_32 var2<span class="sy0">;</span>
<span class="co2">#else</span>
SINT_32 var2<span class="sy0">;</span>
<span class="co2">#endif</span>
&nbsp;
<span class="kw4">void</span> dummy<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2000 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_158'>158</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_92'>92</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_20.1'>20.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_17-0-1'>17-0-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_20.1'>20.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.21.1'>R.21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s157' name='standard_s157'><div class='standard'><div>157&nbsp;S</div></div></a><div class='headline'>Modification of string literal.</div></div><p>The location of a string literal is determined at the time the program is compiled. For example, it may be placed in an area of memory marked as read-only, or physically stored within the binary executable. It is unsafe to attempt to change any such text, as the consequences are unpredictable.</p>
<p>This standard also highlights modifications to the pointers returned from string library functions such as strchr.  Though this is safe if the original string is not a constant, there will be undefined behaviour is the original string is a constant.</p>
<p>This standard can be relaxed to allow the modification of the contents of an array of chars accessed via a pointer by setting the modifier <a href='standard_flags.htm#flag_438'>438</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/****************************************************
 *  Standard 157 S : Modification of string literal.
 ****************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_157<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  CHAR <span class="sy0">*</span>c <span class="sy0">=</span> <span class="st0">&quot;1234567890&quot;</span><span class="sy0">;</span>
&nbsp;
  c<span class="br0">&#91;</span><span class="nu0">7</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="st0">'0'</span><span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span>
  <span class="sy0">*</span><span class="br0">&#40;</span>c<span class="sy0">+</span><span class="nu0">6</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'1'</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.16.13'>5.16.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_str30-c'>STR30-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_438'>438</a> = 1</td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_438'>438</a> = 1</td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_130'>130</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_438'>438</a> = 1</td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_5.1.19'>5.1.19</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_151.1'>151.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_273'>273</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_438'>438</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_438'>438</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.7.4'>R.7.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_438'>438</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_x3.x'>X3.x</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_438'>438</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s158' name='standard_s158'><div class='standard'><div>158&nbsp;S</div></div></a><div class='headline'>Expression with more than *** subconditions.</div></div><p>The *** symbols refer to a user definable number, defaulting to 10 for this standard. The configuration is made in the c/cppreport.dat or c/cpppen.dat file. Instructions for making alterations can be found in the manual.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************************
 *  Standard 158 S : Expression with more than *** subconditions.
 *****************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_158<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  INT_32 a1<span class="sy0">,</span>b1<span class="sy0">,</span>c1<span class="sy0">,</span>d1<span class="sy0">,</span>e1<span class="sy0">;</span>
  INT_32 a2<span class="sy0">,</span>b2<span class="sy0">,</span>c2<span class="sy0">,</span>d2<span class="sy0">,</span>e2<span class="sy0">;</span>
  INT_32 a3<span class="sy0">,</span>b3<span class="sy0">,</span>c3<span class="sy0">,</span>d3<span class="sy0">,</span>e3<span class="sy0">;</span>
&nbsp;
  <span class="kw1">if</span>  <span class="br0">&#40;</span><span class="br0">&#40;</span>a1<span class="sy0">==</span><span class="nu0">0</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span>b1<span class="sy0">==</span><span class="nu0">0</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span>c1<span class="sy0">==</span><span class="nu0">0</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span>d1<span class="sy0">==</span><span class="nu0">0</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span>e1<span class="sy0">==</span><span class="nu0">0</span><span class="br0">&#41;</span>
    <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span>a2<span class="sy0">==</span><span class="nu0">0</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span>b2<span class="sy0">==</span><span class="nu0">0</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span>c2<span class="sy0">==</span><span class="nu0">0</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span>d2<span class="sy0">==</span><span class="nu0">0</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span>e2<span class="sy0">==</span><span class="nu0">0</span><span class="br0">&#41;</span>
    <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span>a3<span class="sy0">==</span><span class="nu0">0</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span>b3<span class="sy0">==</span><span class="nu0">0</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span>c3<span class="sy0">==</span><span class="nu0">0</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span>d3<span class="sy0">==</span><span class="nu0">0</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span>e3<span class="sy0">==</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
    <span class="br0">&#123;</span>
      <span class="coMULTI">/* ... */</span> 
    <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_146'>146</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s159' name='standard_s159'><div class='standard'><div>159&nbsp;S</div></div></a><div class='headline'>Comparing pointer with zero or NULL.</div></div><p>Any comparison of a pointer to NULL or zero should be made to a NULL pointer of the correct type. e.g.</p>
<pre>
	char *message;
	if (message != (char *)(NULL) ) /* compliant */ 
	if (message != NULL )           /* not compliant */ 
</pre><p>This standard can be relaxed to allow comparisons with zero by setting the modifier <a href='standard_flags.htm#flag_207'>207</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
&nbsp;
<span class="coMULTI">/*********************************************************
 *  Standard 159 S : Comparing pointer with zero or NULL.
 *********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_159<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  CHAR <span class="sy0">*</span>message <span class="sy0">=</span> <span class="st0">&quot;TEST&quot;</span><span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
  <span class="kw1">if</span>  <span class="br0">&#40;</span> message <span class="sy0">!=</span> NULL <span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#123;</span>
    <span class="coMULTI">/* ... */</span> 
  <span class="br0">&#125;</span>
  <span class="kw1">if</span>  <span class="br0">&#40;</span> message <span class="sy0">!=</span> <span class="nu0">0</span> <span class="br0">&#41;</span> <span class="coMULTI">/* not compliant but permitted with modifier 207 */</span>
  <span class="br0">&#123;</span>
    <span class="coMULTI">/* ... */</span> 
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_163'>163</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s160' name='standard_s160'><div class='standard'><div>160&nbsp;S</div></div></a><div class='headline'>Loop in macro expansion.</div></div><div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/*********************************************************
 *  Standard 160 S : Loop in macro expansion..
 *********************************************************/</span> 
&nbsp;
<span class="co2">#define A B</span>
<span class="co2">#define B A</span>
&nbsp;
<span class="co2">#define C D</span>
<span class="co2">#define D E</span>
<span class="co2">#define E C</span>
&nbsp;
main<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
<span class="kw4">int</span> B<span class="sy0">;</span>
<span class="kw4">int</span> C<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 *
 */</span></pre><div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s161' name='standard_s161'><div class='standard'><div>161&nbsp;S</div></div></a><div class='headline'>Declaration in for statement.</div></div><p>The scope of a variable declared in the first expression of a for loop is that of the for loop. It is not visible after the end of the for loop.  However, some compilers permit such variables to be used after the for loop, which can lead to confusion. Therefore, don't define variables in the for statement initialiser.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="coMULTI">/*********************************************************
 *  Standard 161 S : Declaration in for statement.
 *********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> STATIC_161<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    UINT_32 y <span class="sy0">=</span> 0U<span class="sy0">;</span>
&nbsp;
    <span class="kw1">for</span> <span class="br0">&#40;</span> <span class="kw4">unsigned</span> x<span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span> x <span class="sy0">&lt;</span> 3U<span class="sy0">;</span> x<span class="sy0">++</span> <span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span> 
    <span class="br0">&#123;</span>
        y<span class="sy0">++;</span>
    <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 *
 */</span></pre><div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s162' name='standard_s162'><div class='standard'><div>162&nbsp;S</div></div></a><div class='headline'>Method defined within class declaration.</div></div><p>Don't put member function definitions in the class declaration. Only member function declarations. An exception is for small member functions with an empty function body.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 162 S : Method defined within class declaration.
 ********************************************************/</span> 
&nbsp;
class one <span class="br0">&#123;</span>
&nbsp;
public<span class="sy0">:</span>
&nbsp;
   <span class="kw4">long</span> l<span class="sy0">;</span>
   one<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
   one<span class="br0">&#40;</span>UINT_32 i<span class="br0">&#41;</span><span class="br0">&#123;</span><span class="sy0">;</span><span class="br0">&#125;</span>
    ~one<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="br0">&#123;</span><span class="sy0">;</span><span class="br0">&#125;</span>
    <span class="kw4">void</span> bproc<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
one<span class="sy0">::</span><span class="me2">one</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    l<span class="sy0">=</span><span class="nu0">9</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> one<span class="sy0">::</span><span class="me2">bproc</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    l<span class="sy0">=</span><span class="nu0">7</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_5.2'>5.2</a>, <a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_7.3'>7.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s163' name='standard_s163'><div class='standard'><div>163&nbsp;S</div></div></a><div class='headline'>Function starts with upper case character.</div></div><p>Function names shall start with a lower-case letter (not including subsystem/package prefixes).</p>
<p>Class member functions are reported by 173 S.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/********************************************************
 * Standard 163 S : Function starts with upper case character.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> Static_163<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
&nbsp;
   <span class="coMULTI">/* ... */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_74'>74</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s164' name='standard_s164'><div class='standard'><div>164&nbsp;S</div></div></a><div class='headline'>Use of void * pointer.</div></div><p>The use of void declared pointers is not allowed. Exceptions can be made if no other solution is available and the reason is documented. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &lt;stdio.h&gt;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 164 S : Use of void * pointer.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> proc<span class="br0">&#40;</span><span class="kw4">void</span> <span class="sy0">*</span>ptr<span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="sy0">;</span> <span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">void</span> <span class="sy0">*</span> a_proc <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>            <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
    <span class="kw1">return</span> NULL<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_164 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw4">void</span> <span class="sy0">*</span> p <span class="sy0">=</span> a_proc<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>          <span class="coMULTI">/* not compliant */</span>
   proc<span class="br0">&#40;</span>p<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s165' name='standard_s165'><div class='standard'><div>165&nbsp;S</div></div></a><div class='headline'>Nested class declaration.</div></div><p>Use nested classes and local classes in functions with caution. The added complexity of scope rules and restrictions may be confusing, especially since there are differences in the scope rules used in C and C++. It can be of use in some circumstances though. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="coMULTI">/********************************************************
 * Standard 165 S : Nested class declaration.
 ********************************************************/</span> 
&nbsp;
class one <span class="br0">&#123;</span>
&nbsp;
public<span class="sy0">:</span>
    <span class="kw4">long</span> along<span class="sy0">;</span>
    class nested
    <span class="br0">&#123;</span>
    public<span class="sy0">:</span>
        <span class="kw4">short</span> s<span class="sy0">;</span>
        nested<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span><span class="sy0">;</span><span class="br0">&#125;</span>
    <span class="br0">&#125;</span><span class="sy0">;</span>
    one<span class="br0">&#40;</span><span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
        nested anest<span class="sy0">;</span>
    <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s166' name='standard_s166'><div class='standard'><div>166&nbsp;S</div></div></a><div class='headline'>Class declared in function body.</div></div><div class='title'>Example</div>
<pre class="code c++"><span class="coMULTI">/********************************************************
 * Standard 166 S : Class declared in function body.
 ********************************************************/</span> 
&nbsp;
class one <span class="br0">&#123;</span>
&nbsp;
public<span class="sy0">:</span>
    <span class="kw4">long</span> l<span class="sy0">;</span>
    one<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span><span class="sy0">;</span><span class="br0">&#125;</span>
    <span class="kw4">void</span> aproc<span class="br0">&#40;</span><span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
        class inproc1
        <span class="br0">&#123;</span>
            public<span class="sy0">:</span>
                <span class="kw4">short</span> s<span class="sy0">;</span>
                inproc1<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span><span class="sy0">;</span><span class="br0">&#125;</span>
        <span class="br0">&#125;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 *
 */</span></pre><div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='tbrun_requires_model.htm'>TBrun Requires</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s167' name='standard_s167'><div class='standard'><div>167&nbsp;S</div></div></a><div class='headline'>Class variable declared in class definition.</div></div><p>The declaration of structure/class variables shall be separate from the definition of the type. For clarity of compilation diagnostics, use typedef (rather than defines). </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="coMULTI">/********************************************************
 * Standard 167 S : Class variable declared in class definition.
 ********************************************************/</span> 
&nbsp;
class one <span class="br0">&#123;</span>
&nbsp;
public<span class="sy0">:</span>
    <span class="kw4">long</span> a<span class="sy0">;</span>
    one<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span><span class="sy0">;</span><span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#125;</span> aone<span class="sy0">,</span> <span class="sy0">*</span>paone<span class="sy0">;</span>
&nbsp;
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_141'>141</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_256'>256</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s168' name='standard_s168'><div class='standard'><div>168&nbsp;S</div></div></a><div class='headline'>Call by value parameter not const.</div></div><p>Non-pointer function parameters whose arguments are passed as call by value shall be declared constant. Pointer function parameters are covered by standard <a href='standards.htm#standard_s603'>603 S</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 168 S : Call by value parameter not const.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> aproc<span class="br0">&#40;</span> SINT_32 iv_param<span class="br0">&#41;</span> <span class="br0">&#123;</span><span class="sy0">;</span><span class="br0">&#125;</span>        <span class="coMULTI">/* not compliant */</span>
<span class="kw4">static</span> <span class="kw4">void</span> bproc<span class="br0">&#40;</span><span class="kw4">const</span> SINT_32 ic_param<span class="br0">&#41;</span> <span class="br0">&#123;</span><span class="sy0">;</span><span class="br0">&#125;</span>
&nbsp;
<span class="kw4">static</span> SINT_32 static_168 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  SINT_32 loc_var <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
  aproc<span class="br0">&#40;</span>loc_var<span class="br0">&#41;</span><span class="sy0">;</span>
  bproc<span class="br0">&#40;</span>loc_var<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_34'>34</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_8.4.11'>8.4.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_279'>279</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_1.8.b'>1.8.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s169' name='standard_s169'><div class='standard'><div>169&nbsp;S</div></div></a><div class='headline'>Use of forward reference of class member.</div></div><div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 169 S : Use of forward reference of class member.
 ********************************************************/</span> 
&nbsp;
class ok 
<span class="br0">&#123;</span> public<span class="sy0">:</span>
    INT_32 x<span class="sy0">;</span>
    ok<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> x <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class notok 
<span class="br0">&#123;</span> public<span class="sy0">:</span>
     notok<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> d <span class="sy0">=</span> <span class="nu0">91</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span> <span class="br0">&#125;</span>
     INT_32 d<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s170' name='standard_s170'><div class='standard'><div>170&nbsp;S</div></div></a><div class='headline'>Procedure call has no prototype and no defn.</div></div><p>A call has been found that is not preceded by either a prototype, or the definition of the function. In this case the compiler may make assumptions about the types. </p>
<p>A violation may also occur for functions where the include file containing the prototype has not been included in the analysis.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_170<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 170 S : Procedure call has no prototype and no defn.
 *******************************************************************/</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_170<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>  
  aproc<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span>   
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl07-c'>DCL07-C</a>, <a href='cert-c_model.htm#rule_cert-c_exp37-c'>EXP37-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_628'>628</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c++.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s172' name='standard_s172'><div class='standard'><div>172&nbsp;S</div></div></a><div class='headline'>Variable declared multiply.</div></div><p>Two declarations and\or definitions that occur with the same name at file scope in the same translation unit shall not both have the extern storage class or both have no storage class. The C/C++ rules on linkage are complicated and such code may lead to confusion.</p>
<p>It is recommended that the user declares an external identifier with the extern storage class in a header file and then provides a definition with no storage class in one source file.</p>
<p>This standard can be relaxed to allow duplicate names in C++ namespaces by setting the modifier <a href='standard_flags.htm#flag_297'>297</a> to 1 in the cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 172 S : Variable declared multiply.
 *******************************************************************/</span>
&nbsp;
UCHAR a<span class="sy0">;</span>
UCHAR a<span class="sy0">;</span>     <span class="coMULTI">/* not compliant */</span>
&nbsp;
UCHAR b<span class="sy0">;</span>
UCHAR b <span class="sy0">=</span> <span class="nu0">3</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw2">extern</span> UCHAR c<span class="sy0">;</span>
<span class="kw2">extern</span> UCHAR c<span class="sy0">;</span>     <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw2">extern</span> UCHAR ok<span class="sy0">;</span>  <span class="coMULTI">/* ideally in a header file */</span>
UCHAR ok <span class="sy0">=</span> 3U<span class="sy0">;</span>    <span class="coMULTI">/* compliant */</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_172<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
 <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_25'>25</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_252'>252</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_8.9'>8.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_25'>25</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_8.9'>8.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.5'>R.8.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m4.4.3'>M4.4.3</a>, <a href='sec-c_model.htm#rule_sec-c_m4.4.4'>M4.4.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s173' name='standard_s173'><div class='standard'><div>173&nbsp;S</div></div></a><div class='headline'>Class member starts with upper case character.</div></div><p>Class member function names shall start with a lower-case letter. (This standard does not apply to constructors, destructors or conversion functions.) </p>
<p>Non-member functions are reported by 163 S.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * Standard 173 S : Class member starts with upper case character.
 *****************************************************/</span> 
&nbsp;
class one <span class="br0">&#123;</span>public<span class="sy0">:</span>
    <span class="kw4">void</span> Upper2_out<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> one<span class="sy0">::</span><span class="me2">Upper2_out</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>INT_32 a <span class="sy0">=</span> <span class="nu0">13</span><span class="sy0">;</span><span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">int</span> main<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
  one x<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s174' name='standard_s174'><div class='standard'><div>174&nbsp;S</div></div></a><div class='headline'>Class member starts with lower case character.</div></div><p>Class member function names shall start with an upper-case letter. (This standard does not apply to constructors, destructors or conversion functions.) </p>
<p>Non-member functions are reported by 175 S. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * Standard 174 S : Class member starts with lower case character.
 *****************************************************/</span> 
&nbsp;
class one <span class="br0">&#123;</span>
  public<span class="sy0">:</span>
  INT_32 x<span class="sy0">;</span>
&nbsp;
  <span class="kw4">void</span> notokproc1 <span class="br0">&#40;</span><span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#123;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
INT_32 main<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s175' name='standard_s175'><div class='standard'><div>175&nbsp;S</div></div></a><div class='headline'>Function starts with lower case character.</div></div><p>Function names shall start with an upper-case letter (not including subsystem/package prefixes). </p>
<p>This rule does not apply main or to overloading the operators new, new[], delete and delete[]. Class member functions are reported by 174 S.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 175 S : Function starts with lower case character.
 *************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_175 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="br0">&#123;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">int32_t</span> main <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <span class="coMULTI">/* compliant */</span>
<span class="br0">&#123;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s176' name='standard_s176'><div class='standard'><div>176&nbsp;S</div></div></a><div class='headline'>Non standard escape sequence    in source.</div></div><div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/*****************************************************
 * Standard 176 S : Non standard escape sequence in source.
 *****************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_176 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
     <span class="kw4">char</span> c <span class="sy0">=</span> <span class="st0">'b'</span><span class="sy0">;</span>
&nbsp;
     <span class="kw1">switch</span><span class="br0">&#40;</span>c<span class="br0">&#41;</span>
     <span class="br0">&#123;</span>
     <span class="kw1">case</span> <span class="st0">'\m'</span><span class="sy0">:</span>  <span class="coMULTI">/* not compliant */</span>
          <span class="kw2">break</span><span class="sy0">;</span>
&nbsp;
     <span class="kw1">default</span><span class="sy0">:</span>
          <span class="kw2">break</span><span class="sy0">;</span>
     <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc10-c'>MSC10-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_176'>176</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_5'>5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.1.5'>3.1.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_6.4'>6.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_5'>5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_19'>19</a>, <a href='lmtcp_model.htm#rule_lmtcp_270'>270</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_4.1'>4.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-13-1'>2-13-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_5'>5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_4.1'>4.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.4.1'>R.4.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_p1.2.2'>P1.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s177' name='standard_s177'><div class='standard'><div>177&nbsp;S</div></div></a><div class='headline'>Identifier not declared on new line.</div></div><p>Each declaration of a variable or constant shall have a source line to itself. This LDRA penalty is not applicable to code substituted into the source through macro expansion, as these checks are based on the original code and do not extend to macro definitions.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * Standard 177 S : Identifier not declared on new line.
 *****************************************************/</span> 
&nbsp;
INT_32 okvar<span class="sy0">,</span> notok2<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">void</span> static_177<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  okvar <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
  notok2 <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl04-c'>DCL04-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_83'>83</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_8.4.2'>8.4.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_220'>220</a> = 1</td>    </tr>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_4'>4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_152'>152</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_220'>220</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_83'>83</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_220'>220</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s178' name='standard_s178'><div class='standard'><div>178&nbsp;S</div></div></a><div class='headline'>Declaration statement not on new line.</div></div><p>Each declaration of a variable or constant shall have a source line to itself, except for the declarations of procedure parameters.</p>
<p>This LDRA penalty is not applicable to code substituted into the source through macro expansion, as these checks are based on the original code and do not extend to macro definitions.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 178 S : Declaration does not start new line.
 ********************************************************/</span> 
&nbsp;
INT_32 <span class="sy0">*</span> oka<span class="sy0">;</span>
INT_32 b<span class="sy0">;</span>  INT_32 <span class="sy0">*</span>notoka<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">void</span> proc<span class="br0">&#40;</span> INT_32 <span class="sy0">*</span> s<span class="sy0">,</span> INT_32 <span class="sy0">*</span>ok<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* compliant */</span>
&nbsp;
<span class="kw4">struct</span> tag0 <span class="br0">&#123;</span> INT_32 <span class="sy0">*</span> w<span class="sy0">;</span> INT_32 <span class="sy0">*</span>notokq<span class="sy0">;</span><span class="br0">&#125;</span> astr<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_178<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
 oka <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_156'>156</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.3.6'>3.3.6</a>, <a href='fsb582-c_model.htm#rule_fsb582-c_3.7.6'>3.7.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_10.7'>10.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_8.4.2'>8.4.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_4'>4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_276'>276</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s179' name='standard_s179'><div class='standard'><div>179&nbsp;S</div></div></a><div class='headline'>Extern not at start of header file.</div></div><p>External variables shall be declared at the beginning of header files.</p>
<div class='title'>Example</div>
<p>Static_179.c</p>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &quot;Static_179.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 179 S : Extern not at start of header file.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_179<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 *
 */</span></pre><p>Static_179.h</p>
<pre class="code c">INT_32 var<span class="sy0">;</span>
&nbsp;
<span class="kw2">extern</span> INT_32 ex<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.16.15'>5.16.15</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s180' name='standard_s180'><div class='standard'><div>180&nbsp;S</div></div></a><div class='headline'>No space between * or &amp; and name in declaration.</div></div><p>If '*' or '&amp;' is used in a declaration, then a space should occur between the '*' or '&amp;' and the name.
It is important that only one variable/constant is declared on each line with this syntax style to avoid unintentional type declaration errors. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 180 S : No space between * or &amp; and name in declaration.
 ********************************************************/</span> 
&nbsp;
INT_32 <span class="sy0">*</span>notoka<span class="sy0">;</span>       <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">typedef</span> INT_32 <span class="sy0">*</span>ptr<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">void</span> static_180<span class="br0">&#40;</span>INT_32 <span class="sy0">*</span>p1<span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  <span class="sy0">*</span>notoka <span class="sy0">=</span> <span class="sy0">*</span>p1<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_3.1.e'>3.1.e</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s181' name='standard_s181'><div class='standard'><div>181&nbsp;S</div></div></a><div class='headline'>No space between if, while, for and expresn.</div></div><p>Control structure keywords (if, switch, while, for) should be followed by one space. Spaces are optional between the parenthesis and the expression. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 181 S : No space between if, while, for and expresn.
 ********************************************************/</span> 
&nbsp;
INT_32 main<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   INT_32 i<span class="sy0">=</span><span class="nu0">3</span><span class="sy0">;</span>
   <span class="kw1">if</span><span class="br0">&#40;</span> <span class="nu0">1</span><span class="sy0">==</span><span class="nu0">2</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span><span class="nu0">2</span><span class="sy0">;</span><span class="br0">&#125;</span>       <span class="coMULTI">/* not compliant */</span>
   <span class="kw1">switch</span><span class="br0">&#40;</span>i<span class="br0">&#41;</span><span class="br0">&#123;</span>            <span class="coMULTI">/* not compliant */</span>
   <span class="br0">&#125;</span>
   <span class="kw1">switch</span> <span class="br0">&#40;</span>i<span class="br0">&#41;</span><span class="br0">&#123;</span>
   <span class="br0">&#125;</span>
   <span class="kw1">while</span><span class="br0">&#40;</span>i<span class="sy0">==</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="br0">&#123;</span><span class="nu0">2</span><span class="sy0">;</span><span class="br0">&#125;</span>      <span class="coMULTI">/* not compliant */</span>  
   <span class="kw1">do</span><span class="br0">&#123;</span><span class="nu0">2</span><span class="sy0">;</span><span class="br0">&#125;</span><span class="kw1">while</span><span class="br0">&#40;</span>i<span class="sy0">==</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span>
   <span class="kw1">for</span><span class="br0">&#40;</span>i<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span>i<span class="sy0">&gt;</span><span class="nu0">2</span><span class="sy0">;</span>i<span class="sy0">++</span><span class="br0">&#41;</span><span class="br0">&#123;</span><span class="nu0">2</span><span class="sy0">;</span><span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_148'>148</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_10.12'>10.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_3.1.a'>3.1.a</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s182' name='standard_s182'><div class='standard'><div>182&nbsp;S</div></div></a><div class='headline'>No space after semi colon in for expression.</div></div><p>In order to aid readability, semi colons in a for statement should be followed by a space or a new-line.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**************************************************************
 * Standard 182 S : No space after semi colon in for expression.
 **************************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_182<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  INT_32 i<span class="sy0">;</span>
  <span class="kw1">for</span> <span class="br0">&#40;</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>i <span class="sy0">&lt;</span> <span class="nu0">5</span><span class="sy0">;</span>i<span class="sy0">++</span> <span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#123;</span>
      i<span class="sy0">++;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_151'>151</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_10.12'>10.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_3.1.l'>3.1.l</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s183' name='standard_s183'><div class='standard'><div>183&nbsp;S</div></div></a><div class='headline'>No newline after semi colon.</div></div><p>Placing declarations and statements on separate lines improves readability.  The use of semi colon as the declaration of a for loop is not included in this rule.</p>
<p>This standard is not applicable to code substituted into the source through macro expansion, as these checks are based on the original code and do not extend to macro definitions.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 183 S : No newline after semi colon.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_183<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  INT_32 i<span class="sy0">;</span> INT_32 j<span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span>
&nbsp;
  <span class="kw1">for</span> <span class="br0">&#40;</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> <span class="nu0">5</span><span class="sy0">;</span> i<span class="sy0">++</span> <span class="br0">&#41;</span>
  <span class="br0">&#123;</span> i<span class="sy0">++;</span><span class="br0">&#125;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.3.6'>3.3.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_10.7'>10.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_42'>42</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_65'>65</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_3.3.a'>3.3.a</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s184' name='standard_s184'><div class='standard'><div>184&nbsp;S</div></div></a><div class='headline'>Spaces round -&gt; or [] operators.</div></div><p>The -&gt; operator should not be written with surrounding spaces.  The left bracket of an array declaration or subscript ([]) should not be preceded by a space. The right bracket of an array subscript should not be followed by a space if it is followed by a (.</p>
<p>This standard can be relaxed to allow spaces around []  by setting the modifier <a href='standard_flags.htm#flag_240'>240</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 184 S : Spaces round -&gt; or [] operators.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">struct</span> tag <span class="br0">&#123;</span> INT_32 f<span class="sy0">;</span> <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> static_184<span class="br0">&#40;</span><span class="kw4">struct</span> tag <span class="sy0">*</span> astr<span class="sy0">,</span> 
                INT_32 b <span class="br0">&#91;</span><span class="br0">&#93;</span>     <span class="coMULTI">/* not compliant */</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  astr <span class="sy0">-&gt;</span>f <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.3.9'>3.3.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_240'>240</a> = 1</td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_10.13'>10.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_240'>240</a> = 1</td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_63'>63</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_240'>240</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_88'>88</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_3.1.g'>3.1.g</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s185' name='standard_s185'><div class='standard'><div>185&nbsp;S</div></div></a><div class='headline'>Space between unary operator and operand.</div></div><p>There should be no space between a unary operator and its operand. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**************************************************************
 * Standard 185 S : Space between unary operator and operator.
 *************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_185<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   INT_32 i<span class="sy0">=</span><span class="nu0">9</span><span class="sy0">;</span>
   INT_32 j<span class="sy0">=</span><span class="nu0">19</span><span class="sy0">;</span>
   INT_32 <span class="sy0">*</span> p<span class="sy0">;</span>
&nbsp;
   i <span class="sy0">=</span> <span class="sy0">-</span> j<span class="sy0">;</span>           <span class="coMULTI">/* not compliant */</span>
   p <span class="sy0">=</span> <span class="sy0">&amp;</span> j<span class="sy0">;</span>           <span class="coMULTI">/* not compliant */</span>
   <span class="sy0">*</span> p <span class="sy0">=</span> <span class="nu0">77</span><span class="sy0">;</span>          <span class="coMULTI">/* not compliant */</span>
   <span class="sy0">*</span>p <span class="sy0">=</span> <span class="sy0">*</span> p <span class="sy0">+</span> <span class="nu0">77</span><span class="sy0">;</span>     <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_153'>153</a>, <a href='eads-c_model.htm#rule_eads-c_154'>154</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.3.9'>3.3.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_10.13'>10.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_63'>63</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_88'>88</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_3.1.d'>3.1.d</a>, <a href='netrino_model.htm#rule_netrino_3.1.e'>3.1.e</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='standard_model.htm'>Standard</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s186' name='standard_s186'><div class='standard'><div>186&nbsp;S</div></div></a><div class='headline'>Space missing before or after binary operator.</div></div><p>Binary operators should always have spaces around them, since this aids readability. This standard also requires spaces around = in initialisations.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/******************************************************************
 *  Standard 186 S : Space missing before or after binary operator.
 *****************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_186<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   INT_32 i <span class="sy0">=</span> <span class="nu0">9</span><span class="sy0">;</span>
   INT_32 j <span class="sy0">=</span><span class="nu0">8</span><span class="sy0">;</span>         <span class="coMULTI">/* not compliant */</span>
   INT_32 k<span class="sy0">=</span> <span class="nu0">7</span><span class="sy0">;</span>         <span class="coMULTI">/* not compliant */</span>
   UINT_32 x <span class="sy0">=</span> 3u<span class="sy0">;</span>
   UINT_32 y <span class="sy0">=</span> 17u<span class="sy0">;</span>
&nbsp;
   i<span class="sy0">=</span> j<span class="sy0">;</span>          <span class="coMULTI">/* not compliant */</span>
   i <span class="sy0">=</span> j <span class="sy0">/</span>k<span class="sy0">;</span>      <span class="coMULTI">/* not compliant */</span>
   i <span class="sy0">=</span> j <span class="sy0">&lt;&lt;</span>k<span class="sy0">;</span>     <span class="coMULTI">/* not compliant */</span>
   i <span class="sy0">=</span> j <span class="sy0">&amp;&amp;</span> k<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_149'>149</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.3.9'>3.3.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_10.12'>10.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_3.1.b'>3.1.b</a>, <a href='netrino_model.htm#rule_netrino_3.1.c'>3.1.c</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s187' name='standard_s187'><div class='standard'><div>187&nbsp;S</div></div></a><div class='headline'>Tab character in source.</div></div><p>Spaces should be used for indentation rather than tab characters, as this makes the printout independent of tab length.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*********************************************
 *  Standard 187 S : Tab character in source.
 *********************************************/</span> 
&nbsp;
	INT_32 g<span class="sy0">;</span>
&nbsp;
	<span class="kw4">void</span> static_187<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
        <span class="br0">&#123;</span>
		g <span class="sy0">=</span> <span class="nu0">9</span><span class="sy0">;</span>
	<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_138'>138</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.1.5'>3.1.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_10.6'>10.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_14.2'>14.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_43'>43</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_66'>66</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_3.5.a'>3.5.a</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s188' name='standard_s188'><div class='standard'><div>188&nbsp;S</div></div></a><div class='headline'>{ or } not on line by itself.</div></div><p>To increase readability the bodies must have explicit braces (even if the body consists of only one line). This will also eliminate the &quot;dangling else&quot; problem. This LDRA penalty is not applicable to code substituted into the source through macro expansion, as these checks are based on the original code and do not extend to macro definitions. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 *  Standard 188 S : { or } not on line by itself.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">struct</span> tagnotok <span class="br0">&#123;</span> CHAR a<span class="sy0">;</span> <span class="br0">&#125;</span> data<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">struct</span>
<span class="br0">&#123;</span>
  CHAR x<span class="sy0">;</span>
<span class="br0">&#125;</span> moredata<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> proc_ok<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> static_188 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="br0">&#123;</span>   <span class="coMULTI">/* not compliant */</span>
   <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_142'>142</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.3.1'>3.3.1</a>, <a href='fsb582-c_model.htm#rule_fsb582-c_3.3.2'>3.3.2</a>, <a href='fsb582-c_model.htm#rule_fsb582-c_3.3.8'>3.3.8</a>, <a href='fsb582-c_model.htm#rule_fsb582-c_3.7.5'>3.7.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.18'>9.18</a>, <a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_10.1'>10.1</a>, <a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_10.3'>10.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_61'>61</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_86'>86</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_1.3.b'>1.3.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s189' name='standard_s189'><div class='standard'><div>189&nbsp;S</div></div></a><div class='headline'>Input line exceeds limit.</div></div><p>This limitation is imposed to help to ensure that source code, when displayed or printed out, remains legible. Longer lines must be broken down nicely. The maximum width of characters is configured in the c/cppvals.dat file against the entry marked as type 177 (MAXLIN). Instructions for making alterations can be found in the manual.</p>
<pre>177  120      Maximum source line length for standard 189 S. MAXLIN</pre><p>Alternatively, the limit may be specified in the c/cppreport.dat file against the penalty detail, in association with the chosen programming model:</p>
<pre>189 S C &quot;AV:vals 177 120&quot; &quot;EADS:M:vals 177 132&quot; &quot;UML&quot; &quot;LMTCP:C:vals 177 75&quot;</pre><div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 189 S : Input line exceeds limit.
 * 
 * Note: To see the message in this example,
 *       set the parameter to 80 in the vals.dat file
 ********************************************************/</span> 
&nbsp;
int_32 main<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  INT_32 iiiiiiiiiiiii <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
  iiiiiiiiiiiii <span class="sy0">=</span> iiiiiiiiiiiii <span class="sy0">+</span> iiiiiiiiiiiii <span class="sy0">+</span> iiiiiiiiiiiii <span class="sy0">+</span> iiiiiiiiiiiii <span class="sy0">+</span> iiiiiiiiiiiii<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_140'>140</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_177'>177</a> = 132</td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.1.6'>3.1.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_177'>177</a> = 120</td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_10.14'>10.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_177'>177</a> = 120</td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_41'>41</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_177'>177</a> = 120</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_64'>64</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_177'>177</a> = 75</td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_1.2.a'>1.2.a</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_177'>177</a> = 80</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s190' name='standard_s190'><div class='standard'><div>190&nbsp;S</div></div></a><div class='headline'>{ ... } contents not indented by *** spaces.</div></div><p>This LDRA penalty is not applicable to code substituted into the source through macro expansion, as these checks are based on the original code and do not extend to macro definitions. </p>
<p>The *** symbols refer to a user definable number for this standard, defaulting to 2. The configuration is made in the c/cpppen.dat file. Instructions for making alterations can be found in the manual.</p>
<p>This standard can be relaxed to allow indentation which is greater than the specified amount by setting the modifier <a href='standard_flags.htm#flag_324'>324</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 190 S : { ... } contents not indented by 2 spaces.
 *************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_190<span class="br0">&#40;</span> INT_32 <span class="sy0">*</span> g<span class="br0">&#41;</span><span class="br0">&#123;</span>
   <span class="sy0">*</span> g <span class="sy0">=</span> <span class="nu0">77</span><span class="sy0">;</span>       <span class="coMULTI">/* not compliant */</span>
   <span class="sy0">*</span>g <span class="sy0">=</span> <span class="sy0">*</span> g <span class="sy0">+</span> <span class="nu0">77</span><span class="sy0">;</span>  
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_139'>139</a>, <a href='eads-c_model.htm#rule_eads-c_144'>144</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_324'>324</a> = 1</td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.3.3'>3.3.3</a>, <a href='fsb582-c_model.htm#rule_fsb582-c_3.3.4'>3.3.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.18'>9.18</a>, <a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_10.1'>10.1</a>, <a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_10.3'>10.3</a>, <a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_10.4'>10.4</a>, <a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_10.5'>10.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_44'>44</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_324'>324</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_67'>67</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_324'>324</a> = 1</td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_3.4.a'>3.4.a</a>, <a href='netrino_model.htm#rule_netrino_3.4.b'>3.4.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s191' name='standard_s191'><div class='standard'><div>191&nbsp;S</div></div></a><div class='headline'>Space between function name and parenthesis.</div></div><p>A space has been detected between a function name and an opening round bracket in a function declaration or definition.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/********************************************************
 *  Standard 191 S : Space between function name and parenthesis.
 ********************************************************/</span> 
&nbsp;
&nbsp;
<span class="kw4">void</span> notokproc1 <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_152'>152</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s192' name='standard_s192'><div class='standard'><div>192&nbsp;S</div></div></a><div class='headline'>Static not on separate line in function defn.</div></div><p>Due to improved readability it is recommended that inline, static and a trailing const for the function definition appears on a line on their own. Function arguments can be declared on a single line if enough space is available, otherwise one argument per line. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/********************************************************
 *  Standard 192 S : Static not on separate line in function defn.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> proc1<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
 <span class="br0">&#123;</span>
   <span class="sy0">;</span> <span class="coMULTI">/* .... */</span>
 <span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s193' name='standard_s193'><div class='standard'><div>193&nbsp;S</div></div></a><div class='headline'>Inline not on separate line in function defn.</div></div><div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 *  Standard 193 S : Inline not on separate line in function defn.
 ********************************************************/</span> 
&nbsp;
class one <span class="br0">&#123;</span>public<span class="sy0">:</span>
  INT_32 x<span class="sy0">;</span>
  <span class="kw4">void</span> mem1<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="kw4">const</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw2">inline</span> <span class="kw4">void</span> one<span class="sy0">::</span><span class="me2">mem1</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
<span class="kw4">const</span>
<span class="br0">&#123;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s194' name='standard_s194'><div class='standard'><div>194&nbsp;S</div></div></a><div class='headline'>Const not on separate line in member defn.</div></div><p>For ease of readability and maintainability, a const qualifier for a member definition shall be placed on a separate line to that of the member identifier. The const-ness of a member is much easier to pick out when formatted in this way.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 *  Standard 194 S : Const not on separate line in member defn.
 ********************************************************/</span> 
&nbsp;
&nbsp;
class one <span class="br0">&#123;</span>public<span class="sy0">:</span>
  INT_32 x<span class="sy0">;</span>
  <span class="kw4">void</span> mem2<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
  <span class="kw4">const</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw2">inline</span>
<span class="kw4">void</span> one<span class="sy0">::</span><span class="me2">mem2</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <span class="kw4">const</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s195' name='standard_s195'><div class='standard'><div>195&nbsp;S</div></div></a><div class='headline'>Function return type needs a new line.</div></div><p>For ease of readability and maintainability, a function return type shall be placed on a separate line to that of the function identifer. Function names and their return types are much easier to pick out when formatted in this way. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/**************************************************************
 *  Standard 195 S : Function return type needs a new line.
 **************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> proc2<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_4'>4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s196' name='standard_s196'><div class='standard'><div>196&nbsp;S</div></div></a><div class='headline'>Access specifier missing (added by Testbed).</div></div><p>The order of protection sections in a class declaration shall be:</p>
<ul>
<li style='margin-left : 0px;'>

 Public 
</li>
<li style='margin-left : 0px;'>

 Protected
</li>
<li style='margin-left : 0px;'>

 Private
</li>
</ul>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/****************************************************************
 *  Standard 196 S : Access specifier missing (added by Testbed).
 ****************************************************************/</span> 
&nbsp;
class notok1 
<span class="br0">&#123;</span>
  INT_32 d<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_82'>82</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s197' name='standard_s197'><div class='standard'><div>197&nbsp;S</div></div></a><div class='headline'>Access specifiers in invalid order.</div></div><p>Access specifiers in a class shall be ordered by decreasing scope of audience. Public is first and at the top of the class declaration, followed by Protected, and lastly Private - which is only of concern to the implementers of the class. </p>
<p>This standard can be relaxed to allow for classes with no protected section by setting the modifier <a href='standard_flags.htm#flag_210'>210</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**************************************************************
 *  Standard 197 S : Access specifiers in invalid order.
 **************************************************************/</span> 
&nbsp;
class class_197<span class="br0">&#123;</span>
   public<span class="sy0">:</span>
   INT_16 d<span class="sy0">;</span>
   private<span class="sy0">:</span>   <span class="coMULTI">/* not compliant */</span>
   INT_32 a<span class="sy0">;</span>
   protected<span class="sy0">:</span> <span class="coMULTI">/* not compliant */</span>
   INT_32 q<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_2'>2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_210'>210</a> = 1</td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_4.1'>4.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_210'>210</a> = 1</td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.1.1'>3.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_210'>210</a> = 1</td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_57'>57</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_210'>210</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_82'>82</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_210'>210</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s198' name='standard_s198'><div class='standard'><div>198&nbsp;S</div></div></a><div class='headline'>Use of privacy statement in struct.</div></div><p>Structs are to be used as in C. Class-like facilities such as access specifiers shall not be utilised. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="coMULTI">/**************************************************************
 *  Standard 198 S : Use of privacy statement in struct.
 **************************************************************/</span> 
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">int</span> INT<span class="sy0">;</span>
<span class="kw4">typedef</span> <span class="kw4">short</span> S<span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">struct</span> tag <span class="br0">&#123;</span>
  INT l<span class="sy0">;</span>
  private<span class="sy0">:</span>
  S b<span class="sy0">;</span>
<span class="br0">&#125;</span> okstr<span class="sy0">;</span>
&nbsp;
INT main<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_54'>54</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_15.2'>15.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_97'>97</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s199' name='standard_s199'><div class='standard'><div>199&nbsp;S</div></div></a><div class='headline'>Use of anonymous namespace.</div></div><p>Unnamed, or anonymous, namespaces shall not be used. An anonymous namespace is a facility for establishing identifiers as global but within the scope of a single file. It is preferred that each non-local identifier be qualified using a 'tagged' namespace.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 199 S : Use of an anonymous namespace.
 ********************************************************/</span>
&nbsp;
namespace
<span class="br0">&#123;</span> <span class="coMULTI">/* not compliant */</span>
  SINT_16 index <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
namespace NS
<span class="br0">&#123;</span>
  SINT_32 index <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
  SINT_32 some_ref <span class="sy0">=</span> <span class="nu0">99</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
SINT_32 static_199<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  SINT_32 sum <span class="sy0">=</span> index <span class="sy0">+</span>         <span class="co1">// could be confused with NS::index</span>
                NS<span class="sy0">::</span><span class="me2">some_ref</span><span class="sy0">;</span>
  <span class="kw1">return</span> sum<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 *
 */</span></pre><div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s200' name='standard_s200'><div class='standard'><div>200&nbsp;S</div></div></a><div class='headline'>Define used for numeric constant.</div></div><p>#define should not be used to define numeric constants. It is preferable to use const variables or enumeration constants, since these can support name scopes and type checking.
It should be noted that in C, as opposed to C++, that it is not always possible to replace a #define with a const declaration. For example, a const variable cannot be use to declare the size of an array.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="co2">#define ACONSTAT 100       /* not compliant */</span>
&nbsp;
<span class="kw4">const</span> INT_16 BCONSTAT <span class="nu0">100</span><span class="sy0">;</span> <span class="coMULTI">/* preferred definition */</span>
<span class="coMULTI">/********************************************************
 * Standard 200 S : Define used for numeric constant.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_200 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   INT_16 ss<span class="sy0">;</span>
   ss <span class="sy0">=</span> ACONSTAT<span class="sy0">;</span>
   ss <span class="sy0">=</span> BCONSTAT<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2002 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl00-c'>DCL00-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_80'>80</a>, <a href='eads-c_model.htm#rule_eads-c_88'>88</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_51'>51</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_14.17'>14.17</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_30'>30</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_36'>36</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_1.8.b'>1.8.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s201' name='standard_s201'><div class='standard'><div>201&nbsp;S</div></div></a><div class='headline'>Use of numeric literal in expression.</div></div><p>The use of numeric literals, i.e. magic numbers, is generally accepted as undesirable due to the impact on maintainability. A typical example of a magic number would be a value used to limit the number of iterations for a fixed loop. Symbolic names in the form of const variables, or possibly enum constants, will be used instead, and ideally, placed in header files.  </p>
<p>This standard also extends to numeric literals substituted via macros. It is acknowledged that macros might have to be used - particularly with the C language, where the usage of const is more limited than C++. However, the const type qualifier is demanded for complex data types (structures, arrays etc) and is also easier to modify with a debugger. The standard can be relaxed to allow numeric literals substituted via macros by setting the modifier <a href='standard_flags.htm#flag_163'>163</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.  By default, the standard is configured to allow numeric literals substituted via macros.</p>
<p>It is also recognised that 0 and 1, in many cases, are not regarded as magic numbers, being literals with intuitive meaning, and so may be excluded from the rule check. This may be done by setting the modifier <a href='standard_flags.htm#flag_217'>217</a> to 1 in the c/cppreport.dat file. Alternatively, all numbers in a specified range can be allowed by configuring the corresponding parametrised value in the c/cppreport.dat file. For example:</p>
<pre> 201 S C  CWE:128  will not produce a warning for literals in the range -128 to 128 (for the CWE model)</pre><p>This standard permits the use of numeric literals when a variable is initialised at the same point as its declaration. It can also be relaxed to allow the assignments of numeric literals to array elements in constructors by configuring the modifier <a href='standard_flags.htm#flag_237'>237</a> in the c/cppreport.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="co2">#define ACONSTANT 101</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 201 S : Use of numeric literal in expression.
 ********************************************************/</span>
&nbsp;
SINT_32 static_201<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw4">const</span> SINT_16 max <span class="sy0">=</span> <span class="nu0">17</span><span class="sy0">;</span> <span class="coMULTI">/* compliant */</span>
   SINT_16 y <span class="sy0">=</span> <span class="nu0">77</span><span class="sy0">;</span>         <span class="coMULTI">/* compliant */</span>
   SINT_16 z<span class="sy0">;</span>              <span class="coMULTI">/* compliant */</span>
&nbsp;
   z <span class="sy0">=</span> <span class="nu0">131</span><span class="sy0">;</span>        <span class="coMULTI">/* not compliant */</span>
   z <span class="sy0">=</span> ACONSTANT<span class="sy0">;</span>  <span class="coMULTI">/* compliant but can be prohibited with modifier 163 */</span>
&nbsp;
   z <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant but permitted with modifier 217 */</span>
   z <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant but permitted with modifier 217 */</span>
   z <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
   <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant but permitted with modifier 217 */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl06-c'>DCL06-C</a>, <a href='cert-c_model.htm#rule_cert-c_exp07-c'>EXP07-C</a>, <a href='cert-c_model.htm#rule_cert-c_exp09-c'>EXP09-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_547'>547</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_217'>217</a> = 1</td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_80'>80</a>, <a href='eads-c_model.htm#rule_eads-c_87'>87</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_1.3'>1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_217'>217</a> = 1</td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.1'>10.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_217'>217</a> = 1</td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_151'>151</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_217'>217</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_272'>272</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_217'>217</a> = 1</td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_8.4.a'>8.4.a</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.10.1'>M1.10.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s202' name='standard_s202'><div class='standard'><div>202&nbsp;S</div></div></a><div class='headline'>Class data is not explicitly private.</div></div><p>Avoid public or protected data in a class. Use access functions to provide access to data in a class. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="coMULTI">/********************************************************
 * Standard 202 S : Class data is not private.
 ********************************************************/</span> 
&nbsp;
class one <span class="br0">&#123;</span>
  public<span class="sy0">:</span>
   one<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span><span class="sy0">;</span><span class="br0">&#125;</span>
   <span class="kw4">long</span> along<span class="sy0">;</span>        <span class="coMULTI">/* not compliant */</span>
  protected<span class="sy0">:</span>
   <span class="kw4">short</span> asort<span class="sy0">;</span>       <span class="coMULTI">/* not compliant */</span>
  private<span class="sy0">:</span>
   <span class="kw4">unsigned</span> unsign<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2002 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_18'>18</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_4.3'>4.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.4.1'>3.4.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_67'>67</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_100'>100</a>, <a href='lmtcp_model.htm#rule_lmtcp_153'>153</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_11-0-1'>11-0-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s203' name='standard_s203'><div class='standard'><div>203&nbsp;S</div></div></a><div class='headline'>Cast on a constant value.</div></div><p>The const qualification of an object or data member is an indication by the programmer that the object is not expected to be changed. In addition, the behaviour is undefined if an object with a const-qualified type is modified via another object with a non-const-qualified type.</p>
<p>Some authorities believe that all casts that remove const should be flagged. Other authorities only require that the casts that might lead to undefined behaviour are flagged. These occur when the cast removes the const qualification on a pointer to const type. This standard can be  restricted to check only pointer types by setting the modifier <a href='standard_flags.htm#flag_390'>390</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 203 S : Cast on a constant value.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">const</span> INT_16 con <span class="sy0">=</span> <span class="nu0">19</span><span class="sy0">;</span>
<span class="kw4">const</span> INT_16 <span class="sy0">*</span> pcon<span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_203<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   INT_16 x<span class="sy0">;</span>
   INT_16 <span class="sy0">*</span>p<span class="sy0">;</span>
   x <span class="sy0">=</span> <span class="br0">&#40;</span>INT_16<span class="br0">&#41;</span>con<span class="sy0">;</span>      <span class="coMULTI">/* not compliant if modifier = 0 */</span>
   p <span class="sy0">=</span> <span class="br0">&#40;</span>INT_16 <span class="sy0">*</span><span class="br0">&#41;</span>pcon<span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2002 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp05-c'>EXP05-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_704'>704</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_1.11'>1.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_7.4'>7.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_328'>328</a>, <a href='lmtcp_model.htm#rule_lmtcp_335'>335</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_11.5'>11.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_390'>390</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-2-5'>5-2-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_390'>390</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_11.5'>11.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_390'>390</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.11.8'>R.11.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_390'>390</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.7.2'>R2.7.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_390'>390</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s204' name='standard_s204'><div class='standard'><div>204&nbsp;S</div></div></a><div class='headline'>continue or goto not defined to rubbish.</div></div><p>The reserved words goto and continue shall be redefined in the standard project/product header file to produce a compilation error.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#define goto  some_total_rubbish ----------</span>
&nbsp;
<span class="coMULTI">/* continue not in # define - not compliant */</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 204 S : continue or goto not defined to rubbish.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_204 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span> 
  <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2002 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s205' name='standard_s205'><div class='standard'><div>205&nbsp;S</div></div></a><div class='headline'>Use of multiple inheritance.</div></div><p>Avoid the use of complex inheritance structures. Derived classes that inherit from more than one base class, whether through mulitple inheritance or a multi-layered structure, generally do not justify the added complexity. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/************************************************
 * Standard 205 S : Use of multiple inheritance.
 ************************************************/</span>
&nbsp;
class basic
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    INT_32 anint<span class="sy0">;</span>
    basic<span class="br0">&#40;</span><span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
      anint <span class="sy0">=</span> <span class="nu0">7</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class basic1 <span class="sy0">:</span> public basic <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    INT_32 anint1<span class="sy0">;</span>
    basic1<span class="br0">&#40;</span><span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
      anint1 <span class="sy0">=</span> <span class="nu0">7</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class two <span class="sy0">:</span> public basic1  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    INT_32 extra<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> INT_32 static_205 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   two atwo<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_60'>60</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_4.5'>4.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='standard_model.htm'>Standard</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s206' name='standard_s206'><div class='standard'><div>206&nbsp;S</div></div></a><div class='headline'>Class initialiser out of order.</div></div><p>Data members in the initialisation list should be written in the order in which they are declared in the class. Otherwise, unexpected behaviour can occur since data members are initialised in the order in which they are declared, not the order in which they appear in the initialisation list.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 206 S : Class initialiser out of order.
 ********************************************************/</span> 
&nbsp;
class one <span class="br0">&#123;</span>
 public<span class="sy0">:</span>
   one<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">:</span>  twoint<span class="br0">&#40;</span><span class="nu0">7</span><span class="br0">&#41;</span><span class="sy0">,</span>  <span class="coMULTI">/* not compliant */</span>
           oneint<span class="br0">&#40;</span><span class="nu0">9</span><span class="br0">&#41;</span>   <span class="coMULTI">/* not compliant */</span>
   <span class="br0">&#123;</span>
   <span class="br0">&#125;</span>
   INT_32 oneint<span class="sy0">;</span>
   INT_32 twoint<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2002 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_9'>9</a>, <a href='eads-cpp_model.htm#rule_eads-c%2B%2B_10'>10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_7.2'>7.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.2.2'>3.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_75'>75</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_116'>116</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s207' name='standard_s207'><div class='standard'><div>207&nbsp;S</div></div></a><div class='headline'>Use of old style /* comments in C++.</div></div><p>C++ comments shall be used in preference to C style comments. Single line comments are clearer and without the risks associated with nesting of comments. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="co1">// *****************************************************</span>
<span class="co1">// Standard 207 S : Use of old style /* comments in C++.</span>
<span class="co1">// *****************************************************</span>
&nbsp;
<span class="kw4">void</span> static_207 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* not compliant -  Old style C comment at head of procedure */</span> 
&nbsp;
  UINT_32 local<span class="sy0">;</span>
&nbsp;
  <span class="co1">// Rest of procedure</span>
  <span class="co1">// ... </span>
<span class="br0">&#125;</span>
&nbsp;
<span class="co1">//</span>
<span class="co1">//</span>
<span class="co1">// Copyright (c) 2007 Liverpool Data Research Associates</span>
<span class="co1">//</span>
<span class="co1">//</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_46'>46</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_14.1'>14.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_126'>126</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_237'>237</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s208' name='standard_s208'><div class='standard'><div>208&nbsp;S</div></div></a><div class='headline'>Private data name needs trailing underscore.</div></div><p>In order to clearly distinguish between private data members and other identifiers, the use of a trailing underscore shall be used in the name.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/***************************************************************
 * Standard 208 S : Private data name needs trailing underscore.
 ***************************************************************/</span>
&nbsp;
class MyClass
<span class="br0">&#123;</span>
  private<span class="sy0">:</span>
    UINT_32 m_ok_item_<span class="sy0">;</span>
    UINT_32 m_not_ok_item<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span> 
  protected<span class="sy0">:</span>
  public<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_208 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s209' name='standard_s209'><div class='standard'><div>209&nbsp;S</div></div></a><div class='headline'>Preprocessor command indented.</div></div><p>All preprocessor directives shall begin in column 1 by convention. A consistent layout promotes readability. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/*******************************************************************
 * Standard 209 S : Preprocessor command indented.
 *******************************************************************/</span>
&nbsp;
<span class="co2">#ifndef  XXX</span>
   <span class="coMULTI">/* not compliant */</span>
  <span class="co2">#define XXX</span>
<span class="co2">#endif</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_209<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_14.3'>14.3</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_14.4'>14.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_94'>94</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_3.2.d'>3.2.d</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s210' name='standard_s210'><div class='standard'><div>210&nbsp;S</div></div></a><div class='headline'>Macro name is not upper case.</div></div><p>All macro names shall be in upper case by convention. By using all upper case, macros are easily distinguishable from other identifiers. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="co2">#define my_sq_macro(X) ((X) * (X)) /* not compliant */</span>
&nbsp;
<span class="coMULTI">/*************************************************
 * Standard 210 S : Macro name is not upper case.
 *************************************************/</span>
&nbsp;
UINT_32 static_210<span class="br0">&#40;</span>UINT_32 p1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">return</span> my_sq_macro<span class="br0">&#40;</span>p1<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_61'>61</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.2.4'>3.2.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_6.1.f'>6.1.f</a>, <a href='netrino_model.htm#rule_netrino_7.1.f'>7.1.f</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s211' name='standard_s211'><div class='standard'><div>211&nbsp;S</div></div></a><div class='headline'>Overloaded &amp;&amp;, || or comma.</div></div><p>Never overload the operators &amp;&amp;, || and ,(comma operator). Their original behaviour can not be mimicked when overloading them.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*************************************************
 * Standard 211 S : Overloaded &amp;&amp; , || or comma.
 *************************************************/</span>
&nbsp;
class one
<span class="br0">&#123;</span> public<span class="sy0">:</span>
    INT_64 along<span class="sy0">;</span>
    one<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span><span class="sy0">;</span><span class="br0">&#125;</span>
&nbsp;
    INT_32 operator <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span>one <span class="sy0">&amp;</span> x<span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="kw1">return</span> <span class="nu0">1</span><span class="sy0">;</span> <span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
    INT_32 operator <span class="sy0">||</span> <span class="br0">&#40;</span>one <span class="sy0">&amp;</span> x<span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="kw1">return</span> <span class="nu0">1</span><span class="sy0">;</span> <span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
    INT_32 operator <span class="sy0">,</span>  <span class="br0">&#40;</span>one <span class="sy0">&amp;</span> x<span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="kw1">return</span> <span class="nu0">1</span><span class="sy0">;</span> <span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2002 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_21'>21</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_8.1'>8.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.5.1'>3.5.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_159'>159</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_288'>288</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-2-11'>5-2-11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s212' name='standard_s212'><div class='standard'><div>212&nbsp;S</div></div></a><div class='headline'>Use of friend function in class.</div></div><p>Use friends sparingly; a redesign of a class hierarchy and interface can be more appropriate. Friends of a class should be used to provide functions that are best kept outside of the class. If friends are used, assign friendship to specific functions and avoid assigning to a complete class if possible.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 212 S: Use of friend function in class.
 ********************************************************/</span>
&nbsp;
<span class="kw4">void</span> proc<span class="br0">&#40;</span>INT_32 i<span class="br0">&#41;</span><span class="br0">&#123;</span><span class="sy0">;</span><span class="br0">&#125;</span>
&nbsp;
class one
<span class="br0">&#123;</span> public<span class="sy0">:</span>
    friend <span class="kw4">void</span> proc<span class="br0">&#40;</span>INT_32 i<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2002 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_20'>20</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.4.4'>3.4.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s213' name='standard_s213'><div class='standard'><div>213&nbsp;S</div></div></a><div class='headline'>Use of friend class.</div></div><p>Use friends sparingly; a redesign of a class hierarchy and interface can be more appropriate. Friends of a class should be used to provide functions that are best kept outside of the class. If friends are used, assign friendship to specific functions and avoid assigning to a complete class if possible.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/******************************************
 * Standard 213 S : Use of friend class.
 ******************************************/</span>
&nbsp;
class two
<span class="br0">&#123;</span> public<span class="sy0">:</span>
   INT_16 ashort<span class="sy0">;</span>
   two<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span><span class="sy0">;</span><span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class one
<span class="br0">&#123;</span> public<span class="sy0">:</span>
    friend class two<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2002 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_20'>20</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_4.4'>4.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.4.4'>3.4.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='tbrun_requires_model.htm'>TBrun Requires</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s214' name='standard_s214'><div class='standard'><div>214&nbsp;S</div></div></a><div class='headline'>Member not declared virtual.</div></div><p>Use the keyword virtual for all definitions in derived classes of a function that is defined as virtual in a base class, even though this is optional.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="coMULTI">/*************************************************
 * Standard 214 S : Member not declared virtual.
 *************************************************/</span>
&nbsp;
class one
<span class="br0">&#123;</span> public<span class="sy0">:</span>
    one<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span><span class="sy0">;</span><span class="br0">&#125;</span>
    virtual <span class="kw4">void</span> proc<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class two<span class="sy0">:</span> one
<span class="br0">&#123;</span> public<span class="sy0">:</span>
   two<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span><span class="sy0">;</span><span class="br0">&#125;</span>
   virtual <span class="kw4">void</span> proc<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* compliant */</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class thr<span class="sy0">:</span> one
<span class="br0">&#123;</span> public<span class="sy0">:</span>
   thr<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span><span class="sy0">;</span><span class="br0">&#125;</span>
   <span class="kw4">void</span> proc<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2002 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_15'>15</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_6.4'>6.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.3.16'>3.3.16</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_10-3-2'>10-3-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s215' name='standard_s215'><div class='standard'><div>215&nbsp;S</div></div></a><div class='headline'>Struct or class called by value.</div></div><p>Avoid declaring functions that create big temporary objects for return values and parameters, such as structures, unions, or classes passed by value.</p>
<p>This standard can be further restricted to check for functions with constant struct or class parameters by setting the modifier <a href='standard_flags.htm#flag_328'>328</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 215 S : Struct or class called by value.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">struct</span> tag <span class="br0">&#123;</span> INT_32 s<span class="sy0">;</span><span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_215<span class="br0">&#40;</span> <span class="kw4">struct</span> tag str <span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span>   
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2002 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_11.4'>11.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_328'>328</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_212'>212</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_e1.1.3'>E1.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s216' name='standard_s216'><div class='standard'><div>216&nbsp;S</div></div></a><div class='headline'>Pointer name does not have required suffix.</div></div><p>The names of pointer objects shall end in the same suffix.  The suffix can be specified by the user in the c/cpptbend.dat file. By default the suffix is set to ptr. Instructions for making alterations can be found in the manual.</p>
<pre>ptr                               20 character suffix for pointers</pre><div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 216 S : Pointer name does not have required suffix.
 * uses default setting of &quot;ptr&quot; in ctbend.dat
 *************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_216<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UCHAR <span class="sy0">*</span> pointer<span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span>
  UCHAR <span class="sy0">*</span> ptr<span class="sy0">;</span>        <span class="coMULTI">/* ok as allowed suffix is ptr */</span>
  UCHAR <span class="sy0">*</span> aptr<span class="sy0">;</span>       <span class="coMULTI">/* ok as allowed suffix is ptr */</span>
&nbsp;
  <span class="coMULTI">/***/</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2002 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_72'>72</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s217' name='standard_s217'><div class='standard'><div>217&nbsp;S</div></div></a><div class='headline'>Names only differ by case.</div></div><p>Don't use names where the only difference is the case in a single scope; i.e. don't use foobar and fooBar in any part of the code where both are accessible.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 217 S : Names only differ by case.
 ********************************************************/</span> 
&nbsp;
INT_32 Foobar<span class="sy0">;</span>
INT_32 foobar<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
INT_32 fOobar<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">void</span> aproc<span class="br0">&#40;</span>CHAR aC2<span class="sy0">;</span> INT_32 FooBar<span class="br0">&#41;</span> <span class="br0">&#123;</span><span class="sy0">;</span><span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">void</span> static_217 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">struct</span> tag<span class="br0">&#123;</span> CHAR aC1<span class="sy0">,</span> INT_32 FooBar<span class="sy0">;</span><span class="br0">&#125;</span> local<span class="sy0">;</span> <span class="coMULTI">/* Ok as different scope */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2002 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_52'>52</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.2.8'>3.2.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_8.3.4'>8.3.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_48'>48</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_71'>71</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-1'>2-10-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_d.4.5'>D.4.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s218' name='standard_s218'><div class='standard'><div>218&nbsp;S</div></div></a><div class='headline'>Name is used in standard libraries.</div></div><p>Functions should not be declared if they are present in the standard libraries. This may lead to unexpected behaviour.</p>
<p>The list of standard library functions can be found in the data file c/cpptbend.dat, in the section starting with the line:</p>
<pre>A list of typed library procedures</pre><div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 218 S : Name is used in standard libraries.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> strstr<span class="br0">&#40;</span>INT_32 x<span class="br0">&#41;</span><span class="br0">&#123;</span><span class="sy0">;</span><span class="br0">&#125;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="kw4">void</span> strcmp<span class="br0">&#40;</span>INT_32 x<span class="br0">&#41;</span><span class="br0">&#123;</span><span class="sy0">;</span><span class="br0">&#125;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_218 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    strstr<span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span><span class="sy0">;</span>
    strcmp<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2002 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_err31-c'>ERR31-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_49'>49</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_115'>115</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_93'>93</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_20.2'>20.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_17-0-2'>17-0-2</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_17-0-3'>17-0-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_115'>115</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_20.2'>20.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.21.2'>R.21.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_6.1.b'>6.1.b</a>, <a href='netrino_model.htm#rule_netrino_7.1.b'>7.1.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.2'>M1.7.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s219' name='standard_s219'><div class='standard'><div>219&nbsp;S</div></div></a><div class='headline'>User name starts with underscore.</div></div><p>Names with leading underscore shall not be defined by any programmer, since they are reserved for the compiler.</p>
<p>This standard can be further restricted to prohibit the use of the #undef operator on names with a leading underscore by setting the modifier <a href='standard_flags.htm#flag_412'>412</a> to 1 in the c/cppvals.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. Using the modifier will also highlight the use of #undef on C reserved words such as __LINE__ as this may indicate that the user plans to re-use the name.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 219 S : User name starts with underscore.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">int</span> _INT_NOK<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_219 <span class="br0">&#40;</span> <span class="kw4">void</span>  <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  INT_32 _ohno<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2002 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_48'>48</a>, <a href='eads-c_model.htm#rule_eads-c_59'>59</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.2.9'>3.2.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_12.1'>12.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_47'>47</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_70'>70</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_20.1'>20.1</a>, <a href='misra-ac_model.htm#rule_misra-ac_20.2'>20.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_412'>412</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_20.1'>20.1</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_20.2'>20.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_412'>412</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.21.1'>R.21.1</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.21.2'>R.21.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_412'>412</a> = 1</td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_6.1.c'>6.1.c</a>, <a href='netrino_model.htm#rule_netrino_7.1.c'>7.1.c</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.3'>M1.7.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s220' name='standard_s220'><div class='standard'><div>220&nbsp;S</div></div></a><div class='headline'>No prefix for global type.</div></div><p>Prefix the name of globally visible types (i.e. classes, enum types, typedefs, unions, classes structs etc.). The prefix, which can be up to 6 characters, is specified as type 179 in the c/cppvals.dat file. Instructions for making alterations can be found in the manual. By default, the prefix is set to PREFIX.</p>
<pre>179     PREFIX              6 chars for global type prefix.</pre><div class='title'>Example</div>
<pre class="code c++">&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 220 S : No prefix for global type.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">int</span> NOTOK_INT<span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">int</span> PREFIX_int<span class="sy0">;</span>  <span class="coMULTI">/* compliant */</span>
&nbsp;
class PREFIX_class       <span class="coMULTI">/* compliant */</span>
<span class="br0">&#123;</span> private<span class="sy0">:</span>
    PREFIX_int anint<span class="sy0">;</span>
    PREFIX_class<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span><span class="sy0">;</span><span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class NOTOK_class       <span class="coMULTI">/* not compliant */</span>
 <span class="br0">&#123;</span> public<span class="sy0">:</span> 
    NOTOK_INT another<span class="sy0">;</span>
    NOTOK_class<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span><span class="sy0">;</span><span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
PREFIX_int main<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw4">typedef</span> <span class="kw4">long</span> okok<span class="sy0">;</span>     <span class="coMULTI">/* compliant as local typedef */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2002 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s221' name='standard_s221'><div class='standard'><div>221&nbsp;S</div></div></a><div class='headline'>Start of class/struct/union/enum lower case.</div></div><p>Structures and unions shall be given names that start with an upper-case letter. </p>
<p>This standard can be extended to cover enumerated and class types by setting the modifier <a href='standard_flags.htm#flag_204'>204</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">struct</span> lower  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  CHAR c<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">struct</span> Upper
<span class="br0">&#123;</span>
 CHAR c<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">union</span> lowerun <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
 CHAR   cu<span class="sy0">;</span>
 INT_16 iu<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">struct</span> Upper lowstrtype<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 221 S : Start of struct/union is lower case.
 ********************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_221 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">struct</span> lower s<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2002 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_66'>66</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_50'>50</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_204'>204</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_73'>73</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s222' name='standard_s222'><div class='standard'><div>222&nbsp;S</div></div></a><div class='headline'>Start of variable is upper case.</div></div><p>Variable names shall start with a lower-case letter (not including subsystems/package prefixes). </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">int</span> INT<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 222 S : Start of variable is upper case.
 ********************************************************/</span> 
&nbsp;
INT ok<span class="sy0">;</span>
INT ok1<span class="sy0">,</span>Notok1<span class="sy0">;</span>
INT Ok2<span class="sy0">;</span>
&nbsp;
INT main<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
  INT NOTOK3<span class="sy0">,</span>ok3<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2002 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_70'>70</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s223' name='standard_s223'><div class='standard'><div>223&nbsp;S</div></div></a><div class='headline'>No prefix for global function.</div></div><p>Globally declared functions shall have a prefix. The prefix, which can be up to 6 characters, is specified as type 180 in the c/cppvals.dat file. Instructions for making alterations can be found in the manual. By default, the prefix is set to GLOBpx. </p>
<pre>180     GLOBpx              6 chars for global function prefix</pre><div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 223 S : No prefix for global function.
 ********************************************************/</span> 
&nbsp;
INT_32 func<span class="br0">&#40;</span>INT_32 p<span class="br0">&#41;</span><span class="br0">&#123;</span><span class="kw1">return</span> <span class="nu0">7</span><span class="sy0">;</span><span class="br0">&#125;</span>              <span class="coMULTI">/* Not compliant */</span>
&nbsp;
INT_32 GLOBpx_func<span class="br0">&#40;</span>INT_32 q<span class="br0">&#41;</span><span class="br0">&#123;</span><span class="kw1">return</span> <span class="nu0">11</span><span class="sy0">;</span><span class="br0">&#125;</span>     <span class="coMULTI">/* Compliant */</span>
&nbsp;
INT_32 main<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2002 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s224' name='standard_s224'><div class='standard'><div>224&nbsp;S</div></div></a><div class='headline'>Start of enumeration is upper case.</div></div><p>Enumeration constant names should start with a lowercase letter (not including subsystem/package prefixes). Using the same naming conventions as for macros (or enumeration values) is allowed, provided that usage is consistent.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 224 S : Start of enumeration is upper case.
 ********************************************************/</span> 
&nbsp;
<span class="kw2">enum</span> <span class="br0">&#123;</span> red<span class="sy0">,</span> green<span class="sy0">,</span> Blue<span class="br0">&#125;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant - Blue */</span>
&nbsp;
<span class="kw4">void</span> static_224 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2002 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_52'>52</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s225' name='standard_s225'><div class='standard'><div>225&nbsp;S</div></div></a><div class='headline'>Inappropriate file extension.</div></div><p>C source code files should end with the extension '.c' and C header files with the extension '.h'.</p>
<p> C++ source code files should end with the extension '.cpp' and C++ header files with the extension '.hpp'.</p>
<div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_2.2.2'>2.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_78'>78</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s226' name='standard_s226'><div class='standard'><div>226&nbsp;S</div></div></a><div class='headline'>Bit field is not octal, hex or suffix u.</div></div><p>Bit patterns shall be defined in hexadecimal or octal format or have a u suffix. In these formats the values are unsigned, which is what should be used in bit-wise operations. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> UINT<span class="sy0">;</span>
&nbsp;
<span class="kw2">enum</span> <span class="br0">&#123;</span>won<span class="sy0">=</span><span class="nu0">1</span><span class="sy0">,</span>too<span class="sy0">=</span><span class="nu0">2</span><span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">struct</span> tag<span class="br0">&#123;</span>
  UINT dec<span class="sy0">:</span><span class="nu0">2</span><span class="sy0">;</span>     <span class="coMULTI">/* not compliant */</span>
  UINT oct<span class="sy0">:</span><span class="nu8">02</span><span class="sy0">;</span>
  UINT hex<span class="sy0">:</span><span class="nu12">0x3</span><span class="sy0">;</span>
  UINT enumr<span class="sy0">:</span>won<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
  UINT decu<span class="sy0">:</span>3u<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/***********************************************************
 * Standard 226 S : Bit field is not octal, hex or suffix u.
 ***********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_226 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2002 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_p1.3.3'>P1.3.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s227' name='standard_s227'><div class='standard'><div>227&nbsp;S</div></div></a><div class='headline'>Numeric bit operand is not octal,hex or u.</div></div><p>Bit patterns shall be defined in hexadecimal or octal format or have a u suffix. In these formats the values are unsigned, which is what should be used in bit-wise operations. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> UINT<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 227 S : Numeric bit operand is not octal, hex or u.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_227 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT x<span class="sy0">=</span><span class="nu0">1</span><span class="sy0">,</span> y<span class="sy0">;</span>
   y <span class="sy0">=</span> x <span class="sy0">&amp;</span> <span class="nu0">20</span><span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span>
   y <span class="sy0">=</span> x <span class="sy0">&amp;</span> 20u<span class="sy0">;</span>
   y <span class="sy0">=</span> x <span class="sy0">&amp;</span> <span class="nu8">020</span><span class="sy0">;</span>
   y <span class="sy0">=</span> x <span class="sy0">&amp;</span> <span class="nu12">0x20</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2002 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s228' name='standard_s228'><div class='standard'><div>228&nbsp;S</div></div></a><div class='headline'>Bracket mismatch ( or { in macro definition.</div></div><p>Macro definitions, where permitted, should be clearly structured with correctly balanced brackets. Heavy use of parentheses around arguments shall be used when defining macros to avoid surprises.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/***************************************************************
 * Standard 228 S : Bracket mismatch ( or { in macro definition.
 ***************************************************************/</span> 
&nbsp;
<span class="coMULTI">/* Missing right parenthesis (!) in this macro definition of a 'common' symbolic constant */</span> 
&nbsp;
<span class="co2">#define COMMON_SYM_CONSTANT ((2U * 3U) + 2U</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s229' name='standard_s229'><div class='standard'><div>229&nbsp;S</div></div></a><div class='headline'>Bracket mismatch ) or } in macro definition.</div></div><p>Macro definitions, where permitted, should be clearly structured with correctly balanced brackets. Heavy use of parentheses around arguments shall be used when defining macros to avoid surprises. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/***************************************************************
 * Standard 229 S : Bracket mismatch ) or } in macro definition.
 ***************************************************************/</span> 
&nbsp;
<span class="coMULTI">/* Missing left parenthesis (!) in this macro definition of a 'common' symbolic constant */</span> 
&nbsp;
<span class="co2">#define COMMON_SYM_CONSTANT 2U * 3U + 2U)</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s230' name='standard_s230'><div class='standard'><div>230&nbsp;S</div></div></a><div class='headline'>No copy constructor defined for class.</div></div><p>The compiler provides a default copy constructor, but this is not always appropriate because it does not initialise members that are of POD type.</p>
<p>Defining a minimal standard interface comprising: a default constructor; a copy constructor, a copy assignment operator and a destructor for all classes ensures a more maintainable and extensible implementation.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 *  Standard 230 S : No copy constructor defined for class.
 ********************************************************/</span>
&nbsp;
class Person  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 personNum<span class="br0">&#41;</span><span class="sy0">;</span>
    Person <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person <span class="br0">&#41;</span><span class="sy0">;</span>
    ~Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 personalNumber<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_230<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Person p1<span class="br0">&#40;</span>10U<span class="br0">&#41;</span><span class="sy0">;</span>
  Person q1<span class="br0">&#40;</span>p1<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="co1">// invokes (compiler provided) copy constructor</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.1.13'>3.1.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s231' name='standard_s231'><div class='standard'><div>231&nbsp;S</div></div></a><div class='headline'>No assignment operator defined for class.</div></div><p>The compiler will provide a default copy assignment operator, but is not always appropriate because it does not initialise members that are of POD type.</p>
<p>Defining a minimal standard interface comprising: a default constructor; a copy constructor, a copy assignment operator and a destructor for all classes ensures a more maintainable and extensible implementation. This standard checks for the presence of an assignment operator if a destructor or a copy constructor are present.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/***************************************************************
 * Standard 231 S : No assignment operator defined for class.
 ***************************************************************/</span>
&nbsp;
class Person <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 personNum<span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    ~Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 personalNumber<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_231<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Person p1<span class="br0">&#40;</span>10U<span class="br0">&#41;</span><span class="sy0">;</span>
  Person q1<span class="br0">&#40;</span>p1<span class="br0">&#41;</span><span class="sy0">;</span>   <span class="co1">// invokes (compiler provided) copy assignment constructor</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.1.13'>3.1.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s232' name='standard_s232'><div class='standard'><div>232&nbsp;S</div></div></a><div class='headline'>No destructor defined for class.</div></div><p>The compiler provides a default destructor, but it is not always appropriate because it does not initialise members that are of POD type.</p>
<p>Defining a minimal standard interface comprising: a default constructor; a copy constructor, a copy assignment operator and a destructor for all classes ensures a more maintainable and extensible implementation. </p>
<div class='title'>Example</div>
<p>&lt;code cpp Static_232.cpp&gt;#include c_standards.h</p>
<p>/*
 *  Standard 232 S : No destructor defined for class.
 */</p>
<p>class Person  /* not compliant */
{</p>
<p>};</p>
<p>void static_232(void)
{</p>
<p>}</p>
<p>/*
 *
 * Copyright  2006 Liverpool Data Research Associates
 *
 */code&gt;</p>
<div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_13'>13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.1.13'>3.1.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_118'>118</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s233' name='standard_s233'><div class='standard'><div>233&nbsp;S</div></div></a><div class='headline'>No copy constructor for class with pointers.</div></div><p>A copy constructor shall be declared for classes that manage resources, i.e. contain pointers to data items or nontrivial destructors.</p>
<p>The default copy constructor provided by the compiler performs a bitwise or shallow copy, resulting in a shared resource when a duplicated resource may be necessary. An explicit declaration makes the intention clear. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/***************************************************************
 * Standard 233 S : No copy constructor for class with pointers.
 ***************************************************************/</span>
&nbsp;
class Person
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 personNum<span class="br0">&#41;</span><span class="sy0">;</span>
    Person <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    ~Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 personalNumber<span class="sy0">;</span>
    CHAR <span class="sy0">*</span>personName<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
Person<span class="sy0">::</span><span class="me2">Person</span><span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 personNum<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  personalNumber <span class="sy0">=</span> personNum<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> static_233<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Person p1<span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span><span class="sy0">;</span>
  Person q1<span class="br0">&#40;</span>p1<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="co1">// invokes (compiler provided) copy constructor </span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_4'>4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_4.2'>4.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.1.3'>3.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_76'>76</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_117'>117</a>, <a href='lmtcp_model.htm#rule_lmtcp_118'>118</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s234' name='standard_s234'><div class='standard'><div>234&nbsp;S</div></div></a><div class='headline'>No assignment operator for class with pointers.</div></div><p>A copy assignment operator shall be declared for classes that manage resources, i.e. contain pointers to data items or non-trivial destructors.</p>
<p>The default assignment operator provided by the compiler performs a bitwise or shallow copy, resulting in a shared resource when a duplicated resource may be necessary. An explicit declaration makes the intention clear. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/******************************************************************
 * Standard 234 S : No assignment operator for class with pointers.
 ******************************************************************/</span>
&nbsp;
class Person
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 personNum<span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    ~Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 personalNumber<span class="sy0">;</span>
    CHAR <span class="sy0">*</span>personName<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
Person<span class="sy0">::</span><span class="me2">Person</span><span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 personNum<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  personalNumber <span class="sy0">=</span> personNum<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_234<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Person p1<span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span><span class="sy0">;</span>
  Person q1<span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span><span class="sy0">;</span>
  q1 <span class="sy0">=</span> p1<span class="sy0">;</span>  <span class="co1">// invokes (compiler provided) copy assignment constructor </span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_4'>4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_4.2'>4.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.1.3'>3.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_76'>76</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_117'>117</a>, <a href='lmtcp_model.htm#rule_lmtcp_118'>118</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s235' name='standard_s235'><div class='standard'><div>235&nbsp;S</div></div></a><div class='headline'>No destructor for class with pointers.</div></div><p>A destructor shall be declared for classes that manage resources, i.e. contain pointers to data items.</p>
<p>The destructor should be declared because the implicit destructor will not release resources (normally dynamically allocated memory). Failure to release resources could result in resource leaks. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*********************************************************
 * Standard 235 S : No destructor for class with pointers.
 *********************************************************/</span> 
&nbsp;
class Person <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 personNum<span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    Person <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Person<span class="sy0">&amp;</span> person<span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 personalNumber<span class="sy0">;</span>
    CHAR<span class="sy0">*</span>personName<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
Person<span class="sy0">::</span><span class="me2">Person</span><span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 personNum<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  personalNumber <span class="sy0">=</span> personNum<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_235<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Person <span class="sy0">*</span>p1 <span class="sy0">=</span> new Person<span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
  <span class="co1">// Statements...</span>
&nbsp;
  delete p1<span class="sy0">;</span>  <span class="co1">// invokes (compiler provided) destructor </span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_4'>4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_4.2'>4.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.1.3'>3.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s236' name='standard_s236'><div class='standard'><div>236&nbsp;S</div></div></a><div class='headline'>New used in class without assignment op.</div></div><p>If a class uses new to allocate instances managed by the class, define an assignment operator.</p>
<p>Define or, at least, declare a copy assignment operator for classes which manage resources. The default assignment operator provided by the compiler performs a bitwise or shallow copy, resulting in a shared resource when a duplicated resource may be necessary. An explicit declaration makes the intention clear.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 236 S : New used in class without assignment op.
 *************************************************************/</span>
&nbsp;
class Person
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 personNum<span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    ~Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 personalNumber<span class="sy0">;</span>
    UINT_32 <span class="sy0">*</span>skillsList<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
Person<span class="sy0">::</span><span class="me2">Person</span><span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 personNum<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  personalNumber <span class="sy0">=</span> personNum<span class="sy0">;</span>
  skillsList <span class="sy0">=</span> new UINT_32<span class="br0">&#91;</span><span class="nu0">10</span><span class="br0">&#93;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_236<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Person p1<span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span><span class="sy0">;</span>
  Person q1<span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span><span class="sy0">;</span>
  q1 <span class="sy0">=</span> p1<span class="sy0">;</span>  <span class="coMULTI">/* invokes (compiler provided) copy assignment constructor */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.1.3'>3.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_118'>118</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s237' name='standard_s237'><div class='standard'><div>237&nbsp;S</div></div></a><div class='headline'>Assignment operator parameter not const.</div></div><p>The passed object reference shall not be modified by the copy assignment operator. Hence declare the (read-only) parameter as const in accordance with the general rule that const be used whenever possible. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/************************************************************
 *  Standard 237 S : Assignment operator parameter not const.
 ************************************************************/</span>
&nbsp;
class Person
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 personNum<span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    Person <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span>Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="co1">// should be a const parameter</span>
    ~Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 personalNumber<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
Person <span class="sy0">&amp;</span>Person<span class="sy0">::</span><span class="me2">operator</span><span class="sy0">=</span><span class="br0">&#40;</span>Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>this <span class="sy0">!=</span> <span class="sy0">&amp;</span>person<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="co1">// Assignment code</span>
  <span class="br0">&#125;</span>
  <span class="kw1">return</span> <span class="sy0">*</span>this<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_237<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Person p1<span class="br0">&#40;</span>10U<span class="br0">&#41;</span><span class="sy0">;</span>
  Person q1<span class="br0">&#40;</span>10U<span class="br0">&#41;</span><span class="sy0">;</span>
  q1 <span class="sy0">=</span> p1<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s238' name='standard_s238'><div class='standard'><div>238&nbsp;S</div></div></a><div class='headline'>Number of templates exceeds ***.</div></div><p>The use of templates should be minimised. This standard checks that the number of templates does not exceed a pre-determined number. The *** symbols refer to a user definable number for this standard, defaulting to 6. The configuration is made in the cpppen.dat file. Instructions for making alterations can be found in the manual.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/******************************************************
 *  Standard 238 S : Number of templates exceeds ***.
 ******************************************************/</span>
&nbsp;
&nbsp;
template <span class="sy0">&lt;</span> class T <span class="sy0">&gt;</span>
class tplate1
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    tplate1<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 value1<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
template <span class="sy0">&lt;</span> class T <span class="sy0">&gt;</span>
class tplate2
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    tplate2<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 value2<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
template <span class="sy0">&lt;</span> class T <span class="sy0">&gt;</span>
class tplate3
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    tplate3<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 value3<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
template <span class="sy0">&lt;</span> class T <span class="sy0">&gt;</span>
class tplate4
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    tplate4<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 value4<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
template <span class="sy0">&lt;</span> class T <span class="sy0">&gt;</span>
class tplate5
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    tplate5<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 value5<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
template <span class="sy0">&lt;</span> class T <span class="sy0">&gt;</span>
class tplate6
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    tplate6<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 value6<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
template <span class="sy0">&lt;</span> class T <span class="sy0">&gt;</span>
class tplate7        <span class="co1">// This declaration causes a violation when</span>
<span class="br0">&#123;</span>                    <span class="co1">// limit configured to 6. </span>
  public<span class="sy0">:</span>
    tplate7<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 value7<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_238<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="co1">// ...</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s239' name='standard_s239'><div class='standard'><div>239&nbsp;S</div></div></a><div class='headline'>New used in class without copy constructor.</div></div><p>If a class uses new to allocate instances of the class, then a copy constructor shall be defined.</p>
<p>Define or, at least, declare a copy constructor for classes which manage resources. The default copy constructor provided by the compiler performs a bitwise or shallow copy, resulting in a shared resource when a duplicated resource may be necessary. An explicit declaration makes the intention clear.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 239 S : New used in class without copy constructor.
 *************************************************************/</span>
&nbsp;
class Person
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 personNum<span class="br0">&#41;</span><span class="sy0">;</span>
    Person <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    ~Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 personalNumber<span class="sy0">;</span>
    UINT_32 <span class="sy0">*</span>skillsList<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
Person<span class="sy0">::</span><span class="me2">Person</span><span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 personNum<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  personalNumber <span class="sy0">=</span> personNum<span class="sy0">;</span>
  skillsList <span class="sy0">=</span> new UINT_32<span class="br0">&#91;</span><span class="nu0">10</span><span class="br0">&#93;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_239<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Person p1<span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span><span class="sy0">;</span>
  Person q1<span class="br0">&#40;</span>p1<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* invokes (compiler provided) copy constructor */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.1.3'>3.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_118'>118</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s240' name='standard_s240'><div class='standard'><div>240&nbsp;S</div></div></a><div class='headline'>Use of dynamic_cast.</div></div><p>Dynamic casts shall not be used due to their dependency on run-time type information (for those casts resolved at run-time). Casts involving pointers/references from a base class to a derived class and casts between different derived classes are those casts that are made at run-time.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="coMULTI">/**********************************************
 * Standard 240 S : Use of dynamic_cast.
 **********************************************/</span>
&nbsp;
class Base
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Base<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Base<span class="br0">&#40;</span><span class="kw4">const</span> Base <span class="sy0">&amp;</span>base<span class="br0">&#41;</span><span class="sy0">;</span>
    Base<span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Base <span class="sy0">&amp;</span>base<span class="br0">&#41;</span><span class="sy0">;</span>
    virtual ~Base<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class Derived <span class="sy0">:</span> public Base
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Derived<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Derived<span class="br0">&#40;</span><span class="kw4">const</span> Derived <span class="sy0">&amp;</span>derived<span class="br0">&#41;</span><span class="sy0">;</span>
    Derived<span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Derived <span class="sy0">&amp;</span>derived<span class="br0">&#41;</span><span class="sy0">;</span>
    virtual ~Derived<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class DifferentDerived <span class="sy0">:</span> public Base
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    DifferentDerived<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit DifferentDerived<span class="br0">&#40;</span><span class="kw4">const</span> DifferentDerived <span class="sy0">&amp;</span>dderived<span class="br0">&#41;</span><span class="sy0">;</span>
    DifferentDerived<span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> DifferentDerived <span class="sy0">&amp;</span>dderived<span class="br0">&#41;</span><span class="sy0">;</span>
    virtual ~DifferentDerived<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_240<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Derived <span class="sy0">*</span>d1 <span class="sy0">=</span> new Derived<span class="sy0">;</span>
  DifferentDerived <span class="sy0">*</span>dd1 <span class="sy0">=</span> dynamic_cast <span class="sy0">&lt;</span>DifferentDerived <span class="sy0">*&gt;</span> <span class="br0">&#40;</span>d1<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_1.12'>1.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_185'>185</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s241' name='standard_s241'><div class='standard'><div>241&nbsp;S</div></div></a><div class='headline'>Use of reinterpret_cast.</div></div><p>This is an unsafe cast as the result may not be well defined.</p>
<p>This standard is only enabled when the the # symbol is removed from the start of the line in the c/cppreport.dat file.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="coMULTI">/**********************************************
 * Standard 241 S : Use of reinterpret_cast.
 **********************************************/</span>
&nbsp;
class AClass
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    AClass<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit AClass<span class="br0">&#40;</span><span class="kw4">const</span> AClass <span class="sy0">&amp;</span>ac<span class="br0">&#41;</span><span class="sy0">;</span>
    AClass<span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> AClass <span class="sy0">&amp;</span>ac<span class="br0">&#41;</span><span class="sy0">;</span>
    ~AClass<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class BClass
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    BClass<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit BClass<span class="br0">&#40;</span><span class="kw4">const</span> BClass <span class="sy0">&amp;</span>ac<span class="br0">&#41;</span><span class="sy0">;</span>
    BClass<span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> BClass <span class="sy0">&amp;</span>ac<span class="br0">&#41;</span><span class="sy0">;</span>
    ~BClass<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_240<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  AClass <span class="sy0">*</span>a1 <span class="sy0">=</span> new AClass<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  BClass <span class="sy0">*</span>b1 <span class="sy0">=</span> reinterpret_cast <span class="sy0">&lt;</span>BClass <span class="sy0">*&gt;</span> <span class="br0">&#40;</span>a1<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_1.12'>1.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s242' name='standard_s242'><div class='standard'><div>242&nbsp;S</div></div></a><div class='headline'>Use of const_cast.</div></div><p>The supplied type and argument must be of the same type except for a const or volatile specifier. This cast is only used to add or remove constness from an object. However, removing constness should be avoided if possible.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**********************************************
 * Standard 242 S : Use of const_cast.
 **********************************************/</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_242<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw4">const</span> <span class="kw4">char</span> <span class="sy0">*</span> c <span class="sy0">=</span> <span class="st0">&quot;sample text&quot;</span><span class="sy0">;</span>
   <span class="kw4">char</span> <span class="sy0">*</span>new_c<span class="sy0">;</span>
   new_c <span class="sy0">=</span> const_cast<span class="sy0">&lt;</span>char <span class="sy0">*&gt;</span><span class="br0">&#40;</span>c<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_1.12'>1.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_7.4'>7.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-2-5'>5-2-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s243' name='standard_s243'><div class='standard'><div>243&nbsp;S</div></div></a><div class='headline'>Included file not protected with #define.</div></div><p>A header file will contain a mechanism that prevents multiple inclusions of itself. The following styles are accepted by Testbed.</p>
<ol>
<li style='margin-left : 0px;'>

 A test for a name of the form #ifndef, #if !defined, #ifdef
</li>
<li style='margin-left : 0px;'>

 #define of the same name ( in #else section in the case of #ifdef )
</li>
<li style='margin-left : 0px;'>

 #endif
</li>
</ol>
<div class='title'>Example</div>
<p>Static_243.h</p>
<pre class="code c"><span class="coMULTI">/************************************************************
 * Standard 243 S : Included file not protected with #define.
 ************************************************************/</span> 
&nbsp;
<span class="coMULTI">/***
#ifndef STATIC_243_H
#define STATIC_243_H
***/</span> 
&nbsp;
<span class="coMULTI">/* All declarations and definitions - should be excluded
   by the preprocessor if the file is included more than once. */</span> 
&nbsp;
<span class="coMULTI">/***
#endif
***/</span> 
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><p>Static_243.c</p>
<pre class="code c"><span class="co2">#include &quot;Static_243.h&quot;</span>
<span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="coMULTI">/************************************************************
 * Standard 243 S : Included file not protected with #define.
 ************************************************************/</span> 
&nbsp;
 <span class="kw4">static</span> <span class="kw4">void</span> static_243 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
 <span class="br0">&#123;</span>
	 <span class="sy0">;</span>
 <span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_pre06-c'>PRE06-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_735'>735</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_9'>9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_2.3.2'>2.3.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_3.6'>3.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_14.11'>14.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_27'>27</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_35'>35</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_33'>33</a>, <a href='lmtcp_model.htm#rule_lmtcp_50'>50</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_19.15'>19.15</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-2-3'>16-2-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_19.15'>19.15</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_d.4.10'>D.4.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_4.2.b'>4.2.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m4.4.6'>M4.4.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s244' name='standard_s244'><div class='standard'><div>244&nbsp;S</div></div></a><div class='headline'>new or delete overloaded.</div></div><p>The new and delete operators shall not be overloaded. Customising memory management by implementing different behaviour from the standard versions of the new and delete operators is considered dangerous.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**********************************************
 * Standard 244 S : new or delete overloaded.
 **********************************************/</span>
&nbsp;
class X
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    X<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    ~X<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw4">static</span> <span class="kw4">void</span> <span class="sy0">*</span>operator new<span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 size<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
    <span class="kw4">static</span> <span class="kw4">void</span> operator delete<span class="br0">&#40;</span><span class="kw4">void</span><span class="sy0">*</span><span class="br0">&#41;</span><span class="sy0">;</span>           <span class="coMULTI">/* not compliant */</span>
    explicit X<span class="br0">&#40;</span><span class="kw4">const</span> X <span class="sy0">&amp;</span>xx<span class="br0">&#41;</span><span class="sy0">;</span>
    X <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> X <span class="sy0">&amp;</span>xx<span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_244<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* ... */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s245' name='standard_s245'><div class='standard'><div>245&nbsp;S</div></div></a><div class='headline'>Case statement in nested block.</div></div><p>The scope of a case or default label shall always be the compound statement which is the body of the switch statement. All case clauses and the default clause shall be at the same scope. Furthermore, every switch statement shall have at least one case clause. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw2">enum</span> Choice
<span class="br0">&#123;</span>
  first<span class="sy0">,</span>
  second<span class="sy0">,</span>
  third<span class="sy0">,</span>
  fourth
<span class="br0">&#125;</span> Choice<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 245 S : Case statement in nested block.
 ********************************************************/</span> 
&nbsp;
INT_32 a1 <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
INT_32 errorflag <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_245<span class="br0">&#40;</span>Choice chooser<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  INT_32 b1 <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span>
  INT_32 c1 <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
&nbsp;
  <span class="kw1">switch</span> <span class="br0">&#40;</span>chooser<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="kw1">case</span> first<span class="sy0">:</span>
      a1 <span class="sy0">=</span> b1<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw1">case</span> second<span class="sy0">:</span>  <span class="coMULTI">/* flow through to next case label */</span> 
    <span class="kw1">case</span> third<span class="sy0">:</span>
      a1 <span class="sy0">=</span> c1<span class="sy0">;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span>a1 <span class="sy0">==</span> b1<span class="br0">&#41;</span>
      <span class="br0">&#123;</span>
        <span class="coMULTI">/* case is not allowed here - not compliant */</span> 
        <span class="kw1">case</span> fourth<span class="sy0">:</span>
      <span class="br0">&#125;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw1">default</span><span class="sy0">:</span>
      errorflag <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.9.2.1'>3.9.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_343'>343</a>, <a href='lmtcp_model.htm#rule_lmtcp_348'>348</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_15.1'>15.1</a>, <a href='misra-ac_model.htm#rule_misra-ac_15.5'>15.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-4-4'>6-4-4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_15.1'>15.1</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_15.5'>15.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.16.2'>R.16.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.3.2'>M1.3.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s246' name='standard_s246'><div class='standard'><div>246&nbsp;S</div></div></a><div class='headline'>Class has missing access specifiers.</div></div><p>Public, protected and private sections (in that order) shall be specified explicitly in the class declaration.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard 246 S : Class has missing access specifiers.
 *******************************************************/</span>
&nbsp;
class Person
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 personNum<span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    Person <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    ~Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">void</span> static_246<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="co1">// Statements... </span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s247' name='standard_s247'><div class='standard'><div>247&nbsp;S</div></div></a><div class='headline'>Macro definition calls itself.</div></div><p>An invocation of a macro definition contains, as its parameter, a nested call to itself.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 247 S : Macro definition calls itself.
 ********************************************************/</span> 
&nbsp;
<span class="co2">#define COMMON_MACRO(X) (ANOTHER_MACRO(X))</span>
&nbsp;
<span class="co2">#define SOME_MACRO(X) (NESTED_MACRO1(X))</span>
<span class="co2">#define NESTED_MACRO1(X) (NESTED_MACRO2(X))</span>
<span class="co2">#define NESTED_MACRO2(X) (COMMON_MACRO(X))</span>
<span class="co2">#define ANOTHER_MACRO(X) (X)</span>
&nbsp;
<span class="kw4">const</span> SINT_32 s1 <span class="sy0">=</span> <span class="nu0">42</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> static_247<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  SINT_32 myInt <span class="sy0">=</span> COMMON_MACRO<span class="br0">&#40;</span>SOME_MACRO<span class="br0">&#40;</span>s1<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_8'>8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s248' name='standard_s248'><div class='standard'><div>248&nbsp;S</div></div></a><div class='headline'>Divide by zero in preprocessor directive.</div></div><p>A preprocessor directive has the potential to cause a divide by zero run-time failure. Explicit coding checks should be used to handle run-time faults.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/************************************************************
 * Standard 248 S : Divide by zero in preprocessor directive.
 ************************************************************/</span> 
&nbsp;
<span class="co2">#define DEBUG2 2</span>
<span class="co2">#define DEBUG1 0</span>
&nbsp;
<span class="co2">#define COMMON_MACRO(X,Y) ((X)/(Y))</span>
&nbsp;
<span class="co2">#if (COMMON_MACRO(DEBUG2,DEBUG1)) == 1   /* not compliant */</span>
  <span class="coMULTI">/* ....  */</span> 
<span class="co2">#endif</span>
&nbsp;
<span class="kw4">void</span> static_248<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int33-c'>INT33-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_369'>369</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_0-3-1'>0-3-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_d.4.1'>D.4.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s249' name='standard_s249'><div class='standard'><div>249&nbsp;S</div></div></a><div class='headline'>Operation not appropriate to boolean type.</div></div><p>The performed operation on a boolean type is not appropriate. </p>
<p>Other inappropriate boolean operations are covered by <a href='standards.htm#standard_s136'>136 S</a>, <a href='standards.htm#standard_s389'>389 S</a> and <a href='standards.htm#standard_s402'>402 S</a>.  This standard covers &gt;&gt;, &lt;&lt; and postfix ++ and -- operators.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 249 S : Operation not appropriate to boolean type.
 *************************************************************/</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_249 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  BOOL bvar <span class="sy0">=</span> FALSE<span class="sy0">;</span>
  bvar <span class="sy0">++;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_12.6'>12.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.6'>12.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.1'>R.10.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s250' name='standard_s250'><div class='standard'><div>250&nbsp;S</div></div></a><div class='headline'>Cyclic included file nesting found.</div></div><p>An include file &quot;abc.h&quot; contains an include for a file &quot;xyz.h&quot; which in return includes the first file &quot;abc.h&quot;.</p>
<p>This standard is not available if &quot;SHORTEN&quot; is set to TRUE, which is the default value.</p>
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s251' name='standard_s251'><div class='standard'><div>251&nbsp;S</div></div></a><div class='headline'>Use of stdio.h instead of iostream.h.</div></div><p>Function declarations in stdio.h, defined in the C function libraries, should not be used in C++ programs. The iostream.h standard header file shall be used in preference.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdio.h&gt;  /* not compliant */</span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard 251 S : Use of stdio.h instead of iostream.h.
 *******************************************************/</span>
&nbsp;
class Person
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 personNum<span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    Person <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    ~Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 personalNumber<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_251<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Person p1<span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s252' name='standard_s252'><div class='standard'><div>252&nbsp;S</div></div></a><div class='headline'>Lower case suffix to literal number.</div></div><p>Literal suffixes shall use uppercase rather than lowercase letters for readability.</p>
<p>This standard can be relaxed to check only l by setting the modifier <a href='standard_flags.htm#flag_418'>418</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 252 S : Lower case suffix to literal number.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">const</span> SINT_64 fr1 <span class="sy0">=</span> <span class="nu0">64l</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant - looks too much like 641 */</span> 
<span class="kw4">const</span> SINT_64 fr2 <span class="sy0">=</span> <span class="nu0">64L</span><span class="sy0">;</span> <span class="coMULTI">/* compliant */</span> 
&nbsp;
<span class="kw4">void</span> static_252<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  SINT_64 x1 <span class="sy0">=</span> fr2<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_23'>23</a>, <a href='eads-cpp_model.htm#rule_eads-c%2B%2B_24'>24</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_6.1'>6.1</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_6.2'>6.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_14'>14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_14'>14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-13-4'>2-13-4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.7.3'>R.7.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_418'>418</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.2.2'>M1.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_418'>418</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s253' name='standard_s253'><div class='standard'><div>253&nbsp;S</div></div></a><div class='headline'>Opposite type operator missing.</div></div><p>An overloaded operator has been declared without its corresponding opposite type. For consistency, paired operators, such as &lt; and &gt;= shall both be overloaded together.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**************************************************
 * Standard 253 S : Opposite type operator missing.
 **************************************************/</span>
&nbsp;
class X
<span class="br0">&#123;</span>
   public<span class="sy0">:</span>
     X<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
     bool operator <span class="sy0">&lt;</span><span class="br0">&#40;</span><span class="kw4">const</span> SINT_32 val<span class="br0">&#41;</span> <span class="kw4">const</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
   protected<span class="sy0">:</span>
   private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_8.2'>8.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_130'>130</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s254' name='standard_s254'><div class='standard'><div>254&nbsp;S</div></div></a><div class='headline'>Operator = doesn't return reference to *this.</div></div><p>The copy assignment operator shall return a reference to this. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/****************************************************************
 * Standard 254 S : Operator = doesn't return reference to *this.
 ****************************************************************/</span>
&nbsp;
class Person
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 personNum<span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
    <span class="co1">// by making return type const, cannot return ref to *this</span>
    <span class="kw4">const</span> Person <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
    ~Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 personalNumber<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_254<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Person p1<span class="br0">&#40;</span>10U<span class="br0">&#41;</span><span class="sy0">;</span>
  Person q1<span class="br0">&#40;</span>11U<span class="br0">&#41;</span><span class="sy0">;</span>
  q1 <span class="sy0">=</span> p1<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_8.3'>8.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.1.5'>3.1.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_82'>82</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_121'>121</a>, <a href='lmtcp_model.htm#rule_lmtcp_127'>127</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s255' name='standard_s255'><div class='standard'><div>255&nbsp;S</div></div></a><div class='headline'>Found #if, #ifdef, #else, #elif .</div></div><p>Only the #ifndef, #define, #endif, and #include pre-processor directives shall be used. The use of the pre-processor should be limited to these directives in cases where it is necessary, e.g. to prevent multiple inclusions of the same header file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#define DEBUG 1</span>
<span class="co2">#define DEBUG_ERROR 1</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 255 S : Found #if, #ifdef, #else, #elif.
 ********************************************************/</span> 
&nbsp;
<span class="co2">#if DEBUG == 1</span>
	 <span class="coMULTI">/* not compliant */</span> 
<span class="co2">#ifdef DEBUG_ERROR</span>
	 <span class="coMULTI">/* not compliant */</span> 
<span class="co2">#endif</span>
<span class="co2">#elif DEBUG == 2</span>
	 <span class="coMULTI">/* not compliant */</span> 
<span class="co2">#else</span>
	 <span class="coMULTI">/*not compliant */</span> 
<span class="co2">#endif</span>
&nbsp;
<span class="kw4">void</span> static_255<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	 <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.11.2'>3.11.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_26'>26</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_32'>32</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-2-1'>16-2-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s256' name='standard_s256'><div class='standard'><div>256&nbsp;S</div></div></a><div class='headline'>Procedure exceeds *** source lines of code.</div></div><p>A procedure will contain no more than the specified pre-determined maximum number of logical lines of code. Long procedures tend to be complex and therefore difficult to comprehend and test.</p>
<p>The *** symbols refer to a user definable number for this standard, defaulting to 200. The configuration is made in the c/cpppen.dat file. Instructions for making alterations can be found in the manual.</p>
<p>Instead of counting logical lines, the number of pure source lines can be counted by setting the modifier <a href='standard_flags.htm#flag_203'>203</a> to 1 in the c/cppreport.dat file. This will exclude blank or comment lines. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_115'>115</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.7.8'>3.7.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_6.7'>6.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_4'>4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_1'>1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_203'>203</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_1'>1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_6.2.a'>6.2.a</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s257' name='standard_s257'><div class='standard'><div>257&nbsp;S</div></div></a><div class='headline'>Filename in #include not in &lt; &gt; .</div></div><p>The #include directive shall use the &lt;filename.h&gt; notation to include header files. Although &quot;filename.h&quot; is typically used to include local header files, due to the divergence in vendor implementations, only the &lt;filename.h&gt; form will be used. For files not located in the source directory, relative pathnames may also be used. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/********************************************************
 * Standard 257 S : Filename in #include not in &lt; &gt;.
 * A/Ref:
 ********************************************************/</span> 
&nbsp;
<span class="co2">#include &lt;foo.h&gt;            /* Good */ </span>
<span class="co2">#include &quot;anotherFoo.h&quot;     /* Bad: &quot;filename.h&quot; form used */ </span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_33'>33</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_51.1'>51.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s258' name='standard_s258'><div class='standard'><div>258&nbsp;S</div></div></a><div class='headline'>More than one class in header file.</div></div><p>Each class declaration should be held in a separate header file. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#ifndef STATIC_258_H</span>
<span class="co2">#define STATIC_258_H</span>
&nbsp;
<span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*********************************************************
 * Standard 258 S : More than one class in header file.
 *********************************************************/</span>
&nbsp;
class Person
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 personNum<span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    Person <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    ~Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 personalNumber<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class MalePerson <span class="sy0">:</span> public Person
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    MalePerson<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit MalePerson<span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 personNum<span class="br0">&#41;</span><span class="sy0">;</span>
    MalePerson<span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 personNum<span class="sy0">,</span>
               <span class="kw4">const</span> UINT_16 weight<span class="br0">&#41;</span><span class="sy0">;</span>
    explicit MalePerson<span class="br0">&#40;</span><span class="kw4">const</span> MalePerson <span class="sy0">&amp;</span>mperson<span class="br0">&#41;</span><span class="sy0">;</span>
    MalePerson <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> MalePerson <span class="sy0">&amp;</span>mperson<span class="br0">&#41;</span><span class="sy0">;</span>
    ~MalePerson<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_16 weightAmount<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="co2">#endif</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_3.3'>3.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s259' name='standard_s259'><div class='standard'><div>259&nbsp;S</div></div></a><div class='headline'>Statement not on new line (added by Testbed).</div></div><p>For the sake of simplicity, readability and style, each statement shall be placed on a separate new line. Testbed inserts the required carriage return into the reformatted code to permit instrumentation. This LDRA penalty is not applicable to code substituted into the source through macro expansion, as these checks are based on the original code and do not extend to macro definitions.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/****************************************************************
 * Standard 259 S : Statement not on new line (added by Testbed).
 ****************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_259<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 x1<span class="sy0">;</span>
  SINT_32 y1<span class="sy0">;</span>
  x1 <span class="sy0">=</span> 5U<span class="sy0">;</span> y1 <span class="sy0">=</span><span class="nu0">7</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant. multiple expression statements on the same line. */</span> 
  y1 <span class="sy0">=</span> <span class="nu0">3</span><span class="sy0">;</span>          <span class="coMULTI">/* compliant */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.3.6'>3.3.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_10.7'>10.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_4'>4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_42'>42</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_65'>65</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s260' name='standard_s260'><div class='standard'><div>260&nbsp;S</div></div></a><div class='headline'>No default constructor declared for class.</div></div><p>The compiler will provide a default constructor, but is not always appropriate because it does not initialise members that are of POD type. Defining a minimal standard interface comprising: a default constructor; a copy constructor, a copy assignment operator and a destructor for all classes ensures a more maintainable and extensible implementation.</p>
<p>This standard can be relaxed so that it only applies to classes with virtual functions by setting the modifier <a href='standard_flags.htm#flag_205'>205</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**************************************************************
 * Standard 260 S : No default constructor declared for class.
 **************************************************************/</span>
&nbsp;
class Person  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 pNumber<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="co1">// Single parameter constructor...</span>
                                    <span class="co1">// but no default constructor. </span>
  private<span class="sy0">:</span>
    UINT_32 personalNumber<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_260<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span> <span class="coMULTI">/* ... */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_4.2'>4.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.1.13'>3.1.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s262' name='standard_s262'><div class='standard'><div>262&nbsp;S</div></div></a><div class='headline'>Non virtual function redefined.</div></div><p>Overloading or hiding non-virtual member functions can result in unexpected behaviour as non-virtual functions are statically bound. This results in the declaration type of the pointer or reference determining the selection of member functions and not what the pointer or reference is actually pointing at.</p>
<p>This standard can be further restricted to check for overloaded members with differing parameter types by setting the modifier <a href='standard_flags.htm#flag_379'>379</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="coMULTI">/**************************************************************
 * Standard 262 S : Non virtual function redefined.
 **************************************************************/</span>
&nbsp;
class Base
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    <span class="kw4">void</span> myFunc<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class Derived <span class="sy0">:</span> public Base
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    <span class="kw4">void</span> myFunc<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> someFunc<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Derived derived<span class="sy0">;</span>
  Base <span class="sy0">*</span>base_ptr <span class="sy0">=</span> <span class="sy0">&amp;</span>derived<span class="sy0">;</span>
  Derived <span class="sy0">*</span>derived_ptr <span class="sy0">=</span> <span class="sy0">&amp;</span>derived<span class="sy0">;</span>
&nbsp;
  base_ptr<span class="sy0">-&gt;</span>myFunc<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>    <span class="co1">// Calls Base::myFunc despite pointing at Derived object! </span>
  derived_ptr<span class="sy0">-&gt;</span>myFunc<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.3.11'>3.3.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_94'>94</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_379'>379</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_140'>140</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s263' name='standard_s263'><div class='standard'><div>263&nbsp;S</div></div></a><div class='headline'>Namespace prohibited.</div></div><p>This standard checks for the use of C++ namespaces.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="coMULTI">/********************************************************
 * Standard 263 S : Namespace prohibited.
 ********************************************************/</span>
&nbsp;
namespace MySpace1 <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  class MyString
  <span class="br0">&#123;</span>
    <span class="co1">// ...</span>
  <span class="br0">&#125;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> static_263 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s264' name='standard_s264'><div class='standard'><div>264&nbsp;S</div></div></a><div class='headline'>Class template prohibited.</div></div><p>The use of class templates is prohibited as they are regarded as dangerous.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="coMULTI">/***************************************************
 *  Standard 264 S : Class template prohibited.
 ***************************************************/</span>
&nbsp;
template <span class="sy0">&lt;</span>class Atype<span class="sy0">&gt;</span> class tplate <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    tplate <span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    Atype getvalue <span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw4">void</span> setvalue <span class="br0">&#40;</span>Atype val<span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    Atype value<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s265' name='standard_s265'><div class='standard'><div>265&nbsp;S</div></div></a><div class='headline'>Function template prohibited.</div></div><p>The use of function templates is prohibited as they are regarded as dangerous.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &lt;vector&gt;</span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard 265 S : Function template prohibited.
 *******************************************************/</span>
&nbsp;
template <span class="sy0">&lt;</span>class Tplate<span class="sy0">&gt;</span> <span class="kw4">void</span> sort<span class="br0">&#40;</span>std<span class="sy0">::</span><span class="me2">vector</span> <span class="sy0">&lt;</span>Tplate<span class="sy0">&gt;</span> array <span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_265<span class="br0">&#40;</span>std<span class="sy0">::</span><span class="me2">vector</span> <span class="sy0">&lt;</span>int<span class="sy0">&gt;</span> <span class="sy0">&amp;</span>iv<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  sort<span class="br0">&#40;</span>iv<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="co1">// invoke sort(vector &lt;int&gt; )</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s266' name='standard_s266'><div class='standard'><div>266&nbsp;S</div></div></a><div class='headline'>Constructor defined within class declaration.</div></div><p>Constructors should not be implicitly inlined by defining them in the class body. Inline functions that invoke other inline functions often become too complex for the compiler to handle - this is especially true of constructors and destructors. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> Uint_32<span class="sy0">;</span>
&nbsp;
<span class="co1">//</span>
<span class="co1">// Standard 266 S : Constructor defined within class declaration.</span>
<span class="co1">// A/Ref: 6.1.9.5</span>
<span class="co1">// </span>
&nbsp;
class Person
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    Person <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    ~Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    Uint_32 personalNumber<span class="sy0">;</span>
  public<span class="sy0">:</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> Uint_32 pNumber<span class="br0">&#41;</span>    <span class="co1">// Constructor definition </span>
    <span class="br0">&#123;</span>
      personalNumber <span class="sy0">=</span> pNumber<span class="sy0">;</span>
    <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="co1">//</span>
<span class="co1">//</span>
<span class="co1">// Copyright (c) 2006 Liverpool Data Research Associates</span>
<span class="co1">//</span>
<span class="co1">//</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_7.3'>7.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.1.6'>3.1.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_225'>225</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s267' name='standard_s267'><div class='standard'><div>267&nbsp;S</div></div></a><div class='headline'>Hexadecimal number with lower case char.</div></div><p>Hexadecimal constants will be represented using all upper case letters.</p>
<p>This standard can be relaxed so as to allow a lower case x by setting the modifier <a href='standard_flags.htm#flag_208'>208</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/****************************************************************
 * Standard 267 S : Hexadecimal number with lower case char.
 ****************************************************************/</span> 
&nbsp;
<span class="kw4">typedef</span> <span class="kw2">enum</span> mask_enum_type
<span class="br0">&#123;</span>
  mask_first <span class="sy0">=</span> <span class="nu12">0X01</span><span class="sy0">,</span>
  mask_all <span class="sy0">=</span> <span class="nu12">0xff</span>    <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span> mask_enum_type<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_150'>150</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_208'>208</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_271'>271</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_208'>208</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s268' name='standard_s268'><div class='standard'><div>268&nbsp;S</div></div></a><div class='headline'>Empty initialisation exprsn in for loop.</div></div><p>Null initialise expressions in for loops will not be used; a while loop will be used instead. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/****************************************************************
 * Standard 268 S : Empty initialisation exprsn in for loop.
 * A/Ref:
 ****************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Uint_32 loop<span class="sy0">;</span>
  Uint_32 myVar <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
  <span class="kw4">const</span> Uint_32 max <span class="sy0">=</span> 10U<span class="sy0">;</span>
  <span class="coMULTI">/* ... */</span> 
  <span class="kw1">for</span> <span class="br0">&#40;</span><span class="sy0">;</span> loop <span class="sy0">&lt;</span> max<span class="sy0">;</span> loop<span class="sy0">++</span><span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="coMULTI">/* ... */</span> 
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_165'>165</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_200'>200</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s269' name='standard_s269'><div class='standard'><div>269&nbsp;S</div></div></a><div class='headline'>Empty increment exprsn in for loop.</div></div><p>The 3rd clause in a for loop should not be empty when there is a test in the 2nd clause, as it is not clear to the user how the loop counter is changed. A while loop should be used instead of a for loop if there is no loop counter.</p>
<p>This standard can be further restricted to prohibit an empty 3rd clause if the 2nd clause is empty by setting the modifier <a href='standard_flags.htm#flag_424'>424</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.  An exception is made for for loops where all the clauses are empty.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/****************************************************************
 * Standard 269 S : Empty increment exprsn in for loop.
 ****************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_269<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 loop<span class="sy0">;</span>
  UINT_32 myVar <span class="sy0">=</span> 0U<span class="sy0">;</span>
  <span class="kw4">const</span> UINT_32 max <span class="sy0">=</span> 10U<span class="sy0">;</span>
&nbsp;
  <span class="kw1">for</span> <span class="br0">&#40;</span>loop <span class="sy0">=</span> 0U<span class="sy0">;</span> loop <span class="sy0">&lt;</span> max<span class="sy0">;</span><span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant  */</span>
  <span class="br0">&#123;</span>
    <span class="coMULTI">/* ... */</span> 
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_165'>165</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_424'>424</a> = 1</td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_66'>66</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_200'>200</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_424'>424</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_350'>350</a>, <a href='lmtcp_model.htm#rule_lmtcp_352'>352</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_13.5'>13.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_424'>424</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_66'>66</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_13.5'>13.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_424'>424</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m3.3.1'>M3.3.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_424'>424</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s270' name='standard_s270'><div class='standard'><div>270&nbsp;S</div></div></a><div class='headline'>For loop initialisation is not simple.</div></div><p>The initialisation expression in a for loop will perform no actions other than to initialise the value of a single for loop parameter.</p>
<p>This standard can be relaxed to permit function calls in the initialisation expression of a for loop by setting the modifier <a href='standard_flags.htm#flag_249'>249</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/****************************************************************
 * Standard 270 S : For loop initialisation is not simple.
 ****************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_270<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 loop<span class="sy0">;</span>
  UINT_32 myVar <span class="sy0">=</span> 0U<span class="sy0">;</span>
  <span class="kw4">const</span> UINT_32 max <span class="sy0">=</span> 10U<span class="sy0">;</span>
&nbsp;
  <span class="kw1">for</span> <span class="br0">&#40;</span> <span class="sy0">++</span>myVar<span class="sy0">,</span> loop <span class="sy0">=</span> 0U<span class="sy0">;</span> loop <span class="sy0">&lt;</span> max<span class="sy0">;</span> loop<span class="sy0">++</span> <span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#123;</span>
    <span class="coMULTI">/* ... */</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_66'>66</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_198'>198</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_249'>249</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_351'>351</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_249'>249</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_13.5'>13.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_249'>249</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_66'>66</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_13.5'>13.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_249'>249</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.14.2'>R.14.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_249'>249</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m3.3.1'>M3.3.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s271' name='standard_s271'><div class='standard'><div>271&nbsp;S</div></div></a><div class='headline'>For loop incrementation is not simple.</div></div><p>The increment expression in a for loop will perform no action other than to change a single loop parameter using the ++ or  operators. The loop parameter must be a variable with a simple integer or float type.</p>
<p>If MISRA-C++:2008 checking is enabled, the behaviour is modified so that += and -= are permitted, providing the increment step remains constant.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/****************************************************************
 * Standard 271 S : For loop incrementation is not simple.
 ****************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_271<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 loop<span class="sy0">;</span>
  UINT_32 myVar <span class="sy0">=</span> 0U<span class="sy0">;</span>
  <span class="kw4">const</span> UINT_32 max <span class="sy0">=</span> 10U<span class="sy0">;</span>
&nbsp;
  <span class="kw1">for</span> <span class="br0">&#40;</span>loop <span class="sy0">=</span> 0U<span class="sy0">;</span> loop <span class="sy0">&lt;</span> max<span class="sy0">;</span> myVar<span class="sy0">++,</span> loop<span class="sy0">++</span><span class="br0">&#41;</span> <span class="coMULTI">/* not compliant - 2 loops parameters */</span>
  <span class="br0">&#123;</span>
    <span class="coMULTI">/* ... */</span> 
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.3'>9.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_66'>66</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_199'>199</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_351'>351</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_13.5'>13.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-5-4'>6-5-4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_331'>331</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_66'>66</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_13.5'>13.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.14.2'>R.14.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m3.3.1'>M3.3.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s272' name='standard_s272'><div class='standard'><div>272&nbsp;S</div></div></a><div class='headline'>Found #ifndef (ref. removed).</div></div><p>The #ifndef and #endif pre-processor directives shall only be used as part of the technique to prevent multiple inclusions of the same header file. It is preferable to use code rather than the #ifndef pre-processor directive in all other cases.</p>
<p>Any #ifndef and #endif pre-processor directives that are not used to prevent multiple inclusions will be removed in the reformatted text (ref. removed).</p>
<div class='title'>Example</div>
<p>Static_272.h</p>
<pre class="code c"><span class="co2">#ifndef STATIC_272_H</span>
<span class="co2">#define STATIC_272_H</span>
&nbsp;
<span class="coMULTI">/************************************************
 * Standard 272 S : Found #ifndef (ref. removed).
 ************************************************/</span> 
&nbsp;
<span class="coMULTI">/* not compliant */</span>
<span class="co2">#ifndef REPORT_ERRORS</span>
<span class="co2">#define REPORT_WARNINGS</span>
<span class="co2">#endif</span>
&nbsp;
<span class="coMULTI">/* All declarations and definitions - excluded
   by the preprocessor if the file is included more than once. */</span> 
&nbsp;
<span class="co2">#endif</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.11.2'>3.11.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_28'>28</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_34'>34</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s273' name='standard_s273'><div class='standard'><div>273&nbsp;S</div></div></a><div class='headline'>Found #define.</div></div><p>The #define pre-processor directive shall only be used as part of the technique to prevent multiple inclusions of the same header file. Using #define for inline macros and constants shall be avoided.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#ifndef STATIC_273_H</span>
<span class="co2">#define STATIC_273_H</span>
&nbsp;
<span class="coMULTI">/*************************************
 * Standard 273 S : Found #define.
 *************************************/</span> 
&nbsp;
<span class="coMULTI">/* not compliant */</span>
<span class="co2">#define MYSQMACRO ((X) * (X))</span>
&nbsp;
<span class="coMULTI">/* All declarations and definitions - excluded
   by the preprocessor if the file is included more than once. */</span> 
&nbsp;
<span class="co2">#endif</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_31'>31</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_37'>37</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s274' name='standard_s274'><div class='standard'><div>274&nbsp;S</div></div></a><div class='headline'>Name found with length less than ***.</div></div><p>In order that an identifier name be meaningful, it must be no shorter than the specified pre-determined minimum length. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/****************************************************************
 * Standard 274 S : Name found with length less than ***.
 * A/Ref:
 ****************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Uint_32 x<span class="sy0">;</span>            <span class="coMULTI">/* Avoid - too short to be meaningful */</span> 
  Uint_32 yCoordinate<span class="sy0">;</span>  <span class="coMULTI">/* Okay - a meaningful name */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_8.1.1'>8.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_37'>37</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.2.3'>3.2.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.8.1.1'>4.8.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_6.2.f'>6.2.f</a>, <a href='netrino_model.htm#rule_netrino_7.1.e'>7.1.e</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s275' name='standard_s275'><div class='standard'><div>275&nbsp;S</div></div></a><div class='headline'>Tag missing in struct, union or enum.</div></div><p>Omission of a tag has the disadvantage that no further definitions of the structure, union or enum may be made later in the program code. Without a tag, the declaration cannot be referred to and definitions are not possible. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/****************************************************************
 * Standard 275 S : Tag missing in struct, union or enum.
 ****************************************************************/</span> 
&nbsp;
<span class="kw4">struct</span>             <span class="coMULTI">/* not compliant - tag missing */</span> 
<span class="br0">&#123;</span>
  UINT_32 x_value<span class="sy0">;</span>
  UINT_32 y_value<span class="sy0">;</span>
<span class="br0">&#125;</span> pos_var<span class="sy0">;</span>
&nbsp;
<span class="kw4">struct</span> Position    <span class="coMULTI">/* compliant - struct tag included, allowing multiple definitions */</span> 
<span class="br0">&#123;</span>
  UINT_32 anon_x_value<span class="sy0">;</span>
  UINT_32 anon_y_Value<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> static_275<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  pos_var.<span class="me1">x_value</span> <span class="sy0">=</span> 0U<span class="sy0">;</span>
  pos_var.<span class="me1">y_value</span> <span class="sy0">=</span> 0U<span class="sy0">;</span>
&nbsp;
  <span class="kw4">struct</span> Position first_pos <span class="sy0">=</span> <span class="br0">&#123;</span>1U<span class="sy0">,</span> 1U<span class="br0">&#125;</span><span class="sy0">;</span>
  <span class="kw4">struct</span> Position second_pos <span class="sy0">=</span> <span class="br0">&#123;</span>2U<span class="sy0">,</span> 1U<span class="br0">&#125;</span><span class="sy0">;</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s276' name='standard_s276'><div class='standard'><div>276&nbsp;S</div></div></a><div class='headline'>Case is not part of switch enumeration.</div></div><p>The switch statement contains a case constant expression which is not part of the switch chooser enumerated list of values. Case values shall be restricted to those identified in the enumeration. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
<span class="kw4">typedef</span> <span class="kw2">enum</span> Seasons
<span class="br0">&#123;</span>
  spring<span class="sy0">,</span>
  summer<span class="sy0">,</span>
  autumn<span class="sy0">,</span>
  winter
<span class="br0">&#125;</span> Seasons<span class="sy0">;</span>
&nbsp;
Seasons season<span class="sy0">;</span>
Uint_32 x1<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/****************************************************************
 * Standard 276 S : Case is not part of switch enumeration.
 * A/Ref:
 ****************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">switch</span> <span class="br0">&#40;</span>season<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="kw1">case</span> spring<span class="sy0">:</span>
      x1 <span class="sy0">=</span> 1U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw1">case</span> summer<span class="sy0">:</span>
      x1 <span class="sy0">=</span> 4U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw1">case</span> autumn<span class="sy0">:</span>
      x1 <span class="sy0">=</span> 7U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw1">case</span> <span class="nu0">4</span><span class="sy0">:</span>
      x1 <span class="sy0">=</span> 10U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw1">default</span><span class="sy0">:</span>
      <span class="kw2">break</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_5.1.6'>5.1.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.3'>R.10.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s277' name='standard_s277'><div class='standard'><div>277&nbsp;S</div></div></a><div class='headline'>Switch chooser is not an enumeration.</div></div><p>The switch chooser shall be an enumeration so that the list of possible values are well-defined and that the switch statement may be checked to cater for all expected cases. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
&nbsp;
Uint_32 season<span class="sy0">;</span>
Uint_32 x1<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/****************************************************************
 * Standard 277 S : Switch chooser is not an enumeration.
 * A/Ref:
 ****************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">switch</span> <span class="br0">&#40;</span>season<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="kw1">case</span> <span class="nu0">1</span><span class="sy0">:</span>
      x1 <span class="sy0">=</span> 1U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw1">case</span> <span class="nu0">2</span><span class="sy0">:</span>
      x1 <span class="sy0">=</span> 4U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw1">case</span> <span class="nu0">3</span><span class="sy0">:</span>
      x1 <span class="sy0">=</span> 7U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw1">case</span> <span class="nu0">4</span><span class="sy0">:</span>
      x1 <span class="sy0">=</span> 10U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw1">default</span><span class="sy0">:</span>
      <span class="kw2">break</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s278' name='standard_s278'><div class='standard'><div>278&nbsp;S</div></div></a><div class='headline'>Switch has missing or extra cases.</div></div><p>There is a mismatch between the defined enumerated value list and the cases catered for by the switch statement. All switch statements that do not intend to test for every enumeration value shall, at least, contain a final default clause.</p>
<p>This standard can be relaxed to allow switch statements that do not test for every enumeration value, but have a default clause. This is done by setting the modifier <a href='standard_flags.htm#flag_233'>233</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw2">enum</span> Seasons
<span class="br0">&#123;</span>
  spring<span class="sy0">,</span>
  summer<span class="sy0">,</span>
  autumn<span class="sy0">,</span>
  winter
<span class="br0">&#125;</span> Seasons<span class="sy0">;</span>
&nbsp;
Seasons season<span class="sy0">;</span>
UINT_32 x1<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/****************************************************************
 * Standard 278 S : Switch has missing or extra cases.
 ****************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_278<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">switch</span> <span class="br0">&#40;</span>season<span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#123;</span>
    <span class="kw1">case</span> spring<span class="sy0">:</span>
      x1 <span class="sy0">=</span> 1U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw1">case</span> summer<span class="sy0">:</span>
      x1 <span class="sy0">=</span> 4U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw1">case</span> autumn<span class="sy0">:</span>
      x1 <span class="sy0">=</span> 7U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw1">default</span><span class="sy0">:</span>
      <span class="kw2">break</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.16.17'>5.16.17</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_3.1.9'>3.1.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_5.1.6'>5.1.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_5.11'>5.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_194'>194</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_233'>233</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_357'>357</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s279' name='standard_s279'><div class='standard'><div>279&nbsp;S</div></div></a><div class='headline'>Try keyword found.</div></div><p>Exceptions shall not be used. The use of exceptions can lead to unexpected code branches, especially in library code which was not designed to handle exceptions. Also, other code may generate unexpected exceptions for which there is no handler.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**************************************
 * Standard 279 S : Try keyword found.
 **************************************/</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> f<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="co1">// ...</span>
  <span class="co1">// UINT_32 type exception thrown here</span>
  <span class="co1">// ...</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_279 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span> 
  try  <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#123;</span>
    f<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
  catch <span class="br0">&#40;</span>UINT_32 u <span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="co1">// ...</span>
    <span class="co1">// handle UINT_32 exceptions here...</span>
    <span class="co1">// ...</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_35'>35</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_208'>208</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s280' name='standard_s280'><div class='standard'><div>280&nbsp;S</div></div></a><div class='headline'>Catch keyword found.</div></div><p>Exceptions shall not be used. The use of exceptions can lead to unexpected code branches, especially in library code which was not designed to handle exceptions. Also, other code may generate unexpected exceptions for which there is no handler.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**************************************
 * Standard 280 S : Catch keyword found.
 **************************************/</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> f<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="co1">// ...</span>
  <span class="co1">// UINT_32 type exception thrown here</span>
  <span class="co1">// ...</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_280 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  try
  <span class="br0">&#123;</span>
    f<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
  catch <span class="br0">&#40;</span>UINT_32 u <span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#123;</span>
    <span class="co1">// ...</span>
    <span class="co1">// handle UINT_32 exceptions here...</span>
    <span class="co1">// ...</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_35'>35</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_1.15'>1.15</a>, <a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_1.17'>1.17</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_208'>208</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s281' name='standard_s281'><div class='standard'><div>281&nbsp;S</div></div></a><div class='headline'>Throw keyword found.</div></div><p>Exceptions shall not be used. The use of exceptions can lead to unexpected code branches, especially in library code which was not designed to handle exceptions. Also, other code may generate unexpected exceptions for which there is no handler.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="coMULTI">/*************************************************************
 * Standard 281 S : Throw keyword found.
 *************************************************************/</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_281<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  try
  <span class="br0">&#123;</span>
    throw <span class="nu0">20</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#125;</span>
  catch <span class="br0">&#40;</span><span class="kw4">int</span> e<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="co1">// ...</span>
    <span class="co1">// handle int exceptions here...</span>
    <span class="co1">// ...</span>
&nbsp;
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_35'>35</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_1.15'>1.15</a>, <a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_1.17'>1.17</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_208'>208</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s282' name='standard_s282'><div class='standard'><div>282&nbsp;S</div></div></a><div class='headline'>Mutable keyword found.</div></div><p>Avoid the use of mutable where possible. The 'mutable' keyword can be used to declare member data which can be modified in const functions, this should only be used where the member data does not affect the externally visible state of the object. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
&nbsp;
<span class="co1">//</span>
<span class="co1">// Standard 282 S : Mutable keyword found.</span>
<span class="co1">// A/Ref:</span>
<span class="co1">// </span>
&nbsp;
class Person
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> Uint_32 personNum<span class="br0">&#41;</span><span class="sy0">;</span>
    Person <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    ~Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    Uint_32 bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <span class="kw4">const</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    Uint_32 personalNumber<span class="sy0">;</span>
    mutable Uint_32 pNum<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
Uint_32 Person<span class="sy0">::</span><span class="me2">bar</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <span class="kw4">const</span>
<span class="br0">&#123;</span>
  <span class="co1">// ... </span>
  <span class="co1">// ok to amend pNum here, even though this is a const member function </span>
  <span class="co1">// ... </span>
  <span class="kw1">return</span> pNum<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="co1">//</span>
<span class="co1">//</span>
<span class="co1">// Copyright (c) 2006 Liverpool Data Research Associates</span>
<span class="co1">//</span>
<span class="co1">//</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_6'>6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s283' name='standard_s283'><div class='standard'><div>283&nbsp;S</div></div></a><div class='headline'>Multiple direct inheritance found.</div></div><p>Multiple direct inheritance describes an inheritance structure where more than one direct base class appears in the base list of a derived class declaration. Multiple inheritance can lead to complicated inheritance hierarchies that are difficult to comprehend and maintain.</p>
<p>This standard can be relaxed to allow the following forms by setting the modifier <a href='standard_flags.htm#flag_378'>378</a> to 1 in the c/cppreport.dat file:</p>
<ul>
<li style='margin-left : 0px;'>

 private inheritance
</li>
<li style='margin-left : 0px;'>

 1 protected inheritance
</li>
<li style='margin-left : 0px;'>

 public inheritance if all members are pure virtual functions, except for the destructor
</li>
</ul>
<p><a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="coMULTI">/******************************************************
 * Standard 283 S : Multiple direct inheritance found.
 ******************************************************/</span>
&nbsp;
class AClass
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    AClass<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit AClass<span class="br0">&#40;</span><span class="kw4">const</span> AClass <span class="sy0">&amp;</span>ac<span class="br0">&#41;</span><span class="sy0">;</span>
    AClass<span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> AClass <span class="sy0">&amp;</span>ac<span class="br0">&#41;</span><span class="sy0">;</span>
    ~AClass<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class AAClass
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    AAClass<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit AAClass<span class="br0">&#40;</span><span class="kw4">const</span> AAClass <span class="sy0">&amp;</span>aac<span class="br0">&#41;</span><span class="sy0">;</span>
    AAClass<span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> AAClass <span class="sy0">&amp;</span>aac<span class="br0">&#41;</span><span class="sy0">;</span>
    ~AAClass<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class BClass <span class="sy0">:</span> public AClass<span class="sy0">,</span>  <span class="co1">// not compliant</span>
               public AAClass  <span class="co1">// direct multiple inheritance </span>
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    BClass<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit BClass<span class="br0">&#40;</span><span class="kw4">const</span> BClass <span class="sy0">&amp;</span>bc<span class="br0">&#41;</span><span class="sy0">;</span>
    BClass<span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> BClass <span class="sy0">&amp;</span>bc<span class="br0">&#41;</span><span class="sy0">;</span>
    ~BClass<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class CClass <span class="sy0">:</span> public BClass  <span class="co1">// indirect multiple inheritance </span>
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    CClass<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit CClass<span class="br0">&#40;</span><span class="kw4">const</span> CClass <span class="sy0">&amp;</span>cc<span class="br0">&#41;</span><span class="sy0">;</span>
    CClass<span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> CClass <span class="sy0">&amp;</span>cc<span class="br0">&#41;</span><span class="sy0">;</span>
    ~CClass<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_60'>60</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.4.6'>3.4.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_88'>88</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_378'>378</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_133'>133</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s284' name='standard_s284'><div class='standard'><div>284&nbsp;S</div></div></a><div class='headline'>Cast preceded by a cast.</div></div><p>A cast preceded by a cast is likely to result in a redundant stage of conversion in the statement. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">short</span> Uint_16<span class="sy0">;</span>
<span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
<span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">long</span> Uint_64<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*******************************************
 * Standard 284 S : Cast preceded by a cast.
 * A/Ref:
 *******************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span>Uint_16 original<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Uint_64 myInt<span class="sy0">;</span>
&nbsp;
  myInt <span class="sy0">=</span> <span class="br0">&#40;</span>Uint_64<span class="br0">&#41;</span><span class="br0">&#40;</span>Uint_32<span class="br0">&#41;</span>original<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s285' name='standard_s285'><div class='standard'><div>285&nbsp;S</div></div></a><div class='headline'>Class definition not needed in file.</div></div><p>Declarations of classes should not be included unless they are used. Classes for which member definitions have been provided, or contain a class, or are nested within another class, or used as a base, are exempt from this standard.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/******************************************************
 * Standard 285 S : Class definition not needed in file.
 ******************************************************/</span>
&nbsp;
class Person   <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 personalNumber<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_285<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="co1">// Statements... </span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_38'>38</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_56'>56</a>, <a href='lmtcp_model.htm#rule_lmtcp_138'>138</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s286' name='standard_s286'><div class='standard'><div>286&nbsp;S</div></div></a><div class='headline'>Functions defined in header file.</div></div><p>Header files shall not contain function definitions. A definition may not be suitable for all files which include the header file.</p>
<p>Header files should typically contain interface declarations - not implementation details. </p>
<p>This standard can be relaxed to allow inline definitions in header files by setting the modifier <a href='standard_flags.htm#flag_238'>238</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<p>Static_286.h</p>
<pre class="code c"><span class="co2">#ifndef STATIC_286_H</span>
<span class="co2">#define STATIC_286_H</span>
&nbsp;
<span class="coMULTI">/* Some declarations... */</span> 
<span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/****************************************************
 * Standard 286 S : Functions defined in header file.
 ****************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_286_header<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* Statements... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="co2">#endif</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_2.3.1'>2.3.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_3.8'>3.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_238'>238</a> = 1</td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_39'>39</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_238'>238</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_57'>57</a>, <a href='lmtcp_model.htm#rule_lmtcp_204'>204</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_238'>238</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_8.5'>8.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_3-1-1'>3-1-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_238'>238</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_8.5'>8.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_4.2.c'>4.2.c</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m4.4.5'>M4.4.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s287' name='standard_s287'><div class='standard'><div>287&nbsp;S</div></div></a><div class='headline'>Variable definition in header file.</div></div><p>Header files shall not contain variable definitions. A definition may not be suitable for all files which include the header file. Header files should typically contain interface declarations - not implementation details. </p>
<p>This standard can be relaxed to allow const declarations by setting the modifier <a href='standard_flags.htm#flag_250'>250</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<p>Static_287.h</p>
<pre class="code c"><span class="co2">#ifndef STATIC_287_H</span>
<span class="co2">#define STATIC_287_H</span>
&nbsp;
<span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard 287 S : Variable definition in header file.
 *******************************************************/</span> 
&nbsp;
<span class="kw4">const</span> UINT_32 const_var <span class="sy0">=</span> 99U<span class="sy0">;</span>  <span class="coMULTI">/* not compliant, but permitted with modifier 250 */</span> 
UINT_32 myVar <span class="sy0">=</span> 3U<span class="sy0">;</span>             <span class="coMULTI">/* not compliant */</span> 
&nbsp;
<span class="co2">#endif</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_2.3.1'>2.3.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_3.8'>3.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_39'>39</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_250'>250</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_57'>57</a>, <a href='lmtcp_model.htm#rule_lmtcp_204'>204</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_250'>250</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_8.5'>8.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_3-1-1'>3-1-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_8.5'>8.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_4.2.c'>4.2.c</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m4.4.5'>M4.4.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s288' name='standard_s288'><div class='standard'><div>288&nbsp;S</div></div></a><div class='headline'>Header file is not .h.</div></div><p>By convention, header files shall end with the extension '.h'. </p>
<p>This standard can be relaxed to allow the '.hpp' extension by setting the modifier <a href='standard_flags.htm#flag_301'>301</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<p>Static_288.x</p>
<pre class="code c"><span class="coMULTI">/* Header file ends in &quot;x&quot; */</span></pre><p>Static_288.hpp</p>
<pre class="code c"><span class="coMULTI">/* Header file ends in &quot;hpp&quot; */</span></pre><p>Static_288.c</p>
<pre class="code c"><span class="co2">#include &quot;Static_288.x&quot;   /* not compliant */</span>
<span class="co2">#include &quot;Static_288.hpp&quot; /* not compliant, but permitted by modifier 301 */</span>
&nbsp;
<span class="coMULTI">/*****************************************
 * Standard 288 S : Header file is not .h.
 *****************************************/</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_288 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_13'>13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_2.2.2'>2.2.2</a>, <a href='fsb582-c_model.htm#rule_fsb582-c_3.11.1'>3.11.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_301'>301</a> = 1</td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_3.1'>3.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_301'>301</a> = 1</td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_32'>32</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_53'>53</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_38'>38</a>, <a href='lmtcp_model.htm#rule_lmtcp_76'>76</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_4.1.b'>4.1.b</a>, <a href='netrino_model.htm#rule_netrino_4.3.f'>4.3.f</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s289' name='standard_s289'><div class='standard'><div>289&nbsp;S</div></div></a><div class='headline'>Header file name does not include class name.</div></div><p>Each header file shall include no more than one class declaration (see <a href='standards.htm#standard_s258'>S 258</a>), and, if it does indeed contain a single class declaration, the header file name should reflect its content by containing the name of that class. Underscores and case are ignored when comparing the class and header file name.</p>
<p><a href='standards.htm#standard_s290'>S 290</a> provides a similar check on a source file containing a class definition.</p>
<div class='title'>Example</div>
<p>Static_289.h</p>
<pre class="code c++"><span class="co2">#ifndef STATIC_289_H</span>
<span class="co2">#define STATIC_289_H</span>
<span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/****************************************************************
 * Standard 289 S : Header file name does not include class name.
 ****************************************************************/</span>
&nbsp;
class Person
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 personalNumber<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="co2">#endif</span>
<span class="coMULTI">/* not compliant - filename does not include class name */</span></pre><p>Static_289.cpp</p>
<pre class="code c++"><span class="co2">#include &quot;Static_289.h&quot;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_289<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
 <span class="sy0">;</span> <span class="coMULTI">/* ... */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_3.2'>3.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_55'>55</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s290' name='standard_s290'><div class='standard'><div>290&nbsp;S</div></div></a><div class='headline'>File name does not contain defined class name.</div></div><p>Source code files that contain the definition of a particular class (or struct) shall have a name that reflects the content and contain the defined class name. Note, that for files that contain definitions for more than one class, or specialisations of a templated class, this penalty is not applicable.  Underscores and case are ignored when comparing the class and source file name.</p>
<p><a href='standards.htm#standard_s289'>289 S</a> provides a similar check on a header file containing a class declaration.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/****************************************************************
 * Standard 290 S : File name does not contain defined class name.
 *
 * Filename is Static_290.cpp
 ****************************************************************/</span>
&nbsp;
class Person
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    UINT_32 get_number <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="kw1">return</span> number<span class="sy0">;</span> <span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 number<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_290<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
 <span class="sy0">;</span> <span class="coMULTI">/* ... */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_3.2'>3.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_56'>56</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s291' name='standard_s291'><div class='standard'><div>291&nbsp;S</div></div></a><div class='headline'>First parameter not on same line as function.</div></div><p>When declaring and defining functions, the leading parenthesis and the first argument will be written on the same line as the function name. Each additional argument will be written on a separate line (with the closing parenthesis directly after the last argument) to promote readability and a consistent style. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
&nbsp;
<span class="co1">//</span>
<span class="co1">// Standard 291 S : First parameter not on same line as function.</span>
<span class="co1">// A/Ref:</span>
<span class="co1">// </span>
&nbsp;
<span class="kw4">void</span> someFunc<span class="br0">&#40;</span>
         Uint_32 <span class="sy0">&amp;</span>firstParam<span class="sy0">,</span>
         Uint_32 <span class="sy0">&amp;</span>secondParam<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="co1">// Statements ...</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="co1">//</span>
<span class="co1">//</span>
<span class="co1">// Copyright (c) 2006 Liverpool Data Research Associates</span>
<span class="co1">//</span>
<span class="co1">//</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_6.6'>6.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_58'>58</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_83'>83</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s292' name='standard_s292'><div class='standard'><div>292&nbsp;S</div></div></a><div class='headline'>No space between #include and filename.</div></div><p>The #include directive shall be followed by either a &lt;filename&gt; or filename sequence, and separated by a space.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/**********************************************************
 * Standard 292 S : No space between #include and filename.
 **********************************************************/</span> 
&nbsp;
<span class="co2">#include &lt;foo.h&gt;          /* compliant */ </span>
<span class="co2">#include&lt;anotherFoo.h&gt;    /* not compliant: no space */ </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_292 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* ... */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_19.3'>19.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-2-6'>16-2-6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_19.3'>19.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_p1.4.1'>P1.4.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s293' name='standard_s293'><div class='standard'><div>293&nbsp;S</div></div></a><div class='headline'>Non ANSI/ISO construct used.</div></div><p>All code constructs shall be ANSI/ISO compliant, i.e. conform to the ISO C/C++ Standard.</p>
<p>In order to support portability and compiler compatibility, avoid compiler specific language or pre-processor extensions.</p>
<p>To enable this penalty the user must indicate to what extent the check should be performed. The c/cppvals.dat file provides a mechanism to select specific extensions to the language through the 165 record entry. For example, extensions supported under a particular language dialect may be checked in isolation:</p>
<pre>
165    4GREEN         4 indicates dialect-specific, and GREEN (Green Hills) is the name of the dialect
</pre><div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/*****************************************
 * Standard 293 S : Non ANSI/ISO construct used.
 ***************************************************/</span>
&nbsp;
  <span class="coMULTI">/* cvals.dat has entry &quot;GREEN   35  10 __inline__&quot;,
     which indicates __inline__ is used by the GREEN dialect */</span>
&nbsp;
__inline__ <span class="kw4">void</span> check_ansi<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <span class="coMULTI">/* non-compliant if GREEN dialect selected */</span>
<span class="br0">&#123;</span>
   <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> static_293 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    check_ansi <span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_135'>135</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.1.1'>3.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_13.4'>13.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_1'>1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_8'>8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_8'>8</a>, <a href='lmtcp_model.htm#rule_lmtcp_402'>402</a>, <a href='lmtcp_model.htm#rule_lmtcp_403'>403</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_1.1'>1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_1'>1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_1.1'>1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.2'>R.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_1.1.a'>1.1.a</a>, <a href='netrino_model.htm#rule_netrino_1.1.b'>1.1.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_p1.1.1'>P1.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s294' name='standard_s294'><div class='standard'><div>294&nbsp;S</div></div></a><div class='headline'>Namespace nested more than *** deep.</div></div><p>Namespaces will not be nested more than a pre-determined maximum number of levels deep. Deeply nested namespaces can be difficult to comprehend and use correctly.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co1">//</span>
<span class="co1">// Standard 294 S : Namespace nested more than *** deep.</span>
<span class="co1">// </span>
&nbsp;
namespace MySpace1L1
<span class="br0">&#123;</span>
  namespace MySpace1L2
  <span class="br0">&#123;</span>
    namespace MySpace1L3
    <span class="br0">&#123;</span>
      class MyString
      <span class="br0">&#123;</span>
        public<span class="sy0">:</span>
          <span class="co1">// ...</span>
        protected<span class="sy0">:</span>
          <span class="co1">//...</span>
        private<span class="sy0">:</span>
          <span class="co1">//...</span>
      <span class="br0">&#125;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="co1">//</span>
<span class="co1">//</span>
<span class="co1">// Copyright (c) 2006 Liverpool Data Research Associates</span>
<span class="co1">//</span>
<span class="co1">//</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_99'>99</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_157'>157</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s295' name='standard_s295'><div class='standard'><div>295&nbsp;S</div></div></a><div class='headline'>Use of digraph.</div></div><p>Digraphs are special two character sequences that are translated into specific single characters like { or #.</p>
<p>Digraphs, and specifically the alternatives for: { } [ ] # ##, will not be used. The use of digraphs leads to poor readability of code. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/************************************
 * Standard 295 S : Use of digraph.
 ************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_295<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="sy0">&lt;%</span>   <span class="coMULTI">/* Represents {  */</span>
&nbsp;
  <span class="coMULTI">/* ...  */</span>
&nbsp;
<span class="sy0">%&gt;</span>  <span class="coMULTI">/* Represents } */</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_52'>52</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_14.18'>14.18</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_12'>12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_13'>13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-5-1'>2-5-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s296' name='standard_s296'><div class='standard'><div>296&nbsp;S</div></div></a><div class='headline'>Function declared at block scope.</div></div><p>Functions shall always be declared at file scope. Declaring functions at block scope may be confusing, and can lead to undefined behaviour. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/****************************************************
 * Standard 296 S : Function declared at block scope.
 * A/Ref:
 ****************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/* Statements ... */</span>
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_68'>68</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_107'>107</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_202'>202</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_8.6'>8.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_3-1-2'>3-1-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_68'>68</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_8.6'>8.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s297' name='standard_s297'><div class='standard'><div>297&nbsp;S</div></div></a><div class='headline'>Inline member has more than *** source lines.</div></div><p>Only declare trivial functions 'inline'. Limit inline member functions to the pre-determined maximum number of source lines. Inline functions do not necessarily improve performance and they can have a negative effect. Inappropriate use will lead to longer compilation times, slower runtime performance and larger binaries. </p>
<p>The *** symbols refer to a user definable number for this standard, defaulting to 2. The configuration is made in the c/cpppen.dat file. Instructions for making alterations can be found in the manual. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">const</span> UINT_32 agelimit <span class="sy0">=</span> 18U<span class="sy0">;</span>
<span class="kw4">const</span> UINT_32 junior <span class="sy0">=</span> 0U<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/****************************************************************
 * Standard 297 S : Inline member has more than *** source lines.
 ****************************************************************/</span>
&nbsp;
class Person
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 personNum<span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    Person <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    ~Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 personalNumber<span class="sy0">;</span>
  public<span class="sy0">:</span>
    <span class="kw4">void</span> adjustNum<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span>personalNumber <span class="sy0">&lt;</span> agelimit<span class="br0">&#41;</span>
      <span class="br0">&#123;</span>
        personalNumber <span class="sy0">=</span>
          junior<span class="sy0">;</span>
      <span class="br0">&#125;</span>
    <span class="br0">&#125;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_297<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Person p1<span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span><span class="sy0">;</span>
  p1.<span class="me1">adjustNum</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_5.1'>5.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.1.6'>3.1.6</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_11.8'>11.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_222'>222</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s298' name='standard_s298'><div class='standard'><div>298&nbsp;S</div></div></a><div class='headline'>Non const pointer to function.</div></div><p>Non const pointers to functions shall not be used. There is a danger that a pointer whose value is calculated at run-time, may, due to an error, point to an arbitrary location.</p>
<p>Furthermore pointers to functions cause problems with dependence on the order in which function-designator and function arguments are evaluated when calling functions. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
&nbsp;
Uint_32 drawline<span class="br0">&#40;</span>Uint_32 length<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*************************************************
 * Standard 298 S : Non const pointer to function.
 * A/Ref: 6.1.6.6
 *************************************************/</span> 
&nbsp;
<span class="coMULTI">/*
 * Define a pointer to a function
 * with an 'unsigned int' as a parameter.
 */</span> 
&nbsp;
<span class="kw4">typedef</span> Uint_32 <span class="br0">&#40;</span><span class="sy0">*</span>fptr<span class="br0">&#41;</span><span class="br0">&#40;</span>Uint_32 len<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* Should be const */</span> 
&nbsp;
<span class="coMULTI">/* Now assign a function address to the pointer... */</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* Invoke the function through the function pointer... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_1.8.b'>1.8.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s299' name='standard_s299'><div class='standard'><div>299&nbsp;S</div></div></a><div class='headline'>Pointer to function declared without typedef.</div></div><p>A typedef will be used to simplify program syntax when declaring function pointers. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
&nbsp;
Uint_32 drawline<span class="br0">&#40;</span>Uint_32 length<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/****************************************************************
 * Standard 299 S : Pointer to function declared without typedef.
 * A/Ref: 6.1.6.4
 ****************************************************************/</span> 
&nbsp;
<span class="coMULTI">/*
 * Define a pointer to a function
 * with an 'unsigned int' as a parameter.
 */</span> 
&nbsp;
Uint_32 <span class="br0">&#40;</span><span class="sy0">*</span>fptr<span class="br0">&#41;</span><span class="br0">&#40;</span>Uint_32 len<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* Should be a typedef */</span> 
&nbsp;
<span class="coMULTI">/* Now assign a function address to the pointer... */</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* Invoke the function through the function pointer... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl05-c'>DCL05-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_736'>736</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_176'>176</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_319'>319</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s300' name='standard_s300'><div class='standard'><div>300&nbsp;S</div></div></a><div class='headline'>Filename extension is not .cpp.</div></div><p>C++ source code files shall end with the extension '.cpp'.</p>
<div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_3.1'>3.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_54'>54</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_56'>56</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_78'>78</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s301' name='standard_s301'><div class='standard'><div>301&nbsp;S</div></div></a><div class='headline'>} not aligned vertically below {.</div></div><p>When using braces to define the structure of the code, matching pairs shall be vertically aligned in the same column. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
&nbsp;
<span class="kw4">const</span> Uint_32 limit <span class="sy0">=</span> 32U<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/****************************************************
 * Standard 301 S : } not aligned vertically below {.
 * A/Ref:
 ****************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span>Uint_32 myParam<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>myParam <span class="sy0">&gt;</span> limit<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    myParam <span class="sy0">=</span> limit<span class="sy0">;</span>
&nbsp;
<span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_143'>143</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.3.1'>3.3.1</a>, <a href='fsb582-c_model.htm#rule_fsb582-c_3.3.2'>3.3.2</a>, <a href='fsb582-c_model.htm#rule_fsb582-c_3.3.8'>3.3.8</a>, <a href='fsb582-c_model.htm#rule_fsb582-c_3.7.5'>3.7.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.18'>9.18</a>, <a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_10.1'>10.1</a>, <a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_10.3'>10.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_60'>60</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_85'>85</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_1.3.b'>1.3.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s302' name='standard_s302'><div class='standard'><div>302&nbsp;S</div></div></a><div class='headline'>Comment possibly contains code.</div></div><p>Code that is not used (commented out) shall be deleted unless it is part of an explanation. The block commenting of code can lead to the inadvertent omission of more than was intended.   </p>
<p>It is not always possible to tell the difference between natural language text and c/cpp program text, therefore from time to time natural language text will be flagged up as code.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">const</span> UINT_32 limit <span class="sy0">=</span> 32U<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/****************************************************
 * Standard 302 S : Comment possibly contains code.
 ****************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_302 <span class="br0">&#40;</span>UINT_32 myParam<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>myParam <span class="sy0">&gt;</span> limit<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    myParam <span class="sy0">=</span> limit<span class="sy0">;</span>
    <span class="coMULTI">/* myParam--;*/</span> <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc04-c'>MSC04-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_10.2.1'>10.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_747'>747</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_10'>10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_32'>32</a>, <a href='eads-c_model.htm#rule_eads-c_168'>168</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_11.3'>11.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.10.2.1'>4.10.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_10'>10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_127'>127</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_238'>238</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_2.4'>2.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-7-2'>2-7-2</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-7-3'>2-7-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_10'>10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_2.4'>2.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_d.4.4'>D.4.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_2.1.c'>2.1.c</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.1.2'>M1.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s303' name='standard_s303'><div class='standard'><div>303&nbsp;S</div></div></a><div class='headline'>Virtual class members need virtual destructor.</div></div><p>All base classes with a virtual function shall define a virtual destructor. If the base class destructor is not virtual, and an attempt to destroy an object (of a derived class) is made through a pointer to its base class, the destructor for the base class will be invoked rather than the derived base class destructor.</p>
<p>In most cases, destructors should be virtual, because maintenance or reuse may add derived classes that require a virtual destructor. </p>
<p>By default, the violation is associated with the base class, but it can be associated with the derived classes by by setting the modifier <a href='standard_flags.htm#flag_292'>292</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="coMULTI">/*****************************************************************
 * Standard 303 S : Virtual class members need virtual destructor.
 *****************************************************************/</span> 
&nbsp;
class Base
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Base<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Base<span class="br0">&#40;</span><span class="kw4">const</span> Base <span class="sy0">&amp;</span>base<span class="br0">&#41;</span><span class="sy0">;</span>
    Base <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Base <span class="sy0">&amp;</span>base<span class="br0">&#41;</span><span class="sy0">;</span>
    virtual <span class="kw4">void</span> myFunc<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
    ~Base<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>  <span class="co1">// should be virtual... </span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
class Derived <span class="sy0">:</span> public Base
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Derived<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Derived<span class="br0">&#40;</span><span class="kw4">const</span> Derived <span class="sy0">&amp;</span>derived<span class="br0">&#41;</span><span class="sy0">;</span>
    Derived <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Derived <span class="sy0">&amp;</span>derived<span class="br0">&#41;</span><span class="sy0">;</span>
    virtual <span class="kw4">void</span> myFunc<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
    virtual ~Derived<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>  
&nbsp;
<span class="kw4">void</span> static_303<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Derived <span class="sy0">*</span>derived_ptr <span class="sy0">=</span>  new Derived<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  Base <span class="sy0">*</span>base_ptr <span class="sy0">=</span> derived_ptr<span class="sy0">;</span>
&nbsp;
  <span class="co1">//... </span>
&nbsp;
  delete base_ptr<span class="sy0">;</span>  <span class="co1">// Does not call derived destructor! </span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_14'>14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_4.2'>4.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.3.2'>3.3.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_78'>78</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_292'>292</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_123'>123</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_292'>292</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s304' name='standard_s304'><div class='standard'><div>304&nbsp;S</div></div></a><div class='headline'>Arithmetic performed on unsigned values.</div></div><p>Arithmetic on unsigned values shall not be performed. This avoids potential mixed arithmetic or comparison operations between unsigned and signed values.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">const</span> UINT_32 scale <span class="sy0">=</span> 32U<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/***********************************************************
 * Standard 304 S : Arithmetic performed on unsigned values.
 ***********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_304<span class="br0">&#40;</span> UINT_32 myParam <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  myParam <span class="sy0">=</span> myParam <span class="sy0">*</span> scale<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.16.16'>5.16.16</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_14.1.5'>14.1.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_5.1.5'>5.1.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_8.4.13'>8.4.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_163'>163</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_293'>293</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s305' name='standard_s305'><div class='standard'><div>305&nbsp;S</div></div></a><div class='headline'>Unused inspect annotation for standard ...</div></div><p>A spurious inspect annotation for a particular standard is present in the code. The line should be removed to avoid confusion and aid readability. </p>
<p>Further checks on the INSPECTED annotation are performed by <a href='standards.htm#standard_d47'>47 D</a> and <a href='standards.htm#standard_j2'>2 J</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">const</span> UINT_32 scale <span class="sy0">=</span> 32U<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 305 S : Unused inspect annotation for standard ...
 *************************************************************/</span> 
&nbsp;
<span class="coMULTI">/*LDRA_INSPECTED 303 S*/</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">void</span> static_305 <span class="br0">&#40;</span>UINT_32 myParam<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 result <span class="sy0">=</span> myParam <span class="sy0">*</span> scale<span class="sy0">;</span>
     <span class="coMULTI">/* this actually triggers penalty 304 S not 303 S*/</span>
  <span class="coMULTI">/* ... */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s306' name='standard_s306'><div class='standard'><div>306&nbsp;S</div></div></a><div class='headline'>Use of C type cast.</div></div><p>C++ style casts (const_cast, reinterpret_cast, and static_cast) shall be used instead of traditional C type casts. A C++ style cast is easier to locate in large programs and makes the intended conversion explicit. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************
 * Standard 306 S : Use of C type cast.
 ********************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_306<span class="br0">&#40;</span>UINT_16 <span class="sy0">*</span>original<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_64 myInt<span class="sy0">;</span>
&nbsp;
  myInt <span class="sy0">=</span> <span class="br0">&#40;</span>UINT_64<span class="br0">&#41;</span> <span class="sy0">*</span>original<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_25'>25</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_1.12'>1.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_7.1'>7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_185'>185</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_333'>333</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-2-4'>5-2-4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s307' name='standard_s307'><div class='standard'><div>307&nbsp;S</div></div></a><div class='headline'>Use of #line, #error preprocessor directives.</div></div><p>Only specific pre-processor directives shall be used, namely: #ifndef #define #endif #include.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">const</span> UINT_32 limit <span class="sy0">=</span> 32U<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/****************************************************************
 * Standard 307 S : Use of #line, #error preprocessor directives.
 ****************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_307<span class="br0">&#40;</span>UINT_32 myParam<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>myParam <span class="sy0">&gt;</span> limit<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
<span class="co2">#error</span>
     <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#125;</span>
  <span class="kw1">else</span>
  <span class="br0">&#123;</span>
<span class="co2">#line 4 myOtherFile.c</span>
    <span class="coMULTI">/* not compliant */</span>
    myParam<span class="sy0">++;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_8'>8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_26'>26</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-2-1'>16-2-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.8.3'>M1.8.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s309' name='standard_s309'><div class='standard'><div>309&nbsp;S</div></div></a><div class='headline'>* or &amp; not attached to type in declaration.</div></div><p>If '*' or '&amp;' is used in a declaration, then no space should occur between the type and the '*' or '&amp;'.  </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**************************************************************
 * Standard 309 S : * or &amp; not attached to type in declaration.
 **************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_309 <span class="br0">&#40;</span>UINT_16 <span class="sy0">*</span>my_int_ptr<span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_8.4.12'>8.4.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_62'>62</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_87'>87</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s310' name='standard_s310'><div class='standard'><div>310&nbsp;S</div></div></a><div class='headline'>Array parameter found.</div></div><p>Arrays shall not be passed as parameters. The degeneration of arrays to pointers when passed as parameters is often the source of errors. Array bounds checking is not performed on C-style arrays and undefined behaviour may arise from an attempt to access memory outside the bounds of an array.</p>
<p>C++ classes that enforce appropriate bounds should be used. </p>
<p>This standard can be relaxed to allow the use of argv  by setting the modifiers <a href='standard_flags.htm#flag_285'>285</a> to 1 in the cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/******************************************
 * Standard 310 S : Array parameter found.
 ******************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_310 <span class="br0">&#40;</span> UINT_16 my_int_array<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  <span class="co1">// Statements... </span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_8.4.9'>8.4.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_97'>97</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_268'>268</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s311' name='standard_s311'><div class='standard'><div>311&nbsp;S</div></div></a><div class='headline'>Non local declaration not in a namespace.</div></div><p>Every non-local name, except main(), should be placed in some namespace. The unnamed namespace may be used to declare non-member functions, which are not part of the external interface, non-linkable from other translation units. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 *  Standard 311 S : Non local declaration not in a namespace.
 *************************************************************/</span>
&nbsp;
UINT_32 outside_namespace_int<span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">const</span> UINT_32 initial_int <span class="sy0">=</span> 0U<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
namespace MySpace
<span class="br0">&#123;</span>
&nbsp;
  UINT_32 inside_namespace_int<span class="sy0">;</span>  <span class="co1">// inside namespace - ok</span>
&nbsp;
  <span class="kw4">void</span> static_311<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
     inside_namespace_int <span class="sy0">=</span> initial_int<span class="sy0">;</span>
     <span class="co1">// ....</span>
  <span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#125;</span>
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_11.2'>11.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_98'>98</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_156'>156</a>, <a href='lmtcp_model.htm#rule_lmtcp_236'>236</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s312' name='standard_s312'><div class='standard'><div>312&nbsp;S</div></div></a><div class='headline'>Function name is not all lower case.</div></div><p>All letters contained in function names will be composed entirely of lower case letters as a matter of style.</p>
<p>A deviation from this standard, and standards 313 S and 318 S, can be permitted where a specific upper case acronym or identifier must be part of the name. See <a href='standards.htm#standard_s318'>S 318</a> for details. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/********************************************************
 *  Standard 312 S : Function name is not all lower case.
 ********************************************************/</span>
&nbsp;
<span class="kw4">void</span> Static_312<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
   <span class="coMULTI">/* ..... */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_51'>51</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_74'>74</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_6.1.e'>6.1.e</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s313' name='standard_s313'><div class='standard'><div>313&nbsp;S</div></div></a><div class='headline'>Variable name is not all lower case.</div></div><p>All letters contained in variable names will be composed entirely of lower case letters as a matter of style.</p>
<p>A deviation from this standard, and standards 312 S and 318 S, can be permitted where a specific upper case acronym or identifier must be part of the name. See <a href='standards.htm#standard_s318'>S 318</a> for details. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 *  Standard 313 S : Variable name is not all lower case.
 ********************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_313<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 myVar<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_51'>51</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s314' name='standard_s314'><div class='standard'><div>314&nbsp;S</div></div></a><div class='headline'>Switch has only 1 case and default.</div></div><p>All switch statements should have at least two cases and a default statement. The use of an if statement provides a more natural representation in this situation. </p>
<p>This standard checks for 1 case and a default, <a href='standards.htm#standard_s61'>61 S</a> checks for only a default,  <a href='standards.htm#standard_s60'>60 S</a> checks for no case or default.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw2">enum</span> FavouriteSeasons
<span class="br0">&#123;</span>
  spring
<span class="br0">&#125;</span> FavouriteSeasons<span class="sy0">;</span>
&nbsp;
FavouriteSeasons season<span class="sy0">;</span>
UINT_32 x1<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/******************************************************
 * Standard 314 S : Switch has only 1 case and default.
 ******************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_314 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">switch</span> <span class="br0">&#40;</span>season<span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#123;</span>
    <span class="kw1">case</span> spring<span class="sy0">:</span>
      x1 <span class="sy0">=</span> 1U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw1">default</span><span class="sy0">:</span>
      <span class="kw2">break</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_196'>196</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_348'>348</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s315' name='standard_s315'><div class='standard'><div>315&nbsp;S</div></div></a><div class='headline'>Blank before/after . operator.</div></div><p>Spaces should not be used around the . operator.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*************************************************
 * Standard 315 S : Blank before/after . operator.
 *************************************************/</span> 
&nbsp;
<span class="kw4">const</span> UINT_32 xstart <span class="sy0">=</span> 1U<span class="sy0">;</span>
<span class="kw4">const</span> UINT_32 yend <span class="sy0">=</span> 240U<span class="sy0">;</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">struct</span> Position
<span class="br0">&#123;</span>
  UINT_32 xValue<span class="sy0">;</span>
  UINT_32 yValue<span class="sy0">;</span>
<span class="br0">&#125;</span> Position<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> static_315<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Position myPos<span class="sy0">;</span>
&nbsp;
  myPos .<span class="me1">xValue</span> <span class="sy0">=</span> xstart<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span> 
  myPos. <span class="me1">yValue</span> <span class="sy0">=</span> yend<span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_155'>155</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.3.9'>3.3.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_10.13'>10.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_63'>63</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_88'>88</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_3.1.g'>3.1.g</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s316' name='standard_s316'><div class='standard'><div>316&nbsp;S</div></div></a><div class='headline'>Bit field is not unsigned integral.</div></div><p>Bit fields shall have explicitly unsigned integral types only. Explicitly declaring a bit field unsigned prevents unexpected sign extension or overflow.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/******************************************************
 * Standard 316 S : Bit field is not unsigned integral.
 ******************************************************/</span> 
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">struct</span> Message
<span class="br0">&#123;</span>
  SINT_32 x_set<span class="sy0">:</span><span class="nu12">0x4</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
  UINT_32 y_set<span class="sy0">:</span><span class="nu12">0x4</span><span class="sy0">;</span>
<span class="br0">&#125;</span> Message<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> static_316<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Message message_chunk<span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_154'>154</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_5.3.a'>5.3.a</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s317' name='standard_s317'><div class='standard'><div>317&nbsp;S</div></div></a><div class='headline'>Typedef name starts with lower case letter.</div></div><p>The first word of the name of a class, structure, namespace, enumeration, or type created with typedef will begin with an uppercase letter. All other letters will be lowercase. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> uint_32<span class="sy0">;</span>  <span class="coMULTI">/* bad */</span> 
&nbsp;
<span class="coMULTI">/**************************************************************
 * Standard 317 S : Typedef name starts with lower case letter.
 * A/Ref:
 **************************************************************/</span> 
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">struct</span> Position        <span class="coMULTI">/* good */</span> 
<span class="br0">&#123;</span>
  uint_32 x_value<span class="sy0">;</span>
  uint_32 y_value<span class="sy0">;</span>
<span class="br0">&#125;</span> Position<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Position my_pos<span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_66'>66</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_50'>50</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s318' name='standard_s318'><div class='standard'><div>318&nbsp;S</div></div></a><div class='headline'>Name letters after first not lower case.</div></div><p>The first word of the name of a class, structure, namespace, enumeration, or type created with typedef may begin with an upper case or lower case letter. All other letters will be lower case.</p>
<p>A deviation from this standard, and standards 312 S and 313 S, can be permitted where a specific upper case acronym or identifier must be part of the name. If names incorporating upper case acronyms or identifiers are required, the acronyms may be specified in the c/cpptbend.dat file: </p>
<pre>
..
  0 Text for acronyms
  3 ZZZ  This may be removed or replaced by required acronyms
  4 ACRO
  3 RGB
  0 &lt;end of acronyms&gt; 
..
</pre><p>In addition, the modifier <a href='standard_flags.htm#flag_256'>256</a> must be set in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<p>Acronyms within a name must be either at the start or end of the name, or separated by one or more underscore (_) characters from other parts of the name.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> UINT_32<span class="sy0">;</span>  <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
<span class="coMULTI">/***********************************************************
 * Standard 318 S : Name letters after first not lower case.
 ***********************************************************/</span> 
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">struct</span> Position
<span class="br0">&#123;</span>
  UINT_32 x_value<span class="sy0">;</span>
  UINT_32 y_value<span class="sy0">;</span>
<span class="br0">&#125;</span> Position<span class="sy0">;</span>                      <span class="coMULTI">/* Ok */</span> 
&nbsp;
<span class="kw4">typedef</span> <span class="kw2">enum</span> Colour_RGB
<span class="br0">&#123;</span>
  red<span class="sy0">,</span>
  green<span class="sy0">,</span>
  blue
<span class="br0">&#125;</span> Colour_RGB<span class="sy0">;</span>                    <span class="coMULTI">/* Ok */</span> 
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">struct</span> ACRORGB
<span class="br0">&#123;</span>
  UINT_32 red_el<span class="sy0">;</span>
  UINT_32 green_el<span class="sy0">;</span>
  UINT_32 blue_el<span class="sy0">;</span>
<span class="br0">&#125;</span> ACRORGB<span class="sy0">;</span>                       <span class="coMULTI">/* Not compliant - not separated by an underscore */</span> 
&nbsp;
&nbsp;
<span class="kw4">void</span> static_318<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Position my_pos<span class="sy0">;</span>
  Colour_RGB col <span class="sy0">=</span> red<span class="sy0">;</span>
  ACRORGB my_col_struct<span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_50'>50</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_256'>256</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s319' name='standard_s319'><div class='standard'><div>319&nbsp;S</div></div></a><div class='headline'>Constructor has insufficient initialisers.</div></div><p>Each constructor must provide values for all member data items, either via an initialisation list or through assignment in the body of the constructor.</p>
<p>It is more efficient to perform the initialisation through the initialisation list rather than through assignment in the body of the constructor. This standard can be further restricted to enforce the use of initialisation rather than assignment by setting the modifier <a href='standard_flags.htm#flag_237'>237</a> to 1 in the cppreport.dat file. 
The standard can be relaxed to allow the default constructor of the base class to initialise its member variables by setting the modifier <a href='standard_flags.htm#flag_444'>444</a> to 1 in the cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 319 S : Constructor has insufficient initialisers.
 *************************************************************/</span> 
&nbsp;
class Person
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    Person <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    ~Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 personalNumber<span class="sy0">;</span>
    UINT_32 personAge<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
Person<span class="sy0">::</span><span class="me2">Person</span><span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 <span class="sy0">&amp;</span>pNum <span class="br0">&#41;</span> <span class="sy0">:</span> personalNumber<span class="br0">&#40;</span>pNum<span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
<span class="co1">//personAge is not given a value</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_9'>9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_4.9'>4.9</a>, <a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_7.1'>7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_237'>237</a> = 1</td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.2.1'>3.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_74'>74</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_77'>77</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_237'>237</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_109'>109</a>, <a href='lmtcp_model.htm#rule_lmtcp_115'>115</a>, <a href='lmtcp_model.htm#rule_lmtcp_119'>119</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s322' name='standard_s322'><div class='standard'><div>322&nbsp;S</div></div></a><div class='headline'>Default is not last case of switch.</div></div><p>A default case shall be added at the end of each switch statement to trap all unspecified cases and remove the possibility of runtime errors occurring. Any further case statement placed after a default case should be removed or replaced at an earlier position.</p>
<p>This standard can be relaxed to allow the default case at the start of the switch statement by setting the modifier <a href='standard_flags.htm#flag_419'>419</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="kw4">typedef</span> <span class="kw2">enum</span> FavouriteSeasons
<span class="br0">&#123;</span>
  spring<span class="sy0">,</span>
  summer<span class="sy0">,</span>
  autumn<span class="sy0">,</span>
  winter
<span class="br0">&#125;</span> FavouriteSeasons<span class="sy0">;</span>
&nbsp;
FavouriteSeasons season<span class="sy0">;</span>
UINT_32 x1<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/******************************************************
 * Standard 322 S : Default is not last case of switch.
 ******************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_322<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">switch</span> <span class="br0">&#40;</span>season<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="kw1">case</span> spring<span class="sy0">:</span>
      x1 <span class="sy0">=</span> 1U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw1">case</span> summer<span class="sy0">:</span>
      x1 <span class="sy0">=</span> 4U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw1">case</span> autumn<span class="sy0">:</span>
      x1 <span class="sy0">=</span> 7U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw1">default</span><span class="sy0">:</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw1">case</span> winter<span class="sy0">:</span>
      x1 <span class="sy0">=</span> 10U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_163'>163</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.9.2.3'>3.9.2.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_10.2'>10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-4-6'>6-4-6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_15.3'>15.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.16.5'>R.16.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_419'>419</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r3.5.2'>R3.5.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s323' name='standard_s323'><div class='standard'><div>323&nbsp;S</div></div></a><div class='headline'>Switch has more than one default case.</div></div><p>Any further default case statement placed after the first default case is redundant and should be removed as it could cause user confusion. Such behaviour is a constraint error, but may not be detected by all compilers. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="kw4">typedef</span> <span class="kw2">enum</span> FavouriteSeasons
<span class="br0">&#123;</span>
  spring<span class="sy0">,</span>
  summer<span class="sy0">,</span>
  autumn<span class="sy0">,</span>
  winter
<span class="br0">&#125;</span> FavouriteSeasons<span class="sy0">;</span>
&nbsp;
FavouriteSeasons season<span class="sy0">;</span>
UINT_32 x1<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*********************************************************
 * Standard 323 S : Switch has more than one default case.
 *********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_323<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">switch</span> <span class="br0">&#40;</span>season<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="kw1">case</span> spring<span class="sy0">:</span>
      x1 <span class="sy0">=</span> 1U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw1">case</span> summer<span class="sy0">:</span>
      x1 <span class="sy0">=</span> 4U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw1">case</span> autumn<span class="sy0">:</span>
      x1 <span class="sy0">=</span> 7U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw1">case</span> winter<span class="sy0">:</span>
      x1 <span class="sy0">=</span> 10U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw1">default</span><span class="sy0">:</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw1">default</span><span class="sy0">:</span>  <span class="coMULTI">/* constraint error */</span>
      <span class="kw2">break</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_163'>163</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.1'>R.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s324' name='standard_s324'><div class='standard'><div>324&nbsp;S</div></div></a><div class='headline'>Macro call has wrong number of parameters.</div></div><p>A function-like macro shall not be invoked without all of its arguments. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">signed</span> <span class="kw4">int</span> Sint_32<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 324 S : Macro call has wrong number of parameters.
 *************************************************************/</span> 
&nbsp;
<span class="co2">#define COMMON_MACRO(X, Y) ((X) * (Y))</span>
&nbsp;
<span class="kw4">const</span> Sint_32 s1 <span class="sy0">=</span> <span class="nu0">42</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Sint_32 myInt <span class="sy0">=</span> COMMON_MACRO<span class="br0">&#40;</span>s1<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_94'>94</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_46'>46</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_19.8'>19.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_94'>94</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_19.8'>19.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s325' name='standard_s325'><div class='standard'><div>325&nbsp;S</div></div></a><div class='headline'>Inconsistent use of tag.</div></div><p>No tag name shall be reused either to define a different tag or for any other purpose within the program. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">signed</span> <span class="kw4">int</span> Sint_32<span class="sy0">;</span>
<span class="kw4">typedef</span> <span class="kw4">signed</span> <span class="kw4">char</span> Char<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*******************************************
 * Standard 325 S : Inconsistent use of tag.
 *******************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp;
  <span class="br0">&#123;</span>
    <span class="kw4">struct</span> tag_name
    <span class="br0">&#123;</span>
      Sint_32 tag_component2<span class="sy0">;</span>
    <span class="br0">&#125;</span> tag_name2<span class="sy0">;</span>
    <span class="coMULTI">/* ... */</span> 
  <span class="br0">&#125;</span>
&nbsp;
&nbsp;
  <span class="br0">&#123;</span>
    <span class="kw4">union</span> tag_name              <span class="coMULTI">/* Not Compliant */</span> 
    <span class="br0">&#123;</span>
      Sint_32 tag_component3<span class="sy0">;</span>
      Char tag_component4<span class="sy0">;</span>
    <span class="br0">&#125;</span> tag_name3<span class="sy0">;</span>
	 <span class="coMULTI">/* ... */</span> 
  <span class="br0">&#125;</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_90'>90</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.4'>5.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.4'>5.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.7'>R.5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s326' name='standard_s326'><div class='standard'><div>326&nbsp;S</div></div></a><div class='headline'>Declaration is missing type.</div></div><p>Data types shall be explicitly stated. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/***********************************************
 * Standard 326 S : Declaration is missing type.
 ***********************************************/</span> 
&nbsp;
<span class="kw4">static</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>          <span class="coMULTI">/* Non-compliant - implicit return type */</span> 
<span class="kw4">static</span> SINT_32 static_326<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* Compliant - explicit type */</span> 
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl31-c'>DCL31-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_628'>628</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.8.1'>3.8.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_232'>232</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_8.2'>8.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_8.2'>8.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.1'>R.8.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.3.3'>M1.3.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s327' name='standard_s327'><div class='standard'><div>327&nbsp;S</div></div></a><div class='headline'>Reuse of struct or class member name.</div></div><p>Identifier names for struct or class members shall not be reused in another construct. Reusing identifier names leads to code which is confusing.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
 <span class="coMULTI">/********************************************************
 * Standard 327 S : Reuse of struct or class member name.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">struct</span> I_var_a
<span class="br0">&#123;</span>
  INT_32 ip1<span class="sy0">;</span>
  INT_32 ip2<span class="sy0">;</span>
<span class="br0">&#125;</span> I_var_a<span class="sy0">;</span>
&nbsp;
<span class="kw4">struct</span> I_var_b
<span class="br0">&#123;</span>
  INT_32 ip2<span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span> 
  INT_32 ip3<span class="sy0">;</span>
  INT_32 ip4<span class="sy0">;</span>
<span class="br0">&#125;</span> I_var_b<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> static_327 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span>
<span class="br0">&#125;</span>  
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s328' name='standard_s328'><div class='standard'><div>328&nbsp;S</div></div></a><div class='headline'>Non bit field member in bitfield struct.</div></div><p>Structures containing sets of bits shall not include any other data within the same structure. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/***********************************************************
 * Standard 328 S : Non bit field member in bitfield struct.
 ***********************************************************/</span> 
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">struct</span> Message
<span class="br0">&#123;</span>
  Uint_32 x_set<span class="sy0">:</span><span class="nu12">0x4</span><span class="sy0">;</span>
  Uint_32 y_set<span class="sy0">:</span><span class="nu12">0x4</span><span class="sy0">;</span>
  Uint_32 z_set<span class="sy0">;</span>
<span class="br0">&#125;</span> Message<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Message message_chunk<span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_284'>284</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_9-6-1'>9-6-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s329' name='standard_s329'><div class='standard'><div>329&nbsp;S</div></div></a><div class='headline'>Operation not appropriate to plain char.</div></div><p>Do not perform an numeric operation on an object with a plain char type. Always declare such objects with an explicit signed char or unsigned char type. Operations between more than one type are handled by other standards.</p>
<p>This standard can be relaxed to allow comparisons between plain chars by selecting the MISRA-C:2012 programming model or by explicitly enabling the <a href='standard_flags.htm#flag_391'>391</a> modifier in the c/cppreport.dat file (TBmisra license permitting). <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. </p>
<div class='title'>Example</div>
<pre class="code c">&nbsp;
<span class="coMULTI">/***********************************************************
 * Standard 329 S : Operation not appropriate to plain char.
 ***********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_329 <span class="br0">&#40;</span><span class="kw4">char</span> ic_byte<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  ic_byte<span class="sy0">++;</span>     <span class="coMULTI">/*not compliant - plain char used for numeric operation */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.1.10'>5.1.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int07-c'>INT07-C</a>, <a href='cert-c_model.htm#rule_cert-c_str00-c'>STR00-C</a>, <a href='cert-c_model.htm#rule_cert-c_str04-c'>STR04-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.15'>1.1.15</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_327'>327</a>, <a href='cwe_model.htm#rule_cwe_682'>682</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_14'>14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_4.1.3'>4.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.1.15'>4.1.1.15</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_8.4.5'>8.4.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_14'>14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_11'>11</a>, <a href='lmtcp_model.htm#rule_lmtcp_267'>267</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_6.1'>6.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_4-5-3'>4-5-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_14'>14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_6.1'>6.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.1'>R.10.1</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.2'>R.10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_391'>391</a> = 1</td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_5.2.c'>5.2.c</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_p1.3.1'>P1.3.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s330' name='standard_s330'><div class='standard'><div>330&nbsp;S</div></div></a><div class='headline'>Implicit conversion of underlying type.</div></div><p>There shall be no implicit conversions between expressions of one underlying type to another. Specifically this penalty highlights conversions from wider to narrower types.</p>
<p>Note that MISRA-C:2004 checking needs to be enabled in order for this violation to be detected, either via selection of the MISRA-C:2004 programming model or by explicitly enabling the <a href='standard_flags.htm#flag_191'>191</a> entry configuration flag in the c/cppvals.dat file (TBmisra license permitting). </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">short</span> Uint_16<span class="sy0">;</span>
<span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/**********************************************************
 * Standard 330 S : Implicit conversion of underlying type.
 **********************************************************/</span> 
&nbsp;
Uint_16 u16a <span class="sy0">=</span> 0U<span class="sy0">;</span>
Uint_32 u32a <span class="sy0">=</span> 0U<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> static_330<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  u16a <span class="sy0">=</span> u32a<span class="sy0">;</span>  <span class="coMULTI">/* implicit conversion to a narrower type */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_192'>192</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_10.1'>10.1</a>, <a href='misra-ac_model.htm#rule_misra-ac_10.2'>10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.1'>10.1</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.2'>10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.3'>R.10.3</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.4'>R.10.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_5.3.c'>5.3.c</a>, <a href='netrino_model.htm#rule_netrino_5.4.b'>5.4.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.5.1'>R2.5.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s331' name='standard_s331'><div class='standard'><div>331&nbsp;S</div></div></a><div class='headline'>Literal value requires a U suffix.</div></div><p>A U suffix shall be applied to all constants of unsigned type. </p>
<p>This standard can be relaxed to allow zero literal values without a U by setting the modifier <a href='standard_flags.htm#flag_358'>358</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<p>The standard can be further restricted to check for the use of signed literal values in array declarations by setting the modifier <a href='standard_flags.htm#flag_309'>309</a> to 1. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * Standard 331 S : Literal value requires a U suffix.
 *****************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_331<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 x1 <span class="sy0">=</span> <span class="nu0">5</span><span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span>
  UINT_32 y1 <span class="sy0">=</span> 6U<span class="sy0">;</span>
  UINT_64 z1 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant, but permitted by modifier 358 */</span>
&nbsp;
  y1 <span class="sy0">=</span> y1 <span class="sy0">*</span> <span class="nu0">7</span><span class="sy0">;</span>     <span class="coMULTI">/* not compliant */</span>
                   <span class="coMULTI">/* Integer constant '7' should be '7U' when forming part
                       of an expression containing unsigned int types. */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int13-c'>INT13-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_195'>195</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_358'>358</a> = 1</td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_18'>18</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_23'>23</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_6.1'>6.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_18'>18</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_10.1'>10.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-4'>5-0-4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_18'>18</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.1'>10.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.7.2'>R.7.2</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.3'>R.10.3</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.4'>R.10.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.2.2'>M1.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s332' name='standard_s332'><div class='standard'><div>332&nbsp;S</div></div></a><div class='headline'>Widening cast on complex integer expression.</div></div><p>An explicit cast to a wider underlying type shall not be performed on the value of a complex integer expression. Conversions on complex expressions are often a source of confusion.</p>
<p>Note that this standard is only enabled by setting the modifier <a href='standard_flags.htm#flag_191'>191</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">short</span> Uint_16<span class="sy0">;</span>
<span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/***************************************************************
 * Standard 332 S : Widening cast on complex integer expression.
 ***************************************************************/</span> 
&nbsp;
Uint_16 u16a <span class="sy0">=</span> 40000U<span class="sy0">;</span>
Uint_16 u16b <span class="sy0">=</span> 30000U<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> static_332<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Uint_32 u32 <span class="sy0">=</span> <span class="br0">&#40;</span>Uint_32<span class="br0">&#41;</span> <span class="br0">&#40;</span>u16a <span class="sy0">+</span> u16b<span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="coMULTI">/*...*/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int02-c'>INT02-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_192'>192</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_365'>365</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_10.3'>10.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-8'>5-0-8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.3'>10.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.8'>R.10.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s333' name='standard_s333'><div class='standard'><div>333&nbsp;S</div></div></a><div class='headline'>Widening cast on complex float expression.</div></div><p>An explicit cast to a wider float type shall not be performed on the value of a complex float expression. Conversions on complex expressions are often a source of confusion.</p>
<p>Note that this standard is only enabled by setting the modifier <a href='standard_flags.htm#flag_191'>191</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">float</span> Float_32<span class="sy0">;</span>
<span class="kw4">typedef</span> <span class="kw4">double</span> Float_64<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 333 S : Widening cast on complex float expression.
 *************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_333<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Float_32 f32a <span class="sy0">=</span> <span class="nu17">4.0F</span><span class="sy0">;</span>
  Float_32 f32b <span class="sy0">=</span> <span class="nu17">3.0F</span><span class="sy0">;</span>
  Float_64 f64 <span class="sy0">=</span> <span class="br0">&#40;</span>Float_64<span class="br0">&#41;</span> <span class="br0">&#40;</span>f32a <span class="sy0">+</span> f32b<span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="coMULTI">/*...*/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_10.4'>10.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-8'>5-0-8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.4'>10.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.8'>R.10.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s334' name='standard_s334'><div class='standard'><div>334&nbsp;S</div></div></a><div class='headline'>No cast when ~ or &lt;&lt; applied to small types.</div></div><p>The result of applying the bit-wise operator ~ or &lt;&lt; to an operand of underlying type unsigned char or unsigned short shall be immediately cast to the underlying type of the operand. The effect of any unanticipated behaviour due to high order bits introduced through integral promotion is then avoided.</p>
<p>Note that MISRA-C:2004 checking needs to be enabled in order for this violation to be detected, either via selection of the MISRA-C:2004 programming model or by explicitly enabling the 191 entry configuration flag in the c/cppvals.dat file (TBmisra license permitting). </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">short</span> Uint_16<span class="sy0">;</span>
<span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">char</span> Uint_8<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/***************************************************************
 * Standard 334 S : No cast when ~ or &lt;&lt; applied to small types.
 ***************************************************************/</span> 
&nbsp;
Uint_8 port <span class="sy0">=</span> 0x5aU<span class="sy0">;</span>
&nbsp;
Uint_16 mode <span class="sy0">=</span> <span class="nu12">0xffff</span><span class="sy0">;</span>
Uint_16 result_16<span class="sy0">;</span>
Uint_16 another_result_16<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> static_334 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  result_16 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>port <span class="sy0">&lt;&lt;</span> <span class="nu0">4</span><span class="br0">&#41;</span> <span class="sy0">&amp;</span> mode<span class="br0">&#41;</span> <span class="sy0">&gt;&gt;</span> <span class="nu0">6</span><span class="sy0">;</span>      <span class="coMULTI">/* not compliant - no cast !*/</span> 
  another_result_16 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>Uint_16<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#40;</span>Uint_16<span class="br0">&#41;</span>port <span class="sy0">&lt;&lt;</span> <span class="nu0">4</span><span class="br0">&#41;</span> <span class="sy0">&amp;</span> mode<span class="br0">&#41;</span> <span class="sy0">&gt;&gt;</span> <span class="nu0">6</span><span class="sy0">;</span>  <span class="coMULTI">/* correct casting, albeit widening... */</span> 
  <span class="coMULTI">/*...*/</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int02-c'>INT02-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_298'>298</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_10.5'>10.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-10'>5-0-10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.5'>10.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.5.3'>R2.5.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s335' name='standard_s335'><div class='standard'><div>335&nbsp;S</div></div></a><div class='headline'>Operator defined contains illegal items.</div></div><p>The operator defined shall not process any expression other than a macro identifier, which has either previously been defined or has not been previously defined.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">const</span> UINT_32 max_value <span class="sy0">=</span> 255U<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/***********************************************************
 * Standard 335 S : Operator defined contains illegal items.
 ***********************************************************/</span> 
&nbsp;
<span class="co2">#if defined(X &gt; Y)  /* undefined behaviour, not compliant */ </span>
  <span class="coMULTI">/* ... */</span> 
<span class="co2">#endif</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_100'>100</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_42'>42</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_19.14'>19.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-1-1'>16-1-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_100'>100</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_19.14'>19.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m4.7.4'>M4.7.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s336' name='standard_s336'><div class='standard'><div>336&nbsp;S</div></div></a><div class='headline'>#if expansion contains define operator.</div></div><p>The defined operator shall not be included in a #if pre-processor directive through macro expansion substitution. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
<span class="kw4">const</span> Uint_32 max_value <span class="sy0">=</span> 255U<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/**********************************************************
 * Standard 336 S : #if expansion contains define operator.
 **********************************************************/</span> 
&nbsp;
<span class="co2">#define DEFINED defined</span>
&nbsp;
<span class="co2">#if DEFINED(X)           /* undefined behaviour, not permitted */ </span>
  <span class="coMULTI">/* ... */</span> 
<span class="co2">#endif</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_100'>100</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_42'>42</a>, <a href='lmtcp_model.htm#rule_lmtcp_411'>411</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_19.14'>19.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-1-1'>16-1-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_100'>100</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_19.14'>19.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m4.7.4'>M4.7.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s337' name='standard_s337'><div class='standard'><div>337&nbsp;S</div></div></a><div class='headline'>Undefined macro variable in #if.</div></div><p>Macro identifiers specified in #if pre-processor directive shall be defined before use.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/***************************************************
 * Standard 337 S : Undefined macro variable in #if.
 ***************************************************/</span> 
&nbsp;
<span class="co2">#if DEBUG1</span>
  <span class="coMULTI">/* do something */</span> 
<span class="co2">#else</span>
  <span class="coMULTI">/* do something else */</span> 
<span class="co2">#endif</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/*...*/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_97'>97</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_48'>48</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_19.11'>19.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-0-7'>16-0-7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_97'>97</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_19.11'>19.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.20.9'>R.20.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m4.7.3'>M4.7.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s338' name='standard_s338'><div class='standard'><div>338&nbsp;S</div></div></a><div class='headline'>#include preceded by non preproc directives.</div></div><p>A #include statement shall only be preceded by other pre-processor directives or comments.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
&nbsp;
<span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/***************************************************************
 * Standard 338 S : #include preceded by non preproc directives.
 ***************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_338<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span> <span class="coMULTI">/*...*/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_2.4.4'>2.4.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_39'>39</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_19.1'>19.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-0-1'>16-0-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_19.1'>19.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.20.1'>R.20.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_4.3.b'>4.3.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s339' name='standard_s339'><div class='standard'><div>339&nbsp;S</div></div></a><div class='headline'>#include directive with illegal items.</div></div><p>A comment shall not appear between the pre-processor directive #include and the associated header filename. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;           /* compliant */ </span>
&nbsp;
<span class="co2">#include /* not compliant */ &quot;bar.h&quot;</span>
&nbsp;
<span class="coMULTI">/**********************************************************
 * Standard 339 S : #include directive with illegal items.
 **********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_339<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span> <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_19.3'>19.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-2-5'>16-2-5</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-2-6'>16-2-6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_19.3'>19.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_p1.4.1'>P1.4.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s340' name='standard_s340'><div class='standard'><div>340&nbsp;S</div></div></a><div class='headline'>Use of function like macro.</div></div><p>The #define pre-processor directive shall not be used to create inline macros. Inline functions shall be used instead. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">signed</span> <span class="kw4">int</span> Sint_32<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/**********************************************
 * Standard 340 S : Use of function like macro.
 **********************************************/</span> 
&nbsp;
<span class="co2">#define COMMON_MACRO(X, Y) ((X) * (Y))</span>
&nbsp;
<span class="kw4">const</span> Sint_32 s1 <span class="sy0">=</span> <span class="nu0">42</span><span class="sy0">;</span>
<span class="kw4">const</span> Sint_32 s2 <span class="sy0">=</span> <span class="nu0">7</span><span class="sy0">;</span>
&nbsp;
Sint_32 foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Sint_32 myInt <span class="sy0">=</span> COMMON_MACRO<span class="br0">&#40;</span>s1<span class="sy0">,</span> s2<span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">return</span> myInt<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_pre00-c'>PRE00-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_735'>735</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_48'>48</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_1.4'>1.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_14.15'>14.15</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_93'>93</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_29'>29</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_35'>35</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_19.7'>19.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-0-4'>16-0-4</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-2-1'>16-2-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_93'>93</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_19.7'>19.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_d.4.9'>D.4.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_6.3.a'>6.3.a</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_e1.1.1'>E1.1.1</a>, <a href='sec-c_model.htm#rule_sec-c_m5.1.3'>M5.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s341' name='standard_s341'><div class='standard'><div>341&nbsp;S</div></div></a><div class='headline'>Preprocessor construct as macro parameter.</div></div><p>Pre-processor constructs shall not be used as arguments to a function-like macro. Macro expansion substitution may lead to unpredictable behaviour. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#define S1</span>
<span class="kw4">typedef</span> <span class="kw4">signed</span> <span class="kw4">int</span> Sint_32<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 341 S : Preprocessor construct as macro parameter.
 *************************************************************/</span> 
&nbsp;
<span class="co2">#define COMMON_MACRO(X) (X)</span>
&nbsp;
Sint_32 foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Sint_32 my_int <span class="sy0">=</span> COMMON_MACRO<span class="br0">&#40;</span>
<span class="co2">#ifdef S1</span>
  <span class="nu0">1</span>
<span class="co2">#else</span>
  <span class="nu0">2</span>
<span class="co2">#endif</span>
  <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
  <span class="kw1">return</span> my_int<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_95'>95</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_8'>8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_47'>47</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_19.9'>19.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-0-5'>16-0-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_95'>95</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_19.9'>19.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.20.6'>R.20.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s342' name='standard_s342'><div class='standard'><div>342&nbsp;S</div></div></a><div class='headline'>Extra chars after preprocessor directive.</div></div><p>Ensure that pre-processor directives are not followed by any character other than white-space. All pre-processor directives shall be syntactically valid even when they occur within an excluded block of code.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#define DIAGS</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw2">enum</span> Flag
<span class="br0">&#123;</span>
  on<span class="sy0">,</span>
  off
<span class="br0">&#125;</span> Flag<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/************************************************************
 * Standard 342 S : Extra chars after preprocessor directive.
 ************************************************************/</span> 
&nbsp;
<span class="co2">#ifdef DIAGS</span>
  Flag x1 <span class="sy0">=</span> on<span class="sy0">;</span>
<span class="co2">#else1           /* not compliant */ </span>
  Flag x1 <span class="sy0">=</span> off<span class="sy0">;</span>
<span class="co2">#endif</span>
&nbsp;
<span class="kw4">void</span> static_342 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span> <span class="coMULTI">/* ... */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_19.16'>19.16</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-0-8'>16-0-8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_19.16'>19.16</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.20.13'>R.20.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.12.1'>M1.12.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s343' name='standard_s343'><div class='standard'><div>343&nbsp;S</div></div></a><div class='headline'>#else has no #if, etc in the same file.</div></div><p>A series of pre-processor directives that control the inclusion and exclusion of blocks of statements shall reside in the same file.</p>
<p>This standard is not available if &quot;SHORTEN&quot; is set to TRUE, which is the default value.</p>
<div class='title'>Example</div>
<p>Static_343.c</p>
<pre class="code c"><span class="co2">#define DEBUG1 1</span>
&nbsp;
 <span class="coMULTI">/**********************************************************
 * Standard 343 S : #else has no #if, etc in the same file.
 **********************************************************/</span> 
&nbsp;
<span class="co2">#if DEBUG1  == 1</span>
&nbsp;
<span class="co2">#include &quot;Static_343.h&quot;</span>
&nbsp;
&nbsp;
 <span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><p>Static_343.h</p>
<pre class="code c"> <span class="coMULTI">/**********************************************************
 * Standard 343 S : #else has no #if, etc in the same file.
 **********************************************************/</span> 
&nbsp;
  <span class="coMULTI">/* do nothing */</span> 
&nbsp;
<span class="co2">#else</span>
&nbsp;
  <span class="coMULTI">/* do something */</span> 
&nbsp;
<span class="co2">#endif</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_8'>8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_43'>43</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_19.17'>19.17</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-1-2'>16-1-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_19.17'>19.17</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.20.14'>R.20.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m4.7.2'>M4.7.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s344' name='standard_s344'><div class='standard'><div>344&nbsp;S</div></div></a><div class='headline'>Cast on volatile value.</div></div><p>Avoid casting away volatile qualification as this may cause the compiler to perform optimisations that are not valid, leading to unexpected results in optimised builds. </p>
<p>This standard can be  restricted to check only pointer types by setting the modifier <a href='standard_flags.htm#flag_395'>395</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/******************************************
 * Standard 344 S : Cast on volatile value.
 ******************************************/</span> 
&nbsp;
<span class="kw4">volatile</span> UINT_32 <span class="sy0">*</span>y1<span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_344 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 <span class="sy0">*</span>y2 <span class="sy0">=</span> <span class="br0">&#40;</span>UINT_32 <span class="sy0">*</span><span class="br0">&#41;</span>y1<span class="sy0">;</span>  <span class="coMULTI">/* not compliant - cast to ... a pointer to non-volatile int */</span> 
<span class="br0">&#125;</span>   
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp32-c'>EXP32-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_704'>704</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_1.11'>1.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_7.3'>7.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_328'>328</a>, <a href='lmtcp_model.htm#rule_lmtcp_334'>334</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_11.5'>11.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_395'>395</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-2-5'>5-2-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_395'>395</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_11.5'>11.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_395'>395</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.11.8'>R.11.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_395'>395</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.7.2'>R2.7.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_395'>395</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s345' name='standard_s345'><div class='standard'><div>345&nbsp;S</div></div></a><div class='headline'>Bit operator with floating point operand.</div></div><p>The use of floating-point values as operands to the bit operators is a constraint error in C, but not all compilers detect this problem.
No floating-point manipulations should be made which rely on the way the values are stored. The storage of floating-point numbers is compiler-dependent.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/************************************************************
 * Standard 345 S : Bit operator with floating point operand.
 ************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_345<span class="br0">&#40;</span>FLOAT_32 fl1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_8 bitmap <span class="sy0">=</span> ~fl1<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.11'>10.11</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_13.6'>13.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_16'>16</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_262'>262</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_12.12'>12.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_3-9-3'>3-9-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_16'>16</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.12'>12.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.1'>R.1.1</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.1'>R.10.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s346' name='standard_s346'><div class='standard'><div>346&nbsp;S</div></div></a><div class='headline'>Bit field is not unsigned integral or enum type.</div></div><p>Bit-fields shall have explicitly unsigned integral or enumeration types only. An explicit unsigned declaration prevents unexpected sign extension or overflow.</p>
<p>Note that this standard is only enabled with the JSF++ AV programming model or by setting the modifier <a href='standard_flags.htm#flag_234'>234</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw2">enum</span> Range
<span class="br0">&#123;</span>
  first<span class="sy0">,</span>
  second<span class="sy0">,</span>
  third
<span class="br0">&#125;</span> Range<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/***********************************************************
* Standard 346 S : Bit field is not unsigned integral or enum type.
************************************************************/</span> 
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">struct</span> Message
<span class="br0">&#123;</span>
  UINT_32 ui_set<span class="sy0">:</span><span class="nu12">0x4</span><span class="sy0">;</span>
  UCHAR   uc_set<span class="sy0">:</span><span class="nu12">0x1</span><span class="sy0">;</span>
  SINT_32 si_set<span class="sy0">:</span><span class="nu12">0x4</span><span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
  FLOAT_32 y_set<span class="sy0">:</span><span class="nu12">0x8</span><span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
  Range    z_set<span class="sy0">:</span><span class="nu12">0x2</span><span class="sy0">;</span>
<span class="br0">&#125;</span> Message<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> static_346<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Message message_chunk<span class="sy0">;</span>
  <span class="coMULTI">/* ... */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 *  Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_154'>154</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_234'>234</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s347' name='standard_s347'><div class='standard'><div>347&nbsp;S</div></div></a><div class='headline'>Macro parameter list has leading space.</div></div><p>No spaces shall be inserted between a function-like macro identifier and its parenthesised parameter list. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">signed</span> <span class="kw4">int</span> Sint_32<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/**********************************************************
 * Standard 347 S : Macro parameter list has leading space.
 **********************************************************/</span> 
&nbsp;
<span class="co2">#define PENALTY_MACRO (XIN, YIN) ((XIN) * (YIN))</span>
<span class="co2">#define GOOD_MACRO(XIN, YIN) ((XIN) + (YIN))</span>
&nbsp;
<span class="kw4">const</span> Sint_32 s1 <span class="sy0">=</span> <span class="nu0">42</span><span class="sy0">;</span>
<span class="kw4">const</span> Sint_32 s2 <span class="sy0">=</span> <span class="nu0">7</span><span class="sy0">;</span>
&nbsp;
Sint_32 foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Sint_32 myInt <span class="sy0">=</span> GOOD_MACRO<span class="br0">&#40;</span> s1<span class="sy0">,</span> s2<span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">return</span> myInt<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_29'>29</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_35'>35</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s348' name='standard_s348'><div class='standard'><div>348&nbsp;S</div></div></a><div class='headline'>Use of the NULL macro.</div></div><p>A pointer shall not be compared to NULL or be assigned to NULL. Plain 0 should be used rather than NULL, which is an implementation-defined C++ null pointer constant. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdio.h&gt;</span>
&nbsp;
<span class="coMULTI">/************************************************
 * Standard 348 S : Use of the NULL macro.
 ************************************************/</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_348<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UCHAR <span class="sy0">*</span> uc <span class="sy0">=</span> NULL<span class="sy0">;</span>        <span class="coMULTI">/* not compliant */</span>
  <span class="kw1">if</span><span class="br0">&#40;</span> uc <span class="sy0">==</span> <span class="nu0">0</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>  <span class="sy0">;</span> <span class="br0">&#125;</span>      <span class="coMULTI">/* compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_50'>50</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_14.16'>14.16</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_175'>175</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_318'>318</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s349' name='standard_s349'><div class='standard'><div>349&nbsp;S</div></div></a><div class='headline'>Enumeration is not all lower case.</div></div><p>Identifiers for enumerator values shall be lower case. Using lower case avoids the possibility of accidental macro substitution.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw2">enum</span> Seasons
<span class="br0">&#123;</span>
  SPRING<span class="sy0">,</span>    <span class="coMULTI">/* not compliant */</span>
  summer<span class="sy0">,</span>
  autumn<span class="sy0">,</span>
  winter
<span class="br0">&#125;</span> Seasons<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * Standard 349 S : Enumeration is not all lower case.
 *****************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_349<span class="br0">&#40;</span>Seasons season<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_52'>52</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s350' name='standard_s350'><div class='standard'><div>350&nbsp;S</div></div></a><div class='headline'>Const variable is not all lower case.</div></div><p>Identifiers for constant values shall be lowercase. Using lowercase avoids the possibility of accidental macro substitution. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
&nbsp;
<span class="kw4">const</span> Uint_32 DEFINT <span class="sy0">=</span> 1U<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 350 S : Const variable is not all lower case.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Uint_32 my_int <span class="sy0">=</span> DEFINT<span class="sy0">;</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_52'>52</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s351' name='standard_s351'><div class='standard'><div>351&nbsp;S</div></div></a><div class='headline'>Type declaration with variable definition.</div></div><p>A variable will not be declared in the definition of its type. Otherwise the type will be unnamed, and unable to be referenced and reused. Furthermore the resulting code will be difficult to read. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/*************************************************************
 * Standard 351 S : Type declaration with variable definition.
 *************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw2">enum</span>
  <span class="br0">&#123;</span>
    up<span class="sy0">,</span>
    down
  <span class="br0">&#125;</span> direction<span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_141'>141</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s352' name='standard_s352'><div class='standard'><div>352&nbsp;S</div></div></a><div class='headline'>Declaration of type not in header file.</div></div><p>Object and function types shall not be defined in an implementation file. Every implementation file shall include the header files that uniquely define the types used.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw2">enum</span> Seasons  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  spring<span class="sy0">,</span>
  summer<span class="sy0">,</span>
  autumn<span class="sy0">,</span>
  winter
<span class="br0">&#125;</span> Seasons<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/**********************************************************
 * Standard 352 S : Declaration of type not in header file.
 **********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> Seasons static_352 <span class="br0">&#40;</span>INT_32 month<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Seasons ss<span class="sy0">;</span>
  <span class="coMULTI">/* ... */</span> 
  <span class="kw1">return</span> ss<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl12-c'>DCL12-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_8.1.1'>8.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_40'>40</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_61'>61</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s353' name='standard_s353'><div class='standard'><div>353&nbsp;S</div></div></a><div class='headline'>Inline member has more than *** statements.</div></div><p>Only declare trivial functions 'inline'. Limit inline member functions to the pre-determined maximum number of statements - typically 1 or 2. The compiler is not compelled to make a function inline. The request to inline the function could be ignored, and the decision criteria differs from one compiler to another.</p>
<p>Inline functions do not necessarily improve performance and they can have a negative effect. Inappropriate use will lead to longer compilation times, slower runtime performance and larger binaries.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
&nbsp;
<span class="kw4">const</span> Uint_32 agelimit <span class="sy0">=</span> 18U<span class="sy0">;</span>
<span class="kw4">const</span> Uint_32 junior <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//</span>
<span class="co1">// Standard 353 S : Inline member has more than *** statements.</span>
<span class="co1">// </span>
&nbsp;
class Person
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> Uint_32 personNum<span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    Person <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    ~Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    Uint_32 personal_number<span class="sy0">;</span>
  public<span class="sy0">:</span>
    <span class="kw4">void</span> adjust_num<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
      personal_number<span class="sy0">++;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span>personal_number <span class="sy0">&lt;</span> agelimit<span class="br0">&#41;</span>
        personal_number <span class="sy0">=</span> junior<span class="sy0">;</span>
      personal_number<span class="sy0">++;</span>
    <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Person p1<span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span><span class="sy0">;</span>
  p1.<span class="me1">adjust_num</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="co1">//... </span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="co1">//</span>
<span class="co1">//</span>
<span class="co1">// Copyright (c) 2006 Liverpool Data Research Associates</span>
<span class="co1">//</span>
<span class="co1">//</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_5'>5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_11.8'>11.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_121'>121</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_290'>290</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_222'>222</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_290'>290</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s354' name='standard_s354'><div class='standard'><div>354&nbsp;S</div></div></a><div class='headline'>Extern declaration is not in header file.</div></div><p>External objects shall not be declared in more than one file. External objects should be declared in header files which will then be included in all those files that use those objects (including the files which define them).</p>
<div class='title'>Example</div>
<p>Static_354.h</p>
<pre class="code c"><span class="co2">#ifndef STATIC_354_H</span>
<span class="co2">#define STATIC_354_H</span>
&nbsp;
<span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw2">extern</span> UINT_32 day<span class="sy0">;</span>    <span class="coMULTI">/* compliant - defined in static_354.c */</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 354 S : Extern declaration is not in header file.
 *************************************************************/</span>
&nbsp;
<span class="co2">#endif</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><p>Static_354.c</p>
<pre class="code c"><span class="co2">#include &quot;Static_354.h&quot;</span>
&nbsp;
UINT_32 day <span class="sy0">=</span> 1U<span class="sy0">;</span>
&nbsp;
<span class="kw2">extern</span> UINT_32 season<span class="sy0">;</span>  <span class="coMULTI">/* not compliant - should be in header file */</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 354 S : Extern declaration is not in header file.
 *************************************************************/</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_354 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* ... */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_7'>7</a>, <a href='eads-c_model.htm#rule_eads-c_8'>8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_8.1.1'>8.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_139'>139</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_3-3-1'>3-3-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s355' name='standard_s355'><div class='standard'><div>355&nbsp;S</div></div></a><div class='headline'>Variables not unique within *** characters.</div></div><p>User-specified identifiers will not rely on the significance of more than a pre-determined maximum number of characters - typically 64, although the some standards suggests a minimum of 1024 characters will be significant.</p>
<p>The length is user definable. The *** symbols refer to a user definable number for this standard, defaulting to 64. The configuration is made in the c/cpppen.dat file. Instructions for making alterations can be found in the manual.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 355 S : Variables not unique within *** characters.
 *************************************************************/</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_355<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 s12345678901234567890123456789012345678901234567890123456789012_a<span class="sy0">;</span>
  UINT_32 s12345678901234567890123456789012345678901234567890123456789012_b<span class="sy0">;</span>
  <span class="coMULTI">/* ... */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl32-c'>DCL32-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_736'>736</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_38'>38</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_46'>46</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_69'>69</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s356' name='standard_s356'><div class='standard'><div>356&nbsp;S</div></div></a><div class='headline'>Pointer to pointer declared.</div></div><p>Pointers to pointers should be avoided when possible. An alternative form of abstraction should be used instead; preferably one providing memory management and error handling facilities.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/***********************************************
 * Standard 356 S : Pointer to pointer declared.
 ***********************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_356<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32<span class="sy0">*</span> uptr<span class="br0">&#91;</span><span class="nu0">10</span><span class="br0">&#93;</span><span class="sy0">;</span>  <span class="coMULTI">/* compliant - array of pointers is ok */</span>
&nbsp;
  UINT_32 <span class="sy0">**</span>upp<span class="sy0">;</span>     <span class="coMULTI">/* not compliant - pointer to pointer */</span>
&nbsp;
  upp <span class="sy0">=</span> uptr<span class="sy0">;</span>               
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_9'>9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_169'>169</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_313'>313</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s357' name='standard_s357'><div class='standard'><div>357&nbsp;S</div></div></a><div class='headline'>Base class is mixed virtual and non virtual.</div></div><p>A base class shall not be both virtual and non-virtual in the same hierarchy, as the hierarchy becomes difficult to comprehend and use. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="coMULTI">/**************************************************************
 * Standard 357 S : Base class is mixed virtual and non virtual.
 ***************************************************************/</span> 
&nbsp;
class A
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class D1 <span class="sy0">:</span> public A
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class D2 <span class="sy0">:</span> public virtual A
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class D3 <span class="sy0">:</span> public D1<span class="sy0">,</span> public D2 <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    <span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
      <span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
&nbsp;
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_89'>89</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_135'>135</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_10-1-3'>10-1-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s358' name='standard_s358'><div class='standard'><div>358&nbsp;S</div></div></a><div class='headline'>Class member name reused.</div></div><p>Class member identifiers shall not use the same name as an identifier used elsewhere, such as a member function local variable or parameter. Name reuse leads to confusion, and ambiguous or incorrect code. </p>
<p>A duplicate violation of <a href='standards.htm#standard_s91'>91 S</a> can be suppressed by setting the modifier <a href='standard_flags.htm#flag_246'>246</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/***********************************************
* Standard 358 S : Class member name reused.
************************************************/</span> 
&nbsp;
class S_358
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    <span class="kw4">void</span> foo<span class="br0">&#40;</span>UINT_32 <span class="sy0">&amp;</span>some_int<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
  private<span class="sy0">:</span>
    UINT_32 some_int<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 *  Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_30'>30</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_8.2.1'>8.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_135'>135</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_246'>246</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s359' name='standard_s359'><div class='standard'><div>359&nbsp;S</div></div></a><div class='headline'>Default parameter use.</div></div><p>In C++ ambiguities may arize if an overloaded function exists with default arguments.   Default arguments are not part of the standard C language, but may be available with some compilers. This standard highlights all uses of default parameters.</p>
<p>By default, this standard is only available for C++ files, but it may be enabled for C files by setting the modifier <a href='standard_flags.htm#flag_401'>401</a> to 1 in the creport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************
 * Standard 359 S : Default parameter use.
 *******************************************/</span>
&nbsp;
class Base
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Base<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Base<span class="br0">&#40;</span><span class="kw4">const</span> Base <span class="sy0">&amp;</span>bs<span class="br0">&#41;</span><span class="sy0">;</span>
    Base <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Base <span class="sy0">&amp;</span>bs<span class="br0">&#41;</span><span class="sy0">;</span>
    ~Base<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
    <span class="kw4">void</span> foo<span class="br0">&#40;</span>UINT_32 par <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
    <span class="kw4">void</span> foo<span class="br0">&#40;</span>UINT_32 par<span class="sy0">,</span> UINT_32 par2 <span class="sy0">=</span> 0U<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_359<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Base base_obj<span class="sy0">;</span>
  base_obj.<span class="me1">foo</span><span class="br0">&#40;</span>3U<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* which foo function is called? */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_42'>42</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_12.1'>12.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s360' name='standard_s360'><div class='standard'><div>360&nbsp;S</div></div></a><div class='headline'>Incompatible type.</div></div><p>An object or function type declared more than once shall be compatible.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;;</span>
&nbsp;
<span class="kw2">extern</span> incompatible_int<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*****************************************
 * Standard 360 S : Incompatible type.
 *****************************************/</span> 
&nbsp;
UCHAR incompatible_int <span class="sy0">=</span> <span class="st0">'0'</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">void</span> static_360 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_8.4'>8.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_8.4'>8.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s361' name='standard_s361'><div class='standard'><div>361&nbsp;S</div></div></a><div class='headline'>Expression needs brackets.</div></div><p>The operator precedence rules are complicated and it is easy to make a mistake. The use of parenthesis helps avoid such errors and helps to make the code easier to read.  </p>
<p>By default this standard is strict and requires parenthesis for all operands that have a precedence greater than that of the operator. An exception is made for simple expressions such as identifiers, function calls and the unary operators &amp; * + - ~ !.</p>
<p>Guidelines differ in where parenthesis should be used and so this standard can be configured as follows:</p>
<table><tr><td> Modifier </td><td> Default </td><td> Behaviour when set to 1 </td></tr>
<tr><td> <a href='standard_flags.htm#flag_420'>420</a> </td><td> 0       </td><td> ++ and -- operators do not require parentheses </td></tr>
<tr><td> <a href='standard_flags.htm#flag_264'>264</a> </td><td> 0       </td><td> + - * / % are treated as having the same level of precedence </td></tr>
<tr><td> <a href='standard_flags.htm#flag_119'>119</a> </td><td> 0 or 1  </td><td> different operators with the same level of precedence require parenthesis </td></tr>
<tr><td> <a href='standard_flags.htm#flag_421'>421</a> </td><td> 0       </td><td> different operators with the same level of precedence do not require parenthesis  </td></tr>
<tr><td> <a href='standard_flags.htm#flag_414'>414</a> </td><td> 0       </td><td> require parenthesis around the operand of sizeof </td></tr>
</table>
<p>This standard can be configured by setting the modifiers to 0 or 1 in the c/cppreport.dat file.  <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. Note: Modifier
<a href='standard_flags.htm#flag_119'>119</a> is set to 1 if you have a MISRA license and should not be altered. When modifier <a href='standard_flags.htm#flag_421'>421</a> is set to 0, the behaviour is dependent on the value of modifier <a href='standard_flags.htm#flag_119'>119</a>, but when set to 1 overrules it.</p>
<p>Parenthesis checking on the logical operators is covered by <a href='standards.htm#standard_s49'>49 S</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="coMULTI">/*********************************************
 * Standard 361 S : Expression needs brackets.
 *********************************************/</span> 
&nbsp;
SINT_32 static_361<span class="br0">&#40;</span>SINT_32 x1<span class="sy0">,</span>
                   SINT_32 x2<span class="sy0">,</span>
                   SINT_32 x3<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  SINT_32 z1<span class="sy0">;</span>
  z1 <span class="sy0">=</span> z1 <span class="sy0">*</span> x2  <span class="sy0">&gt;&gt;</span> 3U<span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span>  
  z1 <span class="sy0">=</span> x1 <span class="sy0">*</span> x2 <span class="sy0">+</span> x3<span class="sy0">;</span>     <span class="coMULTI">/* not compliant, but permitted by modifier 264 */</span>
  z1 <span class="sy0">=</span> x1 <span class="sy0">*</span> x2<span class="sy0">++;</span>        <span class="coMULTI">/* not compliant, but permitted by modifier 420 */</span>
  z1 <span class="sy0">=</span> x1 <span class="sy0">+</span> x2 <span class="sy0">-</span> x3<span class="sy0">;</span>     <span class="coMULTI">/* not compliant, when modifier 119 set to 1 and 421 set to 0 */</span>
  z1 <span class="sy0">=</span> x1 <span class="sy0">+</span> x2 <span class="sy0">+</span> x3<span class="sy0">;</span>     <span class="coMULTI">/* compliant */</span>
  <span class="kw1">return</span> z1<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp00-c'>EXP00-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_264'>264</a> = 1, <a href='standard_flags.htm#flag_421'>421</a> = 1</td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_783'>783</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_264'>264</a> = 1, <a href='standard_flags.htm#flag_421'>421</a> = 1</td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_47'>47</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_98'>98</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.15'>9.15</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_5.1.2'>5.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.4'>10.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_264'>264</a> = 1</td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_47'>47</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_213'>213</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_264'>264</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_363'>363</a>, <a href='lmtcp_model.htm#rule_lmtcp_398'>398</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_264'>264</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_12.1'>12.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_420'>420</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-2'>5-0-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_420'>420</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_47'>47</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.1'>12.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_420'>420</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.12.1'>R.12.1</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.20.7'>R.20.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_414'>414</a> = 1, <a href='standard_flags.htm#flag_420'>420</a> = 1, <a href='standard_flags.htm#flag_421'>421</a> = 1</td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_1.4.a'>1.4.a</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.4.2'>M1.4.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_264'>264</a> = 1, <a href='standard_flags.htm#flag_421'>421</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s362' name='standard_s362'><div class='standard'><div>362&nbsp;S</div></div></a><div class='headline'>main program in a namespace.</div></div><p>The main() function shall be the exception to the rule that states every non-local name be placed in a namespace. The main() function is the designated start of the program, and there is only ever one occurrence permitted. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/***********************************************
 * Standard 362 S : main program in a namespace.
 ***********************************************/</span>
&nbsp;
namespace MySpace
<span class="br0">&#123;</span>
  <span class="kw4">const</span> UINT_32 ok <span class="sy0">=</span> 0U<span class="sy0">;</span>
&nbsp;
  <span class="kw4">void</span> static_362<span class="br0">&#40;</span>UINT_32 <span class="sy0">&amp;</span>my_param<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="co1">// ...</span>
  <span class="br0">&#125;</span>
&nbsp;
  <span class="kw4">int</span> main<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#123;</span>
    UINT_32 my_var <span class="sy0">=</span> ok<span class="sy0">;</span>
    <span class="co1">// ...</span>
    static_362<span class="br0">&#40;</span>my_var<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="co1">// ...</span>
    <span class="kw1">return</span> ok<span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_98'>98</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_156'>156</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_7-3-2'>7-3-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s364' name='standard_s364'><div class='standard'><div>364&nbsp;S</div></div></a><div class='headline'>Inherited default parameter redefined.</div></div><p>A function's inherited default parameter shall never be redefined. The redefinition of default parameters for virtual functions often produces surprising results due to the fact that virtual functions are dynamically bound and default parameter values are statically bound.</p>
<p>This standard can be further restricted to check to redefinitions using the same value by setting the modifier <a href='standard_flags.htm#flag_385'>385</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
* Standard 364 S : Inherited default parameter redefined.
*********************************************************/</span>
&nbsp;
class Base
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Base<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Base<span class="br0">&#40;</span><span class="kw4">const</span> Base <span class="sy0">&amp;</span>bs<span class="br0">&#41;</span><span class="sy0">;</span>
    Base<span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Base <span class="sy0">&amp;</span>bs<span class="br0">&#41;</span><span class="sy0">;</span>
    ~Base<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    virtual <span class="kw4">void</span> foo<span class="br0">&#40;</span>UINT_32 my_int <span class="sy0">=</span> <span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class Derived <span class="sy0">:</span> public Base
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Derived<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Derived<span class="br0">&#40;</span><span class="kw4">const</span> Derived <span class="sy0">&amp;</span>dv<span class="br0">&#41;</span><span class="sy0">;</span>
    Derived<span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Derived <span class="sy0">&amp;</span>dv<span class="br0">&#41;</span><span class="sy0">;</span>
    ~Derived<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    virtual <span class="kw4">void</span> foo<span class="br0">&#40;</span>UINT_32 my_int <span class="sy0">=</span> <span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> static_364<span class="br0">&#40;</span>Derived <span class="sy0">&amp;</span>obj<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Base <span class="sy0">&amp;</span>base_obj <span class="sy0">=</span> obj<span class="sy0">;</span>
  <span class="co1">// ... </span>
  base_obj.<span class="me1">foo</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>  <span class="co1">// calls Derived::foo with my_int = 0 !!! </span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.3.12'>3.3.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_95'>95</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_146'>146</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_8-3-1'>8-3-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s365' name='standard_s365'><div class='standard'><div>365&nbsp;S</div></div></a><div class='headline'>Hexadecimal number with upper case char.</div></div><p>Hexadecimal numbers shall be written using lower case letters.</p>
<p>This standard can be relaxed so as to allow an upper case X by setting the modifier <a href='standard_flags.htm#flag_208'>208</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/****************************************************************
 * Standard 365 S : Hexadecimal number with upper case char.
 ****************************************************************/</span> 
&nbsp;
<span class="kw4">typedef</span> <span class="kw2">enum</span> mask_enum_type
<span class="br0">&#123;</span>
  mask_first <span class="sy0">=</span> <span class="nu12">0x01</span><span class="sy0">,</span>	 <span class="coMULTI">/* ok */</span> 
  mask_all <span class="sy0">=</span> <span class="nu12">0xFF</span>       <span class="coMULTI">/* not compliant */</span> 
<span class="br0">&#125;</span> mask_enum_type<span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_90'>90</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s366' name='standard_s366'><div class='standard'><div>366&nbsp;S</div></div></a><div class='headline'>String continuation - use of \.</div></div><p>It shall not be permitted to use the backslash character to continue a string. String continuation is unwieldy and may cause problems with some compilation tools. A long string may need to be broken down into two or more strings. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &lt;stdio.h&gt; </span>
&nbsp;
<span class="coMULTI">/*************************************************
 * Standard 366 S : String continuation - use of \.
 *************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_366 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot;This is quite a long text string that<span class="es1">\
</span>spans several lines<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_141'>141</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.2.3'>M1.2.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s367' name='standard_s367'><div class='standard'><div>367&nbsp;S</div></div></a><div class='headline'>Macro continuation - use of \.</div></div><p>It shall not be permitted to use the backslash character to continue a macro definition. Macro continuation is unwieldy and may cause problems with some compilation tools. A long macro may need to be broken down into two or more macros, or represented as a function. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/*************************************************
 * Standard 367 S : Macro continuation - use of \.
 *************************************************/</span> 
&nbsp;
<span class="co2">#define S1(X) (\
(X) + ((X) * 2))</span>
&nbsp;
<span class="kw4">void</span> static_367 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_141'>141</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s368' name='standard_s368'><div class='standard'><div>368&nbsp;S</div></div></a><div class='headline'>Pragma continuation - use of \.</div></div><p>It shall not be permitted to use the backslash character to continue a pragma definition. Pragma continuation is unwieldy and may cause problems with some compilation tools. A long pragma statement may need to be broken down into two or more statements.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/*************************************************
 * Standard 368 S : Pragma continuation - use of \.
 *************************************************/</span> 
&nbsp;
<span class="co2">#pragma This is just an example using \
        to continue a pragma.</span>
&nbsp;
<span class="co2">#pragma Another example &quot;using&quot; \
        but with a string before it!</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_141'>141</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s369' name='standard_s369'><div class='standard'><div>369&nbsp;S</div></div></a><div class='headline'>Name found with length greater than ***.</div></div><p>Names should be no more than a pre-determined maximum length - typically 60 characters. Names should be meaningful but also readily comprehend-able. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/**********************************************************
* Standard 369 S : Name found with length greater than ***.
* A/Ref:
***********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Uint_32 my_over_sixty_characters_long_non_compliant_integer_type_instance<span class="sy0">;</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_39'>39</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_6.1.d'>6.1.d</a>, <a href='netrino_model.htm#rule_netrino_7.1.d'>7.1.d</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s370' name='standard_s370'><div class='standard'><div>370&nbsp;S</div></div></a><div class='headline'>If nest depth greater than ***.</div></div><p>An if statement should not be nested greater than a pre-determined maximum number of levels deep - typically 4. Deeply nested code is difficult to debug and maintain. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">const</span> UINT_32 top_value <span class="sy0">=</span> 255U<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/**************************************************
 * Standard 370 S : If nest depth greater than ***.
 **************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_370<span class="br0">&#40;</span>UINT_32 a1<span class="sy0">,</span> UINT_32 a2<span class="sy0">,</span> UINT_32 a3<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>a1 <span class="sy0">&gt;</span> a3<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span>a1 <span class="sy0">&gt;</span> a2<span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span>a2 <span class="sy0">&gt;</span> a3<span class="br0">&#41;</span>
      <span class="br0">&#123;</span>
        <span class="kw1">if</span> <span class="br0">&#40;</span>a2 <span class="sy0">&lt;</span> top_value<span class="br0">&#41;</span>
        <span class="br0">&#123;</span>
          <span class="kw1">if</span> <span class="br0">&#40;</span>a1 <span class="sy0">&gt;</span> top_value<span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant - exceeds nested limit of 4 */</span> 
          <span class="br0">&#123;</span>
            <span class="coMULTI">/* ... */</span> 
          <span class="br0">&#125;</span>
        <span class="br0">&#125;</span>
      <span class="br0">&#125;</span>
    <span class="br0">&#125;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_121'>121</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.7.11'>3.7.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.4'>9.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_8.2.b'>8.2.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s371' name='standard_s371'><div class='standard'><div>371&nbsp;S</div></div></a><div class='headline'>No space after comma in parameter list.</div></div><p>Space characters shall be used following commas in an actual parameter list to help separate the arguments. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">const</span> UINT_32 x1 <span class="sy0">=</span> 5U<span class="sy0">;</span>
<span class="kw4">const</span> UINT_32 x2 <span class="sy0">=</span> 3U<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/**********************************************************
 * Standard 371 S : No space after comma in parameter list.
 **********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> call<span class="br0">&#40;</span>UINT_32 a1<span class="sy0">,</span> UINT_32 a2<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>a1 <span class="sy0">&gt;</span> a2<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="coMULTI">/* ... */</span> 
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_371 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  call<span class="br0">&#40;</span>x1<span class="sy0">,</span>x2<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant - no space */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_150'>150</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_10.12'>10.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_3.1.k'>3.1.k</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s372' name='standard_s372'><div class='standard'><div>372&nbsp;S</div></div></a><div class='headline'>* or &amp; not attached to name in declaration.</div></div><p>If '*' or '&amp;' is used in a declaration, then no space should occur between the '*' or '&amp;' and the name.  </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**************************************************************
 * Standard 372 S : * or &amp; not attached to name in declaration.
 **************************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_372<span class="br0">&#40;</span>INT_32<span class="sy0">*</span> my_int_ptr<span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span> <span class="coMULTI">/* ... */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_158'>158</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.3.9'>3.3.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_10.13'>10.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s373' name='standard_s373'><div class='standard'><div>373&nbsp;S</div></div></a><div class='headline'>Use of integer division.</div></div><p>The implementation of signed integer division ( / and % ) in the chosen compiler should be determined, documented and taken into account. C99 and Java both specify that division will always round towards zero, but it is undefined in C90.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************
 * Standard 373 S : Use of integer division.
 *******************************************/</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_373<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">const</span> INT_32 x1 <span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">5</span><span class="sy0">;</span>
  <span class="kw4">const</span> INT_32 x2 <span class="sy0">=</span> <span class="nu0">3</span><span class="sy0">;</span>
  INT_32 b1 <span class="sy0">=</span> x1 <span class="sy0">/</span> x2<span class="sy0">;</span>  <span class="coMULTI">/* not compliant -  Could be -1 remainder -2, or -2 remainder +1 */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_41'>41</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_301'>301</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_3.3'>3.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_41'>41</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_3.3'>3.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s374' name='standard_s374'><div class='standard'><div>374&nbsp;S</div></div></a><div class='headline'>Name conflict with typedef.</div></div><p>A typedef name shall be a unique identifier, and not reused either as a typedef or for any other purpose.</p>
<p>Note that MISRA-C:2004 checking needs to be enabled in order for this violation to be detected, either via selection of the MISRA-C:2004 programming model or by explicitly enabling the 191 entry configuration flag in the c/cppvals.dat file (TBmisra license permitting).</p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> unique_type<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/**********************************************
 * Standard 374 S : Name conflict with typedef.
 **********************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_374<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  unique_type unique_type<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_89'>89</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.3'>5.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.3'>5.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.6'>R.5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s376' name='standard_s376'><div class='standard'><div>376&nbsp;S</div></div></a><div class='headline'>Use of octal escape sequence.</div></div><p>The use of octal escape sequences should be avoided. The inadvertent introduction of a decimal digit ends the octal escape and introduces another character subject to implementation definition.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/************************************************
 * Standard 376 S : Use of octal escape sequence.
 ************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_376<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  CHAR octal_escape<span class="sy0">,</span>
       n_octal_escape<span class="sy0">;</span>
&nbsp;
  n_octal_escape <span class="sy0">=</span> <span class="st0">'<span class="es5">\01</span>'</span><span class="sy0">;</span>    <span class="coMULTI">/* Not Compliant */</span> 
  n_octal_escape <span class="sy0">=</span> <span class="st0">'<span class="es5">\10</span>9'</span><span class="sy0">;</span>   <span class="coMULTI">/* Not Compliant */</span> 
  octal_escape <span class="sy0">=</span> <span class="st0">'<span class="es5">\0</span>'</span><span class="sy0">;</span>       <span class="coMULTI">/* Compliant - exception to rule */</span> 
&nbsp;
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc10-c'>MSC10-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_176'>176</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_270'>270</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_7.1'>7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-13-2'>2-13-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_7.1'>7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.8.5'>M1.8.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s377' name='standard_s377'><div class='standard'><div>377&nbsp;S</div></div></a><div class='headline'>Null character used within a string.</div></div><p>The use of the octal escape sequence '\0' within a string to indicate a null character should be avoided. The inadvertent introduction of a decimal digit ends the octal escape and introduces another character subject to implementation definition. Furthermore the null character serves to terminate the string when it may not be desirable to do so.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard 377 S : Null character used within a string.
 *******************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_377<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  CHAR <span class="sy0">*</span> n_octal_point <span class="sy0">=</span> <span class="st0">&quot;abc<span class="es5">\017</span>&quot;</span><span class="sy0">;</span>   <span class="coMULTI">/* Not Compliant */</span> 
&nbsp;
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_170'>170</a>, <a href='cwe_model.htm#rule_cwe_464'>464</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_7.1'>7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_7.1'>7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.8.5'>M1.8.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s378' name='standard_s378'><div class='standard'><div>378&nbsp;S</div></div></a><div class='headline'>Tag and type mismatch in struct/union/enum.</div></div><p>The data type name and tag name used to identify a structure, union or enumeration shall be identical. Using different names can create unnecessary confusion. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/**************************************************************
 * Standard 378 S : Tag and type mismatch in struct/union/enum.
 **************************************************************/</span> 
&nbsp;
<span class="kw4">typedef</span> <span class="kw2">enum</span> my_enum
<span class="br0">&#123;</span>
  first<span class="sy0">,</span>
  second<span class="sy0">,</span>
  third
<span class="br0">&#125;</span> seq_enum<span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">void</span> static_378 <span class="br0">&#40;</span> seq_enum pos <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_86'>86</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s379' name='standard_s379'><div class='standard'><div>379&nbsp;S</div></div></a><div class='headline'>Macro exceeds *** continuation lines.</div></div><p>The lines of code substituted for a macro should not exceed the pre-determined maximum number - typically 4. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">signed</span> <span class="kw4">int</span> Sint_32<span class="sy0">;</span>
&nbsp;
<span class="kw4">const</span> Sint_32 m1 <span class="sy0">=</span> <span class="nu0">4</span><span class="sy0">;</span>
<span class="kw4">const</span> Sint_32 m2 <span class="sy0">=</span> <span class="nu0">3</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 379 S : Macro exceeds *** continuation lines.
 * A/Ref:
 ********************************************************/</span> 
&nbsp;
<span class="co2">#define MIN(a, b) ((a) \
                   &lt; \
                   (b) \
                   ? (a) \
                   : (b) \
                   )</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Sint_32 res <span class="sy0">=</span> MIN<span class="br0">&#40;</span>m1<span class="sy0">,</span> m2<span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_91'>91</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s380' name='standard_s380'><div class='standard'><div>380&nbsp;S</div></div></a><div class='headline'>Enumeration element not on a new line.</div></div><p>Each member of an enumerated type shall be declared on a separate line to aid readability. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/*********************************************************
 * Standard 380 S : Enumeration element not on a new line.
 * A/Ref:
 *********************************************************/</span> 
&nbsp;
<span class="kw4">typedef</span> <span class="kw2">enum</span> my_enum
<span class="br0">&#123;</span>
  first<span class="sy0">,</span>
  second<span class="sy0">,</span> third
<span class="br0">&#125;</span> my_enum<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw2">enum</span> my_enum pos<span class="sy0">;</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_157'>157</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s381' name='standard_s381'><div class='standard'><div>381&nbsp;S</div></div></a><div class='headline'>Enum, struct or union not typedeffed.</div></div><p>The typedef facility shall be used to create new user defined types as required, and shall specifically be used to define all enumerated types, structures and unions. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/********************************************************
 * Standard 381 S : Enum, struct or union not typedeffed.
 * A/Ref: 6.1.7.15 &amp; 6.3.7.9
 ********************************************************/</span> 
&nbsp;
<span class="kw2">enum</span> my_enum
<span class="br0">&#123;</span>
  first<span class="sy0">,</span>
  second<span class="sy0">,</span>
  third
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw2">enum</span> my_enum pos<span class="sy0">;</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl05-c'>DCL05-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_736'>736</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_85'>85</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_5.1.b'>5.1.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s382' name='standard_s382'><div class='standard'><div>382&nbsp;S</div></div></a><div class='headline'>(void) missing for discarded return value.</div></div><p>A function call in which the returned value is discarded shall be clearly indicated using (void).</p>
<p>This standard can be further restricted to check for discarded returns from library functions by setting the modifier <a href='standard_flags.htm#flag_383'>383</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
UINT_32 my_const <span class="sy0">=</span> 42U<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 382 S : (void) missing for discarded return value.
 *************************************************************/</span> 
&nbsp;
UINT_32 a_fn<span class="br0">&#40;</span>UINT_32 us1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">return</span> us1<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> static_382<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  a_fn<span class="br0">&#40;</span>my_const<span class="br0">&#41;</span><span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp12-c'>EXP12-C</a>, <a href='cert-c_model.htm#rule_cert-c_fio04-c'>FIO04-C</a>, <a href='cert-c_model.htm#rule_cert-c_fio33-c'>FIO33-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_383'>383</a> = 1</td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_252'>252</a>, <a href='cwe_model.htm#rule_cwe_273'>273</a>, <a href='cwe_model.htm#rule_cwe_737'>737</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_383'>383</a> = 1</td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_116'>116</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_7'>7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_0-1-7'>0-1-7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_16.10'>16.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_383'>383</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.17.7'>R.17.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_383'>383</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s383' name='standard_s383'><div class='standard'><div>383&nbsp;S</div></div></a><div class='headline'>Identifier name matches macro name.</div></div><p>An identifier shall not use the same name as a macro, regardless of scope. Hiding identifiers with an identifier of the same name in a nested scope leads to code which is very confusing. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
&nbsp;
<span class="co2">#define X2(X) ((X) + (X))</span>
&nbsp;
<span class="coMULTI">/******************************************************
 * Standard 383 S : Identifier name matches macro name.
 * A/Ref:
 ******************************************************/</span> 
&nbsp;
Uint_32 X2<span class="sy0">;</span>  <span class="coMULTI">/* Violation - 2nd use of name */</span> 
&nbsp;
Uint_32 foo<span class="br0">&#40;</span>Uint_32 us1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* ... */</span> 
  <span class="kw1">return</span> us1<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.6'>5.6</a>, <a href='misra-ac_model.htm#rule_misra-ac_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.6'>5.6</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.5'>R.5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s384' name='standard_s384'><div class='standard'><div>384&nbsp;S</div></div></a><div class='headline'>Identifier matches macro name in 31 chars.</div></div><p>User-specified identifiers will not rely on the significance of more than 31 characters, as required by the ISO standard.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="co2">#define ABCDEFGHIJKLMNOPQRSTUVWXYZ1234_M(X) ((X) + (X))</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 384 S : Identifier matches macro name in 31 chars.
 *************************************************************/</span> 
&nbsp;
UINT_32 ABCDEFGHIJKLMNOPQRSTUVWXYZ1234_V<span class="sy0">;</span>  <span class="coMULTI">/* not compliant - matches macro name (up to 31 chars) */</span> 
&nbsp;
<span class="kw4">static</span> UINT_32 static_384<span class="br0">&#40;</span>UINT_32 us1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">return</span> us1<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.1'>5.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.1'>5.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.4'>R.5.4</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.5'>R.5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s385' name='standard_s385'><div class='standard'><div>385&nbsp;S</div></div></a><div class='headline'>MISRA switch statement syntax violation.</div></div><p>A switch statement shall only contain switch labels and switch clauses, and no other code.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw2">enum</span> FavouriteSeasons
<span class="br0">&#123;</span>
  spring<span class="sy0">,</span>
  summer<span class="sy0">,</span>
  autumn<span class="sy0">,</span>
  winter
<span class="br0">&#125;</span> FavouriteSeasons<span class="sy0">;</span>
&nbsp;
FavouriteSeasons season<span class="sy0">;</span>
UINT_32 x1<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/***********************************************************
 * Standard 385 S : MISRA switch statement syntax violation.
 ***********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_385<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">switch</span> <span class="br0">&#40;</span>season<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    UINT_32 decl_b4_1st_case<span class="sy0">;</span>   <span class="coMULTI">/* Not Compliant */</span> 
&nbsp;
    <span class="kw1">case</span> spring<span class="sy0">:</span>
      x1 <span class="sy0">=</span> 1U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
&nbsp;
    <span class="kw1">case</span> summer<span class="sy0">:</span>
      x1 <span class="sy0">=</span> 4U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
&nbsp;
    <span class="kw1">case</span> autumn<span class="sy0">:</span>
      x1 <span class="sy0">=</span> 7U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
&nbsp;
    <span class="kw1">case</span> winter<span class="sy0">:</span>
      x1 <span class="sy0">=</span> 10U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
&nbsp;
    <span class="kw1">default</span><span class="sy0">:</span>
      <span class="coMULTI">/* No default action required */</span> 
      <span class="kw2">break</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.9.2.1'>3.9.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_15.0'>15.0</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-4-3'>6-4-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_15.0'>15.0</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.16.1'>R.16.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s386' name='standard_s386'><div class='standard'><div>386&nbsp;S</div></div></a><div class='headline'>Less than *** blank lines separating procs.</div></div><p>Blank lines shall be used to separate logical groupings of source code lines, and specifically there should be a pre-determined minimum number of lines between procedures. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/**************************************************************
 * Standard 386 S : Less than *** blank lines separating procs.
 * A/Ref:
 **************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
                    <span class="coMULTI">/* insufficient space */</span> 
<span class="kw4">void</span> bar<span class="br0">&#40;</span>Uint_32 p1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  foo<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_147'>147</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_10.9'>10.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s387' name='standard_s387'><div class='standard'><div>387&nbsp;S</div></div></a><div class='headline'>Enum initialisation not integer literal.</div></div><p>An enumeration constant is a list of integer constant values, and shall only be associated with integer literals. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
&nbsp;
Uint_32 s4 <span class="sy0">=</span> 4U<span class="sy0">;</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw2">enum</span> FavouriteSeasons
<span class="br0">&#123;</span>
  spring <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">,</span>
  summer <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">,</span>
  autumn <span class="sy0">=</span> <span class="nu0">3</span><span class="sy0">,</span>
  winter <span class="sy0">=</span> s4         <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#125;</span> FavouriteSeasons<span class="sy0">;</span>
&nbsp;
FavouriteSeasons season<span class="sy0">;</span>
Uint_32 x1<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/***********************************************************
 * Standard 387 S : Enum initialisation not integer literal.
 * A/Ref:
 ***********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">switch</span> <span class="br0">&#40;</span>season<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="kw1">case</span> spring<span class="sy0">:</span>
      x1 <span class="sy0">=</span> 1U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
&nbsp;
    <span class="kw1">case</span> summer<span class="sy0">:</span>
      x1 <span class="sy0">=</span> 4U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
&nbsp;
    <span class="kw1">case</span> autumn<span class="sy0">:</span>
      x1 <span class="sy0">=</span> 7U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
&nbsp;
    <span class="kw1">case</span> winter<span class="sy0">:</span>
      x1 <span class="sy0">=</span> 10U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
&nbsp;
    <span class="kw1">default</span><span class="sy0">:</span>
      <span class="coMULTI">/* No default action required */</span> 
      <span class="kw2">break</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.16.2'>5.16.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl08-c'>DCL08-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_13.1.5'>13.1.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_5.1.4'>5.1.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s388' name='standard_s388'><div class='standard'><div>388&nbsp;S</div></div></a><div class='headline'>Extern used in function body.</div></div><p>An extern variable may be accessed by any function in a program file, and as such shall be declared at file scope. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
&nbsp;
<span class="kw4">const</span> Uint_32 limit <span class="sy0">=</span> 99U<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/************************************************
 * Standard 388 S : Extern used in function body.
 * A/Ref:
 ************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw2">extern</span> Uint_32 x1<span class="sy0">;</span>  <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
  <span class="kw1">if</span> <span class="br0">&#40;</span>limit <span class="sy0">==</span> x1<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="coMULTI">/* ...*/</span> 
  <span class="br0">&#125;</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.26'>1.1.26</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_5.1.21'>5.1.21</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s389' name='standard_s389'><div class='standard'><div>389&nbsp;S</div></div></a><div class='headline'>Bool value incremented/decremented.</div></div><p>The increment ++ and decrement -- operators shall not be used on a boolean type variable. Specific functions should be used to assign or change booleans rather than arithmetic operations. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw2">enum</span> Bool
<span class="br0">&#123;</span>
  <span class="kw2">false</span><span class="sy0">,</span>
  <span class="kw2">true</span>
<span class="br0">&#125;</span> Bool<span class="sy0">;</span>
&nbsp;
<span class="kw4">const</span> UINT_32 limit <span class="sy0">=</span> 99U<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/******************************************************
 * Standard 389 S : Bool value incremented/decremented.
 ******************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_389<span class="br0">&#40;</span>UINT_32 x1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Bool b1 <span class="sy0">=</span> <span class="kw2">false</span><span class="sy0">;</span>
&nbsp;
  <span class="kw1">if</span> <span class="br0">&#40;</span>limit <span class="sy0">==</span> x1<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
     b1<span class="sy0">++;</span>	  <span class="coMULTI">/* Not Compliant */</span> 
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_136'>136</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_39'>39</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.16'>10.16</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_305'>305</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_12.6'>12.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.6'>12.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.1'>R.10.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s390' name='standard_s390'><div class='standard'><div>390&nbsp;S</div></div></a><div class='headline'>Typedef array declaration.</div></div><p>Array types shall not be used as the basis of a typedef declaration. Problems can arise relating to bounds checking and incorrectly specified deletion syntax.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/************************************************
 * Standard 390 S : Typedef array declaration.
 ************************************************/</span>
&nbsp;
<span class="kw4">typedef</span> CHAR arraytype<span class="br0">&#91;</span><span class="nu0">20</span><span class="br0">&#93;</span><span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_390<span class="br0">&#40;</span><span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_32'>32</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_8.4.8'>8.4.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_266'>266</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s391' name='standard_s391'><div class='standard'><div>391&nbsp;S</div></div></a><div class='headline'>Public constructor in abstract class.</div></div><p>An abstract class shall have no public constructors. Abstract classes cannot be used to declare objects; by making constructors protected it is explicit that the class can only be used from derived classes. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="coMULTI">/***********************************************************
 * Standard 391 S : Public constructor in abstract class.
 ***********************************************************/</span> 
&nbsp;
class AbstractBase
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    AbstractBase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>               <span class="coMULTI">/* Not Compliant  */</span>
  protected<span class="sy0">:</span>
    AbstractBase <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> AbstractBase <span class="sy0">&amp;</span>ab<span class="br0">&#41;</span><span class="sy0">;</span>
    explicit AbstractBase<span class="br0">&#40;</span><span class="kw4">const</span> AbstractBase <span class="sy0">&amp;</span>ab<span class="br0">&#41;</span><span class="sy0">;</span>
    virtual ~AbstractBase<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    virtual <span class="kw4">void</span> fn_391<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span> <span class="coMULTI">/* pure virtual function */</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> fn_391<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span> <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_12'>12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.2.4'>3.2.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_151'>151</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s392' name='standard_s392'><div class='standard'><div>392&nbsp;S</div></div></a><div class='headline'>Class data accessible thru non const member.</div></div><p>A const member function shall not return non-const pointers or references to member data. Non-const handles indirectly allow modification of class data. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/***************************************************************
 * Standard 392 S : Class data accessible thru non const member.
 ***************************************************************/</span>
&nbsp;
class Person
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    Person <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>ab<span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>ab<span class="br0">&#41;</span><span class="sy0">;</span>
    virtual ~Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    UINT_32 <span class="sy0">&amp;</span>get_number<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <span class="kw4">const</span>
    <span class="br0">&#123;</span>
      <span class="kw1">return</span> num<span class="sy0">;</span>  <span class="co1">// not compliant - permits subsequent modification of private data</span>
    <span class="br0">&#125;</span>
&nbsp;
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 num<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_392<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">const</span> Person person<span class="sy0">;</span>
  UINT_32 <span class="sy0">&amp;</span>rn <span class="sy0">=</span> person.<span class="me1">get_number</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  rn <span class="sy0">=</span> <span class="nu0">10</span><span class="sy0">;</span>          <span class="co1">// modifies private data in person! </span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_19'>19</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.4.2'>3.4.2</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_3.4.3'>3.4.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_154'>154</a>, <a href='lmtcp_model.htm#rule_lmtcp_155'>155</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_9-3-1'>9-3-1</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_9-3-2'>9-3-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s393' name='standard_s393'><div class='standard'><div>393&nbsp;S</div></div></a><div class='headline'>Single parameter constructor not 'explicit'.</div></div><p>All single argument constructors shall be declared as explicit thus preventing their use as implicit type convertors. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/***************************************************************
 * Standard 393 S : Single parameter constructor not 'explicit'.
 ***************************************************************/</span>
&nbsp;
class Person
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 personNum<span class="br0">&#41;</span><span class="sy0">;</span>
    Person<span class="br0">&#40;</span>FLOAT_32 sal<span class="br0">&#41;</span><span class="sy0">;</span>                      <span class="coMULTI">/* not compliant */</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    Person <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    ~Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 personalNumber<span class="sy0">;</span>
    FLOAT_32 salary<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> use<span class="br0">&#40;</span>Person <span class="kw4">const</span> <span class="sy0">&amp;</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_393<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  use<span class="br0">&#40;</span> Person<span class="br0">&#40;</span> <span class="nu0">10</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy0">;</span>  <span class="co1">// ok, explicit  - but if it were 'use( 10 )' it would not compile</span>
  use<span class="br0">&#40;</span> <span class="nu16">20.0</span> <span class="br0">&#41;</span><span class="sy0">;</span>          <span class="co1">// implicit conversion</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span>
<span class="sy0">/</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_7'>7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.1.10'>3.1.10</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_3.2.3'>3.2.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_112'>112</a>, <a href='lmtcp_model.htm#rule_lmtcp_321'>321</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_12-1-3'>12-1-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s394' name='standard_s394'><div class='standard'><div>394&nbsp;S</div></div></a><div class='headline'>Conversion function found.</div></div><p>Conversion operators should not be used, as implicit conversion operators can take place without the programmer's knowledge. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="coMULTI">/*********************************************
 * Standard 394 S : Conversion function found.
 *********************************************/</span>
&nbsp;
class CExampleC<span class="sy0">;</span>
&nbsp;
class CExampleD
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    explicit CExampleD<span class="br0">&#40;</span> CExampleC <span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">// 1</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class CExampleC
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    operator CExampleD<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>            <span class="co1">// 2  - not compliant</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> use<span class="br0">&#40;</span> CExampleD <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_394<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  CExampleC c<span class="sy0">;</span>
  use<span class="br0">&#40;</span> c <span class="br0">&#41;</span><span class="sy0">;</span>    <span class="co1">// Ambiguous (convert to CExampleD by 1 or 2?)</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_8'>8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.1.10'>3.1.10</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_3.1.11'>3.1.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_321'>321</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s395' name='standard_s395'><div class='standard'><div>395&nbsp;S</div></div></a><div class='headline'>Public base use of STL library member.</div></div><p>STL containers shall not be used as public base classes. They lack a virtual destructor, which may cause problems when deleting derived objects (also see <a href='standards.htm#standard_s303'>303 S</a>).</p>
<p>Testbed must first be configured to list the STL members that are to be checked. The names must be added to the STLTRE list in the cpptbend.dat file, prefixed by the number of letters in the name.  Normally this list is empty apart for a fictitious example called example_name_zz.</p>
<pre>C list of standard template library class names. RDSTL, STLTRE
   15 example_name_zz</pre><div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &lt;list&gt;</span>
&nbsp;
<span class="coMULTI">/*********************************************************
 * Standard 395 S : Public base use of STL library member.
 * assumes &quot;std::list&quot; has been added to STLTRE list.
 *********************************************************/</span>
&nbsp;
template <span class="sy0">&lt;</span>typename T<span class="sy0">&gt;</span>
class MyList <span class="sy0">:</span> public std<span class="sy0">::</span><span class="me2">list</span><span class="sy0">&lt;</span>T<span class="sy0">&gt;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  <span class="co1">// ...</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_395<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  MyList<span class="sy0">&lt;</span>INT_32<span class="sy0">&gt;</span> <span class="sy0">*</span>pHeapLis <span class="sy0">=</span> new MyList<span class="sy0">&lt;</span>INT_32<span class="sy0">&gt;;</span>  <span class="co1">// allocate derived obj on heap</span>
  std<span class="sy0">::</span><span class="me2">list</span><span class="sy0">&lt;</span>INT_32<span class="sy0">&gt;</span> <span class="sy0">*</span>pBaseLis <span class="sy0">=</span> pHeapLis<span class="sy0">;</span>         <span class="co1">// access through base class</span>
  delete pBaseLis<span class="sy0">;</span>                                <span class="co1">// undefined behaviour!</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_58'>58</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_17.7'>17.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_176'>176</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s396' name='standard_s396'><div class='standard'><div>396&nbsp;S</div></div></a><div class='headline'>Possible ambiguous numeric/pointer overloads.</div></div><p>Overloading on both numeric and pointer types shall not be performed, as it is not obvious which function is called when there is a numeric argument. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="kw4">typedef</span> <span class="kw4">char</span> Char<span class="sy0">;</span>
&nbsp;
<span class="co1">//</span>
<span class="co1">// Standard 396 S : Possible ambiguous numeric/pointer overloads.</span>
<span class="co1">// A/Ref:</span>
<span class="co1">// </span>
&nbsp;
class One
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    <span class="kw4">void</span> foo<span class="br0">&#40;</span>Char cc<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw4">void</span> foo<span class="br0">&#40;</span>class Y <span class="sy0">*</span> yy<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> fn<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  One my_one<span class="sy0">;</span>
  my_one.<span class="me1">foo</span><span class="br0">&#40;</span> <span class="nu0">0</span> <span class="br0">&#41;</span><span class="sy0">;</span>   <span class="co1">// ambiguous </span>
  my_one.<span class="me1">foo</span><span class="br0">&#40;</span> <span class="nu0">1</span> <span class="br0">&#41;</span><span class="sy0">;</span>   <span class="co1">// calls foo( Char ) </span>
  my_one.<span class="me1">foo</span><span class="br0">&#40;</span> <span class="st0">'1'</span> <span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">// calls foo( Char ) </span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="co1">//</span>
<span class="co1">//</span>
<span class="co1">// Copyright (c) 2006 Liverpool Data Research Associates</span>
<span class="co1">//</span>
<span class="co1">//</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_41'>41</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_11.9'>11.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_218'>218</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s397' name='standard_s397'><div class='standard'><div>397&nbsp;S</div></div></a><div class='headline'>Array initialisation has insufficient items.</div></div><p>An array shall be fully populated upon initialisation. If there are fewer initialising data objects than the subscript limit, all excess elements in the array are set to zero.  This may not be what the user expected.</p>
<p>This standard can be relaxed to allow the initialisation of character arrays with string literals shorter than the array size by setting the modifier <a href='standard_flags.htm#flag_415'>415</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the c/cppreport.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**************************************************************
* Standard 397 S : Array initialisation has insufficient items.
***************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_397 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  INT_32 my_array<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span> <span class="br0">&#125;</span><span class="sy0">;</span>  <span class="coMULTI">/* Not Compliant */</span>
&nbsp;
  CHAR char_10<span class="br0">&#91;</span><span class="nu0">10</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="st0">&quot;Hello&quot;</span><span class="sy0">;</span>     <span class="coMULTI">/* Not Compliant, unless modifier 415 set to 1 */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.16.14'>5.16.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_arr02-c'>ARR02-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_415'>415</a> = 1</td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_13.1.6'>13.1.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_740'>740</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_5.1.20'>5.1.20</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_9.2'>9.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_8-5-2'>8-5-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_9.2'>9.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.9.3'>R.9.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_415'>415</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m2.1.1'>M2.1.1</a>, <a href='sec-c_model.htm#rule_sec-c_r1.2.1'>R1.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s398' name='standard_s398'><div class='standard'><div>398&nbsp;S</div></div></a><div class='headline'>Boolean negation outside bracketed exprsn.</div></div><p>The use of a boolean operator to negate the result of an expression with a binary boolean operator shall be avoided. An alternative method of performing the intended logic should be used.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*************************************************************
* Standard 398 S : Boolean negation outside bracketed exprsn.
**************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_398<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 lowertest1<span class="sy0">,</span>
          test<span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
  <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span><span class="br0">&#40;</span>lowertest1 <span class="sy0">&lt;=</span> test<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="coMULTI">/* not complaint */</span>
  <span class="br0">&#123;</span>
     <span class="sy0">;</span>
  <span class="br0">&#125;</span>
&nbsp;
  <span class="kw1">if</span> <span class="br0">&#40;</span>lowertest1 <span class="sy0">&gt;</span> test<span class="br0">&#41;</span>  <span class="coMULTI">/* preferred */</span> 
  <span class="br0">&#123;</span>
     <span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_14.1.4'>14.1.4</a>, <a href='cmse_model.htm#rule_cmse_14.2.1'>14.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.14.2.1'>4.14.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s399' name='standard_s399'><div class='standard'><div>399&nbsp;S</div></div></a><div class='headline'>Function declared more than once.</div></div><p>A function should not have more than one non-defining declaration.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/***************************************************
* Standard 399 S : Function declared more than once.
****************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_399<span class="br0">&#40;</span>SINT_32 p1<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw4">void</span> static_399<span class="br0">&#40;</span>SINT_32 p1<span class="br0">&#41;</span><span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
<span class="kw4">void</span> static_399<span class="br0">&#40;</span>UINT_32 p1<span class="br0">&#41;</span><span class="sy0">;</span>    <span class="coMULTI">/* not compliant - constraint error */</span> 
UINT_32 static_399<span class="br0">&#40;</span>SINT_32 p1<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant - constraint error */</span> 
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.16.7'>5.16.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.27'>1.1.27</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_5.1.23'>5.1.23</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c++.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s400' name='standard_s400'><div class='standard'><div>400&nbsp;S</div></div></a><div class='headline'>Use of sizeof on a type.</div></div><p>The sizeof operator shall not be applied to a type. </p>
<p>For example, the use of sizeof on a type may produce unexpected results depending on the padding used with a structure.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">struct</span> My_struct
<span class="br0">&#123;</span>
  UINT_16 x1<span class="sy0">;</span>
  UINT_16 x2<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/******************************************
* Standard 400 S : Use of sizeof on a type.
*******************************************/</span> 
&nbsp;
UINT_32 static_400<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* The structure may be held in 1 or 2 32-bit integers, depending on the padding */</span>
  <span class="kw1">return</span> <span class="kw4">sizeof</span><span class="br0">&#40;</span><span class="kw4">struct</span> My_struct<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* Not Compliant */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_5.1.8'>5.1.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s401' name='standard_s401'><div class='standard'><div>401&nbsp;S</div></div></a><div class='headline'>Use of sizeof on an array parameter.</div></div><p>Arrays passed by value are in actual fact passed as a copy of the array address. It is therefore not advisable to use the sizeof operator on an array parameter as the pointer size is likely to be returned rather than the required array size.</p>
<p>Furthermore, sizes of data objects stored within the array will be machine-dependent and no assumptions should be made about them when writing portable code. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">char</span> Char<span class="sy0">;</span>
<span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard 401 S : Use of sizeof on an array parameter.
 * A/Ref:
 *******************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span>Char str<span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Uint_32 sz <span class="sy0">=</span> <span class="kw4">sizeof</span><span class="br0">&#40;</span>str<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* &quot;str&quot; is an array type parameter */</span> 
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_arr00-c'>ARR00-C</a>, <a href='cert-c_model.htm#rule_cert-c_arr01-c'>ARR01-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.1.22'>6.1.22</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_119'>119</a>, <a href='cwe_model.htm#rule_cwe_129'>129</a>, <a href='cwe_model.htm#rule_cwe_467'>467</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_5.1.9'>5.1.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s402' name='standard_s402'><div class='standard'><div>402&nbsp;S</div></div></a><div class='headline'>Comparison of booleans.</div></div><p>Comparison between booleans should not be made, as this may lead to results that do not match the developer's expectations.</p>
<p>This is particularly true in the C90 language where there is no Boolean type and by convention integer zero is regarded as false and non-zero is true. Hence a comparison between boolean types which depend upon specific values may give unexpected results.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw2">enum</span> Bool
<span class="br0">&#123;</span>
  <span class="kw2">false</span><span class="sy0">,</span>
  <span class="kw2">true</span>
<span class="br0">&#125;</span> Bool<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/******************************************
 * Standard 402 S : Comparison of booleans.
 ******************************************/</span>
&nbsp;
<span class="kw4">void</span> static_402<span class="br0">&#40;</span>Bool b1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Bool b2 <span class="sy0">=</span> <span class="kw2">true</span><span class="sy0">;</span>
&nbsp;
  <span class="kw1">if</span> <span class="br0">&#40;</span>b1 <span class="sy0">==</span> b2<span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#123;</span>
    <span class="coMULTI">/* ... */</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_14.1.6'>14.1.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_5.1.13'>5.1.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s403' name='standard_s403'><div class='standard'><div>403&nbsp;S</div></div></a><div class='headline'>Negative (or potentially negative) shift.</div></div><p>Right hand side operands used with shift operators shall not be negative. A negative shift leads to undefined behaviour.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/************************************************************
 * Standard 403 S : Negative (or potentially negative) shift.
 ************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_403<span class="br0">&#40;</span> INT_32 si <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 my_var <span class="sy0">=</span> 2U<span class="sy0">;</span>
  <span class="kw4">const</span> INT_32 s1 <span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">2</span><span class="sy0">;</span>
&nbsp;
  my_var <span class="sy0">=</span> my_var <span class="sy0">&lt;&lt;</span> <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span>  <span class="coMULTI">/* -1 is a negative number */</span> 
  my_var <span class="sy0">=</span> my_var <span class="sy0">&gt;&gt;</span> s1<span class="sy0">;</span>  <span class="coMULTI">/* the value of &quot;s1&quot; variable is negative */</span> 
  my_var <span class="sy0">=</span> my_var <span class="sy0">&gt;&gt;</span> si<span class="sy0">;</span>  <span class="coMULTI">/* the value of &quot;si&quot; variable may be negative */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.16.4'>5.16.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int34-c'>INT34-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.1.20'>6.1.20</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_190'>190</a>, <a href='cwe_model.htm#rule_cwe_680'>680</a>, <a href='cwe_model.htm#rule_cwe_681'>681</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_38'>38</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_5.1.7'>5.1.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.12'>10.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_38'>38</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_164'>164</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_294'>294</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_12.7'>12.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_38'>38</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.7'>12.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.1'>R.10.1</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.12.2'>R.12.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.5.4'>R2.5.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s404' name='standard_s404'><div class='standard'><div>404&nbsp;S</div></div></a><div class='headline'>Array initialisation has too many items.</div></div><p>The number of initialising data objects shall not be more than implied by the subscript limit. In general this is a constraint error and may overwrite an adjacent data area. However, not all compilers detect this problem.</p>
<p>In addition, when an array of characters is initialised with a string, the C language allows the trailing \0 to omitted. This may confuse the user and is highlighted by this standard.</p>
<p>This standard can be relaxed to allow the omission of the trailing \0 by setting the modifier <a href='standard_flags.htm#flag_399'>399</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the c/cppreport.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**********************************************************
* Standard 404 S : Array initialisation has too many items.
***********************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_404<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  INT_32 my_array<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="sy0">,</span> <span class="nu0">4</span> <span class="br0">&#125;</span><span class="sy0">;</span>  <span class="coMULTI">/* Not Compliant - constraint error */</span>
&nbsp;
  <span class="kw4">char</span> char3<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="st0">&quot;abcd&quot;</span><span class="sy0">;</span>    <span class="coMULTI">/* Not Compliant - constraint error */</span>
  <span class="kw4">char</span> char4<span class="br0">&#91;</span><span class="nu0">4</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="st0">&quot;abcd&quot;</span><span class="sy0">;</span>    <span class="coMULTI">/* Not Compliant - omits \0, permitted with modifier 399 */</span>
  <span class="kw4">char</span> char5<span class="br0">&#91;</span><span class="nu0">5</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="st0">&quot;abcd&quot;</span><span class="sy0">;</span>    <span class="coMULTI">/* compliant  - includes \0 */</span>
  <span class="coMULTI">/* ... */</span>
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.16.1'>5.16.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_arr02-c'>ARR02-C</a>, <a href='cert-c_model.htm#rule_cert-c_str36-c'>STR36-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.1.19'>6.1.19</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_665'>665</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.1.1'>3.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_399'>399</a> = 1</td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_1.1'>1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_399'>399</a> = 1</td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_5.1.3'>5.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_9.2'>9.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_1-0-1'>1-0-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_9.2'>9.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.1'>R.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_399'>399</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r1.2.1'>R1.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s405' name='standard_s405'><div class='standard'><div>405&nbsp;S</div></div></a><div class='headline'>Macro name appears in own replacement list.</div></div><p>The use of a macro name in its own replacement list is not expanded. This may lead to user confusion if recursion was expected.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*************************************************************
* Standard 405 S : Macro name appears in own replacement list.
**************************************************************/</span>
&nbsp;
<span class="co2">#define MY_MACRO(X) ((X) * (MY_MACRO((X) + 1)))</span>
                            <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">void</span> static_405 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    INT_32 v <span class="sy0">=</span> MY_MACRO<span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span><span class="sy0">;</span>
       <span class="coMULTI">/* Expands to ((3) * (MY_MACRO((3) + 1))) */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s406' name='standard_s406'><div class='standard'><div>406&nbsp;S</div></div></a><div class='headline'>Use of ++ or -- on RHS of &amp;&amp; or || operator.</div></div><p>The right-hand side operand of a logical expression shall not contain side-effects if, dependent upon the nature of the left-hand side, its evaluation is conditional. Any reliance on the side-effect made by subsequent statements introduces the potential for unexpected behaviour in the software. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw2">enum</span> Bool
<span class="br0">&#123;</span>
  <span class="kw2">false</span><span class="sy0">,</span>
  <span class="kw2">true</span>
<span class="br0">&#125;</span> Bool<span class="sy0">;</span>
&nbsp;
<span class="kw4">const</span> Uint_32 max_num <span class="sy0">=</span> <span class="nu0">10</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/***************************************************************
 * Standard 406 S : Use of ++ or -- on RHS of &amp;&amp; or || operator.
 * A/Ref:
 ***************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span>Bool is_high<span class="sy0">,</span>
         Uint_32 p1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>is_high <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span>max_num <span class="sy0">==</span> p1<span class="sy0">++</span><span class="br0">&#41;</span><span class="br0">&#41;</span>  <span class="coMULTI">/* increment will not take place if is_high 'false' */</span> 
  <span class="br0">&#123;</span>
    <span class="coMULTI">/* ... */</span> 
  <span class="br0">&#125;</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp02-c'>EXP02-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_664'>664</a>, <a href='cwe_model.htm#rule_cwe_682'>682</a>, <a href='cwe_model.htm#rule_cwe_737'>737</a>, <a href='cwe_model.htm#rule_cwe_768'>768</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_33'>33</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.21'>9.21</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.9'>10.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_33'>33</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_157'>157</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_286'>286</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_12.4'>12.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-14-1'>5-14-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_33'>33</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.4'>12.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.13.5'>R.13.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.8.1'>M1.8.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s407' name='standard_s407'><div class='standard'><div>407&nbsp;S</div></div></a><div class='headline'>free used on string.</div></div><p>Strings do not have memory explicitly dynamically allocated, and hence have no requirement for the use of the free function for de-allocation. The use of free on a string is invalid and leads to undefined behaviour.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/***************************************
 * Standard 407 S : free used on string.
 ***************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_407<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">char</span> <span class="sy0">*</span>str <span class="sy0">=</span> <span class="st0">&quot;abcde&quot;</span><span class="sy0">;</span>
&nbsp;
  free<span class="br0">&#40;</span>str<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_mem34-c'>MEM34-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.1.26'>6.1.26</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_590'>590</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a>, <a href='cwe_model.htm#rule_cwe_762'>762</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_5.1.19'>5.1.19</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.22.2'>R.22.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s408' name='standard_s408'><div class='standard'><div>408&nbsp;S</div></div></a><div class='headline'>Volatile variable accessed on RHS of &amp;&amp; or ||.</div></div><p>The right-hand side operand of a logical expression shall not contain access to a volatile variable if, dependent upon the nature of the left-hand side, its evaluation is conditional. Any reliance on a value change to the volatile variable made by subsequent statements introduces the potential for unexpected behaviour in the software. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw2">enum</span> Bool
<span class="br0">&#123;</span>
  <span class="kw2">false</span><span class="sy0">,</span>
  <span class="kw2">true</span>
<span class="br0">&#125;</span> Bool<span class="sy0">;</span>
&nbsp;
<span class="kw4">const</span> Uint_32 max_num <span class="sy0">=</span> <span class="nu0">10</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*****************************************************************
 * Standard 408 S : Volatile variable accessed on RHS of &amp;&amp; or ||.
 * A/Ref:
 *****************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span>Bool is_high<span class="sy0">,</span>
         Uint_32 p1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">volatile</span> Uint_32 v1<span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
  <span class="kw1">if</span> <span class="br0">&#40;</span>is_high <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span>max_num <span class="sy0">==</span> v1<span class="br0">&#41;</span><span class="br0">&#41;</span>  <span class="coMULTI">/* v1 will not be accessed if is_high 'false' */</span>
  <span class="br0">&#123;</span>
    <span class="coMULTI">/* ... */</span> 
  <span class="br0">&#125;</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp02-c'>EXP02-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_664'>664</a>, <a href='cwe_model.htm#rule_cwe_682'>682</a>, <a href='cwe_model.htm#rule_cwe_737'>737</a>, <a href='cwe_model.htm#rule_cwe_768'>768</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_33'>33</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.21'>9.21</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.9'>10.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_33'>33</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_157'>157</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_286'>286</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_12.4'>12.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_33'>33</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.4'>12.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.13.5'>R.13.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.8.1'>M1.8.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s409' name='standard_s409'><div class='standard'><div>409&nbsp;S</div></div></a><div class='headline'>More than one break or goto statement in loop.</div></div><p>For any iteration there shall be at most one break statement used to exit the loop. More than one break is not necessary if the code is well-structured.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdio.h&gt;</span>
&nbsp;
<span class="kw4">const</span> INT_32 max_num <span class="sy0">=</span> <span class="nu0">10</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/****************************************************************
 * Standard 409 S : More than one break or goto statement in loop.
 ****************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_409<span class="br0">&#40;</span> <span class="kw4">char</span> arr<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  INT_32 sub<span class="sy0">;</span>
&nbsp;
  <span class="kw1">for</span> <span class="br0">&#40;</span>sub <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> sub <span class="sy0">&lt;</span> max_num<span class="sy0">;</span> sub<span class="sy0">++</span><span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span>arr<span class="br0">&#91;</span>sub<span class="br0">&#93;</span> <span class="sy0">==</span> <span class="st0">'<span class="es5">\0</span>'</span><span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
    <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot;%c&quot;</span><span class="sy0">,</span> arr<span class="br0">&#91;</span>sub<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
    <span class="kw1">if</span> <span class="br0">&#40;</span>arr<span class="br0">&#91;</span>sub<span class="br0">&#93;</span> <span class="sy0">==</span> <span class="st0">'z'</span><span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
      <span class="kw2">break</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
    <span class="br0">&#125;</span>
  <span class="br0">&#125;</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_14.6'>14.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-6-4'>6-6-4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_14.6'>14.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.15.4'>R.15.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m3.1.1'>M3.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s410' name='standard_s410'><div class='standard'><div>410&nbsp;S</div></div></a><div class='headline'>Switch empty default has no comment.</div></div><p>A switch statement shall contain a default clause which will take appropriate action in the event that prior case clauses have not been met, or at least a comment to indicate that the programmer has considered the possibility. The comment must be placed after the default and before the break.</p>
<p>Note that MISRA-C:2004 checking needs to be enabled in order for this violation to be detected, either via selection of the MISRA-C:2004 programming model or by explicitly enabling the 191 entry configuration flag in the c/cppvals.dat file (TBmisra license permitting). </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw2">enum</span> FavouriteSeasons
<span class="br0">&#123;</span>
  spring<span class="sy0">,</span>
  summer<span class="sy0">,</span>
  autumn<span class="sy0">,</span>
  winter
<span class="br0">&#125;</span> FavouriteSeasons<span class="sy0">;</span>
&nbsp;
FavouriteSeasons season<span class="sy0">;</span>
UINT_32 x1<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard 410 S : Switch empty default has no comment.
 *******************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_410<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">switch</span> <span class="br0">&#40;</span>season<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="kw1">case</span> spring<span class="sy0">:</span>
      x1 <span class="sy0">=</span> 1U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw1">case</span> summer<span class="sy0">:</span>
      x1 <span class="sy0">=</span> 4U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw1">case</span> autumn<span class="sy0">:</span>
      x1 <span class="sy0">=</span> 7U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw1">case</span> winter<span class="sy0">:</span>
      x1 <span class="sy0">=</span> 10U<span class="sy0">;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw1">default</span><span class="sy0">:</span>
      <span class="kw2">break</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_15.3'>15.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.16.4'>R.16.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r3.5.2'>R3.5.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s411' name='standard_s411'><div class='standard'><div>411&nbsp;S</div></div></a><div class='headline'>Inappropriate value assigned to enum.</div></div><p>Assigning a non-enumerative value to an enumerated type shall be avoided as the result is unspecified if the value is not within the range of the enumeration. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw2">enum</span> Seasons
<span class="br0">&#123;</span>
  spring <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">,</span>
  summer<span class="sy0">,</span>
  autumn<span class="sy0">,</span>
  winter
<span class="br0">&#125;</span> Seasons<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 411 S : Inappropriate value assigned to enum.
 * A/Ref:
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Seasons season <span class="sy0">=</span> autumn<span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
  season<span class="sy0">++;</span>    <span class="coMULTI">/* not compliant */</span> 
&nbsp;
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_192'>192</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_66'>66</a>, <a href='dera_model.htm#rule_dera_67'>67</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_57'>57</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_5.1.22'>5.1.22</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_15.4'>15.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_336'>336</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_7-2-1'>7-2-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.3'>R.10.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s412' name='standard_s412'><div class='standard'><div>412&nbsp;S</div></div></a><div class='headline'>Undefined behaviour, \ before E-O-F.</div></div><p>Ensure that all non-empty source files end with a complete language statement followed by a new-line character, otherwise the behaviour is undefined.</p>
<div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_14.8'>14.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_16'>16</a>, <a href='lmtcp_model.htm#rule_lmtcp_62'>62</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s413' name='standard_s413'><div class='standard'><div>413&nbsp;S</div></div></a><div class='headline'>User type declared but not used in code analysed.</div></div><p>A type declared in the code shall be used in the declaration of an object or function. Redundant types reduce the maintainability of code. </p>
<p>This standard can be further restricted to check for unused declarations in included files by setting the modifier <a href='standard_flags.htm#flag_284'>284</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw2">enum</span> Seasons <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  spring<span class="sy0">,</span>
  summer<span class="sy0">,</span>
  autumn<span class="sy0">,</span>
  winter
<span class="br0">&#125;</span><span class="sy0">;</span>  
&nbsp;
<span class="kw4">typedef</span> INT_32 mytype<span class="sy0">;</span>  <span class="coMULTI">/* not compliant as mytype not used in a declaration */</span>
&nbsp;
<span class="coMULTI">/********************************************************************
 * Standard 413 S : User type declared but not used in code analysed.
 ********************************************************************/</span> 
&nbsp;
INT_32 static_413<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">return</span> <span class="br0">&#40;</span>mytype<span class="br0">&#41;</span> <span class="nu0">3</span><span class="sy0">;</span>  
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.16.19'>5.16.19</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_5.21'>5.21</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_0-1-5'>0-1-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.2.3'>R.2.3</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.2.4'>R.2.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_4.3.e'>4.3.e</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s415' name='standard_s415'><div class='standard'><div>415&nbsp;S</div></div></a><div class='headline'>Single dimension array param size specified.</div></div><p>An array type formal parameter shall not be specified with the array size. An array intended to be passed by value is in fact always passed by reference, i.e. a copy of the address of the first entry in the array. Specifying the array size serves no purpose but to add confusion, and may conflict with the actual array size.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdio.h&gt;</span>
&nbsp;
<span class="kw4">const</span> INT_32 max_num <span class="sy0">=</span> <span class="nu0">10</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/***************************************************************
 * Standard 415 S : Single dimension array param size specified.
 ***************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_415<span class="br0">&#40;</span><span class="kw4">char</span> arr<span class="br0">&#91;</span><span class="nu0">10</span><span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  INT_32 sub<span class="sy0">;</span>
&nbsp;
  <span class="kw1">for</span> <span class="br0">&#40;</span>sub <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> sub <span class="sy0">&lt;</span> max_num<span class="sy0">;</span> sub<span class="sy0">++</span><span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span>arr<span class="br0">&#91;</span>sub<span class="br0">&#93;</span> <span class="sy0">==</span> <span class="st0">'<span class="es5">\0</span>'</span><span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
    <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot;%c&quot;</span><span class="sy0">,</span> arr<span class="br0">&#91;</span>sub<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.16.10'>5.16.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.23'>1.1.23</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_5.1.10'>5.1.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s416' name='standard_s416'><div class='standard'><div>416&nbsp;S</div></div></a><div class='headline'>First array param dimension specified.</div></div><p>A multi-dimensional array type formal parameter shall not have its first dimension specified. An array intended to be passed by value is in fact always passed by reference, i.e. a copy of the address of the first entry in the array. Specifying the size of an array parameter serves no purpose but to add confusion, and may potentially conflict with the actual array size.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdio.h&gt;</span>
&nbsp;
<span class="kw4">const</span> INT_32 max_num <span class="sy0">=</span> <span class="nu0">10</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*********************************************************
 * Standard 416 S : First array param dimension specified.
 *********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_416<span class="br0">&#40;</span><span class="kw4">char</span> arr<span class="br0">&#91;</span><span class="nu0">10</span><span class="br0">&#93;</span><span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  INT_32 sub<span class="sy0">;</span>
&nbsp;
  <span class="kw1">for</span> <span class="br0">&#40;</span>sub <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> sub <span class="sy0">&lt;</span> max_num<span class="sy0">;</span> sub<span class="sy0">++</span><span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span>arr<span class="br0">&#91;</span>sub<span class="br0">&#93;</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">==</span> <span class="st0">'<span class="es5">\0</span>'</span><span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
      <span class="kw2">break</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
    <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot;%c&quot;</span><span class="sy0">,</span> arr<span class="br0">&#91;</span>sub<span class="br0">&#93;</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.16.11'>5.16.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.24'>1.1.24</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_5.1.11'>5.1.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s417' name='standard_s417'><div class='standard'><div>417&nbsp;S</div></div></a><div class='headline'>Use of #if preprocessor command.</div></div><p>The use of the pre-processor should be limited such that only the presence of a definition is checked using #ifndef, rather than using #if. In particular, the control of conditional compilation through a specific value of a pre-processor token is prone to error. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
&nbsp;
<span class="co2">#define DEBUG1 1</span>
&nbsp;
<span class="coMULTI">/***************************************************
 * Standard 417 S : Use of #if preprocessor command.
 * A/Ref:
 ***************************************************/</span> 
&nbsp;
<span class="co2">#if DEBUG1</span>
&nbsp;
<span class="kw4">const</span> Uint_32 init <span class="sy0">=</span> 1U<span class="sy0">;</span>
&nbsp;
<span class="co2">#else</span>
&nbsp;
<span class="kw4">const</span> Uint_32 init <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
<span class="co2">#endif</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_14.5'>14.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_8'>8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s418' name='standard_s418'><div class='standard'><div>418&nbsp;S</div></div></a><div class='headline'>Class Derivation is not public.</div></div><p>Inheritance shall be exclusively used to represent an is-a relationship using the public classifier. Hence the is-implemented-in-terms-of relationship should be constructed via composition or some other means rather than using private inheritance which is purely an implementation technique.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 418 S : Class Derivation is not public.
 ********************************************************/</span>
&nbsp;
class Person
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 personNum<span class="br0">&#41;</span><span class="sy0">;</span>
    Person <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    ~Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 personalNumber<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class Student <span class="sy0">:</span> private Person <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.3.1'>3.3.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_137'>137</a>, <a href='lmtcp_model.htm#rule_lmtcp_139'>139</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s419' name='standard_s419'><div class='standard'><div>419&nbsp;S</div></div></a><div class='headline'>Deprecated class initialisation.</div></div><p>Class type variables shall be defined using direct initialisation rather than copy initialisation, thereby removing the extra step of constructing a temporary object before copy constructing the resultant variable.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/***************************************************
 * Standard 419 S : Deprecated class initialisation.
 ***************************************************/</span>
&nbsp;
class Person
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 personNum<span class="br0">&#41;</span><span class="sy0">;</span>
    Person <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    ~Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 personalNumber<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_419<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Person p1 <span class="sy0">=</span> Person<span class="br0">&#40;</span><span class="nu0">42</span><span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
  Person p2<span class="br0">&#40;</span><span class="nu0">7</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="co1">// ...</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_3'>3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.1.2'>3.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_277'>277</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s420' name='standard_s420'><div class='standard'><div>420&nbsp;S</div></div></a><div class='headline'>Virtual function should not be inline.</div></div><p>Virtual functions shall not be inlined either explicitly with the inline keyword or implicitly through method definition in a class declaration. Due to polymorphism a compiler cannot possibly know which instance of a virtual function will be called at compile time.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**********************************************************
 * Standard 420 S : Virtual function should not be inline.
 **********************************************************/</span>
&nbsp;
class Base
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Base<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Base<span class="br0">&#40;</span><span class="kw4">const</span> Base <span class="sy0">&amp;</span>base<span class="br0">&#41;</span><span class="sy0">;</span>
    Base <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Base <span class="sy0">&amp;</span>base<span class="br0">&#41;</span><span class="sy0">;</span>
    virtual ~Base<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
    virtual <span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant */</span>
    <span class="br0">&#123;</span>
      <span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
&nbsp;
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 m_var<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_5'>5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.1.6'>3.1.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_224'>224</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s421' name='standard_s421'><div class='standard'><div>421&nbsp;S</div></div></a><div class='headline'>New or delete not explicitly static.</div></div><p>Operator new and delete should be declared explicitly static. Although they are by default implicitly static, documenting the static nature in this way helps improve maintainability. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
&nbsp;
<span class="coMULTI">/**********************************************************
 * Standard 421 S : New or delete not explicitly static.
 **********************************************************/</span>
&nbsp;
class X
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    X<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    ~X<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw4">void</span> <span class="sy0">*</span>operator new<span class="br0">&#40;</span><span class="kw4">const</span> size_t size<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="co1">// should be explicitly 'static'</span>
    <span class="kw4">static</span> <span class="kw4">void</span> operator delete<span class="br0">&#40;</span><span class="kw4">void</span><span class="sy0">*</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit X<span class="br0">&#40;</span><span class="kw4">const</span> X <span class="sy0">&amp;</span>xx<span class="br0">&#41;</span><span class="sy0">;</span>
    X <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> X <span class="sy0">&amp;</span>xx<span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_421<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="co1">// ...</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_12.7'>12.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_377'>377</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s422' name='standard_s422'><div class='standard'><div>422&nbsp;S</div></div></a><div class='headline'>More than one synonym in typedef.</div></div><p>To avoid confusion and aid maintainability declare one type only in each typedef statement. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/***************************************************
 * Standard 422 S : More than one synonym in typedef.
 * A/Ref:
 ***************************************************/</span> 
&nbsp;
<span class="kw4">typedef</span> Uint_32<span class="sy0">*</span> My_ptr<span class="sy0">,</span> Value<span class="sy0">;</span>  <span class="coMULTI">/* Not intuitive that Value is an int type
                                  * whereas My_ptr is an int* type.
                                  */</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span>My_ptr ptr<span class="sy0">,</span>
         Value val<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_8.4.7'>8.4.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_265'>265</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s423' name='standard_s423'><div class='standard'><div>423&nbsp;S</div></div></a><div class='headline'>Operator new and no operator delete.</div></div><p>Overloaded operators new and delete should be paired such that any custom memory management scheme is complete.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
&nbsp;
<span class="coMULTI">/**********************************************************
 * Standard 423 S : Operator new and no operator delete.
 **********************************************************/</span>
&nbsp;
&nbsp;
class X
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    X<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    ~X<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw4">static</span> <span class="kw4">void</span> <span class="sy0">*</span>operator new<span class="br0">&#40;</span><span class="kw4">const</span> size_t size<span class="br0">&#41;</span><span class="sy0">;</span>
    explicit X<span class="br0">&#40;</span><span class="kw4">const</span> X <span class="sy0">&amp;</span>xx<span class="br0">&#41;</span><span class="sy0">;</span>
    X <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> X <span class="sy0">&amp;</span>xx<span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_423<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="co1">// ...</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_12.6'>12.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_376'>376</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s424' name='standard_s424'><div class='standard'><div>424&nbsp;S</div></div></a><div class='headline'>Operator new[] and no operator delete[].</div></div><p>Overloaded operators new[] and delete[] should be paired such that any custom memory management scheme is complete.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
&nbsp;
<span class="coMULTI">/**********************************************************
 * Standard 424 S : Operator new[] and no operator delete[].
 **********************************************************/</span>
&nbsp;
class X
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    X<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    ~X<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw4">static</span> <span class="kw4">void</span> <span class="sy0">*</span>operator new<span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="kw4">const</span> size_t size<span class="br0">&#41;</span><span class="sy0">;</span>
    explicit X<span class="br0">&#40;</span><span class="kw4">const</span> X <span class="sy0">&amp;</span>xx<span class="br0">&#41;</span><span class="sy0">;</span>
    X <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> X <span class="sy0">&amp;</span>xx<span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_424<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="co1">// ...</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_12.3'>12.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_376'>376</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s425' name='standard_s425'><div class='standard'><div>425&nbsp;S</div></div></a><div class='headline'>float literal with no F suffix.</div></div><p>Use the upper case suffix F for all float constants. It is regarded as good programming practice to make explicit the type when using floating-point numbers. All un-suffixed floating constants are of type double by default. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">float</span> Float_32<span class="sy0">;</span>
<span class="kw4">typedef</span> <span class="kw4">double</span> Float_64<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/**************************************************
 * Standard 425 S : float literal with no F suffix.
 * A/Ref:
 **************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Float_32 my_floata <span class="sy0">=</span> <span class="nu17">3.5F</span><span class="sy0">;</span>  <span class="coMULTI">/* ok */</span> 
  Float_64 my_double <span class="sy0">=</span> <span class="nu16">4.5</span><span class="sy0">;</span>   <span class="coMULTI">/* ok - compiler will assume double */</span> 
  Float_32 my_floatb <span class="sy0">=</span> <span class="nu16">2.5</span><span class="sy0">;</span>   <span class="coMULTI">/* not ok - will result in implicit conversion... */</span> 
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_6.2'>6.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_18'>18</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_18'>18</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s426' name='standard_s426'><div class='standard'><div>426&nbsp;S</div></div></a><div class='headline'>#undef used in a block.</div></div><p>Use of a #undef in a block is misleading as it implies a scope restricted to that block, which is not the case. Place all pre-processing directives near the top of a file, and explicitly at file scope. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#define AA 1</span>
<span class="coMULTI">/* compliant */</span>
<span class="co2">#undef  BB</span>
&nbsp;
<span class="coMULTI">/******************************************
 * Standard 426 S : #undef used in a block.
 ******************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_426 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
<span class="co2">#define BB 2</span>
&nbsp;
<span class="coMULTI">/* not compliant */</span>
<span class="co2">#undef  CC</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_91'>91</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_91'>91</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_19.5'>19.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-0-2'>16-0-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_91'>91</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_19.5'>19.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.20.5'>R.20.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m4.7.5'>M4.7.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s427' name='standard_s427'><div class='standard'><div>427&nbsp;S</div></div></a><div class='headline'>Filename in #include not in &lt; &gt; or &quot; &quot;.</div></div><p>All filenames used in conjunction with #include shall be enclosed in angled-brackets or quotes, either directly or via macro substitution. Any other sequence following a #include results in undefined behaviour. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#define MYFILE &quot;myfile.h&quot;</span>
<span class="co2">#include MYFILE</span>
<span class="co2">#include filename.h</span>
&nbsp;
&nbsp;
<span class="coMULTI">/**********************************************************
 * Standard 427 S : Filename in #include not in &lt; &gt; or &quot; &quot;.
 **********************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_427<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_19.3'>19.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_16-2-6'>16-2-6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_19.3'>19.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.20.3'>R.20.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_p1.4.1'>P1.4.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s428' name='standard_s428'><div class='standard'><div>428&nbsp;S</div></div></a><div class='headline'>No {} for switch (added by Testbed).</div></div><p>A switch statement should always be enclosed by braces to form a compound statement. If omitted, Testbed inserts the required braces into the reformatted code to permit instrumentation. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw2">enum</span> Seasons
<span class="br0">&#123;</span>
  spring<span class="sy0">,</span>
  summer<span class="sy0">,</span>
  autumn<span class="sy0">,</span>
  winter
<span class="br0">&#125;</span> Seasons<span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 428 S : No {} for switch (added by Testbed).
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_428<span class="br0">&#40;</span>Seasons season<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_16 weather_score<span class="sy0">;</span>
&nbsp;
  <span class="kw1">switch</span> <span class="br0">&#40;</span>season<span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant */</span>
    <span class="kw1">case</span> spring<span class="sy0">:</span>
    <span class="br0">&#123;</span>
	  weather_score <span class="sy0">=</span> 1U<span class="sy0">;</span>
	  <span class="kw2">break</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    <span class="kw1">case</span> summer<span class="sy0">:</span>
    <span class="br0">&#123;</span>
	  weather_score <span class="sy0">=</span> 3U<span class="sy0">;</span>
	  <span class="kw2">break</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    <span class="kw1">case</span> autumn<span class="sy0">:</span>
    <span class="br0">&#123;</span>
	  weather_score <span class="sy0">=</span> 2U<span class="sy0">;</span>
	  <span class="kw2">break</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    <span class="kw1">case</span> winter<span class="sy0">:</span>
    <span class="br0">&#123;</span>
	  weather_score <span class="sy0">=</span> 0U<span class="sy0">;</span>
	  <span class="kw2">break</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    <span class="kw1">default</span><span class="sy0">:</span>
    <span class="br0">&#123;</span>
	  weather_score <span class="sy0">=</span> 0U<span class="sy0">;</span>
	  <span class="kw2">break</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_483'>483</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.9.2.1'>3.9.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_10.2'>10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_5.1'>5.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_14.8'>14.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_14.8'>14.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.15.6'>R.15.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_1.3.a'>1.3.a</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m2.1.2'>M2.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s429' name='standard_s429'><div class='standard'><div>429&nbsp;S</div></div></a><div class='headline'>Empty middle expression in for loop.</div></div><p>The middle expression in a for loop shall include testing of the loop control variable. In the interests of simplicity and maintainability, expressions in a for statement should be only concerned with loop control.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard 429 S : Empty middle expression in for loop.
 *******************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_429<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 index<span class="sy0">;</span>
&nbsp;
  <span class="kw1">for</span> <span class="br0">&#40;</span>index <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> <span class="sy0">;</span> index<span class="sy0">++</span><span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#123;</span>
    <span class="coMULTI">/* ... */</span> 
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_66'>66</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_2'>2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_13.5'>13.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_66'>66</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_13.5'>13.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.14.2'>R.14.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m3.3.1'>M3.3.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s430' name='standard_s430'><div class='standard'><div>430&nbsp;S</div></div></a><div class='headline'>Inconsistent usage of loop control variable.</div></div><p>The loop control variable shall only be initialised, tested, and incremented or decremented. In the interests of simplicity and maintainability, expressions in a for statement should be wholly concerned with loop control only.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdio.h&gt; </span>
&nbsp;
&nbsp;
<span class="kw4">const</span> SINT_32 max_ind <span class="sy0">=</span> <span class="nu0">10</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/***************************************************************
 * Standard 430 S : Inconsistent usage of loop control variable.
 ***************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_430 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">for</span> <span class="br0">&#40;</span>SINT_32 index <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> index <span class="sy0">&lt;</span> max_ind<span class="sy0">;</span> <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot;index = %d<span class="es1">\n</span>&quot;</span><span class="sy0">,</span> index<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#123;</span>
&nbsp;
    index <span class="sy0">=</span> index <span class="sy0">+</span> <span class="nu0">2</span><span class="sy0">;</span>
&nbsp;
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_66'>66</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_13.5'>13.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_66'>66</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_13.5'>13.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.14.2'>R.14.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_8.4.b'>8.4.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m3.3.1'>M3.3.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='uml_model.htm'>UML</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c++.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s431' name='standard_s431'><div class='standard'><div>431&nbsp;S</div></div></a><div class='headline'>Char used instead of (un)signed char.</div></div><p>Plain char values shall not be used where a value of signed or unsigned char type is expected.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">signed</span> <span class="kw4">char</span> <span class="kw4">int8_t</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">int8_t</span> static_431<span class="br0">&#40;</span><span class="kw4">int8_t</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 431 S : Char used instead of (un)signed char.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">int8_t</span> static_431<span class="br0">&#40;</span><span class="kw4">int8_t</span> signed_numeric_param<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw4">int8_t</span> signed_numeric_local<span class="sy0">;</span>
   <span class="kw1">switch</span> <span class="br0">&#40;</span> signed_numeric_param <span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      <span class="kw1">case</span> <span class="nu0">1</span><span class="sy0">:</span>
         signed_numeric_local <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
         <span class="kw2">break</span><span class="sy0">;</span>
      <span class="kw1">case</span> <span class="st0">'a'</span><span class="sy0">:</span>       <span class="coMULTI">/* Not Compliant */</span> 
         signed_numeric_local <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span>
         <span class="kw2">break</span><span class="sy0">;</span>
      <span class="kw1">default</span><span class="sy0">:</span>
         signed_numeric_local <span class="sy0">=</span> <span class="nu0">3</span><span class="sy0">;</span>
         <span class="kw2">break</span><span class="sy0">;</span>
   <span class="br0">&#125;</span>
   <span class="kw1">return</span> signed_numeric_local<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.1.10'>5.1.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.15'>1.1.15</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_14'>14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_4.1.3'>4.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.1.15'>4.1.1.15</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_14'>14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_6.2'>6.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-11'>5-0-11</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-12'>5-0-12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_14'>14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_6.2'>6.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.3'>R.10.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_p1.3.1'>P1.3.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s432' name='standard_s432'><div class='standard'><div>432&nbsp;S</div></div></a><div class='headline'>Inappropriate type - should be plain char.</div></div><p>Signed or unsigned character values shall not be used where a value of plain char type is expected.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">char</span> char_t<span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> char_t static_432<span class="br0">&#40;</span>char_t<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 432 S : Inappropriate type - should be plain char.
 *************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> char_t static_432<span class="br0">&#40;</span>char_t plain_char_param<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   char_t plain_char_local<span class="sy0">;</span>
&nbsp;
   <span class="kw1">switch</span> <span class="br0">&#40;</span> plain_char_param <span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      <span class="kw1">case</span> <span class="nu0">1</span><span class="sy0">:</span>        <span class="coMULTI">/* Not Compliant */</span> 
         plain_char_local <span class="sy0">=</span> <span class="st0">' '</span><span class="sy0">;</span>
         <span class="kw2">break</span><span class="sy0">;</span>
      <span class="kw1">case</span> <span class="st0">'a'</span><span class="sy0">:</span>
         plain_char_local <span class="sy0">=</span> <span class="st0">'1'</span><span class="sy0">;</span>
         <span class="kw2">break</span><span class="sy0">;</span>
      <span class="kw1">default</span><span class="sy0">:</span>
         plain_char_local <span class="sy0">=</span> <span class="st0">'2'</span><span class="sy0">;</span>
         <span class="kw2">break</span><span class="sy0">;</span>
   <span class="br0">&#125;</span>
   <span class="kw1">return</span> plain_char_local<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.1.10'>5.1.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int07-c'>INT07-C</a>, <a href='cert-c_model.htm#rule_cert-c_str00-c'>STR00-C</a>, <a href='cert-c_model.htm#rule_cert-c_str04-c'>STR04-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.15'>1.1.15</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_682'>682</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_14'>14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_4.1.3'>4.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.1.15'>4.1.1.15</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_14'>14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_267'>267</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_6.1'>6.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-11'>5-0-11</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-12'>5-0-12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_14'>14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_6.1'>6.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.3'>R.10.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_p1.3.1'>P1.3.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s433' name='standard_s433'><div class='standard'><div>433&nbsp;S</div></div></a><div class='headline'>Type conversion without cast.</div></div><p>Conversions to a different type require explicit type casting to ensure there is no unintentional loss of information. Implicit conversion is typically implementation-defined and may also result in undefined behaviour.
This standard is applied to assignments and initialisations to/from plain char, boolean and void types. Other situations are covered by standards such as 93 S, 96 S, 98 S, 101 S, 331 S, 434 S and 458 S.</p>
<p>This standard can be extended to report implicit conversion from void * by setting the modifier <a href='standard_flags.htm#flag_441'>441</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<p>When the modifier <a href='standard_flags.htm#flag_191'>191</a> is set to 1, conversions from double to float are reported by <a href='standards.htm#standard_s445'>445 S</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/************************************************
 * Standard 433 S : Type conversion without cast.
 ************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_433<span class="br0">&#40;</span><span class="kw4">long</span> s64<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">char</span> ch <span class="sy0">=</span> s64<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_fio34-c'>FIO34-C</a>, <a href='cert-c_model.htm#rule_cert-c_flp03-c'>FLP03-C</a>, <a href='cert-c_model.htm#rule_cert-c_int02-c'>INT02-C</a>, <a href='cert-c_model.htm#rule_cert-c_int31-c'>INT31-C</a>, <a href='cert-c_model.htm#rule_cert-c_str34-c'>STR34-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.1.9'>6.1.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_192'>192</a>, <a href='cwe_model.htm#rule_cwe_197'>197</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_43'>43</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.6.1.9'>4.6.1.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.7'>10.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_43'>43</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_180'>180</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_267'>267</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_6.1'>6.1</a>, <a href='misra-ac_model.htm#rule_misra-ac_6.2'>6.2</a>, <a href='misra-ac_model.htm#rule_misra-ac_10.1'>10.1</a>, <a href='misra-ac_model.htm#rule_misra-ac_10.2'>10.2</a>, <a href='misra-ac_model.htm#rule_misra-ac_10.3'>10.3</a>, <a href='misra-ac_model.htm#rule_misra-ac_10.4'>10.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-11'>5-0-11</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-12'>5-0-12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_43'>43</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_6.1'>6.1</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_6.2'>6.2</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.1'>10.1</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.2'>10.2</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.3'>10.3</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.4'>10.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.1'>R.10.1</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.3'>R.10.3</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.4'>R.10.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_441'>441</a> = 1, <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_5.3.c'>5.3.c</a>, <a href='netrino_model.htm#rule_netrino_5.4.b'>5.4.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_p1.3.1'>P1.3.1</a>, <a href='sec-c_model.htm#rule_sec-c_r2.4.1'>R2.4.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s434' name='standard_s434'><div class='standard'><div>434&nbsp;S</div></div></a><div class='headline'>Signed/unsigned conversion without cast.</div></div><p>Conversions to a different type require explicit type casting to ensure there is no unintentional loss of information. Implicit conversion is typically implementation-defined and may also result in undefined behaviour.</p>
<p>This standard is applied to assignments and initialisations with non-constant values. Other situations are covered by standards such as <a href='standards.htm#standard_s93'>93 S</a>, <a href='standards.htm#standard_s96'>96 S</a>, <a href='standards.htm#standard_s98'>98 S</a>, <a href='standards.htm#standard_s101'>101 S</a>, <a href='standards.htm#standard_s331'>331 S</a> and <a href='standards.htm#standard_s458'>458 S</a>.</p>
<p>This standard can be relaxed to allow zero literal values without a U by setting the modifier <a href='standard_flags.htm#flag_358'>358</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">signed</span> <span class="kw4">int</span> SINT_32<span class="sy0">;</span>
<span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> UINT_32<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/**********************************************************
 * Standard 434 S : Signed/unsigned conversion without cast.
 **********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_434<span class="br0">&#40;</span>UINT_32 us1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  SINT_32 ss1 <span class="sy0">=</span> us1<span class="sy0">;</span>  <span class="coMULTI">/* converting to signed may result in a loss of information */</span> 
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int02-c'>INT02-C</a>, <a href='cert-c_model.htm#rule_cert-c_int31-c'>INT31-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_192'>192</a>, <a href='cwe_model.htm#rule_cwe_195'>195</a>, <a href='cwe_model.htm#rule_cwe_196'>196</a>, <a href='cwe_model.htm#rule_cwe_197'>197</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_358'>358</a> = 1</td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_43'>43</a>, <a href='dera_model.htm#rule_dera_48'>48</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.6.1.9'>4.6.1.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.13'>10.13</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_10.14'>10.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_43'>43</a>, <a href='his_model.htm#rule_his_48'>48</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_162'>162</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_292'>292</a>, <a href='lmtcp_model.htm#rule_lmtcp_302'>302</a>, <a href='lmtcp_model.htm#rule_lmtcp_325'>325</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_10.1'>10.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-4'>5-0-4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_43'>43</a>, <a href='misra-c_1998_model.htm#rule_misra-c%3A1998_48'>48</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.1'>10.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.3'>R.10.3</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.4'>R.10.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_5.3.c'>5.3.c</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.3.3'>R2.3.3</a>, <a href='sec-c_model.htm#rule_sec-c_r2.4.2'>R2.4.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s435' name='standard_s435'><div class='standard'><div>435&nbsp;S</div></div></a><div class='headline'>Float/integer conversion without cast.</div></div><p>Conversions to a different type require explicit type casting to ensure there is no unintentional loss of information. Implicit conversion is typically implementation-defined and may also result in undefined behaviour. </p>
<p>This standard is applied to assignments and initialisations with non-constant values. Other situations are covered by standards such as <a href='standards.htm#standard_s93'>93 S</a>, <a href='standards.htm#standard_s96'>96 S</a>, <a href='standards.htm#standard_s98'>98 S</a>, <a href='standards.htm#standard_s101'>101 S</a>, <a href='standards.htm#standard_s331'>331 S</a> and <a href='standards.htm#standard_s458'>458 S</a>.
By default, this standard applies to all conversions from floating-point types to integer types, and for conversions to floating-point types where the bit size of the integer type is greater or equal to that of the floating point type. The standard can be further restricted to prohibit all implicit integer to float conversions by setting the modifier <a href='standard_flags.htm#flag_191'>191</a> to 1 in the c/cppreport.dat file or via selection of the MISRA-C:2004 programming model(TBmisra license permitting). <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.  Note: Setting this modifier may have other effects on your code.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*********************************************************
 * Standard 435 S : Float/integer conversion without cast.
 *********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_435<span class="br0">&#40;</span>FLOAT_32 ff<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  SINT_32 ss1 <span class="sy0">=</span> ff<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
                     <span class="coMULTI">/* converting to signed int may result in a loss of information */</span> 
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_flp33-c'>FLP33-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_192'>192</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_43'>43</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_29'>29</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.6.2.3'>4.6.2.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_7.6'>7.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_43'>43</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_180'>180</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_184'>184</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_325'>325</a>, <a href='lmtcp_model.htm#rule_lmtcp_332'>332</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_10.1'>10.1</a>, <a href='misra-ac_model.htm#rule_misra-ac_10.2'>10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-5'>5-0-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_43'>43</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.1'>10.1</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.2'>10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.3'>R.10.3</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.4'>R.10.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.4.1'>R2.4.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s436' name='standard_s436'><div class='standard'><div>436&nbsp;S</div></div></a><div class='headline'>Declaration does not specify an array.</div></div><p>Array indexing, as a form of pointer arithmetic, shall only be applied to objects declared with an array type or to objects that point to an array. Pointers assigned to non-array objects have the potential to access unintended or invalid memory. </p>
<p>This standard can be restricted to check that array indexing is only applied to objects declared with array type by setting the modifier <a href='standard_flags.htm#flag_400'>400</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*********************************************************
 * Standard 436 S : Declaration does not specify an array.
 *********************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_436 <span class="br0">&#40;</span>INT_8 <span class="sy0">*</span> ptr<span class="sy0">,</span> INT_8 arr<span class="br0">&#91;</span><span class="nu0">10</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  INT_8  <span class="sy0">*</span> p1 <span class="sy0">=</span> ptr<span class="sy0">;</span>
  INT_8  <span class="sy0">*</span> p2 <span class="sy0">=</span> arr<span class="sy0">;</span>
&nbsp;
  ptr<span class="br0">&#91;</span><span class="nu0">5</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>   <span class="coMULTI">/* not compliant - ptr was not declared as an array */</span>
  p1<span class="br0">&#91;</span><span class="nu0">5</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>    <span class="coMULTI">/* not compliant - p1 and ptr were not declared as an array */</span>
&nbsp;
  p2<span class="br0">&#91;</span><span class="nu0">5</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>    <span class="coMULTI">/* not compliant if modifier 400 is set
                   - p2 not declared as an array, but does point to an array */</span>
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_315'>315</a>, <a href='lmtcp_model.htm#rule_lmtcp_400'>400</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_17.1'>17.1</a>, <a href='misra-ac_model.htm#rule_misra-ac_17.4'>17.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_400'>400</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-15'>5-0-15</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-16'>5-0-16</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_17.1'>17.1</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_17.4'>17.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_400'>400</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.18.1'>R.18.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r1.3.1'>R1.3.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s437' name='standard_s437'><div class='standard'><div>437&nbsp;S</div></div></a><div class='headline'>&lt; &gt; &lt;= &gt;= used on different object pointers.</div></div><p>Pointers which do not point to the same object cannot be logically compared, without the result being undefined behaviour. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*********************************************************
 * Standard 437 S : Logical comparison of unlike pointers.
 *********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_437<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  INT_32 ss1<span class="br0">&#91;</span><span class="nu0">10</span><span class="br0">&#93;</span><span class="sy0">;</span>
  INT_32 ss2<span class="br0">&#91;</span><span class="nu0">10</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
  INT_32 <span class="sy0">*</span>ss1_ptr <span class="sy0">=</span> <span class="sy0">&amp;</span>ss1<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="sy0">;</span>
  INT_32 <span class="sy0">*</span>ss2_ptr <span class="sy0">=</span> <span class="sy0">&amp;</span>ss2<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
  <span class="kw1">if</span> <span class="br0">&#40;</span>ss1_ptr <span class="sy0">&gt;</span> ss2_ptr<span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#123;</span>
     <span class="coMULTI">/* ... */</span> 
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_17.3'>17.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-18'>5-0-18</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_17.3'>17.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.18.3'>R.18.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r1.3.3'>R1.3.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s438' name='standard_s438'><div class='standard'><div>438&nbsp;S</div></div></a><div class='headline'>Pointer subtraction not addressing one array.</div></div><p>Pointer subtraction cannot be performed with pointers that do not point to the same object, without the result being undefined behaviour. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">signed</span> <span class="kw4">int</span> Sint_32<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/****************************************************************
 * Standard 438 S : Pointer subtraction not addressing one array.
 * A/Ref:
 ****************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Sint_32 ss1<span class="br0">&#91;</span><span class="nu0">10</span><span class="br0">&#93;</span><span class="sy0">;</span>
  Sint_32 ss2<span class="br0">&#91;</span><span class="nu0">10</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
  Sint_32 <span class="sy0">*</span>ss1_ptr <span class="sy0">=</span> <span class="sy0">&amp;</span>ss1<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="sy0">;</span>
  Sint_32 <span class="sy0">*</span>ss2_ptr <span class="sy0">=</span> <span class="sy0">&amp;</span>ss2<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="sy0">;</span>
  Sint_32 ss3 <span class="sy0">=</span> ss1_ptr <span class="sy0">-</span> ss2_ptr<span class="sy0">;</span>
&nbsp;
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_arr36-c'>ARR36-C</a>, <a href='cert-c_model.htm#rule_cert-c_exp08-c'>EXP08-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_468'>468</a>, <a href='cwe_model.htm#rule_cwe_469'>469</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_17.2'>17.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-17'>5-0-17</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_17.2'>17.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.18.2'>R.18.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r1.3.2'>R1.3.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s439' name='standard_s439'><div class='standard'><div>439&nbsp;S</div></div></a><div class='headline'>Cast from pointer to integral type.</div></div><p>A cast from a pointer to an integral type shall not be performed. The size of integer required is implementation-defined, and, not only does the cast circumvent type integrity, the result may be undefined. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/******************************************************
 * Standard 439 S : Cast from pointer to integral type.
 ******************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_439 <span class="br0">&#40;</span>INT_32 <span class="sy0">*</span>ss_ptr<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  INT_32 ss <span class="sy0">=</span> <span class="br0">&#40;</span>INT_32<span class="br0">&#41;</span>ss_ptr<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int11-c'>INT11-C</a>, <a href='cert-c_model.htm#rule_cert-c_int15-c'>INT15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_681'>681</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_45'>45</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_15'>15</a>, <a href='eads-cpp_model.htm#rule_eads-c%2B%2B_16'>16</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.12.1.1'>4.12.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_7.5'>7.5</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_7.7'>7.7</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_13.7'>13.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_45'>45</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_182'>182</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_328'>328</a>, <a href='lmtcp_model.htm#rule_lmtcp_329'>329</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_11.3'>11.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-2-9'>5-2-9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_45'>45</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_11.3'>11.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.11.2'>R.11.2</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.11.4'>R.11.4</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.11.6'>R.11.6</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.11.7'>R.11.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.7.1'>R2.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s440' name='standard_s440'><div class='standard'><div>440&nbsp;S</div></div></a><div class='headline'>Cast from integral type to pointer.</div></div><p>A cast from an integral type to a pointer shall not be performed. The size of an integer used to represent a pointer is implementation-defined, and, not only does the cast circumvent type integrity, the result may be undefined.  Casts on a numeric literal with the value zero are permitted.</p>
<p>This standard can be relaxed to allow casts on hexadecimal constants by setting the modifier <a href='standard_flags.htm#flag_397'>397</a> to 1 in the creport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/******************************************************
 * Standard 440 S : Cast from integral type to pointer.
 ******************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_440<span class="br0">&#40;</span>INT_32 ss<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  INT_32 <span class="sy0">*</span>ss_ptr <span class="sy0">=</span> <span class="br0">&#40;</span>INT_32 <span class="sy0">*</span><span class="br0">&#41;</span>ss<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
  ss_ptr <span class="sy0">=</span> <span class="br0">&#40;</span>INT_32 <span class="sy0">*</span><span class="br0">&#41;</span><span class="nu12">0x8ff7ffff</span><span class="sy0">;</span> <span class="coMULTI">/* compliant when modifier 397 is set */</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int11-c'>INT11-C</a>, <a href='cert-c_model.htm#rule_cert-c_int15-c'>INT15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_587'>587</a>, <a href='cwe_model.htm#rule_cwe_588'>588</a>, <a href='cwe_model.htm#rule_cwe_681'>681</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_45'>45</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_28'>28</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.12.2.1'>4.12.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_7.5'>7.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_45'>45</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_182'>182</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_328'>328</a>, <a href='lmtcp_model.htm#rule_lmtcp_331'>331</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_11.3'>11.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-2-8'>5-2-8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_45'>45</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_11.3'>11.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.11.1'>R.11.1</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.11.2'>R.11.2</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.11.4'>R.11.4</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.11.6'>R.11.6</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.11.7'>R.11.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.7.1'>R2.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='tbrun_requires_model.htm'>TBrun Requires</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s441' name='standard_s441'><div class='standard'><div>441&nbsp;S</div></div></a><div class='headline'>Float cast to non-float.</div></div><p>The value of a complex expression of floating type shall not be explicitly converted to a different type. Only a cast to a narrower floating type is permitted.</p>
<p>All arithmetic operations should be performed in a consistent (underlying) type, and explicit conversions restricted, so as to avoid programmer confusion and unexpected results.</p>
<p>This standard must be enabled by setting the modifier <a href='standard_flags.htm#flag_323'>323</a> to 1 in the creport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. Alternatively, the standard can be enabled via selection of the MISRA-C:2004 programming model or by explicitly enabling the the modifier <a href='standard_flags.htm#flag_191'>191</a> (TBmisra license permitting).</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************
 * Standard 441 S : Float cast to non-float.
 *******************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_441<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_16  u16r<span class="sy0">;</span>
  FLOAT_32 f32a<span class="sy0">,</span>
           f32b<span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
  u16r <span class="sy0">=</span> <span class="br0">&#40;</span>UINT_16<span class="br0">&#41;</span><span class="br0">&#40;</span>f32a <span class="sy0">+</span> f32b<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span> 
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_323'>323</a> = 1</td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_323'>323</a> = 1</td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_184'>184</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_323'>323</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_10.4'>10.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_323'>323</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.4'>10.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_323'>323</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.8'>R.10.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_323'>323</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s442' name='standard_s442'><div class='standard'><div>442&nbsp;S</div></div></a><div class='headline'>Signed integral type cast to unsigned.</div></div><p>The value of a complex expression of signed integer type shall not be explicitly converted to unsigned integer. Only a cast to an integer type which is of the same signedness and narrower is permitted.</p>
<p>All arithmetic operations should be performed in a consistent (underlying) type, and explicit conversions restricted, so as to avoid programmer confusion and unexpected results.</p>
<p>This standard must be enabled by setting the modifier <a href='standard_flags.htm#flag_323'>323</a> to 1 in the creport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. Alternatively, the standard can be enabled via selection of the MISRA-C:2004 programming model or by explicitly enabling the the modifier <a href='standard_flags.htm#flag_191'>191</a> (TBmisra license permitting).</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*********************************************************
 * Standard 442 S : Signed integral type cast to unsigned.
 *********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_442<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 u32<span class="sy0">;</span>
  INT_32 s32a<span class="sy0">,</span>
         s32b<span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
  u32 <span class="sy0">=</span> <span class="br0">&#40;</span>UINT_32<span class="br0">&#41;</span><span class="br0">&#40;</span>s32a <span class="sy0">+</span> s32b<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span> 
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int02-c'>INT02-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_323'>323</a> = 1</td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_192'>192</a>, <a href='cwe_model.htm#rule_cwe_195'>195</a>, <a href='cwe_model.htm#rule_cwe_197'>197</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_323'>323</a> = 1</td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_180'>180</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_365'>365</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_10.3'>10.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_323'>323</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.3'>10.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_323'>323</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.8'>R.10.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_323'>323</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s443' name='standard_s443'><div class='standard'><div>443&nbsp;S</div></div></a><div class='headline'>Unsigned integral type cast to signed.</div></div><p>The value of a complex expression of unsigned integer type shall not be explicitly converted to signed integer. Only a cast to an integer type which is of the same signedness and narrower is permitted.</p>
<p>All arithmetic operations should be performed in a consistent (underlying) type, and explicit conversions restricted, so as to avoid programmer confusion and unexpected results.</p>
<p>This standard must be enabled by setting the modifier <a href='standard_flags.htm#flag_323'>323</a> to 1 in the creport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. Alternatively, the standard can be enabled via selection of the MISRA-C:2004 programming model or by explicitly enabling the the modifier <a href='standard_flags.htm#flag_191'>191</a> (TBmisra license permitting).</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*********************************************************
 * Standard 443 S : Unsigned integral type cast to signed.
 *********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_443<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  INT_32  s32<span class="sy0">;</span>
  UINT_32 u32a<span class="sy0">,</span>
          u32b<span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
  s32 <span class="sy0">=</span> <span class="br0">&#40;</span>INT_32<span class="br0">&#41;</span><span class="br0">&#40;</span>u32a <span class="sy0">+</span> u32b<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span> 
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int02-c'>INT02-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_323'>323</a> = 1</td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_192'>192</a>, <a href='cwe_model.htm#rule_cwe_196'>196</a>, <a href='cwe_model.htm#rule_cwe_197'>197</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_323'>323</a> = 1</td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_180'>180</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_365'>365</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_10.3'>10.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_323'>323</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-9'>5-0-9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_323'>323</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.3'>10.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_323'>323</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.8'>R.10.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_323'>323</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s444' name='standard_s444'><div class='standard'><div>444&nbsp;S</div></div></a><div class='headline'>Integral type cast to non-integral.</div></div><p>The value of a complex expression of integer type shall not be explicitly converted to a different type. Only a cast to an integer type which is of the same signedness and narrower is permitted.</p>
<p>All arithmetic operations should be performed in a consistent (underlying) type, and explicit conversions restricted, so as to avoid programmer confusion and unexpected results.</p>
<p>This standard must be enabled by setting the modifier <a href='standard_flags.htm#flag_323'>323</a> to 1 in the creport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. Alternatively, the standard can be enabled via selection of the MISRA-C:2004 programming model or by explicitly enabling the the modifier <a href='standard_flags.htm#flag_191'>191</a> (TBmisra license permitting).</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 444 S : Integral type cast to non-integral.
 *************************************************************/</span> 
&nbsp;
SINT_32 s32a <span class="sy0">=</span> <span class="nu0">4</span><span class="sy0">;</span>
SINT_32 s32b <span class="sy0">=</span> <span class="nu0">3</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> static_444<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  FLOAT_64 f64 <span class="sy0">=</span> <span class="br0">&#40;</span>FLOAT_64<span class="br0">&#41;</span> <span class="br0">&#40;</span>s32a <span class="sy0">+</span> s32b<span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="coMULTI">/*...*/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_681'>681</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_323'>323</a> = 1</td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_180'>180</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_365'>365</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_10.3'>10.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_323'>323</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.3'>10.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_323'>323</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.8'>R.10.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_323'>323</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s445' name='standard_s445'><div class='standard'><div>445&nbsp;S</div></div></a><div class='headline'>Narrower float conversion without cast.</div></div><p>Conversions to a narrower type require explicit type casting to ensure there is no unintentional loss of information. Implicit conversion is typically implementation-defined and may result in undefined behaviour.</p>
<p>Note that this standard is only available when the <a href='standard_flags.htm#flag_191'>191</a> modifier is enabled in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">float</span> Float_32<span class="sy0">;</span>   <span class="coMULTI">/* 32 bit float */</span> 
<span class="kw4">typedef</span> <span class="kw4">double</span> Float_64<span class="sy0">;</span>  <span class="coMULTI">/* 64 bit float */</span> 
&nbsp;
<span class="coMULTI">/**********************************************************
 * Standard 445 S : Narrower float conversion without cast.
 **********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_445<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Float_32 f32<span class="sy0">;</span>
  Float_64 f64a<span class="sy0">,</span>
           f64b<span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
  f32 <span class="sy0">=</span> f64a <span class="sy0">+</span> f64b<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span> 
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.7'>10.7</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_10.14'>10.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_180'>180</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_325'>325</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_10.2'>10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-6'>5-0-6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.2'>10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.3'>R.10.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_5.4.b'>5.4.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.3.3'>R2.3.3</a>, <a href='sec-c_model.htm#rule_sec-c_r2.5.1'>R2.5.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s446' name='standard_s446'><div class='standard'><div>446&nbsp;S</div></div></a><div class='headline'>Narrower int conversion without cast.</div></div><p>Conversions to a narrower type require explicit type casting to ensure there is no unintentional loss of information. Implicit conversion is typically implementation-defined and may result in undefined behaviour.</p>
<p>Note that MISRA-C:2004 checking needs to be enabled in order for this violation to be detected, either via selection of the MISRA-C:2004 programming model or by explicitly enabling the 191 entry configuration flag in the c/cppvals.dat file (TBmisra license permitting).</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 446 S : Narrower int conversion without cast.
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_446 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_16 u16<span class="sy0">;</span>
  UINT_32 u32a<span class="sy0">,</span>
          u32b<span class="sy0">;</span>
&nbsp;
  u16 <span class="sy0">=</span> u32a <span class="sy0">+</span> u32b<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int02-c'>INT02-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_192'>192</a>, <a href='cwe_model.htm#rule_cwe_194'>194</a>, <a href='cwe_model.htm#rule_cwe_197'>197</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.7'>10.7</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_10.14'>10.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_180'>180</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_325'>325</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_10.1'>10.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-6'>5-0-6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.1'>10.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.3'>R.10.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.3.3'>R2.3.3</a>, <a href='sec-c_model.htm#rule_sec-c_r2.5.1'>R2.5.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s447' name='standard_s447'><div class='standard'><div>447&nbsp;S</div></div></a><div class='headline'>Loop termination not a simple constant test.</div></div><p>The middle expression in a for loop shall perform simple testing of a single loop control variable against a constant value. This can aid readability and maintainability.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/****************************************************************
 * Standard 447 S : Loop termination not a simple constant test.
 ****************************************************************/</span>
&nbsp;
<span class="kw4">const</span> INT_32 max_ind <span class="sy0">=</span> <span class="nu0">10</span><span class="sy0">;</span>
INT_32 flag <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_447<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">for</span> <span class="br0">&#40;</span>INT_32 index <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> <span class="br0">&#40;</span>index <span class="sy0">&lt;</span> max_ind<span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span>flag <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span> index<span class="sy0">++</span><span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#123;</span>
    <span class="coMULTI">/* ... */</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_606'>606</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s448' name='standard_s448'><div class='standard'><div>448&nbsp;S</div></div></a><div class='headline'>Base class pointer cast to derived class.</div></div><p>Down-casting base class object pointers to a derived class shall be avoided. The use of virtual functions (polymorphism) is preferable, for example, to casting down the inheritance hierarchy to call a particular method defined by a derived class.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="coMULTI">/*************************************************************
 * Standard 448 S : Base class pointer cast to derived class.
 *************************************************************/</span>
&nbsp;
class Base
<span class="br0">&#123;</span>
   public<span class="sy0">:</span>
    Base<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    virtual ~Base<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class Derived<span class="sy0">:</span> public Base
<span class="br0">&#123;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_448 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Derived d<span class="sy0">;</span>
  Base <span class="sy0">*</span>pB <span class="sy0">=</span> <span class="sy0">&amp;</span>d<span class="sy0">;</span>
&nbsp;
  Derived <span class="sy0">*</span> pD1  <span class="sy0">=</span> static_cast <span class="sy0">&lt;</span> Derived<span class="sy0">*</span> <span class="sy0">&gt;</span><span class="br0">&#40;</span>  pB <span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_15'>15</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.3.3'>3.3.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_178'>178</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_179'>179</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_322'>322</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-2-2'>5-2-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s449' name='standard_s449'><div class='standard'><div>449&nbsp;S</div></div></a><div class='headline'>Derived class pointer cast to virtual base.</div></div><p>Casting up to a virtual base class object shall be avoided. The use of a cast on a pointer to traverse up the inheritance hierarchy to a base class is irreversible. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co1">//</span>
<span class="co1">// Standard 449 S : Derived class pointer cast to virtual base.</span>
<span class="co1">// A/Ref:</span>
<span class="co1">// </span>
&nbsp;
class Base
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Base<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Base<span class="br0">&#40;</span><span class="kw4">const</span> Base <span class="sy0">&amp;</span>base<span class="br0">&#41;</span><span class="sy0">;</span>
    Base <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Base <span class="sy0">&amp;</span>base<span class="br0">&#41;</span><span class="sy0">;</span>
    virtual <span class="kw4">void</span> my_func<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
    virtual ~Base<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class Derived <span class="sy0">:</span> public virtual Base
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Derived<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Derived<span class="br0">&#40;</span><span class="kw4">const</span> Derived <span class="sy0">&amp;</span>derived<span class="br0">&#41;</span><span class="sy0">;</span>
    Derived <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Derived <span class="sy0">&amp;</span>derived<span class="br0">&#41;</span><span class="sy0">;</span>
    virtual <span class="kw4">void</span> my_func<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
    virtual ~Derived<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
Base <span class="sy0">*</span> someFunc<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Derived <span class="sy0">*</span>derived_ptr <span class="sy0">=</span>  new Derived<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">return</span> static_cast<span class="sy0">&lt;</span>Base<span class="sy0">*&gt;</span><span class="br0">&#40;</span>derived_ptr<span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">// not compliant </span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="co1">//</span>
<span class="co1">//</span>
<span class="co1">// Copyright (c) 2006 Liverpool Data Research Associates</span>
<span class="co1">//</span>
<span class="co1">//</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_16'>16</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.3.4'>3.3.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_324'>324</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s450' name='standard_s450'><div class='standard'><div>450&nbsp;S</div></div></a><div class='headline'>Wide string and string concatenated.</div></div><p>String literals shall not be concatenated with wide string literals. If a narrow string literal token is adjacent to a wide string literal token, the behaviour is undefined. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">char</span> Char_8<span class="sy0">;</span>
&nbsp;
<span class="co1">//</span>
<span class="co1">// Standard 450 S : Wide string and string concatenated.</span>
<span class="co1">// A/Ref:</span>
<span class="co1">// </span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Char_8 <span class="sy0">*</span>text <span class="sy0">=</span> L<span class="st0">&quot;Wide string &quot;</span><span class="st0">&quot;and string&quot;</span><span class="sy0">;</span>
&nbsp;
  <span class="co1">// ... </span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="co1">//</span>
<span class="co1">//</span>
<span class="co1">// Copyright (c) 2006 Liverpool Data Research Associates</span>
<span class="co1">//</span>
<span class="co1">//</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_6.5'>6.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_275'>275</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-13-5'>2-13-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s451' name='standard_s451'><div class='standard'><div>451&nbsp;S</div></div></a><div class='headline'>No cast for widening complex float expression.</div></div><p>The value of a complex expression of floating type shall not be implicitly converted to a different type without an explicit cast to ensure arithmetic consistency.</p>
<p>All arithmetic operations should be performed in a consistent (underlying) type, and implicit conversions restricted, so as to avoid programmer confusion and the dangers associated with integral promotion.</p>
<p>Note that this standard is only enabled by setting the modifier <a href='standard_flags.htm#flag_191'>191</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">float</span> Float_32<span class="sy0">;</span>   <span class="coMULTI">/* 32 bit float */</span> 
<span class="kw4">typedef</span> <span class="kw4">double</span> Float_64<span class="sy0">;</span>  <span class="coMULTI">/* 64 bit float */</span> 
&nbsp;
<span class="coMULTI">/*****************************************************************
 * Standard 451 S : No cast for widening complex float expression.
 *****************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_451<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Float_64 f64<span class="sy0">;</span>
  Float_32 f32a<span class="sy0">,</span>
           f32b<span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
  f64 <span class="sy0">=</span> f32a <span class="sy0">+</span> f32b<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span> 
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_325'>325</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_10.2'>10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.2'>10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.6'>R.10.6</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.7'>R.10.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_5.4.b'>5.4.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.4.1'>R2.4.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s452' name='standard_s452'><div class='standard'><div>452&nbsp;S</div></div></a><div class='headline'>No cast for widening complex int expression.</div></div><p>The value of a complex expression of integer type shall not be implicitly converted to a different type without an explicit cast to ensure arithmetic consistency.</p>
<p>All arithmetic operations should be performed in a consistent (underlying) type, and implicit conversions restricted, so as to avoid programmer confusion and the dangers associated with integral promotion.</p>
<p>Note that this standard is only enabled by setting the modifier <a href='standard_flags.htm#flag_191'>191</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 452 S : No cast for widening complex int expression.
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_452<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_64 u64a<span class="sy0">;</span>
  UINT_32 u32a<span class="sy0">,</span>
          u32b<span class="sy0">;</span>
&nbsp;
  u64a <span class="sy0">=</span> u32a <span class="sy0">+</span> u32b<span class="sy0">;</span>       <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int02-c'>INT02-C</a>, <a href='cert-c_model.htm#rule_cert-c_int35-c'>INT35-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_192'>192</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_325'>325</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_10.1'>10.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-3'>5-0-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.1'>10.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.6'>R.10.6</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.7'>R.10.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.4.1'>R2.4.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s453' name='standard_s453'><div class='standard'><div>453&nbsp;S</div></div></a><div class='headline'>Throw found in destructor.</div></div><p>Code which may result in an exception being thrown is present in a destructor. Throwing an exception from within a destructor shall be avoided as it may result in program termination if another exception is active further up the call stack. A try-catch block may be used in the destructor to prevent the thrown exception from propagating outside, provided the catch block has no code which may in turn throw a different exception.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/************************************************
 * Standard 453 S : Throw found in destructor.
 ************************************************/</span>
&nbsp;
class Person
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 personNum<span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    Person <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    ~Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 personalNumber<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
Person<span class="sy0">::</span>~Person<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="co1">// ...</span>
  throw <span class="st0">&quot;Exception thrown&quot;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_9.1'>9.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_382'>382</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_15-5-1'>15-5-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s454' name='standard_s454'><div class='standard'><div>454&nbsp;S</div></div></a><div class='headline'>Throw type is not a class type.</div></div><p>Thrown exception objects shall be of class type. A class instance provides the ability to pass information via its member data to the point at which error handling is performed. Furthermore, the class type itself can be used to document the nature of the exception, thereby aiding maintainability. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/************************************************
 * Standard 454 S : Throw type is not a class type.
 ************************************************/</span>
&nbsp;
class Person
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 personNum<span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    Person <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    ~Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 personalNumber<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
Person<span class="sy0">::</span>~Person<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="co1">// ...</span>
  throw <span class="st0">&quot;Exception thrown&quot;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_9.2'>9.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_383'>383</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s455' name='standard_s455'><div class='standard'><div>455&nbsp;S</div></div></a><div class='headline'>Catch is not by reference.</div></div><p>Catch exception blocks shall be passed arguments by reference in favour of pass-by-pointer or pass-by-value. Additional memory management is required by pass-by-pointer which may in turn cause further exceptions or memory loss if the exception object is not deleted. Information in a derived class may be sliced from the exception in the exception handler if an exception is caught by value.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/************************************************
 * Standard 455 S : Catch is not by reference.
 ************************************************/</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> f<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="co1">// ...</span>
  <span class="co1">// UINT_32 type exception thrown here</span>
  <span class="co1">// ...</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_455<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  try
  <span class="br0">&#123;</span>
    f<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
  catch <span class="br0">&#40;</span>UINT_32 someInt<span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#123;</span>
    <span class="co1">// handle UINT_32 exceptions here...</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_9.3'>9.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_384'>384</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_15-3-5'>15-3-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s456' name='standard_s456'><div class='standard'><div>456&nbsp;S</div></div></a><div class='headline'>Implicit float widening for function return.</div></div><p>The value of an expression of floating type shall not be implicitly converted to a different type if the expression is a return type.</p>
<p>All arithmetic operations should be performed in a consistent (underlying) type, and implicit conversions restricted, so as to avoid programmer confusion and the dangers associated with integral promotion.</p>
<p>Note that this standard is only enabled by setting the modifier <a href='standard_flags.htm#flag_191'>191</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">float</span> Float_32<span class="sy0">;</span>   <span class="coMULTI">/* 32 bit float */</span> 
<span class="kw4">typedef</span> <span class="kw4">double</span> Float_64<span class="sy0">;</span>  <span class="coMULTI">/* 64 bit float */</span> 
&nbsp;
&nbsp;
<span class="coMULTI">/***************************************************************
 * Standard 456 S : Implicit float widening for function return.
 ***************************************************************/</span> 
&nbsp;
Float_64 static_456<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Float_32 f32a<span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
  <span class="kw1">return</span> <span class="br0">&#40;</span>f32a<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span> 
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_704'>704</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.7'>10.7</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_10.14'>10.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_180'>180</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_325'>325</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_10.2'>10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.2'>10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_5.4.b'>5.4.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s457' name='standard_s457'><div class='standard'><div>457&nbsp;S</div></div></a><div class='headline'>Implicit int widening for function return.</div></div><p>The value of an expression of integer type shall not be implicitly converted to a different type if the expression is a return type.</p>
<p>All arithmetic operations should be performed in a consistent (underlying) type, and implicit conversions restricted, so as to avoid programmer confusion and the dangers associated with integral promotion.</p>
<p>Note that this standard is only enabled by setting the modifier <a href='standard_flags.htm#flag_191'>191</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 457 S : Implicit int widening for function return.
 *******************************************************************/</span> 
&nbsp;
UINT_16 static_457<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_8 u8a<span class="sy0">;</span>
&nbsp;
  <span class="kw1">return</span> u8a<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int02-c'>INT02-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_192'>192</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.7'>10.7</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_10.14'>10.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_180'>180</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_325'>325</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_10.1'>10.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.1'>10.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s458' name='standard_s458'><div class='standard'><div>458&nbsp;S</div></div></a><div class='headline'>Implicit conversion: actual to formal param.</div></div><p>The value of an actual parameter shall not be implicitly converted to the type of a formal parameter, if that conversion might result in the loss of information. This standard checks for:</p>
<ul>
<li style='margin-left : 0px;'>

 Conversion to a narrower integer type of the same signedness 
</li>
<li style='margin-left : 0px;'>

 Conversion from signed to unsigned
</li>
<li style='margin-left : 0px;'>

 Conversion from unsigned to signed where the values of the unsigned are not in the signed range
</li>
<li style='margin-left : 0px;'>

 Conversion from float to integral and vice versa
</li>
<li style='margin-left : 0px;'>

 Conversion from plain char to any other type and vice versa
</li>
</ul>
<p>All arithmetic operations should be performed in a consistent (underlying) type, and implicit conversions restricted, so as to avoid programmer confusion and the dangers associated with integral promotion.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>    <span class="coMULTI">/* 32 bit unsigned int */</span> 
<span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">long</span> Uint_64<span class="sy0">;</span>   <span class="coMULTI">/* 64 bit unsigned int */</span> 
&nbsp;
<span class="coMULTI">/***************************************************************
 * Standard 458 S : Implicit conversion: actual to formal param.
 ***************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> narrow_int<span class="br0">&#40;</span>Uint_32 u32b<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span>  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_458<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Uint_64 u64a<span class="sy0">;</span>
&nbsp;
  narrow_int<span class="br0">&#40;</span>u64a<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int02-c'>INT02-C</a>, <a href='cert-c_model.htm#rule_cert-c_int07-c'>INT07-C</a>, <a href='cert-c_model.htm#rule_cert-c_str04-c'>STR04-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_192'>192</a>, <a href='cwe_model.htm#rule_cwe_197'>197</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_77'>77</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_7.8'>7.8</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_10.7'>10.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_77'>77</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_10.1'>10.1</a>, <a href='misra-ac_model.htm#rule_misra-ac_10.2'>10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_77'>77</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.1'>10.1</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.2'>10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.3'>R.10.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_5.3.c'>5.3.c</a>, <a href='netrino_model.htm#rule_netrino_5.4.b'>5.4.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.5.1'>R2.5.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s459' name='standard_s459'><div class='standard'><div>459&nbsp;S</div></div></a><div class='headline'>Array passed as actual parameter.</div></div><p>Arrays shall not be passed as parameters. The degeneration of arrays to pointers when passed as parameters is often the source of errors. Array bounds checking is not performed on C-style arrays and undefined behaviour may arise from an attempt to access memory outside the bounds of an array. This standard does not apply when arrays are passed as parameters to library routines.</p>
<p>The standard can be relaxed to allow arrays to be passed to a function with a parameter which is a reference to an array by setting the modifier <a href='standard_flags.htm#flag_443'>443</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/****************************************************
 * Standard 459 S : Array passed as actual parameter.
 ****************************************************/</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> foo<span class="br0">&#40;</span>UINT_32 <span class="sy0">*</span>uptr<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* ... */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_459<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 uarray<span class="br0">&#91;</span><span class="nu0">10</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
  foo<span class="br0">&#40;</span>uarray<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_97'>97</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_268'>268</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-2-12'>5-2-12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_443'>443</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s460' name='standard_s460'><div class='standard'><div>460&nbsp;S</div></div></a><div class='headline'>Inline or template function not in header.</div></div><p>Inline and template functions shall not be defined in the implementation file. Every implementation file shall include the header files that uniquely define the inline functions and templates used, and hence enforce the one definition rule.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 460 S : Inline or template function not in header.
 *************************************************************/</span>
&nbsp;
namespace Ldra_test_f
<span class="br0">&#123;</span>
  <span class="kw2">inline</span> INT_32 min_32<span class="br0">&#40;</span>INT_32  x1<span class="sy0">,</span> INT_32  y1<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="kw1">return</span> <span class="br0">&#40;</span>x1 <span class="sy0">&lt;</span>y1<span class="br0">&#41;</span> <span class="sy0">?</span> x1 <span class="sy0">:</span> y1<span class="sy0">;</span>
  <span class="br0">&#125;</span>
&nbsp;
&nbsp;
  template <span class="sy0">&lt;</span>class T<span class="sy0">&gt;</span>
  T min<span class="br0">&#40;</span>T x2<span class="sy0">,</span> T y2<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="kw1">return</span> <span class="br0">&#40;</span>x2 <span class="sy0">&lt;</span> y2<span class="br0">&#41;</span> <span class="sy0">?</span> x2 <span class="sy0">:</span> y2<span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_8.1.2'>8.1.2</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_8.1.3'>8.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_40'>40</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_61'>61</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s461' name='standard_s461'><div class='standard'><div>461&nbsp;S</div></div></a><div class='headline'>Identifier with ambiguous linkage.</div></div><p>An identifier shall be uniquely declared with either external or internal linkage in any given translation unit.</p>
<p>Other aspects concerning linkage are covered by standards <a href='standards.htm#standard_s575'>575 S</a> and <a href='standards.htm#standard_x2'>2 X</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * Standard 461 S : Identifier with ambiguous linkage.
 *****************************************************/</span>
&nbsp;
<span class="kw2">extern</span> UINT_8 x<span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> UINT_8 x <span class="sy0">=</span> 0u<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_461<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    <span class="coMULTI">/* ... */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl36-c'>DCL36-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_24'>24</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_8.3.2'>8.3.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_24'>24</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_138'>138</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_251'>251</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_8.11'>8.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_24'>24</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_8.11'>8.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.8'>R.8.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_1.8.a'>1.8.a</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m2.2.2'>M2.2.2</a>, <a href='sec-c_model.htm#rule_sec-c_m2.2.3'>M2.2.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s462' name='standard_s462'><div class='standard'><div>462&nbsp;S</div></div></a><div class='headline'>Struct initialisation has insufficient items.</div></div><p>A structure shall be fully populated upon initialisation. If there are fewer initialising data objects than the number of members, then the aggregate is padded with zeros of the appropriate type. However, the content of the padding may be garbage for an 'auto' struct. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> Uint_32<span class="sy0">;</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">struct</span> MyStruct
<span class="br0">&#123;</span>
  Uint_32 x1<span class="sy0">;</span>
  Uint_32 x2<span class="sy0">;</span>
  Uint_32 x3<span class="sy0">;</span>
<span class="br0">&#125;</span> MyStruct<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/****************************************************************
 * Standard 462 S : Struct initialisation has insufficient items.
 * A/Ref:
 ****************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  MyStruct a_struct <span class="sy0">=</span> <span class="br0">&#123;</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.13.1.3'>4.13.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_9.2'>9.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_9.2'>9.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s463' name='standard_s463'><div class='standard'><div>463&nbsp;S</div></div></a><div class='headline'>Unnecessary comma in initialisation list.</div></div><p>Initialiser lists shall contain the correct number of comma separators. Superfluous use of a comma may make code confusing to reading.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">static</span> <span class="kw4">struct</span> <span class="br0">&#123;</span> <span class="kw4">char</span> <span class="sy0">*</span> string<span class="sy0">;</span>
                <span class="kw4">int</span> anint<span class="sy0">;</span>
              <span class="br0">&#125;</span> types <span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span>
 <span class="br0">&#123;</span>
   <span class="br0">&#123;</span> <span class="st0">&quot;one green bottle&quot;</span><span class="sy0">,</span><span class="nu0">1</span><span class="br0">&#125;</span><span class="sy0">,</span>
   <span class="br0">&#123;</span> <span class="st0">&quot;two green bottles&quot;</span><span class="sy0">,</span><span class="nu0">2</span><span class="br0">&#125;</span><span class="sy0">,</span>
   <span class="br0">&#123;</span> <span class="st0">&quot;three green bottles&quot;</span><span class="sy0">,</span><span class="nu0">3</span><span class="br0">&#125;</span><span class="sy0">,</span> <span class="coMULTI">/* not compliant */</span>
 <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/***********************************************************
 * Standard 463 S : Unnecessary comma in initialisation list.
 ***********************************************************/</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_463<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m4.5.3'>M4.5.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s464' name='standard_s464'><div class='standard'><div>464&nbsp;S</div></div></a><div class='headline'>Use of auto specifier.</div></div><p>Auto is the default storage class specifier for local declarations and need not be explicitly declared. For a variable to be an auto, it must be defined within a function.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************
 * Standard 464 S : Use of auto specifier.
 *****************************************/</span>
&nbsp;
<span class="kw4">auto</span> UINT_32 glob_var<span class="sy0">;</span>     <span class="coMULTI">/* not compliant - constraint error  */</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_464<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 r1<span class="sy0">;</span>
  <span class="kw4">auto</span> UINT_32 local_var<span class="sy0">;</span>  <span class="coMULTI">/* not compliant 'local_var' is auto by default */</span>
&nbsp;
  <span class="coMULTI">/* ... */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_8.3.3'>8.3.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_255'>255</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_1.7.a'>1.7.a</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s465' name='standard_s465'><div class='standard'><div>465&nbsp;S</div></div></a><div class='headline'>Struct/union not completely specified.</div></div><p>A complete declaration of a struct/union shall be included within a translation unit. Behaviour is undefined if a struct/union type is used to define an identifier without that type being previously or subsequently specified. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">struct</span> static_465_s<span class="sy0">;</span>  <span class="coMULTI">/* incomplete declaration */</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*********************************************************
 * Standard 465 S : Struct/union not completely specified.
 * A/Ref:
 *********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_18.1'>18.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_18.1'>18.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s466' name='standard_s466'><div class='standard'><div>466&nbsp;S</div></div></a><div class='headline'>long literal with no L suffix.</div></div><p>An L suffix should be applied to all constants of long type. In the case of C99, a LL suffix should be applied to all constants of long long type.</p>
<p>Applying a suffix, or suffixes, to a numeric constant explicitly indicates its type and signedness, thereby avoiding ambiguity where implementation dependencies may apply. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">signed</span> <span class="kw4">long</span> Sint_32<span class="sy0">;</span>
<span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">long</span> Uint_32<span class="sy0">;</span>
&nbsp;
<span class="kw4">const</span> Sint_32 slong <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>       <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">const</span> Sint_32 slong_ok <span class="sy0">=</span> <span class="nu0">1L</span><span class="sy0">;</span> 
&nbsp;
<span class="kw4">const</span> Uint_32 ulong <span class="sy0">=</span> 2U<span class="sy0">;</span>     <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">const</span> Uint_32 ulong_ok <span class="sy0">=</span> 2UL<span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*************************************************
 * Standard 466 S : Long literal with no L suffix.
 *************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_466 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_18'>18</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_18'>18</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_18'>18</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s467' name='standard_s467'><div class='standard'><div>467&nbsp;S</div></div></a><div class='headline'>Virtual member called in ctor/dtor.</div></div><p>A virtual member shall not be invoked from a class constructor. The method for the current class, or its base, will always be called, even when invoked as part of the construction of a derived class.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="coMULTI">/********************************************************
 * Standard 467 S : Virtual member called in constructor.
 ********************************************************/</span>
&nbsp;
class Person
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    virtual <span class="kw4">void</span> func<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class Student <span class="sy0">:</span> public Person
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Student<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">:</span> Person<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> func<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="br0">&#125;</span><span class="sy0">;</span>  <span class="co1">// Person::func called not Student::func </span>
    virtual <span class="kw4">void</span> func<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.3.13'>3.3.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_71.1'>71.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_12-1-1'>12-1-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s468' name='standard_s468'><div class='standard'><div>468&nbsp;S</div></div></a><div class='headline'>Member function redeclared.</div></div><p>In order to support the one definition rule (ODR), declarations are required to be made once (preferably in a shared header file), regardless of scope or namespace, to safeguard against duplicate definitions. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co1">//</span>
<span class="co1">// Standard 468 S : Member function redeclared.</span>
<span class="co1">// A/Ref:</span>
<span class="co1">// </span>
&nbsp;
namespace H
<span class="br0">&#123;</span>
  namespace G
  <span class="br0">&#123;</span>
    class HM
    <span class="br0">&#123;</span>
      public<span class="sy0">:</span>
        HM<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">;</span>
        virtual ~HM<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
      protected<span class="sy0">:</span>
      private<span class="sy0">:</span>
    <span class="br0">&#125;</span><span class="sy0">;</span>
  <span class="br0">&#125;</span> <span class="co1">// namespace H </span>
<span class="br0">&#125;</span> <span class="co1">// namespace G </span>
&nbsp;
namespace H
<span class="br0">&#123;</span>
  namespace G
  <span class="br0">&#123;</span>
    HM<span class="sy0">::</span><span class="me2">HM</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>  <span class="co1">// redeclaration </span>
    HM<span class="sy0">::</span>~HM<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="co1">//</span>
<span class="co1">//</span>
<span class="co1">// Copyright (c) 2006 Liverpool Data Research Associates</span>
<span class="co1">//</span>
<span class="co1">//</span></pre><div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s469' name='standard_s469'><div class='standard'><div>469&nbsp;S</div></div></a><div class='headline'>No copy constructor for complex destructor.</div></div><p>A copy constructor shall be declared for classes that contain non-trivial destructors, i.e. manage resources.</p>
<p>The default copy constructor provided by the compiler performs a bitwise or shallow copy, resulting in a shared resource when a duplicated resource may be necessary. An explicit declaration makes the intention clear. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**************************************************************
 * Standard 469 S : No copy constructor for complex destructor.
 **************************************************************/</span>
&nbsp;
class Person
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 personNum<span class="br0">&#41;</span><span class="sy0">;</span>
    Person <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    ~Person<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> release_resources<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="br0">&#125;</span><span class="sy0">;</span>  <span class="co1">// non-trivial destructor </span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 personalNumber<span class="sy0">;</span>
    <span class="kw4">void</span> release_resources<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_469<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Person p1<span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span><span class="sy0">;</span>
  Person q1<span class="br0">&#40;</span>p1<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="co1">// invokes (compiler provided) copy constructor </span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_4'>4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_4.2'>4.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.1.3'>3.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_76'>76</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_117'>117</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s470' name='standard_s470'><div class='standard'><div>470&nbsp;S</div></div></a><div class='headline'>No assignment operator for complex destrtor.</div></div><p>A copy assignment operator shall be declared for classes that contain non-trivial destructors, i.e. manage resources.</p>
<p>The default assignment operator provided by the compiler performs a bitwise or shallow copy, resulting in a shared resource when a duplicated resource may be necessary. An explicit declaration makes the intention clear.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**************************************************************
 * Standard 470 S : No assignment operator for complex destrtor.
 **************************************************************/</span>
&nbsp;
class Person
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 person_num<span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person<span class="br0">&#41;</span><span class="sy0">;</span>
    ~Person<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> release_resources<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="br0">&#125;</span><span class="sy0">;</span>  <span class="co1">// non-trivial destructor </span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 personal_number<span class="sy0">;</span>
    <span class="kw4">void</span> release_resources<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_470<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Person p1<span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span><span class="sy0">;</span>
  Person q1<span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span><span class="sy0">;</span>
  q1 <span class="sy0">=</span> p1<span class="sy0">;</span>  <span class="co1">// invokes (compiler provided) copy assignment constructor </span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_4'>4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_4.2'>4.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.1.3'>3.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_76'>76</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_117'>117</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s471' name='standard_s471'><div class='standard'><div>471&nbsp;S</div></div></a><div class='headline'>Function returns constant value.</div></div><p>Functions that return a constant literal value may indicate a problem with the program structure and hence redundant code.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/***************************************************
 * Standard 471 S : Function returns constant value.
 ***************************************************/</span> 
&nbsp;
INT_32 static_471 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* ... */</span> 
  <span class="kw1">return</span> <span class="nu0">42</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s472' name='standard_s472'><div class='standard'><div>472&nbsp;S</div></div></a><div class='headline'>No comment after declaration.</div></div><p>Every declaration shall have a sidebar comment indicating the purpose of the object or function. Commenting the code in this way improves readability and maintainability.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">void</span> static_472<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/************************************************
 * Standard 472 S : No comment after declaration.
 ************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_472<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw4">char</span> <span class="sy0">*</span> entry_name <span class="sy0">=</span> <span class="st0">&quot;Anon.&quot;</span><span class="sy0">;</span>
   INT_32 entry_number <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>      <span class="coMULTI">/* Id of current entry - comment provided,
                                  * unlike prior function &amp; variable declarations
                                  */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_11.8'>11.8</a>, <a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_11.10'>11.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s473' name='standard_s473'><div class='standard'><div>473&nbsp;S</div></div></a><div class='headline'>Typedef should not be used.</div></div><p>Typedefs shall not be used. For the sake of clarity, it is preferred that programmer-defined data types be represented explicitly in the code.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &lt;string.h&gt;</span>
&nbsp;
<span class="co2">#define STRING_BUFFER_LENGTH 256</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">struct</span>
<span class="br0">&#123;</span>
  <span class="kw4">int</span> stringSize<span class="sy0">;</span>
  <span class="kw4">char</span> stringBuffer<span class="br0">&#91;</span>STRING_BUFFER_LENGTH<span class="br0">&#93;</span><span class="sy0">;</span>
<span class="br0">&#125;</span> sized_string<span class="sy0">;</span>
&nbsp;
<span class="kw4">struct</span> another_string
<span class="br0">&#123;</span>
  <span class="kw4">int</span> stringLength<span class="sy0">;</span>
  <span class="kw4">char</span> stringContainer<span class="br0">&#91;</span>STRING_BUFFER_LENGTH<span class="br0">&#93;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/**********************************************
 * Standard 473 S : Typedef should not be used.
 **********************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_473<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  sized_string myString<span class="sy0">;</span>               <span class="coMULTI">/* create an instance of typedef struct */</span> 
  <span class="kw4">struct</span> another_string myContainer<span class="sy0">;</span>   <span class="coMULTI">/* explicit definition of struct type instance */</span> 
&nbsp;
  <span class="coMULTI">/* ... */</span> 
&nbsp;
  myContainer.<span class="me1">stringLength</span> <span class="sy0">=</span> myString.<span class="me1">stringSize</span><span class="sy0">;</span>
  memcpy<span class="br0">&#40;</span>myContainer.<span class="me1">stringContainer</span><span class="sy0">,</span> myString.<span class="me1">stringBuffer</span><span class="sy0">,</span> myContainer.<span class="me1">stringLength</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s474' name='standard_s474'><div class='standard'><div>474&nbsp;S</div></div></a><div class='headline'>Enum name is not all upper case.</div></div><p>Enumeration names shall be all upper case. Making enumerated constants all upper case aids readability of the code, enabling the programmer to easily distinguish between literal constants and variable/function names.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw2">enum</span> Bool
<span class="br0">&#123;</span>
  FALSE<span class="sy0">,</span>  <span class="coMULTI">/* all upper case */</span> 
  TRUE    <span class="coMULTI">/* all upper case */</span> 
<span class="br0">&#125;</span> Bool<span class="sy0">;</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw2">enum</span> MyEnum
<span class="br0">&#123;</span>
  First<span class="sy0">,</span>  <span class="coMULTI">/* not compliant - mixed lower and upper case */</span> 
  Second<span class="sy0">,</span> <span class="coMULTI">/* not compliant -  mixed lower and upper case */</span> 
  THIRD   
<span class="br0">&#125;</span> MyEnum<span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/***************************************************
 * Standard 474 S : Enum name is not all upper case.
 ***************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_474<span class="br0">&#40;</span>MyEnum ee<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Bool top_two <span class="sy0">=</span> FALSE<span class="sy0">;</span>
&nbsp;
  <span class="kw1">if</span> <span class="br0">&#40;</span>ee <span class="sy0">==</span> First<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    top_two <span class="sy0">=</span> TRUE<span class="sy0">;</span>
  <span class="br0">&#125;</span>
  <span class="kw1">else</span>
  <span class="br0">&#123;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span>ee <span class="sy0">==</span> Second<span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
      top_two <span class="sy0">=</span> TRUE<span class="sy0">;</span>
    <span class="br0">&#125;</span>
    <span class="kw1">else</span>
    <span class="br0">&#123;</span>
      top_two <span class="sy0">=</span> FALSE<span class="sy0">;</span>
    <span class="br0">&#125;</span>
  <span class="br0">&#125;</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.2.5'>3.2.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_75'>75</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s475' name='standard_s475'><div class='standard'><div>475&nbsp;S</div></div></a><div class='headline'>Parameter needs IN/OUT/INOUT marker.</div></div><p>Function parameters shall be marked by standard macros to indicate whether they are input (IN), output (OUT), or bidirectional (INOUT), immediately before the parameter type. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#define IN</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">signed</span> <span class="kw4">int</span> Sint_32<span class="sy0">;</span>
&nbsp;
Sint_32 foo<span class="br0">&#40;</span>IN Sint_32 si<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* Use of a (empty) standard macro
                              * to mark direction of parameter.
                              */</span> 
&nbsp;
<span class="coMULTI">/**********************************************************
 * Standard 475 S : Parameter needs an IN/OUT/INOUT marker.
 * A/Ref:
 **********************************************************/</span> 
&nbsp;
Sint_32 foo<span class="br0">&#40;</span>Sint_32 si<span class="br0">&#41;</span>       <span class="coMULTI">/* Direction marker omitted ! */</span> 
<span class="br0">&#123;</span>
  <span class="coMULTI">/* ... */</span> 
  <span class="kw1">return</span> si<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s476' name='standard_s476'><div class='standard'><div>476&nbsp;S</div></div></a><div class='headline'>Array index not unsigned.</div></div><p>Array subscripts must always be zero or positive. Hence any variable used to index into an array should be of an unsigned type.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*************************************************
 * Standard 476 S : Array index not unsigned.
 *************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_476<span class="br0">&#40;</span>INT_32 si<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 my_array<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span><span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">0</span><span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
  UINT_32 element <span class="sy0">=</span> my_array<span class="br0">&#91;</span>si<span class="br0">&#93;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant - signed index */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_arr30-c'>ARR30-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.11'>9.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s477' name='standard_s477'><div class='standard'><div>477&nbsp;S</div></div></a><div class='headline'>Empty else clause following else if.</div></div><p>The body of an else that follows a final else if shall contain either a non-null statement (action) or a suitable comment to indicate that the alternative case has been considered. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw2">enum</span> Pos
<span class="br0">&#123;</span>
  FIRST<span class="sy0">,</span>
  SECOND<span class="sy0">,</span>
  THIRD
<span class="br0">&#125;</span> Pos<span class="sy0">;</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw2">enum</span> Bool
<span class="br0">&#123;</span>
  FALSE<span class="sy0">,</span>
  TRUE
<span class="br0">&#125;</span> Bool<span class="sy0">;</span>
&nbsp;
Bool foo<span class="br0">&#40;</span><span class="kw4">const</span> Pos xx<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
 <span class="coMULTI">/*******************************************************
 * Standard 477 S : Empty else clause following else if.
 * A/Ref:
 *******************************************************/</span> 
&nbsp;
Bool foo<span class="br0">&#40;</span><span class="kw4">const</span> Pos xx<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Bool top_two<span class="sy0">;</span>
  <span class="coMULTI">/* ... */</span> 
  <span class="kw1">if</span> <span class="br0">&#40;</span>xx <span class="sy0">==</span> FIRST<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    top_two <span class="sy0">=</span> TRUE<span class="sy0">;</span>
  <span class="br0">&#125;</span>
  <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span>xx <span class="sy0">==</span> SECOND<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
      top_two <span class="sy0">=</span> TRUE<span class="sy0">;</span>
  <span class="br0">&#125;</span>
  <span class="kw1">else</span>
  <span class="br0">&#123;</span> <span class="sy0">;</span> <span class="br0">&#125;</span>  <span class="coMULTI">/* Not compliant - no action or comment present */</span> 
  <span class="coMULTI">/* ... */</span> 
  <span class="kw1">return</span> top_two<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.9.1.2'>3.9.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.19'>9.19</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_14.10'>14.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_14.10'>14.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.15.7'>R.15.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_8.2.d'>8.2.d</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.9.1'>M1.9.1</a>, <a href='sec-c_model.htm#rule_sec-c_r3.5.1'>R3.5.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s478' name='standard_s478'><div class='standard'><div>478&nbsp;S</div></div></a><div class='headline'>Name starts with ISO reserved prefix.</div></div><p>Macro names that start with is or to and are followed by a lowercase letter are ISO reserved words. Section 7.13 of the ISO/IEC 9899:1990 C  programming standard lists possible future changes to names in the standard library and states that such names are reserved. This includes all names starting with is or to and followed by a lowercase letter.</p>
<p>This standard will only be enabled by setting the modifier <a href='standard_flags.htm#flag_316'>316</a> to 1 in the creport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<p>Note that MISRA-C:2004 checking needs to be enabled in order for this violation to be detected, either via selection of the MISRA-C:2004 programming model or by setting the modifier <a href='standard_flags.htm#flag_191'>191</a> to 1 in the creport.dat (TBmisra license permitting).</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="coMULTI">/* Not compliant */</span>
<span class="co2">#define isillegal 11</span>
&nbsp;
SINT_32 total <span class="sy0">=</span> <span class="nu0">12</span><span class="sy0">;</span>  <span class="coMULTI">/* compliant */</span>
&nbsp;
<span class="coMULTI">/****************************************************
 * Standard 478 S : Name starts with ISO reserved prefix.
 ****************************************************/</span> 
&nbsp;
SINT_32 static_478<span class="br0">&#40;</span>SINT_32 p1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  SINT_32 result <span class="sy0">=</span> total <span class="sy0">+</span> <span class="br0">&#40;</span>p1 <span class="sy0">*</span> isillegal<span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">return</span> result<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_20.1'>20.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_316'>316</a> = 1, <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_20.1'>20.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_316'>316</a> = 1, <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c++.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s479' name='standard_s479'><div class='standard'><div>479&nbsp;S</div></div></a><div class='headline'>Right shift loses all bits.</div></div><p>A right bit shift operation shall not be performed when the number of bits shifted results in the value held by the lvalue operand to be lost. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">char</span> Uint_8<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/**********************************************
 * Standard 479 S : Right shift loses all bits.
 * A/Ref:
 **********************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Uint_8 ss <span class="sy0">=</span> 15U<span class="sy0">;</span>
  Uint_8 res<span class="sy0">;</span>
&nbsp;
  res <span class="sy0">=</span> ss <span class="sy0">&gt;&gt;</span> 4U<span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int34-c'>INT34-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_189'>189</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s480' name='standard_s480'><div class='standard'><div>480&nbsp;S</div></div></a><div class='headline'>String function params access same variable.</div></div><p>An object shall not be copied to another when the two objects have some overlap in memory. The behaviour is undefined. This standard applies to the string handling library functions.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &lt;string.h&gt;</span>
&nbsp;
<span class="coMULTI">/******************************************************
 * Standard 480 S : String function params access same variable.
 ******************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_480<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">char</span> str<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span><span class="st0">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><span class="br0">&#125;</span><span class="sy0">;</span>
  <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>memcpy<span class="br0">&#40;</span><span class="sy0">&amp;</span>str<span class="br0">&#91;</span><span class="nu0">10</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="sy0">&amp;</span>str<span class="br0">&#91;</span><span class="nu0">13</span><span class="br0">&#93;</span><span class="sy0">,</span> 6U<span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl33-c'>DCL33-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_18.2'>18.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_0-2-1'>0-2-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_18.2'>18.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.19.1'>R.19.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s481' name='standard_s481'><div class='standard'><div>481&nbsp;S</div></div></a><div class='headline'>Array with no bounds in struct.</div></div><p>A user-defined structure or union type declaration shall be complete within any translation unit that refers to it. Specifically the C90 standard stipulates that no incomplete array definitions be permitted in a structure or union. Such behaviour is a constraint error, but may not be detected by all compilers. </p>
<p>C99 does allow incomplete arrays as the last member of a structure, but it is also restricted by this penalty.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * Standard 481 S : Array with no bounds in struct.
 *****************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_481 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw4">struct</span> static_481_tag <span class="br0">&#123;</span>
      INT_16 a<span class="sy0">;</span>
      INT_16 b <span class="br0">&#91;</span> <span class="br0">&#93;</span><span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
   <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
   <span class="kw4">struct</span> static_481_tag static_481_st <span class="sy0">=</span> <span class="br0">&#123;</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="br0">&#123;</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="sy0">,</span> <span class="nu0">4</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
   <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.1.1'>3.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_1.1'>1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_18.1'>18.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_1-0-1'>1-0-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_18.1'>18.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.1'>R.1.1</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.18.7'>R.18.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s482' name='standard_s482'><div class='standard'><div>482&nbsp;S</div></div></a><div class='headline'>Incomplete structure referenced.</div></div><p>A user-defined structure or union type declaration shall be complete within any translation unit that dereferences it.</p>
<p>Opaque pointers are permitted where the internal implementation is hidden using a pointer. This allows the implementation of the whole interface to change without the need to recompile the modules using it.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 482 S : Incomplete structure referenced
 *******************************************************************/</span> 
&nbsp;
<span class="kw2">extern</span> <span class="kw4">struct</span> st <span class="sy0">*</span>pst1<span class="sy0">;</span>
<span class="kw2">extern</span> <span class="kw4">struct</span> st <span class="sy0">*</span>pst2<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> static_482 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   pst2 <span class="sy0">=</span> pst1<span class="sy0">;</span>         <span class="coMULTI">/* Ok - use of opaque pointer */</span> 
&nbsp;
   <span class="sy0">*</span>pst2 <span class="sy0">=</span> <span class="sy0">*</span>pst1<span class="sy0">;</span>       <span class="coMULTI">/* not compliant */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_18.1'>18.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_18.1'>18.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s483' name='standard_s483'><div class='standard'><div>483&nbsp;S</div></div></a><div class='headline'>free parameter is not heap item.</div></div><p>free de-allocates the memory pointed to by the specified parameter, and makes it available for other use. Before free is called, memory must have been allocated (on the heap).</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 483 S : free parameter is not heap item.
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">struct</span> S
<span class="br0">&#123;</span>
  UINT_32 ac<span class="sy0">;</span>
  UINT_32 bc<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> static_483 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    UINT_32 ic<span class="sy0">;</span>
    UINT_32 <span class="sy0">*</span>jc<span class="sy0">;</span>
&nbsp;
    <span class="kw4">struct</span> S <span class="sy0">*</span>sptr<span class="sy0">;</span>
    sptr <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">struct</span> S<span class="sy0">*</span><span class="br0">&#41;</span>malloc<span class="br0">&#40;</span><span class="kw4">sizeof</span><span class="br0">&#40;</span><span class="kw4">struct</span> S<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
    jc <span class="sy0">=</span> <span class="sy0">&amp;</span>ic<span class="sy0">;</span> 
    free<span class="br0">&#40;</span>jc<span class="br0">&#41;</span><span class="sy0">;</span>     <span class="coMULTI">/* not compliant - free performed on non-heap item */</span> 
&nbsp;
    free<span class="br0">&#40;</span>sptr<span class="br0">&#41;</span><span class="sy0">;</span>   <span class="coMULTI">/* Ok */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_mem34-c'>MEM34-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_590'>590</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.22.2'>R.22.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s484' name='standard_s484'><div class='standard'><div>484&nbsp;S</div></div></a><div class='headline'>Attempt to use already freed object.</div></div><p>Once memory for an object has been de-allocated, the pointer that was used to identify the location of the object no longer points to a valid address. A freed object shall not be accessed.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 484 S : Attempt to use already freed object
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">struct</span> S
<span class="br0">&#123;</span>
  UINT_32 ac<span class="sy0">;</span>
  UINT_32 bc<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_484 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    UINT_32 ic<span class="sy0">;</span>
    <span class="kw4">struct</span> S <span class="sy0">*</span>sptr<span class="sy0">;</span>
&nbsp;
    sptr <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">struct</span> S<span class="sy0">*</span><span class="br0">&#41;</span>malloc<span class="br0">&#40;</span><span class="kw4">sizeof</span><span class="br0">&#40;</span><span class="kw4">struct</span> S<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    free<span class="br0">&#40;</span>sptr<span class="br0">&#41;</span><span class="sy0">;</span>
    ic <span class="sy0">=</span> sptr<span class="sy0">-&gt;</span>ac<span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span>
                     <span class="coMULTI">/* use after free, dereferencing freed pointer &quot;sptr&quot; */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_mem01-c'>MEM01-C</a>, <a href='cert-c_model.htm#rule_cert-c_mem31-c'>MEM31-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_415'>415</a>, <a href='cwe_model.htm#rule_cwe_416'>416</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.22.2'>R.22.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s485' name='standard_s485'><div class='standard'><div>485&nbsp;S</div></div></a><div class='headline'>Array deletion without [].</div></div><p>To destroy an array and ensure that all destructors are called, delete[] must be used rather than delete. Failure to invoke destructors for each array element may result in memory leaks. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="co1">//</span>
<span class="co1">// Standard 485 S : Array deletion without []</span>
<span class="co1">// </span>
&nbsp;
class helper
<span class="br0">&#123;</span>
    <span class="co1">// Resources dynamically allocated in constructor</span>
    <span class="co1">// and destroyed in destructor. </span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> static_485<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    helper <span class="sy0">*</span> buffer <span class="sy0">=</span> new helper<span class="br0">&#91;</span><span class="nu0">10</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
    delete buffer<span class="sy0">;</span>    <span class="co1">// Not Ok - should be &quot;delete[] buffer&quot;/ </span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="co1">//</span>
<span class="co1">//</span>
<span class="co1">// Copyright (c) 2007 Liverpool Data Research Associates</span>
<span class="co1">//</span>
<span class="co1">//</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_762'>762</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_2.5'>2.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s486' name='standard_s486'><div class='standard'><div>486&nbsp;S</div></div></a><div class='headline'>Incorrect number of formats in output function.</div></div><p>Arguments of an output function shall each be associated with a format code. Omission of a format code is likely to result in the incorrect representation of any output.</p>
<p>Note: This standard is pessimistic and assumes that if a variable is used as the format argument that is might contain the incorrect number of formats.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdio.h&gt;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 486 S : Incorrect number of formats in output function.
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_486 <span class="br0">&#40;</span> <span class="kw4">char</span> <span class="sy0">*</span> my_string <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a> <span class="br0">&#40;</span> my_string <span class="br0">&#41;</span><span class="sy0">;</span>      <span class="coMULTI">/* Not Compliant - missing format string */</span> 
&nbsp;
    <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a> <span class="br0">&#40;</span> <span class="st0">&quot;My string is %s&quot;</span><span class="sy0">,</span> my_string <span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* Compliant */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_fio00-c'>FIO00-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_134'>134</a>, <a href='cwe_model.htm#rule_cwe_685'>685</a>, <a href='cwe_model.htm#rule_cwe_686'>686</a>, <a href='cwe_model.htm#rule_cwe_688'>688</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s487' name='standard_s487'><div class='standard'><div>487&nbsp;S</div></div></a><div class='headline'>Insufficient space allocated.</div></div><p>When allocating space to an object from heap/free store, enough space shall be reserved to fully accommodate the object. Access to under-allocated memory may result in reading out of bounds or overwriting adjacent memory locations. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdlib.h&gt; </span>
&nbsp;
<span class="coMULTI">/**************************************************
 * Standard 487 S : Insufficient space allocated
 **************************************************/</span> 
&nbsp;
&nbsp;
<span class="kw4">struct</span> S
<span class="br0">&#123;</span>
  UINT_32 ac<span class="sy0">;</span>
  UINT_32 bc<span class="sy0">;</span>
  CHAR cc<span class="br0">&#91;</span><span class="nu0">100</span><span class="br0">&#93;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_487 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    UINT_32 tt<span class="sy0">;</span>
    <span class="kw4">struct</span> S <span class="sy0">*</span>sptr<span class="sy0">;</span>
&nbsp;
    sptr <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">struct</span> S<span class="sy0">*</span><span class="br0">&#41;</span>malloc<span class="br0">&#40;</span><span class="kw4">sizeof</span><span class="br0">&#40;</span>sptr<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* Not compliant - should be &quot;sizeof(*sptr)&quot; */</span> 
    sptr<span class="sy0">-&gt;</span>ac <span class="sy0">=</span> 0U<span class="sy0">;</span>
    sptr<span class="sy0">-&gt;</span>bc <span class="sy0">=</span> 0U<span class="sy0">;</span>
    tt <span class="sy0">=</span> sptr<span class="sy0">-&gt;</span>bc<span class="sy0">;</span>
    <span class="coMULTI">/***/</span> 
&nbsp;
    free<span class="br0">&#40;</span>sptr<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_mem35-c'>MEM35-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_131'>131</a>, <a href='cwe_model.htm#rule_cwe_190'>190</a>, <a href='cwe_model.htm#rule_cwe_680'>680</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s488' name='standard_s488'><div class='standard'><div>488&nbsp;S</div></div></a><div class='headline'>Value outside range of underlying type.</div></div><p>All operations shall be conducted in exactly the same arithmetic (underlying) type. Irrespective of implementation, operands must be within the range of the underlying type used. Mismatching types leads to unexpected results.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 488 S : Outside range of underlying type
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_488 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    SCHAR s8a <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
    SCHAR s8b <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
    s8a <span class="sy0">=</span> s8a <span class="sy0">+</span> <span class="nu0">127</span><span class="sy0">;</span>  <span class="coMULTI">/* Compliant */</span> 
&nbsp;
    s8b <span class="sy0">=</span> s8b <span class="sy0">+</span> <span class="nu0">150</span><span class="sy0">;</span>  <span class="coMULTI">/* Not compliant  - addition performed in 8-bit signed */</span> 
<span class="br0">&#125;</span>                     <span class="coMULTI">/* and so &quot;150&quot; too big */</span> 
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int08-c'>INT08-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_190'>190</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_6.3'>6.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_10.1'>10.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.1'>10.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.3'>R.10.3</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.4'>R.10.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_5.3.c'>5.3.c</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.3.1'>R2.3.1</a>, <a href='sec-c_model.htm#rule_sec-c_x2.x'>X2.x</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s489' name='standard_s489'><div class='standard'><div>489&nbsp;S</div></div></a><div class='headline'>Insufficient space for operation.</div></div><p>When copying from source to destination, the destination must not overrun as a result of the operation. Overrun leads to data corruption.  Standards <a href='standards.htm#standard_x66'>66 X</a>, <a href='standards.htm#standard_x70'>70 X</a> and <a href='standards.htm#standard_x71'>71 X</a> report copies via procedure calls.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;string.h&gt;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 489 S : Insufficient space for operation
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_489 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    <span class="kw4">char</span> source<span class="br0">&#91;</span><span class="nu0">200</span><span class="br0">&#93;</span><span class="sy0">;</span>
    <span class="kw4">char</span> destination<span class="br0">&#91;</span><span class="nu0">100</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
    <span class="coMULTI">/***/</span> 
&nbsp;
    strncpy<span class="br0">&#40;</span> destination<span class="sy0">,</span> source<span class="sy0">,</span> <span class="nu0">200</span> <span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* Not compliant - destination is overrun */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_arr33-c'>ARR33-C</a>, <a href='cert-c_model.htm#rule_cert-c_str31-c'>STR31-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_121'>121</a>, <a href='cwe_model.htm#rule_cwe_122'>122</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s490' name='standard_s490'><div class='standard'><div>490&nbsp;S</div></div></a><div class='headline'>No cast for widening float parameter.</div></div><p>Implicit conversions shall be avoided for function arguments. A widening conversion on a float parameter must be made explicit by the use of a cast. The use of a cast makes clear the intention to convert from one type to another type.</p>
<p>Note that this standard is only enabled by setting the modifier <a href='standard_flags.htm#flag_191'>191</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 490 S : No cast for widening float parameter
 *******************************************************************/</span>
&nbsp;
<span class="kw2">extern</span> <span class="kw4">void</span> helper64<span class="br0">&#40;</span> FLOAT_64 h1 <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw2">extern</span> <span class="kw4">void</span> helper32<span class="br0">&#40;</span> FLOAT_32 h2 <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> static_490<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    FLOAT_32 s1<span class="sy0">;</span>
    helper32<span class="br0">&#40;</span>s1<span class="br0">&#41;</span><span class="sy0">;</span>            <span class="coMULTI">/* compliant */</span>
&nbsp;
    helper64<span class="br0">&#40;</span><span class="br0">&#40;</span>FLOAT_64<span class="br0">&#41;</span>s1<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* compliant - use of a cast */</span>
    helper64<span class="br0">&#40;</span>s1<span class="br0">&#41;</span><span class="sy0">;</span>            <span class="coMULTI">/* not compliant - implicit widening conversion */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_10.2'>10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.2'>10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_5.4.b'>5.4.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_191'>191</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c++.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s491' name='standard_s491'><div class='standard'><div>491&nbsp;S</div></div></a><div class='headline'>No cast for widening int parameter.</div></div><p>Implicit conversions shall be avoided for function arguments. A widening conversion on an integer parameter must be made explicit by the use of a cast. The use of a cast makes clear the intention to convert from one type to another type.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 491 S : No cast for widening int parameter
 *******************************************************************/</span> 
&nbsp;
<span class="kw2">extern</span> <span class="kw4">void</span> helper32<span class="br0">&#40;</span> UINT_32 h1 <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw2">extern</span> <span class="kw4">void</span> helper16<span class="br0">&#40;</span> UINT_16 h2 <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> static_491<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    UINT_16 s1<span class="sy0">;</span>
    helper16<span class="br0">&#40;</span>s1<span class="br0">&#41;</span><span class="sy0">;</span>          <span class="coMULTI">/* compliant */</span> 
&nbsp;
    helper32<span class="br0">&#40;</span><span class="br0">&#40;</span>UINT_32<span class="br0">&#41;</span>s1<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* compliant - use of a cast */</span> 
    helper32<span class="br0">&#40;</span>s1<span class="br0">&#41;</span><span class="sy0">;</span>          <span class="coMULTI">/* not compliant - implicit widening conversion */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int02-c'>INT02-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_192'>192</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_10.1'>10.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.1'>10.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c++.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s492' name='standard_s492'><div class='standard'><div>492&nbsp;S</div></div></a><div class='headline'>Parameter not declared on new line.</div></div><p>Each parameter, after the first, should be positioned on a new line by itself (with the closing parenthesis directly after the last argument). Declaring and defining functions in this way aids readability. This LDRA penalty is not applicable to code substituted into the source through macro expansion, as these checks are based on the original code and do not extend to macro definitions.</p>
<p>This standard can be relaxed to allow the parameters of a function with only two parameters to appear on the same line by setting the modifier <a href='standard_flags.htm#flag_220'>220</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 492 S : Parameter not declared on a newline
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_492<span class="br0">&#40;</span> UINT_32 p1<span class="sy0">,</span>                        
                 UINT_32 p2<span class="sy0">,</span> UINT_32 p3<span class="sy0">,</span>      <span class="coMULTI">/* not compliant */</span> 
                 UINT_32 p4 <span class="br0">&#41;</span>                     
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_83'>83</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.6.1'>3.6.1</a>, <a href='fsb582-c_model.htm#rule_fsb582-c_3.7.1'>3.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_4'>4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_58'>58</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_220'>220</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_83'>83</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s493' name='standard_s493'><div class='standard'><div>493&nbsp;S</div></div></a><div class='headline'>Numeric overflow.</div></div><p>Run-time operations on numeric variables that result in a value outside of the range of its type shall be avoided.  The behaviour is undefined for signed integer arithmetic.  In the case of unsigned arithmetic, wrap-around will occur. This may be intended in some situations, but in general the practice is regarded as unsafe. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************
 * Standard 493 S : Numeric overflow.
 *****************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_493<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  SINT_8 my_schar <span class="sy0">=</span> <span class="nu0">127</span><span class="sy0">;</span>   <span class="coMULTI">/* 8-bit signed char types are in the range -128 to 127. */</span> 
  my_schar<span class="sy0">++;</span>              <span class="coMULTI">/* not compliant - exceeded the maximum value. */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.6.3'>5.6.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int32-c'>INT32-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.1.14'>6.1.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_128'>128</a>, <a href='cwe_model.htm#rule_cwe_190'>190</a>, <a href='cwe_model.htm#rule_cwe_192'>192</a>, <a href='cwe_model.htm#rule_cwe_197'>197</a>, <a href='cwe_model.htm#rule_cwe_680'>680</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.6.1.14'>4.6.1.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_51'>51</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-19-1'>5-19-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_51'>51</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.12.4'>R.12.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.3.1'>R2.3.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s494' name='standard_s494'><div class='standard'><div>494&nbsp;S</div></div></a><div class='headline'>Numeric underflow.</div></div><p>Run-time operations on numeric variables that result in a value outside of the range of its type shall be avoided. Although wrap-around actions are sometimes intended, the practice is regarded as unsafe.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_494<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 494 S : Numeric underflow
 *******************************************************************/</span> 
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_494<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* char assumed to be signed */</span>
  CHAR my_schar <span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">128</span><span class="sy0">;</span>  <span class="coMULTI">/* 8-bit signed char types are in the range -128 to 127. */</span> 
  my_schar<span class="sy0">--;</span>            <span class="coMULTI">/* Not ok - exceeded the minimum value. */</span> 
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.6.3'>5.6.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int32-c'>INT32-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.1.14'>6.1.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_128'>128</a>, <a href='cwe_model.htm#rule_cwe_190'>190</a>, <a href='cwe_model.htm#rule_cwe_191'>191</a>, <a href='cwe_model.htm#rule_cwe_192'>192</a>, <a href='cwe_model.htm#rule_cwe_197'>197</a>, <a href='cwe_model.htm#rule_cwe_680'>680</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.6.1.14'>4.6.1.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_51'>51</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-19-1'>5-19-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_51'>51</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.12.4'>R.12.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.3.1'>R2.3.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s495' name='standard_s495'><div class='standard'><div>495&nbsp;S</div></div></a><div class='headline'>Typedef name has no size indication.</div></div><p>The use of typedefs, as opposed to the basic numerical types, is encouraged to clarify the size of the storage. To ensure that this aim is fulfilled, each typedef of a numerical type must incorporate a value to indicate the size in bits.</p>
<p>A typedef that includes the phrase bool need not include a size. The phrase bool is not case sensitive.</p>
<p>This standard can be relaxed so that only ANSI built-in numerical types need to have a size indication by setting the modifier <a href='standard_flags.htm#flag_392'>392</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> <span class="kw4">uint32_t</span><span class="sy0">;</span>    <span class="coMULTI">/* compliant */</span>
<span class="kw4">typedef</span> <span class="kw4">int</span> Boolean<span class="sy0">;</span>              <span class="coMULTI">/* compliant */</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">short</span> my_uint<span class="sy0">;</span>   <span class="coMULTI">/* not compliant - should indicate size, e.g. uint16_t */</span> 
<span class="kw4">typedef</span> <span class="kw4">uint32_t</span> my_counter<span class="sy0">;</span>      <span class="coMULTI">/* not compliant,  unless modifier 392 set             */</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 495 S : Typedef name has no size indication
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_495<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   my_uint local_var<span class="sy0">;</span>
   <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_4.1.1'>4.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_392'>392</a> = 1</td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_1.10'>1.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_392'>392</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_6.3'>6.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_392'>392</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_6.3'>6.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_392'>392</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_d.4.6'>D.4.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_392'>392</a> = 1</td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_5.2.a'>5.2.a</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_392'>392</a> = 1</td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_p2.1.3'>P2.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_392'>392</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s496' name='standard_s496'><div class='standard'><div>496&nbsp;S</div></div></a><div class='headline'>Function call with no prior declaration.</div></div><p>The use of function prototypes enables the compiler to enforce the consistent use of a function interface, without the necessity to make assumptions about argument types for instance. If a function is to be invoked before it has been defined then the a prototype shall have previously been declared. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 496 S : Function call with no prior declaration.
 *******************************************************************/</span> 
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_496<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp;
  UINT_32 my_local <span class="sy0">=</span> 42U<span class="sy0">;</span>
&nbsp;
  static_496_helper<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>    <span class="coMULTI">/* not compliant -  no prior declaration */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_496_helper<span class="br0">&#40;</span> SINT_16 p1 <span class="br0">&#41;</span>  <span class="coMULTI">/* Not compatible with earlier implicit declaration */</span> 
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl31-c'>DCL31-C</a>, <a href='cert-c_model.htm#rule_cert-c_exp37-c'>EXP37-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_628'>628</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_8.1'>8.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_8.1'>8.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.17.3'>R.17.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_6.2.d'>6.2.d</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m4.4.3'>M4.4.3</a>, <a href='sec-c_model.htm#rule_sec-c_r2.8.3'>R2.8.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='tbrun_requires_model.htm'>TBrun Requires</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c++.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s497' name='standard_s497'><div class='standard'><div>497&nbsp;S</div></div></a><div class='headline'>Type is incomplete in translation unit.</div></div><p>A structure or union type shall not remain partially specified in a translation unit. Behaviour is undefined for any object that refers to an incomplete type.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 497 S : Type is incomplete in translation unit.
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_497<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* struct st is not specified */</span> 
&nbsp;
  <span class="kw4">struct</span> st s1<span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span> 
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_18.1'>18.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_18.1'>18.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s498' name='standard_s498'><div class='standard'><div>498&nbsp;S</div></div></a><div class='headline'>Use of inline keyword.</div></div><p>The inline keyword should not be used for member functions. Implicit inlining by means of putting the definition in the class body is preferred. This will instruct the compiler to inline rather than merely provide a hint to do so. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="co1">//</span>
<span class="co1">// Standard 498 S : Use of inline keyword</span>
<span class="co1">// A/Ref:</span>
<span class="co1">// </span>
&nbsp;
class MyClass
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    UINT_32 impl_in_method<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="kw1">return</span> 1U<span class="sy0">;</span> <span class="br0">&#125;</span>  <span class="co1">// ok </span>
    UINT_32 expl_in_method1<span class="br0">&#40;</span>UINT_32 m1p<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw2">inline</span> UINT_32 expl_in_method2<span class="br0">&#40;</span>UINT_32 m2p<span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
      <span class="kw1">return</span> m2p<span class="sy0">*</span><span class="nu0">2</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>                                            <span class="co1">// not ok </span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> static_498<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw2">inline</span> UINT_32 MyClass<span class="sy0">::</span><span class="me2">expl_in_method1</span><span class="br0">&#40;</span>UINT_32 m1p<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">return</span> m1p<span class="sy0">*</span><span class="nu0">2</span><span class="sy0">;</span>
<span class="br0">&#125;</span>                                                <span class="co1">// not ok </span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_498<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  MyClass <span class="sy0">*</span> buffer <span class="sy0">=</span> new MyClass<span class="sy0">;</span>
&nbsp;
  UINT_32 res1 <span class="sy0">=</span> buffer<span class="sy0">-&gt;</span>impl_in_method<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  UINT_32 res2 <span class="sy0">=</span> buffer<span class="sy0">-&gt;</span>expl_in_method1<span class="br0">&#40;</span>res1<span class="br0">&#41;</span><span class="sy0">;</span>
  UINT_32 res3 <span class="sy0">=</span> buffer<span class="sy0">-&gt;</span>expl_in_method2<span class="br0">&#40;</span>res2<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
  <span class="co1">// ... </span>
&nbsp;
  delete buffer<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="co1">//</span>
<span class="co1">//</span>
<span class="co1">// Copyright (c) 2007 Liverpool Data Research Associates</span>
<span class="co1">//</span>
<span class="co1">//</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_5.2'>5.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.1.7'>3.1.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_p1.1.1'>P1.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s499' name='standard_s499'><div class='standard'><div>499&nbsp;S</div></div></a><div class='headline'>Too many default parameters in copy ctor.</div></div><p>The use of default arguments to a copy constructor gives rise to ambiguity with compiler-supplied implicit copy constructors. Default parameters should be used with caution. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="co1">//</span>
<span class="co1">// Standard 499 S : Too many default parameters in copy ctor.</span>
<span class="co1">// A/Ref:</span>
<span class="co1">// </span>
&nbsp;
class MyClass
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    MyClass<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="co1">// A default copy ctor will be created by compiler...</span>
&nbsp;
    MyClass<span class="br0">&#40;</span><span class="kw4">const</span> MyClass <span class="sy0">&amp;</span> mc<span class="sy0">,</span>
            UINT_32 m_b <span class="sy0">=</span> 42U<span class="br0">&#41;</span>          <span class="co1">// not ok </span>
    <span class="br0">&#123;</span> m_a <span class="sy0">=</span> mc.<span class="me1">m_a</span> <span class="sy0">*</span> <span class="nu0">2</span><span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 m_a<span class="sy0">;</span>
    UINT_32 m_b<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> static_499<span class="br0">&#40;</span> MyClass <span class="sy0">&amp;</span> mcp <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_499<span class="br0">&#40;</span> MyClass <span class="sy0">&amp;</span> mcp <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  MyClass <span class="sy0">*</span> buffer <span class="sy0">=</span> new MyClass<span class="br0">&#40;</span>mcp<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="co1">// which copy ctor is called? </span>
&nbsp;
  <span class="co1">// ... </span>
&nbsp;
  delete buffer<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="co1">//</span>
<span class="co1">//</span>
<span class="co1">// Copyright (c) 2007 Liverpool Data Research Associates</span>
<span class="co1">//</span>
<span class="co1">//</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_77.1'>77.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s500' name='standard_s500'><div class='standard'><div>500&nbsp;S</div></div></a><div class='headline'>Class does not have a &lt;&lt; output operator.</div></div><p>All classes should provide an output operator to facilitate debugging and testing of code. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co1">//LDRA_STANDARD_ON 500 S</span>
<span class="co2">#define __USE_STD_IOSTREAM</span>
<span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;iostream&gt; </span>
&nbsp;
<span class="co1">//</span>
<span class="co1">// Standard 500 S : Class does not have a &lt;&lt; output operator.</span>
<span class="co1">// A/Ref:</span>
<span class="co1">// </span>
&nbsp;
class MyClass
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    MyClass<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> m_data <span class="sy0">=</span> <span class="st0">&quot;initial &quot;</span><span class="sy0">;</span><span class="br0">&#125;</span>
<span class="co1">//</span>
<span class="co1">//  No overloaded 'operator &lt;&lt;' - not ok</span>
<span class="co1">//  ostream &amp; operator &lt;&lt;(ostream &amp; outp) { outp &lt;&lt; m_data &lt;&lt; &quot;and more text &quot;; return outp; }</span>
<span class="co1">// </span>
    <span class="kw4">char</span> <span class="sy0">*</span> m_data<span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> static_500<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_500<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  MyClass buffer<span class="sy0">;</span>
&nbsp;
  <span class="co1">// ...</span>
  <span class="co1">// buffer &lt;&lt; cout; </span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="co1">//</span>
<span class="co1">//</span>
<span class="co1">// Copyright (c) 2007 Liverpool Data Research Associates</span>
<span class="co1">//</span>
<span class="co1">//</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.1.12'>3.1.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s501' name='standard_s501'><div class='standard'><div>501&nbsp;S</div></div></a><div class='headline'>Pure virtual member defined.</div></div><p>A pure virtual method signifies an abstract base class. The implementation of its pure virtual methods shall be provided by non-abstract classes, which derive from the base class, and not the base class itself. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="co1">//</span>
<span class="co1">// Standard 501 S : Pure virtual member defined.</span>
<span class="co1">// A/Ref:</span>
<span class="co1">// </span>
&nbsp;
<span class="kw4">void</span> static_501<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
class Base
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    virtual <span class="kw4">void</span> pvf_member<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> Base<span class="sy0">::</span><span class="me2">pvf_member</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="sy0">;</span> <span class="br0">&#125;</span>  <span class="co1">// not ok </span>
&nbsp;
&nbsp;
class Derived <span class="sy0">:</span> public Base
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    <span class="kw4">void</span> pvf_member<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="sy0">;</span> <span class="br0">&#125;</span>    <span class="co1">// ok - overridden here in derived class </span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_501<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Derived <span class="sy0">*</span> buffer <span class="sy0">=</span> new Derived<span class="sy0">;</span>
&nbsp;
  <span class="co1">// ... </span>
&nbsp;
  delete buffer<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="co1">//</span>
<span class="co1">//</span>
<span class="co1">// Copyright (c) 2007 Liverpool Data Research Associates</span>
<span class="co1">//</span>
<span class="co1">//</span></pre><div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s502' name='standard_s502'><div class='standard'><div>502&nbsp;S</div></div></a><div class='headline'>Delete contains number of elements.</div></div><p>The number of elements shall not be specified when deleting an array of objects. The feature is obsolete and non-standard ISO C++. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="co1">//</span>
<span class="co1">// Standard 502 S : Delete contains number of elements.</span>
<span class="co1">// A/Ref:</span>
<span class="co1">// </span>
&nbsp;
class MyClass
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    MyClass<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_502<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_502<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  MyClass <span class="sy0">*</span> buffer <span class="sy0">=</span> new MyClass<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span><span class="sy0">;</span>
  delete <span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span> buffer<span class="sy0">;</span>     <span class="co1">// not ok </span>
&nbsp;
  UINT_32 <span class="sy0">*</span> uint_array <span class="sy0">=</span> new UINT_32<span class="br0">&#91;</span><span class="nu0">5</span><span class="br0">&#93;</span><span class="sy0">;</span>
  delete <span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span> uint_array<span class="sy0">;</span> <span class="co1">// not ok </span>
&nbsp;
  SINT_32 <span class="sy0">*</span> int_array <span class="sy0">=</span> new SINT_32<span class="br0">&#91;</span><span class="nu0">7</span><span class="br0">&#93;</span><span class="sy0">;</span>
  delete <span class="br0">&#91;</span><span class="br0">&#93;</span> int_array<span class="sy0">;</span>  <span class="co1">// ok </span>
&nbsp;
  <span class="co1">// ... </span>
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="co1">//</span>
<span class="co1">//</span>
<span class="co1">// Copyright (c) 2007 Liverpool Data Research Associates</span>
<span class="co1">//</span>
<span class="co1">//</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_12.4'>12.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s503' name='standard_s503'><div class='standard'><div>503&nbsp;S</div></div></a><div class='headline'>Function returns local resources.</div></div><p>A dereferenced pointer (or reference) to a dynamically allocated local object shall not be returned by a function. Ownership of the resource is effectively transferred by the call, which may not be clear, resulting in 'dangling' handles. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="co1">//</span>
<span class="co1">// Standard 503 S : Function returns local resources.</span>
<span class="co1">// A/Ref:</span>
<span class="co1">// </span>
&nbsp;
class MyClass
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    MyClass<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
MyClass static_503<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
MyClass static_503<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  MyClass <span class="sy0">*</span> buffer <span class="sy0">=</span> new MyClass<span class="sy0">;</span>
&nbsp;
  <span class="kw1">return</span> <span class="sy0">*</span> buffer<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">int</span> main<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  MyClass mc2<span class="sy0">;</span>
&nbsp;
  mc2 <span class="sy0">=</span> static_503<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>  <span class="co1">// not ok - resources have been created by call </span>
  <span class="co1">// </span>
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="co1">//</span>
<span class="co1">//</span>
<span class="co1">// Copyright (c) 2007 Liverpool Data Research Associates</span>
<span class="co1">//</span>
<span class="co1">//</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_562'>562</a>, <a href='cwe_model.htm#rule_cwe_825'>825</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_4.11'>4.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_12.5'>12.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_112'>112</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s504' name='standard_s504'><div class='standard'><div>504&nbsp;S</div></div></a><div class='headline'>Space required between &gt; and &gt;.</div></div><p>Nested template arguments lead to successive &gt; symbols, which could be interpreted as a shift operator if not delimited by a space character. Failure to insert a space between angle brackets may cause confusion. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="co1">//</span>
<span class="co1">// Standard 504 S : Space required between &gt; and &gt;.</span>
<span class="co1">// </span>
&nbsp;
template <span class="sy0">&lt;</span>class A<span class="sy0">,</span> class B<span class="sy0">&gt;</span> 
class Outer
<span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
template <span class="sy0">&lt;</span>class C<span class="sy0">&gt;</span> 
class Inner
<span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> static_504<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_504<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Outer <span class="sy0">&lt;</span>UINT_32<span class="sy0">,</span>Inner <span class="sy0">&lt;</span>UINT_32<span class="sy0">&gt;&gt;</span> notok<span class="sy0">;</span>
  Outer <span class="sy0">&lt;</span>UINT_32<span class="sy0">,</span> Inner <span class="sy0">&lt;</span>UINT_32<span class="sy0">&gt;</span> <span class="sy0">&gt;</span> ok<span class="sy0">;</span>
  <span class="co1">//... </span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">int</span> main<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  static_504<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="co1">//... </span>
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="co1">//</span>
<span class="co1">//</span>
<span class="co1">// Copyright (c) 2008 Liverpool Data Research Associates</span>
<span class="co1">//</span>
<span class="co1">//</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_10.12'>10.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s505' name='standard_s505'><div class='standard'><div>505&nbsp;S</div></div></a><div class='headline'>Control variable not declared in for loop.</div></div><p>In declaring the control variable in the for loop, scope of that variable is limited (and is specific) to that for loop. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="co2">#define MAX_SIZE 10U</span>
&nbsp;
<span class="co1">//</span>
<span class="co1">// Standard 505 S : Control variable not declared in for loop.</span>
<span class="co1">// </span>
&nbsp;
<span class="kw4">void</span> static_505<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_505<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_16 loop_var1<span class="sy0">;</span>
&nbsp;
  <span class="kw1">for</span> <span class="br0">&#40;</span>loop_var1 <span class="sy0">=</span> 0U<span class="sy0">;</span> loop_var1 <span class="sy0">&lt;</span> MAX_SIZE<span class="sy0">;</span> loop_var1<span class="sy0">++</span><span class="br0">&#41;</span> <span class="co1">// Not ok </span>
  <span class="br0">&#123;</span>
    <span class="sy0">;</span>
  <span class="br0">&#125;</span>
&nbsp;
  <span class="kw1">for</span> <span class="br0">&#40;</span>UINT_32 loop_var2 <span class="sy0">=</span> 0U<span class="sy0">;</span> loop_var2 <span class="sy0">&lt;</span> MAX_SIZE<span class="sy0">;</span> loop_var2<span class="sy0">++</span><span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">int</span> main<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  static_505<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="co1">//... </span>
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="co1">//</span>
<span class="co1">//</span>
<span class="co1">// Copyright (c) 2008 Liverpool Data Research Associates</span>
<span class="co1">//</span>
<span class="co1">//</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_5.12'>5.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s506' name='standard_s506'><div class='standard'><div>506&nbsp;S</div></div></a><div class='headline'>Use of boolean with relational operator.</div></div><p>Do not use expressions with boolean type as operands to relational operators &lt;, &gt;, &lt;=, and &gt;=. The use of these operators is unlikely to lead to results that match the developer's expectations.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/************************************************************
 * Standard 506 S : Use of boolean with relational operator.
 ************************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_506<span class="br0">&#40;</span> <span class="kw4">const</span> BOOL b1<span class="sy0">,</span>
                 <span class="kw4">const</span> BOOL b2 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>b1 <span class="sy0">&lt;</span> b2<span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant  */</span>
  <span class="br0">&#123;</span>
     <span class="co1">// ... </span>
  <span class="br0">&#125;</span>
  <span class="kw1">else</span>
  <span class="br0">&#123;</span>
    <span class="co1">// ... </span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2008 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_136'>136</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_4-5-1'>4-5-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.10.1'>R.10.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s507' name='standard_s507'><div class='standard'><div>507&nbsp;S</div></div></a><div class='headline'>Explicit cast from integral to floating type.</div></div><p>An explicit floating-point cast applied to a complex expression of integer type may lead to results that are a surprise to the developer. Such expressions are evaluated using integer arithmetic not floating-point.  This standard applies to both static_cast and C-style type casts.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 507 S : Explicit cast from integral to floating type.
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_507<span class="br0">&#40;</span> SINT_32 i1<span class="sy0">,</span> SINT_32 i2<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  FLOAT_32 ff<span class="sy0">;</span>
&nbsp;
  ff <span class="sy0">=</span> static_cast <span class="sy0">&lt;</span> FLOAT_32 <span class="sy0">&gt;</span> <span class="br0">&#40;</span> i1 <span class="sy0">/</span> i2 <span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
  ff <span class="sy0">=</span> <span class="br0">&#40;</span> FLOAT_32 <span class="br0">&#41;</span> <span class="br0">&#40;</span> i1 <span class="sy0">/</span> i2 <span class="br0">&#41;</span><span class="sy0">;</span>             <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2008 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-7'>5-0-7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s508' name='standard_s508'><div class='standard'><div>508&nbsp;S</div></div></a><div class='headline'>Operator &amp; overloaded.</div></div><p>By taking the address of an object of incomplete type, where the complete type contains an overloaded definition of the operator &amp;, behaviour is undefined. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="co1">//</span>
<span class="co1">// Standard 508 S : Operator &amp; overloaded.</span>
<span class="co1">// </span>
&nbsp;
class MyClass<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> befoo<span class="br0">&#40;</span> MyClass <span class="sy0">&amp;</span> mm <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw4">void</span> static_508<span class="br0">&#40;</span> MyClass <span class="sy0">&amp;</span> mm <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> befoo<span class="br0">&#40;</span> MyClass <span class="sy0">&amp;</span> mm <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">&amp;</span>mm<span class="sy0">;</span> <span class="co1">// built-in operator &amp; </span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
class MyClass
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    MyClass <span class="sy0">*</span> operator <span class="sy0">&amp;</span> <span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>  <span class="co1">// Not ok </span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_508<span class="br0">&#40;</span> MyClass <span class="sy0">&amp;</span> mm <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">&amp;</span>mm<span class="sy0">;</span>  <span class="co1">// overloaded operator &amp; </span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">int</span> main<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  MyClass my_c<span class="sy0">;</span>
  <span class="co1">//... </span>
  befoo<span class="br0">&#40;</span> my_c <span class="br0">&#41;</span><span class="sy0">;</span>
  static_508<span class="br0">&#40;</span> my_c <span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="co1">//... </span>
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="co1">//</span>
<span class="co1">//</span>
<span class="co1">// Copyright (c) 2008 Liverpool Data Research Associates</span>
<span class="co1">//</span>
<span class="co1">//</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_8.1'>8.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-3-3'>5-3-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s509' name='standard_s509'><div class='standard'><div>509&nbsp;S</div></div></a><div class='headline'>goto label is backwards.</div></div><p>A backwards jump from a goto to a label can create iterations. The well defined iteration statements shall be used in preference. The use of goto statements is restricted to forward jumps to a label inside the same procedure. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
&nbsp;
<span class="co1">//</span>
<span class="co1">// Standard 509 S : goto label is backwards.</span>
<span class="co1">// </span>
&nbsp;
<span class="kw4">void</span> static_509<span class="br0">&#40;</span> <span class="kw4">const</span> UINT_32 p1 <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_509<span class="br0">&#40;</span> <span class="kw4">const</span> UINT_32 p1 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 xx <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
  <span class="co1">//... </span>
lab1<span class="sy0">:</span>
  xx<span class="sy0">++;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span> p1 <span class="sy0">&gt;</span> xx <span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="kw1">goto</span> lab2<span class="sy0">;</span>  <span class="co1">// Ok </span>
  <span class="br0">&#125;</span>
  <span class="kw1">else</span>
  <span class="br0">&#123;</span>
    <span class="kw1">goto</span> lab1<span class="sy0">;</span>  <span class="co1">// Not ok - results in an iteration </span>
  <span class="br0">&#125;</span>
lab2<span class="sy0">:</span>
  xx<span class="sy0">++;</span>
  <span class="co1">//... </span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">int</span> main<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="co1">//... </span>
  static_509<span class="br0">&#40;</span> 42U <span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="co1">//... </span>
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="co1">//</span>
<span class="co1">//</span>
<span class="co1">// Copyright (c) 2008 Liverpool Data Research Associates</span>
<span class="co1">//</span>
<span class="co1">//</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-6-2'>6-6-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.15.2'>R.15.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m3.1.2'>M3.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s510' name='standard_s510'><div class='standard'><div>510&nbsp;S</div></div></a><div class='headline'>Loop counter increment and operator defect.</div></div><p>Loop counters that are incremented such that values may be skipped should not be tested with == or !=. The loop may not terminate. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="co2">#define MAX_SIZE 10U</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 510 S : Loop counter increment and operator defect.
 *************************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_510<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">for</span> <span class="br0">&#40;</span> UINT_32 loop_var <span class="sy0">=</span> 1U<span class="sy0">;</span> 
        loop_var <span class="sy0">!=</span> MAX_SIZE<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
        loop_var <span class="sy0">+=</span>2U <span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2008 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.3'>9.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-5-2'>6-5-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r3.5.3'>R3.5.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s511' name='standard_s511'><div class='standard'><div>511&nbsp;S</div></div></a><div class='headline'>Jump into nested block.</div></div><p>The use of goto is restricted such that any label referenced by a goto should be in the same block or in an outer block that encloses the goto statement. Non compliance leads to complicated flow graphs and code that is difficult to maintain.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************
 * Standard 511 S : Jump into nested block.
 *****************************************/</span>
&nbsp;
<span class="co2">#define MAX_SIZE 512</span>
&nbsp;
<span class="kw4">void</span> static_511<span class="br0">&#40;</span> UINT_32 p1 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 local <span class="sy0">=</span> 0U<span class="sy0">;</span>
  UINT_32 action <span class="sy0">=</span> 0U<span class="sy0">;</span>
&nbsp;
  <span class="kw1">goto</span> lab1<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
  <span class="kw1">for</span><span class="br0">&#40;</span>local<span class="sy0">;</span> local <span class="sy0">&lt;</span> MAX_SIZE<span class="sy0">;</span> local<span class="sy0">++</span><span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
lab1<span class="sy0">:</span>
    action <span class="sy0">+=</span> p1<span class="sy0">;</span>
  <span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2008 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-6-1'>6-6-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.15.3'>R.15.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m3.1.2'>M3.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s512' name='standard_s512'><div class='standard'><div>512&nbsp;S</div></div></a><div class='headline'>Use of unnamed namespace.</div></div><p>The use of unnamed namespaces in header files is not permitted. An unnamed namespace shall be unique within each translation unit. By declaring an entity in a header file within an unnamed namespace, that entity may span translation units but will not be common, which the developer may not expect.</p>
<div class='title'>Example</div>
<p>Static_512.h</p>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*********************************************
 * Standard 512 S : Use of unnamed namespace.
 *********************************************/</span>
&nbsp;
namespace
<span class="br0">&#123;</span>
  <span class="kw2">extern</span> UINT_32 stat_dur<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2008 Liverpool Data Research Associates
 *
 */</span></pre><p>Static_512.cpp</p>
<pre class="code c++"><span class="co2">#include &quot;Static_512.h&quot;</span>
&nbsp;
<span class="coMULTI">/*********************************************
 * Standard 512 S : Use of unnamed namespace.
 *********************************************/</span>
&nbsp;
namespace
<span class="br0">&#123;</span>
  UINT_32 stat_dur<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> static_512<span class="br0">&#40;</span> UINT_32 p1 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  stat_dur <span class="sy0">=</span> p1<span class="sy0">;</span>  <span class="co1">// Only visible within this translation unit...</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2008 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_7-3-3'>7-3-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s513' name='standard_s513'><div class='standard'><div>513&nbsp;S</div></div></a><div class='headline'>Use of using directive.</div></div><p>Using-declarations or fully qualified names shall be adopted in favour of using-directives, as the latter adds additional scopes. Further lookups lead to the introduction of possibly unnecessary and potentially confusing extra identifiers. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
&nbsp;
<span class="co1">//</span>
<span class="co1">// Standard 513 S : Use of using directive.</span>
<span class="co1">// </span>
&nbsp;
namespace NS1
<span class="br0">&#123;</span>
  UINT_32 a1<span class="sy0">;</span>
  UINT_32 b1<span class="sy0">;</span>
  UINT_32 c1<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
using namespace NS1<span class="sy0">;</span>  <span class="co1">// Not ok - using directive. </span>
&nbsp;
namespace NS2
<span class="br0">&#123;</span>
  UINT_32 a2<span class="sy0">;</span>
  UINT_32 b2<span class="sy0">;</span>
  UINT_32 c2<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
using NS2<span class="sy0">::</span><span class="me2">b2</span><span class="sy0">;</span>        <span class="co1">// Ok - using declarative. </span>
&nbsp;
namespace NS3
<span class="br0">&#123;</span>
  UINT_32 a3<span class="sy0">;</span>
  UINT_32 b3<span class="sy0">;</span>
  UINT_32 c3<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_513<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">++</span>a1<span class="sy0">;</span>               <span class="co1">// b1, c1 also visible but not required. </span>
  <span class="sy0">++</span>b2<span class="sy0">;</span>
  <span class="sy0">++</span>NS3<span class="sy0">::</span><span class="me2">c3</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">int</span> main<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="co1">//... </span>
  static_513<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="co1">//... </span>
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="co1">//</span>
<span class="co1">//</span>
<span class="co1">// Copyright (c) 2008 Liverpool Data Research Associates</span>
<span class="co1">//</span>
<span class="co1">//</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_8.2.3'>8.2.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_7-3-4'>7-3-4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s514' name='standard_s514'><div class='standard'><div>514&nbsp;S</div></div></a><div class='headline'>Using directive or declaration in header.</div></div><p>The placement of using-directives and using-declarations shall be avoided in header files, so that the behaviour of a program cannot be affected by the order in which header files are included.</p>
<div class='title'>Example</div>
<p>Static_514_1.h</p>
<pre class="code c++"><span class="coMULTI">/***********************************************************
 * Standard 514 S : Using directive or declaration in header.
 ************************************************************/</span>
&nbsp;
<span class="kw4">void</span> func_514<span class="br0">&#40;</span> UINT_32 <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
namespace NS1
<span class="br0">&#123;</span>
  <span class="kw4">void</span> func_514<span class="br0">&#40;</span> UCHAR <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2008 Liverpool Data Research Associates
 *
 *</span></pre><p>Static_514_2.h</p>
<pre class="code c++"><span class="coMULTI">/***********************************************************
 * Standard 514 S : Using directive or declaration in header.
 ************************************************************/</span>
&nbsp;
namespace NS1
<span class="br0">&#123;</span>
<span class="br0">&#125;</span>
&nbsp;
using namespace NS1<span class="sy0">;</span>  <span class="coMULTI">/* not compliant - using directive. */</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2008 Liverpool Data Research Associates
 *
 */</span></pre><p>Static_514.cpp</p>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="co2">#include &quot;Static_514_2.h&quot;</span>
<span class="co2">#include &quot;Static_514_1.h&quot;</span>
&nbsp;
<span class="coMULTI">/***********************************************************
 * Standard 514 S : Using directive or declaration in header.
 ************************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_514<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  func_514<span class="br0">&#40;</span> 0U <span class="br0">&#41;</span><span class="sy0">;</span>  <span class="co1">// Calls UCHAR version, but if the order of the</span>
                   <span class="co1">// header files switched then UINT_32 version called.</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2008 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_8.2.4'>8.2.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_7-3-6'>7-3-6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s515' name='standard_s515'><div class='standard'><div>515&nbsp;S</div></div></a><div class='headline'>More than one variable in declaration.</div></div><p>Variable declarations shall not be combined with other declarators. Multiple declarators may lead to confusion regarding the type of an identifier.</p>
<p>Note that MISRA-C++:2008 checking needs to be enabled in order for this violation to be detected, either via selection of the MISRA-C++:2008 programming model or by setting the modifier <a href='standard_flags.htm#flag_331'>331</a> to 1 in the cppreport.dat file. (TBmisra license permitting).  <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/************************************************************
 * Standard 515 S : More than one variable in declaration.
 ************************************************************/</span> 
&nbsp;
UINT_16 <span class="sy0">*</span> a1<span class="sy0">,</span>          <span class="coMULTI">/* not compliant */</span>
          b1 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> static_515<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 <span class="sy0">*</span> local <span class="sy0">=</span> NULL<span class="sy0">;</span>
&nbsp;
  local <span class="sy0">=</span> <span class="br0">&#40;</span>UINT_32 <span class="sy0">*</span><span class="br0">&#41;</span>b1<span class="sy0">;</span>  <span class="co1">// Developer mistakenly believes b1 to be </span>
                          <span class="co1">// a pointer type? </span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2008 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_8-0-1'>8-0-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_331'>331</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s516' name='standard_s516'><div class='standard'><div>516&nbsp;S</div></div></a><div class='headline'>Assembler does not use asm declaration.</div></div><p>Assembly code must be embedded using the standard asm keyword. Parameters to asm are still implementation-dependent, but it at least allows a consistent mechanism and aids portability. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="co1">//</span>
<span class="co1">// Standard 516 S : Assembler does not use asm declaration.</span>
<span class="co1">// </span>
&nbsp;
<span class="kw4">void</span> static_516_ok<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw4">void</span> static_516_notok<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_516_ok<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  asm<span class="br0">&#40;</span><span class="st0">&quot;NOP&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_516_notok<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
<span class="co2">#pragma asm</span>
  <span class="st0">&quot;NOP&quot;</span>
<span class="co2">#pragma endasm</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">int</span> main<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="co1">//... </span>
  static_516_ok<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="co1">//... </span>
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="co1">//</span>
<span class="co1">//</span>
<span class="co1">// Copyright (c) 2008 Liverpool Data Research Associates</span>
<span class="co1">//</span>
<span class="co1">//</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_7-4-2'>7-4-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s517' name='standard_s517'><div class='standard'><div>517&nbsp;S</div></div></a><div class='headline'>At least one declaration in global namespace.</div></div><p>The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations. The use of namespaces reduces the names found during lookup, reducing the chance of accidentally using an identifier in error.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/****************************************************************
 * Standard 517 S : At least one declaration in global namespace.
 *****************************************************************/</span>
&nbsp;
UINT_32 global<span class="sy0">;</span>              <span class="coMULTI">/* not compliant */</span>
&nbsp;
&nbsp;
namespace NS1
<span class="br0">&#123;</span>
  UINT_32 stat_dur<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_517<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2008 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_7-3-1'>7-3-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_331'>331</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s518' name='standard_s518'><div class='standard'><div>518&nbsp;S</div></div></a><div class='headline'>Using declaration is straddled by declarations.</div></div><p>A using-declaration shall not be straddled by multiple declarations for an identifier in the same namespace. Subsequent declarations after the using-declaration are not included when lookup occurs, which the developer may not expect. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="co1">//</span>
<span class="co1">// Standard 518 S : Using declaration is straddled by declarations.</span>
<span class="co1">// </span>
&nbsp;
<span class="kw4">void</span> static_518<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
namespace NS1
<span class="br0">&#123;</span>
  <span class="kw4">void</span> func_518<span class="br0">&#40;</span> UINT_16 <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
using NS1<span class="sy0">::</span><span class="me2">func_518</span><span class="sy0">;</span>
&nbsp;
namespace NS1
<span class="br0">&#123;</span>
  <span class="kw4">void</span> func_518<span class="br0">&#40;</span> UINT_32 <span class="br0">&#41;</span><span class="sy0">;</span>  <span class="co1">// Not ok. </span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_518<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  func_518<span class="br0">&#40;</span> 0U <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">int</span> main<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="co1">//... </span>
  static_518<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="co1">//... </span>
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="co1">//</span>
<span class="co1">//</span>
<span class="co1">// Copyright (c) 2008 Liverpool Data Research Associates</span>
<span class="co1">//</span>
<span class="co1">//</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_7-3-5'>7-3-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s519' name='standard_s519'><div class='standard'><div>519&nbsp;S</div></div></a><div class='headline'>Return of reference parameter.</div></div><p>A function shall not return a reference or a pointer to a parameter that is passed by reference. It is implementation-defined whether or not a temporary object is created for the parameter. However, if a local copy is used, returning a reference or a pointer leads to undefined behaviour.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**************************************************
 * Standard 519 S : Return of reference parameter.
 **************************************************/</span>
&nbsp;
UINT_32 <span class="sy0">&amp;</span> static_519<span class="br0">&#40;</span> UINT_32 <span class="sy0">&amp;</span> p1 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">return</span> <span class="br0">&#40;</span> p1 <span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">int</span> main<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 xx<span class="sy0">;</span>
  UINT_32 yy<span class="sy0">;</span>
&nbsp;
  yy <span class="sy0">=</span> static_519<span class="br0">&#40;</span>xx<span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="co1">//... </span>
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2008 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_4.11'>4.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_112'>112</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_7-5-3'>7-5-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s520' name='standard_s520'><div class='standard'><div>520&nbsp;S</div></div></a><div class='headline'>Bit field is not bool or explicit integral.</div></div><p>Explicitly signed or unsigned integrals, or bool, shall be used for bit-fields. Using plain integer or an enumerated type is implementation-defined with regards to the underlying type representation as signed or unsigned.</p>
<p>This standard is only available when modifier <a href='standard_flags.htm#flag_331'>331</a> or <a href='standard_flags.htm#flag_350'>350</a> is set to 1 in the c/cppreport.dat file. (TBmisra license permitting).  <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.  </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/****************************************************************
 * Standard 520 S : Bit field is not bool or explicit integral.
 *****************************************************************/</span>
&nbsp;
<span class="kw4">struct</span> S
  <span class="br0">&#123;</span>
    <span class="kw4">int</span> xx <span class="sy0">:</span> <span class="nu0">2</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> static_520<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">struct</span> S st<span class="sy0">;</span>
  <span class="co1">//...</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2008 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_9-6-2'>9-6-2</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_9-6-3'>9-6-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_331'>331</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.6.1'>R.6.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_350'>350</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s521' name='standard_s521'><div class='standard'><div>521&nbsp;S</div></div></a><div class='headline'>Class derived from virtual base class.</div></div><p>The use  of classes that are derived from virtual base classes can lead to unexpected behaviour. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_521<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 521 S : Class derived from virtual base class.
 *******************************************************************/</span> 
&nbsp;
class base521
<span class="br0">&#123;</span>
   <span class="kw4">void</span> proc<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  private<span class="sy0">:</span>
   SINT_32 ff<span class="sy0">;</span>
&nbsp;
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class deriv521<span class="sy0">:</span> virtual base521 <span class="coMULTI">/* not compliant */</span> 
<span class="br0">&#123;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_521<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
  <span class="sy0">;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_10-1-1'>10-1-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s522' name='standard_s522'><div class='standard'><div>522&nbsp;S</div></div></a><div class='headline'>Public assign operator in abstract class.</div></div><p>The copy assignment operator shall not be declared public in an abstract class, as it results in only the base sub-objects being copied.  This can lead to unexpected behaviour. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_522<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 522 S : Public assign operator in abstract class.
 *******************************************************************/</span> 
class c522
<span class="br0">&#123;</span>
   public<span class="sy0">:</span>
   c522 <span class="sy0">&amp;</span> operator <span class="sy0">=</span> <span class="br0">&#40;</span> c522 <span class="sy0">&amp;</span> xx <span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span> 
   virtual <span class="kw4">void</span> proc<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_522 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
  <span class="sy0">;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.3.14'>3.3.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_12-8-2'>12-8-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s523' name='standard_s523'><div class='standard'><div>523&nbsp;S</div></div></a><div class='headline'>Exception type is pointer.</div></div><p>If a pointer object to dynamically created memory is thrown, it may be unclear which function is then responsible for destroying it. To avoid this problem, exceptions should never be thrown as pointers. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_523<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 523 S : Exception type is pointer.
 *******************************************************************/</span> 
class c523
<span class="br0">&#123;</span>
   SINT_32 ff<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_523<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
  c523 ac523<span class="sy0">;</span>
  c523 <span class="sy0">*</span> ptr <span class="sy0">=</span> <span class="sy0">&amp;</span> ac523<span class="sy0">;</span>
  try <span class="br0">&#123;</span>
     throw <span class="br0">&#40;</span>ptr<span class="br0">&#41;</span><span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
  <span class="br0">&#125;</span>
  catch <span class="br0">&#40;</span> c523 <span class="sy0">*</span> pp <span class="br0">&#41;</span> <span class="br0">&#123;</span>
  <span class="br0">&#125;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_15-0-2'>15-0-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s524' name='standard_s524'><div class='standard'><div>524&nbsp;S</div></div></a><div class='headline'>Jump into try or catch statement.</div></div><p>A jump into a try or catch statement is illegal in C++. However, not all compilers will issue an error. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_524<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 524 S : Jump into try or catch statement.
 *******************************************************************/</span> 
&nbsp;
<span class="co1">// note that this problem is usually caught by a compiler. </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_524<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
  SINT_32 aa <span class="sy0">=</span> <span class="nu0">7</span><span class="sy0">;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span> aa <span class="sy0">==</span> <span class="nu0">0</span> <span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="kw1">goto</span> l1<span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span> 
  <span class="br0">&#125;</span>
  try <span class="br0">&#123;</span>
    SINT_32 ss <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
    l1<span class="sy0">:</span> ss <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span> 
  <span class="br0">&#125;</span>
  catch<span class="br0">&#40;</span>...<span class="br0">&#41;</span><span class="br0">&#123;</span>
  <span class="br0">&#125;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_15-0-3'>15-0-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_331'>331</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s525' name='standard_s525'><div class='standard'><div>525&nbsp;S</div></div></a><div class='headline'>throw with explicit NULL.</div></div><p>throw(NULL) is always caught by an integer handler. Developers might expect it to be caught by a pointer handler. An explicit cast on NULL to a pointer should be used. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_525<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 525 S : throw with explicit NULL.
 *******************************************************************/</span> 
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_525<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
  try <span class="br0">&#123;</span>
     throw<span class="br0">&#40;</span> NULL <span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span> 
  <span class="br0">&#125;</span>
  catch<span class="br0">&#40;</span>SINT_32 <span class="sy0">*</span> pp<span class="br0">&#41;</span> <span class="br0">&#123;</span>
  <span class="br0">&#125;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_15-1-2'>15-1-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s526' name='standard_s526'><div class='standard'><div>526&nbsp;S</div></div></a><div class='headline'>Empty throw is not in catch statement.</div></div><p>An empty throw (throw;) shall only be used in a catch statement, otherwise the behaviour of the program is dependent on the implementation. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_526<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 526 S : Empty throw is not in catch statement.
 *******************************************************************/</span> 
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_526<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp;
  throw<span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_15-1-3'>15-1-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s527' name='standard_s527'><div class='standard'><div>527&nbsp;S</div></div></a><div class='headline'>No master exception handler.</div></div><p>A master exception handler should exist that catches all unhandled exceptions. Otherwise, the behaviour of the program is dependent on the implementation. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_527<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 527 S : No master exception handler.
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">int</span> main <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
  <span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span> 
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_248'>248</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_15-3-2'>15-3-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s528' name='standard_s528'><div class='standard'><div>528&nbsp;S</div></div></a><div class='headline'>Base class constructor omitted (added by Testbed).</div></div><p>All constructors of a class should explicitly call a constructor for its immediate base classes and virtual base classes. This can lead to unexpected behaviour as it may not be obvious which constructors are used. Testbed adds the required base class constructors. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 528 S : Base class constructor omitted (added by Testbed).
 *******************************************************************/</span> 
&nbsp;
  class base528 <span class="br0">&#123;</span>
     public<span class="sy0">:</span>
  <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
  class no_base_ctor_528<span class="sy0">:</span> base528 <span class="br0">&#123;</span>
     public<span class="sy0">:</span>
     no_base_ctor_528<span class="br0">&#40;</span><span class="br0">&#41;</span>    <span class="coMULTI">/* not compliant */</span> 
     <span class="br0">&#123;</span>
     <span class="br0">&#125;</span>
&nbsp;
  <span class="br0">&#125;</span> <span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_528<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  no_base_ctor_528 a528<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_12-1-2'>12-1-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s529' name='standard_s529'><div class='standard'><div>529&nbsp;S</div></div></a><div class='headline'>Static member initialised/assigned in constructor.</div></div><p>Static members shall not be changed in constructors. Otherwise the behaviour of the program is dependent on the implementation. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 529 S : Static member initialised/assigned in constructor.
 *******************************************************************/</span> 
&nbsp;
class  cl529 <span class="br0">&#123;</span>
   public<span class="sy0">:</span>
   cl529<span class="br0">&#40;</span><span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      ff529 <span class="sy0">=</span> <span class="nu0">7</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span> 
   <span class="br0">&#125;</span>
   private<span class="sy0">:</span>
   <span class="kw4">static</span> SINT_16 ff529<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_529<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  cl529 a529<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_12-8-1'>12-8-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s530' name='standard_s530'><div class='standard'><div>530&nbsp;S</div></div></a><div class='headline'>NULL used in integer context.</div></div><p>NULL has the value 0, which is both an integer and the value for a null pointer. It is recommended that NULL be used as the null pointer constant and 0 for the integer zero. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &lt;stdlib.h&gt; </span>
<span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_530<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 530 S : NULL used in integer context.
 *******************************************************************/</span> 
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_530<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
  UINT_32 xx <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
  <span class="kw1">if</span><span class="br0">&#40;</span> xx <span class="sy0">==</span> NULL <span class="br0">&#41;</span><span class="br0">&#123;</span><span class="sy0">;</span><span class="br0">&#125;</span>   <span class="coMULTI">/* not compliant */</span> 
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_4-10-1'>4-10-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m4.6.1'>M4.6.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s531' name='standard_s531'><div class='standard'><div>531&nbsp;S</div></div></a><div class='headline'>Literal zero used in pointer context.</div></div><p>The literal value 0 is both an integer and the value for a null pointer. It is recommended that NULL be used as the null pointer constant and 0 for the integer zero.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &lt;stdlib.h&gt; </span>
<span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 531 S : Literal zero used in pointer context.
 *******************************************************************/</span> 
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_531<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 <span class="sy0">*</span> pxx <span class="sy0">=</span> NULL <span class="sy0">;</span>
  <span class="kw1">if</span><span class="br0">&#40;</span> pxx <span class="sy0">==</span> <span class="nu0">0</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span><span class="sy0">;</span><span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_253'>253</a>, <a href='cwe_model.htm#rule_cwe_398'>398</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_4-10-2'>4-10-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.11.9'>R.11.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m4.6.1'>M4.6.1</a>, <a href='sec-c_model.htm#rule_sec-c_r2.7.3'>R2.7.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s532' name='standard_s532'><div class='standard'><div>532&nbsp;S</div></div></a><div class='headline'>No copy ctor for templated copy ctor.</div></div><p>There should be an explicit copy constructor if a template copy constructor is present, otherwise a default constructor is generated by the compiler.  The programmer may be surprised when the default constructor is called in preference to the one explicitly supplied. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_532<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 532 S : No copy ctor for templated copy ctor.
 *******************************************************************/</span> 
&nbsp;
class A
<span class="br0">&#123;</span>
public<span class="sy0">:</span>
   A <span class="br0">&#40;</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
   <span class="co1">// A ( A const &amp; rhs ); // #1 - implicitly generated copy constructor </span>
&nbsp;
   template <span class="sy0">&lt;</span>typename T<span class="sy0">&gt;</span> 
   A <span class="br0">&#40;</span> T <span class="kw4">const</span> <span class="sy0">&amp;</span> rhs <span class="br0">&#41;</span>     <span class="co1">// #2 </span>
   <span class="sy0">:</span> i <span class="br0">&#40;</span> new SINT_32 <span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
     <span class="sy0">*</span>i <span class="sy0">=</span> <span class="sy0">*</span>rhs.<span class="me1">i</span><span class="sy0">;</span>
   <span class="br0">&#125;</span>
&nbsp;
private<span class="sy0">:</span>
   SINT_32 <span class="sy0">*</span> i<span class="sy0">;</span>            <span class="co1">// Member requires deep copy </span>
<span class="br0">&#125;</span><span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
&nbsp;
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_532<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
  <span class="sy0">;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_4.2'>4.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_14-5-2'>14-5-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s533' name='standard_s533'><div class='standard'><div>533&nbsp;S</div></div></a><div class='headline'>No assgnmt optor for templated assgmnt op.</div></div><p>There shall be an explicit copy assignment operator if a template assignment operator is present. Otherwise, a default copy assignment operator is generated by the compiler. The programmer may be surprised when the default constructor is called in preference to the one explicitly supplied. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_533<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 533 S : No assgnmt optor for templated assgmnt op.
 *******************************************************************/</span> 
&nbsp;
class A
<span class="br0">&#123;</span>
public<span class="sy0">:</span>
   <span class="co1">// A &amp; operator= ( A const &amp; rhs )   #1 - implicitly generated </span>
   <span class="co1">// { </span>
   <span class="co1">//    i = rhs.i; </span>
   <span class="co1">//    return *this; </span>
   <span class="co1">//  } </span>
   template <span class="sy0">&lt;</span>typename T<span class="sy0">&gt;</span> 
   T <span class="sy0">&amp;</span> operator<span class="sy0">=</span> <span class="br0">&#40;</span> T <span class="kw4">const</span> <span class="sy0">&amp;</span> rhs <span class="br0">&#41;</span>   <span class="co1">// #2 </span>
   <span class="br0">&#123;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span> this <span class="sy0">!=</span> <span class="sy0">&amp;</span> rhs <span class="br0">&#41;</span> <span class="br0">&#123;</span>
         delete i<span class="sy0">;</span>
         i <span class="sy0">=</span> new SINT_32<span class="sy0">;</span>
         <span class="sy0">*</span>i <span class="sy0">=</span> <span class="sy0">*</span>rhs.<span class="me1">i</span><span class="sy0">;</span>
      <span class="br0">&#125;</span>
   <span class="kw1">return</span> <span class="sy0">*</span>this<span class="sy0">;</span>
   <span class="br0">&#125;</span>
&nbsp;
private<span class="sy0">:</span>
   SINT_32 <span class="sy0">*</span> i<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span> <span class="co1">// not compliant </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_533<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_4.2'>4.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_14-5-3'>14-5-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s534' name='standard_s534'><div class='standard'><div>534&nbsp;S</div></div></a><div class='headline'>Array has decayed to pointer.</div></div><p>Function parameters declared with a pointer type should not be indexed as if they were arrays.  Arrays should be passed by reference.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**************************************************
 * Standard 534 S : Array has decayed to pointer.
 **************************************************/</span>
&nbsp;
SINT_32 static_534<span class="br0">&#40;</span> SINT_32 <span class="sy0">*</span>ptr<span class="sy0">,</span> SINT_32 <span class="br0">&#40;</span> <span class="sy0">&amp;</span>ref <span class="br0">&#41;</span><span class="br0">&#91;</span> <span class="nu0">10</span> <span class="br0">&#93;</span>   <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  ptr<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="nu0">9</span><span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span>
  ref<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="nu0">9</span><span class="sy0">;</span>    <span class="coMULTI">/* compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-2-12'>5-2-12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s535' name='standard_s535'><div class='standard'><div>535&nbsp;S</div></div></a><div class='headline'>Binary bitwise op with different types.</div></div><p>Both operands of binary bitwise operators should have the same (underlying) type. This prevents confusion over how many bits are used. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_535<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 535 S : Binary bitwise op with different types.
 *******************************************************************/</span> 
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_535<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 i535 <span class="sy0">=</span> 7U<span class="sy0">;</span>
  UINT_16 j535 <span class="sy0">=</span> 9U<span class="sy0">;</span>
  i535 <span class="sy0">^=</span> j535<span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-20'>5-0-20</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s536' name='standard_s536'><div class='standard'><div>536&nbsp;S</div></div></a><div class='headline'>Enum type in bit field.</div></div><p>Enumerated types shall not be used as a bit-field type as the C++ standard does not specify whether the underlying representation is signed or unsigned. </p>
<p>Note that MISRA-C++:2008 checking needs to be enabled in order for this violation to be detected, either via selection of the MISRA-C++:2008 programming model or by setting the modifier <a href='standard_flags.htm#flag_331'>331</a> to 1 in the c/cppreport.dat file. (TBmisra license permitting).  <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 536 S : Enum type in bit field.
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">typedef</span> <span class="kw2">enum</span> <span class="br0">&#123;</span> aa<span class="sy0">,</span> bb <span class="br0">&#125;</span> enum_536<span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_536<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">struct</span> tag
  <span class="br0">&#123;</span>
    enum_536 a<span class="sy0">:</span><span class="nu0">4</span><span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_9-6-3'>9-6-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_331'>331</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s537' name='standard_s537'><div class='standard'><div>537&nbsp;S</div></div></a><div class='headline'>Extra loop control variable changed.</div></div><p>A loop control variable is taken to be any variable that is initialised in the first expression of a for statement or altered in the third expression. Multiple loop control variables can make the code difficult to understand. </p>
<p>A loop control variable shall not be modified in the second expression of a for loop. Nor shall a loop control variable be modified in the third expression of a for loop, unless it is incremented or decremented.  This reduces the risk of a non-terminating loop.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 537 S : Extra loop control variable changed.
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> UINT_32 test <span class="br0">&#40;</span> UINT_32 <span class="sy0">*</span>v <span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      <span class="sy0">*</span>v <span class="sy0">=</span> <span class="sy0">*</span>v <span class="sy0">+</span> 1U<span class="sy0">;</span>
      <span class="kw1">return</span> <span class="br0">&#40;</span> <span class="sy0">*</span>v <span class="sy0">&lt;</span> 10U <span class="br0">&#41;</span><span class="sy0">;</span>
   <span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_537<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
 UINT_32 bool_a <span class="sy0">=</span> FALSE<span class="sy0">;</span>
 UINT_32 x<span class="sy0">;</span>
 <span class="kw1">for</span> <span class="br0">&#40;</span> x <span class="sy0">=</span> 0U<span class="sy0">;</span>
       <span class="br0">&#40;</span> x <span class="sy0">&lt;</span> 10U <span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> test <span class="br0">&#40;</span> <span class="sy0">&amp;</span> bool_a <span class="br0">&#41;</span><span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span> 
       <span class="sy0">++</span>x <span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.3'>9.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-5-5'>6-5-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s538' name='standard_s538'><div class='standard'><div>538&nbsp;S</div></div></a><div class='headline'>Template class/function/member not instantiated.</div></div><p>Class, function and member templates should always be instantiated. A missing instantiation may indicate a problem with the code. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_538<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 538 S : Template class/function/member not instantiated.
 *******************************************************************/</span> 
template <span class="sy0">&lt;</span>typename T<span class="sy0">&gt;</span> class cl538<span class="br0">&#123;</span>
   <span class="kw4">void</span> proc538 <span class="br0">&#40;</span><span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
   <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_538<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
    <span class="sy0">;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_14-7-1'>14-7-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s539' name='standard_s539'><div class='standard'><div>539&nbsp;S</div></div></a><div class='headline'>Specialised overloaded templated function.</div></div><p>Overloaded function templates shall not be explicitly specialised. The specializations occur after overload resolution and may be contrary to the developer's expectations.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 539 S : Specialised overloaded templated function.
 *******************************************************************/</span> 
template <span class="sy0">&lt;</span>typename T<span class="sy0">&gt;</span> 
     <span class="kw4">void</span> proc<span class="br0">&#40;</span>T p1<span class="br0">&#41;</span><span class="br0">&#123;</span><span class="br0">&#125;</span>      <span class="co1">// function 1 </span>
template <span class="sy0">&lt;</span>typename T<span class="sy0">&gt;</span> 
     <span class="kw4">void</span> proc<span class="br0">&#40;</span>T <span class="sy0">*</span>p1<span class="br0">&#41;</span><span class="br0">&#123;</span><span class="br0">&#125;</span>     <span class="co1">// function 2 </span>
&nbsp;
<span class="co1">// This is a specialisation of function 1, for T == SINT_32* </span>
template <span class="sy0">&lt;&gt;</span> 
     <span class="kw4">void</span> proc <span class="sy0">&lt;</span>SINT_32<span class="sy0">&gt;</span> <span class="br0">&#40;</span>SINT_32 p2<span class="br0">&#41;</span><span class="br0">&#123;</span><span class="br0">&#125;</span>  <span class="coMULTI">/* not compliant */</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_539<span class="br0">&#40;</span> SINT_32 <span class="sy0">*</span>value <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  proc<span class="br0">&#40;</span>value<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="co1">// Calls function 2 </span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_14-8-1'>14-8-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s540' name='standard_s540'><div class='standard'><div>540&nbsp;S</div></div></a><div class='headline'>Cast from pointer to void to pointer.</div></div><p>A cast from a pointer to void to a pointer shall not be performed. This may lead to unspecified behaviour. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_540<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 540 S : Cast from pointer to void to pointer.
 *******************************************************************/</span> 
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_540<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">void</span> <span class="sy0">*</span> pv <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
  UINT_16 <span class="sy0">*</span> pu<span class="sy0">;</span>
  pu <span class="sy0">=</span> reinterpret_cast <span class="sy0">&lt;</span>UINT_16 <span class="sy0">*&gt;</span> <span class="br0">&#40;</span>pv<span class="br0">&#41;</span><span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp36-c'>EXP36-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_588'>588</a>, <a href='cwe_model.htm#rule_cwe_737'>737</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-2-8'>5-2-8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s541' name='standard_s541'><div class='standard'><div>541&nbsp;S</div></div></a><div class='headline'>Catch-all is not last catch.</div></div><p>An ellipsis (catch-all) handler shall occur after any other handlers. Otherwise, any handlers after the catch-all handler will never be executed. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co1">// Note this may not always compile. </span>
<span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_541<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 541 S : Catch-all is not last catch.
 *******************************************************************/</span> 
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_541<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  try <span class="br0">&#123;</span>
  <span class="br0">&#125;</span>
  catch <span class="br0">&#40;</span>...<span class="br0">&#41;</span><span class="br0">&#123;</span>  <span class="coMULTI">/* not compliant */</span> 
  <span class="br0">&#125;</span>
  catch<span class="br0">&#40;</span>SINT_32 pp<span class="br0">&#41;</span><span class="br0">&#123;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_15-3-7'>15-3-7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s542' name='standard_s542'><div class='standard'><div>542&nbsp;S</div></div></a><div class='headline'>Extra loop control variable is not bool.</div></div><p>A loop control variable is taken to be any variable that is initialised in the first expression of a for statement or altered in the third expression. Multiple loop control variables can make the code difficult to understand.</p>
<p>This standard permits more than one loop control variable if the extra variable has a boolean type, since such variables are typically used to terminate a loop early.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * Standard 542 S : Extra loop control variable is not bool.
 *****************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_542 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  INT_32 x <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
  INT_32 y <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
  <span class="kw1">for</span> <span class="br0">&#40;</span>x <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>  <span class="br0">&#40;</span>x <span class="sy0">&lt;</span> <span class="nu0">10</span><span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span>y <span class="sy0">!=</span> <span class="nu0">21</span><span class="br0">&#41;</span><span class="sy0">;</span> x<span class="sy0">++,</span> y<span class="sy0">++</span><span class="br0">&#41;</span>
                            <span class="coMULTI">/* not compliant */</span> 
  <span class="br0">&#123;</span>
    <span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.3'>9.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-5-6'>6-5-6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s543' name='standard_s543'><div class='standard'><div>543&nbsp;S</div></div></a><div class='headline'>Virtual base not in diamond hierarchy.</div></div><p>A virtual base shall only be used as the common base class in a diamond hierarchy. This avoids  potentially confusing behaviours. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_543<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 543 S : Virtual base not in diamond hierarchy.
 *******************************************************************/</span> 
class base1 <span class="br0">&#123;</span>
   virtual <span class="kw4">void</span> proc<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class deriv1<span class="sy0">:</span> virtual base1 <span class="br0">&#123;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_543<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_10-1-2'>10-1-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s544' name='standard_s544'><div class='standard'><div>544&nbsp;S</div></div></a><div class='headline'>Member re-declared pure.</div></div><p>A virtual function that is not pure shall not be overridden by a pure virtual function. This may not meet developer's expectations. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_544<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 544 S : Member re-declared pure.
 *******************************************************************/</span> 
class base1 <span class="br0">&#123;</span>
   virtual <span class="kw4">void</span> proc<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
class base2<span class="sy0">:</span> base1 <span class="br0">&#123;</span>
   virtual <span class="kw4">void</span> proc<span class="br0">&#40;</span><span class="br0">&#41;</span>
   <span class="br0">&#123;</span><span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
class base3<span class="sy0">:</span> base2 <span class="br0">&#123;</span>
   virtual <span class="kw4">void</span> proc<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span>  <span class="co1">// not compliant </span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_544<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_10-3-3'>10-3-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s545' name='standard_s545'><div class='standard'><div>545&nbsp;S</div></div></a><div class='headline'>Assignment of overlapping storage.</div></div><p>Assignment between objects that have overlapping storage is undefined and shall not be used. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_545<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 545 S : Assignment of overlapping storage.
 *******************************************************************/</span> 
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_545<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw4">union</span>
   <span class="br0">&#123;</span>
      UINT_16 i<span class="sy0">;</span>
      UINT_32 j<span class="sy0">;</span>
   <span class="br0">&#125;</span> a<span class="sy0">;</span>
&nbsp;
   a.<span class="me1">j</span> <span class="sy0">=</span> 23U<span class="sy0">;</span>
   a.<span class="me1">i</span> <span class="sy0">=</span> a.<span class="me1">j</span><span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a>, <a href='cwe_model.htm#rule_cwe_843'>843</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_18.2'>18.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_0-2-1'>0-2-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_18.2'>18.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.19.1'>R.19.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s546' name='standard_s546'><div class='standard'><div>546&nbsp;S</div></div></a><div class='headline'>Overload resolution could be forward.</div></div><p>The function or operator chosen by the overload resolution shall resolve to a function/operator declared before the template declaration. Otherwise, the behaviour may be contrary to the developer's expectations.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 546 S : Overload resolution could be forward.
 *******************************************************************/</span> 
<span class="kw4">void</span> func <span class="br0">&#40;</span>SINT_32 pp<span class="br0">&#41;</span><span class="br0">&#123;</span><span class="br0">&#125;</span>
&nbsp;
template <span class="sy0">&lt;</span>typename T <span class="sy0">&gt;</span> <span class="kw4">void</span> proc<span class="br0">&#40;</span>T aa <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
     func<span class="br0">&#40;</span>aa<span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">// not compliant </span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> func <span class="br0">&#40;</span>UINT_32 pp<span class="br0">&#41;</span><span class="br0">&#123;</span><span class="br0">&#125;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_546<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_14-6-2'>14-6-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s547' name='standard_s547'><div class='standard'><div>547&nbsp;S</div></div></a><div class='headline'>Base member not qualified.</div></div><p>All names in the dependent base of a class template shall be qualified by using a qualified-id or this. Otherwise, the behaviour may be contrary to the developer's expectations. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 547 S : Base member not qualified.
 *******************************************************************/</span> 
&nbsp;
class base <span class="br0">&#123;</span>
     protected<span class="sy0">:</span>
       INT_32  abf<span class="sy0">;</span>
     <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
class deriv <span class="sy0">:</span> public base <span class="br0">&#123;</span>
      <span class="kw4">void</span> aproc<span class="br0">&#40;</span><span class="br0">&#41;</span>
      <span class="br0">&#123;</span>
         abf <span class="sy0">=</span> <span class="nu0">77</span><span class="sy0">;</span>        <span class="coMULTI">/* not compliant */</span>
         base<span class="sy0">::</span><span class="me2">abf</span> <span class="sy0">=</span> <span class="nu0">79</span><span class="sy0">;</span>  <span class="coMULTI">/* compliant */</span>
         this<span class="sy0">-&gt;</span> abf <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>  <span class="coMULTI">/* compliant */</span>
      <span class="br0">&#125;</span>
   <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_547<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_14-6-1'>14-6-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s548' name='standard_s548'><div class='standard'><div>548&nbsp;S</div></div></a><div class='headline'>Procedure body needs brackets.</div></div><p>The use of curly brackets, { }, around a procedure body is recommended for maintenance purposes. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_548<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 548 S : Procedure body needs brackets.
 *******************************************************************/</span> 
&nbsp;
SINT_32 glob<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> duff_proc<span class="br0">&#40;</span><span class="br0">&#41;</span> try<span class="br0">&#123;</span><span class="br0">&#125;</span>catch<span class="br0">&#40;</span>...<span class="br0">&#41;</span><span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">;</span>     <span class="coMULTI">/* not compliant */</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_548<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   duff_proc<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s549' name='standard_s549'><div class='standard'><div>549&nbsp;S</div></div></a><div class='headline'>Catch in c'tor/d'tor references nonstatic member.</div></div><p>Exception handlers in a constructor or destructor shall not reference non-static members from the same class or its bases.  This leads to undefined behaviour.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 549 S : Catch in c'tor/d'tor references nonstatic member.
 *******************************************************************/</span> 
&nbsp;
class aclass <span class="br0">&#123;</span>
  public<span class="sy0">:</span>
   SINT_32  aff<span class="sy0">;</span>
   aclass<span class="br0">&#40;</span><span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      try<span class="br0">&#123;</span> <span class="br0">&#125;</span>
      catch<span class="br0">&#40;</span>...<span class="br0">&#41;</span><span class="br0">&#123;</span> aff <span class="sy0">=</span> <span class="nu0">9</span><span class="sy0">;</span> bff <span class="sy0">=</span> <span class="nu0">7</span><span class="sy0">;</span> <span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span> 
   <span class="br0">&#125;</span>
  private<span class="sy0">:</span>
   SINT_32  bff<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_549<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_15-3-3'>15-3-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s550' name='standard_s550'><div class='standard'><div>550&nbsp;S</div></div></a><div class='headline'>Unsuffixed hex or octal is unsigned, add U.</div></div><p>A U suffix shall be added to unsigned hexadecimal and octal literals.  The type of hexadecimal and octal literals depends on the implemented integer size. The addition of the suffix clarifies the type to the reader. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 550 S : Unsuffixed hex or octal is unsigned, add U.
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_550<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
  UINT_32 xx<span class="sy0">;</span>
  xx <span class="sy0">=</span> <span class="nu12">0x8ff7ffff</span>  <span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_10.6'>10.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-13-3'>2-13-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_10.6'>10.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.7.2'>R.7.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s551' name='standard_s551'><div class='standard'><div>551&nbsp;S</div></div></a><div class='headline'>Cast from base to derived for polymorphic type.</div></div><p>Down-casting an abstract base class to a derived class should be avoided. Such casting may cause unexpected behaviour if the code is later modified.</p>
<p>Note that MISRA-C++:2008 checking needs to be enabled in order for this violation to be detected, either via selection of the MISRA-C++:2008 programming model or by setting the modifier <a href='standard_flags.htm#flag_331'>331</a> to 1 in the creport.dat file. (TBmisra license permitting). <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 551 S : Cast from base to derived for polymorphic type.
 *******************************************************************/</span> 
&nbsp;
class base <span class="br0">&#123;</span>
   public<span class="sy0">:</span>
   virtual <span class="kw4">void</span> proc<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class deriv<span class="sy0">:</span> public base <span class="br0">&#123;</span>
   virtual <span class="kw4">void</span> proc<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_551<span class="br0">&#40;</span> base <span class="sy0">&amp;</span> b1 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  deriv d1<span class="sy0">;</span>
  deriv <span class="sy0">*</span> pd1<span class="sy0">;</span>
  base <span class="sy0">*</span> pb <span class="sy0">=</span> <span class="sy0">&amp;</span> b1<span class="sy0">;</span>
  pd1 <span class="sy0">=</span> reinterpret_cast <span class="sy0">&lt;</span>deriv <span class="sy0">*&gt;</span> <span class="br0">&#40;</span><span class="sy0">&amp;</span> b1<span class="br0">&#41;</span><span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
  pd1 <span class="sy0">=</span> dynamic_cast <span class="sy0">&lt;</span>deriv <span class="sy0">*&gt;</span> <span class="br0">&#40;</span><span class="sy0">&amp;</span> b1<span class="br0">&#41;</span><span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-2-3'>5-2-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_331'>331</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s552' name='standard_s552'><div class='standard'><div>552&nbsp;S</div></div></a><div class='headline'>Class, enum, struct or union name reused.</div></div><p>Tag names shall not be re-declared within the program, other than through the inclusion of a header file containing the definition, in multiple source files.</p>
<p>Note that MISRA-C++:2008 checking needs to be enabled in order for this violation to be detected, either via selection of the MISRA-C++:2008 programming model or by setting the modifier <a href='standard_flags.htm#flag_331'>331</a> to 1 in the c/cppreport.dat file. (TBmisra license permitting).  <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 552 S : Class, enum, struct or union name reused.
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> proc <span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  class bone <span class="br0">&#123;</span><span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
  <span class="br0">&#123;</span>
    <span class="kw4">int</span> bone<span class="sy0">;</span>             <span class="coMULTI">/* not compliant */</span> 
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_552<span class="br0">&#40;</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">int</span> bone<span class="sy0">;</span>             <span class="coMULTI">/* not compliant */</span> 
&nbsp;
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-4'>2-10-4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_331'>331</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s553' name='standard_s553'><div class='standard'><div>553&nbsp;S</div></div></a><div class='headline'>Function and proto should both be static.</div></div><p>If a function is declared static, all re-declarations or definitions should include the static specifier. This clarifies the linkage of the function to the developer.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_553<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 553 S : Function and proto should both be static.
 *******************************************************************/</span> 
&nbsp;
&nbsp;
<span class="kw4">void</span> static_553<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span> 
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
  <span class="sy0">;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl15-c'>DCL15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_736'>736</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_8.11'>8.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_3-3-2'>3-3-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_8.11'>8.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.8'>R.8.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_1.8.a'>1.8.a</a>, <a href='netrino_model.htm#rule_netrino_6.2.e'>6.2.e</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m2.2.3'>M2.2.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s554' name='standard_s554'><div class='standard'><div>554&nbsp;S</div></div></a><div class='headline'>Cast to an unrelated type.</div></div><p>Casts between pointers to unrelated types leads to undefined behaviour.  This standards checks for the following casts:</p>
<ul>
<li style='margin-left : 0px;'>

 To or from pointer to structure (unless to the same structure)
</li>
<li style='margin-left : 0px;'>

 To or from pointer to class (unless to the same class or to a pointer to a derived class)
</li>
<li style='margin-left : 0px;'>

 From pointer to integer to pointer to float
</li>
<li style='margin-left : 0px;'>

 From pointer to float to pointer to integer
</li>
</ul>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard 554 S : Cast to an unrelated type.
 *******************************************************/</span> 
&nbsp;
<span class="kw4">struct</span> tag1
<span class="br0">&#123;</span>
     UINT_16 u16<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">struct</span> tag2
<span class="br0">&#123;</span>
   UINT_32 u32<span class="sy0">;</span> 
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_554<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">struct</span> tag1 <span class="sy0">*</span>st1<span class="sy0">;</span>
  <span class="kw4">struct</span> tag2 <span class="sy0">*</span>st2<span class="sy0">;</span>
&nbsp;
  st2 <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">struct</span> tag2 <span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span>st1<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp11-c'>EXP11-C</a>, <a href='cert-c_model.htm#rule_cert-c_exp36-c'>EXP36-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_737'>737</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_45'>45</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.12.1.1'>4.12.1.1</a>, <a href='gjb_model.htm#rule_gjb_4.12.2.1'>4.12.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_13.7'>13.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_45'>45</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_182'>182</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_11.4'>11.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_3-9-3'>3-9-3</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-2-7'>5-2-7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_45'>45</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_11.4'>11.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.11.2'>R.11.2</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.11.3'>R.11.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.7.1'>R2.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s555' name='standard_s555'><div class='standard'><div>555&nbsp;S</div></div></a><div class='headline'>Base class member name not unique.</div></div><p>All visible base class members should be unique names.  This removes the possibility of ambiguous names, which the compiler may fail to report. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_555<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 555 S : Base class member name not unique.
 *******************************************************************/</span> 
class base <span class="br0">&#123;</span>
    SINT_32 aff<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class deriv <span class="sy0">:</span> public base <span class="br0">&#123;</span>
   SINT_32  aff<span class="sy0">;</span>      <span class="coMULTI">/* not compliant */</span> 
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_555<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_10-2-1'>10-2-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s556' name='standard_s556'><div class='standard'><div>556&nbsp;S</div></div></a><div class='headline'>Wrong order of catches for derived class.</div></div><p>A base class handler shall occur after any derived class handlers. Otherwise, any handlers after the base class handler will never be executed.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 556 S : Wrong order of catches for derived class.
 *******************************************************************/</span> 
class base
<span class="br0">&#123;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class deriv <span class="sy0">:</span> public base <span class="br0">&#123;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_556<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  try <span class="br0">&#123;</span>
  <span class="br0">&#125;</span>
  catch<span class="br0">&#40;</span> base <span class="sy0">&amp;</span> p1<span class="br0">&#41;</span> <span class="br0">&#123;</span>  <span class="coMULTI">/* not compliant */</span> 
&nbsp;
  <span class="br0">&#125;</span>
  catch<span class="br0">&#40;</span> deriv <span class="sy0">&amp;</span> p2 <span class="br0">&#41;</span><span class="br0">&#123;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_15-3-6'>15-3-6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s557' name='standard_s557'><div class='standard'><div>557&nbsp;S</div></div></a><div class='headline'>Function call can generate throw exception.</div></div><p>A function call should not throw an exception. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_557<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 557 S : Function call can generate throw exception.
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> throwfunc<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    throw<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_557<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp;
  throwfunc<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_15-1-1'>15-1-1</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_15-3-1'>15-3-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s558' name='standard_s558'><div class='standard'><div>558&nbsp;S</div></div></a><div class='headline'>Template may lead to ill-formed program.</div></div><p>A template should not contain features that may lead to an ill-formed program. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_558<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 558 S : Template may lead to ill-formed program.
 *******************************************************************/</span> 
template <span class="sy0">&lt;</span>typename T<span class="sy0">&gt;</span> class duff <span class="br0">&#123;</span>
    <span class="kw4">void</span> func<span class="br0">&#40;</span><span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
       T at<span class="sy0">;</span>
       at.<span class="me1">xx</span> <span class="sy0">=</span> <span class="nu0">77</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span> 
    <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_558<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
  <span class="sy0">;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_14-7-2'>14-7-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s559' name='standard_s559'><div class='standard'><div>559&nbsp;S</div></div></a><div class='headline'>Virtual member defined more than once.</div></div><p>There shall be only one definition of each virtual member function on each path through the hieracrchy. This provides clarity of the code. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_559<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 559 S : Virtual member defined more than once.
 *******************************************************************/</span> 
class one <span class="br0">&#123;</span>
   virtual <span class="kw4">void</span> func<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span><span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class two <span class="sy0">:</span> public one <span class="br0">&#123;</span>
   virtual <span class="kw4">void</span> func<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class three <span class="sy0">:</span> public two <span class="br0">&#123;</span>
   virtual <span class="kw4">void</span> func<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span><span class="br0">&#125;</span>  <span class="coMULTI">/* not compliant */</span> 
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_559<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
  <span class="sy0">;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_10-3-1'>10-3-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s560' name='standard_s560'><div class='standard'><div>560&nbsp;S</div></div></a><div class='headline'>Scope of variable could be reduced.</div></div><p>It is good practise to restrict the scope of a variable to the scope in which it is used.  This reduces the possibility that the identifier is used accidentally.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 560 S : Scope of variable could be reduced.
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_560<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_16 us<span class="sy0">;</span>
  <span class="br0">&#123;</span>
     us <span class="sy0">=</span> <span class="nu0">78</span><span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
  <span class="br0">&#125;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_6'>6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_0-1-6'>0-1-6</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_3-4-1'>3-4-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s561' name='standard_s561'><div class='standard'><div>561&nbsp;S</div></div></a><div class='headline'>Use of dynamic type in c'tor/d'tor.</div></div><p>The dynamic type of an object shall not be used in its constructor or destructor.  During the construction and destruction of an object, its type may be different to that of the completely constructed object. Therefore, the result may be contrary to the developer's expectations. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_561<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 561 S : Use of dynamic type in c'tor/d'tor.
 *******************************************************************/</span> 
&nbsp;
class one <span class="br0">&#123;</span>
    virtual <span class="kw4">void</span> func<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    one<span class="br0">&#40;</span><span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
          typeid<span class="br0">&#40;</span>one<span class="br0">&#41;</span><span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span> 
    <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_561<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_12-1-1'>12-1-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s562' name='standard_s562'><div class='standard'><div>562&nbsp;S</div></div></a><div class='headline'>Use of ++,-- or = in macro parameters.</div></div><p>Increment, decrement and assignment operators should not be used as macro parameters. Such use can lead to unspecified behaviour if the expanded expression depends on the order in which side effects take place. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_562<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 562 S : Use of ++,-- or = in macro parameters.
 *******************************************************************/</span> 
<span class="co2">#define MAC( x )  x + 10</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_562<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  INT_16 aa <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
  <span class="coMULTI">/***/</span> 
  MAC <span class="br0">&#40;</span> aa<span class="sy0">++</span> <span class="br0">&#41;</span><span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_pre31-c'>PRE31-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_735'>735</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s563' name='standard_s563'><div class='standard'><div>563&nbsp;S</div></div></a><div class='headline'>Address increment exceeds type limit.</div></div><p>... Awaiting Documentation ... </p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s564' name='standard_s564'><div class='standard'><div>564&nbsp;S</div></div></a><div class='headline'>Reference assignment to wider scope.</div></div><p>The scope of the reference is wider than the scope of the reference being assigned which can lead to undefined behaviour. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> SINT_32 <span class="sy0">&amp;</span> static_564<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 564 S : Reference assignment to wider scope.
 *******************************************************************/</span> 
SINT_32 aglob <span class="sy0">=</span> <span class="nu0">9</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> SINT_32 <span class="sy0">&amp;</span>  static_564<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  SINT_32 aloc <span class="sy0">=</span> aglob<span class="sy0">;</span>
  <span class="kw1">return</span> aloc<span class="sy0">;</span>       <span class="coMULTI">/* not compliant */</span> 
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_562'>562</a>, <a href='cwe_model.htm#rule_cwe_825'>825</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_4.11'>4.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_11.7'>11.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_111'>111</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_173'>173</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_206'>206</a>, <a href='lmtcp_model.htm#rule_lmtcp_316'>316</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_7-5-1'>7-5-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s565' name='standard_s565'><div class='standard'><div>565&nbsp;S</div></div></a><div class='headline'>Assignment to wider scope.</div></div><p>The scope of the variable is wider than the scope of the address being assigned which can lead to undefined behaviour.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 565 S : Assignment to wider scope.
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">struct</span> tag
<span class="br0">&#123;</span>
   UCHAR ff<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">struct</span> tag  <span class="sy0">*</span>uglob<span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_565<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    <span class="kw4">static</span> <span class="kw4">struct</span> tag avar<span class="sy0">;</span>
    uglob <span class="sy0">=</span> <span class="sy0">&amp;</span> avar<span class="sy0">;</span>          <span class="coMULTI">/* not compliant */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl30-c'>DCL30-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_4.11'>4.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_17.6'>17.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_7-5-2'>7-5-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_17.6'>17.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.18.6'>R.18.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_x3.x'>X3.x</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s567' name='standard_s567'><div class='standard'><div>567&nbsp;S</div></div></a><div class='headline'>Pointer arithmetic is not on array.</div></div><p>Performing arithmetic on pointers that are not arrays is considered to be an unsafe activity since there is no guarantee that the result is a valid address.</p>
<p>This standard can be relaxed to allow subtraction between pointers by setting the modifier <a href='standard_flags.htm#flag_436'>436</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_567<span class="br0">&#40;</span> UINT_32 <span class="sy0">*</span> pp <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 567 S : Pointer arithmetic is not on array.
 *******************************************************************/</span> 
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_567<span class="br0">&#40;</span> UINT_32 <span class="sy0">*</span> pp <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 <span class="sy0">*</span> xx<span class="sy0">;</span>
  xx <span class="sy0">=</span> pp <span class="sy0">+</span><span class="nu0">7</span><span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_arr37-c'>ARR37-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_436'>436</a> = 1</td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_188'>188</a>, <a href='cwe_model.htm#rule_cwe_468'>468</a>, <a href='cwe_model.htm#rule_cwe_469'>469</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_17.1'>17.1</a>, <a href='misra-ac_model.htm#rule_misra-ac_17.4'>17.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-15'>5-0-15</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_436'>436</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_17.1'>17.1</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_17.4'>17.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.18.1'>R.18.1</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.18.4'>R.18.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_436'>436</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s568' name='standard_s568'><div class='standard'><div>568&nbsp;S</div></div></a><div class='headline'>#include &quot;filename&quot; uses standard library name.</div></div><p>The filename used in a #include should not be the same as a library name. The file that is included depends on the implementation.  </p>
<p>Note that this standard is only enabled by setting the modifier <a href='standard_flags.htm#flag_344'>344</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/*******************************************************************
 * Standard 568 S : #include &quot;filename&quot; uses standard library name.
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_568<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
      <span class="coMULTI">/* not compliant when modifier 344 is set */</span> 
<span class="co2">#include &quot;stdlib.h&quot; </span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_pre04-c'>PRE04-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_344'>344</a> = 1</td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_735'>735</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_344'>344</a> = 1</td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_3.9'>3.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_344'>344</a> = 1</td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_14.9'>14.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_p1.4.2'>P1.4.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_344'>344</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s569' name='standard_s569'><div class='standard'><div>569&nbsp;S</div></div></a><div class='headline'>Operator should be non class member.</div></div><p>Operators should not be class members. It is not possible to perform an implicit conversion on the left hand side of a binary operator when the operator is a class member. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_569<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 569 S : Operator should be non class member.
 *******************************************************************/</span> 
&nbsp;
class one <span class="br0">&#123;</span>
   one<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span><span class="br0">&#125;</span>
   SINT_32 operator <span class="sy0">-</span> <span class="br0">&#40;</span> <span class="kw4">const</span> SINT_32 xx <span class="br0">&#41;</span><span class="br0">&#123;</span><span class="kw1">return</span> <span class="nu0">77</span><span class="sy0">;</span><span class="br0">&#125;</span>  <span class="coMULTI">/* not compliant */</span> 
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_569<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
  <span class="sy0">;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.5.4'>3.5.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s570' name='standard_s570'><div class='standard'><div>570&nbsp;S</div></div></a><div class='headline'>Static object declared in namespace.</div></div><p>The static keyword should not be used when declaring objects in namespaces, as it is deprecated by the C++ standard. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_570<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 570 S : Static object declared in namespace.
 *******************************************************************/</span> 
namespace namsp570 <span class="br0">&#123;</span>
    <span class="kw4">static</span> SINT_32 xx<span class="sy0">;</span>     <span class="coMULTI">/* not compliant */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_570<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_8.3.1'>8.3.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s571' name='standard_s571'><div class='standard'><div>571&nbsp;S</div></div></a><div class='headline'>Identifier with 'l' and 1, 'O' and zero.</div></div><p>An identifier should not include both 'l'(ell) and 1(one) or  'O'(oh) and '0'(zero). The characters are similar and may confuse the reader. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 571 S : Identifier with 'l' and 1, 'o' and zero.
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_571<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  SINT_32  Oday0 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>     <span class="coMULTI">/* not compliant */</span> 
  SINT_32  dlay1 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>     <span class="coMULTI">/* not compliant */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_8.4.1'>8.4.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s572' name='standard_s572'><div class='standard'><div>572&nbsp;S</div></div></a><div class='headline'>Side effect in assert.</div></div><p>There should be no side effects in assert expressions. This enables assertions to be disabled or removed in production code. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_572<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 572 S : Side effect in assert.
 *******************************************************************/</span> 
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_572<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
  UCHAR xx <span class="sy0">=</span> <span class="nu0">99</span><span class="sy0">;</span>
  assert<span class="br0">&#40;</span> xx <span class="sy0">=</span> <span class="nu0">91</span><span class="br0">&#41;</span><span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span> 
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.8'>10.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_5'>5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s573' name='standard_s573'><div class='standard'><div>573&nbsp;S</div></div></a><div class='headline'>Macro concatenation of uni char names.</div></div><p>A universal character name shall not be created by macro concatenation. This can lead to undefined behaviour. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_573<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 573 S : Macro concatenation of uni char names.
 *******************************************************************/</span> 
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_573<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
  <span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
<span class="co2">#define makename(uc1, uc2, uc3, uc4) uc1##uc2##uc3##uc4</span>
&nbsp;
makename <span class="br0">&#40;</span> \U00010401<span class="sy0">,</span> \U00010401<span class="sy0">,</span> \U00010401<span class="sy0">,</span> \U00010402 <span class="br0">&#41;</span> <span class="sy0">=</span> <span class="nu0">4</span><span class="sy0">;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_pre30-c'>PRE30-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_735'>735</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s574' name='standard_s574'><div class='standard'><div>574&nbsp;S</div></div></a><div class='headline'>Operator new called with inconsistent type.</div></div><p>The new operator shall not allocate space for an inconsistent type. This is illegal in C++, but not all compilers will produce an error. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
<span class="coMULTI">/* Note that this example may fail to compile */</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_574<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 574 S : Operator new called with inconsistent type.
 *******************************************************************/</span> 
class one <span class="br0">&#123;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class two <span class="br0">&#123;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_574<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
  two <span class="sy0">*</span> ptwo <span class="sy0">=</span> new one<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s575' name='standard_s575'><div class='standard'><div>575&nbsp;S</div></div></a><div class='headline'>Linkage differs from previous declaration.</div></div><p>Multiple declarations of an identifier shall not have both internal and external linkage, as this leads to undefined behaviour.</p>
<p>Other aspects concerning linkage are covered by standards <a href='standards.htm#standard_s461'>461 S</a> and <a href='standards.htm#standard_x2'>2 X</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_575<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 575 S : Linkage differs from previous declaration.
 *******************************************************************/</span> 
<span class="kw4">static</span> INT_32 DCL36_i2 <span class="sy0">=</span> <span class="nu0">20</span><span class="sy0">;</span>
INT_32 DCL36_i2<span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_575<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl36-c'>DCL36-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.8'>R.8.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s576' name='standard_s576'><div class='standard'><div>576&nbsp;S</div></div></a><div class='headline'>Function pointer is of wrong type.</div></div><p>A function pointer shall not be cast to a different function pointer type. An implicit cast is illegal in C, but not all compilers will produce an error. An explicit cast may lead to undefined behaviour. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_576<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 576 S : Function pointer is of wrong type.
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">void</span> <span class="br0">&#40;</span><span class="sy0">*</span>fptr1<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">typedef</span> UCHAR <span class="br0">&#40;</span><span class="sy0">*</span>fptr2<span class="br0">&#41;</span><span class="br0">&#40;</span>UCHAR uc<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_576<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
  fptr1 afp<span class="sy0">;</span>
  fptr2 bfp<span class="sy0">;</span>
  afp <span class="sy0">=</span> bfp<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span> 
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl35-c'>DCL35-C</a>, <a href='cert-c_model.htm#rule_cert-c_exp08-c'>EXP08-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_468'>468</a>, <a href='cwe_model.htm#rule_cwe_686'>686</a>, <a href='cwe_model.htm#rule_cwe_688'>688</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_11.1'>11.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_11.1'>11.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s577' name='standard_s577'><div class='standard'><div>577&nbsp;S</div></div></a><div class='headline'>Sizeof argument is a pointer.</div></div><p>The argument of sizeof is a pointer. Taking the size of a pointer to a type always returns the size of the pointer and not the size of the type. This can lead to unexpected behaviour if the developer mistakenly assumes that the size of the type is returned. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_577<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 577 S : Sizeof argument is a pointer.
 *******************************************************************/</span> 
UCHAR <span class="sy0">*</span> puc<span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_577<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UCHAR xx<span class="sy0">;</span>
  <span class="coMULTI">/***/</span> 
  xx <span class="sy0">=</span> <span class="kw4">sizeof</span><span class="br0">&#40;</span>puc<span class="br0">&#41;</span>  <span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp01-c'>EXP01-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_467'>467</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s578' name='standard_s578'><div class='standard'><div>578&nbsp;S</div></div></a><div class='headline'>Sizeof used in arithmetic expression.</div></div><p>Sizeof is used in an arithmetic expression. This may indicate that the developer is calculating the size of a type in a way that may lead to an incorrect value. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_578<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 578 S : Sizeof used in arithmetic expression.
 *******************************************************************/</span> 
&nbsp;
UCHAR xx<span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_578<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
  xx <span class="sy0">=</span> <span class="kw4">sizeof</span><span class="br0">&#40;</span>xx<span class="br0">&#41;</span> <span class="sy0">+</span> 10U<span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp03-c'>EXP03-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s579' name='standard_s579'><div class='standard'><div>579&nbsp;S</div></div></a><div class='headline'>More than one variable per declaration.</div></div><p>Variable declarations shall not be combined with other declarators. Multiple declarators may lead to confusion regarding the type of an identifier. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 579 S : More than one variable in declaration.
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">struct</span> astr <span class="br0">&#123;</span>
   UCHAR f1<span class="sy0">;</span>
   SCHAR f2<span class="sy0">;</span>
<span class="br0">&#125;</span> okstr1<span class="sy0">,</span>notokstr2<span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span> 
&nbsp;
<span class="kw4">struct</span> astr okstruct1<span class="sy0">;</span>
&nbsp;
<span class="kw4">struct</span> astr okstruct2<span class="sy0">,</span>notokstruct1<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span> 
&nbsp;
UCHAR global_ok1<span class="sy0">;</span>
&nbsp;
UCHAR global_ok2<span class="sy0">,</span>gobal_notok1<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_579<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 local_ok1<span class="sy0">;</span>
&nbsp;
  UINT_32 local_ok2<span class="sy0">,</span>
          localnot_ok1<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl04-c'>DCL04-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_736'>736</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_1.5'>1.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_8.1.a'>8.1.a</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.2.1'>M1.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s580' name='standard_s580'><div class='standard'><div>580&nbsp;S</div></div></a><div class='headline'>Macro redefinition without using #undef.</div></div><p>A macro shall not be redefined by another #define declaration unless a #undef is used.   A redefinition is illegal in C unless the replacement lists are identical. However, not all compilers will produce an error.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="co2">#define WHAT static</span>
<span class="coMULTI">/* the next macro is not compliant */</span> 
<span class="co2">#define WHAT volatile</span>
&nbsp;
INT_16 xx <span class="sy0">=</span> <span class="nu0">9</span><span class="sy0">;</span>
&nbsp;
<span class="co2">#define OK   static</span>
<span class="co2">#undef OK</span>
<span class="co2">#define OK static</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 580 S : Macro redefinition without using #undef.
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_580<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
  <span class="sy0">;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.1.1'>3.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_1.1'>1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_1.1'>1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_1-0-1'>1-0-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_1.1'>1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.1'>R.1.1</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.20.4'>R.20.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_x6.x'>X6.x</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s581' name='standard_s581'><div class='standard'><div>581&nbsp;S</div></div></a><div class='headline'>Loop conditions are independent.</div></div><p>The use of the logical or operator (||) in the terminating expression of a for loop may lead to unexpected behaviour.  The logical and operator (&amp;&amp;) is preferred. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_581<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 581 S : Loop conditions are independent.
 *******************************************************************/</span> 
&nbsp;
&nbsp;
INT_32 endcond <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    <span class="kw1">return</span> <span class="nu0">1</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_581<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   INT_32 ii <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
   INT_32 data<span class="br0">&#91;</span><span class="nu0">10</span><span class="br0">&#93;</span><span class="sy0">;</span>
   INT_32 end <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
   <span class="kw1">for</span> <span class="br0">&#40;</span> ii<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span> <span class="br0">&#40;</span> ii <span class="sy0">&lt;</span> <span class="nu0">10</span> <span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span> <span class="sy0">!</span>end <span class="br0">&#41;</span> <span class="sy0">;</span> ii<span class="sy0">++</span> <span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span> 
   <span class="br0">&#123;</span>
      data<span class="br0">&#91;</span>ii<span class="br0">&#93;</span> <span class="sy0">=</span> ii<span class="sy0">;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span> endcond<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">!=</span> <span class="nu0">0</span> <span class="br0">&#41;</span>
      <span class="br0">&#123;</span> end <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
      <span class="br0">&#125;</span>
   <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_13.5'>13.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_13.5'>13.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.14.2'>R.14.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m3.3.1'>M3.3.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s582' name='standard_s582'><div class='standard'><div>582&nbsp;S</div></div></a><div class='headline'>const object reassigned.</div></div><p>A const object shall not be reassigned. This is illegal in C and C++, but not all compilers will produce an error.</p>
<p>An exception is made if the object is not initialised or if a char* object is originally initialised or assigned to NULL.
For the purposes of this standard a const char* pointer is treated as potentially pointing to a string literal and is therefore not allowed to be reassigned.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 582 S : const object reassigned.
 *******************************************************************/</span> 
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_582<span class="br0">&#40;</span> <span class="kw4">const</span> UINT_16 <span class="sy0">*</span> par1 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">const</span> <span class="kw4">char</span> <span class="sy0">*</span>str<span class="sy0">;</span>
  str <span class="sy0">=</span> NULL<span class="sy0">;</span>    <span class="coMULTI">/* compliant - not previously initialised */</span>
  str <span class="sy0">=</span> <span class="st0">&quot;Ok&quot;</span><span class="sy0">;</span>    <span class="coMULTI">/* compliant - previous assigned to NULL  */</span>
&nbsp;
  <span class="sy0">*</span>par1 <span class="sy0">=</span> 78U<span class="sy0">;</span>    <span class="coMULTI">/* not compliant, object is const */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_x6.x'>X6.x</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s583' name='standard_s583'><div class='standard'><div>583&nbsp;S</div></div></a><div class='headline'>Comparison of pointer and string literal.</div></div><p>A pointer comparison will only succeed if two pointers point to the same memory location.  A pointer to a string literal is unlikely to refer to the address of the string literal. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_583<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 583 S : Comparison of pointer and string literal.
 *******************************************************************/</span> 
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_583<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    CHAR <span class="sy0">*</span> str<span class="sy0">;</span>
    str <span class="sy0">=</span> <span class="st0">&quot;def&quot;</span> <span class="sy0">;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span> str <span class="sy0">==</span> <span class="st0">&quot;def&quot;</span> <span class="br0">&#41;</span>    <span class="coMULTI">/* not compliant */</span> 
    <span class="br0">&#123;</span>
       <span class="coMULTI">/***/</span> 
    <span class="br0">&#125;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_597'>597</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_x2.x'>X2.x</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s584' name='standard_s584'><div class='standard'><div>584&nbsp;S</div></div></a><div class='headline'>Remainder of % op could be negative.</div></div><p>In some languages the sign of the result is dependent on the compiler, an example of this is C90.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
<span class="kw4">static</span> <span class="kw4">void</span> static_584<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 584 S : Remainder of % op could be negative.
 *******************************************************************/</span> 
&nbsp;
INT_16 ss <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_584<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  INT_16 rem<span class="sy0">;</span>
   <span class="coMULTI">/***/</span> 
  rem <span class="sy0">=</span> ss  <span class="sy0">%</span> <span class="nu0">4</span><span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int10-c'>INT10-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_121'>121</a>, <a href='cwe_model.htm#rule_cwe_122'>122</a>, <a href='cwe_model.htm#rule_cwe_124'>124</a>, <a href='cwe_model.htm#rule_cwe_126'>126</a>, <a href='cwe_model.htm#rule_cwe_127'>127</a>, <a href='cwe_model.htm#rule_cwe_129'>129</a>, <a href='cwe_model.htm#rule_cwe_682'>682</a>, <a href='cwe_model.htm#rule_cwe_823'>823</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.18'>10.18</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_d.1.1'>D.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s585' name='standard_s585'><div class='standard'><div>585&nbsp;S</div></div></a><div class='headline'>Bitwise and arith operations on same data.</div></div><p>Mixing bitwise and arithmetic operations on the same data can reduce code readability.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
<span class="co2">#include &lt;stdio.h&gt;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_585<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 585 S : Bitwise and arith operations on same data.
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">typedef</span> <span class="kw2">enum</span>
<span class="br0">&#123;</span>
   shift <span class="sy0">=</span> 2U<span class="sy0">,</span>
   mask  <span class="sy0">=</span> 0x10U<span class="sy0">,</span>
   part  <span class="sy0">=</span> 1U
<span class="br0">&#125;</span> constants<span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_585<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
            UINT_32 a <span class="sy0">=</span> <span class="br0">&#40;</span> getchar <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">==</span> EOF <span class="br0">&#41;</span> <span class="sy0">?</span> 50U <span class="sy0">:</span> 100U<span class="sy0">;</span>
   <span class="kw4">volatile</span> UINT_32 r<span class="sy0">;</span>
  <span class="coMULTI">/***/</span> 
     r <span class="sy0">=</span> a <span class="sy0">+</span> <span class="br0">&#40;</span> a <span class="sy0">&lt;&lt;</span> shift <span class="br0">&#41;</span> <span class="sy0">+</span> part<span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int14-c'>INT14-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_738'>738</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c++.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s586' name='standard_s586'><div class='standard'><div>586&nbsp;S</div></div></a><div class='headline'>Format is not %j for user defined type.</div></div><p>The length modifier  %j should be used on user-defined integer types. </p>
<p>This standard will only be enabled by setting the modifier <a href='standard_flags.htm#flag_350'>350</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &lt;stdio.h&gt; </span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 586 S : Format is not %j for user defined type.
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_586<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
   <span class="kw4">typedef</span>   <span class="kw4">signed</span> <span class="kw4">long</span> <span class="kw4">long</span> <span class="kw4">long</span> s_t<span class="sy0">;</span>
   s_t       s<span class="sy0">;</span>
&nbsp;
   <span class="kw1">if</span> <span class="br0">&#40;</span> scanf <span class="br0">&#40;</span> <span class="st0">&quot;%lld&quot;</span> <span class="sy0">,</span> <span class="sy0">&amp;</span> s <span class="br0">&#41;</span> <span class="sy0">!=</span> <span class="nu0">1</span> <span class="br0">&#41;</span>       <span class="coMULTI">/* not compliant  */</span> 
   <span class="br0">&#123;</span>
      <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a> <span class="br0">&#40;</span> <span class="st0">&quot;*&quot;</span> <span class="br0">&#41;</span><span class="sy0">;</span>
   <span class="br0">&#125;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int15-c'>INT15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_738'>738</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c++.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s587' name='standard_s587'><div class='standard'><div>587&nbsp;S</div></div></a><div class='headline'>Const local variable not immediately initialised.</div></div><p>A const local variable shall be immediately initialised, as a value cannot be assigned later. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_587<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 587 S : Const local variable not immediately initialised.
 *******************************************************************/</span> 
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_587<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
  <span class="kw4">const</span> INT_32 loc<span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
  loc <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
  INT_32 rr <span class="sy0">=</span> loc<span class="sy0">;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r1.1.2'>R1.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s588' name='standard_s588'><div class='standard'><div>588&nbsp;S</div></div></a><div class='headline'>Use of system function.</div></div><p>The use of system function may lead to a security vulnerability or unexpected behaviour unless the input string is validated.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &lt;stdlib.h&gt;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_588<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 588 S : Use of system function.
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_588<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
  system<span class="br0">&#40;</span><span class="st0">&quot; wow&quot;</span> <span class="br0">&#41;</span><span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_env04-c'>ENV04-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_78'>78</a>, <a href='cwe_model.htm#rule_cwe_88'>88</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s589' name='standard_s589'><div class='standard'><div>589&nbsp;S</div></div></a><div class='headline'>Format is not appropriate type.</div></div><p>The conversion format specifier does not match the argument used in the function call.  This may lead to undefined behaviour.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &lt;stdio.h&gt; </span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 589 S : Format is not appropriate type.
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_589<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    <span class="kw4">int</span> x <span class="sy0">=</span> <span class="nu0">7</span><span class="sy0">;</span>
    <span class="kw4">float</span> ff <span class="sy0">=</span> <span class="nu17">8.9F</span><span class="sy0">;</span>
    <span class="kw4">unsigned</span> u <span class="sy0">=</span> 9U<span class="sy0">;</span>
    <span class="kw4">char</span> <span class="sy0">*</span> ss <span class="sy0">=</span> <span class="st0">&quot;oh my&quot;</span> <span class="sy0">;</span>
    <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot; <span class="es1">\n</span> %d &quot;</span><span class="sy0">,</span> u<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot; <span class="es1">\n</span> %d &quot;</span><span class="sy0">,</span> ff<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>  
    <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot; <span class="es1">\n</span> %s &quot;</span><span class="sy0">,</span> x<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span> 
    <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot; <span class="es1">\n</span> %d &quot;</span><span class="sy0">,</span> ss<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl11-c'>DCL11-C</a>, <a href='cert-c_model.htm#rule_cert-c_fio00-c'>FIO00-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_686'>686</a>, <a href='cwe_model.htm#rule_cwe_688'>688</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s590' name='standard_s590'><div class='standard'><div>590&nbsp;S</div></div></a><div class='headline'>Mode fault in fopen.</div></div><p>The mode string in the call of fopen is not one of the standard strings. This may lead to undefined behaviour. The permitted modes are &quot;r&quot;, &quot;w&quot;, &quot;a&quot;, &quot;r+&quot;, &quot;w+&quot;, &quot;a+&quot; and those modes with &quot;b&quot; appended.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &lt;stdio.h&gt; </span>
&nbsp;
<span class="coMULTI">/****************************************
 * Standard 590 S : Mode fault in fopen.
 ****************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_590<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
  fopen<span class="br0">&#40;</span><span class="st0">&quot;afile1.h&quot;</span> <span class="sy0">,</span> <span class="st0">&quot;wb+&quot;</span> <span class="br0">&#41;</span><span class="sy0">;</span> 
  fopen<span class="br0">&#40;</span><span class="st0">&quot;afile2.h&quot;</span> <span class="sy0">,</span> <span class="st0">&quot;c&quot;</span> <span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* Not Compliant */</span> 
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_fio11-c'>FIO11-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s591' name='standard_s591'><div class='standard'><div>591&nbsp;S</div></div></a><div class='headline'>Inappropriate use of file pointer.</div></div><p>The use of a copy of a FILE object may lead to unexpected behaviour. The address of the FILE pointer may be significant.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &lt;stdio.h&gt; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_591<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 591 S : Inappropriate use of file pointer.
 *******************************************************************/</span> 
&nbsp;
FILE file_f<span class="sy0">;</span>
FILE file_g<span class="sy0">;</span>
FILE <span class="sy0">*</span> hptr<span class="sy0">;</span>
FILE <span class="sy0">*</span> iptr<span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_591<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   hptr <span class="sy0">=</span> fopen<span class="br0">&#40;</span><span class="st0">&quot; afile.h&quot;</span> <span class="sy0">,</span><span class="st0">&quot; w&quot;</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
   iptr <span class="sy0">=</span> hptr<span class="sy0">;</span>        <span class="coMULTI">/* OK */</span>
   file_f <span class="sy0">=</span> <span class="sy0">*</span>hptr<span class="sy0">;</span>     <span class="coMULTI">/* not compliant */</span> 
   file_g <span class="sy0">=</span> file_f<span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_fio38-c'>FIO38-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_743'>743</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.22.5'>R.22.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s592' name='standard_s592'><div class='standard'><div>592&nbsp;S</div></div></a><div class='headline'>Use of filename based functions.</div></div><p>fopen, freopen, remove and rename use a filename as an argument. This may lead to a security vulnerability or unexpected behaviour unless the input string is validated.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &lt;stdio.h&gt; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_592<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 592 S : Use of filename based functions.
 *******************************************************************/</span> 
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_592<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
&nbsp;
  <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> remove<span class="br0">&#40;</span><span class="st0">&quot; afile.h&quot;</span> <span class="br0">&#41;</span><span class="sy0">;</span>             <span class="coMULTI">/* not compliant */</span> 
  <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> rename<span class="br0">&#40;</span><span class="st0">&quot; afile.h&quot;</span> <span class="sy0">,</span> <span class="st0">&quot;bfile.h&quot;</span> <span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span> 
&nbsp;
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_fio01-c'>FIO01-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_367'>367</a>, <a href='cwe_model.htm#rule_cwe_676'>676</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s593' name='standard_s593'><div class='standard'><div>593&nbsp;S</div></div></a><div class='headline'>Use fseek() rather than rewind().</div></div><p>The fseek function should be used instead of the rewind function, since fseek returns a value to indicate that the rewind has been successful. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &lt;stdio.h&gt; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_593<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 593 S : Use fseek() rather than rewind().
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_593<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  FILE <span class="sy0">*</span>fptr <span class="sy0">=</span> fopen<span class="br0">&#40;</span><span class="st0">&quot; afile.h&quot;</span> <span class="sy0">,</span><span class="st0">&quot; r&quot;</span> <span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="coMULTI">/***/</span> 
  rewind<span class="br0">&#40;</span>fptr<span class="br0">&#41;</span><span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_fio07-c'>FIO07-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_743'>743</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s594' name='standard_s594'><div class='standard'><div>594&nbsp;S</div></div></a><div class='headline'>Use setvbuf() rather than setbuf().</div></div><p>The setvbuf function should be used instead of the setbuf function, since setvbuf returns a value to indicate that the stream has been successfully altered. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &lt;stdio.h&gt; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_594<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 594 S : Use setvbuf() rather than setbuf().
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_594<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  FILE <span class="sy0">*</span>fptr <span class="sy0">=</span> fopen<span class="br0">&#40;</span><span class="st0">&quot; afile.h&quot;</span> <span class="sy0">,</span><span class="st0">&quot; w&quot;</span> <span class="br0">&#41;</span><span class="sy0">;</span>
  setbuf<span class="br0">&#40;</span>fptr<span class="sy0">,</span> NULL<span class="br0">&#41;</span><span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_fio12-c'>FIO12-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_743'>743</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s595' name='standard_s595'><div class='standard'><div>595&nbsp;S</div></div></a><div class='headline'>Base member with change of access.</div></div><p>A base member has undergone a change of access. The behaviour may be contrary to the developer's expectations. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_595<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 595 S : Base member with change of access.
 *******************************************************************/</span> 
&nbsp;
&nbsp;
class base_595 <span class="br0">&#123;</span>
   public<span class="sy0">:</span>
   SINT_32 basefield<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
class derived_595<span class="sy0">:</span> private base_595 <span class="br0">&#123;</span>
   public<span class="sy0">:</span>
   base_595<span class="sy0">::</span><span class="me2">basefield</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span> 
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_595<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
  <span class="sy0">;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s596' name='standard_s596'><div class='standard'><div>596&nbsp;S</div></div></a><div class='headline'>Namespace name starts with lower case letter.</div></div><p>The first word of the name of a namespace will begin with an uppercase letter. All other letters will be lowercase. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_596<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 596 S : Namespace name starts with lower case letter.
 *******************************************************************/</span> 
&nbsp;
namespace lowercase  <span class="coMULTI">/* not compliant */</span> 
<span class="br0">&#123;</span>
  SINT_32 nn <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_596<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
  <span class="sy0">;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_50'>50</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s597' name='standard_s597'><div class='standard'><div>597&nbsp;S</div></div></a><div class='headline'>Use of placement new.</div></div><p>The placement version of the new operator has been used. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_597<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 597 S : Use of placement new.
 *******************************************************************/</span> 
&nbsp;
class CApple <span class="br0">&#123;</span>
   public<span class="sy0">:</span>
   CApple<span class="br0">&#40;</span>SINT_32 iWorms <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span> FLOAT_32 fPrice <span class="sy0">=</span> <span class="nu16">1.0</span><span class="br0">&#41;</span>
   <span class="sy0">:</span> m_iWorms<span class="br0">&#40;</span>iWorms<span class="br0">&#41;</span>
   <span class="sy0">,</span> m_fPrice<span class="br0">&#40;</span>fPrice<span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
   <span class="br0">&#125;</span>
   public<span class="sy0">:</span>
   SINT_32 m_iWorms<span class="sy0">;</span>
   FLOAT_32 m_fPrice<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw2">inline</span> <span class="kw4">void</span> <span class="sy0">*</span> operator new<span class="br0">&#40;</span><span class="kw4">unsigned</span> <span class="kw4">int</span> st<span class="sy0">,</span> CApple <span class="sy0">*</span> ca<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">return</span> ca<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_597<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
   CApple automaticApple <span class="br0">&#40;</span><span class="nu0">8</span><span class="sy0">,</span><span class="nu16">0.0</span><span class="br0">&#41;</span><span class="sy0">;</span>
   CApple <span class="sy0">*</span> pApple4 <span class="sy0">=</span> new<span class="br0">&#40;</span><span class="sy0">&amp;</span> automaticApple<span class="br0">&#41;</span> CApple  <span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span> 
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s598' name='standard_s598'><div class='standard'><div>598&nbsp;S</div></div></a><div class='headline'>Alternative array indexing used.</div></div><p>The subscripting operator does not specify which operand is the pointer to the array and which is its index. This standard reports when the index is used as first operand.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 598 S : Alternative array indexing used.
 *******************************************************************/</span>
&nbsp;
UINT_32 static_598<span class="br0">&#40;</span> <span class="kw4">const</span> UINT_32 val <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 data<span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
  1U<span class="br0">&#91;</span>data<span class="br0">&#93;</span> <span class="sy0">=</span> val<span class="sy0">;</span>       <span class="coMULTI">/* not compliant */</span>
&nbsp;
  <span class="kw1">return</span>  1U<span class="br0">&#91;</span>data<span class="br0">&#93;</span><span class="sy0">;</span>     <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s599' name='standard_s599'><div class='standard'><div>599&nbsp;S</div></div></a><div class='headline'>Use of &amp;&amp; or || in initialisation.</div></div><p>A logical operator ( &amp;&amp; or || ) has been detected within an initialisation of a non-boolean variable.
It is likely that it has been confused with a bitwise operator, e.g. &amp;&amp; instead of &amp;.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 599 S : Use of &amp;&amp; or || in initialisation.
 *******************************************************************/</span>
&nbsp;
<span class="co2">#define a  77U</span>
<span class="co2">#define b  32U</span>
&nbsp;
UINT_32  arr<span class="br0">&#91;</span><span class="nu0">4</span><span class="br0">&#93;</span><span class="sy0">=</span> <span class="br0">&#123;</span>  a <span class="sy0">|</span> b<span class="sy0">,</span> 
                    a <span class="sy0">||</span> b<span class="sy0">,</span>  <span class="coMULTI">/* Not compliant */</span> 
                    a <span class="sy0">&amp;&amp;</span> b<span class="sy0">,</span>  <span class="coMULTI">/* Not compliant */</span>
                    a <span class="sy0">&amp;</span> b 
                  <span class="br0">&#125;</span><span class="sy0">;</span> 
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s600' name='standard_s600'><div class='standard'><div>600&nbsp;S</div></div></a><div class='headline'>Argument of strlen is unterminated.</div></div><p>The argument of strlen shall be terminated by a null character. Otherwise, the behaviour of the program is undefined.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &lt;string.h&gt;</span>
<span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 600 S : Argument of strlen is unterminated.
 *******************************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_600<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  SINT_32 xx<span class="sy0">;</span>
  <span class="kw4">char</span> arr <span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span> <span class="st0">'a'</span><span class="sy0">,</span> <span class="st0">'b'</span><span class="sy0">,</span> <span class="st0">'c'</span> <span class="br0">&#125;</span><span class="sy0">;</span>
  xx <span class="sy0">=</span> strlen<span class="br0">&#40;</span>arr<span class="br0">&#41;</span><span class="sy0">;</span>    <span class="coMULTI">/* not compliant */</span>  
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_str32-c'>STR32-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_170'>170</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s601' name='standard_s601'><div class='standard'><div>601&nbsp;S</div></div></a><div class='headline'>Insufficient overridden members.</div></div><p>In a derived class, if not all of the overloaded virtual functions of the base class are overridden, then other functions will be hidden. Hidden member functions can make the code more difficult to understand and lead to unexpected results.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 601 S : Insuffient overriden members.
 *******************************************************************/</span>
&nbsp;
class  Base <span class="br0">&#123;</span>
   public<span class="sy0">:</span>
   <span class="kw4">void</span> f<span class="br0">&#40;</span> <span class="kw4">char</span> <span class="br0">&#41;</span><span class="br0">&#123;</span><span class="sy0">;</span><span class="br0">&#125;</span>
   <span class="kw4">void</span> f<span class="br0">&#40;</span> <span class="kw4">int</span> <span class="br0">&#41;</span><span class="br0">&#123;</span><span class="sy0">;</span><span class="br0">&#125;</span>
   virtual <span class="kw4">void</span> one <span class="br0">&#40;</span><span class="kw4">int</span> <span class="sy0">&amp;</span>ll<span class="br0">&#41;</span><span class="sy0">;</span>
   virtual <span class="kw4">void</span> one <span class="br0">&#40;</span><span class="kw4">char</span> ll<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class Derived<span class="sy0">:</span> public Base <span class="br0">&#123;</span>
   public<span class="sy0">:</span>
   <span class="kw4">void</span> f<span class="br0">&#40;</span> <span class="kw4">int</span> <span class="br0">&#41;</span><span class="br0">&#123;</span><span class="sy0">;</span><span class="br0">&#125;</span>
   virtual <span class="kw4">void</span> one <span class="br0">&#40;</span><span class="kw4">char</span> ll<span class="br0">&#41;</span><span class="sy0">;</span>   <span class="co1">// not compliant </span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> static_601 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   Derived d<span class="sy0">;</span>
   Base<span class="sy0">&amp;</span> bref <span class="sy0">=</span> d<span class="sy0">;</span>
   bref.<span class="me1">f</span><span class="br0">&#40;</span><span class="st0">'c'</span><span class="br0">&#41;</span><span class="sy0">;</span>         <span class="co1">// calls Base::f(char)</span>
   bref.<span class="me1">one</span><span class="br0">&#40;</span><span class="st0">'c'</span><span class="br0">&#41;</span><span class="sy0">;</span>       <span class="co1">// calls Derived::one(char)</span>
   bref.<span class="me1">one</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span><span class="st0">'c'</span><span class="br0">&#41;</span><span class="sy0">;</span>  <span class="co1">// calls Base::one(int)</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.3.5'>3.3.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s602' name='standard_s602'><div class='standard'><div>602&nbsp;S</div></div></a><div class='headline'>strtok may change the parse string.</div></div><p>The function strtok modifies its parse string, which is the first argument. Each time strtok is called the function parses the string up to the first instance of a character in the second argument.  This character is then overwritten with the null character \0.  This can lead to unexpected results.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;string.h&gt;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 602 S : strtok may change parse string.
 *******************************************************************/</span>
&nbsp;
<span class="kw4">void</span> STATIC_602 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw4">char</span> <span class="sy0">*</span>token<span class="sy0">;</span>
   <span class="kw4">char</span> <span class="sy0">*</span>path <span class="sy0">=</span> <span class="st0">&quot;/usr/bin:/bin:/sbin&quot;</span><span class="sy0">;</span>
   token <span class="sy0">=</span> strtok <span class="br0">&#40;</span> path<span class="sy0">,</span> <span class="st0">&quot;:&quot;</span> <span class="br0">&#41;</span><span class="sy0">;</span>         <span class="coMULTI">/* not compliant */</span>
   <span class="kw1">while</span> <span class="br0">&#40;</span> token <span class="sy0">=</span> strtok <span class="br0">&#40;</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="st0">&quot;:&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      <span class="sy0">;</span>
   <span class="br0">&#125;</span>
   <span class="coMULTI">/* path is now just &quot;/usr/bin&quot; */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_str06-c'>STR06-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_464'>464</a>, <a href='cwe_model.htm#rule_cwe_741'>741</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s603' name='standard_s603'><div class='standard'><div>603&nbsp;S</div></div></a><div class='headline'>Parameter should be declared * const.</div></div><p>Any pointer parameter, whose value is not intended to change, should be protected by the use of const. This refers to the pointer it-self, not the data to which the pointer is pointing to. Making the use of the parameter explicit leads to greater precision in the definition of the function interface. </p>
<p>This standard does not apply to the parameters of main.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 603 S : Parameter should be declared * const.
 ********************************************************/</span> 
&nbsp;
SINT_32 global<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> static_603 <span class="br0">&#40;</span> SINT_32 <span class="sy0">*</span> ptr1<span class="sy0">,</span>        <span class="coMULTI">/* Not Compliant */</span>
                  SINT_32 <span class="sy0">*</span> <span class="kw4">const</span> ptr2<span class="sy0">,</span>  <span class="coMULTI">/* Compliant */</span>
                  SINT_32 <span class="sy0">*</span> ptr3         <span class="coMULTI">/* Compliant */</span>
                <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">*</span>ptr1 <span class="sy0">=</span> global<span class="sy0">;</span>   <span class="coMULTI">/* ptr1 not changed, only its data */</span>
  <span class="sy0">*</span>ptr2 <span class="sy0">=</span> global<span class="sy0">;</span>   
  ptr3 <span class="sy0">=</span> <span class="sy0">&amp;</span>global<span class="sy0">;</span>   <span class="coMULTI">/* ptr3 changed */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2011 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_7-1-1'>7-1-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s604' name='standard_s604'><div class='standard'><div>604&nbsp;S</div></div></a><div class='headline'>Use of numeric literal as array bound/subscript.</div></div><p>The use of numeric literals, i.e. magic numbers, is generally accepted as undesirable due to the impact on maintainability. This standard checks for uses of literals in array declarations and array indexing. Symbolic names in the form of const variables, or enum constants, should be used instead.</p>
<p>This standard also extends to numeric literals substituted via macros. It is acknowledged that macros might have to be used - particularly with the C language, where the usage of const is more limited than C++.  The standard can be relaxed to allow numeric literals substituted via macros by setting the modifier <a href='standard_flags.htm#flag_163'>163</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.  By default, the standard is configured to allow numeric literals substituted via macros.</p>
<p>It is also recognised that 0 is commonly used in denoting a pointer to the start of an array and so may be excluded from the rule check. This may be done by setting the modifier <a href='standard_flags.htm#flag_217'>217</a> to 1 in the c/cppreport.dat file. Alternatively, all numbers in a specified range can be allowed by configuring the corresponding parametrised value in the c/cppreport.dat file. For example:</p>
<pre> 604 S C  CWE:128  will not produce a warning for literals up to 128 (for the CWE model)</pre><div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 604 S : Use of numeric literal as array bound/subscript.
 *******************************************************************/</span> 
&nbsp;
<span class="kw2">enum</span> <span class="br0">&#123;</span> LIMIT <span class="sy0">=</span> <span class="nu0">100</span> <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="co2">#define ARRAY_SIZE 100</span>
&nbsp;
<span class="kw4">void</span> static_604<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   SINT_32 array_ok1<span class="br0">&#91;</span>ARRAY_SIZE<span class="br0">&#93;</span><span class="sy0">;</span> <span class="coMULTI">/* Compliant but can be prohibited with modifier 163 */</span>
   SINT_32 array_ok2<span class="br0">&#91;</span>LIMIT<span class="br0">&#93;</span><span class="sy0">;</span>
   SINT_32 array_nok<span class="br0">&#91;</span><span class="nu0">100</span><span class="br0">&#93;</span><span class="sy0">;</span>        <span class="coMULTI">/* Not Compliant */</span>
&nbsp;
   SINT_32 <span class="sy0">*</span>ptr <span class="sy0">=</span> <span class="sy0">&amp;</span>array_ok1<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="sy0">;</span>  <span class="coMULTI">/* Not compliant but permitted with modifier 217*/</span>
&nbsp;
   array_nok<span class="br0">&#91;</span><span class="nu0">99</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="nu0">3</span><span class="sy0">;</span>             <span class="coMULTI">/* Not Compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2011 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_151'>151</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_217'>217</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s605' name='standard_s605'><div class='standard'><div>605&nbsp;S</div></div></a><div class='headline'>Use of long long.</div></div><p>This standard reports the use of the long long type, which is not part of the C 90 or C++ languages.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 605 S : Use of long long.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_605<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">long</span> <span class="kw4">long</span> llvar <span class="sy0">=</span> 3LL<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s606' name='standard_s606'><div class='standard'><div>606&nbsp;S</div></div></a><div class='headline'>Cast involving function pointer.</div></div><p>Casts to and from a function pointer can lead to undefined behaviour if a function is then called by means of a pointer whose type is not compatible with the called function.</p>
<p>This standard can be relaxed to allow casts to function pointers by setting the modifier <a href='standard_flags.htm#flag_398'>398</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">typedef</span> INT_32 <span class="br0">&#40;</span><span class="sy0">*</span> fptr<span class="br0">&#41;</span> <span class="br0">&#40;</span>INT_32 p<span class="br0">&#41;</span><span class="sy0">;</span> 
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 606 S : Cast involving function pointer.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> myProc<span class="br0">&#40;</span>UINT_32 x<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> static_606 <span class="br0">&#40;</span> UINT_32 u<span class="sy0">,</span> fptr fp <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  fp <span class="sy0">=</span> <span class="br0">&#40;</span>fptr<span class="br0">&#41;</span> <span class="sy0">&amp;</span> myProc<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
  fp <span class="sy0">=</span> <span class="br0">&#40;</span>fptr<span class="br0">&#41;</span> <span class="sy0">&amp;</span> u<span class="sy0">;</span>      <span class="coMULTI">/* not compliant if modifier is 0 */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp36-c'>EXP36-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_737'>737</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-2-6'>5-2-6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_398'>398</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.11.1'>R.11.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s607' name='standard_s607'><div class='standard'><div>607&nbsp;S</div></div></a><div class='headline'>Double negation found.</div></div><p>A double negation may be used to ensure the result of an expression is boolean (0/1). However, the use of a double negation can make code difficult to read and maintain, potentially obscuring the intentions of the programmer. </p>
<p>The use of such constructs should therefore be avoided.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 607 S : Double negation found.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_607<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 x <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
&nbsp;
  <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!!</span><span class="br0">&#40;</span>x <span class="sy0">==</span> <span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#123;</span>
    x <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span>
  <span class="br0">&#125;</span> 
  <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!!!</span><span class="br0">&#40;</span>x <span class="sy0">==</span> <span class="nu0">2</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#123;</span>
    x <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
&nbsp;
  <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!!!!</span><span class="br0">&#40;</span>x <span class="sy0">==</span> <span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#123;</span>
    x <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s608' name='standard_s608'><div class='standard'><div>608&nbsp;S</div></div></a><div class='headline'>Use of explicitly undefined language feature.</div></div><p>No reliance should be placed on undefined behaviour caused by the use of undefined language features specified in the language standard.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 608 S : Use of explicitly undefined language feature.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_608<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  INT_32 i <span class="sy0">=</span> <span class="nu0">3</span> u<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s609' name='standard_s609'><div class='standard'><div>609&nbsp;S</div></div></a><div class='headline'>Use of implicitly undefined language feature.</div></div><p>No reliance should be placed on undefined behaviour caused by the use of undefined language features.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 609 S : Use of implicitly undefined language feature.
 ********************************************************/</span> 
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s610' name='standard_s610'><div class='standard'><div>610&nbsp;S</div></div></a><div class='headline'>Label is unused.</div></div><p>The inclusion of unused labels in source code may lead to confusion over whether the label is intentionally not used. This detracts from long-term maintainability of the code.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 610 S : Label is unused.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_610<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   INT_16 x <span class="sy0">=</span> <span class="nu0">6</span><span class="sy0">;</span>
label1<span class="sy0">:</span>   <span class="coMULTI">/* not compliant */</span>
   x <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.2.6'>R.2.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s611' name='standard_s611'><div class='standard'><div>611&nbsp;S</div></div></a><div class='headline'>Line splice used in // comment.</div></div><p>The use of line-splicing in single-line comments can lead to confusion and the possibility of unintentional removal of executable code.</p>
<p>Programmers should make their intentions clear by replacing line splices with multiple single-line comments.  Testbed can be configured to permit line-splicing by setting the modifier <a href='standard_flags.htm#flag_402'>402</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 611 S : Line splice used in // comment.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_611<span class="br0">&#40;</span>BOOL test<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp;
   INT_32 x <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> <span class="co1">// not compliant  \
   if (test)</span>
   <span class="br0">&#123;</span>
     x <span class="sy0">=</span> <span class="nu0">10</span><span class="sy0">;</span>    <span class="coMULTI">/* This is always executed */</span>
   <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc04-c'>MSC04-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.3.2'>R.3.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s612' name='standard_s612'><div class='standard'><div>612&nbsp;S</div></div></a><div class='headline'>inline function should be declared static.</div></div><p>The use of an inline function with external linkage may lead to unexpected behaviour. It is undefined in some languages what happens if no definition of an inline function with external linkage is visible in a translation unit. Even if the definition is present, it is unspecified as to whether the function is inlined or not.</p>
<p>Both these problems can be avoided if the inline function is declared with internal linkage by using the static keyword.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 612 S : inline function should be declared static.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">static</span> INT_32 count <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
&nbsp;
<span class="kw2">inline</span> <span class="kw4">void</span> static_612 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>    <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  count<span class="sy0">++;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.10'>R.8.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s613' name='standard_s613'><div class='standard'><div>613&nbsp;S</div></div></a><div class='headline'>Use of restrict keyword.</div></div><p>The restrict keyword can be used as a declaration of intent to the compiler. It says that for the lifetime of a restrict-qualified pointer declaration, only the pointer itself (or a value derived from the pointer) shall be used to access the object addressed by the pointer.</p>
<p>Although this can lead to improved compiler optimisations, if there is an overlap in the memory addressed by restrict-qualified pointers then the compiler may generate code which does not behave as expected.</p>
<p>This standard is only applicable if using the C99 standard. It will only be enabled by setting the modifier <a href='standard_flags.htm#flag_350'>350</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 613 S : Use of restrict keyword.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_613 <span class="br0">&#40;</span>INT_32 <span class="sy0">*</span> restrict p<span class="sy0">,</span> <span class="coMULTI">/* not compliant */</span>
                        <span class="kw4">const</span> INT_32 <span class="sy0">*</span>q
                       <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="sy0">*</span>p <span class="sy0">=</span> <span class="sy0">*</span>q<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl33-c'>DCL33-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_350'>350</a> = 1</td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.14'>R.8.14</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_350'>350</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s614' name='standard_s614'><div class='standard'><div>614&nbsp;S</div></div></a><div class='headline'>Use of static keyword in array parameter.</div></div><p>The use of the static keyword in the declaration of an array parameter index can be used to inform the compiler that the array contains at least a specified number of elements. The compiler may use this information to generate more efficient code.</p>
<p>However, if the programmer passes an array which does not meet the minimum number of elements, the behaviour is undefined.</p>
<p>This standard is only applicable if using the C99 standard. It will only be enabled by setting the modifier <a href='standard_flags.htm#flag_350'>350</a> to 1 in the c/cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 614 S : Use of static keyword in array parameter.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_614 <span class="br0">&#40;</span> INT_16 a <span class="br0">&#91;</span> <span class="kw4">static</span> <span class="nu0">20</span> <span class="br0">&#93;</span> <span class="coMULTI">/* not compliant */</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.17.6'>R.17.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_350'>350</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s615' name='standard_s615'><div class='standard'><div>615&nbsp;S</div></div></a><div class='headline'>Conditional operator has incompatible types.</div></div><p>This standard performs strong type checking between the two alternatives of a ternary expression when the two types are pointers. This is a constraint error in C, but not all compilers detect this problem.</p>
<div class='title'>Example</div>
<pre class="code c">&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 615 S : Conditional operator has incompatible types.
 *******************************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_615<span class="br0">&#40;</span><span class="kw4">int</span> which<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">void</span> <span class="sy0">*</span>x<span class="sy0">;</span>
  <span class="kw4">union</span> 
  <span class="br0">&#123;</span>
    <span class="kw4">int</span> i<span class="sy0">;</span>
    <span class="kw4">double</span> d<span class="sy0">;</span>
  <span class="br0">&#125;</span> u<span class="sy0">;</span>
&nbsp;
  u.<span class="me1">i</span> <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/* not compliant; incompatible types */</span>
  x <span class="sy0">=</span> which <span class="sy0">?</span> <span class="sy0">&amp;</span>u.<span class="me1">i</span> <span class="sy0">:</span> <span class="sy0">&amp;</span>u.<span class="me1">d</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_144'>144</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.1.1'>3.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_1.1'>1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_1.1'>1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_1-0-1'>1-0-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_1.1'>1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.1'>R.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.3.2'>R2.3.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s616' name='standard_s616'><div class='standard'><div>616&nbsp;S</div></div></a><div class='headline'>Preprocessor result not 0 or 1.</div></div><p>Macro identifiers specified in #if pre-processor directive shall evaluate to 0 or 1.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/*******************************************************************
 * Standard 616 S : Preprocessor result not 0 or 1.
 *******************************************************************/</span>
&nbsp;
<span class="co2">#define ONE 1</span>
<span class="co2">#define ZERO 0</span>
&nbsp;
<span class="coMULTI">/* compliant set */</span>
<span class="co2">#if ONE</span>
<span class="kw4">int</span> ok1<span class="sy0">;</span>
<span class="co2">#elif ZERO</span>
<span class="kw4">int</span> ok2<span class="sy0">;</span>
<span class="co2">#elif 0</span>
<span class="kw4">int</span> ok3<span class="sy0">;</span>
<span class="co2">#elif 1</span>
<span class="kw4">int</span> ok4<span class="sy0">;</span>
<span class="co2">#elif ONE</span>
<span class="kw4">int</span> ok5<span class="sy0">;</span>
<span class="co2">#endif</span>
&nbsp;
<span class="co2">#if ZERO</span>
<span class="kw4">int</span> ok6<span class="sy0">;</span>
<span class="co2">#endif</span>
<span class="co2">#if 0</span>
<span class="kw4">int</span> ok7<span class="sy0">;</span>
<span class="co2">#endif</span>
<span class="co2">#if 1</span>
<span class="kw4">int</span> ok8<span class="sy0">;</span>
<span class="co2">#endif</span>
<span class="co2">#if ONE + ZERO</span>
<span class="kw4">int</span> ok9<span class="sy0">;</span>
<span class="co2">#endif</span>
<span class="co2">#if 7449 - 7000 - 448</span>
<span class="kw4">int</span> ok10<span class="sy0">;</span>
<span class="co2">#endif</span>
&nbsp;
<span class="coMULTI">/* not compliant; result not 0 or 1 */</span>
<span class="co2">#if 2</span>
<span class="kw4">int</span> duff1<span class="sy0">;</span>
<span class="co2">#endif</span>
&nbsp;
<span class="coMULTI">/* not compliant; result not 0 or 1*/</span>
<span class="co2">#if -1</span>
<span class="kw4">int</span> duff2<span class="sy0">;</span>
<span class="co2">#endif</span>
&nbsp;
<span class="kw4">void</span> static_616<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.20.8'>R.20.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s617' name='standard_s617'><div class='standard'><div>617&nbsp;S</div></div></a><div class='headline'>Function call may return unexpected value.</div></div><p>In C90 the behaviour is undefined if a function with no return expression is called and the missing value is used.  It is a constraint error in C99 to have a return statement without an expression unless the return type is void.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 617 S : Function call may return unexpected value.
 *************************************************************/</span>
&nbsp;
UINT_32 func_not_ok<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> 
<span class="br0">&#123;</span> 
  <span class="kw1">return</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> static_617<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span> 
  UINT_32 i <span class="sy0">=</span> func_not_ok<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span>
<span class="sy0">/</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s618' name='standard_s618'><div class='standard'><div>618&nbsp;S</div></div></a><div class='headline'>Use of memcmp between structures.</div></div><p>memcmp includes the padding data when comparing two structures, but the value of the padding bits is unspecified.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;string.h&gt;</span>
&nbsp;
<span class="kw4">struct</span> struct_a
<span class="br0">&#123;</span>
  UINT_32 value<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*********************************************************
 * Standard 618 S : Use of memcmp between structures.
 *********************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_618<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">struct</span> struct_a s1 <span class="sy0">=</span> <span class="br0">&#123;</span><span class="nu0">10</span><span class="br0">&#125;</span><span class="sy0">;</span>
  <span class="kw4">struct</span> struct_a s2 <span class="sy0">=</span> <span class="br0">&#123;</span><span class="nu0">10</span><span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
  BOOL test <span class="sy0">=</span> memcmp<span class="br0">&#40;</span><span class="sy0">&amp;</span>s1<span class="sy0">,</span> <span class="sy0">&amp;</span>s2<span class="sy0">,</span> <span class="kw4">sizeof</span><span class="br0">&#40;</span><span class="kw4">struct</span> struct_a<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp04-c'>EXP04-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_188'>188</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s619' name='standard_s619'><div class='standard'><div>619&nbsp;S</div></div></a><div class='headline'>Function address compared with zero or NULL.</div></div><div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 619 S : Function address compared with zero or NULL.
 *******************************************************************/</span>
&nbsp;
INT_32 fnA <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">return</span> <span class="nu0">1</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> static_619 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span> 
<span class="br0">&#123;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>fnA <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#123;</span>
     <span class="sy0">;</span>
  <span class="br0">&#125;</span>
&nbsp;
  <span class="kw1">if</span> <span class="br0">&#40;</span> fnA <span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#123;</span>
    <span class="sy0">;</span> 
  <span class="br0">&#125;</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span>
<span class="sy0">/</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s620' name='standard_s620'><div class='standard'><div>620&nbsp;S</div></div></a><div class='headline'>Initialisation designator duplicated.</div></div><p>The C standard does not specify what happens when the use of designated initializers causes the same element of an object to be initialised more than once.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">struct</span> enddate <span class="br0">&#123;</span> INT_32 year<span class="sy0">;</span> INT_32 month<span class="sy0">;</span> INT_32 day<span class="sy0">;</span> <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 620 S : Initialisation designator duplicated.
 ********************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_620<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span> 
  INT_32 a3<span class="br0">&#91;</span><span class="nu0">4</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span> <span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">5</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">4</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">3</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">2</span> <span class="br0">&#125;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
  <span class="kw4">struct</span> enddate last <span class="sy0">=</span> <span class="br0">&#123;</span> .<span class="me1">year</span> <span class="sy0">=</span> <span class="nu0">2012</span><span class="sy0">,</span> .<span class="me1">month</span> <span class="sy0">=</span> <span class="nu0">12</span><span class="sy0">,</span> .<span class="me1">year</span> <span class="sy0">=</span> <span class="nu0">2000</span> <span class="br0">&#125;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span>
<span class="sy0">/</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.9.4'>R.9.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c++.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s621' name='standard_s621'><div class='standard'><div>621&nbsp;S</div></div></a><div class='headline'>Variable-length array declared.</div></div><p>There are various unspecified and undefined behaviours associated with variable-length arrays. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**************************************************
 * Standard 621 S : Variable-length array declared.
 **************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_621 <span class="br0">&#40;</span>UINT_32 n<span class="br0">&#41;</span>
<span class="br0">&#123;</span> 
  INT_32 vla <span class="br0">&#91;</span> n <span class="br0">&#93;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span>
<span class="sy0">/</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.18.8'>R.18.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c++.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s622' name='standard_s622'><div class='standard'><div>622&nbsp;S</div></div></a><div class='headline'>Macro parameters are not unique within limits.</div></div><p>Macro parameter names will not rely on the significance of more than 31 characters, as required by the ISO standard.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/* not compliant as names are unique */</span>
<span class="co2">#define M( this_is_a_parameter_of_macro_m_first,  this_is_a_parameter_of_macro_m_second ) \
   ((this_is_a_parameter_of_macro_m_first) +(this_is_a_parameter_of_macro_m_second))</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*****************************************************************
 * Standard 622 S : Macro parameters are not unique within limits.
 *****************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> UINT_32 static_622<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">return</span> M <span class="br0">&#40;</span> 3U<span class="sy0">,</span> 5U <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2013 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.4'>R.5.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s623' name='standard_s623'><div class='standard'><div>623&nbsp;S</div></div></a><div class='headline'>String assigned to non const object.</div></div><p>String literals should only be assigned to objects with pointer to const char type.  This includes initialisation, assignments, function arguments and function returns.  </p>
<p>The location of a string literal is determined at the time the program is compiled. For example, it may be placed in an area of memory marked as read-only, or physically stored within the binary executable. It is unsafe to attempt to change any such text, as the consequences are unpredictable.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************
 *  Standard 623 S : String assigned to non const object.
 *******************************************************/</span> 
&nbsp;
CHAR <span class="sy0">*</span> return_string<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">return</span> <span class="st0">&quot;fred&quot;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> static_623<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
&nbsp;
  CHAR <span class="sy0">*</span> string_test <span class="sy0">=</span> <span class="st0">&quot;test&quot;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2013 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_str05-c'>STR05-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_741'>741</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.7.4'>R.7.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s626' name='standard_s626'><div class='standard'><div>626&nbsp;S</div></div></a><div class='headline'>#define of keyword.</div></div><p>The macro pre-processor can define keywords which can lead to confusion. </p>
<p>Note that MISRA-C:2012 checking needs to be enabled in order for this violation to be detected, either via selection of the MISRA-C:2012 programming model or by explicitly enabling the <a href='standard_flags.htm#flag_391'>391</a> modifier in the cvals.dat file (TBmisra license permitting). <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/****************************************
 * Standard 626 S : #define of keyword.
 ****************************************/</span> 
&nbsp;
<span class="coMULTI">/* not compliant */</span>
<span class="co2">#define int UINT_32</span>
&nbsp;
<span class="kw4">void</span> static_626<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2013 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.20.4'>R.20.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_391'>391</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s627' name='standard_s627'><div class='standard'><div>627&nbsp;S</div></div></a><div class='headline'>Initialiser both positional and designational.</div></div><p>The use of both positional and designated initialisers in the same initialisation is likely to indicate a programming error.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/***************************************************************
 * Standard 627 S : Initialiser both positional and designational.
 ***************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_627<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  INT_32 a1<span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span><span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span><span class="br0">&#123;</span><span class="nu0">0</span><span class="br0">&#125;</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">1</span><span class="br0">&#125;</span><span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span>
&nbsp;
  INT_32 a2<span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span><span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="br0">&#123;</span><span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">1</span><span class="br0">&#125;</span><span class="br0">&#125;</span><span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2013 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.9.2'>R.9.2</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.9.3'>R.9.3</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.9.4'>R.9.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c++.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s628' name='standard_s628'><div class='standard'><div>628&nbsp;S</div></div></a><div class='headline'>Macro not used in translation unit.</div></div><p>Redundant macros reduce the maintainability of code. </p>
<p>This standard does not apply to macro definitions that occur in regions of code that are omitted by the pre-processor.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="co2">#define SIZE_USED 6</span>
<span class="co2">#define DATA 3           /* not compliant */</span>
&nbsp;
<span class="coMULTI">/******************************************************
 * Standard 628 S : Macro not used in translation unit.
 *******************************************************/</span>
&nbsp;
INT_32 static_628<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
<span class="co2">#define SIZE_NOT_USED 6   /* not compliant */</span>
&nbsp;
<span class="kw1">return</span> SIZE_USED<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2013 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.2.5'>R.2.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s629' name='standard_s629'><div class='standard'><div>629&nbsp;S</div></div></a><div class='headline'>Divide by zero found.</div></div><p>Measures shall be taken to prevent run-time failures caused by integer divide by zero operations. </p>
<p>The user must then manually check whether the division is appropriately protected.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/***************************************
 * Standard 629 : Divide by zero found.
 ***************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_629<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   SINT_32 local_denominator <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
   SINT_32 numerator <span class="sy0">=</span> <span class="nu0">9</span><span class="sy0">;</span>
&nbsp;
   SINT_32 result <span class="sy0">=</span> numerator <span class="sy0">/</span> <span class="br0">&#40;</span> local_denominator <span class="sy0">-</span> <span class="nu0">1</span> <span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span> 
&nbsp;
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2013 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_int33-c'>INT33-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_369'>369</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_d.4.1'>D.4.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s630' name='standard_s630'><div class='standard'><div>630&nbsp;S</div></div></a><div class='headline'>Duplicated enumeration value.</div></div><p>The duplication of an enumeration constant may not be intentional and may lead to unexpected behaviour. Duplication is allowed if both enumeration constants are explicitly initialised to the same value.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 630 S : Duplicated enumeration value.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_630<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw2">enum</span> traffic<span class="br0">&#123;</span> red<span class="sy0">=</span><span class="nu0">3</span><span class="sy0">,</span> amber<span class="sy0">,</span> green<span class="sy0">,</span> yellow<span class="sy0">=</span><span class="nu0">4</span> <span class="br0">&#125;</span><span class="sy0">;</span> <span class="coMULTI">/* Non-compliant - yellow also 4 */</span>
&nbsp;
   <span class="kw2">enum</span> traffic_ok<span class="br0">&#123;</span> Xred<span class="sy0">=</span><span class="nu0">3</span><span class="sy0">,</span> Xamber<span class="sy0">=</span><span class="nu0">4</span><span class="sy0">,</span> Xgreen<span class="sy0">,</span> Xyellow<span class="sy0">=</span><span class="nu0">4</span> <span class="br0">&#125;</span><span class="sy0">;</span> <span class="coMULTI">/* Compliant */</span>
   <span class="coMULTI">/* ... */</span> 
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2013 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_738'>738</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.12'>R.8.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s631' name='standard_s631'><div class='standard'><div>631&nbsp;S</div></div></a><div class='headline'>Declaration not reachable.</div></div><p>Jumping over an initialisation will cause the object to have an indeterminate value when it is used.  Though space for the object is created at the start of the enclosing block, the initialisation does not occur until the initialisation statement is reached.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**********************************************
 * Standard 631 S : Declaration not reachable.
 **********************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_631<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">goto</span>  L1<span class="sy0">;</span>               
     UINT_16 x <span class="sy0">=</span> 10U<span class="sy0">;</span> <span class="coMULTI">/* not compliant - x is never initialised */</span>
  L1<span class="sy0">:</span>
     x <span class="sy0">=</span> x <span class="sy0">+</span> 1U<span class="sy0">;</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2013 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp33-c'>EXP33-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_457'>457</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.9.1'>R.9.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s632' name='standard_s632'><div class='standard'><div>632&nbsp;S</div></div></a><div class='headline'>Use of // comment in pre-processor directive or macro defn.</div></div><p>The single line comment // is not available in all compilers and should not be used.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="co2">#define SQ_2 (2*2) // Non-compliant comment</span>
&nbsp;
<span class="coMULTI">/******************************************************************************
 * Standard 632 S : Use of // comment in pre-processor directive or macro defn.
 ******************************************************************************/</span>
&nbsp;
INT_32 static_632<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">return</span> SQ_2<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2013 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_10.2.2'>10.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_1'>1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.1.1'>3.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.10.2.2'>4.10.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_1'>1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_2.2'>2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_1'>1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_2.2'>2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.2'>R.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_p1.1.1'>P1.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='vsos_model.htm'>VSOS</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c++.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s633' name='standard_s633'><div class='standard'><div>633&nbsp;S</div></div></a><div class='headline'>Use of a broken or risky cryptography algorithm.</div></div><p>The use of broken or risky cryptographic algorithms is an unnecessary risk that may result in the
exposure of sensitive information. This standard checks for the use various algorithms by highlighting the use of
CALG_DES, CALG_3DES or CALG_RC5 as a parameter to CryptDeriveKey. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &lt;wincrypt.h&gt;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 633 S : Use of a broken or risky cryptography algorithm.
 *******************************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_633<span class="br0">&#40;</span>HCRYPTPROV hProv<span class="sy0">,</span> HCRYPTHASH hHash<span class="sy0">,</span> HCRYPTKEY <span class="sy0">*</span>hKey<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   CryptDeriveKey<span class="br0">&#40;</span>hProv<span class="sy0">,</span> CALG_3DES<span class="sy0">,</span> hHash<span class="sy0">,</span> CRYPT_EXPORTABLE<span class="sy0">,</span> hKey<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* Not Compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2013 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_327'>327</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s634' name='standard_s634'><div class='standard'><div>634&nbsp;S</div></div></a><div class='headline'>Empty block found.</div></div><p>The use of empty block statements can either be due to incomplete code or deliberate policy to show that the possibility has been considered. The options flagged are: </p>
<pre>
	{ }
	{;}
</pre><p>The inclusion of a comment within the empty block statement { /*  */ } is deemed to indicate that the absence of executable code is deliberate, and hence no standard will report in this circumstance: </p>
<pre>
	{ /* ... */ }
</pre><div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 634 S : Empty block found
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> static_634 <span class="br0">&#40;</span>UINT_32 name_x<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 count <span class="sy0">=</span> 0u<span class="sy0">;</span>
&nbsp;
   <span class="kw1">if</span> <span class="br0">&#40;</span>name_x <span class="sy0">==</span> 0u<span class="br0">&#41;</span>
   <span class="br0">&#123;</span> count <span class="sy0">=</span> 1u<span class="sy0">;</span> <span class="br0">&#125;</span>
   <span class="kw1">else</span> 
   <span class="br0">&#123;</span>  <span class="br0">&#125;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
   <span class="kw1">for</span> <span class="br0">&#40;</span> count<span class="sy0">;</span> count <span class="sy0">&lt;</span> 10u<span class="sy0">;</span> count<span class="sy0">++</span> <span class="br0">&#41;</span>
   <span class="br0">&#123;</span> 
     <span class="sy0">;</span>  
   <span class="br0">&#125;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
   <span class="br0">&#123;</span>
     <span class="coMULTI">/* compliant empty block, unless modifier 422 set */</span>
   <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2013 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_398'>398</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_422'>422</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s635' name='standard_s635'><div class='standard'><div>635&nbsp;S</div></div></a><div class='headline'>Cast from pointer to float type.</div></div><p>A cast from a pointer to a float type shall not be performed, as the result is undefined. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/******************************************************
 * Standard 635 S : Cast from pointer to float type.
 ******************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_635 <span class="br0">&#40;</span>FLOAT_32 <span class="sy0">*</span>f_ptr<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  FLOAT_32 ss <span class="sy0">=</span> <span class="br0">&#40;</span>FLOAT_32<span class="br0">&#41;</span>f_ptr<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2013 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp11-c'>EXP11-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_737'>737</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_45'>45</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.12.1.1'>4.12.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_7.7'>7.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_45'>45</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_182'>182</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_11.2'>11.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_45'>45</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_11.2'>11.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.11.6'>R.11.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s636' name='standard_s636'><div class='standard'><div>636&nbsp;S</div></div></a><div class='headline'>Cast from float type to pointer.</div></div><p>A cast from a pointer to a float type shall not be performed, as the result is undefined. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/******************************************************
 * Standard 636 S : Cast from float type to pointer.
 ******************************************************/</span>
&nbsp;
<span class="kw4">void</span> static_636 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">void</span> <span class="sy0">*</span>p <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">void</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="nu17">3.4f</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2013 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp11-c'>EXP11-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_737'>737</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_45'>45</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.12.2.1'>4.12.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_7.7'>7.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_45'>45</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_182'>182</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_11.2'>11.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_45'>45</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_11.2'>11.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.11.6'>R.11.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s637' name='standard_s637'><div class='standard'><div>637&nbsp;S</div></div></a><div class='headline'># operand followed by ##.</div></div><p>The order of evaluation of the # and ## operators is unspecified, which can lead to unexpected behaviour. In particular, the result of the # operator is a string literal, which is unlikely to produce a valid token when concatenated with another pre-processing token.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/************************************************
 * Standard 637 S : # operand followed by ##.
 ************************************************/</span>
&nbsp;
<span class="co2">#define JOIN( x, y ) #x ## y</span>
                     <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw4">void</span> static_637<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    <span class="kw4">const</span> <span class="kw4">char</span> <span class="sy0">*</span>name <span class="sy0">=</span> JOIN <span class="br0">&#40;</span>Control<span class="sy0">,</span> <span class="nu0">1</span> <span class="br0">&#41;</span><span class="sy0">;</span>
                  <span class="coMULTI">/* syntax error unless ## is evaluated before # */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2013 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.20.11'>R.20.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s638' name='standard_s638'><div class='standard'><div>638&nbsp;S</div></div></a><div class='headline'>Memory allocation non-conformant with type.</div></div><div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdlib.h&gt; </span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * 638 S : Memory allocation non-conformant with type.
 *****************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_638 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
<span class="coMULTI">/* To be added */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2013 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_s639' name='standard_s639'><div class='standard'><div>639&nbsp;S</div></div></a><div class='headline'>Potentially missing else statement.</div></div><p>When an if statement is immediately followed by an opening {, it may indicate that an else or else if branch is missing.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * 639 S : Potentially missing else statement.
 *****************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> static_639<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 name_x <span class="sy0">=</span> 1u<span class="sy0">;</span>
&nbsp;
  <span class="kw1">if</span><span class="br0">&#40;</span>name_x <span class="sy0">==</span> 0u<span class="br0">&#41;</span>
  <span class="br0">&#123;</span> <span class="coMULTI">/* ... */</span> <span class="br0">&#125;</span>
  <span class="br0">&#123;</span> <span class="coMULTI">/* ... */</span> <span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2014 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_c1' name='standard_c1'><div class='standard'><div>1&nbsp;C</div></div></a><div class='headline'>Cyclomatic complexity greater than ***.</div></div><p>This is similar check to n lines of code. It is used to limit the size (and hence complexity) of procedures. The *** symbols refer to a user definable number for this standard. The configuration is made in the c/cppreport.dat or c/cpppen.dat file. Instructions for making alterations can be found in the manual. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 1 C : Cyclomatic Complexity greater than ***
 ********************************************************/</span> 
&nbsp;
BOOL isHexDigit<span class="br0">&#40;</span> CHAR Hex <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  BOOL bResult<span class="sy0">;</span>
&nbsp;
  bResult <span class="sy0">=</span> FALSE<span class="sy0">;</span>
&nbsp;
  <span class="kw1">if</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'0'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'1'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'2'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'3'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'4'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'5'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'6'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'7'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'8'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'9'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'A'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'a'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'B'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'b'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'C'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'c'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'D'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'d'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'E'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'e'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'F'</span><span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>Hex <span class="sy0">==</span> <span class="st0">'f'</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    bResult <span class="sy0">=</span> TRUE<span class="sy0">;</span>
  <span class="br0">&#125;</span>
&nbsp;
  <span class="kw1">return</span> bResult<span class="sy0">;</span>
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.16.9'>5.16.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_4.1'>4.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_3'>3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_3'>3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_c2' name='standard_c2'><div class='standard'><div>2&nbsp;C</div></div></a><div class='headline'>Procedure is not reducible in terms of intervals.</div></div><p>Reducibility in terms of interval analysis essentially means that the procedure is not a sequence of cleanly nested loops.</p>
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_c3' name='standard_c3'><div class='standard'><div>3&nbsp;C</div></div></a><div class='headline'>Procedure contains essential knots.</div></div><p>This means that the code is poorly structured and reordering the constructs might produce an improvement.  More information can be found on essential knots in the Testbed <a href='Testbed.book_dynamic trace selection - helpid_ 65875.pdf'>documentation</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/******************************************************************
 * Standard 2 C : Procedure is not reducible in terms of intervals.
 * Standard 3 C : Procedure contains essential knots.
 ******************************************************************/</span>
&nbsp;
<span class="kw4">void</span> complex_2_3 <span class="br0">&#40;</span> BOOL c_1<span class="sy0">,</span> BOOL c_2 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw1">if</span> <span class="br0">&#40;</span>c_1<span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
label1<span class="sy0">:</span> <span class="sy0">;</span>
   <span class="br0">&#125;</span>
   <span class="kw1">if</span> <span class="br0">&#40;</span>c_2<span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      <span class="kw1">goto</span> label1<span class="sy0">;</span>
   <span class="br0">&#125;</span>
<span class="br0">&#125;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_c4' name='standard_c4'><div class='standard'><div>4&nbsp;C</div></div></a><div class='headline'>Procedure is not structured.</div></div><p>This follows from the structured programming templates supplied. Details of the structure programming templates can be found in the Testbed <a href='../../help/testbed.book_flowgraphs - helpid_ 72273.pdf'>documentation</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">void</span> complex_4 <span class="br0">&#40;</span> BOOL c_3<span class="sy0">,</span> BOOL c_4 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
label1<span class="sy0">:</span>
   <span class="kw1">if</span> <span class="br0">&#40;</span>c_3<span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span>c_4<span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="kw1">goto</span> label1<span class="sy0">;</span> <span class="br0">&#125;</span>
   <span class="br0">&#125;</span>
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_c5' name='standard_c5'><div class='standard'><div>5&nbsp;C</div></div></a><div class='headline'>Procedure contains infinite loop.</div></div><p>An infinite loop may arise from a control flow loop that has no exit mechanism of any type.</p>
<p>Further infinite loop detection is performed in by <a href='standards.htm#standard_s26'>26 S</a> and <a href='standards.htm#standard_d28'>28 D</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">void</span> complex_5 <span class="br0">&#40;</span> <span class="kw4">void</span>  <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
label1<span class="sy0">:</span>
     <span class="coMULTI">/* .... */</span>
     <span class="kw1">goto</span> label1<span class="sy0">;</span>
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_835'>835</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_142'>142</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_2'>2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='tbrun_requires_model.htm'>TBrun Requires</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_c6' name='standard_c6'><div class='standard'><div>6&nbsp;C</div></div></a><div class='headline'>Procedure has more than one entry point.</div></div><p>This involves the use of entry statements which is compiler dependent.</p>
<div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.7.9'>3.7.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_c7' name='standard_c7'><div class='standard'><div>7&nbsp;C</div></div></a><div class='headline'>Procedure has more than one exit point.</div></div><p>Structured programming usually requires procedures to be single entry single exit. Exits occur at the end of the procedure and at each return statement in functions. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 7 C : Procedure has more than one exit point.
 ********************************************************/</span>
&nbsp;
INT_32 complex_7 <span class="br0">&#40;</span>INT_32 status<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw1">if</span> <span class="br0">&#40;</span> status <span class="sy0">==</span> <span class="nu0">0</span> <span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
       <span class="kw1">return</span> <span class="nu0">1</span><span class="sy0">;</span>
   <span class="br0">&#125;</span>
   <span class="kw1">return</span> <span class="nu0">2</span><span class="sy0">;</span>
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_82'>82</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_111'>111</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.7.9'>3.7.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.6'>9.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_5.9'>5.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_113'>113</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_208'>208</a>, <a href='lmtcp_model.htm#rule_lmtcp_356'>356</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_14.7'>14.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-6-5'>6-6-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_82'>82</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_14.7'>14.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.15.5'>R.15.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_6.2.c'>6.2.c</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m3.1.5'>M3.1.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_c8' name='standard_c8'><div class='standard'><div>8&nbsp;C</div></div></a><div class='headline'>Unused LDRA_INSPECTED annotation.</div></div><p>A spurious inspect annotation for a particular standard is present in the code. The line should be removed to avoid confusion and aid readability.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_c9' name='standard_c9'><div class='standard'><div>9&nbsp;C</div></div></a><div class='headline'>Ess Cyclomatic Complexity greater than ***.</div></div><p>Whereas cyclomatic complexity, v(G), is a measure of decision logic, essential cyclomatic complexity, ev(G), is a measure of the quality of that logic. It is derived as the cyclomatic complexity after structured programming primitives have been removed from the control graph. The reduced graph then gives an indication of the unstructured-ness of the code.</p>
<pre>1 &lt;= ev(G) &lt;= v(G)</pre><p>An essential complexity of 1 reflects a perfectly structured control graph. The essential cyclomatic complexity shall not be greater than the value quoted in the violation text. Poor structure makes software harder to understand and also impedes testing.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_c10' name='standard_c10'><div class='standard'><div>10&nbsp;C</div></div></a><div class='headline'>Loop depth greater than ***.</div></div><p>Loop nesting is both error prone and makes code difficult to understand and maintain. Loop depth shall be no greater than the specified limit. </p>
<p>The *** symbols refer to a user definable number, defaulting to 3 for this standard. The configuration is made in the c/cppreport.dat or c/cpppen.dat file. Instructions for making alterations can be found in the manual. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/***********************************************
 * Standard 10 C : Loop depth greater than ***.
 ***********************************************/</span>
&nbsp;
<span class="kw4">void</span> complex_10 <span class="br0">&#40;</span> UINT_32 ee<span class="sy0">,</span>
                  UINT_32 ff<span class="sy0">,</span>
                  UINT_32 gg<span class="sy0">,</span>
                  UINT_32 hh<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 aa<span class="sy0">,</span>
          bb<span class="sy0">,</span>
          cc<span class="sy0">,</span>
          dd<span class="sy0">;</span>
  <span class="kw1">for</span> <span class="br0">&#40;</span>aa <span class="sy0">=</span> 1U<span class="sy0">;</span> aa <span class="sy0">&lt;</span> ee<span class="sy0">;</span> aa<span class="sy0">++</span><span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="kw1">for</span> <span class="br0">&#40;</span>bb <span class="sy0">=</span> aa<span class="sy0">;</span> bb <span class="sy0">&lt;</span> ff<span class="sy0">;</span> bb<span class="sy0">++</span><span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
      <span class="kw1">for</span> <span class="br0">&#40;</span>cc <span class="sy0">=</span> bb<span class="sy0">;</span> cc <span class="sy0">&lt;</span> gg<span class="sy0">;</span> cc<span class="sy0">++</span><span class="br0">&#41;</span>
      <span class="br0">&#123;</span>
        <span class="kw1">for</span> <span class="br0">&#40;</span>dd <span class="sy0">=</span> cc<span class="sy0">;</span> dd <span class="sy0">&lt;</span> hh<span class="sy0">;</span> dd<span class="sy0">++</span><span class="br0">&#41;</span>  <span class="coMULTI">/* this takes loop depth to &gt; 3 */</span>
        <span class="br0">&#123;</span>
          <span class="coMULTI">/* something */</span>
        <span class="br0">&#125;</span>
      <span class="br0">&#125;</span>
    <span class="br0">&#125;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.4'>9.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_c11' name='standard_c11'><div class='standard'><div>11&nbsp;C</div></div></a><div class='headline'>More than *** depth 1 loops.</div></div><p>A series of same depth loops within a procedure indicates a poorly structured program, which is likely to be inefficient as well as difficult to maintain and test. The number of depth 1 loops shall be no greater than the specified limit. </p>
<p>The *** symbols refer to a user definable number, defaulting to 10 for this standard. The configuration is made in the c/cppreport.dat or c/cpppen.dat file. Instructions for making alterations can be found in the manual. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/***********************************************
 * Standard 11 C : More than *** depth 1 loops
 ***********************************************/</span>
&nbsp;
<span class="kw4">void</span> complex_11 <span class="br0">&#40;</span> UINT_32 zz <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 aa<span class="sy0">,</span>
          bb<span class="sy0">,</span>
          cc<span class="sy0">,</span>
          dd<span class="sy0">,</span>
          ee<span class="sy0">,</span>
          ff<span class="sy0">,</span>
          gg<span class="sy0">,</span>
          hh<span class="sy0">,</span>
          ii<span class="sy0">,</span>
          jj<span class="sy0">,</span>
          kk<span class="sy0">;</span>
&nbsp;
  <span class="kw1">for</span> <span class="br0">&#40;</span>aa <span class="sy0">=</span> 1U<span class="sy0">;</span> aa <span class="sy0">&lt;</span> zz<span class="sy0">;</span> aa<span class="sy0">++</span><span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
  <span class="br0">&#125;</span>
&nbsp;
  <span class="kw1">for</span> <span class="br0">&#40;</span>bb <span class="sy0">=</span> 1U<span class="sy0">;</span> bb <span class="sy0">&lt;</span> zz<span class="sy0">;</span> bb<span class="sy0">++</span><span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
  <span class="br0">&#125;</span>
&nbsp;
  <span class="kw1">for</span> <span class="br0">&#40;</span>cc <span class="sy0">=</span> 1U<span class="sy0">;</span> cc <span class="sy0">&lt;</span> zz<span class="sy0">;</span> cc<span class="sy0">++</span><span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
  <span class="br0">&#125;</span>
&nbsp;
  <span class="kw1">for</span> <span class="br0">&#40;</span>dd <span class="sy0">=</span> 1U<span class="sy0">;</span> dd <span class="sy0">&lt;</span> zz<span class="sy0">;</span> dd<span class="sy0">++</span><span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
  <span class="br0">&#125;</span>
&nbsp;
  <span class="kw1">for</span> <span class="br0">&#40;</span>ee <span class="sy0">=</span> 1U<span class="sy0">;</span> ee <span class="sy0">&lt;</span> zz<span class="sy0">;</span> ee<span class="sy0">++</span><span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
  <span class="br0">&#125;</span>
&nbsp;
  <span class="kw1">for</span> <span class="br0">&#40;</span>ff <span class="sy0">=</span> 1U<span class="sy0">;</span> ff <span class="sy0">&lt;</span> zz<span class="sy0">;</span> ff<span class="sy0">++</span><span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
  <span class="br0">&#125;</span>
&nbsp;
  <span class="kw1">for</span> <span class="br0">&#40;</span>gg <span class="sy0">=</span> 1U<span class="sy0">;</span> gg <span class="sy0">&lt;</span> zz<span class="sy0">;</span> gg<span class="sy0">++</span><span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
  <span class="br0">&#125;</span>
&nbsp;
  <span class="kw1">for</span> <span class="br0">&#40;</span>hh <span class="sy0">=</span> 1U<span class="sy0">;</span> hh <span class="sy0">&lt;</span> zz<span class="sy0">;</span> hh<span class="sy0">++</span><span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
  <span class="br0">&#125;</span>
&nbsp;
  <span class="kw1">for</span> <span class="br0">&#40;</span>ii <span class="sy0">=</span> 1U<span class="sy0">;</span> ii <span class="sy0">&lt;</span> zz<span class="sy0">;</span> ii<span class="sy0">++</span><span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
  <span class="br0">&#125;</span>
&nbsp;
  <span class="kw1">for</span> <span class="br0">&#40;</span>jj <span class="sy0">=</span> 1U<span class="sy0">;</span> jj <span class="sy0">&lt;</span> zz<span class="sy0">;</span> jj<span class="sy0">++</span><span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
  <span class="br0">&#125;</span>
&nbsp;
  <span class="kw1">for</span> <span class="br0">&#40;</span>kk <span class="sy0">=</span> 1U<span class="sy0">;</span> kk <span class="sy0">&lt;</span> zz<span class="sy0">;</span> kk<span class="sy0">++</span><span class="br0">&#41;</span>  <span class="coMULTI">/* this takes number of depth 1 loops to &gt; 10 */</span>
  <span class="br0">&#123;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_c12' name='standard_c12'><div class='standard'><div>12&nbsp;C</div></div></a><div class='headline'>More than *** knots.</div></div><p>A knot describes the incidence of one jump in the code crossing another. Hence the number of knots in a procedure is a measure of the disjointed-ness of the code and consequently its complexity. The specified complexity limit shall not be exceeded.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_c13' name='standard_c13'><div class='standard'><div>13&nbsp;C</div></div></a><div class='headline'>More then *** essential knots.</div></div><p>A knot describes the incidence of one jump in the code crossing another. The number of essential knots is a measure of the code complexity arising from unstructured constructs. It is derived as the number of knots remaining after structured programming primitives have been removed from the associated control graph. For a structured program the number of essential knots is 0. The specified complexity limit shall not be exceeded.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d1' name='standard_d1'><div class='standard'><div>1&nbsp;D</div></div></a><div class='headline'>Unused procedure parameter.</div></div><p>The procedure does not use the parameter in any way and the resultant computations will be unaffected if the parameter is removed. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************
 * Standard 1 D : Unused Procedure Parameter
 ********************************************/</span> 
&nbsp;
UINT_32 SDA_001<span class="br0">&#40;</span> UINT_32 p_1<span class="sy0">,</span> UINT_32 p_2 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 v_1<span class="sy0">;</span>
   v_1 <span class="sy0">=</span> p_1<span class="sy0">;</span>
   v_1<span class="sy0">++;</span>
   <span class="kw1">return</span> v_1<span class="sy0">;</span>
<span class="br0">&#125;</span>  <span class="coMULTI">/* not compliant - p_2 is not used */</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc13-c'>MSC13-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.2.10'>1.2.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_0-1-11'>0-1-11</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_0-1-12'>0-1-12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.2.7'>R.2.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.1.1'>M1.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='tbrun_requires_model.htm'>TBrun Requires</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d2' name='standard_d2'><div class='standard'><div>2&nbsp;D</div></div></a><div class='headline'>Function does not return a value on all paths.</div></div><p>A non-void function that does not return a value can cause undefined behaviour if the calling function tries to use the value.  </p>
<p>This standard checks for functions which have one path that returns a value and at least one other path that does not return a value.  This may be due to a missing return statement or a return statement containing a null expression. Note that in paths where an exception is thrown there will be no return value. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/***************************************************************
 * Standard 2 D : Function does not return a value on all paths.
 ***************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> INT_32 SDA_002<span class="br0">&#40;</span> INT_32 par_1 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span> par_1 <span class="sy0">==</span> <span class="nu0">0</span> <span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
  <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span> par_1 <span class="sy0">==</span> <span class="nu0">1</span> <span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="kw1">return</span> <span class="sy0">;</span>  <span class="coMULTI">/* return with null expression */</span>
  <span class="br0">&#125;</span>
  <span class="kw1">else</span>
  <span class="br0">&#123;</span>
    <span class="sy0">;</span>        <span class="coMULTI">/* missing return statement */</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.9.1'>5.9.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_9.1.1'>9.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_75'>75</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.9.1.1'>4.9.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_5.10'>5.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_75'>75</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_114'>114</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_209'>209</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_16.8'>16.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_8-4-3'>8-4-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_75'>75</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_16.8'>16.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.17.4'>R.17.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_x2.x'>X2.x</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d3' name='standard_d3'><div class='standard'><div>3&nbsp;D</div></div></a><div class='headline'>Actual parameter is also global to procedure.</div></div><p>This is generated when a procedure which uses a global variable x also has x as a formal parameter.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
UINT_32 glob1 <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 3 D : Actual Parameter is also global to procedure
 *************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> fn<span class="br0">&#40;</span> UINT_32 <span class="sy0">*</span>par_1 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="sy0">*</span>par_1 <span class="sy0">=</span> <span class="sy0">*</span>par_1 <span class="sy0">+</span> glob1<span class="sy0">++;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> SDA_003<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   fn<span class="br0">&#40;</span><span class="sy0">&amp;</span>glob1<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_148'>148</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d4' name='standard_d4'><div class='standard'><div>4&nbsp;D</div></div></a><div class='headline'>Variables declared but not used in code analysed.</div></div><p>Variables have not been used and hence can be removed. </p>
<p>This standard is superseded by <a href='standards.htm#standard_d94'>94 D</a> which provides a more detailed report. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/******************************************************************
 * Standard 4 D : Variables declared but not used in code analysed.
 ******************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> UINT_32 SDA_004<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 v_1<span class="sy0">,</span> v_2<span class="sy0">;</span>  <span class="coMULTI">/* v_2 is not used */</span>
&nbsp;
   v_1 <span class="sy0">=</span> 0U<span class="sy0">;</span>
   <span class="kw1">return</span> v_1<span class="sy0">;</span>
&nbsp;
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span></pre><div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d5' name='standard_d5'><div class='standard'><div>5&nbsp;D</div></div></a><div class='headline'>UR data flow anomalies found.</div></div><p>At least one variable is used before it is given a value. This result is generated regardless of whether a compiler claims to initialise all or some of the variables.</p>
<p>This standard is superseded by <a href='standards.htm#standard_d69'>69 D</a> which provides a more detailed report.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
UINT_32 SDA_005 <span class="br0">&#40;</span> <span class="kw4">void</span><span class="br0">&#41;</span> <span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*********************************************
 * Standard 5 D : UR data flow anomalies found.
 *********************************************/</span> 
&nbsp;
UINT_32 SDA_005 <span class="br0">&#40;</span> <span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 v_1 <span class="sy0">,</span> v_2 <span class="sy0">;</span>
&nbsp;
   v_1 <span class="sy0">=</span> v_2 <span class="sy0">;</span>   <span class="coMULTI">/* v_2 is undefined(U), but is then referenced(R) */</span>
   v_2 <span class="sy0">=</span> v_1 <span class="sy0">;</span>
   <span class="kw1">return</span> v_2 <span class="sy0">;</span>
&nbsp;
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d6' name='standard_d6'><div class='standard'><div>6&nbsp;D</div></div></a><div class='headline'>Recursion in procedure calls found.</div></div><p>Recursion is often banned because of the fear of running out of store, but recursive calls can also cause loops when the programmers are unaware of the calling structure. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;;</span>
&nbsp;
<span class="coMULTI">/******************************************************
 * Standard 6 D : Recursion in procedures calls found.
 ******************************************************/</span> 
&nbsp;
UINT_32 SDA_006<span class="br0">&#40;</span> UINT_32 par_a <span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
   UINT_32 result<span class="sy0">;</span>
   UINT_32 value<span class="sy0">;</span>
&nbsp;
   <span class="kw1">if</span> <span class="br0">&#40;</span>par_a <span class="sy0">!=</span> <span class="nu0">1</span> <span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      value <span class="sy0">=</span> par_a<span class="sy0">;</span>
      value<span class="sy0">--;</span>
&nbsp;
      result <span class="sy0">=</span> SDA_006<span class="br0">&#40;</span> value <span class="br0">&#41;</span> <span class="sy0">*</span> par_a<span class="sy0">;</span>
   <span class="br0">&#125;</span>
   <span class="kw1">else</span>
   <span class="br0">&#123;</span>
      result<span class="sy0">=</span>1u<span class="sy0">;</span>
   <span class="br0">&#125;</span>
   <span class="kw1">return</span> <span class="br0">&#40;</span>result<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
UINT_32 Test_006<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
   UINT_32 result<span class="sy0">;</span>
   result <span class="sy0">=</span> SDA_006<span class="br0">&#40;</span> <span class="nu0">20</span> <span class="br0">&#41;</span><span class="sy0">;</span>
   <span class="kw1">return</span> result<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_674'>674</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_70'>70</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_117'>117</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_70'>70</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_1'>1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_119'>119</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_219'>219</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_16.2'>16.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_7-5-4'>7-5-4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_70'>70</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_16.2'>16.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.17.2'>R.17.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r3.4.1'>R3.4.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d7' name='standard_d7'><div class='standard'><div>7&nbsp;D</div></div></a><div class='headline'>DU data flow anomalies found.</div></div><p>DU anomalies are unnecessary and can always be removed with a consequent improvement in the readability and efficiency of the code. </p>
<p>This standard is superseded by <a href='standards.htm#standard_d70'>70 D</a> which provides a more detailed report.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**********************************************
 * Standard 7 D : DU data flow anomalies found.
 **********************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> SDA_007<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   BOOL    flag <span class="sy0">=</span> FALSE<span class="sy0">;</span>  <span class="coMULTI">/* flag is defined(D), but never used */</span>
   <span class="coMULTI">/* ... */</span> 
&nbsp;
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d8' name='standard_d8'><div class='standard'><div>8&nbsp;D</div></div></a><div class='headline'>DD data flow anomalies found.</div></div><p>A variable exists that has been defined, and has been redefined without being referenced after the definition. DD anomalies can arise from programming errors. Information about the variables affected are listed in the Data Flow Analysis Report.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**********************************************
 * Standard 8 D : DD data flow anomalies found.
 **********************************************/</span> 
&nbsp;
<span class="kw4">static</span> BOOL SDA_008<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   BOOL flag <span class="sy0">=</span> FALSE<span class="sy0">;</span>
&nbsp;
   flag <span class="sy0">=</span> TRUE<span class="sy0">;</span>  <span class="coMULTI">/* flag hasn't been referenced after its definition */</span>
&nbsp;
   <span class="kw1">return</span> flag<span class="sy0">;</span>
&nbsp;
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_563'>563</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_7'>7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.2.2'>R.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_x1.x'>X1.x</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d9' name='standard_d9'><div class='standard'><div>9&nbsp;D</div></div></a><div class='headline'>Defined parameter has possible clear path.</div></div><p>In this case a call to the procedure does not necessarily mean that an output variable is given a value. This can lead to serious errors. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/***********************************************************
 * Standard 9 D : Defined parameter has possible clear path.
 ***********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> SDA_009<span class="br0">&#40;</span>UINT_32 p_1<span class="sy0">,</span> UINT_32<span class="sy0">*</span> p_2 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw1">if</span> <span class="br0">&#40;</span>p_1 <span class="sy0">!=</span> <span class="nu0">5</span><span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      <span class="sy0">*</span>p_2 <span class="sy0">=</span> p_1 <span class="sy0">+</span> <span class="nu0">6</span><span class="sy0">;</span>
   <span class="br0">&#125;</span>
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant - p_2 is not given a value in the else branch */</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_151'>151</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d10' name='standard_d10'><div class='standard'><div>10&nbsp;D</div></div></a><div class='headline'>Globals used inside procedure.</div></div><p>Some authorities believe that the use of global variables is bad programming practice. Certainly it is more difficult to reuse procedures that use such variables. Furthermore, the order of initialisation across translation units is unspecified, and so any module which contains the appropriate declaration may access a global variable defined elsewhere before it has received an initial value.   </p>
<p>This standard is limited to non-constant variables that have external linkage, since these are the variables that might be altered in other translation units. It will also be generated for procedures that indirectly access global variables through procedure calls. Checks on global function pointers are covered by <a href='standards.htm#standard_d95'>95 D</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
UINT_32 globl <span class="sy0">=</span> 1U<span class="sy0">;</span>         <span class="coMULTI">/* Global variable  */</span>
&nbsp;
<span class="coMULTI">/************************************************
 * Standard 10 D : Globals used inside procedure
 ************************************************/</span> 
&nbsp;
<span class="kw4">void</span> direct_access1<span class="br0">&#40;</span> UINT_32 <span class="sy0">*</span> par_1 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">*</span>par_1 <span class="sy0">=</span> <span class="sy0">*</span>par_1 <span class="sy0">+</span> globl<span class="sy0">;</span>  <span class="coMULTI">/* Global variable accessed */</span> 
&nbsp;
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> indirect_access<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 local_var <span class="sy0">=</span> 42U<span class="sy0">;</span>     <span class="coMULTI">/* Local variable */</span>
  direct_access1<span class="br0">&#40;</span><span class="sy0">&amp;</span>local_var<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* Indirect access: called procedure accesses a global */</span>
&nbsp;
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> SDA_010<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  indirect_access<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
             <span class="coMULTI">/* Indirect access: called procedure calls a procedure
              * which accesses a global.
              */</span> 
<span class="br0">&#125;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_4.6'>4.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_6.6'>6.6</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_8.2.2'>8.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d11' name='standard_d11'><div class='standard'><div>11&nbsp;D</div></div></a><div class='headline'>Parameters do not match expected actions.</div></div><p>This arises if either a purely input variable is given a value or an input/output variable is not given a value.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**********************************************************
 * Standard 11 D : Parameters do not match expected actions
 **********************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> SDA_011<span class="br0">&#40;</span> UINT_32 par_1<span class="sy0">,</span> UINT_32 par_2 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw1">if</span> <span class="br0">&#40;</span>par_2 <span class="sy0">!=</span> 1U<span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      par_1 <span class="sy0">=</span> 0U<span class="sy0">;</span>  <span class="coMULTI">/* par_1 is treated as an input only variable */</span>
   <span class="br0">&#125;</span>
   <span class="kw1">else</span>
   <span class="br0">&#123;</span>
      par_1<span class="sy0">=</span> 1U<span class="sy0">;</span>
   <span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span></pre><div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d12' name='standard_d12'><div class='standard'><div>12&nbsp;D</div></div></a><div class='headline'>Referenced parameter has possible clear path.</div></div><p>This is similar to standard 9 D but in this case an input value is not used on all paths. Generally it is not dangerous.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/***************************************************************
 * Standard 12 D : Referenced parameter has possible clear path.
 ***************************************************************/</span> 
&nbsp;
UINT_32 SDA_012<span class="br0">&#40;</span> UINT_32 par_1<span class="sy0">,</span> UINT_32 par_2 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 var_1<span class="sy0">;</span>
&nbsp;
   var_1 <span class="sy0">=</span> par_2<span class="sy0">;</span>
&nbsp;
   <span class="kw1">if</span> <span class="br0">&#40;</span>par_2 <span class="sy0">!=</span> <span class="nu0">1</span><span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      var_1 <span class="sy0">=</span> par_1<span class="sy0">;</span>
   <span class="br0">&#125;</span>
   <span class="coMULTI">/* par_1 not used in function is par_2 == 1 */</span> 
   <span class="kw1">return</span> <span class="br0">&#40;</span>var_1<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="br0">&#125;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d13' name='standard_d13'><div class='standard'><div>13&nbsp;D</div></div></a><div class='headline'>Global used in procedure matches local parameter.</div></div><p>This standard checks that whether a global object is accessed in a function that is called with an object which is a function parameter with the same name.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
INT_32 globl <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 13 D : Global used in procedure matches local parameter.
 *******************************************************************/</span>
&nbsp;
<span class="kw4">void</span> fn_13<span class="br0">&#40;</span> INT_32 <span class="sy0">*</span> pVar <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="sy0">*</span>pVar <span class="sy0">=</span> <span class="sy0">*</span>pVar <span class="sy0">+</span> globl<span class="sy0">;</span>  <span class="coMULTI">/* global accessed in procedure */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> SDA_013<span class="br0">&#40;</span> INT_32 <span class="sy0">*</span> globl <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  fn_13<span class="br0">&#40;</span> globl <span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant - function call with globl which is a function parameter */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d14' name='standard_d14'><div class='standard'><div>14&nbsp;D</div></div></a><div class='headline'>Attempt to change parameter passed by value.</div></div><p>C will allow you to assign to call by value parameters which could be an error.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 14 D : Attempt to change parameter passed by value.
 ************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> SDA_014<span class="br0">&#40;</span> UINT_32 par_1<span class="sy0">,</span> UINT_32 par_2 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw1">if</span> <span class="br0">&#40;</span>par_2 <span class="sy0">!=</span> 1U<span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      par_1 <span class="sy0">=</span> 0U<span class="sy0">;</span>  <span class="coMULTI">/* assignment to call by value parameter */</span>
   <span class="br0">&#125;</span>
   <span class="kw1">else</span>
   <span class="br0">&#123;</span>
      par_1<span class="sy0">=</span> 1U<span class="sy0">;</span>
   <span class="br0">&#125;</span>
&nbsp;
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_152'>152</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.17.8'>R.17.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_x1.x'>X1.x</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d15' name='standard_d15'><div class='standard'><div>15&nbsp;D</div></div></a><div class='headline'>Unused procedural parameter.</div></div><p>Ensure that any procedural parameters left unused have not been done so in error. If a parameter is not required, for readability and easier understanding of the code it should be removed. </p>
<p>This standard covers just procedural parameters, other unused parameters to procedures are covered by <a href='standards.htm#standard_d1'>1 D</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/***********************************************
 * Standard 15 D : Unused procedural parameter.
 ************************************************/</span>
&nbsp;
<span class="kw4">void</span> SDA_015<span class="br0">&#40;</span><span class="kw4">void</span> <span class="br0">&#40;</span><span class="sy0">*</span>p_proc_pointer<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.16.8'>5.16.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc13-c'>MSC13-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.2.10'>1.2.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_398'>398</a>, <a href='cwe_model.htm#rule_cwe_747'>747</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_5.2.1'>5.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_0-1-11'>0-1-11</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_0-1-12'>0-1-12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.2.7'>R.2.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.1.1'>M1.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d16' name='standard_d16'><div class='standard'><div>16&nbsp;D</div></div></a><div class='headline'>Identical actual parameters in call.</div></div><p>If a procedure is called with two identical actual parameters then there is an equivalence between the corresponding formal parameters but the actual form of this equivalence is compiler dependent.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> Test_016<span class="br0">&#40;</span> UINT_32 <span class="sy0">*</span>par_1<span class="sy0">,</span> UINT_32 <span class="sy0">*</span>par_2 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw1">if</span> <span class="br0">&#40;</span>par_1 <span class="sy0">==</span> par_2<span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      <span class="coMULTI">/* ... */</span> 
   <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 16 D : Identical actual parameters in call.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> SDA_016<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 var <span class="sy0">=</span> <span class="nu0">6</span><span class="sy0">;</span>
&nbsp;
   Test_016<span class="br0">&#40;</span> <span class="sy0">&amp;</span>var <span class="sy0">,</span> <span class="sy0">&amp;</span>var <span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_153'>153</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d17' name='standard_d17'><div class='standard'><div>17&nbsp;D</div></div></a><div class='headline'>Identifier not unique within *** characters.</div></div><p>The maximum sequence for distinction between identifiers is compiler and linker dependent. The user can specify the maximum sequence in the cpen.dat file and this standard will warn if there are any which are identical up to this limit. The *** symbols refer to a user definable number for this standard. The configuration is made in the c/cpppen.dat file. </p>
<p>This standard compares function, variable, component and label identifiers. The checks are extended in <a href='standards.htm#standard_x61'>61 X</a> to include other forms of identifiers.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**************************************************************
 * Standard 17 D : Identifier not unique within *** characters.
 * Does not compile under VC++ without /H
 **************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> UINT_32 SDA_017<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 This_identifier_exceeds_thirty_one_characters_in_length<span class="sy0">;</span>
   UINT_32 This_identifier_exceeds_thirty_one_characters_in_length_also<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
   <span class="coMULTI">/* ... */</span> 
   This_identifier_exceeds_thirty_one_characters_in_length       <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
   This_identifier_exceeds_thirty_one_characters_in_length_also  <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span>
&nbsp;
   <span class="kw1">return</span> <span class="br0">&#40;</span>This_identifier_exceeds_thirty_one_characters_in_length<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl32-c'>DCL32-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_11'>11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.5.5'>3.5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_11'>11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_46'>46</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_69'>69</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_1.4'>1.4</a>, <a href='misra-ac_model.htm#rule_misra-ac_5.1'>5.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_11'>11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_1.4'>1.4</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.1'>5.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.1'>R.5.1</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.2'>R.5.2</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.3'>R.5.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d18' name='standard_d18'><div class='standard'><div>18&nbsp;D</div></div></a><div class='headline'>Identifier name reused.</div></div><p>This standard also reports when names are duplicated across file boundaries. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
UINT_32 Re_Used<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/************************************************
 * Standard 18 D : Identifier name reused.
 * Does not compile with VC++
 ************************************************/</span> 
&nbsp;
UINT_32 SDA_018<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 Re_Used<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
   Re_Used <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
   <span class="kw1">return</span> Re_Used<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_12'>12</a>, <a href='dera_model.htm#rule_dera_21'>21</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.5.5'>3.5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_21'>21</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.2'>5.2</a>, <a href='misra-ac_model.htm#rule_misra-ac_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_12'>12</a>, <a href='misra-c_1998_model.htm#rule_misra-c%3A1998_21'>21</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.2'>5.2</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.3'>R.5.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d19' name='standard_d19'><div class='standard'><div>19&nbsp;D</div></div></a><div class='headline'>Procedure called before being defined.</div></div><p>Some compilers use default values if a use is found before a declaration or definition. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 19 D : Procedure called before being defined.
 ********************************************************/</span> 
&nbsp;
UINT_16 SDA_019<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_16 retval<span class="sy0">;</span>
   retval <span class="sy0">=</span> Test_19d<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
   <span class="kw1">return</span> <span class="br0">&#40;</span>retval<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
UINT_32 Test_19d<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="coMULTI">/* ... */</span> 
   <span class="kw1">return</span> <span class="br0">&#40;</span>1u<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_20'>20</a>, <a href='dera_model.htm#rule_dera_71'>71</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_20'>20</a>, <a href='his_model.htm#rule_his_71'>71</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_20'>20</a>, <a href='misra-c_1998_model.htm#rule_misra-c%3A1998_71'>71</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d20' name='standard_d20'><div class='standard'><div>20&nbsp;D</div></div></a><div class='headline'>No declaration for variable found before use.</div></div><p>Some compilers will assume a default type if a variable is used before a declaration is found.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/***************************************************************
 * Standard 20 D : No declaration for variable found before use.
 * Does not compile with VC++
 ***************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> UINT_32 SDA_020<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 retval<span class="sy0">;</span>
&nbsp;
   retval <span class="sy0">=</span> undeclared<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
   <span class="kw1">return</span> <span class="br0">&#40;</span>retval<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_398'>398</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_20'>20</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_20'>20</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_16'>16</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_20'>20</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d22' name='standard_d22'><div class='standard'><div>22&nbsp;D</div></div></a><div class='headline'>Function has global variable side effects.</div></div><p>A function has global side effects if it can return a value through its global variables as well as by means of its parameters (possibly) and its return type. The safest form is one which only returns a value through the return type.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
UINT_32 global <span class="sy0">=</span> 0U<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/************************************************************
 * Standard 22 D : Function has global variable side effects.
 ************************************************************/</span> 
&nbsp;
UINT_32 SDA_022<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   global<span class="sy0">++;</span>
   <span class="kw1">return</span> global<span class="sy0">;</span>
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.10.1'>3.10.1</a>, <a href='fsb582-c_model.htm#rule_fsb582-c_3.10.2'>3.10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.17'>9.17</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_286'>286</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.13.2'>R.13.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d23' name='standard_d23'><div class='standard'><div>23&nbsp;D</div></div></a><div class='headline'>Function has parameter side effects.</div></div><p>A function has parameter side effects if it can return a value through its parameters as well as by means of its globals (possibly) and its return type. The safest form is one which only returns a value through the return type. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 23 D : Function has parameter side effects.
 ********************************************************/</span> 
&nbsp;
UINT_32 SDA_023<span class="br0">&#40;</span> UINT_32 <span class="sy0">*</span> par_1 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="sy0">*</span>par_1 <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
   <span class="kw1">return</span> <span class="br0">&#40;</span><span class="sy0">*</span>par_1<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d24' name='standard_d24'><div class='standard'><div>24&nbsp;D</div></div></a><div class='headline'>Procedure definition has no associated prototype.</div></div><p>In general providing prototypes is considered to be good practice and is essential if the uses precede the definition. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 24 D : Procedure definition has no associated prototype.
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> SDA_024<span class="br0">&#40;</span> UINT_32 <span class="sy0">*</span> par_1 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="sy0">*</span>par_1 <span class="sy0">=</span>  <span class="nu0">1</span><span class="sy0">;</span>
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl31-c'>DCL31-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_71'>71</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_107'>107</a>, <a href='eads-c_model.htm#rule_eads-c_118'>118</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_71'>71</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_230'>230</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_8.1'>8.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_71'>71</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_8.1'>8.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_6.2.d'>6.2.d</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m4.4.3'>M4.4.3</a>, <a href='sec-c_model.htm#rule_sec-c_r2.8.3'>R2.8.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d25' name='standard_d25'><div class='standard'><div>25&nbsp;D</div></div></a><div class='headline'>Scope of variable could be reduced.</div></div><p>Variables should always be declared in the smallest scope consistent with their use. This standard reports the names of variables which could be moved to an inner scope. It does not take account of possible uses of a global variable in other files in a system.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
UINT_32 g_var_1 <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 25 D : Scope of variable could be reduced
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> SDA_025<span class="br0">&#40;</span> UINT_32 <span class="sy0">*</span> par_1 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="sy0">*</span>par_1 <span class="sy0">=</span>  g_var_1<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_22'>22</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_8.4.4'>8.4.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_22'>22</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_6'>6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_249'>249</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_8.7'>8.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_3-4-1'>3-4-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_22'>22</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_8.7'>8.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.9'>R.8.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_7.2.b'>7.2.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m2.2.1'>M2.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d26' name='standard_d26'><div class='standard'><div>26&nbsp;D</div></div></a><div class='headline'>Variable should be defined once in only one file.</div></div><p>This standard reports variables that have more than one definition, either within a file, or across a set of files. Note for that C++, const variable declarations are excluded from this check.</p>
<p>Note: The violation message appears at the start of the file.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 26 D : Variable should be defined once in only one file.
 *******************************************************************/</span> 
&nbsp;
UINT_32 SDA_026<span class="sy0">;</span>
SINT_32 SDA_026<span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> SDA_026<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_25'>25</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_25'>25</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_139'>139</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_253'>253</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_8.8'>8.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_3-2-2'>3-2-2</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_3-2-4'>3-2-4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_25'>25</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_8.8'>8.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.6'>R.8.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d27' name='standard_d27'><div class='standard'><div>27&nbsp;D</div></div></a><div class='headline'>Variable should be declared static.</div></div><p>A variable that is of file scope and not used in another file should be declared with the static qualifier.</p>
<p>This standard is only enabled when the code is run as a system set.</p>
<div class='title'>Example</div>
<p>Sda_027_1.c</p>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * Standard 27 D : Variable should be declared static.
 *****************************************************/</span>
&nbsp;
INT_32 global_1 <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>     <span class="coMULTI">/* not compliant */</span>
INT_32 global_2 <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span>     <span class="coMULTI">/* compliant as used in other file */</span>
&nbsp;
<span class="kw4">static</span> INT_32 SDA_027<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">return</span> global_2 <span class="sy0">-</span> global_1<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
INT_32 main<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">return</span>  SDA_027<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">+</span> SDA_027_2<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><p>Sda_027_2.c</p>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
INT_32 global_2<span class="sy0">;</span>
&nbsp;
INT_32 SDA_027_2 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw1">return</span> global_2<span class="sy0">;</span>
<span class="br0">&#125;</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl15-c'>DCL15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_736'>736</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_23'>23</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_97'>97</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.5.4'>3.5.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_23'>23</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_250'>250</a>, <a href='lmtcp_model.htm#rule_lmtcp_251'>251</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_8.10'>8.10</a>, <a href='misra-ac_model.htm#rule_misra-ac_8.11'>8.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_3-3-1'>3-3-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_23'>23</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_8.10'>8.10</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_8.11'>8.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.7'>R.8.7</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.8'>R.8.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_1.8.a'>1.8.a</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m2.2.2'>M2.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d28' name='standard_d28'><div class='standard'><div>28&nbsp;D</div></div></a><div class='headline'>Potentially infinite loop found.</div></div><p>The value required to exit a looping sequence is not assigned in every path through the sequence.</p>
<p>Further infinite loop detection is performed in by <a href='standards.htm#standard_s26'>26 S</a> and <a href='standards.htm#standard_c5'>5 C</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 28 D : Potentially Infinite loop found.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> SDA_028<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   INT_32 i <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
   BOOL flag <span class="sy0">=</span> TRUE<span class="sy0">;</span>
&nbsp;
   <span class="kw1">while</span> <span class="br0">&#40;</span>flag<span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
   <span class="br0">&#123;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span>i<span class="sy0">==</span><span class="nu0">0</span><span class="br0">&#41;</span>
      <span class="br0">&#123;</span>
          flag <span class="sy0">=</span> FALSE<span class="sy0">;</span>
      <span class="br0">&#125;</span>
   <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_835'>835</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_142'>142</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_133'>133</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_2'>2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.2.1'>R.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.9.2'>M1.9.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='tbrun_requires_model.htm'>TBrun Requires</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d29' name='standard_d29'><div class='standard'><div>29&nbsp;D</div></div></a><div class='headline'>Partially used structure parameter.</div></div><p>A structure has been used as a parameter to a procedure call, but some parts of it have not been used.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">struct</span> s29
<span class="br0">&#123;</span>
   UINT_32 u1<span class="sy0">;</span>
   UINT_32 u2<span class="sy0">;</span>
   UINT_32 u3<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/****************************************************
 * Standard 29 D : Partially used structure parameter.
 ****************************************************/</span> 
&nbsp;
<span class="kw4">static</span> UINT_32 SDA_029<span class="br0">&#40;</span> <span class="kw4">struct</span> s29 s <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 result<span class="sy0">;</span>
   result <span class="sy0">=</span> s.<span class="me1">u1</span> <span class="sy0">+</span> s.<span class="me1">u2</span><span class="sy0">;</span>
   <span class="kw1">return</span> <span class="br0">&#40;</span>result<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant  - u3 member of s has not been used */</span>
&nbsp;
<span class="kw4">static</span> UINT_32 Test_029<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 a<span class="sy0">;</span>
   <span class="kw4">struct</span> s29 s<span class="sy0">;</span>
&nbsp;
   s.<span class="me1">u1</span><span class="sy0">=</span>1U<span class="sy0">;</span>
   s.<span class="me1">u2</span><span class="sy0">=</span>2U<span class="sy0">;</span>
   s.<span class="me1">u3</span><span class="sy0">=</span>3U<span class="sy0">;</span>
&nbsp;
   a <span class="sy0">=</span> SDA_029<span class="br0">&#40;</span> s <span class="br0">&#41;</span><span class="sy0">;</span>
   <span class="kw1">return</span> <span class="br0">&#40;</span>a<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d33' name='standard_d33'><div class='standard'><div>33&nbsp;D</div></div></a><div class='headline'>No real declaration for external variable.</div></div><p>A variable has been declared 'external' in each of the program components. There is no real declaration.</p>
<p>This standard is only enabled when the code is run as a system set with at least 2 files.</p>
<div class='title'>Example</div>
<p>Sda_033_1.c</p>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw2">extern</span> UINT_32 global <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="kw2">extern</span> UINT_32 sda_033_2<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/************************************************************
 * Standard 33 D : No real declaration for external variable.
 ************************************************************/</span>
&nbsp;
UINT_32 sda_033_1<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">return</span> sda_033_2<span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><p>Sda_033_2.c</p>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw2">extern</span> UINT_32 global<span class="sy0">;</span>
&nbsp;
UINT_32 sda_033_2<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  global<span class="sy0">++;</span>
  <span class="kw1">return</span> global<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_25'>25</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_25'>25</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_8.9'>8.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_3-2-4'>3-2-4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_25'>25</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_8.9'>8.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.6'>R.8.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m4.4.3'>M4.4.3</a>, <a href='sec-c_model.htm#rule_sec-c_m4.4.4'>M4.4.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d34' name='standard_d34'><div class='standard'><div>34&nbsp;D</div></div></a><div class='headline'>Procedure name re-used in different files.</div></div><p>Two C files can contain procedures with the same name, leading to confusion and errors.</p>
<p>This standard is only enabled when the code is run as a system set with a least two files.</p>
<div class='title'>Example</div>
<p>Sda_034_1.c</p>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/***********************************************************
 * Standard 34 D : Procedure name re-used in different files
 ***********************************************************/</span> 
&nbsp;
UINT_32 SDA_034<span class="br0">&#40;</span> UINT_32 a1 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 b <span class="sy0">=</span> a1<span class="sy0">;</span>
  b<span class="sy0">--;</span>
  <span class="kw1">return</span> b<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">static</span> UINT_32 test_034<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 a <span class="sy0">=</span> 1U<span class="sy0">;</span>
  a <span class="sy0">=</span> SDA_034<span class="br0">&#40;</span> a <span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">return</span> a<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 * 
 */</span></pre><p>Sda_034_2.c</p>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/************************************************************
 * Standard 34 D : Procedure name re-used in different files.
 ************************************************************/</span> 
&nbsp;
SINT_32 SDA_034<span class="br0">&#40;</span> SINT_32 a1 <span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  SINT_32 b <span class="sy0">=</span> a1<span class="sy0">;</span>
  b<span class="sy0">--;</span>
  <span class="kw1">return</span> b<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_25'>25</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_25'>25</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_8.9'>8.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_3-2-2'>3-2-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_25'>25</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_8.9'>8.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.6'>R.8.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m4.4.3'>M4.4.3</a>, <a href='sec-c_model.htm#rule_sec-c_m4.4.4'>M4.4.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d35' name='standard_d35'><div class='standard'><div>35&nbsp;D</div></div></a><div class='headline'>Expression has side effects.</div></div><p>This can occur with operators such as ++ used in expressions. For example: x = A[j] + j++; is potentially ambiguous depending on the order of evaluation of the right hand side.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/************************************************
 * Standard 35 D : Expression has side effects.
 ************************************************/</span> 
&nbsp;
UINT_32 SDA_035<span class="br0">&#40;</span> UINT_32 par_1 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 result<span class="sy0">;</span>
   UINT_32 var_1 <span class="sy0">=</span> par_1<span class="sy0">;</span>
&nbsp;
   result <span class="sy0">=</span> var_1<span class="sy0">++</span> <span class="sy0">+</span> var_1<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
   <span class="kw1">return</span> <span class="br0">&#40;</span>result<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp02-c'>EXP02-C</a>, <a href='cert-c_model.htm#rule_cert-c_exp10-c'>EXP10-C</a>, <a href='cert-c_model.htm#rule_cert-c_exp30-c'>EXP30-C</a>, <a href='cert-c_model.htm#rule_cert-c_fio41-c'>FIO41-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_737'>737</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a>, <a href='cwe_model.htm#rule_cwe_768'>768</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_46'>46</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.10.1'>3.10.1</a>, <a href='fsb582-c_model.htm#rule_fsb582-c_3.10.2'>3.10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.17'>9.17</a>, <a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.21'>9.21</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.3'>10.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_46'>46</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_157'>157</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_204'>204</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_286'>286</a>, <a href='lmtcp_model.htm#rule_lmtcp_362'>362</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_12.2'>12.2</a>, <a href='misra-ac_model.htm#rule_misra-ac_12.4'>12.4</a>, <a href='misra-ac_model.htm#rule_misra-ac_12.13'>12.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-1'>5-0-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_46'>46</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.2'>12.2</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.4'>12.4</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.13'>12.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.13.1'>R.13.1</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.13.2'>R.13.2</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.13.5'>R.13.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.8.1'>M1.8.1</a>, <a href='sec-c_model.htm#rule_sec-c_r3.6.1'>R3.6.1</a>, <a href='sec-c_model.htm#rule_sec-c_r3.6.2'>R3.6.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d36' name='standard_d36'><div class='standard'><div>36&nbsp;D</div></div></a><div class='headline'>Prototype and definition name mismatch.</div></div><p>This penalty is flagged if the names of parameters mentioned in a procedure prototype definition do not match the names in the real definition.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
UINT_32 SDA_036<span class="br0">&#40;</span> UINT_32 var_1 <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 36 D : Prototype and definition name mismatch.
 ********************************************************/</span> 
&nbsp;
UINT_32 SDA_036<span class="br0">&#40;</span> UINT_32 par_1 <span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
   UINT_32 result<span class="sy0">;</span>
   UINT_32 var_1<span class="sy0">=</span>par_1<span class="sy0">;</span>
   result <span class="sy0">=</span> var_1<span class="sy0">;</span>
   <span class="kw1">return</span> <span class="br0">&#40;</span>result<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_74'>74</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.7.4'>3.7.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_11.3'>11.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_74'>74</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_233'>233</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_16.4'>16.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_8-4-2'>8-4-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_74'>74</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_16.4'>16.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.3'>R.8.3</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.4'>R.8.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m4.5.1'>M4.5.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d37' name='standard_d37'><div class='standard'><div>37&nbsp;D</div></div></a><div class='headline'>Function has persistent local side effects.</div></div><p>A non-void function has persistent local side effects if it can return a value through its persistent local variables as well as by means of its parameters (possibly) and its return type. The safest form is one which only returns a value through the return type. </p>
<p>Functions with a void return type are covered by standard <a href='standards.htm#standard_d68'>68 D</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 37 D : Function has persistent local side effects.
 *************************************************************/</span> 
&nbsp;
UINT_32 SDA_037<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw4">static</span> UINT_32 var_1<span class="sy0">;</span>  <span class="coMULTI">/* persistent local variable */</span>
&nbsp;
   var_1<span class="sy0">++;</span>
&nbsp;
   <span class="kw1">return</span> <span class="br0">&#40;</span>var_1<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_1.13'>1.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d38' name='standard_d38'><div class='standard'><div>38&nbsp;D</div></div></a><div class='headline'>More than one control variable for loop.</div></div><p>Loop iteration shall be controlled by a single variable only. More than one control variable should never be required and only serves to confuse and increase the potential for undesired behaviour, such as an infinite loop.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**********************************************************
 * Standard 38 D : More than one control variable for loop
 **********************************************************/</span>
&nbsp;
<span class="kw4">void</span> SDA_038<span class="br0">&#40;</span> UCHAR <span class="sy0">*</span>pArray<span class="sy0">,</span> UINT_32 ArraySize<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UCHAR   element<span class="sy0">;</span>
  UINT_32 stepup<span class="sy0">=</span>0U<span class="sy0">,</span> stepdn<span class="sy0">;</span>
&nbsp;
  stepdn <span class="sy0">=</span> ArraySize<span class="sy0">;</span>
  stepdn<span class="sy0">--;</span>
&nbsp;
  <span class="kw1">while</span><span class="br0">&#40;</span> stepdn <span class="sy0">&gt;</span> stepup <span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#123;</span>
    element <span class="sy0">=</span> pArray<span class="br0">&#91;</span> stepdn <span class="br0">&#93;</span><span class="sy0">;</span>
    pArray<span class="br0">&#91;</span> stepdn <span class="br0">&#93;</span> <span class="sy0">=</span> pArray<span class="br0">&#91;</span> stepup <span class="br0">&#93;</span><span class="sy0">;</span>
    pArray<span class="br0">&#91;</span> stepup <span class="br0">&#93;</span> <span class="sy0">=</span> element<span class="sy0">;</span>
&nbsp;
    stepup<span class="sy0">++;</span>
    stepdn<span class="sy0">--;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_140'>140</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_165'>165</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.3'>9.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-5-1'>6-5-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d39' name='standard_d39'><div class='standard'><div>39&nbsp;D</div></div></a><div class='headline'>More than one entry to a loop.</div></div><p>Ensure that a loop has a single entry point, in order to simplify the control graph for the statement and reduce overall complexity. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*************************************************
 * Standard 39 D : More than one entry to a loop.
 *************************************************/</span>
&nbsp;
<span class="kw4">void</span> SDA_039<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 it<span class="sy0">;</span>
  <span class="kw1">for</span> <span class="br0">&#40;</span>it <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> it <span class="sy0">&lt;</span> 42U<span class="sy0">;</span> it<span class="sy0">++</span><span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#123;</span>
lb1<span class="sy0">:</span>
    it<span class="sy0">++;</span>
lb2<span class="sy0">:</span>
    it<span class="sy0">++;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span>it <span class="sy0">==</span> 7U<span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
      <span class="kw1">goto</span> lb1<span class="sy0">;</span>      <span class="coMULTI">/*** re-entry ***/</span>
    <span class="br0">&#125;</span>
    <span class="kw1">else</span>
    <span class="br0">&#123;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span>it <span class="sy0">==</span> 9U<span class="br0">&#41;</span>
      <span class="br0">&#123;</span>
        <span class="kw1">goto</span> lb2<span class="sy0">;</span>    <span class="coMULTI">/*** re-entry ***/</span>
      <span class="br0">&#125;</span>
	<span class="kw1">else</span>
      <span class="br0">&#123;</span>
        <span class="coMULTI">/* do something */</span>
      <span class="br0">&#125;</span>
    <span class="br0">&#125;</span>
&nbsp;
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_5.9'>5.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_356'>356</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d40' name='standard_d40'><div class='standard'><div>40&nbsp;D</div></div></a><div class='headline'>More than one exit from a loop.</div></div><p>Ensure that a loop has a single exit point, in order to simplify the control graph for the statement and reduce overall complexity.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*************************************************
 * Standard 40 D : More than one exit from a loop
 *************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> SDA_040<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 it<span class="sy0">;</span>
  <span class="kw1">for</span> <span class="br0">&#40;</span>it <span class="sy0">=</span> 0U<span class="sy0">;</span> it <span class="sy0">&lt;</span> 42U<span class="sy0">;</span> it<span class="sy0">++</span><span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#123;</span>
    <span class="coMULTI">/* ... */</span> 
&nbsp;
    <span class="kw1">if</span> <span class="br0">&#40;</span>it <span class="sy0">==</span> 9U<span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
      <span class="kw2">break</span><span class="sy0">;</span>    <span class="coMULTI">/*** provides an additional exit from loop ***/</span> 
    <span class="br0">&#125;</span>
    <span class="kw1">else</span>
    <span class="br0">&#123;</span>
      <span class="coMULTI">/* do something */</span> 
    <span class="br0">&#125;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_128'>128</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_5.9'>5.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_356'>356</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d41' name='standard_d41'><div class='standard'><div>41&nbsp;D</div></div></a><div class='headline'>Procedure call has no prototype declared.</div></div><p>Procedures shall always have a prototype visible at the point at which they are called. It is good practice to always declare a prototype and essential where a call is not preceded by a definition of the procedure, as the compiler may make assumptions about the types. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">void</span> SDA_041<span class="br0">&#40;</span> UINT_32 param <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 41 D : Procedure call has no prototype declared.
 *************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> SDA_041<span class="br0">&#40;</span> UINT_32 param <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 result <span class="sy0">=</span> foo<span class="br0">&#40;</span> param <span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
  <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl31-c'>DCL31-C</a>, <a href='cert-c_model.htm#rule_cert-c_exp37-c'>EXP37-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_628'>628</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_71'>71</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_118'>118</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_71'>71</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_71'>71</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d42' name='standard_d42'><div class='standard'><div>42&nbsp;D</div></div></a><div class='headline'>Local pointer returned in function result.</div></div><p>A function shall not return a pointer to a non-static local object. Following return of control to the calling function the local object will have gone out of scope and no longer exist.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/************************************************************
 * Standard 42 D : Local pointer returned in function result
 *************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> INT_32 <span class="sy0">*</span> fn_D42<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  INT_32 local_var <span class="sy0">=</span> <span class="nu0">22</span><span class="sy0">;</span>
&nbsp;
  <span class="kw1">return</span> <span class="sy0">&amp;</span>local_var<span class="sy0">;</span>  <span class="coMULTI">/* Not Compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> SDA_042<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  INT_32 <span class="sy0">*</span> result <span class="sy0">=</span> fn_D42<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.16.5'>5.16.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl30-c'>DCL30-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_562'>562</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a>, <a href='cwe_model.htm#rule_cwe_825'>825</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_106'>106</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_4.11'>4.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_11.7'>11.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_106'>106</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_111'>111</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_112'>112</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_206'>206</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_17.6'>17.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_7-5-1'>7-5-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_106'>106</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_17.6'>17.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.18.6'>R.18.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_x3.x'>X3.x</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d43' name='standard_d43'><div class='standard'><div>43&nbsp;D</div></div></a><div class='headline'>Divide by 0 found.</div></div><p>Measures shall be taken to prevent run-time failures caused by divide by zero operations. Either a conditional test or an assertion should be used on the right hand operand being non-zero.</p>
<p>Note: The message is output against the first use of a zero-valued variable in a divide operation.  There may also be other uses within the code.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*************************************
 * Standard 43 D : Divide by 0 found.
 *************************************/</span> 
&nbsp;
<span class="kw4">void</span> SDA_043<span class="br0">&#40;</span> SINT_32 p_denominator <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   SINT_32 local_denominator <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
   SINT_32 numerator <span class="sy0">=</span> <span class="nu0">9</span><span class="sy0">;</span>
&nbsp;
   SINT_32 result <span class="sy0">=</span> numerator <span class="sy0">/</span> local_denominator<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span> 
&nbsp;
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_flp03-c'>FLP03-C</a>, <a href='cert-c_model.htm#rule_cert-c_int33-c'>INT33-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_129'>129</a>, <a href='cwe_model.htm#rule_cwe_190'>190</a>, <a href='cwe_model.htm#rule_cwe_369'>369</a>, <a href='cwe_model.htm#rule_cwe_680'>680</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_103'>103</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.17'>10.17</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_311'>311</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_0-3-1'>0-3-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_d.4.1'>D.4.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r3.2.1'>R3.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d45' name='standard_d45'><div class='standard'><div>45&nbsp;D</div></div></a><div class='headline'>Pointer not checked for null before use.</div></div><p>A pointer shall not be used without a prior check for NULL status. De-referencing a NULL pointer constitutes undefined behaviour.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
&nbsp;
<span class="coMULTI">/**********************************************************
 * Standard 45 D : Pointer not checked for null before use.
 **********************************************************/</span>
&nbsp;
<span class="kw4">void</span> SDA_045<span class="br0">&#40;</span> UINT_32 <span class="sy0">*</span> par_1 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 <span class="sy0">*</span> lvar_1 <span class="sy0">=</span> <span class="br0">&#40;</span>UINT_32 <span class="sy0">*</span><span class="br0">&#41;</span>malloc<span class="br0">&#40;</span><span class="kw4">sizeof</span><span class="br0">&#40;</span><span class="sy0">*</span>lvar_1<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
  <span class="sy0">*</span>lvar_1 <span class="sy0">=</span> <span class="sy0">*</span>par_1<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp08-c'>EXP08-C</a>, <a href='cert-c_model.htm#rule_cert-c_exp34-c'>EXP34-C</a>, <a href='cert-c_model.htm#rule_cert-c_mem32-c'>MEM32-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_4.1.4'>4.1.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_476'>476</a>, <a href='cwe_model.htm#rule_cwe_690'>690</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_122'>122</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_5.1.15'>5.1.15</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_107'>107</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_174'>174</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_317'>317</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_107'>107</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_d.4.1'>D.4.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r3.2.2'>R3.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='tbrun_requires_model.htm'>TBrun Requires</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d46' name='standard_d46'><div class='standard'><div>46&nbsp;D</div></div></a><div class='headline'>Member function may be declared const.</div></div><p>Member functions should be declared const by default and only non-const if there is a clear explicit reason for doing so. Declaring a member function const ensures that objects are not modified incorrectly.</p>
<p>This standard works by detecting modification to member variables, including via calls to other functions. If called member functions are not visible to the analysis (for example, they may be in a base class implementation), it is assumed that they do not modify member variables. The standard may therefore be flagged in situations where making the member function const will cause a compilation error because a non-const member function is called. In these situations the user should determine whether the called function can also be made const. If not, the standard violation may be ignored. </p>
<p>A function with no static or const qualifier may flag both a 46 D and a <a href='standards.htm#standard_d79'>79 D</a> violation.  In this case the function should be declared static, as adding both qualifiers is illegal.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*********************************************************
 * Standard 46 D : Member function may be declared const.
 *********************************************************/</span>
&nbsp;
class Person
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> UINT_32 personNum<span class="br0">&#41;</span><span class="sy0">;</span>
    Person <span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person <span class="br0">&#41;</span><span class="sy0">;</span>
    explicit Person<span class="br0">&#40;</span><span class="kw4">const</span> Person <span class="sy0">&amp;</span>person <span class="br0">&#41;</span><span class="sy0">;</span>
    ~Person<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    UINT_32 get_p_num<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
  protected<span class="sy0">:</span>
  private<span class="sy0">:</span>
    UINT_32 personalNumber<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
UINT_32 Person<span class="sy0">::</span><span class="me2">get_p_num</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  <span class="kw1">return</span> personalNumber<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_6'>6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_6.3'>6.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.1.8'>3.1.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_69'>69</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_103'>103</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_9-3-3'>9-3-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d47' name='standard_d47'><div class='standard'><div>47&nbsp;D</div></div></a><div class='headline'>Unused inspect annotation.</div></div><p>A spurious inspect annotation for a particular standard is present in the code. The line should be removed to avoid confusion and aid readability.</p>
<p>Further checks on the INSPECTED annotation are performed by <a href='standards.htm#standard_s305'>305 S</a> and <a href='standards.htm#standard_j2'>2 J</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
&nbsp;
<span class="coMULTI">/*********************************************
 * Standard 47 D : Unused inspect annotation.
 *********************************************/</span> 
&nbsp;
<span class="coMULTI">/*LDRA_INSPECTED 46 D*/</span>        <span class="coMULTI">/* not compliant */</span>
                               <span class="coMULTI">/* Standard 45 D is violated below, not 46 D*/</span>
&nbsp;
<span class="kw4">void</span> SDA_047<span class="br0">&#40;</span> UINT_32 <span class="sy0">*</span> par_1 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 <span class="sy0">*</span> lvar_1 <span class="sy0">=</span> <span class="br0">&#40;</span>UINT_32<span class="sy0">*</span><span class="br0">&#41;</span>malloc<span class="br0">&#40;</span><span class="kw4">sizeof</span><span class="br0">&#40;</span>lvar_1<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
  <span class="sy0">*</span>lvar_1 <span class="sy0">=</span> <span class="sy0">*</span>par_1<span class="sy0">;</span>   <span class="coMULTI">/* 45 D violation */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d48' name='standard_d48'><div class='standard'><div>48&nbsp;D</div></div></a><div class='headline'>Attempt to write to unopened file.</div></div><p>Any attempt to write to a file must be preceded by a successful open of that file. The return value from the open function should be checked for non-NULL. Invalid access to files will likely result in program termination.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdio.h&gt; </span>
<span class="co2">#include &lt;stdlib.h&gt; </span>
&nbsp;
<span class="kw4">void</span> SDA_048<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/****************************************************
 * Standard 48 D : Attempt to write to unopened file.
 ****************************************************/</span> 
&nbsp;
<span class="kw4">void</span> SDA_048<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  FILE <span class="sy0">*</span>inp<span class="sy0">,</span>
       <span class="sy0">*</span>outp<span class="sy0">;</span>
  SINT_32 ch<span class="sy0">;</span>
&nbsp;
  inp <span class="sy0">=</span> fopen<span class="br0">&#40;</span><span class="st0">&quot;infile.txt&quot;</span><span class="sy0">,</span> <span class="st0">&quot;r&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
  <span class="kw1">do</span>
    <span class="br0">&#123;</span>
      ch <span class="sy0">=</span> getc<span class="br0">&#40;</span>inp<span class="br0">&#41;</span><span class="sy0">;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span>ch <span class="sy0">==</span> <span class="br0">&#40;</span>SINT_32<span class="br0">&#41;</span>EOF<span class="br0">&#41;</span>
      <span class="br0">&#123;</span>
        <span class="coMULTI">/* do nothing */</span>
      <span class="br0">&#125;</span>
      <span class="kw1">else</span>
      <span class="br0">&#123;</span>
        putc<span class="br0">&#40;</span> ch<span class="sy0">,</span> outp <span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant - code to open output file omitted */</span>
        ch <span class="sy0">=</span> getc<span class="br0">&#40;</span>inp<span class="br0">&#41;</span><span class="sy0">;</span>
      <span class="br0">&#125;</span>
    <span class="br0">&#125;</span> <span class="kw1">while</span> <span class="br0">&#40;</span>ch <span class="sy0">!=</span> <span class="br0">&#40;</span>SINT_32<span class="br0">&#41;</span>EOF <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
  fclose<span class="br0">&#40;</span>inp<span class="br0">&#41;</span><span class="sy0">;</span>
  fclose<span class="br0">&#40;</span>outp<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_399'>399</a>, <a href='cwe_model.htm#rule_cwe_910'>910</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.22.6'>R.22.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d49' name='standard_d49'><div class='standard'><div>49&nbsp;D</div></div></a><div class='headline'>File pointer not closed on exit.</div></div><p>A file pointer shall be disassociated from the file once access to the file is no longer required. Failure to close a file may result in subsequent access being invalid, and is likely to cause memory leaks. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdio.h&gt; </span>
<span class="co2">#include &lt;stdlib.h&gt; </span>
&nbsp;
<span class="coMULTI">/****************************************************
 * Standard 49 D : File pointer not closed on exit.
 ****************************************************/</span> 
&nbsp;
<span class="kw4">void</span> SDA_049<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  FILE <span class="sy0">*</span>inp<span class="sy0">,</span>
       <span class="sy0">*</span>outp<span class="sy0">;</span>
  SINT_32 ch<span class="sy0">;</span>
&nbsp;
  inp <span class="sy0">=</span> fopen<span class="br0">&#40;</span><span class="st0">&quot;infile.txt&quot;</span><span class="sy0">,</span> <span class="st0">&quot;r&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  outp <span class="sy0">=</span> fopen<span class="br0">&#40;</span><span class="st0">&quot;outfile.txt&quot;</span><span class="sy0">,</span> <span class="st0">&quot;w&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
  <span class="kw1">do</span>
    <span class="br0">&#123;</span>
      ch <span class="sy0">=</span> getc<span class="br0">&#40;</span>inp<span class="br0">&#41;</span><span class="sy0">;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span>ch <span class="sy0">==</span> <span class="br0">&#40;</span>SINT_32<span class="br0">&#41;</span>EOF<span class="br0">&#41;</span>
      <span class="br0">&#123;</span>
        <span class="coMULTI">/* do nothing */</span> 
      <span class="br0">&#125;</span>
      <span class="kw1">else</span>
      <span class="br0">&#123;</span>
        putc<span class="br0">&#40;</span> ch<span class="sy0">,</span> outp <span class="br0">&#41;</span><span class="sy0">;</span>
        ch <span class="sy0">=</span> getc<span class="br0">&#40;</span>inp<span class="br0">&#41;</span><span class="sy0">;</span>
      <span class="br0">&#125;</span>
    <span class="br0">&#125;</span> <span class="kw1">while</span> <span class="br0">&#40;</span>ch <span class="sy0">!=</span> <span class="br0">&#40;</span>SINT_32<span class="br0">&#41;</span>EOF <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
  fclose<span class="br0">&#40;</span>inp<span class="br0">&#41;</span><span class="sy0">;</span> 
<span class="br0">&#125;</span>  <span class="coMULTI">/* not compliant -  code to close output file omitted */</span> 
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_fio42-c'>FIO42-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_403'>403</a>, <a href='cwe_model.htm#rule_cwe_404'>404</a>, <a href='cwe_model.htm#rule_cwe_772'>772</a>, <a href='cwe_model.htm#rule_cwe_775'>775</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.22.1'>R.22.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d50' name='standard_d50'><div class='standard'><div>50&nbsp;D</div></div></a><div class='headline'>Memory not freed after last reference.</div></div><p>Dynamically allocated memory shall be freed before the last pointer variable that references it is reset to NULL or assigned a new memory address. A memory leak occurs when a block of allocated memory is no longer accessible and unnecessarily consumes system resources.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 50 D : Memory not freed after last reference.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> SDA_050<span class="br0">&#40;</span> UINT_32 <span class="sy0">*</span> par_1 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 <span class="sy0">*</span> lvar_1 <span class="sy0">=</span> <span class="br0">&#40;</span>UINT_32 <span class="sy0">*</span><span class="br0">&#41;</span>malloc<span class="br0">&#40;</span><span class="kw4">sizeof</span><span class="br0">&#40;</span>lvar_1<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
  <span class="kw1">if</span> <span class="br0">&#40;</span>lvar_1 <span class="sy0">!=</span> <span class="br0">&#40;</span>UINT_32 <span class="sy0">*</span><span class="br0">&#41;</span><span class="nu0">0</span><span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="sy0">*</span>lvar_1 <span class="sy0">=</span> <span class="sy0">*</span>par_1<span class="sy0">;</span>
  <span class="br0">&#125;</span>
&nbsp;
  lvar_1 <span class="sy0">=</span> par_1<span class="sy0">;</span>  <span class="coMULTI">/* memory not freed before pointer assigned a new address */</span> 
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_mem00-c'>MEM00-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.1.25'>6.1.25</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_401'>401</a>, <a href='cwe_model.htm#rule_cwe_762'>762</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_127'>127</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_5.1.17'>5.1.17</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.22.1'>R.22.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d51' name='standard_d51'><div class='standard'><div>51&nbsp;D</div></div></a><div class='headline'>Attempt to read from freed memory.</div></div><p>Dynamically allocated memory that has been freed is no longer accessible even if it has pointers which reference it. A block of memory shall not be freed whilst two or more pointer variables reference it.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
&nbsp;
<span class="coMULTI">/****************************************************
 * Standard 51 D : Attempt to read from freed memory.
 ****************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> SDA_051<span class="br0">&#40;</span> UINT_32 <span class="sy0">*</span> par_1 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 <span class="sy0">*</span> lvar_1 <span class="sy0">=</span> <span class="br0">&#40;</span>UINT_32 <span class="sy0">*</span><span class="br0">&#41;</span>malloc<span class="br0">&#40;</span><span class="kw4">sizeof</span><span class="br0">&#40;</span>lvar_1<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  UINT_32 <span class="sy0">*</span> lvar_2<span class="sy0">;</span>
&nbsp;
  <span class="kw1">if</span> <span class="br0">&#40;</span>lvar_1 <span class="sy0">!=</span> <span class="br0">&#40;</span>UINT_32 <span class="sy0">*</span><span class="br0">&#41;</span><span class="nu0">0</span><span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="sy0">*</span>lvar_1 <span class="sy0">=</span> <span class="sy0">*</span>par_1<span class="sy0">;</span>
&nbsp;
    <span class="coMULTI">/* ... */</span> 
&nbsp;
    free<span class="br0">&#40;</span>lvar_1<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
    <span class="sy0">*</span>lvar_2 <span class="sy0">=</span> <span class="sy0">*</span>lvar_1<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_mem30-c'>MEM30-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_6.1.24'>6.1.24</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_416'>416</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_126'>126</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_5.1.16'>5.1.16</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.22.2'>R.22.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d52' name='standard_d52'><div class='standard'><div>52&nbsp;D</div></div></a><div class='headline'>Member(s) not assigned in = operator.</div></div><p>A copy assignment operator shall assign all data members, including those in base classes, which affect the class invariant.</p>
<p>This standard can be further restricted to perform a deeper, more accurate analysis by setting the modifier <a href='standard_flags.htm#flag_262'>262</a> to 1 in the cppreport.dat file. <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard 52 D : Member(s) not assigned in = operator.
 *******************************************************/</span>
&nbsp;
class base
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    base<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    ~base<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit base<span class="br0">&#40;</span><span class="kw4">const</span> base <span class="sy0">&amp;</span>base<span class="br0">&#41;</span><span class="sy0">;</span>
    explicit base<span class="br0">&#40;</span><span class="kw4">const</span> INT_32 x1<span class="br0">&#41;</span> <span class="sy0">:</span> base_member <span class="br0">&#40;</span>x1<span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
    <span class="br0">&#125;</span>
&nbsp;
    base<span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> base<span class="sy0">&amp;</span> rhs<span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span>this <span class="sy0">!=</span> <span class="sy0">&amp;</span>rhs<span class="br0">&#41;</span>
      <span class="br0">&#123;</span>
        base_member <span class="sy0">=</span> rhs.<span class="me1">base_member</span><span class="sy0">;</span>
      <span class="br0">&#125;</span>
      <span class="kw1">return</span> <span class="sy0">*</span>this<span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
  private<span class="sy0">:</span>
    INT_32  base_member<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
class derived <span class="sy0">:</span> public base
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    derived<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    ~derived<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    explicit derived<span class="br0">&#40;</span><span class="kw4">const</span> derived <span class="sy0">&amp;</span>der1<span class="br0">&#41;</span><span class="sy0">;</span>
    derived <span class="br0">&#40;</span><span class="kw4">const</span> INT_32  x1<span class="sy0">,</span> <span class="kw4">const</span> INT_32  y1<span class="br0">&#41;</span> <span class="sy0">:</span>
               base <span class="br0">&#40;</span>x1<span class="br0">&#41;</span><span class="sy0">,</span>
               derived_member_1 <span class="br0">&#40;</span>y1<span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
       derived_member_2 <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
    derived<span class="sy0">&amp;</span> operator<span class="sy0">=</span><span class="br0">&#40;</span><span class="kw4">const</span> derived<span class="sy0">&amp;</span>  rhs<span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span>this <span class="sy0">!=</span> <span class="sy0">&amp;</span>rhs<span class="br0">&#41;</span>
      <span class="br0">&#123;</span>
	<span class="co1">// all members are not copied</span>
        derived_member_1 <span class="sy0">=</span> rhs.<span class="me1">derived_member_1</span> <span class="sy0">+</span> derived_member_2<span class="sy0">;</span>
      <span class="br0">&#125;</span>
      <span class="kw1">return</span> <span class="sy0">*</span>this<span class="sy0">;</span>
    <span class="br0">&#125;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
    private<span class="sy0">:</span>
      INT_32  derived_member_1<span class="sy0">;</span>
      INT_32  derived_member_2<span class="sy0">;</span>
 <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_8.4'>8.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_262'>262</a> = 1</td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.1.5'>3.1.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_83'>83</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_262'>262</a> = 1</td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_128'>128</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d53' name='standard_d53'><div class='standard'><div>53&nbsp;D</div></div></a><div class='headline'>Attempt to use uninitialised pointer.</div></div><p>Before a pointer may be used, such that the contents of the memory address pointed to are accessed, it shall already be initialised.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 53 D : Attempt to use uninitialised pointer
 ********************************************************/</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> SDA_053<span class="br0">&#40;</span> <span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   CHAR <span class="sy0">*</span>ptr1<span class="sy0">,</span> <span class="sy0">*</span>ptr2<span class="sy0">;</span>
   ptr1 <span class="sy0">=</span> ptr2<span class="sy0">;</span>   <span class="coMULTI">/* Not compliant  */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp08-c'>EXP08-C</a>, <a href='cert-c_model.htm#rule_cert-c_exp33-c'>EXP33-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_457'>457</a>, <a href='cwe_model.htm#rule_cwe_468'>468</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_83'>83</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.9.1'>R.9.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d54' name='standard_d54'><div class='standard'><div>54&nbsp;D</div></div></a><div class='headline'>Unsafe use of function pointer variable.</div></div><p>Constructs that involve the unsafe use of a function pointer variable, for a purpose other than as a handle to a function, shall not be permitted. For instance, a function pointer should not be used as an actual parameter for the function to which it points to. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw4">typedef</span> <span class="kw4">struct</span> struct_fn_t
<span class="br0">&#123;</span>
  <span class="kw4">void</span> <span class="br0">&#40;</span><span class="sy0">*</span> s_fn<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">struct</span> struct_fn_t <span class="sy0">*</span> s_fn_ptr<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span> struct_fn<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/***********************************************************
 * Standard 54 D : Unsafe use of function pointer variable.
 ***********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> sda_054 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   struct_fn s_fn_ptrs<span class="br0">&#91;</span><span class="nu0">10</span><span class="br0">&#93;</span><span class="sy0">;</span>
   struct_fn <span class="sy0">*</span> sda_054_p <span class="sy0">=</span> <span class="sy0">&amp;</span>s_fn_ptrs<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
   <span class="coMULTI">/* ----- */</span> 
&nbsp;
   sda_054_p<span class="sy0">-&gt;</span>s_fn <span class="br0">&#40;</span>sda_054_p<span class="sy0">++</span><span class="br0">&#41;</span><span class="sy0">;</span>      <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
   <span class="coMULTI">/* ----- */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp08-c'>EXP08-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_457'>457</a>, <a href='cwe_model.htm#rule_cwe_468'>468</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d55' name='standard_d55'><div class='standard'><div>55&nbsp;D</div></div></a><div class='headline'>Modification of loop counter in loop body.</div></div><p>A loop counter used within a for loop for iteration shall not be modified in the body of the loop. Modification of the loop counter makes code difficult to read and maintain.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/************************************************************
 * Standard 55 D : Modification of loop counter in loop body.
 ************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> SDA_055<span class="br0">&#40;</span> UINT_32 max_count <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 loop_counter <span class="sy0">=</span> 0U<span class="sy0">;</span>
&nbsp;
  <span class="kw1">for</span> <span class="br0">&#40;</span>loop_counter <span class="sy0">=</span> 0U<span class="sy0">;</span> loop_counter <span class="sy0">&lt;</span> max_count<span class="sy0">;</span> loop_counter<span class="sy0">++</span><span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span>loop_counter <span class="sy0">==</span> 7U<span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
      loop_counter<span class="sy0">++;</span>   <span class="coMULTI">/* not compliant */</span>
    <span class="br0">&#125;</span>
    <span class="kw1">else</span>
    <span class="br0">&#123;</span>
      <span class="coMULTI">/* do nothing  */</span>
    <span class="br0">&#125;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_67'>67</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_130'>130</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.3'>9.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_5.5'>5.5</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_67'>67</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_201'>201</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_354'>354</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_13.6'>13.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-5-3'>6-5-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_67'>67</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_13.6'>13.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.14.2'>R.14.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m3.3.2'>M3.3.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d56' name='standard_d56'><div class='standard'><div>56&nbsp;D</div></div></a><div class='headline'>Throw found with no catch in scope.</div></div><p>All exceptions signalled by a throw-expression shall be handled by an appropriate catch-block for the type of object passed from the throw-point. Failure to handle an exception reduces fault-tolerance, and may result in program termination. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdio.h&gt;</span>
&nbsp;
<span class="coMULTI">/*****************************************************
 * Standard 56 D : Throw found with no catch in scope.
 *****************************************************/</span>
&nbsp;
<span class="kw4">void</span> test<span class="br0">&#40;</span>UINT_32 val<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">if</span> <span class="br0">&#40;</span>val <span class="sy0">&lt;</span> 5U <span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    throw val<span class="sy0">;</span>
  <span class="br0">&#125;</span>
  <span class="kw1">else</span>
  <span class="br0">&#123;</span>
    <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot;Value not thrown - %d<span class="es1">\n</span>&quot;</span><span class="sy0">,</span> val<span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> SDA_056<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  test<span class="br0">&#40;</span>10U<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_460'>460</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_15-3-4'>15-3-4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d57' name='standard_d57'><div class='standard'><div>57&nbsp;D</div></div></a><div class='headline'>Global not initialised at declaration.</div></div><p>All variables shall be initialised before use. Global variables, in particular, should be initialised at declaration to ensure there can be no access prior to an assignment.</p>
<p>This standard does not apply to variables that are initialised by constructors.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">const</span> SINT_32 g_var<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="coMULTI">/**********************************************************
 * Standard 57 D : Global not initialised at declaration.
 **********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> SDA_057<span class="br0">&#40;</span> SINT_32 p_var <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   SINT_32 result1 <span class="sy0">=</span> g_var <span class="sy0">*</span> p_var<span class="sy0">;</span>
&nbsp;
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.16.8'>5.16.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.2.10'>1.2.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_456'>456</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_5.2.1'>5.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_8.4.3'>8.4.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_142'>142</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_7.2.a'>7.2.a</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d58' name='standard_d58'><div class='standard'><div>58&nbsp;D</div></div></a><div class='headline'>Character or string literal re-used.</div></div><p>Use of symbolic names is preferred to literal values in the code. However, character and string literals are permitted as an exception, provided they appear only once.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard 58 D : Character or string literal re-used.
 *******************************************************/</span> 
&nbsp;
<span class="kw4">void</span> SDA_058<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  CHAR str1<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span><span class="st0">'a'</span><span class="sy0">,</span> <span class="st0">'b'</span><span class="sy0">,</span> <span class="st0">'c'</span><span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
  CHAR str2<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span><span class="st0">'d'</span><span class="sy0">,</span> <span class="st0">'a'</span><span class="sy0">,</span> <span class="st0">'f'</span><span class="br0">&#125;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant - 'a' already present in str1 */</span> 
&nbsp;
  CHAR str3<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span><span class="st0">'x'</span><span class="sy0">,</span> <span class="st0">'y'</span><span class="sy0">,</span> <span class="st0">'b'</span><span class="br0">&#125;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant - 'b' already present in str1 */</span> 
&nbsp;
  CHAR <span class="sy0">*</span> some_string <span class="sy0">=</span> <span class="st0">&quot;Hello World&quot;</span><span class="sy0">;</span>
&nbsp;
  CHAR <span class="sy0">*</span> another_string <span class="sy0">=</span> <span class="st0">&quot;Hello World&quot;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant - &quot;Hello World&quot; already assigned to some_string */</span> 
&nbsp;
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.1'>10.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d59' name='standard_d59'><div class='standard'><div>59&nbsp;D</div></div></a><div class='headline'>Parameter should be declared const.</div></div><p>Any non-pointer parameter, whose value is not intended to change, should be protected by the use of const. Making use of the parameter explicit leads to greater precision in the definition of the function interface. Pointer parameters are covered by standard <a href='standards.htm#standard_s603'>603 S</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/******************************************************
 * Standard 59 D : Parameter should be declared const.
 ******************************************************/</span> 
&nbsp;
UCHAR glob<span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> sda_059<span class="br0">&#40;</span> UCHAR par1<span class="sy0">,</span> <span class="coMULTI">/* Not compliant  */</span>
                     UCHAR par2  <span class="coMULTI">/* Compliant      */</span>
                    <span class="br0">&#41;</span>   
<span class="br0">&#123;</span>
    par2 <span class="sy0">=</span> glob<span class="sy0">;</span>
    glob <span class="sy0">=</span> par1<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_7-1-1'>7-1-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_1.8.b'>1.8.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d60' name='standard_d60'><div class='standard'><div>60&nbsp;D</div></div></a><div class='headline'>External object should be declared only once.</div></div><p>An external object shall only be declared once. The preferred approach is to place an extern declaration in a single header file to be shared by those files that provide a definition of, or wish to use, the object.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw2">extern</span> SINT_32 some_int<span class="sy0">;</span> <span class="coMULTI">/* initial ext. declaration */</span> 
&nbsp;
<span class="coMULTI">/***************************************************************
 * Standard 60 D : External object should be declared only once.
 ***************************************************************/</span> 
&nbsp;
<span class="kw2">extern</span> SINT_32 some_int<span class="sy0">;</span> <span class="coMULTI">/* not compliant - multiple ext. declaration */</span> 
&nbsp;
SINT_32 some_int <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>    <span class="coMULTI">/* definition */</span> 
&nbsp;
<span class="kw4">void</span> sda_060<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span> <span class="sy0">;</span> <span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_27'>27</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_27'>27</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_8.8'>8.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_3-2-3'>3-2-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_27'>27</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_8.8'>8.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.5'>R.8.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m4.4.3'>M4.4.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d61' name='standard_d61'><div class='standard'><div>61&nbsp;D</div></div></a><div class='headline'>Procedure should be declared static.</div></div><p>Procedures shall have internal linkage unless external linkage is required. That is, the static storage-class specifier must be applied to procedures that are only called from within the same file. The visibility of a procedure is therefore limited to the required minimum, thereby reducing the possibility for confusion with another identifier with the same name.</p>
<p>This standard does not apply to member functions, which are covered by standard <a href='standards.htm#standard_d79'>79 D</a>.</p>
<p>This standard is only enabled when the code is run as a system set with at least 2 files.</p>
<div class='title'>Example</div>
<p>Sda_061_1.c</p>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 61 D : Procedure should be declared static.
 ********************************************************/</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> helper_proc1<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="sy0">;</span> <span class="br0">&#125;</span> <span class="coMULTI">/* compliant */</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> helper_proc2<span class="br0">&#40;</span> <span class="kw4">void</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="sy0">;</span> <span class="br0">&#125;</span>    <span class="coMULTI">/* not compliant  - should be static as
                                   * procedure is not called anywhere
                                   * in system outside of this file.
                                   */</span>
&nbsp;
<span class="kw4">void</span> sda_061<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  helper_proc1<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  helper_proc2<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="br0">&#125;</span>
<span class="coMULTI">/*
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span> </pre><p>Sda_061_2.c</p>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">int</span> main<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  sda_061<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl15-c'>DCL15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_736'>736</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.6.3'>3.6.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_8.10'>8.10</a>, <a href='misra-ac_model.htm#rule_misra-ac_8.11'>8.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_3-3-1'>3-3-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_8.10'>8.10</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_8.11'>8.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.7'>R.8.7</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.8'>R.8.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_1.8.a'>1.8.a</a>, <a href='netrino_model.htm#rule_netrino_6.2.e'>6.2.e</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m2.2.3'>M2.2.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d62' name='standard_d62'><div class='standard'><div>62&nbsp;D</div></div></a><div class='headline'>Pointer parameter should be declared const.</div></div><p>The const qualifier should be applied to pointer parameters that address data not subject to change. Const-ness of data should be made explicit in all applicable cases to indicate where protection is required.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 62 D : Pointer parameter should be declared const.
 *************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> sda_062<span class="br0">&#40;</span> UINT_32 <span class="sy0">*</span> pptr1<span class="sy0">,</span>
              <span class="kw4">const</span> UINT_32 <span class="sy0">*</span> pptr2<span class="sy0">,</span>
              UINT_32 <span class="sy0">*</span> pptr3 <span class="br0">&#41;</span>      <span class="coMULTI">/* not compliant - should be const */</span>
<span class="br0">&#123;</span>
   <span class="sy0">*</span>pptr1 <span class="sy0">=</span> <span class="sy0">*</span>pptr2 <span class="sy0">+</span> <span class="sy0">*</span>pptr3<span class="sy0">;</span>         <span class="coMULTI">/* data at address pptr3 not changed */</span> 
&nbsp;
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl13-c'>DCL13-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_736'>736</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.6.6'>3.6.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_11.5'>11.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_81'>81</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_16.7'>16.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_7-1-2'>7-1-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_81'>81</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_16.7'>16.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.13'>R.8.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_1.8.b'>1.8.b</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.11.1'>M1.11.1</a>, <a href='sec-c_model.htm#rule_sec-c_m1.11.3'>M1.11.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d63' name='standard_d63'><div class='standard'><div>63&nbsp;D</div></div></a><div class='headline'>No definition in system for prototyped procedure.</div></div><p>Procedures with external linkage shall have a definition provided in at least one of the translation units in the system. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/******************************************************************
 * Standard 63 D : No definition in system for prototyped procedure.
 ******************************************************************/</span>
&nbsp;
<span class="kw4">void</span> sda_063_1<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw4">void</span> sda_063_2<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* Not compliant */</span>
&nbsp;
<span class="kw4">void</span> sda_063_1<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">int</span> main<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  sda_063_1<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  sda_063_2<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2008 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_5.21'>5.21</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_8.9'>8.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_3-2-4'>3-2-4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_8.9'>8.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.6'>R.8.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d64' name='standard_d64'><div class='standard'><div>64&nbsp;D</div></div></a><div class='headline'>Local not initialised at declaration.</div></div><p>Local variables shall be initialised at declaration. To adopt a strategy of initialising before the first access, but after declaration, invites the highly likely case that an access will be added prior to the initialisation. Access of a variable which has not been explicitly initialised may lead to unexpected results or even a failure.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 64 D : Local not initialised at declaration.
 *******************************************************************/</span>
&nbsp;
<span class="kw4">static</span> UINT_32 sda_064_1<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 local_int<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
  local_int <span class="sy0">=</span> 0U<span class="sy0">;</span>
&nbsp;
  local_int<span class="sy0">++;</span>
&nbsp;
  <span class="kw1">return</span> local_int<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2008 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_8.4.3'>8.4.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_7.2.a'>7.2.a</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d65' name='standard_d65'><div class='standard'><div>65&nbsp;D</div></div></a><div class='headline'>Void function has no side effects.</div></div><p>A function with void return type shall have external side effects. Failure to contribute to the generation of any outputs may not be what the developer intended or expects.</p>
<p>This standard does not apply to constructors or destructors.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 65 D : void function has no side effects.
 *******************************************************************/</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> sda_065_1<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 local_int <span class="sy0">=</span> 1U<span class="sy0">;</span>
&nbsp;
  local_int<span class="sy0">++;</span>
&nbsp;
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2008 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc12-c'>MSC12-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_747'>747</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_0-1-8'>0-1-8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.2.2'>R.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d66' name='standard_d66'><div class='standard'><div>66&nbsp;D</div></div></a><div class='headline'>Non boolean control variable modified in loop.</div></div><p>Loop control variables other than the loop counter shall be Boolean in order to make the code easier to understand. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*
 * Standard 66 D : Non boolean control variable modified in loop.
 * A/Ref:
 */</span> 
&nbsp;
<span class="kw2">extern</span> UINT_16 sda_066_2<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw4">void</span> sda_066_1<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
&nbsp;
<span class="kw4">void</span> sda_066_1<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  SINT_32 loop<span class="sy0">;</span>
  UINT_16 u8a <span class="sy0">=</span> 0U<span class="sy0">;</span>
  BOOL flag <span class="sy0">=</span> FALSE<span class="sy0">;</span>
&nbsp;
  <span class="kw1">for</span><span class="br0">&#40;</span> loop <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> <span class="br0">&#40;</span>loop <span class="sy0">&lt;</span> <span class="nu0">10</span> <span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span> u8a <span class="sy0">!=</span> 42U <span class="br0">&#41;</span><span class="sy0">;</span> <span class="sy0">++</span>loop <span class="br0">&#41;</span>  <span class="coMULTI">/* Not ok */</span> 
  <span class="br0">&#123;</span>
    u8a <span class="sy0">=</span> sda_066_2<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
&nbsp;
  <span class="kw1">for</span><span class="br0">&#40;</span> loop <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> <span class="br0">&#40;</span>loop <span class="sy0">&lt;</span> <span class="nu0">10</span> <span class="br0">&#41;</span> <span class="sy0">&amp;&amp;</span> flag<span class="sy0">;</span> <span class="sy0">++</span>loop <span class="br0">&#41;</span>            <span class="coMULTI">/* Ok */</span> 
  <span class="br0">&#123;</span>
    u8a <span class="sy0">=</span> sda_066_2<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    flag <span class="sy0">=</span> u8a <span class="sy0">!=</span> 42U<span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2008 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.3'>9.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-5-6'>6-5-6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d67' name='standard_d67'><div class='standard'><div>67&nbsp;D</div></div></a><div class='headline'>Void function has global variable side effects.</div></div><p>Procedures that have global variable side effects shall be avoided as their invocation may result in unexpected results when the order of evaluation in the calling expression is significant. This standard includes constructors and destructors.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/******************************************************************
 * Standard 67 D : Void function has global variable side effects.
 ******************************************************************/</span> 
&nbsp;
UINT_32 global <span class="sy0">=</span> 0U<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> sda_067_1<span class="br0">&#40;</span> UINT_32 p1<span class="sy0">,</span>
                UINT_32 p2 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  global <span class="sy0">=</span> <span class="br0">&#40;</span>global <span class="sy0">+</span> p1<span class="br0">&#41;</span> <span class="sy0">*</span> p2<span class="sy0">;</span>
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> SDA_067<span class="br0">&#40;</span> UINT_32 p3 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  sda_067_1<span class="br0">&#40;</span> p3<span class="sy0">++,</span> p3<span class="sy0">++</span> <span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* 'global' will be evaluated differently
                                depending on which parameter is evaluated first */</span> 
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2008 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_286'>286</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d68' name='standard_d68'><div class='standard'><div>68&nbsp;D</div></div></a><div class='headline'>Void function has persistent local side effects.</div></div><p>Functions with a void return type that have persistent local side effects shall be avoided as their invocation may result in unexpected results when the order of evaluation in the calling expression is significant.</p>
<p>Functions that have a non-void return type are covered by standard <a href='standards.htm#standard_d37'>37 D</a>. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************************
 * Standard 68 D : Void function has persistent local side effects.
 *****************************************************************/</span>
&nbsp;
<span class="kw4">void</span> SDA_068_1<span class="br0">&#40;</span> UINT_32 p1<span class="sy0">,</span> UINT_32 p2 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">static</span> UINT_32 var_1<span class="sy0">;</span>
&nbsp;
  var_1 <span class="sy0">=</span> <span class="br0">&#40;</span>var_1 <span class="sy0">+</span> p1<span class="br0">&#41;</span> <span class="sy0">*</span> p2<span class="sy0">;</span>    <span class="coMULTI">/* 'var_1' will be evaluated differently
                                depending on which parameter is evaluated first */</span> 
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> SDA_068_2<span class="br0">&#40;</span> UINT_32 p3 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  SDA_068_1<span class="br0">&#40;</span> p3<span class="sy0">++,</span> p3<span class="sy0">++</span> <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2008 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d69' name='standard_d69'><div class='standard'><div>69&nbsp;D</div></div></a><div class='headline'>UR anomaly, variable used before assignment.</div></div><p>A particular variable is used before it is given a value. This result is generated regardless of whether a compiler claims to initialise all or some of the variables. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**************************************************************
 * Standard 69 D : UR anomaly, variable used before assignment.
 **************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> sda_069 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 var_1<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
  var_1<span class="sy0">++;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2008 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.13.4'>5.13.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp33-c'>EXP33-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_13.1.4'>13.1.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_457'>457</a>, <a href='cwe_model.htm#rule_cwe_665'>665</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a>, <a href='cwe_model.htm#rule_cwe_824'>824</a>, <a href='cwe_model.htm#rule_cwe_908'>908</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_30'>30</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_31'>31</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.13.1.4'>4.13.1.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_8.4.3'>8.4.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_30'>30</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_7'>7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_142'>142</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_257'>257</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_9.1'>9.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_8-5-1'>8-5-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_30'>30</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_9.1'>9.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.9.1'>R.9.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r1.1.1'>R1.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d70' name='standard_d70'><div class='standard'><div>70&nbsp;D</div></div></a><div class='headline'>DU anomaly, variable value is not used.</div></div><p>DU anomalies are unnecessary and can always be removed with a consequent improvement in the readability and efficiency of the code.</p>
<p>A DU anomaly will occur if a variable is assigned a value that is not used down all branches of a program.  In the example below, var_2 is not used in the else branch of the if statement.  A violation will occur even if the control flow structure means that only one branch is reached. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdio.h&gt;</span>
&nbsp;
<span class="coMULTI">/*
 * Standard 70 D : DU anomaly, variable value is not used.
 */</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> sda_070 <span class="br0">&#40;</span> <span class="kw4">const</span> UINT_32 p1 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 var_1 <span class="sy0">=</span> 0U<span class="sy0">;</span>
  UINT_32 var_2 <span class="sy0">=</span> p1<span class="sy0">;</span>  <span class="coMULTI">/* not compliant - var_2 not used in one branch */</span>
&nbsp;
  var_1<span class="sy0">++;</span>  <span class="coMULTI">/* not compliant - var_1 is not used after incrementation */</span>
&nbsp;
  <span class="kw1">if</span> <span class="br0">&#40;</span> p1 <span class="sy0">&gt;</span> 42U <span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
     <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot;%u<span class="es1">\n</span>&quot;</span><span class="sy0">,</span> var_2<span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2008 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_7'>7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_0-1-6'>0-1-6</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_0-1-9'>0-1-9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.1.1'>M1.1.1</a>, <a href='sec-c_model.htm#rule_sec-c_x1.x'>X1.x</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d71' name='standard_d71'><div class='standard'><div>71&nbsp;D</div></div></a><div class='headline'>No matching catch for throw in called function.</div></div><p>All exceptions shall be handled in all paths to that exception with a handler of a compatible type. Termination of an unhandled exception is implementation-defined.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************************
 * Standard 71 D : No matching catch for throw in called function.
 *****************************************************************/</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> sda_071_1<span class="br0">&#40;</span> <span class="kw4">const</span> UINT_32 p1 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    <span class="kw1">if</span> <span class="br0">&#40;</span> p1 <span class="sy0">&gt;</span> 1U <span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
      throw 10U<span class="sy0">;</span>
    <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> sda_071<span class="br0">&#40;</span> <span class="kw4">void</span>  <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  try
  <span class="br0">&#123;</span>
    sda_071_1<span class="br0">&#40;</span>15U<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* Throws an unsigned int */</span>
  <span class="br0">&#125;</span>
  catch <span class="br0">&#40;</span> <span class="kw4">char</span> c <span class="br0">&#41;</span>   <span class="coMULTI">/* but catches a char */</span>
  <span class="br0">&#123;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_460'>460</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_15-3-4'>15-3-4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d72' name='standard_d72'><div class='standard'><div>72&nbsp;D</div></div></a><div class='headline'>Potential side effect problem in expression.</div></div><p>The value of an expression shall be the same under any order of evaluation. Function calls can prevent this reliance if they have additional effects, such as modifying global data or a passed parameter.  The order in which side effects take place is unspecified and may lead to unexpected results.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 72 D : Potential side effect problem in expression.
 *******************************************************************/</span>
&nbsp;
UINT_32 arr<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span>1U<span class="sy0">,</span> 2U<span class="sy0">,</span> 3U<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> UINT_32 sda_072_2<span class="br0">&#40;</span> UINT_32 <span class="sy0">*</span> p2 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="br0">&#40;</span><span class="sy0">*</span>p2<span class="br0">&#41;</span><span class="sy0">++;</span>
  <span class="kw1">return</span> 1U<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> sda_072_1<span class="br0">&#40;</span> UINT_32 idx <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 p1<span class="sy0">;</span>
  p1 <span class="sy0">=</span> arr<span class="br0">&#91;</span>idx<span class="br0">&#93;</span> <span class="sy0">+</span> sda_072_2<span class="br0">&#40;</span> <span class="sy0">&amp;</span>idx <span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp10-c'>EXP10-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.10.1'>3.10.1</a>, <a href='fsb582-c_model.htm#rule_fsb582-c_3.10.2'>3.10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.17'>9.17</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_12.2'>12.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-1'>5-0-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.2'>12.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.13.2'>R.13.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r3.6.1'>R3.6.1</a>, <a href='sec-c_model.htm#rule_sec-c_r3.6.2'>R3.6.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d73' name='standard_d73'><div class='standard'><div>73&nbsp;D</div></div></a><div class='headline'>Predicate variable modified in condition.</div></div><p>The loop counter shall only be modified in the expression part of the statement, to attain greater maintainability. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> SDA_073<span class="br0">&#40;</span> <span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*
 * Standard 73 D : Predicate variable modified in condition.
 */</span> 
&nbsp;
SINT_32 ss <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
SINT_32 st <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="kw4">static</span> <span class="kw4">void</span> SDA_073<span class="br0">&#40;</span> <span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">while</span><span class="br0">&#40;</span> st <span class="sy0">&gt;</span> ss  <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span>ss <span class="sy0">=</span> <span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">&lt;</span> <span class="nu0">10</span> <span class="br0">&#41;</span><span class="br0">&#123;</span><span class="br0">&#125;</span> <span class="coMULTI">/* Not compliant  */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-5-3'>6-5-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d74' name='standard_d74'><div class='standard'><div>74&nbsp;D</div></div></a><div class='headline'>Potential side effect from repeated function call.</div></div><p>The value of an expression shall be the same under any order of evaluation. Repeated function calls can prevent this reliance if they have additional effects, such as modifying global data or a passed parameter. The order in which side effects take place is unspecified and may lead to unexpected results. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************************
 * Standard 74 D : Potential side effect from repeated function call.
 ********************************************************************/</span>
&nbsp;
SINT_32 f <span class="br0">&#40;</span> SINT_32 <span class="sy0">*</span> pp <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    <span class="sy0">*</span>pp <span class="sy0">=</span> <span class="nu0">77</span><span class="sy0">;</span>
    <span class="kw1">return</span> <span class="nu0">6</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
SINT_32 x<span class="sy0">;</span>
SINT_32 y<span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> SDA_074 <span class="br0">&#40;</span> <span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   x <span class="sy0">=</span> f<span class="br0">&#40;</span><span class="sy0">&amp;</span>y<span class="br0">&#41;</span> <span class="sy0">+</span> f<span class="br0">&#40;</span><span class="sy0">&amp;</span>y<span class="br0">&#41;</span><span class="sy0">;</span>   <span class="coMULTI">/* Not compliant  */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp10-c'>EXP10-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.10.1'>3.10.1</a>, <a href='fsb582-c_model.htm#rule_fsb582-c_3.10.2'>3.10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.17'>9.17</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_12.2'>12.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-1'>5-0-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.2'>12.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.13.2'>R.13.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r3.6.2'>R3.6.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d75' name='standard_d75'><div class='standard'><div>75&nbsp;D</div></div></a><div class='headline'>Attempt to open file pointer more than once.</div></div><p>A file that is already open shall not be opened again. The practice of multiple simultaneous file opens is implementation-defined behaviour and may lead to race conditions.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdio.h&gt;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 75 D : Attempt to open file pointer more than once.
 *******************************************************************/</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> SDA_075<span class="br0">&#40;</span> <span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 xx<span class="sy0">;</span>
&nbsp;
   FILE <span class="sy0">*</span> fptr <span class="sy0">=</span> fopen<span class="br0">&#40;</span><span class="st0">&quot;mikes.h&quot;</span><span class="sy0">,</span><span class="st0">&quot;rw&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
   fscanf<span class="br0">&#40;</span>fptr<span class="sy0">,</span><span class="st0">&quot;%d&quot;</span><span class="sy0">,&amp;</span>xx <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
   <span class="kw1">if</span><span class="br0">&#40;</span> xx <span class="sy0">==</span> <span class="nu0">0</span> <span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
     fptr <span class="sy0">=</span> fopen<span class="br0">&#40;</span><span class="st0">&quot;mikes.h&quot;</span><span class="sy0">,</span><span class="st0">&quot;rw&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* Not compliant  */</span> 
   <span class="br0">&#125;</span>
   <span class="kw1">else</span>
   <span class="br0">&#123;</span>
   <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_fio31-c'>FIO31-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_362'>362</a>, <a href='cwe_model.htm#rule_cwe_675'>675</a>, <a href='cwe_model.htm#rule_cwe_775'>775</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.3'>9.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.22.1'>R.22.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d76' name='standard_d76'><div class='standard'><div>76&nbsp;D</div></div></a><div class='headline'>Procedure is not called or referenced in code analysed.</div></div><p>All defined procedures shall be called or referenced within the code. Uncalled procedures indicate a possible defect in the code.</p>
<p>This standard differs from <a href='standards.htm#standard_s23'>23 S</a> and <a href='standards.htm#standard_s35'>35 S</a> in that it will not give a warning if a procedure is referenced by its address.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*************************************************************************
 * Standard 76 D : Procedure is not called or referenced in code analysed.
 *************************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> SDA_076 <span class="br0">&#40;</span> <span class="kw4">void</span><span class="br0">&#41;</span> <span class="coMULTI">/* not complaint */</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
SINT_32 main<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.16.18'>5.16.18</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.2.10'>1.2.10</a>, <a href='cmse_model.htm#rule_cmse_7.1.2'>7.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_561'>561</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.7.1.2'>4.7.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_0-1-10'>0-1-10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.2.1'>R.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.1.1'>M1.1.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d77' name='standard_d77'><div class='standard'><div>77&nbsp;D</div></div></a><div class='headline'>Local structure returned in function result.</div></div><p>A function shall not return a structure object that contains a pointer to a local object. Following return of control to the calling function the local object will have gone out of scope and no longer exist. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**************************************************************
 * Standard 77 D : Local structure returned in function result.
 **************************************************************/</span> 
&nbsp;
<span class="kw4">struct</span> tag
<span class="br0">&#123;</span>
   UCHAR  <span class="sy0">*</span> uptr<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">struct</span> tag SDA_077 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UCHAR  loc <span class="sy0">=</span> <span class="nu0">42</span><span class="sy0">;</span>
&nbsp;
   <span class="kw4">struct</span> tag rtag<span class="sy0">;</span>
   rtag.<span class="me1">uptr</span> <span class="sy0">=</span> <span class="sy0">&amp;</span>loc<span class="sy0">;</span>
&nbsp;
   <span class="kw1">return</span>   rtag<span class="sy0">;</span> <span class="coMULTI">/* Not compliant  */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl30-c'>DCL30-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_562'>562</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a>, <a href='cwe_model.htm#rule_cwe_825'>825</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_4.11'>4.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_17.6'>17.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_17.6'>17.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.18.6'>R.18.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_x3.x'>X3.x</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d78' name='standard_d78'><div class='standard'><div>78&nbsp;D</div></div></a><div class='headline'>Global variable should be declared const.</div></div><p>Global variables should be declared constant wherever possible to avoid unintentional modification, thereby helping to ensure the correctness and security of applications.</p>
<p>Local variables are covered by standard <a href='standards.htm#standard_d93'>93 D</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> SDA_078<span class="br0">&#40;</span> <span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*
 * Standard 78 D : Variable should be declared const.
 */</span> 
&nbsp;
UCHAR glob<span class="sy0">=</span><span class="nu0">9</span><span class="sy0">;</span> <span class="coMULTI">/* Not compliant  */</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> SDA_078<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UCHAR loc<span class="sy0">;</span>
   loc <span class="sy0">=</span> glob<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">int</span> main<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    SDA_078<span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl00-c'>DCL00-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_736'>736</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_4.6'>4.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_7-1-1'>7-1-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.11.1'>M1.11.1</a>, <a href='sec-c_model.htm#rule_sec-c_m1.11.3'>M1.11.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d79' name='standard_d79'><div class='standard'><div>79&nbsp;D</div></div></a><div class='headline'>Member function may be declared static.</div></div><p>Member functions should be declared static wherever possible to avoid unintentional modification, thereby helping to ensure the correctness and security of applications.  Non-member functions are covered by standard <a href='standards.htm#standard_d61'>61 D</a>.  </p>
<p>A function with no static or const qualifier may flag both a <a href='standards.htm#standard_d46'>46 D</a> and a 79 D violation. In this case the function should be declared static, as adding both qualifiers is illegal. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*********************************************************
 * Standard 79 D : Member function may be declared static.
 *********************************************************/</span>
&nbsp;
class Student
<span class="br0">&#123;</span>
  public<span class="sy0">:</span>
    Student<span class="br0">&#40;</span><span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
      m_NumStudents<span class="sy0">++;</span>
    <span class="br0">&#125;</span>
&nbsp;
    <span class="kw4">static</span> UINT_32 m_NumStudents<span class="sy0">;</span>
&nbsp;
    UINT_32 getTotal<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
    <span class="br0">&#123;</span>
      <span class="kw1">return</span> m_NumStudents<span class="sy0">;</span>
    <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
UINT_32 Student<span class="sy0">::</span><span class="me2">m_NumStudents</span> <span class="sy0">=</span> 0U<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> SDA_079<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 total<span class="sy0">;</span>
&nbsp;
  Student my_student<span class="sy0">;</span>
  total <span class="sy0">=</span> my_student.<span class="me1">getTotal</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_9-3-3'>9-3-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d80' name='standard_d80'><div class='standard'><div>80&nbsp;D</div></div></a><div class='headline'>Potentially unused function-modified value.</div></div><p>The value returned by a function should be used or discarded using (void). Simply assigning the value to a variable that is not subsequently used is not sufficient. </p>
<p>In particular, the status returned by input/output functions should be checked and errors handled appropriately. The failure to check file operation errors may lead to unexpected behaviour.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*************************************************************
 * Standard 80 D : Potentially unused function-modified value.
 *************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> SINT_32 func<span class="br0">&#40;</span>SINT_32 pp<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    <span class="kw1">return</span> pp<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> SDA_080<span class="br0">&#40;</span> <span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   SINT_32 x<span class="sy0">;</span>
   x <span class="sy0">=</span> func<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* Not compliant  */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_fio04-c'>FIO04-C</a>, <a href='cert-c_model.htm#rule_cert-c_fio33-c'>FIO33-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_252'>252</a>, <a href='cwe_model.htm#rule_cwe_273'>273</a>, <a href='cwe_model.htm#rule_cwe_391'>391</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_7'>7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r3.3.1'>R3.3.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d81' name='standard_d81'><div class='standard'><div>81&nbsp;D</div></div></a><div class='headline'>Attempt to remove an open file.</div></div><p>Removing an open file is implementation defined, and may lead to abnormal termination or a failure to delete files. The latter has security implications as a result of unintended information disclosure. A more strongly defined function should be considered instead of remove().</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdio.h&gt;</span>
&nbsp;
<span class="coMULTI">/**************************************************
 * Standard 81 D : Attempt to remove an open file.
 **************************************************/</span> 
&nbsp;
FILE <span class="sy0">*</span> fptr<span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> SDA_081<span class="br0">&#40;</span> <span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   fptr <span class="sy0">=</span> fopen<span class="br0">&#40;</span><span class="st0">&quot;mikes.h&quot;</span><span class="sy0">,</span><span class="st0">&quot;r&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
   remove<span class="br0">&#40;</span><span class="st0">&quot;mikes.h&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* Not compliant  */</span> 
   fclose<span class="br0">&#40;</span>fptr<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_fio08-c'>FIO08-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_775'>775</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d82' name='standard_d82'><div class='standard'><div>82&nbsp;D</div></div></a><div class='headline'>fsetpos values not generated by fgetpos.</div></div><p>Do not use values for fsetpos() that have not been obtained by a prior successful call to fgetpos(). Any other values for pos result in undefined behaviour, which could provide a user with unauthorised access to data being read from the file. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdio.h&gt; </span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 82 D : fsetpos values not generated by fgetpos.
*******************************************************************/</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> SDA_082<span class="br0">&#40;</span> <span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   FILE <span class="sy0">*</span> fptr<span class="sy0">;</span>
   <span class="kw4">struct</span> <span class="br0">&#123;</span>SINT_32 ff<span class="sy0">;</span><span class="br0">&#125;</span>astr<span class="sy0">;</span>
&nbsp;
   fpos_t <span class="sy0">*</span> anoffset <span class="sy0">=</span> <span class="br0">&#40;</span>fpos_t <span class="sy0">*</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>astr<span class="sy0">;</span>
   fptr <span class="sy0">=</span> fopen<span class="br0">&#40;</span><span class="st0">&quot;afile.h&quot;</span><span class="sy0">,</span><span class="st0">&quot;w&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
   fsetpos<span class="br0">&#40;</span>fptr<span class="sy0">,</span>anoffset<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_fio44-c'>FIO44-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d83' name='standard_d83'><div class='standard'><div>83&nbsp;D</div></div></a><div class='headline'>Potentially repeated call to ungetc.</div></div><p>Calls to ungetc() should be separated by successful calls to a file positioning function such as fseek(), fsetpos(), or rewind(). Improper use of ungetc may cause data to be truncated or lost. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdio.h&gt; </span>
<span class="kw4">static</span> <span class="kw4">void</span> SDA_083<span class="br0">&#40;</span> SINT_32 par <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*
 * Standard 83 D : Potentially repeated call to ungetc.
 */</span> 
&nbsp;
&nbsp;
SINT_32 ch<span class="sy0">;</span>
FILE <span class="sy0">*</span> fptr<span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> SDA_083<span class="br0">&#40;</span> SINT_32 par <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw1">if</span><span class="br0">&#40;</span> par <span class="sy0">==</span> <span class="nu0">341</span> <span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      ungetc<span class="br0">&#40;</span>ch<span class="sy0">,</span>fptr<span class="br0">&#41;</span><span class="sy0">;</span>
   <span class="br0">&#125;</span>
   <span class="kw1">if</span><span class="br0">&#40;</span> par <span class="sy0">&gt;</span> <span class="nu0">0</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
      ungetc<span class="br0">&#40;</span>ch<span class="sy0">,</span>fptr<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* Not compliant  */</span> 
   <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_fio13-c'>FIO13-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_675'>675</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d84' name='standard_d84'><div class='standard'><div>84&nbsp;D</div></div></a><div class='headline'>No fseek or flush before I/O.</div></div><p>Input and ouptut from a stream shall be separated by successful calls to a fflush() or a file positioning function such as fseek(), fsetpos(), or rewind() to avoid undefined behaviour arising. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdio.h&gt; </span>
<span class="co2">#include &lt;string.h&gt; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> SDA_084<span class="br0">&#40;</span> <span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*
 * Standard 84 D : No fseek or flush before I/O.
 */</span> 
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> SDA_084<span class="br0">&#40;</span> <span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw4">int</span> c<span class="sy0">,</span>i<span class="sy0">;</span>
   <span class="kw4">char</span> data<span class="br0">&#91;</span><span class="nu0">256</span><span class="br0">&#93;</span><span class="sy0">,</span>append_data<span class="br0">&#91;</span><span class="nu0">256</span><span class="br0">&#93;</span><span class="sy0">;</span>
   FILE <span class="sy0">*</span>fp1<span class="sy0">;</span>
   strcpy<span class="br0">&#40;</span>append_data<span class="sy0">,</span><span class="st0">&quot;Some data to append&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
   fp1 <span class="sy0">=</span> fopen<span class="br0">&#40;</span><span class="st0">&quot;pf1.txt&quot;</span><span class="sy0">,</span><span class="st0">&quot;a+&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
   c <span class="sy0">=</span> getc<span class="br0">&#40;</span>fp1<span class="br0">&#41;</span><span class="sy0">;</span>
   fwrite<span class="br0">&#40;</span>append_data<span class="sy0">,</span><span class="nu0">256</span><span class="sy0">,</span><span class="nu0">1</span><span class="sy0">,</span>fp1<span class="br0">&#41;</span><span class="sy0">;</span>
   <span class="kw1">if</span> <span class="br0">&#40;</span>c <span class="sy0">!=</span> <span class="st0">'o'</span><span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      <span class="coMULTI">/* Not compliant */</span> 
      fread<span class="br0">&#40;</span>data<span class="sy0">,</span><span class="nu0">256</span><span class="sy0">,</span><span class="nu0">1</span><span class="sy0">,</span>fp1<span class="br0">&#41;</span><span class="sy0">;</span>
   <span class="br0">&#125;</span>
   fclose <span class="br0">&#40;</span>fp1<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_fio39-c'>FIO39-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d85' name='standard_d85'><div class='standard'><div>85&nbsp;D</div></div></a><div class='headline'>Filename not verified before fopen.</div></div><p>File names originating from untrusted sources should be validated to ensure that the file name refers to an expected and valid file. Typically this will require the file name to be an absolute path name. Validation addresses the exploitable vulnerability whereby access to an unintended file is permitted.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdio.h&gt; </span>
<span class="co2">#include &lt;string.h&gt; </span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 85 D : Filename not verified before fopen.
 *******************************************************************/</span> 
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> SDA_085<span class="br0">&#40;</span> <span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw4">char</span> ok_file_name<span class="br0">&#91;</span><span class="nu0">256</span><span class="br0">&#93;</span><span class="sy0">,</span>bad_file_name1<span class="br0">&#91;</span><span class="nu0">256</span><span class="br0">&#93;</span><span class="sy0">,</span>bad_file_name2<span class="br0">&#91;</span><span class="nu0">256</span><span class="br0">&#93;</span><span class="sy0">;</span>
   FILE <span class="sy0">*</span>fp1<span class="sy0">,*</span>fp2<span class="sy0">,*</span>fp3<span class="sy0">;</span>
&nbsp;
   strcpy<span class="br0">&#40;</span>ok_file_name<span class="sy0">,</span><span class="st0">&quot;/home/ldra.txt&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
   fp1 <span class="sy0">=</span> fopen<span class="br0">&#40;</span>ok_file_name<span class="sy0">,</span><span class="st0">&quot;w&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* No error here because string is known */</span>
&nbsp;
   scanf<span class="br0">&#40;</span><span class="st0">&quot;%s %s&quot;</span><span class="sy0">,</span>bad_file_name1<span class="sy0">,</span>bad_file_name2<span class="br0">&#41;</span><span class="sy0">;</span>   
   <span class="kw1">if</span> <span class="br0">&#40;</span>strcmp<span class="br0">&#40;</span>bad_file_name2<span class="sy0">,</span><span class="st0">&quot;bad_file.txt&quot;</span><span class="br0">&#41;</span> <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      fp2 <span class="sy0">=</span> fopen<span class="br0">&#40;</span>bad_file_name1<span class="sy0">,</span><span class="st0">&quot;w&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
      <span class="coMULTI">/* No error here because the file name has been mentioned
         in a conditional */</span> 
      fp3 <span class="sy0">=</span> fopen<span class="br0">&#40;</span>bad_file_name2<span class="sy0">,</span><span class="st0">&quot;w&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
   <span class="br0">&#125;</span>
&nbsp;
   fclose <span class="br0">&#40;</span>fp1<span class="br0">&#41;</span><span class="sy0">;</span>
   fclose <span class="br0">&#40;</span>fp2<span class="br0">&#41;</span><span class="sy0">;</span>
   fclose <span class="br0">&#40;</span>fp3<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_fio02-c'>FIO02-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_22'>22</a>, <a href='cwe_model.htm#rule_cwe_37'>37</a>, <a href='cwe_model.htm#rule_cwe_38'>38</a>, <a href='cwe_model.htm#rule_cwe_39'>39</a>, <a href='cwe_model.htm#rule_cwe_41'>41</a>, <a href='cwe_model.htm#rule_cwe_59'>59</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d86' name='standard_d86'><div class='standard'><div>86&nbsp;D</div></div></a><div class='headline'>User input not checked before use.</div></div><p>User input shall be checked before it is used. It is particularly dangerous to call I/O functions with a format string containing user input, since malicious users could attack a vulnerable process permitting access to the stack or heap memory.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdio.h&gt; </span>
<span class="co2">#include &lt;string.h&gt; </span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 86 D : User input not checked before use.
 *******************************************************************/</span>
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> SDA_086<span class="br0">&#40;</span> <span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw4">char</span> input_string1<span class="br0">&#91;</span><span class="nu0">256</span><span class="br0">&#93;</span><span class="sy0">,</span> input_string2<span class="br0">&#91;</span><span class="nu0">256</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
   scanf<span class="br0">&#40;</span><span class="st0">&quot;%s %s&quot;</span><span class="sy0">,</span>input_string1<span class="sy0">,</span> input_string2<span class="br0">&#41;</span><span class="sy0">;</span>
   <span class="kw1">if</span> <span class="br0">&#40;</span>input_string2 <span class="sy0">!=</span> NULL<span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      <span class="coMULTI">/* Not compliant */</span> 
      fprintf<span class="br0">&#40;</span>stderr<span class="sy0">,</span> input_string1<span class="br0">&#41;</span><span class="sy0">;</span>
   <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_fio30-c'>FIO30-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_134'>134</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d87' name='standard_d87'><div class='standard'><div>87&nbsp;D</div></div></a><div class='headline'>Illegal shared object in signal handler.</div></div><p>Non-volatile shared objects shall not be used in signal handlers. Access to a shared object in signal handlers is viewed as undefined behaviour, and may lead to race conditions.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;signal.h&gt; </span>
<span class="co2">#include &lt;stdlib.h&gt; </span>
<span class="co2">#include &lt;stdio.h&gt; </span>
&nbsp;
<span class="coMULTI">/**********************************************************
 * Standard 87 D : Illegal shared object in signal handler.
 **********************************************************/</span>
&nbsp;
INT_32 glob_var<span class="sy0">;</span>
<span class="kw4">volatile</span> sig_atomic_t e_flag <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*
 * This is a non-compliant signal handler because it accesses glob_var
 * which is an ordinary integer
 */</span> 
<span class="kw4">void</span> my_handler1<span class="br0">&#40;</span><span class="kw4">int</span> signum<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   glob_var <span class="sy0">=</span> <span class="nu0">99</span><span class="sy0">;</span>
   fprintf<span class="br0">&#40;</span>stderr<span class="sy0">,</span><span class="st0">&quot;Signal %d encountered<span class="es1">\n</span>&quot;</span><span class="sy0">,</span>signum<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="coMULTI">/*
 * This is a compliant signal handler because it only accesses e_flag
 * which is a volatile type
 */</span> 
<span class="kw4">void</span> my_handler2<span class="br0">&#40;</span><span class="kw4">int</span> signum<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   e_flag <span class="sy0">=</span> <span class="nu0">99</span><span class="sy0">;</span>
   fprintf<span class="br0">&#40;</span>stderr<span class="sy0">,</span><span class="st0">&quot;Signal %d encountered<span class="es1">\n</span>&quot;</span><span class="sy0">,</span>signum<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> SDA_087<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   signal<span class="br0">&#40;</span>SIGINT<span class="sy0">,</span> my_handler1<span class="br0">&#41;</span><span class="sy0">;</span>
   signal<span class="br0">&#40;</span>SIGTERM<span class="sy0">,</span>my_handler2<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_sig31-c'>SIG31-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_662'>662</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d88' name='standard_d88'><div class='standard'><div>88&nbsp;D</div></div></a><div class='headline'>Illegal use of longjmp in signal handler.</div></div><p>The longjmp() function shall not be invoked in signal handlers. The use of longjmp in signal handlers can lead to undefined behaviour - likely to compromise the integrity of the program - if as a result calling longjmp(), a function with side-effects is invoked. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;signal.h&gt; </span>
<span class="co2">#include &lt;string.h&gt; </span>
<span class="co2">#include &lt;stdlib.h&gt; </span>
<span class="co2">#include &lt;stdio.h&gt; </span>
<span class="co2">#include &lt;setjmp.h&gt; </span>
&nbsp;
<span class="kw4">void</span> SDA_088<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw4">void</span> my_handler1<span class="br0">&#40;</span><span class="kw4">int</span> signum<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*
 * Standard 88 D : Illegal use of longjmp in signal handler.
 */</span> 
&nbsp;
<span class="kw4">static</span> jmp_buf env<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*
 * This is a non-compliant signal handler because it uses longjmp
 */</span> 
<span class="kw4">void</span> my_handler1<span class="br0">&#40;</span><span class="kw4">int</span> signum<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   fprintf<span class="br0">&#40;</span>stderr<span class="sy0">,</span><span class="st0">&quot;Signal %d encountered<span class="es1">\n</span>&quot;</span><span class="sy0">,</span>signum<span class="br0">&#41;</span><span class="sy0">;</span>
   longjmp<span class="br0">&#40;</span>env<span class="sy0">,</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> SDA_088<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   setjmp<span class="br0">&#40;</span>env<span class="br0">&#41;</span><span class="sy0">;</span>
   signal<span class="br0">&#40;</span>SIGINT<span class="sy0">,</span>my_handler1<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_sig32-c'>SIG32-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_479'>479</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d89' name='standard_d89'><div class='standard'><div>89&nbsp;D</div></div></a><div class='headline'>Illegal use of raise in signal handler.</div></div><p>The raise() function shall not be invoked by a signal handler. If a signal occurs as a result of calling abort or raise, then a further call to raise gives rise to recursion leading to undefined behaviour.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;signal.h&gt; </span>
<span class="co2">#include &lt;string.h&gt; </span>
<span class="co2">#include &lt;stdlib.h&gt; </span>
<span class="co2">#include &lt;stdio.h&gt; </span>
<span class="co2">#include &lt;setjmp.h&gt; </span>
&nbsp;
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 89 D : Illegal use of raise in signal handler.
*******************************************************************/</span>
&nbsp;
<span class="kw4">static</span> jmp_buf env<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> my_handler1<span class="br0">&#40;</span>INT_32 signum<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   fprintf<span class="br0">&#40;</span>stderr<span class="sy0">,</span><span class="st0">&quot;Signal %d encountered<span class="es1">\n</span>&quot;</span><span class="sy0">,</span>signum<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * This is a non-compliant signal handler because it uses raise
 */</span> 
<span class="kw4">void</span> my_handler2<span class="br0">&#40;</span>INT_32 signum<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   fprintf<span class="br0">&#40;</span>stderr<span class="sy0">,</span><span class="st0">&quot;Signal %d encountered<span class="es1">\n</span>&quot;</span><span class="sy0">,</span>signum<span class="br0">&#41;</span><span class="sy0">;</span>
   raise<span class="br0">&#40;</span>SIGUSR1<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> SDA_089<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   signal<span class="br0">&#40;</span>SIGUSR1<span class="sy0">,</span> my_handler1<span class="br0">&#41;</span><span class="sy0">;</span>
   signal<span class="br0">&#40;</span>SIGINT<span class="sy0">,</span>  my_handler2<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_sig33-c'>SIG33-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_479'>479</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d90' name='standard_d90'><div class='standard'><div>90&nbsp;D</div></div></a><div class='headline'>Unguarded global used in threaded function.</div></div><p>For multi-threaded applications, resources that are shared between threads - that is, global objects, shall be guarded to prevent simultaneous use, by means of mutual exclusion (mutex) algorithms. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*
 * Standard 90 D : Unguarded global used in threaded function.
 */</span> 
&nbsp;
<span class="coMULTI">/*
 * Simple deadlock
 * Threaded functions which lock a mutex.
 * lock/unlock in wrong order in funcB-- another type of race condition.
 */</span> 
&nbsp;
<span class="co2">#include &lt;stdio.h&gt; </span>
<span class="co1">// #include &lt;unistd.h&gt; </span>
<span class="co2">#include &lt;stdlib.h&gt; </span>
&nbsp;
<span class="co2">#include &lt;math.h&gt; </span>
<span class="co2">#include &lt;sys/types.h&gt; </span>
<span class="co2">#include &lt;semaphore.h&gt; </span>
<span class="co2">#include &lt;pthread.h&gt; </span>
&nbsp;
<span class="co2">#define NumOfThreads 2</span>
<span class="kw4">int</span> ind<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu0">1</span><span class="br0">&#125;</span><span class="sy0">;</span>
pthread_mutex_t mutexA<span class="sy0">;</span>
<span class="kw4">static</span> pthread_t TheThread<span class="br0">&#91;</span>NumOfThreads<span class="br0">&#93;</span><span class="sy0">;</span>
<span class="kw4">void</span> <span class="sy0">*</span>funcA<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="sy0">*</span> arg <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw4">void</span> <span class="sy0">*</span>funcB<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="sy0">*</span> arg <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw4">int</span> count <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="kw4">int</span> main<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
   <span class="kw4">int</span> i<span class="sy0">,</span> status<span class="sy0">;</span>
&nbsp;
   <span class="kw1">if</span> <span class="br0">&#40;</span> pthread_mutex_init<span class="br0">&#40;</span><span class="sy0">&amp;</span>mutexA <span class="sy0">,</span> NULL<span class="br0">&#41;</span> <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">&#41;</span><span class="br0">&#123;</span> <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot;Error initialising mutex<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><span class="br0">&#125;</span>
&nbsp;
   pthread_create<span class="br0">&#40;</span> <span class="sy0">&amp;</span>TheThread<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="sy0">,</span> NULL<span class="sy0">,</span> funcA <span class="sy0">,</span> <span class="sy0">&amp;</span>ind<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
   pthread_create<span class="br0">&#40;</span> <span class="sy0">&amp;</span>TheThread<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="sy0">,</span> NULL<span class="sy0">,</span> funcB <span class="sy0">,</span> <span class="sy0">&amp;</span>ind<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
   <span class="kw1">for</span><span class="br0">&#40;</span>i<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span>i <span class="sy0">&lt;</span>NumOfThreads<span class="sy0">;</span>i<span class="sy0">++</span><span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      pthread_join<span class="br0">&#40;</span>TheThread<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">,</span> <span class="br0">&#40;</span><span class="kw4">void</span> <span class="sy0">**</span><span class="br0">&#41;</span><span class="sy0">&amp;</span>status <span class="br0">&#41;</span><span class="sy0">;</span>  <span class="co1">// Exit the threads </span>
   <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> <span class="sy0">*</span>funcA<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="sy0">*</span> arg <span class="br0">&#41;</span><span class="br0">&#123;</span>
   <span class="kw4">int</span> <span class="sy0">*</span>i <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">int</span><span class="sy0">*</span><span class="br0">&#41;</span>arg<span class="sy0">;</span>
&nbsp;
   <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot;Thread number %d<span class="es1">\n</span>&quot;</span><span class="sy0">,</span> <span class="sy0">*</span>i<span class="br0">&#41;</span><span class="sy0">;</span>
   pthread_mutex_lock<span class="br0">&#40;</span><span class="sy0">&amp;</span>mutexA<span class="br0">&#41;</span><span class="sy0">;</span>
   count<span class="sy0">++;</span>
   pthread_mutex_unlock<span class="br0">&#40;</span><span class="sy0">&amp;</span>mutexA<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
   <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> <span class="sy0">*</span>funcB<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="sy0">*</span> arg <span class="br0">&#41;</span><span class="br0">&#123;</span>
   <span class="kw4">int</span> <span class="sy0">*</span>i <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">int</span><span class="sy0">*</span><span class="br0">&#41;</span>arg<span class="sy0">;</span>
&nbsp;
   <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot;Thread number %d<span class="es1">\n</span>&quot;</span><span class="sy0">,</span> <span class="sy0">*</span>i<span class="br0">&#41;</span><span class="sy0">;</span>
   pthread_mutex_unlock<span class="br0">&#40;</span><span class="sy0">&amp;</span>mutexA<span class="br0">&#41;</span><span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span> 
   count<span class="sy0">++;</span>
   pthread_mutex_lock<span class="br0">&#40;</span><span class="sy0">&amp;</span>mutexA<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
   <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_362'>362</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d91' name='standard_d91'><div class='standard'><div>91&nbsp;D</div></div></a><div class='headline'>Function return value potentially unused.</div></div><p>The value returned by a function should be used or discarded using (void). Simply assigning the value to a variable that is not subsequently used is not sufficient. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 91 D : Function return value potentially unused.
 *******************************************************************/</span>
&nbsp;
<span class="kw4">static</span> UINT_32 return_unsigned <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">return</span> 4U<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> SDA_091 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 unused1<span class="sy0">;</span>
   unused1 <span class="sy0">=</span> return_unsigned <span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_252'>252</a>, <a href='cwe_model.htm#rule_cwe_273'>273</a>, <a href='cwe_model.htm#rule_cwe_391'>391</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_115'>115</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_16.10'>16.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_16.10'>16.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_d.4.7'>D.4.7</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.17.7'>R.17.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r3.3.1'>R3.3.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d92' name='standard_d92'><div class='standard'><div>92&nbsp;D</div></div></a><div class='headline'>C'tor/d'tor calls virtual function.</div></div><p>A virtual function of a class should not be called from its constructors or destructor. This may lead to unexpected behaviour, as for example when a constructor of a derived class calls the virtual function of the base class instead of the derived class.</p>
<p>A virtual function can be used in a constructor or destructor, if the function can be determined statically using the scope resolution operator (::).</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="coMULTI">/*******************************************************************
 * Standard 92 D : C'tor/d'tor calls virtual function.
 *******************************************************************/</span>
&nbsp;
class Data
<span class="br0">&#123;</span>
   public<span class="sy0">:</span>
       Data <span class="br0">&#40;</span> <span class="br0">&#41;</span>  <span class="br0">&#123;</span> virt_fun <span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy0">;</span> <span class="br0">&#125;</span>  <span class="coMULTI">/* not compliant */</span>
      ~Data <span class="br0">&#40;</span> <span class="br0">&#41;</span>  <span class="br0">&#123;</span> virt_fun <span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy0">;</span> <span class="br0">&#125;</span>  <span class="coMULTI">/* not compliant */</span>
      virtual <span class="kw4">void</span> virt_fun <span class="br0">&#40;</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
class Data2
<span class="br0">&#123;</span>
   public<span class="sy0">:</span>
       Data2 <span class="br0">&#40;</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span> Data2<span class="sy0">::</span><span class="me2">virt_fun2</span> <span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy0">;</span> <span class="br0">&#125;</span> <span class="coMULTI">/* compliant */</span>
      ~Data2 <span class="br0">&#40;</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span> Data2<span class="sy0">::</span><span class="me2">virt_fun2</span> <span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy0">;</span> <span class="br0">&#125;</span> <span class="coMULTI">/* compliant */</span>
      virtual <span class="kw4">void</span> virt_fun2 <span class="br0">&#40;</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_3.3.13'>3.3.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_71.1'>71.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_12-1-1'>12-1-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d93' name='standard_d93'><div class='standard'><div>93&nbsp;D</div></div></a><div class='headline'>Local variable should be declared const.</div></div><p>Local variables should be declared constant wherever possible to avoid unintentional modification, thereby helping to ensure the correctness and security of applications.</p>
<p>Global variables are covered by standard <a href='standards.htm#standard_d78'>78 D</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 93 D : Local variable should be declared const.
 *******************************************************************/</span>
&nbsp;
<span class="kw4">void</span> SDA_093 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 local <span class="sy0">=</span> 44U<span class="sy0">;</span>
  use_uint<span class="br0">&#40;</span>local<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl00-c'>DCL00-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_736'>736</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_7-1-1'>7-1-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.11.1'>M1.11.1</a>, <a href='sec-c_model.htm#rule_sec-c_m1.11.3'>M1.11.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d94' name='standard_d94'><div class='standard'><div>94&nbsp;D</div></div></a><div class='headline'>Named variable declared but not used in code.</div></div><p>This variable has been declared, but not used and hence can be removed. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 94 D : Named variable declared but not used in code.
 *******************************************************************/</span>
&nbsp;
UINT_32 SDA_094<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 v_1<span class="sy0">;</span>
   UINT_32 v_2<span class="sy0">;</span>  <span class="coMULTI">/* Not Compliant */</span>
&nbsp;
   v_1 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
   <span class="kw1">return</span> v_1<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2011 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.16.8'>5.16.8</a>, <a href='cast_model.htm#rule_cast_5.16.18'>5.16.18</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc13-c'>MSC13-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.2.10'>1.2.10</a>, <a href='cmse_model.htm#rule_cmse_1.2.11'>1.2.11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_563'>563</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_143'>143</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_5.2.1'>5.2.1</a>, <a href='gjb_model.htm#rule_gjb_5.2.2'>5.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_0-1-3'>0-1-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d95' name='standard_d95'><div class='standard'><div>95&nbsp;D</div></div></a><div class='headline'>Named global function pointer used in procedure.</div></div><p>Some authorities believe that the use of global function pointers is bad programming practice. Certainly it is more difficult to reuse procedures that use such pointers. Furthermore, the order of initialisation across translation units is unspecified, and so any module which contains the appropriate declaration may access a global function pointer defined elsewhere before it has received an initial value.</p>
<p>This standard will also be generated for procedures that indirectly access global function pointers through procedure calls. Checks on global variables and pointers are covered by <a href='standards.htm#standard_d10'>10 D</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="kw2">extern</span> <span class="kw4">void</span> gf1<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> <span class="br0">&#40;</span><span class="sy0">*</span>gfptr<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="sy0">&amp;</span>gf1<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> SDA_095<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   gfptr<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>   <span class="coMULTI">/* Not Compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2011 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_6.6'>6.6</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_8.2.2'>8.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d96' name='standard_d96'><div class='standard'><div>96&nbsp;D</div></div></a><div class='headline'>Variable has repeated initialisation.</div></div><p>A variable exists that has been initialised, and has then been assigned a value without being referenced. Such anomalies can arise from programming errors. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard 96 D : Variable has repeated initialisation.
 *******************************************************/</span>
&nbsp;
<span class="kw4">void</span> SDA_096<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 v_1 <span class="sy0">=</span> 0U<span class="sy0">;</span>  <span class="coMULTI">/* Not Compliant */</span>
   v_1 <span class="sy0">=</span> 3U<span class="sy0">;</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d97' name='standard_d97'><div class='standard'><div>97&nbsp;D</div></div></a><div class='headline'>Signal called from within signal handler.</div></div><p>The signal() function shall not be invoked by a signal handler. Calling the signal function from within a signal handler may result in a race condition in non-persistent platforms. This may cause the signal's default behaviour despite a handler's attempt to override it.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;signal.h&gt; </span>
<span class="co2">#include &lt;stdio.h&gt; </span>
&nbsp;
<span class="coMULTI">/************************************************************
 * Standard 97 D : Signal called from within signal handler.
*************************************************************/</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> my_handler2<span class="br0">&#40;</span>INT_32 signum<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   fprintf<span class="br0">&#40;</span>stderr<span class="sy0">,</span><span class="st0">&quot;Signal %d encountered<span class="es1">\n</span>&quot;</span><span class="sy0">,</span> signum<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> my_handler1<span class="br0">&#40;</span>INT_32 signum<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   fprintf<span class="br0">&#40;</span>stderr<span class="sy0">,</span><span class="st0">&quot;Signal %d encountered<span class="es1">\n</span>&quot;</span><span class="sy0">,</span> signum<span class="br0">&#41;</span><span class="sy0">;</span>
   signal<span class="br0">&#40;</span>SIGHUP<span class="sy0">,</span> my_handler2<span class="br0">&#41;</span><span class="sy0">;</span>              <span class="coMULTI">/* Not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> SDA_097<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   signal<span class="br0">&#40;</span>SIGINT<span class="sy0">,</span>  my_handler1<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_sig34-c'>SIG34-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_479'>479</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d98' name='standard_d98'><div class='standard'><div>98&nbsp;D</div></div></a><div class='headline'>Attempt to write to file opened read only.</div></div><p>The C standard does not specify the behaviour if an attempt is made to write to a file that has been opened as read only.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdio.h&gt;</span>
&nbsp;
<span class="coMULTI">/************************************************************
 * Standard 98 D : Attempt to write to file opened for read
 ************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> SDA_098<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  FILE <span class="sy0">*</span>fp1<span class="sy0">;</span>
&nbsp;
  fp1 <span class="sy0">=</span> fopen<span class="br0">&#40;</span><span class="st0">&quot;file1.dat&quot;</span><span class="sy0">,</span> <span class="st0">&quot;r&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  fprintf<span class="br0">&#40;</span>fp1<span class="sy0">,</span> <span class="st0">&quot;Attempting to write to read-only file<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* Not compliant */</span>
  fclose<span class="br0">&#40;</span>fp1<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.22.4'>R.22.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d99' name='standard_d99'><div class='standard'><div>99&nbsp;D</div></div></a><div class='headline'>Named pointer object used in procedure.</div></div><p>Some authorities believe that the use of global pointers is bad programming practice. Certainly it is more difficult to reuse procedures that use such variables. Furthermore, the order of initialisation across translation units is unspecified, and so any module which contains the appropriate declaration may access a global pointer defined elsewhere before it has received an initial value.</p>
<p>Checks on global variables and global function pointers are covered by <a href='standards.htm#standard_d10'>10 D</a> and <a href='standards.htm#standard_d95'>95 D</a>. This rule covers pointer members of classes.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">int</span> <span class="sy0">*</span>m_ptr<span class="sy0">;</span>        <span class="coMULTI">/* Global pointer */</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 99 D : Named pointer object used in procedure.
 ********************************************************/</span> 
&nbsp;
<span class="kw4">void</span> SDA_099<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">*</span>m_ptr <span class="sy0">=</span> <span class="nu0">98</span><span class="sy0">;</span>
<span class="br0">&#125;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d100' name='standard_d100'><div class='standard'><div>100&nbsp;D</div></div></a><div class='headline'>Named static member object used in procedure.</div></div><p>Some authorities believe that the use of static members objects is bad programming practice. Certainly it is more difficult to reuse procedures that use such variables. </p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/****************************************************************
 * Standard 100 D : Named static member object used in procedure.
 *****************************************************************/</span> 
&nbsp;
class my_class
<span class="br0">&#123;</span>
 public<span class="sy0">:</span>
   my_class <span class="br0">&#40;</span><span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
   <span class="br0">&#125;</span>
&nbsp;
   <span class="kw4">void</span> proc1<span class="br0">&#40;</span><span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      sint <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
   <span class="br0">&#125;</span>
&nbsp;
   <span class="kw4">static</span> INT_32 sint<span class="sy0">;</span>
&nbsp;
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
INT_32 my_class<span class="sy0">::</span><span class="me2">sint</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> sda_100<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   my_class m<span class="sy0">;</span>
   m.<span class="me1">proc1</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_6.6'>6.6</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_8.2.2'>8.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d101' name='standard_d101'><div class='standard'><div>101&nbsp;D</div></div></a><div class='headline'>Function has static member variable side effects.</div></div><p>A function has static member variable side effects if it can return a value through a static member as well as by means of its parameters (possibly) and its return type. The safest form is one which only returns a value through the return type.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*********************************************************************
 * Standard 101 D : Function has static member variable side effects.
 *********************************************************************/</span>
&nbsp;
class my_class
<span class="br0">&#123;</span>
 public<span class="sy0">:</span>
   my_class <span class="br0">&#40;</span><span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
   <span class="br0">&#125;</span>
&nbsp;
   INT_32 proc1<span class="br0">&#40;</span><span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      sint <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
      <span class="kw1">return</span> sint<span class="sy0">;</span>
   <span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
   <span class="kw4">static</span> INT_32 sint<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
INT_32 my_class<span class="sy0">::</span><span class="me2">sint</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> SDA_101<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   my_class m<span class="sy0">;</span>
   m.<span class="me1">proc1</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_1.13'>1.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d102' name='standard_d102'><div class='standard'><div>102&nbsp;D</div></div></a><div class='headline'>Void function has static member variable side effects.</div></div><p>Procedures that have static member variable side effects shall be avoided as their invocation may result in unexpected results when the order of evaluation in the calling expression is significant.</p>
<p>Constructors and destructors are excluded from this standard.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*************************************************************************
 * Standard 102 D : Void function has static member variable side effects.
 **************************************************************************/</span>
&nbsp;
class my_class
<span class="br0">&#123;</span>
 public<span class="sy0">:</span>
   my_class <span class="br0">&#40;</span><span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
   <span class="br0">&#125;</span>
&nbsp;
   <span class="kw4">void</span> proc1<span class="br0">&#40;</span><span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      sint <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
   <span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
   <span class="kw4">static</span> INT_32 sint<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
INT_32 my_class<span class="sy0">::</span><span class="me2">sint</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> SDA_102<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   my_class m<span class="sy0">;</span>
   m.<span class="me1">proc1</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant - calls proc1 which alters a static member */</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span>
<span class="sy0">/</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_1.13'>1.13</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d103' name='standard_d103'><div class='standard'><div>103&nbsp;D</div></div></a><div class='headline'>File opened both read and write.</div></div><p>The C standard does not specify the behaviour if a file is both written and read via different FILE pointers.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdio.h&gt; </span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
&nbsp;
<span class="coMULTI">/**********************************************************
 * Standard 103 D : File opened both read and write.
 **********************************************************/</span>
&nbsp;
<span class="kw4">void</span> SDA_103<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   CHAR ch<span class="sy0">;</span>
   FILE <span class="sy0">*</span>fp1<span class="sy0">,*</span>fp2<span class="sy0">;</span>
   fp1 <span class="sy0">=</span> fopen<span class="br0">&#40;</span><span class="st0">&quot;file1.txt&quot;</span><span class="sy0">,</span> <span class="st0">&quot;r&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
   ch <span class="sy0">=</span> getc<span class="br0">&#40;</span>fp1<span class="br0">&#41;</span><span class="sy0">;</span>
   <span class="kw1">if</span> <span class="br0">&#40;</span>ch <span class="sy0">!=</span> <span class="br0">&#40;</span>INT_32<span class="br0">&#41;</span>EOF<span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      <span class="coMULTI">/* file1.txt opened both read and write on different streams */</span>
      fp2 <span class="sy0">=</span> fopen<span class="br0">&#40;</span><span class="st0">&quot;file1.txt&quot;</span><span class="sy0">,</span><span class="st0">&quot;w&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
   <span class="br0">&#125;</span>
   fclose <span class="br0">&#40;</span>fp1<span class="br0">&#41;</span><span class="sy0">;</span>
   fclose <span class="br0">&#40;</span>fp2<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.22.3'>R.22.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c++.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d104' name='standard_d104'><div class='standard'><div>104&nbsp;D</div></div></a><div class='headline'>Structure implementation not hidden.</div></div><p>The implementation of the structure is not referenced in this translation unit. The implementation details should be protected from unintentional changes by creating on opaque pointer.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">struct</span> not_opaque
<span class="br0">&#123;</span>
   INT_32 a<span class="sy0">;</span>
   CHAR c<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">struct</span> not_opaque <span class="sy0">*</span>ptr_not_opaque<span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/* struct opaque declared in another translation unit */</span>
<span class="kw4">typedef</span> <span class="kw4">struct</span> opaque <span class="sy0">*</span>ptr_opaque<span class="sy0">;</span> 
&nbsp;
<span class="coMULTI">/**********************************************************
 * Standard 104 D : Structure implementation not hidden.
 **********************************************************/</span>
&nbsp;
<span class="kw4">void</span> SDA_104<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw4">struct</span> opaque opq<span class="sy0">;</span>
   <span class="kw4">struct</span> not_opaque nopq<span class="sy0">;</span>
&nbsp;
   ptr_opaque p_ok1 <span class="sy0">=</span> <span class="sy0">&amp;</span>opq<span class="sy0">;</span>
   ptr_opaque p_ok2<span class="sy0">;</span> 
   ptr_not_opaque p_nok1<span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span>
&nbsp;
   p_ok2 <span class="sy0">=</span> p_ok1<span class="sy0">;</span>
   p_nok1 <span class="sy0">=</span> <span class="sy0">&amp;</span>nopq<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2013 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_d.4.8'>D.4.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d105' name='standard_d105'><div class='standard'><div>105&nbsp;D</div></div></a><div class='headline'>DU anomaly dead code, variable value is unused on all paths.</div></div><p>DU anomalies are unnecessary and can always be removed with a consequent improvement in the readability and efficiency of the code.</p>
<p>A DU anomaly will occur if a variable is assigned a value that is not used in any branches of a program. This is a restricted version of <a href='standards.htm#standard_d70'>70 D</a>, which checks whether a variable is assigned a value in all branches of a program.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdio.h&gt;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************************
 * Standard 105 D : DU anomaly dead code, variable value is unused on all paths.
 ******************************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> sda_105 <span class="br0">&#40;</span> <span class="kw4">const</span> UINT_32 p1 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 var_1 <span class="sy0">=</span> 0U<span class="sy0">;</span>
  UINT_32 var_2 <span class="sy0">=</span> p1<span class="sy0">;</span>  <span class="coMULTI">/* Compliant - var_2 is used in one branch */</span>
&nbsp;
  var_1<span class="sy0">++;</span>  <span class="coMULTI">/* not compliant - var_1 is not used after incrementation */</span>
&nbsp;
  <span class="kw1">if</span> <span class="br0">&#40;</span> p1 <span class="sy0">&gt;</span> 42U <span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
     <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot;%u<span class="es1">\n</span>&quot;</span><span class="sy0">,</span> var_2<span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2013 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc06-c'>MSC06-C</a>, <a href='cert-c_model.htm#rule_cert-c_msc12-c'>MSC12-C</a>, <a href='cert-c_model.htm#rule_cert-c_msc13-c'>MSC13-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_14'>14</a>, <a href='cwe_model.htm#rule_cwe_563'>563</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.2.2'>R.2.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d106' name='standard_d106'><div class='standard'><div>106&nbsp;D</div></div></a><div class='headline'>No prototype for non-static function.</div></div><p>In general providing prototypes is considered to be good practice and is essential if the uses precede the definition. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/************************************************************
 * Standard 106 D : No prototype for non-static function.
 ************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> SDA_106<span class="br0">&#40;</span> INT_32 <span class="sy0">*</span> par_1 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="sy0">*</span>par_1 <span class="sy0">=</span>  <span class="nu0">1</span><span class="sy0">;</span>
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2013 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.4'>R.8.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d107' name='standard_d107'><div class='standard'><div>107&nbsp;D</div></div></a><div class='headline'>Attempt to change system call capture string.</div></div><p>Modifying the data structures or strings returned from getenv,  localconv, setlocale, and strerror can lead to undefined behaviour.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &lt;stdlib.h&gt;</span>
<span class="co2">#include &lt;string.h&gt;</span>
&nbsp;
<span class="coMULTI">/********************************************************************
 * Standard 107 D : Attempt to change system call capture string.
 ********************************************************************/</span>
&nbsp;
<span class="kw4">void</span> SDA_107<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw4">char</span> <span class="sy0">*</span>error_str<span class="sy0">;</span>
   <span class="kw4">char</span> <span class="sy0">*</span>buf <span class="sy0">=</span> <span class="st0">&quot;extra_text&quot;</span><span class="sy0">;</span>
&nbsp;
   error_str <span class="sy0">=</span> getenv <span class="br0">&#40;</span><span class="st0">&quot;MY_VAR&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
   strcat<span class="br0">&#40;</span>error_str<span class="sy0">,</span> buf<span class="br0">&#41;</span><span class="sy0">;</span>        <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2013 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_env30-c'>ENV30-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_744'>744</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d108' name='standard_d108'><div class='standard'><div>108&nbsp;D</div></div></a><div class='headline'>Tainted argument to unprototyped func ptr.</div></div><p>Functions may only be designed to work for a subset of the possible values described by their parameter types. An argument to such a function is referred to as tainted if the value is derived from an external input to the program. Values from library calls such as getenv, fscanf, getchar are treated as being tainted.</p>
<p>If a function has no prototype, the likelihood of the problem increases as the compiler places no limits on the types of the arguments. When a prototype is present, it is possible that such a problem would be detected.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
&nbsp;
<span class="kw2">extern</span> <span class="kw4">void</span> <span class="br0">&#40;</span><span class="sy0">*</span>pfn<span class="br0">&#41;</span><span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* Unprototyped function pointer */</span>
&nbsp;
<span class="coMULTI">/****************************************************************
 * Standard 108 D : Tainted argument to unprototyped func ptr.
 ****************************************************************/</span>
&nbsp;
<span class="co2">#define GET_TAINTED_INT(val)                         \
        do {const char *taint = getenv(&quot;TAINT_I&quot;);   \
            if (taint == NULL) {taint = &quot;42&quot;;}       \
            val = strtol(taint, 0, 10);              \
           } while (0);</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> SDA_108<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   INT_32 tainted<span class="sy0">;</span>
   GET_TAINTED_INT<span class="br0">&#40;</span>tainted<span class="br0">&#41;</span>
   <span class="br0">&#40;</span><span class="sy0">*</span>pfn<span class="br0">&#41;</span><span class="br0">&#40;</span>tainted<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2013 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d109' name='standard_d109'><div class='standard'><div>109&nbsp;D</div></div></a><div class='headline'>Tainted argument to formatted i/o function.</div></div><p>The C library formatted input and output functions do not check whether the input data is within the range of the array to which it will be written. This can lead to corruption of memory.</p>
<p>An argument to such a function is referred to as tainted if the value is derived from an external input to the program. Values from library calls such as getenv, fscanf, getchar are treated as being tainted.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdio.h&gt;</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
&nbsp;
<span class="coMULTI">/***************************************************************
 * Standard 109 D : Tainted argument to formatted i/o function.
 ***************************************************************/</span>
&nbsp;
<span class="co2">#define GET_TAINTED_INT(val)                         \
        do {const char *taint = getenv(&quot;TAINT_I&quot;);   \
            if (taint == NULL) {taint = &quot;42&quot;;}       \
            val = strtol(taint, 0, 10);              \
           } while (0);</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> SDA_109<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   INT_32 tainted<span class="sy0">;</span>
   <span class="kw4">char</span> buff<span class="br0">&#91;</span><span class="nu0">4</span><span class="br0">&#93;</span><span class="sy0">;</span>
   GET_TAINTED_INT<span class="br0">&#40;</span>tainted<span class="br0">&#41;</span>
   <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> sprintf<span class="br0">&#40;</span>buff<span class="sy0">,</span> <span class="st0">&quot;%d&quot;</span><span class="sy0">,</span> tainted<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2013 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_str31-c'>STR31-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_119'>119</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d110' name='standard_d110'><div class='standard'><div>110&nbsp;D</div></div></a><div class='headline'>More than one prototype for same function.</div></div><p>A function shall have only one non-defining declaration in a file. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 110 D : More than one prototype for same function.
 *******************************************************************/</span>
&nbsp;
INT_32 fn<span class="br0">&#40;</span>INT_32 a<span class="br0">&#41;</span><span class="sy0">;</span>
INT_32 fn<span class="br0">&#40;</span>INT_32 a<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* Not compliant */</span>
&nbsp;
INT_32 fn<span class="br0">&#40;</span>INT_32 a<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw1">return</span> a<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> sda_110<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  INT_32 rc<span class="sy0">;</span>
  rc <span class="sy0">=</span> fn<span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2013 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_8.8'>8.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_8.8'>8.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.5'>R.8.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_6.2.d'>6.2.d</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m4.4.3'>M4.4.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c++.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d111' name='standard_d111'><div class='standard'><div>111&nbsp;D</div></div></a><div class='headline'>Errno checked without having been set.</div></div><p>The improper use of errno may result in failing to detect an error condition or in incorrectly
identifying an error condition when none exists. When errno is tested after a call to a library function, this standard checks that errno has been assigned a value before the call. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
<span class="co2">#include &lt;limits.h&gt;</span>
<span class="co2">#include &lt;errno.h&gt;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 111 D : Errno checked without having been set.
 *******************************************************************/</span>
&nbsp;
<span class="kw4">void</span> sda_111<span class="br0">&#40;</span><span class="kw4">const</span> <span class="kw4">char</span> <span class="sy0">*</span>c_str<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw4">char</span> <span class="sy0">*</span>endpt1 <span class="sy0">=</span> NULL<span class="sy0">;</span>
&nbsp;
   <span class="coMULTI">/* errno not set to 0 before call */</span>
   UINT_64 num1 <span class="sy0">=</span> strtoul<span class="br0">&#40;</span>c_str<span class="sy0">,</span> <span class="sy0">&amp;</span>endpt1 <span class="sy0">,</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
   <span class="kw1">if</span> <span class="br0">&#40;</span> endpt1 <span class="sy0">==</span> c_str  
       <span class="sy0">||</span> <span class="br0">&#40;</span>num1 <span class="sy0">==</span> ULONG_MAX <span class="sy0">&amp;&amp;</span> errno <span class="sy0">==</span> ERANGE<span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant */</span>
       <span class="br0">&#41;</span>
   <span class="br0">&#123;</span> <span class="sy0">;</span> <span class="br0">&#125;</span>
   <span class="kw1">else</span>
   <span class="br0">&#123;</span> <span class="sy0">;</span> <span class="br0">&#125;</span>
<span class="br0">&#125;</span>   
&nbsp;
<span class="kw4">int</span> main<span class="br0">&#40;</span> <span class="kw4">int</span> argc<span class="sy0">,</span> <span class="kw4">char</span> <span class="sy0">*</span>argv<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  sda_111<span class="br0">&#40;</span><span class="st0">&quot;Hello&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2014 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_err30-c'>ERR30-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c++.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d112' name='standard_d112'><div class='standard'><div>112&nbsp;D</div></div></a><div class='headline'>Free called twice on same variable.</div></div><p>It can be dangerous to free memory more than once as this can permit an attacker to execute arbitrary code.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
<span class="co2">#include &lt;stdio.h&gt;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 112 D : Free called twice on same variable.
 ********************************************************/</span>
&nbsp;
<span class="kw4">void</span> sda_112<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  INT_32 <span class="sy0">*</span>x <span class="sy0">=</span> <span class="br0">&#40;</span>INT_32<span class="sy0">*</span><span class="br0">&#41;</span>malloc<span class="br0">&#40;</span><span class="nu0">10</span> <span class="sy0">*</span> <span class="kw4">sizeof</span><span class="br0">&#40;</span>INT_32<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
  <span class="kw1">if</span> <span class="br0">&#40;</span>x <span class="sy0">==</span> NULL<span class="br0">&#41;</span> 
  <span class="br0">&#123;</span>
    fprintf<span class="br0">&#40;</span>stderr<span class="sy0">,</span> <span class="st0">&quot;malloc failure in %s<span class="es1">\n</span>&quot;</span><span class="sy0">,</span> __func__<span class="br0">&#41;</span><span class="sy0">;</span>
    free<span class="br0">&#40;</span>x<span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="br0">&#125;</span> 
  <span class="kw1">else</span> 
  <span class="br0">&#123;</span>
    <span class="sy0">*</span>x<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
&nbsp;
  free<span class="br0">&#40;</span>x<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">int</span> main<span class="br0">&#40;</span> <span class="kw4">int</span> argc<span class="sy0">,</span> <span class="kw4">char</span> <span class="sy0">*</span>argv<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  sda_112<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2014 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_mem31-c'>MEM31-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_415'>415</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_d113' name='standard_d113'><div class='standard'><div>113&nbsp;D</div></div></a><div class='headline'>File closed more than once.</div></div><p>The value of a FILE pointer is indeterminate after a close operation has occurred. Therefore unexpected behaviour may occur if a second close operation occurs.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &lt;stdio.h&gt;</span>
&nbsp;
<span class="coMULTI">/***************************************************
 * Standard 113 D : File closed more than once.
 ***************************************************/</span>
&nbsp;
<span class="kw4">void</span> SDA_113<span class="br0">&#40;</span><span class="kw4">int</span> p1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   FILE <span class="sy0">*</span>fp1<span class="sy0">;</span>
   fp1 <span class="sy0">=</span> fopen<span class="br0">&#40;</span><span class="st0">&quot;data1.txt&quot;</span><span class="sy0">,</span><span class="st0">&quot;r&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
   <span class="kw1">if</span> <span class="br0">&#40;</span>p1 <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      fclose<span class="br0">&#40;</span>fp1<span class="br0">&#41;</span><span class="sy0">;</span>
   <span class="br0">&#125;</span>
   fclose<span class="br0">&#40;</span>fp1<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2014 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_399'>399</a>, <a href='cwe_model.htm#rule_cwe_910'>910</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.22.6'>R.22.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x1' name='standard_x1'><div class='standard'><div>1&nbsp;X</div></div></a><div class='headline'>Declaration types do not match across a system.</div></div><p>The cross referencer checks that the types of variables used across the system are identical.
This standard is only enabled when the code is run as a system set with at least 2 files.</p>
<div class='title'>Example</div>
<p>Xref_001_1.c</p>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**************************************************************
 * Standard 1 X : Declaration types don't match across a system.
 **************************************************************/</span> 
&nbsp;
UINT_32  xref_1<span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> xref_001 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><p>Xref_001_2.c</p>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/**************************************************************
 * Standard 1 X : Declaration types don't match across a system.
 **************************************************************/</span> 
&nbsp;
SINT_32  xref_1<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_arr31-c'>ARR31-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_129'>129</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_26'>26</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_26'>26</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_8.4'>8.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_3-2-1'>3-2-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_26'>26</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_8.4'>8.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.4'>R.8.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='customer_sample_model.htm'>Customer Sample</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='standard_model.htm'>Standard</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x2' name='standard_x2'><div class='standard'><div>2&nbsp;X</div></div></a><div class='headline'>Ambiguous declaration of variable.</div></div><div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 2 X : Ambiguous declaration of variable.
 ********************************************************/</span> 
&nbsp;
UINT_32  xref_1<span class="sy0">;</span>
SINT_32  xref_1<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> xref_002<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="coMULTI">/* ... */</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.16.12'>5.16.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl36-c'>DCL36-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_25'>25</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_25'>25</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_3-9-1'>3-9-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_25'>25</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x3' name='standard_x3'><div class='standard'><div>3&nbsp;X</div></div></a><div class='headline'>Variable has only one use.</div></div><p>A variable has been defined but not subsequently referenced. Unused variables are indicative of programming errors and should be checked and, if not required, removed from the code.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">const</span> SINT_32 g_var <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*********************************************
 * Standard 3 X : Variable has only one use.
 *********************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> XREF_003<span class="br0">&#40;</span> SINT_32 p_var <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   SINT_32 result1 <span class="sy0">=</span> g_var <span class="sy0">*</span> p_var<span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
   <span class="coMULTI">/* Some code which makes no further reference to 'result1'... */</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_0-1-4'>0-1-4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x4' name='standard_x4'><div class='standard'><div>4&nbsp;X</div></div></a><div class='headline'>Identifier reuse: struct/union tag repeated.</div></div><p>Tag names shall not be reused anywhere within a program, other than through the inclusion of a header file, containing the type definition, in multiple source files. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 4 X : Identifier reuse: struct/union tag repeated
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">struct</span> stag_name  <span class="coMULTI">/* Not compliant */</span> 
  <span class="br0">&#123;</span>
    UINT_32 us1<span class="sy0">;</span>
    UINT_32 us2<span class="sy0">;</span>
  <span class="br0">&#125;</span> sobj1<span class="sy0">;</span>
  <span class="kw4">struct</span> stag_name sobj2 <span class="sy0">=</span> <span class="br0">&#123;</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="br0">&#125;</span><span class="sy0">;</span> <span class="coMULTI">/* Compliant */</span> 
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">struct</span> stag_name  <span class="coMULTI">/* Not compliant */</span> 
  <span class="br0">&#123;</span>
    SINT_32 ss1<span class="sy0">;</span>
    CHAR ch1<span class="sy0">;</span>
  <span class="br0">&#125;</span> sobj3<span class="sy0">;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.4'>5.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-4'>2-10-4</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_3-2-2'>3-2-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.4'>5.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.7'>R.5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x5' name='standard_x5'><div class='standard'><div>5&nbsp;X</div></div></a><div class='headline'>Identifier reuse: struct vs union.</div></div><p>Tag names shall not be reused anywhere within a program, other than through the inclusion of a header file, containing the type definition, in multiple source files. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 5 X : Identifier reuse: struct vs union
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">union</span> utag_name  <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
    SINT_32 us1<span class="sy0">;</span>
    CHAR us2<span class="sy0">;</span>
<span class="br0">&#125;</span> uobj1<span class="sy0">;</span>
&nbsp;
<span class="kw4">union</span> utag_name uobj2 <span class="sy0">=</span> <span class="br0">&#123;</span><span class="st0">'a'</span><span class="br0">&#125;</span><span class="sy0">;</span> <span class="coMULTI">/* Compliant */</span> 
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">struct</span> utag_name  <span class="coMULTI">/* Not compliant */</span> 
  <span class="br0">&#123;</span>
	UINT_32 ss1<span class="sy0">;</span>
    UINT_32 ss2<span class="sy0">;</span>
  <span class="br0">&#125;</span> sobj1<span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.4'>5.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-4'>2-10-4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.4'>5.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.7'>R.5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x6' name='standard_x6'><div class='standard'><div>6&nbsp;X</div></div></a><div class='headline'>Identifier reuse: struct/union tag vs enum tag.</div></div><p>Tag names shall not be reused anywhere within a program, other than through the inclusion of a header file, containing the type definition, in multiple source files. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 6 X : Identifier reuse: struct/union tag vs enum tag
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">union</span> utag_name  <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
  SINT_32 us1<span class="sy0">;</span>
  CHAR us2<span class="sy0">;</span>
<span class="br0">&#125;</span> uobj1<span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw2">enum</span> utag_name  <span class="coMULTI">/* Not compliant */</span> 
  <span class="br0">&#123;</span>
    first<span class="sy0">,</span>
    second
  <span class="br0">&#125;</span> sobj1<span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.4'>5.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-4'>2-10-4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.4'>5.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.7'>R.5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x7' name='standard_x7'><div class='standard'><div>7&nbsp;X</div></div></a><div class='headline'>Identifier reuse: tag vs procedure.</div></div><p>Tag names shall not be reused anywhere within a program, other than through the inclusion of a header file, containing the type definition, in multiple source files. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 7 X : Identifier reuse: tag vs procedure
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> stag_name<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
<span class="kw4">union</span> stag_name  <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
  SINT_32 us1<span class="sy0">;</span>
  CHAR us2<span class="sy0">;</span>
<span class="br0">&#125;</span> uobj1<span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> stag_name<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.4'>5.4</a>, <a href='misra-ac_model.htm#rule_misra-ac_5.5'>5.5</a>, <a href='misra-ac_model.htm#rule_misra-ac_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-4'>2-10-4</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-5'>2-10-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.4'>5.4</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.5'>5.5</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.7'>R.5.7</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.8'>R.5.8</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.9'>R.5.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x8' name='standard_x8'><div class='standard'><div>8&nbsp;X</div></div></a><div class='headline'>Identifier reuse: tag vs procedure parameter.</div></div><p>Tag names shall not be reused anywhere within a program, other than through the inclusion of a header file, containing the type definition, in multiple source files. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 8 X : Identifier reuse: tag vs procedure parameter
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span>UINT_32 utag_name<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
<span class="kw4">union</span> utag_name  <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
  SINT_32 us1<span class="sy0">;</span>
  CHAR us2<span class="sy0">;</span>
<span class="br0">&#125;</span> uobj1<span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span>UINT_32 utag_name<span class="br0">&#41;</span> <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.4'>5.4</a>, <a href='misra-ac_model.htm#rule_misra-ac_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-4'>2-10-4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.4'>5.4</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.7'>R.5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x9' name='standard_x9'><div class='standard'><div>9&nbsp;X</div></div></a><div class='headline'>Identifier reuse: tag vs variable.</div></div><p>Tag names shall not be reused anywhere within a program, other than through the inclusion of a header file, containing the type definition, in multiple source files. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 9 X : Identifier reuse: tag vs variable
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">union</span> utag_name  <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
  SINT_32 us1<span class="sy0">;</span>
  CHAR us2<span class="sy0">;</span>
<span class="br0">&#125;</span> uobj1<span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 utag_name<span class="sy0">;</span>  <span class="coMULTI">/* Not compliant */</span> 
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.4'>5.4</a>, <a href='misra-ac_model.htm#rule_misra-ac_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-4'>2-10-4</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-6'>2-10-6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.4'>5.4</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.7'>R.5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x10' name='standard_x10'><div class='standard'><div>10&nbsp;X</div></div></a><div class='headline'>Identifier reuse: tag vs label (MR).</div></div><p>Tag names shall not be reused anywhere within a program, other than through the inclusion of a header file, containing the type definition, in multiple source files. This standard is restricted to LDRA Testbed installations featuring the MISRA component, as indicated by (MR). </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 10 X : Identifier reuse: tag vs label
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">union</span> utag_name  <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
  SINT_32 us1<span class="sy0">;</span>
  CHAR us2<span class="sy0">;</span>
<span class="br0">&#125;</span> uobj1<span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> xref_10<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
&nbsp;
utag_name<span class="sy0">:</span>       <span class="coMULTI">/* Not compliant */</span> 
  uobj1.<span class="me1">us1</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.4'>5.4</a>, <a href='misra-ac_model.htm#rule_misra-ac_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-4'>2-10-4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.4'>5.4</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.7'>R.5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x11' name='standard_x11'><div class='standard'><div>11&nbsp;X</div></div></a><div class='headline'>Identifier reuse: tag vs typedef.</div></div><p>An identifier should not be used for both the name of a tag and the name of a typedef. This may lead to confusion when maintaining the code.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 11 X : Identifier reuse: tag vs typedef.
 *******************************************************************/</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">double</span> utag_name<span class="sy0">;</span>
&nbsp;
<span class="kw4">union</span> utag_name           <span class="coMULTI">/* Not compliant */</span>
<span class="br0">&#123;</span>
  SINT_32 us1<span class="sy0">;</span>
  CHAR us2<span class="sy0">;</span>
<span class="br0">&#125;</span> uobj1<span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> xref_011 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.3'>5.3</a>, <a href='misra-ac_model.htm#rule_misra-ac_5.4'>5.4</a>, <a href='misra-ac_model.htm#rule_misra-ac_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-4'>2-10-4</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-6'>2-10-6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.3'>5.3</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.4'>5.4</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.6'>R.5.6</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.7'>R.5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x12' name='standard_x12'><div class='standard'><div>12&nbsp;X</div></div></a><div class='headline'>Identifier reuse: tag vs macro.</div></div><p>Tag names shall not be reused anywhere within a program, other than through the inclusion of a header file, containing the type definition, in multiple source files.</p>
<div class='title'>Example</div>
<p>Xref_012_1.c</p>
<pre class="code c"><span class="co2">#define s_tag2 sn1</span>
<span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 12 X : Identifier reuse: tag vs macro
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">struct</span> s_tag   
<span class="br0">&#123;</span>
  UINT_32 comp1<span class="sy0">;</span>
  UINT_32 comp2<span class="sy0">;</span>
<span class="br0">&#125;</span> s_type<span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><p>Xref_012_2.c</p>
<pre class="code c"><span class="co2">#define s_tag sn2  /* not compliant */ </span>
<span class="co2">#define u_tag sn3</span>
&nbsp;
<span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 12 X : Identifier reuse: tag vs macro
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">struct</span> s_tag2  <span class="coMULTI">/* not compliant -  Redefinition of macro in file 1 */</span> 
<span class="br0">&#123;</span>
  UINT_32 comp3<span class="sy0">;</span>
  UINT_32 comp4<span class="sy0">;</span>
<span class="br0">&#125;</span> s_type2<span class="sy0">;</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">union</span> u_tag  <span class="coMULTI">/* ok, in-file macro substitution renders this 'sn3' prior to check */</span> 
<span class="br0">&#123;</span>
  SINT_32 us1<span class="sy0">;</span>
  CHAR us2<span class="sy0">;</span>
<span class="br0">&#125;</span> u_type<span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> xref_012 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.4'>5.4</a>, <a href='misra-ac_model.htm#rule_misra-ac_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-4'>2-10-4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.4'>5.4</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.5'>R.5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x13' name='standard_x13'><div class='standard'><div>13&nbsp;X</div></div></a><div class='headline'>Identifier reuse: tag vs component.</div></div><p>Tag names shall not be reused anywhere within a program, other than through the inclusion of a header file, containing the type definition, in multiple source files. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 13 X : Identifier reuse: tag vs component
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">struct</span> stag_name  <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
  UINT_32 comp1<span class="sy0">;</span>
  UINT_32 comp2<span class="sy0">;</span>
<span class="br0">&#125;</span> stag_type<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">struct</span> sloctag_name
  <span class="br0">&#123;</span>
    UINT_32 stag_name<span class="sy0">;</span>  <span class="coMULTI">/* Not compliant */</span> 
  <span class="br0">&#125;</span> sobj1<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.4'>5.4</a>, <a href='misra-ac_model.htm#rule_misra-ac_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-4'>2-10-4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.4'>5.4</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.7'>R.5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x14' name='standard_x14'><div class='standard'><div>14&nbsp;X</div></div></a><div class='headline'>Identifier reuse: tag vs enum constant.</div></div><p>Tag names shall not be reused anywhere within a program, other than through the inclusion of a header file, containing the type definition, in multiple source files. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 14 X : Identifier reuse: tag vs enum constant
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">struct</span> s_name1_tag  <span class="coMULTI">/* Not complaint */</span> 
<span class="br0">&#123;</span>
  UINT_32 comp1<span class="sy0">;</span>
  UINT_32 comp2<span class="sy0">;</span>
<span class="br0">&#125;</span> s_name1_type<span class="sy0">;</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw2">enum</span> e_name1_tag
<span class="br0">&#123;</span>
  first<span class="sy0">,</span>
  s_name1_tag   <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#125;</span> e_name1_type<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.4'>5.4</a>, <a href='misra-ac_model.htm#rule_misra-ac_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-4'>2-10-4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.4'>5.4</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.7'>R.5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x15' name='standard_x15'><div class='standard'><div>15&nbsp;X</div></div></a><div class='headline'>Identifier reuse: persistent var vs tag.</div></div><p>Tag names shall not be reused anywhere within a program, other than through the inclusion of a header file, containing the type definition, in multiple source files. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 15 X : Identifier reuse: persistent var vs tag
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">static</span> UINT_32 static_var2<span class="sy0">;</span>  <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">struct</span> static_var2   <span class="coMULTI">/* Not compliant */</span> 
  <span class="br0">&#123;</span>
    UINT_32 xx1<span class="sy0">;</span>
    UINT_32 yy1<span class="sy0">;</span>
  <span class="br0">&#125;</span> ss1<span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.4'>5.4</a>, <a href='misra-ac_model.htm#rule_misra-ac_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-4'>2-10-4</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-5'>2-10-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.4'>5.4</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.7'>R.5.7</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.8'>R.5.8</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.9'>R.5.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x16' name='standard_x16'><div class='standard'><div>16&nbsp;X</div></div></a><div class='headline'>Identifier reuse: typedef vs variable.</div></div><p>Typedef names shall not be reused anywhere within a program, other than through the inclusion of a header file, containing the typedef, in multiple source files. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 16 X : Identifier reuse: typedef vs variable
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">char</span> t_name<span class="sy0">;</span>  <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 t_name<span class="sy0">;</span>     <span class="coMULTI">/* Not compliant */</span> 
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.3'>5.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-3'>2-10-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.3'>5.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.6'>R.5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x17' name='standard_x17'><div class='standard'><div>17&nbsp;X</div></div></a><div class='headline'>Identifier reuse: typedef vs label (MR).</div></div><p>Typedef names shall not be reused anywhere within a program, other than through the inclusion of a header file, containing the typedef, in multiple source files. This standard is restricted to LDRA Testbed installations featuring the MISRA component, as indicated by (MR).</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 17 X : Identifier reuse: typedef vs label
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> xref_17_1<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">typedef</span> <span class="kw4">char</span> lab_name<span class="sy0">;</span>  <span class="coMULTI">/* Not compliant */</span> 
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
UINT_32 xref_17<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 retval <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
lab_name<span class="sy0">:</span>               <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
  <span class="coMULTI">/***/</span> 
  <span class="kw1">return</span> retval<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.3'>5.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-3'>2-10-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.3'>5.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.6'>R.5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x18' name='standard_x18'><div class='standard'><div>18&nbsp;X</div></div></a><div class='headline'>Identifier reuse: typedef vs typedef.</div></div><p>Typedef names shall not be reused anywhere within a program, other than through the inclusion of a header file that contains the typedef.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 18 X : Identifier reuse: typedef vs typedef.
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> xref_018_1<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">typedef</span> <span class="kw4">double</span> t_name<span class="sy0">;</span>   
&nbsp;
  t_name local_var<span class="sy0">;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> xref_018<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">typedef</span> <span class="kw4">char</span> t_name<span class="sy0">;</span>    <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
  t_name local_var<span class="sy0">;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.3'>5.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-3'>2-10-3</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_3-2-2'>3-2-2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.3'>5.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.6'>R.5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x19' name='standard_x19'><div class='standard'><div>19&nbsp;X</div></div></a><div class='headline'>Identifier reuse: typedef vs procedure parameter.</div></div><p>Typedef names shall not be reused anywhere within a program, other than through the inclusion of a header file, containing the typedef, in multiple source files. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 19 X : Identifier reuse: typedef vs procedure parameter
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">char</span> t_name<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span>UINT_32 t_name<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span>UINT_32 t_name<span class="br0">&#41;</span>   <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.3'>5.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-3'>2-10-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.3'>5.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.6'>R.5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x20' name='standard_x20'><div class='standard'><div>20&nbsp;X</div></div></a><div class='headline'>Identifier reuse: persistent var vs typedef.</div></div><p>Typedef names shall not be reused anywhere within a program, other than through the inclusion of a header file, containing the typedef, in multiple source files. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 20 X : Identifier reuse: persistent var vs typedef
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">double</span> static_var1<span class="sy0">;</span>    <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">static</span> UINT_32 static_var1<span class="sy0">;</span>  <span class="coMULTI">/* Not compliant */</span> 
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.3'>5.3</a>, <a href='misra-ac_model.htm#rule_misra-ac_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-3'>2-10-3</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-5'>2-10-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.3'>5.3</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.6'>R.5.6</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.8'>R.5.8</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.9'>R.5.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x21' name='standard_x21'><div class='standard'><div>21&nbsp;X</div></div></a><div class='headline'>Identifier reuse: typedef vs macro.</div></div><p>Typedef names shall not be reused anywhere within a program, other than through the inclusion of a header file, containing the typedef, in multiple source files. </p>
<div class='title'>Example</div>
<pre class="code c"> <span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 21 X : Identifier reuse: typedef vs macro
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">int</span> s_tag<span class="sy0">;</span>   
&nbsp;
<span class="co2">#define s_tag sn1   /* Not compliant */ </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> xref_021 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.3'>5.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-3'>2-10-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.3'>5.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.5'>R.5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x22' name='standard_x22'><div class='standard'><div>22&nbsp;X</div></div></a><div class='headline'>Identifier reuse: typedef vs component.</div></div><p>Typedef names shall not be reused anywhere within a program, other than through the inclusion of a header file, containing the typedef, in multiple source files. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 22 X : Identifier reuse: typedef vs component
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">struct</span> my_struct_tag
<span class="br0">&#123;</span>
  UINT_32 comp1<span class="sy0">;</span>
  UINT_32 t_name<span class="sy0">;</span>      <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#125;</span> my_struct_type<span class="sy0">;</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">char</span> t_name<span class="sy0">;</span>   <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.3'>5.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-3'>2-10-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.3'>5.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.6'>R.5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x23' name='standard_x23'><div class='standard'><div>23&nbsp;X</div></div></a><div class='headline'>Identifier reuse: typedef vs enum constant.</div></div><p>Typedef names shall not be reused anywhere within a program, other than through the inclusion of a header file, containing the typedef, in multiple source files. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 23 X : Identifier reuse: typedef vs enum constant
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">typedef</span> <span class="kw4">struct</span> s_tag
  <span class="br0">&#123;</span>
    UINT_32 comp1<span class="sy0">;</span>
    UINT_32 comp2<span class="sy0">;</span>
  <span class="br0">&#125;</span> s_type<span class="sy0">;</span>    <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">typedef</span> <span class="kw2">enum</span> e_tag
  <span class="br0">&#123;</span>
    first<span class="sy0">,</span>
    s_type     <span class="coMULTI">/* Not compliant */</span> 
  <span class="br0">&#125;</span> e_type<span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.3'>5.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-3'>2-10-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.3'>5.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.6'>R.5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x24' name='standard_x24'><div class='standard'><div>24&nbsp;X</div></div></a><div class='headline'>Identifier reuse: typedef vs procedure.</div></div><p>Typedef names shall not be reused anywhere within a program, other than through the inclusion of a header file, containing the typedef, in multiple source files. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 24 X : Identifier reuse: typedef vs procedure
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> proc1<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>      <span class="coMULTI">/* Not compliant */</span> 
<span class="kw4">void</span> proc2<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> proc1<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>       <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> proc2<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">typedef</span> <span class="kw4">char</span> proc1<span class="sy0">;</span>  <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.3'>5.3</a>, <a href='misra-ac_model.htm#rule_misra-ac_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-3'>2-10-3</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-5'>2-10-5</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-6'>2-10-6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.3'>5.3</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.6'>R.5.6</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.8'>R.5.8</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.9'>R.5.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x25' name='standard_x25'><div class='standard'><div>25&nbsp;X</div></div></a><div class='headline'>Identifier reuse: procedure vs procedure param.</div></div><p>The name of an identifier that is persistent, i.e. with static storage duration, should not be reused across any source files in the system. Objects or procedures with external linkage, and objects or procedures with the static storage class specifier, are persistent. Confusion may arise if two identifiers share the same name. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 25 X : Identifier reuse: procedure vs procedure param
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> proc1<span class="br0">&#40;</span>UINT_32 param<span class="sy0">,</span>            <span class="coMULTI">/* Not compliant */</span> 
                  UINT_32 another_param<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw4">static</span> <span class="kw4">void</span> proc2<span class="br0">&#40;</span>UINT_32 proc1<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> proc1<span class="br0">&#40;</span>UINT_32 param<span class="sy0">,</span>            <span class="coMULTI">/* Not compliant */</span> 
                  UINT_32 another_param<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> proc2<span class="br0">&#40;</span>UINT_32 proc1<span class="br0">&#41;</span>            <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-5'>2-10-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.8'>R.5.8</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.9'>R.5.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x26' name='standard_x26'><div class='standard'><div>26&nbsp;X</div></div></a><div class='headline'>Identifier reuse: persistent var vs label (MR).</div></div><p>The name of an identifier that is persistent, i.e. with static storage duration, should not be reused across any source files in the system. Objects or procedures with external linkage, and objects or procedures with the static storage class specifier, are persistent. Confusion may arise if two identifiers share the same name.</p>
<p>This standard is restricted to LDRA Testbed installations featuring the MISRA component, as indicated by (MR).  </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 26 X : Identifier reuse: persistent var vs label
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> xref_26_1<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">static</span> UINT_32 s_var<span class="sy0">;</span>   <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
UINT_32 xref_26<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
s_var<span class="sy0">:</span>                    <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
  <span class="coMULTI">/***/</span> 
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-5'>2-10-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.8'>R.5.8</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.9'>R.5.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x27' name='standard_x27'><div class='standard'><div>27&nbsp;X</div></div></a><div class='headline'>Identifier reuse: persist var vs persist var.</div></div><p>The name of an identifier that is persistent, i.e. with static storage duration, should not be reused across any source files in the system. Objects or procedures with external linkage, and objects or procedures with the static storage class specifier, are persistent. Confusion may arise if two identifiers share the same name. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 27 X : Identifier reuse: persist var vs persist var
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
UINT_32 p_var<span class="sy0">;</span>           <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">static</span> UINT_32 p_var<span class="sy0">;</span>  <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-5'>2-10-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.8'>R.5.8</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.9'>R.5.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a>, <a href='sec-c_model.htm#rule_sec-c_m4.4.3'>M4.4.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x28' name='standard_x28'><div class='standard'><div>28&nbsp;X</div></div></a><div class='headline'>Identifier reuse: persistent var vs var.</div></div><p>The name of an identifier that is persistent, i.e. with static storage duration, should not be reused across any source files in the system. Objects or procedures with external linkage, and objects or procedures with the static storage class specifier, are persistent. Confusion may arise if two identifiers share the same name. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 28 X : Identifier reuse: persistent var vs var
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
UINT_32 var1<span class="sy0">;</span>    <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 var1<span class="sy0">;</span>  <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
  <span class="coMULTI">/***/</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-5'>2-10-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.8'>R.5.8</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.9'>R.5.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x29' name='standard_x29'><div class='standard'><div>29&nbsp;X</div></div></a><div class='headline'>Identifier reuse: persistent var vs procedure.</div></div><p>The name of an identifier that is persistent, i.e. with static storage duration, should not be reused across any source files in the system. Objects or procedures with external linkage, and objects or procedures with the static storage class specifier, are persistent. Confusion may arise if two identifiers share the same name. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 29 X : Identifier reuse: persistent var vs procedure
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>        <span class="coMULTI">/* Not compliant */</span> 
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>         <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">static</span> UINT_32 foo<span class="sy0">;</span>  <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-5'>2-10-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.8'>R.5.8</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.9'>R.5.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x30' name='standard_x30'><div class='standard'><div>30&nbsp;X</div></div></a><div class='headline'>Identifier reuse: persistent var vs proc param.</div></div><p>The name of an identifier that is persistent, i.e. with static storage duration, should not be reused across any source files in the system. Objects or procedures with external linkage, and objects or procedures with the static storage class specifier, are persistent. Confusion may arise if two identifiers share the same name. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 30 X : Identifier reuse: persistent var vs proc param
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span>UINT_32 pp<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* Not compliant */</span> 
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span>UINT_32 pp<span class="br0">&#41;</span>   <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">static</span> UINT_32 pp<span class="sy0">;</span>   <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-5'>2-10-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.8'>R.5.8</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.9'>R.5.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x31' name='standard_x31'><div class='standard'><div>31&nbsp;X</div></div></a><div class='headline'>Identifier reuse: procedure vs procedure.</div></div><p>The name of an identifier that is persistent, i.e. with static storage duration, should not be reused across any source files in the system. Objects or procedures with external linkage, and objects or procedures with the static storage class specifier, are persistent. Confusion may arise if two identifiers share the same name.</p>
<div class='title'>Example</div>
<p>Xref_031_1.c</p>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 31 X : Identifier reuse: procedure vs procedure
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> xref_031 <span class="br0">&#40;</span>UINT_32 pp<span class="br0">&#41;</span>  
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><p>Xref_031_2.c</p>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 31 X : Identifier reuse: procedure vs procedure
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> xref_031 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>   <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.8'>R.5.8</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.9'>R.5.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c++.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x32' name='standard_x32'><div class='standard'><div>32&nbsp;X</div></div></a><div class='headline'>Identifier reuse: procedure vs var.</div></div><p>The name of an identifier that is persistent, i.e. with static storage duration, should not be reused across any source files in the system. Objects or procedures with external linkage, and objects or procedures with the static storage class specifier, are persistent. Confusion may arise if two identifiers share the same name. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 32 X : Identifier reuse: procedure vs var
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* Not compliant */</span> 
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>   <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 foo<span class="sy0">;</span>   <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-5'>2-10-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.8'>R.5.8</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.9'>R.5.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x33' name='standard_x33'><div class='standard'><div>33&nbsp;X</div></div></a><div class='headline'>Identifier reuse: procedure vs label (MR).</div></div><p>The name of an identifier that is persistent, i.e. with static storage duration, should not be reused across any source files in the system. Objects or procedures with external linkage, and objects or procedures with the static storage class specifier, are persistent. Confusion may arise if two identifiers share the same name. </p>
<p>This standard is restricted to LDRA Testbed installations featuring the MISRA component, as indicated by (MR). </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 33 X : Identifier reuse: procedure vs label
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>   <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
UINT_32 xref_33<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
foo<span class="sy0">:</span>   <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
  <span class="coMULTI">/***/</span> 
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-5'>2-10-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.8'>R.5.8</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.9'>R.5.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x34' name='standard_x34'><div class='standard'><div>34&nbsp;X</div></div></a><div class='headline'>Identifier reuse: proc vs macro.</div></div><p>The name of an identifier that is persistent, i.e. with static storage duration, should not be reused across any source files in the system. Objects or procedures with external linkage, and objects or procedures with the static storage class specifier, are persistent. Confusion may arise if two identifiers share the same name. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/* FILE 1 */</span> 
<span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 34 X : Identifier reuse: proc vs macro
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>      <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="br0">&#41;</span>           <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span> 
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
<span class="coMULTI">/* FILE 2 */</span> 
<span class="co2">#define foo sn1   /* Not compliant */ </span>
&nbsp;
<span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 34 X : Identifier reuse: proc vs macro
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-5'>2-10-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.5'>R.5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x35' name='standard_x35'><div class='standard'><div>35&nbsp;X</div></div></a><div class='headline'>Identifier reuse: proc vs component.</div></div><p>The name of an identifier that is persistent, i.e. with static storage duration, should not be reused across any source files in the system. Objects or procedures with external linkage, and objects or procedures with the static storage class specifier, are persistent. Confusion may arise if two identifiers share the same name. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 35 X : Identifier reuse: proc vs component
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">struct</span> s_tag
<span class="br0">&#123;</span>
  UINT_32 comp1<span class="sy0">;</span>   <span class="coMULTI">/* Not compliant */</span> 
  UINT_32 comp2<span class="sy0">;</span>
<span class="br0">&#125;</span> s_obj<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> comp1<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
&nbsp;
<span class="kw4">void</span> comp1<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>   <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-5'>2-10-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.8'>R.5.8</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.9'>R.5.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x36' name='standard_x36'><div class='standard'><div>36&nbsp;X</div></div></a><div class='headline'>Identifier reuse: proc vs enum constant.</div></div><p>The name of an identifier that is persistent, i.e. with static storage duration, should not be reused across any source files in the system. Objects or procedures with external linkage, and objects or procedures with the static storage class specifier, are persistent. Confusion may arise if two identifiers share the same name. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 36 X : Identifier reuse: proc vs enum constant
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* Not compliant */</span> 
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>   <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw2">enum</span> e_tag
  <span class="br0">&#123;</span>
    first<span class="sy0">,</span>
    second<span class="sy0">,</span>
    foo          <span class="coMULTI">/* Not compliant */</span> 
  <span class="br0">&#125;</span> e_obj<span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-5'>2-10-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.8'>R.5.8</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.9'>R.5.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x37' name='standard_x37'><div class='standard'><div>37&nbsp;X</div></div></a><div class='headline'>Identifier reuse: persistent var vs macro.</div></div><p>The name of an identifier that is persistent, i.e. with static storage duration, should not be reused across any source files in the system. Objects or procedures with external linkage, and objects or procedures with the static storage class specifier, are persistent. Confusion may arise if two identifiers share the same name. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/* FILE 1 */</span> 
<span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 37 X : Identifier reuse: persistent var vs macro
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">static</span> UINT_32 p_var <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>  <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span>
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
<span class="coMULTI">/* FILE 2 */</span> 
<span class="co2">#define p_var sn1   /* Not compliant */ </span>
&nbsp;
<span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 37 X : Identifier reuse: persistent var vs macro
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-5'>2-10-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.5'>R.5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x38' name='standard_x38'><div class='standard'><div>38&nbsp;X</div></div></a><div class='headline'>Identifier reuse: persistent var vs component.</div></div><p>The name of an identifier that is persistent, i.e. with static storage duration, should not be reused across any source files in the system. Objects or procedures with external linkage, and objects or procedures with the static storage class specifier, are persistent. Confusion may arise if two identifiers share the same name. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 38 X : Identifier reuse: persistent var vs component
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">struct</span> s_tag
<span class="br0">&#123;</span>
  UINT_32 comp1<span class="sy0">;</span>         <span class="coMULTI">/* Not compliant */</span> 
  UINT_32 comp2<span class="sy0">;</span>
<span class="br0">&#125;</span> s_obj<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">static</span> UINT_32 comp1<span class="sy0">;</span>  <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-5'>2-10-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.8'>R.5.8</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.9'>R.5.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x39' name='standard_x39'><div class='standard'><div>39&nbsp;X</div></div></a><div class='headline'>Identifier reuse: persistent var vs enum constant.</div></div><p>The name of an identifier that is persistent, i.e. with static storage duration, should not be reused across any source files in the system. Objects or procedures with external linkage, and objects or procedures with the static storage class specifier, are persistent. Confusion may arise if two identifiers share the same name. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 39 X : Identifier reuse: persistent var vs enum constant
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw2">enum</span> e_tag
<span class="br0">&#123;</span>
  first<span class="sy0">,</span>                 <span class="coMULTI">/* Not compliant */</span> 
  second
<span class="br0">&#125;</span> e_obj<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw4">static</span> UINT_32 first<span class="sy0">;</span>  <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-5'>2-10-5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.5'>5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.8'>R.5.8</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.9'>R.5.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x40' name='standard_x40'><div class='standard'><div>40&nbsp;X</div></div></a><div class='headline'>Identifier reuse: component vs var.</div></div><p>An identifier name in one name space should not be reused in a different name space, except for structure and union component names. The C language name spaces are:</p>
<p>Members/components of structs and unions; each struct/union as a separate name space.<br/>

Struct, union, and enum tags.<br/>

Label names.<br/>

All other identifiers.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 40 X : Identifier reuse: component vs var
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">struct</span> s_tag
<span class="br0">&#123;</span>
  UINT_32 comp1<span class="sy0">;</span>         <span class="coMULTI">/* Not compliant */</span> 
  UINT_32 comp2<span class="sy0">;</span>
<span class="br0">&#125;</span> s_obj<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 comp1<span class="sy0">;</span>         <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x41' name='standard_x41'><div class='standard'><div>41&nbsp;X</div></div></a><div class='headline'>Identifier reuse: label vs variable (MR).</div></div><p>An identifier name in one name space should not be reused in a different name space, except for structure and union component names. The C language name spaces are:</p>
<p>Members/components of structs and unions; each struct/union as a separate name space.<br/>

Struct, union, and enum tags.<br/>

Label names.<br/>

All other identifiers.</p>
<p>This standard is restricted to LDRA Testbed installations featuring the MISRA component, as indicated by (MR). </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 41 X : Identifier reuse: label vs var.
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> xref_41_1<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 u_var<span class="sy0">;</span>  <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
UINT_32 xref_41<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
u_var<span class="sy0">:</span>            <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
  <span class="coMULTI">/***/</span> 
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.1.2'>4.1.1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x42' name='standard_x42'><div class='standard'><div>42&nbsp;X</div></div></a><div class='headline'>Identifier reuse: component vs procedure param.</div></div><p>An identifier name in one name space should not be reused in a different name space, except for structure and union component names. The C language name spaces are:</p>
<p>Members/components of structs and unions; each struct/union as a separate name space.<br/>

Struct, union, and enum tags.<br/>

Label names.<br/>

All other identifiers.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 42 X : Identifier reuse: component vs procedure param
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">struct</span> s_tag
<span class="br0">&#123;</span>
  UINT_32 comp1<span class="sy0">;</span>          <span class="coMULTI">/* Not compliant */</span> 
  UINT_32 comp2<span class="sy0">;</span>
<span class="br0">&#125;</span> s_obj<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span>UINT_32 comp2<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span>UINT_32 comp2<span class="br0">&#41;</span>   <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x43' name='standard_x43'><div class='standard'><div>43&nbsp;X</div></div></a><div class='headline'>Identifier reuse: label vs procedure param (MR).</div></div><p>An identifier name in one name space should not be reused in a different name space, except for structure and union component names. The C language name spaces are:</p>
<p>Members/components of structs and unions; each struct/union as a separate name space.<br/>

Struct, union, and enum tags.<br/>

Label names.<br/>

All other identifiers.</p>
<p>This standard is restricted to LDRA Testbed installations featuring the MISRA component, as indicated by (MR). </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 43 X : Identifier reuse: label vs procedure param
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> xref_43_1<span class="br0">&#40;</span>UINT_32 u_var<span class="br0">&#41;</span>  <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
UINT_32 xref_43<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
u_var<span class="sy0">:</span>                   <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
  <span class="coMULTI">/***/</span> 
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x44' name='standard_x44'><div class='standard'><div>44&nbsp;X</div></div></a><div class='headline'>Identifier reuse: component vs enum constant.</div></div><p>An identifier name in one name space should not be reused in a different name space, except for structure and union component names. The C language name spaces are:</p>
<p>Members/components of structs and unions; each struct/union as a separate name space.<br/>

Struct, union, and enum tags.<br/>

Label names.<br/>

All other identifiers.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 44 X : Identifier reuse: component vs enum constant
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">struct</span> s_tag
<span class="br0">&#123;</span>
  UINT_32 comp1<span class="sy0">;</span>   <span class="coMULTI">/* Not compliant */</span> 
  UINT_32 comp2<span class="sy0">;</span>
<span class="br0">&#125;</span> s_obj<span class="sy0">;</span>
&nbsp;
<span class="kw2">enum</span> e_tag
<span class="br0">&#123;</span>
  comp1<span class="sy0">,</span>           <span class="coMULTI">/* Not compliant */</span> 
  two
<span class="br0">&#125;</span> e_obj<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x45' name='standard_x45'><div class='standard'><div>45&nbsp;X</div></div></a><div class='headline'>Identifier reuse: component vs label (MR).</div></div><p>An identifier name in one name space should not be reused in a different name space, except for structure and union component names. The C language name spaces are:</p>
<p>Members/components of structs and unions; each struct/union as a separate name space.<br/>

Struct, union, and enum tags.<br/>

Label names.<br/>

All other identifiers.</p>
<p>This standard is restricted to LDRA Testbed installations featuring the MISRA component, as indicated by (MR).</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 45 X : Identifier reuse: component vs label
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">struct</span> s_tag
<span class="br0">&#123;</span>
  UINT_32 lab1<span class="sy0">;</span>         <span class="coMULTI">/* Not compliant */</span> 
  UINT_32 comp2<span class="sy0">;</span>
<span class="br0">&#125;</span> s_obj<span class="sy0">;</span>
&nbsp;
&nbsp;
UINT_32 xref_45<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
lab1<span class="sy0">:</span>         <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
  <span class="coMULTI">/***/</span> 
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x46' name='standard_x46'><div class='standard'><div>46&nbsp;X</div></div></a><div class='headline'>Identifier reuse: label vs enum constant (MR).</div></div><p>An identifier name in one name space should not be reused in a different name space, except for structure and union component names. The C language name spaces are:</p>
<p>Members/components of structs and unions; each struct/union as a separate name space.<br/>

Struct, union, and enum tags.<br/>

Label names.<br/>

All other identifiers.</p>
<p>This standard is restricted to LDRA Testbed installations featuring the MISRA component, as indicated by (MR). </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 46 X : Identifier reuse: label vs enum constant
 *******************************************************************/</span> 
&nbsp;
<span class="kw2">enum</span> e_tag
<span class="br0">&#123;</span>
  lab1<span class="sy0">,</span>         <span class="coMULTI">/* Not compliant */</span> 
  second<span class="sy0">,</span>
<span class="br0">&#125;</span> e_obj<span class="sy0">;</span>
&nbsp;
&nbsp;
UINT_32 xref_46<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
lab1<span class="sy0">:</span>         <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
  <span class="coMULTI">/***/</span> 
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x47' name='standard_x47'><div class='standard'><div>47&nbsp;X</div></div></a><div class='headline'>Identifier reuse: component vs macro.</div></div><p>An identifier name in one name space should not be reused in a different name space, except for structure and union component names. The C language name spaces are:</p>
<p>Members/components of structs and unions; each struct/union as a separate name space.<br/>

Struct, union, and enum tags.<br/>

Label names.<br/>

All other identifiers.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/* FILE 1 */</span> 
<span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 47 X : Identifier reuse: component vs macro
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">struct</span> s_tag
<span class="br0">&#123;</span>
    UINT_32 comp1<span class="sy0">;</span>
    UINT_32 comp2<span class="sy0">;</span>   <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#125;</span> s_obj<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span> 
&nbsp;
&nbsp;
&nbsp;
&nbsp;
<span class="coMULTI">/* FILE 2 */</span> 
<span class="co2">#define comp2 sn1   /* Not compliant */ </span>
&nbsp;
<span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 47 X : Identifier reuse: component vs macro
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.5'>R.5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x48' name='standard_x48'><div class='standard'><div>48&nbsp;X</div></div></a><div class='headline'>Identifier reuse: label vs macro (MR).</div></div><p>An identifier name in one name space should not be reused in a different name space, except for structure and union component names. The C language name spaces are:</p>
<p>Members/components of structs and unions; each struct/union as a separate name space.<br/>

Struct, union, and enum tags.<br/>

Label names.<br/>

All other identifiers.</p>
<p>This standard is restricted to LDRA Testbed installations featuring the MISRA component, as indicated by (MR). </p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/* FILE 1 */</span> 
<span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 48 X : Identifier reuse: label vs macro
 *******************************************************************/</span> 
&nbsp;
UINT_32 xref_48_1<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
lab1<span class="sy0">:</span>         <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
  <span class="coMULTI">/***/</span> 
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span> 
&nbsp;
&nbsp;
&nbsp;
<span class="coMULTI">/* FILE 2 */</span> 
<span class="co2">#define lab1 sn1   /* Not compliant */ </span>
&nbsp;
<span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 48 X : Identifier reuse: label vs macro
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> xref_48<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.6'>5.6</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.5'>R.5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.7.1'>M1.7.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x49' name='standard_x49'><div class='standard'><div>49&nbsp;X</div></div></a><div class='headline'>Identifier reuse: var vs proc param.</div></div><p>Identifier names should not be reused across any files in the system, regardless of scope. This violation captures a specific instance of identifier reuse not explicitly checked under the rules applied by 4 X to 48 X. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 49 X : Identifier reuse: var vs proc param
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span>UINT_32 pp<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* Not compliant */</span> 
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span>UINT_32 pp<span class="br0">&#41;</span>   <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 pp<span class="sy0">;</span>          <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x50' name='standard_x50'><div class='standard'><div>50&nbsp;X</div></div></a><div class='headline'>Identifier reuse: var vs macro.</div></div><p>Identifier names should not be reused across any files in the system, regardless of scope. This violation captures a specific instance of identifier reuse not explicitly checked under the rules applied by 4 X to 48 X. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/* FILE 1 */</span> 
<span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 50 X : Identifier reuse: var vs macro
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 loc_var <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>  <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span> 
&nbsp;
&nbsp;
&nbsp;
&nbsp;
<span class="coMULTI">/* FILE 2 */</span> 
<span class="co2">#define loc_var sn1   /* Not compliant */ </span>
&nbsp;
<span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 50 X : Identifier reuse: var vs macro
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.5'>R.5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x51' name='standard_x51'><div class='standard'><div>51&nbsp;X</div></div></a><div class='headline'>Identifier reuse: var vs enum constant.</div></div><p>Identifier names should not be reused across any files in the system, regardless of scope. This violation captures a specific instance of identifier reuse not explicitly checked under the rules applied by 4 X to 48 X. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 51 X : Identifier reuse: var vs enum constant
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw2">enum</span> e_tag
<span class="br0">&#123;</span>
  first<span class="sy0">,</span>                <span class="coMULTI">/* Not compliant */</span> 
  second
<span class="br0">&#125;</span> e_obj<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 first<span class="sy0">;</span>        <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x52' name='standard_x52'><div class='standard'><div>52&nbsp;X</div></div></a><div class='headline'>Identifier reuse: proc param vs proc param.</div></div><p>Identifier names should not be reused across any files in the system, regardless of scope. This violation captures a specific instance of identifier reuse not explicitly checked under the rules applied by 4 X to 48 X. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 52 X : Identifier reuse: proc param vs proc param
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> proc1<span class="br0">&#40;</span>UINT_32 param<span class="br0">&#41;</span><span class="sy0">;</span>           <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> proc2<span class="br0">&#40;</span>UINT_32 param<span class="br0">&#41;</span><span class="sy0">;</span>           <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> proc1<span class="br0">&#40;</span>UINT_32 param<span class="br0">&#41;</span>            <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> proc2<span class="br0">&#40;</span>UINT_32 param<span class="br0">&#41;</span>            <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x53' name='standard_x53'><div class='standard'><div>53&nbsp;X</div></div></a><div class='headline'>Identifier reuse: proc param vs macro.</div></div><p>Identifier names should not be reused across any files in the system, regardless of scope. This violation captures a specific instance of identifier reuse not explicitly checked under the rules applied by 4 X to 48 X. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/* FILE 1*/</span> 
<span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 53 X : Identifier reuse: proc param vs macro
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span>UINT_32 param<span class="br0">&#41;</span><span class="sy0">;</span>      <span class="coMULTI">/* Not compliant */</span> 
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span>UINT_32 param<span class="br0">&#41;</span>       <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span> 
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
<span class="coMULTI">/* FILE 2*/</span> 
<span class="co2">#define param sn1   /* Not compliant */ </span>
&nbsp;
<span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 53 X : Identifier reuse: proc param vs macro
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.5'>R.5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x54' name='standard_x54'><div class='standard'><div>54&nbsp;X</div></div></a><div class='headline'>Identifier reuse: proc param vs enum constant.</div></div><p>Identifier names should not be reused across any files in the system, regardless of scope. This violation captures a specific instance of identifier reuse not explicitly checked under the rules applied by 4 X to 48 X. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 54 X : Identifier reuse: proc param vs enum constant
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span>UINT_32 param<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* Not compliant */</span> 
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span>UINT_32 param<span class="br0">&#41;</span>   <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw2">enum</span> e_tag
  <span class="br0">&#123;</span>
    first<span class="sy0">,</span>
    second<span class="sy0">,</span>
    param                 <span class="coMULTI">/* Not compliant */</span> 
  <span class="br0">&#125;</span> e_obj<span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x55' name='standard_x55'><div class='standard'><div>55&nbsp;X</div></div></a><div class='headline'>Identifier reuse: label vs label (MR).</div></div><p>Identifier names should not be reused across any files in the system, regardless of scope. This violation captures a specific instance of identifier reuse not explicitly checked under the rules applied by 4 X to 48 X. </p>
<p>This standard is restricted to LDRA Testbed installations featuring the MISRA component, as indicated by (MR)</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 55 X : Identifier reuse: label vs label
 *******************************************************************/</span> 
&nbsp;
UINT_32 xref_55_1<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
lab1<span class="sy0">:</span>          <span class="coMULTI">/* Not compliant */</span> 
  <span class="coMULTI">/***/</span> 
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
UINT_32 xref_55<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
lab1<span class="sy0">:</span>          <span class="coMULTI">/* Not compliant */</span> 
  <span class="coMULTI">/***/</span> 
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x57' name='standard_x57'><div class='standard'><div>57&nbsp;X</div></div></a><div class='headline'>Identifier reuse: macro vs enum constant.</div></div><p>Identifier names should not be reused across any files in the system, regardless of scope. This violation captures a specific instance of identifier reuse not explicitly checked under the rules applied by 4 X to 48 X. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/* FILE 1*/</span> 
<span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 57 X : Identifier reuse: macro vs enum constant
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw2">enum</span> e_tag
<span class="br0">&#123;</span>
    first<span class="sy0">,</span>
    runnerup   <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#125;</span> e_obj<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span> 
&nbsp;
&nbsp;
&nbsp;
&nbsp;
<span class="coMULTI">/*FILE 2*/</span> 
<span class="co2">#define runnerup sn1   /* Not compliant */ </span>
&nbsp;
<span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 57 X : Identifier reuse: macro vs enum constant
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.5'>R.5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x58' name='standard_x58'><div class='standard'><div>58&nbsp;X</div></div></a><div class='headline'>Identifier reuse: component vs component.</div></div><p>Identifier names should not be reused across any files in the system, regardless of scope. This violation captures a specific instance of identifier reuse not explicitly checked under the rules applied by 4 X to 48 X. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 58 X : Identifier reuse: component vs component
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">struct</span> s_tag1
<span class="br0">&#123;</span>
  UINT_32 comp1<span class="sy0">;</span>   <span class="coMULTI">/* Not compliant */</span> 
  UINT_32 comp2<span class="sy0">;</span>
<span class="br0">&#125;</span> s_obj1<span class="sy0">;</span>
&nbsp;
<span class="kw4">struct</span> s_tag2
<span class="br0">&#123;</span>
  UINT_32 comp1<span class="sy0">;</span>   <span class="coMULTI">/* Not compliant */</span> 
  UINT_32 comp3<span class="sy0">;</span>
<span class="br0">&#125;</span> s_obj2<span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_x3.x'>X3.x</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x59' name='standard_x59'><div class='standard'><div>59&nbsp;X</div></div></a><div class='headline'>Identifier reuse: enum constant vs enum constant.</div></div><p>Identifier names should not be reused across any files in the system, regardless of scope. This violation captures a specific instance of identifier reuse not explicitly checked under the rules applied by 4 X to 48 X. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 59 X : Identifier reuse: enum constant vs enum constant
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw2">enum</span> e_tag1
  <span class="br0">&#123;</span>
    first<span class="sy0">,</span>   <span class="coMULTI">/* Not compliant */</span> 
    runnerup
  <span class="br0">&#125;</span> e_obj1<span class="sy0">;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw2">enum</span> e_tag2
  <span class="br0">&#123;</span>
    first<span class="sy0">,</span>   <span class="coMULTI">/* Not compliant */</span> 
    second
  <span class="br0">&#125;</span> e_obj2<span class="sy0">;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x60' name='standard_x60'><div class='standard'><div>60&nbsp;X</div></div></a><div class='headline'>Identifier reuse: variable vs variable.</div></div><p>Identifier names should not be reused across any files in the system, regardless of scope. This violation captures a specific instance of identifier reuse not explicitly checked under the rules applied by 4 X to 48 X. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 60 X : Identifier reuse: variable vs variable
 * A/Ref:
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> foo<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 local_var <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>   <span class="coMULTI">/* Not compliant */</span> 
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> bar<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 local_var <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>   <span class="coMULTI">/* Not compliant */</span> 
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.7'>5.7</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x61' name='standard_x61'><div class='standard'><div>61&nbsp;X</div></div></a><div class='headline'>Identifier match in *** chars.</div></div><p>Identifiers shall not rely on the significance of more than a limited number of characters, which is typically 31. Compiler support varies, and if the limit is exceeded the behaviour is undefined.</p>
<p>The limit is user definable. The *** symbols refer to a user definable number for this standard, defaulting to 31. The configuration is made in the c/cpppen.dat file. Instructions for making alterations can be found in the manual. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 61 X : Identifier match in *** chars
 *******************************************************************/</span> 
&nbsp;
UINT_32 global_variable_with_long_name1x<span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span> 
UINT_32 global_variable_with_long_name1y<span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span> 
&nbsp;
<span class="kw4">void</span> XREF_061<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl32-c'>DCL32-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_11'>11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.5.5'>3.5.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_11'>11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_46'>46</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_69'>69</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_1.4'>1.4</a>, <a href='misra-ac_model.htm#rule_misra-ac_5.1'>5.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_11'>11</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_1.4'>1.4</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_5.1'>5.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.1'>R.5.1</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.2'>R.5.2</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.3'>R.5.3</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.5.4'>R.5.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x62' name='standard_x62'><div class='standard'><div>62&nbsp;X</div></div></a><div class='headline'>Function prototype/defn return type mismatch (MR).</div></div><p>The return type given for a function declaration and definition shall be identical. The base type, qualifiers, and typedef name must all match.</p>
<p>This standard is restricted to LDRA Testbed installations featuring the MISRA component, as indicated by (MR).</p>
<p>Note that for C++ files,  MISRA-C++:2008 checking needs to be enabled in order for this violation to be detected, either via selection of the MISRA-C++:2008 programming model or by setting the modifier <a href='standard_flags.htm#flag_331'>331</a> to 1 in the c/cppreport.dat file.  <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> ANOTHER_UINT_32<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 62 X : Function prototype/defn return type mismatch.
 *******************************************************************/</span> 
&nbsp;
ANOTHER_UINT_32 xref_62<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
UINT_32 xref_62<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>         <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
  UINT_32 ret_val <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
  <span class="coMULTI">/***/</span> 
  <span class="kw1">return</span> ret_val<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_8.3'>8.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_3-2-1'>3-2-1</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_3-9-1'>3-9-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_8.3'>8.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.4'>R.8.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_4.3.c'>4.3.c</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r2.8.3'>R2.8.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x63' name='standard_x63'><div class='standard'><div>63&nbsp;X</div></div></a><div class='headline'>Function prototype/defn param type mismatch (MR).</div></div><p>The formal parameter types given for a function declaration and definition shall be identical. The base type, qualifiers, and typedef name must all match.</p>
<p>This standard is restricted to LDRA Testbed installations featuring the MISRA component, as indicated by (MR). </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">typedef</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> ANOTHER_UINT_32<span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 63 X : Function prototype/defn param type mismatch.
 *******************************************************************/</span> 
&nbsp;
UINT_32 xref_63<span class="br0">&#40;</span>ANOTHER_UINT_32 p1<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
UINT_32 xref_63<span class="br0">&#40;</span>UINT_32 p1<span class="br0">&#41;</span>         <span class="coMULTI">/* Not compliant */</span> 
<span class="br0">&#123;</span>
  UINT_32 ret_val <span class="sy0">=</span> p1<span class="sy0">;</span>
  <span class="coMULTI">/***/</span> 
  <span class="kw1">return</span> ret_val<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2007 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.7.4'>3.7.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_8.3'>8.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_3-9-1'>3-9-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_8.3'>8.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.3'>R.8.3</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.8.4'>R.8.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_4.3.c'>4.3.c</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m4.5.1'>M4.5.1</a>, <a href='sec-c_model.htm#rule_sec-c_r2.8.3'>R2.8.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x64' name='standard_x64'><div class='standard'><div>64&nbsp;X</div></div></a><div class='headline'>Array bound exceeded at call.</div></div><p>An array parameter has been indexed by a value that is not in the range specified for the array.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 64 X : Array bound exceeded at call.
 *******************************************************************/</span>
&nbsp;
<span class="kw4">static</span> INT_32 indexArray <span class="br0">&#40;</span> <span class="kw4">const</span> INT_32 array <span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">return</span> array<span class="br0">&#91;</span><span class="nu0">4</span><span class="br0">&#93;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
INT_32 XREF_064 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   INT_32 array<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="br0">&#125;</span><span class="sy0">;</span>
   <span class="kw1">return</span> indexArray<span class="br0">&#40;</span> array <span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_arr30-c'>ARR30-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_121'>121</a>, <a href='cwe_model.htm#rule_cwe_122'>122</a>, <a href='cwe_model.htm#rule_cwe_124'>124</a>, <a href='cwe_model.htm#rule_cwe_126'>126</a>, <a href='cwe_model.htm#rule_cwe_127'>127</a>, <a href='cwe_model.htm#rule_cwe_129'>129</a>, <a href='cwe_model.htm#rule_cwe_193'>193</a>, <a href='cwe_model.htm#rule_cwe_466'>466</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a>, <a href='cwe_model.htm#rule_cwe_823'>823</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.17.5'>R.17.5</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.18.1'>R.18.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_x3.x'>X3.x</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x65' name='standard_x65'><div class='standard'><div>65&nbsp;X</div></div></a><div class='headline'>continue in ill-formed loop.</div></div><p>Some guidelines do not permit the use of continue in complex loops.</p>
<p>Note that MISRA-C++:2008 checking needs to be enabled in order for this violation to be detected, either via selection of the MISRA-C++:2008 programming model or by setting the modifier <a href='standard_flags.htm#flag_331'>331</a> to 1 in the c/cppreport.dat file. (TBmisra license permitting).  <a href='../../help/testbed.book_the code review report configuration file - report.dat - helpid_.pdf'>Instructions</a> for making alterations can be found in the report.dat file. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 65 X : Continue in ill-formed loop.
 *******************************************************************/</span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> XREF_065 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   INT_32 j <span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span>
   INT_32 i<span class="sy0">;</span>
&nbsp;
   <span class="kw1">for</span> <span class="br0">&#40;</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">!=</span> <span class="nu0">10</span> <span class="sy0">&amp;&amp;</span> j <span class="sy0">!=</span> i<span class="sy0">;</span> <span class="sy0">++</span>i <span class="br0">&#41;</span>
   <span class="br0">&#123;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span> <span class="br0">&#40;</span> i <span class="sy0">%</span> <span class="nu0">2</span> <span class="br0">&#41;</span> <span class="sy0">==</span> <span class="nu0">0</span> <span class="br0">&#41;</span>
      <span class="br0">&#123;</span>
         <span class="kw1">continue</span><span class="sy0">;</span>     <span class="coMULTI">/* not compliant - loop is not well-formed */</span>
      <span class="br0">&#125;</span>
      <span class="sy0">++</span>j<span class="sy0">;</span>
   <span class="br0">&#125;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-6-3'>6-6-3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'>Modifiers : <a href='standard_flags.htm#flag_331'>331</a> = 1</td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x66' name='standard_x66'><div class='standard'><div>66&nbsp;X</div></div></a><div class='headline'>Insufficient array space at call.</div></div><p>When copying from source to destination, the destination must not overrun as a result of the operation. Overrun leads to data corruption. This standard reports problems where the source is a parameter to a procedure.  Other situations are covered by standards <a href='standards.htm#standard_s489'>489 S</a>, <a href='standards.htm#standard_x70'>70 X</a> and <a href='standards.htm#standard_x71'>71 X</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/*******************************************************************
 * Standard 66 X : Insufficient array space at call.
 *******************************************************************/</span>
&nbsp;
<span class="kw4">void</span> copy <span class="br0">&#40;</span><span class="kw4">char</span> src_array<span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw4">char</span> dest_arr<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span><span class="sy0">;</span>
   <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> strcpy <span class="br0">&#40;</span>dest_arr<span class="sy0">,</span> src_array<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> XREF_066 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw4">char</span> arrc<span class="br0">&#91;</span><span class="nu0">10</span><span class="br0">&#93;</span><span class="sy0">;</span>
   copy<span class="br0">&#40;</span>arrc<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">int</span> main <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   XREF_066 <span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_arr33-c'>ARR33-C</a>, <a href='cert-c_model.htm#rule_cert-c_str31-c'>STR31-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_121'>121</a>, <a href='cwe_model.htm#rule_cwe_122'>122</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x67' name='standard_x67'><div class='standard'><div>67&nbsp;X</div></div></a><div class='headline'>Identifier is typographically ambiguous.</div></div><p>It is not advisable to use identifiers that appear the same in some typefaces, as this can lead to the developer confusing one identifier with another. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot; </span>
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> xref_67<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 67 X : Identifier is typographically ambiguous.
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">static</span> <span class="kw4">void</span> xref_67 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   INT_32 id1_a_bc<span class="sy0">;</span>
   INT_32 id1_ab_c<span class="sy0">;</span>     <span class="coMULTI">/* not compliant */</span> 
   INT_32 id2_ii<span class="sy0">;</span>
   INT_32 id2_11<span class="sy0">;</span>       <span class="coMULTI">/* not compliant */</span> 
   INT_32 id3_i0<span class="sy0">;</span>
   INT_32 id3_1O<span class="sy0">;</span>       <span class="coMULTI">/* not compliant */</span> 
   INT_32 id4_in<span class="sy0">;</span>
   INT_32 id4_1h<span class="sy0">;</span>       <span class="coMULTI">/* not compliant */</span> 
   INT_32 id5_Z5<span class="sy0">;</span>
   INT_32 id5_2S<span class="sy0">;</span>       <span class="coMULTI">/* not compliant */</span> 
   INT_32 id6_ZS<span class="sy0">;</span>
   INT_32 id6_25<span class="sy0">;</span>       <span class="coMULTI">/* not compliant */</span> 
   <span class="coMULTI">/***/</span> 
   <span class="sy0">;</span>
   <span class="coMULTI">/***/</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_dcl02-c'>DCL02-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_736'>736</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_48'>48</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_2-10-1'>2-10-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_d.4.5'>D.4.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x68' name='standard_x68'><div class='standard'><div>68&nbsp;X</div></div></a><div class='headline'>Parameter indexing array too big at call.</div></div><p>A procedure parameter has been used to index an array and exceeds the range specified for the array.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="coMULTI">/*******************************************************************
 * Standard 68 X : Parameter indexing array too big at call.
 *******************************************************************/</span>
&nbsp;
<span class="kw4">static</span> INT_32 index_too_large <span class="br0">&#40;</span> UINT_32 index <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   INT_32 array<span class="br0">&#91;</span><span class="nu0">10</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span><span class="nu0">0</span><span class="br0">&#125;</span><span class="sy0">;</span>
   <span class="kw1">return</span> array<span class="br0">&#91;</span>index<span class="br0">&#93;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
INT_32 XREF_068<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">return</span> index_too_large<span class="br0">&#40;</span> 20U <span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_arr30-c'>ARR30-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_121'>121</a>, <a href='cwe_model.htm#rule_cwe_122'>122</a>, <a href='cwe_model.htm#rule_cwe_124'>124</a>, <a href='cwe_model.htm#rule_cwe_126'>126</a>, <a href='cwe_model.htm#rule_cwe_127'>127</a>, <a href='cwe_model.htm#rule_cwe_129'>129</a>, <a href='cwe_model.htm#rule_cwe_193'>193</a>, <a href='cwe_model.htm#rule_cwe_466'>466</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a>, <a href='cwe_model.htm#rule_cwe_823'>823</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.18.1'>R.18.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x69' name='standard_x69'><div class='standard'><div>69&nbsp;X</div></div></a><div class='headline'>Global array bound exceeded at use.</div></div><p>An index has been found which is not in the range specified for a globally declared array. This standard is enforced for arrays that are explicitly declared or whose size can be determined from their initialisation.  The use of local arrays or indexing via procedure calls are reported using <a href='standards.htm#standard_s47'>47 S</a>, <a href='standards.htm#standard_x64'>64 X</a>, <a href='standards.htm#standard_x68'>68 X</a> and <a href='standards.htm#standard_x72'>72 X</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 69 X : Global array bound exceeded at use.
 *******************************************************************/</span>
&nbsp;
INT_32 array<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
INT_32 XREF_069 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw1">return</span> array<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_arr30-c'>ARR30-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_121'>121</a>, <a href='cwe_model.htm#rule_cwe_122'>122</a>, <a href='cwe_model.htm#rule_cwe_124'>124</a>, <a href='cwe_model.htm#rule_cwe_126'>126</a>, <a href='cwe_model.htm#rule_cwe_127'>127</a>, <a href='cwe_model.htm#rule_cwe_129'>129</a>, <a href='cwe_model.htm#rule_cwe_193'>193</a>, <a href='cwe_model.htm#rule_cwe_466'>466</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a>, <a href='cwe_model.htm#rule_cwe_823'>823</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.18.1'>R.18.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_x3.x'>X3.x</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x70' name='standard_x70'><div class='standard'><div>70&nbsp;X</div></div></a><div class='headline'>Array has insufficient space.</div></div><p>When copying from source to destination, the destination must not overrun as a result of the operation. Overrun leads to data corruption. This standard reports problems where the destination is a parameter to a procedure.  Other situations are covered by standards <a href='standards.htm#standard_s489'>489 S</a>, <a href='standards.htm#standard_x66'>66 X</a> and <a href='standards.htm#standard_x71'>71 X</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 70 X : Array has insufficient space.
 *******************************************************************/</span>
&nbsp;
<span class="kw4">void</span> copy <span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">*</span>dest_array<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw4">char</span> src_array<span class="br0">&#91;</span><span class="nu0">8</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="st0">&quot;abcdefg&quot;</span><span class="sy0">;</span>
   <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> strcpy <span class="br0">&#40;</span>dest_array<span class="sy0">,</span> src_array<span class="br0">&#41;</span><span class="sy0">;</span> 
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> XREF_070 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw4">char</span> arr_3<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span><span class="sy0">;</span>
   copy<span class="br0">&#40;</span>arr_3<span class="br0">&#41;</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">int</span> main <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   XREF_070 <span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_arr33-c'>ARR33-C</a>, <a href='cert-c_model.htm#rule_cert-c_str31-c'>STR31-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_121'>121</a>, <a href='cwe_model.htm#rule_cwe_122'>122</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x71' name='standard_x71'><div class='standard'><div>71&nbsp;X</div></div></a><div class='headline'>Insufficient space for copy.</div></div><p>When copying from source to destination, the destination must not overrun as a result of the operation. Overrun leads to data corruption. This standard reports problems where both the source and destination are parameters to a procedure.  Other situations are covered by standards <a href='standards.htm#standard_s489'>489 S</a>, <a href='standards.htm#standard_x66'>66 X</a> and <a href='standards.htm#standard_x70'>70 X</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="co2">#include &lt;string.h&gt;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 71 X : Insufficient space for copy. 
 *******************************************************************/</span>
&nbsp;
<span class="kw4">void</span> copy <span class="br0">&#40;</span><span class="kw4">char</span> <span class="sy0">*</span>dest_array<span class="sy0">,</span> <span class="kw4">char</span> <span class="sy0">*</span>src_array<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span> strcpy <span class="br0">&#40;</span>dest_array<span class="sy0">,</span> src_array<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> XREF_070 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   <span class="kw4">char</span> arr_3<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span><span class="sy0">;</span>
   <span class="kw4">char</span> src_array<span class="br0">&#91;</span><span class="nu0">8</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="st0">&quot;abcdefg&quot;</span><span class="sy0">;</span>
   copy<span class="br0">&#40;</span>arr_3<span class="sy0">,</span> src_array<span class="br0">&#41;</span><span class="sy0">;</span>  
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">int</span> main <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   XREF_071 <span class="br0">&#40;</span> <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_arr33-c'>ARR33-C</a>, <a href='cert-c_model.htm#rule_cert-c_str31-c'>STR31-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_121'>121</a>, <a href='cwe_model.htm#rule_cwe_122'>122</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x72' name='standard_x72'><div class='standard'><div>72&nbsp;X</div></div></a><div class='headline'>Parameter indexing array too small at call.</div></div><p>A procedure parameter has been used to index an array, and is found to have a value less than 0.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="kw4">static</span> INT_32 XREF_072 <span class="br0">&#40;</span>  INT_32 index <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   INT_32 array<span class="br0">&#91;</span><span class="nu0">10</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span><span class="nu0">0</span><span class="br0">&#125;</span><span class="sy0">;</span>
   <span class="kw1">return</span> array<span class="br0">&#91;</span>index<span class="br0">&#93;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="co2">#define OFFSET 12</span>
&nbsp;
INT_32 main <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">return</span> XREF_072<span class="br0">&#40;</span><span class="nu0">10</span><span class="sy0">-</span>OFFSET<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2010 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_21.1'>21.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.18.1'>R.18.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_x3.x'>X3.x</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x73' name='standard_x73'><div class='standard'><div>73&nbsp;X</div></div></a><div class='headline'>Bits discarded in &gt;&gt; on parameter in function.</div></div><p>Shifts can cause bits with the value 1 to be discarded. This may not be the user's intention. This standard checks that a shift using function arguments does not cause such bits to be shifted outside the original size of the left hand operand.</p>
<p>The limits for the standard types need to be specified in the c/cppvals.dat and c/cpptbend.dat files.  Instructions for making alterations can be found in the manual. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************************
 * Standard 73 X : Bits discarded in &gt;&gt; on parameter in function.
 *****************************************************************/</span>
&nbsp;
<span class="kw4">void</span> proc<span class="br0">&#40;</span>UCHAR p1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UCHAR res<span class="sy0">;</span>
   res <span class="sy0">=</span> p1 <span class="sy0">&gt;&gt;</span> <span class="nu0">1</span><span class="sy0">;</span>  <span class="coMULTI">/* 00000111 &gt;&gt; 1 gives 0000011 which discards &quot;1&quot; */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> XREF_O73<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   proc<span class="br0">&#40;</span>7U<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2013 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x74' name='standard_x74'><div class='standard'><div>74&nbsp;X</div></div></a><div class='headline'>Bits discarded in &lt;&lt; by parameter in function.</div></div><p>Shifts can cause bits with the value 1 to be discarded. This may not be the user's intention. This standard checks that a shift using function arguments does not cause such bits to be shifted outside the original size of the left hand operand.</p>
<p>The limits for the standard types need to be specified in the c/cppvals.dat and c/cpptbend.dat files. Instructions for making alterations can be found in the manual. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************************
 * Standard 74 X : Bits discarded in &lt;&lt; by parameter in function.
 *****************************************************************/</span>
&nbsp;
<span class="kw4">void</span> proc<span class="br0">&#40;</span>UCHAR p1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UCHAR res<span class="sy0">;</span>
   res <span class="sy0">=</span> 15U <span class="sy0">&lt;&lt;</span> p1<span class="sy0">;</span>  <span class="coMULTI">/* 00001111 &lt;&lt; 7 gives 10000000 which discards 3 &quot;1&quot; */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> XREF_O74<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   proc<span class="br0">&#40;</span>7U<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2013 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x75' name='standard_x75'><div class='standard'><div>75&nbsp;X</div></div></a><div class='headline'>Bits discarded in &gt;&gt; by parameter in function.</div></div><p>Shifts can cause bits with the value 1 to be discarded. This may not be the user's intention. This standard checks that a shift using function arguments does not cause such bits to be shifted outside the original size of the left hand operand.</p>
<p>The limits for the standard types need to be specified in the c/cppvals.dat and c/cpptbend.dat files. Instructions for making alterations can be found in the manual. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************************
 * Standard 75 X : Bits discarded in &gt;&gt; by parameter in function.
 *****************************************************************/</span>
&nbsp;
<span class="kw4">void</span> proc<span class="br0">&#40;</span>UCHAR p1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UCHAR res<span class="sy0">;</span>
   res <span class="sy0">=</span> 3U <span class="sy0">&gt;&gt;</span> p1<span class="sy0">;</span>  <span class="coMULTI">/* 00000011 &gt;&gt; 7 gives 00000000 which discards 2 &quot;1&quot; */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> XREF_O75<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   proc<span class="br0">&#40;</span>7U<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2013 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x76' name='standard_x76'><div class='standard'><div>76&nbsp;X</div></div></a><div class='headline'>Bits discarded in &lt;&lt; on parameter in function.</div></div><p>Shifts can cause bits with the value 1 to be discarded. This may not be the user's intention. This standard checks that a shift using function arguments does not cause such bits to be shifted outside the original size of the left hand operand.</p>
<p>The limits for the standard types need to be specified in the c/cppvals.dat and c/cpptbend.dat files. Instructions for making alterations can be found in the manual.  </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************************
 * Standard 76 X : Bits discarded in &lt;&lt; on parameter in function.
 *****************************************************************/</span>
&nbsp;
<span class="kw4">void</span> proc<span class="br0">&#40;</span>UCHAR p1<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UCHAR res<span class="sy0">;</span>
   res <span class="sy0">=</span> p1 <span class="sy0">&lt;&lt;</span> <span class="nu0">6</span><span class="sy0">;</span>  <span class="coMULTI">/* 00001111 &lt;&lt; 6 gives 11000000 which discards 2 &quot;1&quot; */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> XREF_O76<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   proc<span class="br0">&#40;</span>15U<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2013 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x77' name='standard_x77'><div class='standard'><div>77&nbsp;X</div></div></a><div class='headline'>Bits discarded in &gt;&gt; between parameters in function.</div></div><p>Shifts can cause bits with the value 1 to be discarded. This may not be the user's intention. This standard checks that a shift using function arguments does not cause such bits to be shifted outside the original size of the left hand operand.</p>
<p>The limits for the standard types need to be specified in the c/cppvals.dat and c/cpptbend.dat files. Instructions for making alterations can be found in the manual.  </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*********************************************************************
 * Standard 77 X : Bits discarded in &gt;&gt; between parameters in function.
 *********************************************************************/</span>
&nbsp;
<span class="kw4">void</span> proc<span class="br0">&#40;</span>UCHAR p1<span class="sy0">,</span> UCHAR p2<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UCHAR res<span class="sy0">;</span>
   res <span class="sy0">=</span> p1 <span class="sy0">&gt;&gt;</span> p2<span class="sy0">;</span>  <span class="coMULTI">/* 00000011 &gt;&gt; 7 gives 00000000 which discards 2 &quot;1&quot; */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> XREF_O77<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   proc<span class="br0">&#40;</span>3U<span class="sy0">,</span> 7U<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2013 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_x78' name='standard_x78'><div class='standard'><div>78&nbsp;X</div></div></a><div class='headline'>Bits discarded in &lt;&lt; between parameters in function.</div></div><p>Shifts can cause bits with the value 1 to be discarded. This may not be the user's intention. This standard checks that a shift using function arguments does not cause such bits to be shifted outside the original size of the left hand operand.</p>
<p>The limits for the standard types need to be specified in the c/cppvals.dat and c/cpptbend.dat files. Instructions for making alterations can be found in the manual.  </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*********************************************************************
 * Standard 78 X : Bits discarded in &lt;&lt; between parameters in function.
 *********************************************************************/</span>
&nbsp;
<span class="kw4">void</span> proc<span class="br0">&#40;</span>UCHAR p1<span class="sy0">,</span> UCHAR p2<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UCHAR res<span class="sy0">;</span>
   res <span class="sy0">=</span> p1 <span class="sy0">&gt;&gt;</span> p2<span class="sy0">;</span>  <span class="coMULTI">/* 00000011 &lt;&lt; 7 gives 10000000 which discards &quot;1&quot; */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> XREF_O78<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   proc<span class="br0">&#40;</span>3U<span class="sy0">,</span> 7U<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2013 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_i1' name='standard_i1'><div class='standard'><div>1&nbsp;I</div></div></a><div class='headline'>Local variables contribute nothing to results.</div></div><p>Information flow analysis cannot find any output statement which is affected by this variable.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Information Flow 1 I : Local variables contribute nothing to results.
 ********************************************************/</span> 
&nbsp;
UINT_32 InfoFlow001<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
   UINT_32 result <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
   UINT_32 if_1 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>   <span class="coMULTI">/* if_1 does not contribute to the result */</span>
&nbsp;
   <span class="kw1">return</span> <span class="br0">&#40;</span>result<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span> <span class="coMULTI">/* not compliant */</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_q1' name='standard_q1'><div class='standard'><div>1&nbsp;Q</div></div></a><div class='headline'>Call has execution order dependant side effects.</div></div><p>A function call, placed on the right hand side of the logical operator &amp;&amp; or ||, or ternary operator, shall not contain parameter side effects. By nature of the expression, the function may not be called depending on the values of the other sub-expressions. This conditional evaluation may not be obvious to all and can lead to mistakes. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Standard 1 Q : Call has execution order dependant side effects
 ********************************************************/</span>
&nbsp;
BOOL Test_q1<span class="br0">&#40;</span> UINT_32 Position<span class="sy0">,</span> UINT_32 <span class="sy0">*</span>Won <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 NewWins <span class="sy0">=</span> <span class="sy0">*</span>Won<span class="sy0">;</span>
  BOOL bWon <span class="sy0">=</span> FALSE<span class="sy0">;</span>
&nbsp;
  <span class="kw1">if</span> <span class="br0">&#40;</span> Position <span class="sy0">==</span> 1U <span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    bWon <span class="sy0">=</span> TRUE<span class="sy0">;</span>
    NewWins<span class="sy0">++;</span>
  <span class="br0">&#125;</span>
  <span class="sy0">*</span>Won <span class="sy0">=</span> NewWins<span class="sy0">;</span>
  <span class="kw1">return</span> <span class="br0">&#40;</span> bWon <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
BOOL QUALREP_001<span class="br0">&#40;</span>UINT_32 <span class="sy0">*</span>Places<span class="sy0">,</span> UINT_32 races<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  BOOL bWonAll <span class="sy0">=</span> TRUE<span class="sy0">;</span>
  UINT_32 WonCount <span class="sy0">=</span> 0U<span class="sy0">;</span>
  UINT_32 Race <span class="sy0">=</span> 0U<span class="sy0">;</span>
  UINT_32 RacePosition<span class="sy0">;</span>
&nbsp;
  <span class="kw1">while</span> <span class="br0">&#40;</span>Race <span class="sy0">&lt;</span>races<span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    RacePosition <span class="sy0">=</span> Places<span class="br0">&#91;</span>Race<span class="br0">&#93;</span><span class="sy0">;</span>
    bWonAll <span class="sy0">=</span> <span class="br0">&#40;</span> bWonAll <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span> Test_q1<span class="br0">&#40;</span> RacePosition<span class="sy0">,</span> <span class="sy0">&amp;</span>WonCount <span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* not compliant */</span>
    Race<span class="sy0">++;</span>
  <span class="br0">&#125;</span>
&nbsp;
  <span class="kw1">return</span> <span class="br0">&#40;</span> WonCount <span class="sy0">&gt;</span> 0U <span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_exp02-c'>EXP02-C</a>, <a href='cert-c_model.htm#rule_cert-c_exp10-c'>EXP10-C</a>, <a href='cert-c_model.htm#rule_cert-c_exp30-c'>EXP30-C</a>, <a href='cert-c_model.htm#rule_cert-c_fio41-c'>FIO41-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_737'>737</a>, <a href='cwe_model.htm#rule_cwe_758'>758</a>, <a href='cwe_model.htm#rule_cwe_768'>768</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_33'>33</a>, <a href='dera_model.htm#rule_dera_46'>46</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.10.1'>3.10.1</a>, <a href='fsb582-c_model.htm#rule_fsb582-c_3.10.2'>3.10.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.17'>9.17</a>, <a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_9.21'>9.21</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_10.3'>10.3</a>, <a href='hicpp_model.htm#rule_hic%2B%2B_10.9'>10.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_33'>33</a>, <a href='his_model.htm#rule_his_46'>46</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_157'>157</a>, <a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_204'>204</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_286'>286</a>, <a href='lmtcp_model.htm#rule_lmtcp_362'>362</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_12.2'>12.2</a>, <a href='misra-ac_model.htm#rule_misra-ac_12.4'>12.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_5-0-1'>5-0-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_33'>33</a>, <a href='misra-c_1998_model.htm#rule_misra-c%3A1998_46'>46</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.2'>12.2</a>, <a href='misra-c_2004_model.htm#rule_misra-c%3A2004_12.4'>12.4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.13.1'>R.13.1</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.13.2'>R.13.2</a>, <a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.13.5'>R.13.5</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.8.1'>M1.8.1</a>, <a href='sec-c_model.htm#rule_sec-c_r3.6.1'>R3.6.1</a>, <a href='sec-c_model.htm#rule_sec-c_r3.6.2'>R3.6.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
,&nbsp;<a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_q2' name='standard_q2'><div class='standard'><div>2&nbsp;Q</div></div></a><div class='headline'>LCSAJ density exceeds ***.</div></div><p>The *** symbols refer to a user definable number, defaulting to 20 for this standard. The configuration is made in the c/cppreport.dat or c/cpppen.dat file. Instructions for making alterations can be found in the manual. </p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
<span class="coMULTI">/* not compliant message appears at start of file */</span>
&nbsp;
<span class="coMULTI">/********************************************
 * Standard 2 Q : LCSAJ density exceeds ***.
 ********************************************/</span>
&nbsp;
BOOL isHexDigit<span class="br0">&#40;</span> CHAR TestChar <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  BOOL bResult<span class="sy0">;</span>
&nbsp;
  bResult <span class="sy0">=</span> FALSE<span class="sy0">;</span>
&nbsp;
  <span class="kw1">if</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>TestChar <span class="sy0">==</span> <span class="st0">'0'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>TestChar <span class="sy0">==</span> <span class="st0">'1'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>TestChar <span class="sy0">==</span> <span class="st0">'2'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>TestChar <span class="sy0">==</span> <span class="st0">'3'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>TestChar <span class="sy0">==</span> <span class="st0">'4'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>TestChar <span class="sy0">==</span> <span class="st0">'5'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>TestChar <span class="sy0">==</span> <span class="st0">'6'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>TestChar <span class="sy0">==</span> <span class="st0">'7'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>TestChar <span class="sy0">==</span> <span class="st0">'8'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>TestChar <span class="sy0">==</span> <span class="st0">'9'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>TestChar <span class="sy0">==</span> <span class="st0">'A'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>TestChar <span class="sy0">==</span> <span class="st0">'a'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>TestChar <span class="sy0">==</span> <span class="st0">'B'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>TestChar <span class="sy0">==</span> <span class="st0">'b'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>TestChar <span class="sy0">==</span> <span class="st0">'C'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>TestChar <span class="sy0">==</span> <span class="st0">'c'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>TestChar <span class="sy0">==</span> <span class="st0">'D'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>TestChar <span class="sy0">==</span> <span class="st0">'d'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>TestChar <span class="sy0">==</span> <span class="st0">'E'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>TestChar <span class="sy0">==</span> <span class="st0">'e'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>TestChar <span class="sy0">==</span> <span class="st0">'F'</span><span class="br0">&#41;</span> <span class="sy0">||</span>
      <span class="br0">&#40;</span>TestChar <span class="sy0">==</span> <span class="st0">'f'</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    bResult <span class="sy0">=</span> TRUE<span class="sy0">;</span>
  <span class="br0">&#125;</span>
&nbsp;
  <span class="kw1">return</span> bResult<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2001 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_145'>145</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_q3' name='standard_q3'><div class='standard'><div>3&nbsp;Q</div></div></a><div class='headline'>Filename contains upper case letters.</div></div><p>Filenames shall only contain lower case letters. Always using lower case avoids the possibility of conflicts on systems that are not case sensitive.</p>
<div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_14.12'>14.12</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_81'>81</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_4.1.a'>4.1.a</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='vsos_model.htm'>VSOS</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_q4' name='standard_q4'><div class='standard'><div>4&nbsp;Q</div></div></a><div class='headline'>Included file has path.</div></div><p>Include statements must not contain directory (path) information. Portability of the code may be affected by hard-coding paths to files.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/* not compliant */</span>
<span class="co2">#include &quot;C:\Testbed\Examples\Standards\C\Violations\Quality_report\c_standards.h&quot;</span>
<span class="coMULTI">/* not compliant */</span>
<span class="co2">#include &lt;sys/limits.h&gt;</span>
&nbsp;
<span class="coMULTI">/********************************************************
 * Quality Report 4 Q : Included file has path.
 ********************************************************/</span>
&nbsp;
<span class="kw4">void</span> QUALREP_001<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="coMULTI">/* ... */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CMSE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cmse_model.htm#rule_cmse_1.1.20'>1.1.20</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.11.9'>3.11.9</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>GJB</td>    <td class='seperator'>:</td>    <td class='target'><a href='gjb_model.htm#rule_gjb_4.1.1.20'>4.1.1.20</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_14.10'>14.10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_4.3.d'>4.3.d</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_p1.5.1'>P1.5.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_q5' name='standard_q5'><div class='standard'><div>5&nbsp;Q</div></div></a><div class='headline'>File does not end with new line.</div></div><p>C files are required to end in a new-line character, otherwise the behaviour is undefined.</p>
<div class='title'>Example</div>
<div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc15-c'>MSC15-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_758'>758</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIC++</td>    <td class='seperator'>:</td>    <td class='target'><a href='hicpp_model.htm#rule_hic%2B%2B_14.8'>14.8</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_16'>16</a>, <a href='lmtcp_model.htm#rule_lmtcp_62'>62</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_1.2'>1.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.1.3'>R.1.3</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_3.3.c'>3.3.c</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='conform_model.htm'>CONFORM</a>
,&nbsp;<a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_u1' name='standard_u1'><div class='standard'><div>1&nbsp;U</div></div></a><div class='headline'>Inter-file recursion found.</div></div><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_561'>561</a>, <a href='cwe_model.htm#rule_cwe_674'>674</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_70'>70</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-c_model.htm#rule_eads-c_117'>117</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>EADS-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='eads-cpp_model.htm#rule_eads-c%2B%2B_22'>22</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_70'>70</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JPL</td>    <td class='seperator'>:</td>    <td class='target'><a href='jpl_model.htm#rule_jpl_1'>1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_119'>119</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_219'>219</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_16.2'>16.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_7-5-4'>7-5-4</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_70'>70</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_16.2'>16.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.17.2'>R.17.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_r3.4.1'>R3.4.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_u2' name='standard_u2'><div class='standard'><div>2&nbsp;U</div></div></a><div class='headline'>Procedure not called anywhere in system.</div></div><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CAST</td>    <td class='seperator'>:</td>    <td class='target'><a href='cast_model.htm#rule_cast_5.16.18'>5.16.18</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_0-1-10'>0-1-10</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_u3' name='standard_u3'><div class='standard'><div>3&nbsp;U</div></div></a><div class='headline'>No procedures in this file called from other files.</div></div><div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_j1' name='standard_j1'><div class='standard'><div>1&nbsp;J</div></div></a><div class='headline'>Unreachable Code found.</div></div><p>Code is unreachable if there is no syntactic path to it.  Even if such code was intentional, a compiler may choose not to include that code in the final executable.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 1 J : Unreachable Code found.
 *******************************************************************/</span>
&nbsp;
UINT_32 j_001 <span class="br0">&#40;</span>BOOL param<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 local_var<span class="sy0">;</span>
&nbsp;
  <span class="kw1">if</span> <span class="br0">&#40;</span>param <span class="sy0">==</span> TRUE <span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    local_var <span class="sy0">=</span> param<span class="sy0">;</span> 
  <span class="br0">&#125;</span>
  <span class="kw1">else</span>
  <span class="br0">&#123;</span>
    local_var <span class="sy0">=</span> 0U<span class="sy0">;</span>
  <span class="br0">&#125;</span>
&nbsp;
  <span class="kw1">return</span> local_var<span class="sy0">;</span>
&nbsp;
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>  <span class="coMULTI">/* not compliant - cannot possibly reach this line */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>CERT-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='cert-c_model.htm#rule_cert-c_msc07-c'>MSC07-C</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>CWE</td>    <td class='seperator'>:</td>    <td class='target'><a href='cwe_model.htm#rule_cwe_561'>561</a>, <a href='cwe_model.htm#rule_cwe_570'>570</a>, <a href='cwe_model.htm#rule_cwe_571'>571</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>DERA</td>    <td class='seperator'>:</td>    <td class='target'><a href='dera_model.htm#rule_dera_52'>52</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>HIS</td>    <td class='seperator'>:</td>    <td class='target'><a href='his_model.htm#rule_his_52'>52</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>JSF++ AV</td>    <td class='seperator'>:</td>    <td class='target'><a href='jsf++_av_model.htm#rule_jsf%2B%2B_av_186'>186</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>LMTCP</td>    <td class='seperator'>:</td>    <td class='target'><a href='lmtcp_model.htm#rule_lmtcp_337'>337</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-AC</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-ac_model.htm#rule_misra-ac_14.1'>14.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C++:2008</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_0-1-1'>0-1-1</a>, <a href='misra-cpp_2008_model.htm#rule_misra-c%2B%2B%3A2008_6-6-1'>6-6-1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:1998</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_1998_model.htm#rule_misra-c%3A1998_52'>52</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2004</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2004_model.htm#rule_misra-c%3A2004_14.1'>14.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.2.1'>R.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>SEC-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='sec-c_model.htm#rule_sec-c_m1.9.1'>M1.9.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
,&nbsp;<a href='runtime_model.htm'>RUNTIME</a>
,&nbsp;<a href='uml_model.htm'>UML</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_j2' name='standard_j2'><div class='standard'><div>2&nbsp;J</div></div></a><div class='headline'>Unused inspect annotation.</div></div><p>The LDRA_INSPECT annotation can be placed before code which normally causes a standards violation message to be issued, causing the message to be suppressed. This prevents the re-issuing of messages for code which has been checked and found to be acceptable, but still enable LDRA Testbed to flag any other occurrences of that standards violation. </p>
<p>This standard checks that the relevant message has been suppressed.</p>
<p>Further checks on the INSPECTED annotation are performed by <a href='standards.htm#standard_s305'>305 S</a> and <a href='standards.htm#standard_d47'>47 D</a>.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************************
 * Standard 2 J : Unused inspect annotation.
 *******************************************************************/</span>
&nbsp;
UINT_32 j_002 <span class="br0">&#40;</span>BOOL param<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  UINT_32 local_var<span class="sy0">;</span>
&nbsp;
  <span class="kw1">if</span> <span class="br0">&#40;</span>param <span class="sy0">==</span> TRUE <span class="br0">&#41;</span>
  <span class="br0">&#123;</span>
    local_var <span class="sy0">=</span> param<span class="sy0">;</span> 
  <span class="br0">&#125;</span>
  <span class="kw1">else</span>
  <span class="br0">&#123;</span>
    local_var <span class="sy0">=</span> 0U<span class="sy0">;</span>
  <span class="br0">&#125;</span>
  <span class="kw1">return</span> local_var<span class="sy0">;</span>
&nbsp;
  <span class="coMULTI">/*LDRA_INSPECTED 3 J*/</span>      <span class="coMULTI">/* not compliant - 3 J not produced */</span>
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>  <span class="coMULTI">/* produces 1 J */</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2006 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards filter models</div>
<div class='xref filters'><a href='legacy_model.htm'>Legacy</a>
</div>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_j3' name='standard_j3'><div class='standard'><div>3&nbsp;J</div></div></a><div class='headline'>All internal linkage calls unreachable.</div></div><div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*******************************************************
 * Standard 3 J : All internal linkage calls unreachable.
 *******************************************************/</span>
&nbsp;
<span class="kw4">static</span> INT_32 proc<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  <span class="kw1">return</span> <span class="nu0">1</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> j_003 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw1">return</span><span class="sy0">;</span>
  <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>proc<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* unreachable line - procedure proc is not called */</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 *
 * Copyright (c) 2009 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>MISRA-C:2012</td>    <td class='seperator'>:</td>    <td class='target'><a href='misra-c_2012_model.htm#rule_misra-c%3A2012_r.2.1'>R.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_z1' name='standard_z1'><div class='standard'><div>1&nbsp;Z</div></div></a><div class='headline'>File exceeds required size.</div></div><p>Z Standards are only enabled if the appropriate INI flag is set as described in Userstandards.c file in  Userstandards/User_standards_z folder of the Testbed installation directory. This file also enables the user to modify the check to conform to their company standard.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_h1' name='standard_h1'><div class='standard'><div>1&nbsp;H</div></div></a><div class='headline'>Global Variable does not conform to style g_&lt;name&gt;.</div></div><p>Global variables shall prefixed with g_.  </p>
<p>H Standards are only enabled if the appropriate INI flag is set as described in Hstandards.cpp file in  Userstandards/Hungarian_notation_h folder of the Testbed installation directory. This file also enables the user to modify the check to conform to their company standard.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************************
 * Standard 1 H : Global Variable does not conform to style g_&lt;name&gt;.
 *******************************************************************/</span> 
&nbsp;
INT_32 myglobal<span class="sy0">;</span>  <span class="coMULTI">/* not compliant */</span>
&nbsp;
INT_32 g_var1<span class="sy0">;</span>    <span class="coMULTI">/* compliant */</span>
&nbsp;
<span class="kw4">void</span> hungarian_1 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.2.1'>3.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_12.2'>12.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_7.1.j'>7.1.j</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_h2' name='standard_h2'><div class='standard'><div>2&nbsp;H</div></div></a><div class='headline'>Class Member does not conform to style m_&lt;name&gt;.</div></div><p>Class members shall be prefixed with m_.  </p>
<p>H Standards are only enabled if the appropriate INI flag is set as described in Hstandards.cpp file in  Userstandards/Hungarian_notation_h folder of the Testbed installation directory. This file also enables the user to modify the check to conform to their company standard.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************************
 * Standard 2 H : Class Member does not conform to style m_&lt;name&gt;.
 *******************************************************************/</span> 
&nbsp;
class Ch2
<span class="br0">&#123;</span> 
   public<span class="sy0">:</span>
    INT_32 avariable<span class="sy0">;</span>   <span class="coMULTI">/* not compliant */</span>
    INT_32 m_variable<span class="sy0">;</span>  <span class="coMULTI">/* compliant */</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> hungarian_2 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  Ch2 x<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_12.2'>12.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_h3' name='standard_h3'><div class='standard'><div>3&nbsp;H</div></div></a><div class='headline'>Enum Element does not conform to style e_&lt;name&gt;.</div></div><p>Enumeration constants shall be prefixed with e_.  </p>
<p>H Standards are only enabled if the appropriate INI flag is set as described in Hstandards.cpp file in  Userstandards/Hungarian_notation_h folder of the Testbed installation directory. This file also enables the user to modify the check to conform to their company standard.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/********************************************************************
 * Standard 3 H : Enum Element does not conform to style e_&lt;name&gt;.
 *******************************************************************/</span> 
&nbsp;
<span class="kw2">enum</span> EColour  <span class="br0">&#123;</span>e_Red<span class="sy0">,</span>
               blue<span class="sy0">,</span>  <span class="coMULTI">/* not compliant */</span>
               e_white
             <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> hungarian_3 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw2">enum</span> EColour flag<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span></pre></div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_h4' name='standard_h4'><div class='standard'><div>4&nbsp;H</div></div></a><div class='headline'>Class Name does not conform to style C&lt;name&gt;.</div></div><p>Class names shall be prefixed with C.  </p>
<p>H Standards are only enabled if the appropriate INI flag is set as described in Hstandards.cpp file in  Userstandards/Hungarian_notation_h folder of the Testbed installation directory. This file also enables the user to modify the check to conform to their company standard.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************************
 * Standard 4 H : Class Name does not conform to style C&lt;name&gt;.
 *******************************************************************/</span> 
&nbsp;
class one  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span> 
   public<span class="sy0">:</span>
     INT_32 data<span class="sy0">;</span>
<span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw4">void</span> hungarian_4 <span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  one x<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_12.2'>12.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
<div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_h5' name='standard_h5'><div class='standard'><div>5&nbsp;H</div></div></a><div class='headline'>Namespace Name does not conform to style N&lt;name&gt;.</div></div><p>Namespace names shall be prefixed with N.  </p>
<p>H Standards are only enabled if the appropriate INI flag is set as described in Hstandards.cpp file in  Userstandards/Hungarian_notation_h folder of the Testbed installation directory. This file also enables the user to modify the check to conform to their company standard.</p>
<div class='title'>Example</div>
<pre class="code c++"><span class="coMULTI">/********************************************************************
 * Standard 5 H : Namespace Name does not conform to style N&lt;name&gt;.
 *******************************************************************/</span> 
&nbsp;
namespace MySpace1  <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  class CString
  <span class="br0">&#123;</span>
    <span class="co1">// ... </span>
  <span class="br0">&#125;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Language restrictions</div>
<p>This standard is not applicable to c.</p>
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_h6' name='standard_h6'><div class='standard'><div>6&nbsp;H</div></div></a><div class='headline'>Pointer does not conform to style p_&lt;name&gt;.</div></div><p>Variables with a pointer type shall be prefixed with p_.  </p>
<p>H Standards are only enabled if the appropriate INI flag is set as described in Hstandards.cpp file in  Userstandards/Hungarian_notation_h folder of the Testbed installation directory. This file also enables the user to modify the check to conform to their company standard.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/********************************************************************
 * Standard 6 H : Pointer does not conform to style p_&lt;name&gt;.
 *******************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> hungarian_6 <span class="br0">&#40;</span> INT_32 <span class="sy0">*</span>p_x<span class="sy0">,</span>    <span class="coMULTI">/* compliant */</span>
                   INT_32 <span class="sy0">*</span>my_ptr  <span class="coMULTI">/* not compliant */</span>
                 <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_7.1.k'>7.1.k</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_h7' name='standard_h7'><div class='standard'><div>7&nbsp;H</div></div></a><div class='headline'>Enum Name does not conform to style E&lt;name&gt;.</div></div><p>Enumeration tags shall be prefixed with E.  </p>
<p>H Standards are only enabled if the appropriate INI flag is set as described in Hstandards.cpp file in  Userstandards/Hungarian_notation_h folder of the Testbed installation directory. This file also enables the user to modify the check to conform to their company standard.</p>
<div class='title'>Example</div>
<pre class="code c"><span class="coMULTI">/********************************************************************
 * Standard 7 H : Enum Name does not conform to style E&lt;name&gt;.
 *******************************************************************/</span> 
&nbsp;
<span class="kw2">enum</span> Colour  <span class="coMULTI">/* not compliant */</span>
             <span class="br0">&#123;</span>e_red<span class="sy0">,</span>
              e_blue<span class="sy0">,</span>  
              e_white
             <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw2">enum</span> Etraffic<span class="br0">&#123;</span> e_green<span class="sy0">,</span> e_yellow<span class="sy0">,</span> e_red <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
<span class="kw4">void</span> hungarian_7 <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="kw2">enum</span> Colour flag<span class="sy0">;</span>
  <span class="kw2">enum</span> Etraffic light<span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C++</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-cpp_model.htm#rule_fsb582-c%2B%2B_12.2'>12.2</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
<div class='body_block'>
<div class='block_title'><a id='standard_h8' name='standard_h8'><div class='standard'><div>8&nbsp;H</div></div></a><div class='headline'>Global Func Name does not conform to style &lt;file&gt;_&lt;name&gt;.</div></div><p>Global functions shall be prefixed with the source file name.  </p>
<p>H Standards are only enabled if the appropriate INI flag is set as described in Hstandards.cpp file in  Userstandards/Hungarian_notation_h folder of the Testbed installation directory. This file also enables the user to modify the check to conform to their company standard.</p>
<div class='title'>Example</div>
<p>Hungarian_008.c</p>
<pre class="code c"><span class="co2">#include &quot;c_standards.h&quot;</span>
&nbsp;
<span class="coMULTI">/*****************************************************************************
 * Standard 8 H : Global Func Name does not conform to style &lt;file&gt;_&lt;name&gt;.
 *****************************************************************************/</span> 
&nbsp;
<span class="kw4">void</span> Hungarian_nok <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span> <span class="coMULTI">/* not compliant */</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="kw4">void</span> Hungarian_008_ok <span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  <span class="sy0">;</span>
<span class="br0">&#125;</span>
&nbsp;
<span class="coMULTI">/*
 * Copyright (c) 2012 Liverpool Data Research Associates
 *
 */</span></pre><div class='title'>Related standards model rules</div>
<div class='xref'>
  <table>
    <tr>    <td class='from'>FSB582-C</td>    <td class='seperator'>:</td>    <td class='target'><a href='fsb582-c_model.htm#rule_fsb582-c_3.2.1'>3.2.1</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
    <tr>    <td class='from'>NETRINO</td>    <td class='seperator'>:</td>    <td class='target'><a href='netrino_model.htm#rule_netrino_6.1.i'>6.1.i</a></td>    <td class='seperator'>&nbsp;</td>    <td class='modifier'></td>    </tr>
  </table>
</div><!-- xref -->
</div><!-- body_block -->
    </div><!-- body-content -->
    <div class='footer'><p>     &copy; Copyright 2014 LDRA Ltd. All rights reserved.<br />     <span>Version 9.4.4, generated on 25th April 2014 at 08:31:23</span>    </p></div>
  </div><!-- body -->
</body>
</html>
