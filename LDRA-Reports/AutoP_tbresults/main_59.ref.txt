     1F/*
     2FC TESTBED VERSION  : 9.4.4                                                                                               
     3FFILE UNDER TEST  : "F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\src\usr\main.c"               
     4FDATE OF ANALYSIS : Fri Nov 07 10:50:15 2014                          
     5F*/
     6F/******************************************************************************
     7F* FILENAME: dsp_system.c
     8F*
     9F* DESCRIPTION:
    10F* Contain "main" and all other primary functions.
    11F*
    12F* FUNCTIONS:
    13F* void main (void)
    14F*
    15F* NOTES:
    16F* TODO.
    17F*
    18F* REFERENCES:
    19F*
    20F* START DATE: 05 Set 2011
    21F*
    22F* CHANGES :
    23F*
    24F* VERSION DATE WHO DETAIL
    25F* 1.0 05 Set 2011 Rogerio Lima Start-up coding.
    26F* Plínio Pereira
    27F* -----------------------------------------------------------------------------
    28F* 2.0 30 Aug 2014 Rogerio Lima Improving code quality rewriting the
    29F* code and correcting errors.
    30F******************************************************************************/
    31F/*
    32F * SECTION ORDER
    33F * 1. Comment block
    34F * 2. Include statements
    35F * 3. Definitions: data type, constants, macros
    36F * 4. Static data declarations
    37F * 5. Private functions prototypes
    38F * 6. Public function bodies
    39F * 7. Private function bodies
    40F *
    41F */
    42F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_types.h */
    43F//############################################################################
    44F//
    45F// File:         dsp_types.h
    46F// Version:      0.1
    47F//
    48F// Description: Structure and variable definitions.
    49F//
    50F//############################################################################
    51F// Author: Rogério Lima
    52F// Release Date: July 2012
    53F//############################################################################
    54F#ifndef DSP_TYPES_H
    55F#define DSP_TYPES_H
    56F/* These definitions might not be 8-bit wide */
    57F
    58Ftypedef
    59Fsigned char
    60F  int8_t ;
    61F
    62Ftypedef
    63Funsigned char
    64F  uint8_t ;
    65F  /* 7.18.1.1 Exact-width integer types */
    66F
    67Ftypedef
    68Fshort
    69F  int16_t ;
    70F
    71Ftypedef
    72Funsigned short
    73F  uint16_t ;
    74F
    75Ftypedef
    76Flong
    77F  int32_t ;
    78F
    79Ftypedef
    80Funsigned long
    81F  uint32_t ;
    82F       /* DSP_TYPES_H */
    83F 
    84F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_types.h*/
    85F/*   CLOSE_FILE Include File */
    86F 
    87F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_system.h */
    88F/******************************************************************************
    89F* FILENAME: dsp_comm.h
    90F*
    91F* DESCRIPTION:
    92F* Function prototypes of communication peripherals.
    93F*
    94F* FUNCTIONS:
    95F* void xxx
    96F* void xxx
    97F*
    98F* VERSION DATE WHO DETAIL
    99F* 1.0 05 Set 2011 Rogerio Lima Start-up coding.
   100F* Plínio Pereira
   101F* -----------------------------------------------------------------------------
   102F* 2.0 30 Aug 2014 Rogerio Lima Improving code quality rewriting the
   103F* code and correcting errors.
   104F******************************************************************************/
   105F#ifndef DSP_SYSTEM_H
   106F#define DSP_SYSTEM_H
   107F/* Function prototypes */
   108F
   109Fvoid
   110F  gpio_select() ;
   111F
   112Fvoid
   113F  setup_epwm1a() ;
   114F 
   115F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_system.h*/
   116F/*   CLOSE_FILE Include File */
   117F 
   118F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_comm.h */
   119F/******************************************************************************
   120F* FILENAME: dsp_comm.h
   121F*
   122F* DESCRIPTION:
   123F* Function prototypes of communication peripherals.
   124F*
   125F* FUNCTIONS:
   126F* void scia_init (void)
   127F* void spia_init (void)
   128F* void i2ca_init (void)
   129F*
   130F* VERSION DATE WHO DETAIL
   131F* 1.0 05 Set 2011 Rogerio Lima Start-up coding.
   132F* Plínio Pereira
   133F* -----------------------------------------------------------------------------
   134F* 2.0 30 Aug 2014 Rogerio Lima Improving code quality rewriting the
   135F* code and correcting errors.
   136F******************************************************************************/
   137F#ifndef DSP_COMM_H
   138F#define DSP_COMM_H
   139F#define SPI_8BITS
   140F/* Function prototypes */
   141F
   142Fvoid
   143F  scia_init ( void ) ;
   144F
   145Fvoid
   146F  spia_init ( void ) ;
   147F
   148Fvoid
   149F  i2ca_init ( void ) ;
   150F 
   151F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_comm.h*/
   152F/*   CLOSE_FILE Include File */
   153F 
   154F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_sensorhead_types.h */
   155F//############################################################################
   156F//
   157F// File:         dsp_sensorhead_types.h
   158F// Version:      0.1
   159F//
   160F// Description: Structure and variable definitions.
   161F//
   162F//############################################################################
   163F// Author: Rogério Lima
   164F// Release Date: July 2012
   165F//############################################################################
   166F#ifndef DSP_SENSORHEAD_TYPES_H
   167F#define DSP_SENSORHEAD_TYPES_H
   168F/* LDRA REMOVE #include "dsp_types.h" */
   169F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_quat.h */
   170F//############################################################################
   171F//
   172F// File:         EKF_Quat.h
   173F// Version:      0.1
   174F//
   175F// Description: Preprocessor definitions and function declarations for quater-
   176F//       nion calculations.
   177F//
   178F//############################################################################
   179F// Author: Rogério Lima
   180F// Release Date: July 2012
   181F//############################################################################
   182F#ifndef __EKF_quat_h
   183F#define __EKF_quat_h
   184F
   185Ftypedef
   186Fstruct _quat
   187F{
   188F  float a ,
   189F  b ,
   190F  c ,
   191F  d ;
   192F} quat ;
   193F
   194Fint16_t
   195T  quat_mult (
   196F  quat * src1 ,
   197F  quat * src2 ,
   198F  quat * dest ) ;
   199F
   200Fint16_t
   201T  quat_conj (
   202F  quat * src ,
   203F  quat * dest ) ;
   204F
   205Fint16_t
   206T  quat_norm (
   207F  quat * src ) ;
   208F
   209Fint16_t
   210T  quat_add (
   211F  quat * src1 ,
   212F  quat * src2 ,
   213F  quat * dest ) ;
   214F
   215Fint16_t
   216T  quat_subtract (
   217F  quat * src1 ,
   218F  quat * src2 ,
   219F  quat * dest ) ;
   220F
   221Fint16_t
   222T  quat_scalar_mult (
   223F  quat * qsrc ,
   224F  float scalar ,
   225F  quat * dest ) ;
   226F 
   227F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_quat.h*/
   228F/*   CLOSE_FILE Include File */
   229F 
   230F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_matrix.h */
   231F//############################################################################
   232F//
   233F// File: dsp_matrix.h
   234F// Version: 0.1
   235F//
   236F// Description: Preprocessor definitions and function declarations for matrix
   237F// calculations.
   238F//
   239F//############################################################################
   240F// Author: Rogério Lima
   241F// Release Date: July 2012
   242F//############################################################################
   243F#ifndef DSP_MATRIX_H
   244F#define DSP_MATRIX_H
   245F#define MATRIX_MAX_ROWS 12
   246F#define MATRIX_MAX_COLUMNS 12
   247F
   248Ftypedef
   249Fstruct _fMatrix
   250F{
   251F  int rows ;
   252F  int columns ;
   253F  float data [ 12 ] [ 12 ] ;
   254F} fMatrix ;
   255F// Matrix operations
   256F
   257Fint
   258T  mat_add (
   259F  fMatrix * src1 ,
   260F  fMatrix * src2 ,
   261F  fMatrix * dest ) ;
   262F
   263Fint
   264T  mat_mult (
   265F  fMatrix * src1 ,
   266F  fMatrix * src2 ,
   267F  fMatrix * dest ) ;
   268F
   269Fint
   270T  mat_scalar_mult (
   271F  float scalar ,
   272F  fMatrix * src ,
   273F  fMatrix * dest ) ;
   274F
   275Fint
   276T  mat_determinant (
   277F  fMatrix * src ,
   278F  float * det ) ;
   279F
   280Fint
   281T  mat_transpose (
   282F  fMatrix * src ,
   283F  fMatrix * dest ) ;
   284F
   285Fint
   286T  mat_create_identity (
   287F  fMatrix * dest ,
   288F  int rows ,
   289F  int columns ) ;
   290F
   291Fint
   292T  mat_zero (
   293F  fMatrix * dest ,
   294F  int rows ,
   295F  int columns ) ;
   296F
   297Fint
   298T  mat_copy (
   299F  fMatrix * src ,
   300F  fMatrix * dest ) ;
   301F//int mat_print( fMatrix* matrix );
   302F//void hexPrint16( short byte );
   303F 
   304F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_matrix.h*/
   305F/*   CLOSE_FILE Include File */
   306F 
   307F#define SUCCESS ( 1 == 1 )
   308F#define FAIL ( 0 == 1 )
   309F#define MAG_UPDATE 0
   310F#define ACCEL_UPDATE 1
   311F         // Original values
   312F#define ACCEL_VARIANCE 223.59E-4f
   313F#define GYRO_VARIANCE 68.81E-5f
   314F#define GYRO_BIAS_VARIANCE 201.93E-3f
   315F#define MAGNETO_VARIANCE 48.12E-5f
   316F#define GPS_VARIANCE 1.6E-3f
   317F#define QUATERNION_NORM_VARIANCE 1.0E-9f
   318F#define ACCEL_SCALE_FACTOR 0.03830859375f
   319F#define GYRO_SCALE_FACTOR_DEG 0.06956521739f
   320F#define GYRO_SCALE_FACTOR_RAD 0.00121414208f
   321F#define MAG_SCALE_FACTOR 0.00151515151f
   322F#define RAD2DEG 57.2957795130f
   323F#define DEG2RAD 0.01745329251f
   324F#define KM2M 0.27777777778f
   325F//#define       ABS_PRESSURE_SCALE_FACTOR // -> Transfer function
   326F//#define       DIFF_PRESSURE_SCALE_FACTOR // -> Transfer function
   327F/* Structure for holding raw sensor data */
   328F
   329Ftypedef
   330Fstruct sensor_data_raw
   331F{
   332F  int16_t gyro_x ;
   333F  int16_t gyro_y ;
   334F  int16_t gyro_z ;
   335F  int16_t new_gyro_data ;
   336F  int16_t accel_x ;
   337F  int16_t accel_y ;
   338F  int16_t accel_z ;
   339F        // Flag specifies whether there is new accel data in the sensor data structure
   340F  int16_t new_accel_data ;
   341F  int16_t mag_x ;
   342F  int16_t mag_y ;
   343F  int16_t mag_z ;
   344F        // Flag specifies whether there is new magnetometer data in the sensor data structure
   345F  int16_t new_mag_data ;
   346F        // Rate gyro temperature measurement
   347F  int16_t gyro_temperature ;
   348F  int32_t abs_pressure ;
   349F  int16_t new_abs_pressure_data ;
   350F  int16_t diff_pressure ;
   351F  int16_t new_diff_pressure_data ;
   352F} sensor_data_raw_t ;
   353F/* Structure for holding scaled sensor data */
   354F
   355Ftypedef
   356F  struct
   357F  {
   358F    float gyro_x ;
   359F    float gyro_y ;
   360F    float gyro_z ;
   361F    float accel_x ;
   362F    float accel_y ;
   363F    float accel_z ;
   364F    float mag_x ;
   365F    float mag_y ;
   366F    float mag_z ;
   367F    float gyro_temperature ;
   368F    float abs_pressure ;
   369F    float baro_altitude ;
   370F    float diff_pressure ;
   371F    float airspeed ;
   372F        /* GPS data */
   373F        /* Latitude */
   374F    int16_t gps_lat_deg ;
   375F    uint32_t gps_lat_min ;
   376F    uint8_t gps_lat_sector ;
   377F        /* Longitude */
   378F    int16_t gps_lon_deg ;
   379F    uint32_t gps_lon_min ;
   380F    uint8_t gps_lon_sector ;
   381F        /* Altitude */
   382F    int32_t gps_alt ;
   383F        /* Speed */
   384F    int32_t gps_speed ;
   385F    int32_t gps_course ;
   386F        /* Time */
   387F    uint16_t gps_hour ;
   388F    uint16_t gps_min ;
   389F    float gps_sec ;
   390F        // Status
   391F    uint16_t gps_position_fix_status ;
   392F    uint16_t gps_no_sv ;
   393F    float gps_hdop ;
   394F    uint16_t gps_new_message ;
   395F  } sensor_data_scaled_t ;
   396F// Structure for storing AHRS states and other data related to state computation
   397F// This structure is, in a way, redundant because all this data is also stored in the
   398F// UM6_config or UM6_data structures. However, in the config and data strucutres, the
   399F// data is packaged as UInt32 entries into an array for convenience with communication.
   400F// To use the data as floats, special formatting is required. This structure provides
   401F// a place to store that data in the expected format, which makes accessing it easier.
   402F
   403Ftypedef
   404F  struct
   405F  {
   406F        /* Attitude states */
   407F    float psi ;
   408F    float theta ;
   409F    float phi ;
   410F        /* Angle rate states */
   411F    float psi_dot ;
   412F    float theta_dot ;
   413F    float phi_dot ;
   414F        /* Quaternion states "qib" = Quaternion from Inertial to Body */
   415F    quat qib ;
   416F    quat quat_debug ;
   417F        /* Gyro biases */
   418F    float bias_p ;
   419F    float bias_q ;
   420F    float bias_r ;
   421F        /* Accelerometer biases */
   422F    float bias_accel_x ;
   423F    float bias_accel_y ;
   424F    float bias_accel_z ;
   425F        /* Magnetometer biases */
   426F    float bias_mag_x ;
   427F    float bias_mag_y ;
   428F    float bias_mag_z ;
   429F        /* State Transition Matrix (jacobian of system matrix 'f') */
   430F    fMatrix jac_f ;
   431F        /* Linearized measurement equation (jacobian of output equation 'h') */
   432F    fMatrix jac_h ;
   433F        /* Measurement noise matrix */
   434F    fMatrix R ;
   435F        /* Auxiliary construction measurement matrix for phi and theta angles. */
   436F    fMatrix R_phi_theta ;
   437F        /* Auxiliary construction measurement matrix for psi angle. */
   438F    fMatrix R_psi ;
   439F        /* Process noise matrix */
   440F    fMatrix Q ;
   441F        /* Accelerometer alignment matrix */
   442F    fMatrix accel_align_mat ;
   443F        /* Gyro alignment matrix */
   444F    fMatrix gyro_align_mat ;
   445F        /* Magnetometer calibration matrix */
   446F    fMatrix mag_align_mat ;
   447F        // Error covariance matrix
   448F    fMatrix P ;
   449F        /* Magnetic field reference vector */
   450F    float mag_ref_x ;
   451F    float mag_ref_y ;
   452F    float mag_ref_z ;
   453F        /* Accelerometer reference vector */
   454F    float accel_ref_x ;
   455F    float accel_ref_y ;
   456F    float accel_ref_z ;
   457F        /* Accelerometer variance */
   458F    float accel_var ;
   459F        /* Gyrometer variance */
   460F    float gyro_var ;
   461F        /* Gyro bias variance */
   462F    float gyro_bias_var ;
   463F        /* Magnetometer variance */
   464F    float mag_var ;
   465F        /* GPS velocity variance */
   466F    float gps_var ;
   467F    float U ;
   468F    float V ;
   469F    float W ;
   470F    float U_ant ;
   471F    float V_ant ;
   472F    float W_ant ;
   473F    float U_dot ;
   474F    float V_dot ;
   475F    float W_dot ;
   476F    float temperature ;
   477F        // Time sampling
   478F    float Ts ;    // In seconds
   479F    float debug_misc [ 5 ] ;
   480F        // GPS stuffs
   481F    float GPS_north ;    // In meters
   482F    float GPS_east ;
   483F    float GPS_h ;
   484F    float GPS_h_ant ;
   485F    float GPS_speed ;    // In m/s
   486F    float GPS_speed_ant ;    // past speed
   487F    float GPS_heading ;    // In m/s
   488F    float GPS_Ts ;
   489F    float GPS_lat_home ;
   490F    float GPS_lon_home ;
   491F    float GPS_alt_home ;
   492F  } ahrs_states_t ;
   493F// Structure for holding raw sensor data
   494F
   495Ftypedef
   496F  struct
   497F  {
   498F        // input
   499F    float xk [ 9 ] ;
   500F    float xk_1 [ 9 ] ;
   501F    float xk_2 [ 9 ] ;
   502F        // output
   503F    float yk [ 9 ] ;
   504F    float yk_1 [ 9 ] ;
   505F    float yk_2 [ 9 ] ;
   506F    float a [ 5 ] ; // denominator coefficient
   507F    float b [ 5 ] ; // numerator coefficient
   508F  } digital_filter_data_t ;
   509F
   510Fvoid
   511T  compute_euler_angles (
   512F  ahrs_states_t * estimated_states ) ;
   513F
   514Fvoid
   515T  unroll_states (
   516F  ahrs_states_t * states ) ;
   517F 
   518F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_sensorhead_types.h*/
   519F/*   CLOSE_FILE Include File */
   520F 
   521F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_conversions.h */
   522F/******************************************************************************
   523F* FILENAME:
   524F*
   525F* DESCRIPTION:
   526F* Function prototypes of communication peripherals.
   527F*
   528F* FUNCTIONS:
   529F* void xxx
   530F* void xxx
   531F*
   532F* VERSION DATE WHO DETAIL
   533F* 1.0 05 Set 2011 Rogerio Lima Start-up coding.
   534F* Plínio Pereira
   535F* -----------------------------------------------------------------------------
   536F* 2.0 30 Aug 2014 Rogerio Lima Improving code quality rewriting the
   537F* code and correcting errors.
   538F******************************************************************************/
   539F#ifndef DSP_CONVERSIONS_H
   540F#define DSP_CONVERSIONS_H
   541F
   542Fvoid
   543T  apply_sensors_scale_factor (
   544F  sensor_data_scaled_t * scaled_data ,
   545F  sensor_data_raw_t * raw_data ) ;
   546F
   547Fvoid
   548T  compute_euler_angles (
   549F  ahrs_states_t * estimated_states ) ;
   550F 
   551F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_conversions.h*/
   552F/*   CLOSE_FILE Include File */
   553F 
   554F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\Application_Control_Variables.h */
   555F#ifndef APPLICATION_CONTROL_VARIABLES_H
   556F#define APPLICATION_CONTROL_VARIABLES_H
   557F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Device.h */
   558F// TI File $Revision: /main/5 $
   559F// Checkin $Date: January 22, 2008 16:55:35 $
   560F//###########################################################################
   561F//
   562F// FILE: DSP2833x_Device.h
   563F//
   564F// TITLE: DSP2833x Device Definitions.
   565F//
   566F//###########################################################################
   567F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   568F// $Release Date: August 4, 2009 $
   569F//###########################################################################
   570F#ifndef DSP2833x_DEVICE_H
   571F#define DSP2833x_DEVICE_H
   572F#define TARGET 1
   573F//---------------------------------------------------------------------------
   574F// User To Select Target Device:
   575F#define DSP28_28335 TARGET
   576F#define DSP28_28334 0
   577F#define DSP28_28332 0
   578F//---------------------------------------------------------------------------
   579F// Common CPU Definitions:
   580F//
   581F
   582Fextern cregister volatile unsigned int
   583F  IFR ;
   584F
   585Fextern cregister volatile unsigned int
   586F  IER ;
   587F#define EINT asm (" clrc INTM")
   588F#define DINT asm (" setc INTM")
   589F#define ERTM asm (" clrc DBGM")
   590F#define DRTM asm (" setc DBGM")
   591F#define EALLOW asm (" EALLOW")
   592F#define EDIS asm (" EDIS")
   593F#define ESTOP0 asm (" ESTOP0")
   594F#define M_INT1 0x0001
   595F#define M_INT2 0x0002
   596F#define M_INT3 0x0004
   597F#define M_INT4 0x0008
   598F#define M_INT5 0x0010
   599F#define M_INT6 0x0020
   600F#define M_INT7 0x0040
   601F#define M_INT8 0x0080
   602F#define M_INT9 0x0100
   603F#define M_INT10 0x0200
   604F#define M_INT11 0x0400
   605F#define M_INT12 0x0800
   606F#define M_INT13 0x1000
   607F#define M_INT14 0x2000
   608F#define M_DLOG 0x4000
   609F#define M_RTOS 0x8000
   610F#define BIT0 0x0001
   611F#define BIT1 0x0002
   612F#define BIT2 0x0004
   613F#define BIT3 0x0008
   614F#define BIT4 0x0010
   615F#define BIT5 0x0020
   616F#define BIT6 0x0040
   617F#define BIT7 0x0080
   618F#define BIT8 0x0100
   619F#define BIT9 0x0200
   620F#define BIT10 0x0400
   621F#define BIT11 0x0800
   622F#define BIT12 0x1000
   623F#define BIT13 0x2000
   624F#define BIT14 0x4000
   625F#define BIT15 0x8000
   626F//---------------------------------------------------------------------------
   627F// For Portability, User Is Recommended To Use Following Data Type Size
   628F// Definitions For 16-bit and 32-Bit Signed/Unsigned Integers:
   629F//
   630F#define DSP28_DATA_TYPES
   631F
   632Ftypedef
   633Fchar
   634F  int8 ;
   635F
   636Ftypedef
   637Fint
   638F  int16 ;
   639F
   640Ftypedef
   641Flong
   642F  int32 ;
   643F
   644Ftypedef
   645Flong long
   646F  int64 ;
   647F
   648Ftypedef
   649Funsigned char
   650F  Uint8 ;
   651F
   652Ftypedef
   653Funsigned int
   654F  Uint16 ;
   655F
   656Ftypedef
   657Funsigned long
   658F  Uint32 ;
   659F
   660Ftypedef
   661Funsigned long long
   662F  Uint64 ;
   663F
   664Ftypedef
   665Ffloat
   666F  float32 ;
   667F
   668Ftypedef
   669Flong double
   670F  float64 ;
   671F//---------------------------------------------------------------------------
   672F// Include All Peripheral Header Files:
   673F//
   674F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Adc.h */
   675F// TI File $Revision: /main/1 $
   676F// Checkin $Date: August 18, 2006 13:51:50 $
   677F//###########################################################################
   678F//
   679F// FILE: DSP2833x_Adc.h
   680F//
   681F// TITLE: DSP2833x Device ADC Register Definitions.
   682F//
   683F//###########################################################################
   684F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   685F// $Release Date: August 4, 2009 $
   686F//###########################################################################
   687F#ifndef DSP2833x_ADC_H
   688F#define DSP2833x_ADC_H
   689F//---------------------------------------------------------------------------
   690F// ADC Individual Register Bit Definitions:
   691F
   692Fstruct ADCTRL1_BITS
   693F{                     // bits description
   694F  Uint16 rsvd1 : 4 ;// 3:0 reserved
   695F  Uint16 SEQ_CASC : 1 ;// 4 Cascaded sequencer mode
   696F  Uint16 SEQ_OVRD : 1 ;// 5 Sequencer override
   697F  Uint16 CONT_RUN : 1 ;// 6 Continuous run
   698F  Uint16 CPS : 1 ;// 7 ADC core clock pre-scalar
   699F  Uint16 ACQ_PS : 4 ;// 11:8 Acquisition window size
   700F  Uint16 SUSMOD : 2 ;// 13:12 Emulation suspend mode
   701F  Uint16 RESET : 1 ;// 14 ADC reset
   702F  Uint16 rsvd2 : 1 ;// 15 reserved
   703F} ;
   704F
   705Funion ADCTRL1_REG
   706F{
   707F  Uint16 all ;
   708F  struct ADCTRL1_BITS bit ;
   709F} ;
   710F
   711Fstruct ADCTRL2_BITS
   712F{                     // bits description
   713F  Uint16 EPWM_SOCB_SEQ2 : 1 ;// 0 EPWM compare B SOC mask for SEQ2
   714F  Uint16 rsvd1 : 1 ;// 1 reserved
   715F  Uint16 INT_MOD_SEQ2 : 1 ;// 2 SEQ2 Interrupt mode
   716F  Uint16 INT_ENA_SEQ2 : 1 ;// 3 SEQ2 Interrupt enable
   717F  Uint16 rsvd2 : 1 ;// 4 reserved
   718F  Uint16 SOC_SEQ2 : 1 ;// 5 Start of conversion for SEQ2
   719F  Uint16 RST_SEQ2 : 1 ;// 6 Reset SEQ2
   720F  Uint16 EXT_SOC_SEQ1 : 1 ;// 7 External start of conversion for SEQ1
   721F  Uint16 EPWM_SOCA_SEQ1 : 1 ;// 8 EPWM compare B SOC mask for SEQ1
   722F  Uint16 rsvd3 : 1 ;// 9 reserved
   723F  Uint16 INT_MOD_SEQ1 : 1 ;// 10 SEQ1 Interrupt mode
   724F  Uint16 INT_ENA_SEQ1 : 1 ;// 11 SEQ1 Interrupt enable
   725F  Uint16 rsvd4 : 1 ;// 12 reserved
   726F  Uint16 SOC_SEQ1 : 1 ;// 13 Start of conversion trigger for SEQ1
   727F  Uint16 RST_SEQ1 : 1 ;// 14 Restart sequencer 1
   728F  Uint16 EPWM_SOCB_SEQ : 1 ;// 15 EPWM compare B SOC enable
   729F} ;
   730F
   731Funion ADCTRL2_REG
   732F{
   733F  Uint16 all ;
   734F  struct ADCTRL2_BITS bit ;
   735F} ;
   736F
   737Fstruct ADCASEQSR_BITS
   738F{                       // bits description
   739F  Uint16 SEQ1_STATE : 4 ;// 3:0 SEQ1 state
   740F  Uint16 SEQ2_STATE : 3 ;// 6:4 SEQ2 state
   741F  Uint16 rsvd1 : 1 ;// 7 reserved
   742F  Uint16 SEQ_CNTR : 4 ;// 11:8 Sequencing counter status
   743F  Uint16 rsvd2 : 4 ;// 15:12 reserved
   744F} ;
   745F
   746Funion ADCASEQSR_REG
   747F{
   748F  Uint16 all ;
   749F  struct ADCASEQSR_BITS bit ;
   750F} ;
   751F
   752Fstruct ADCMAXCONV_BITS
   753F{                        // bits description
   754F  Uint16 MAX_CONV1 : 4 ;// 3:0 Max number of conversions
   755F  Uint16 MAX_CONV2 : 3 ;// 6:4 Max number of conversions
   756F  Uint16 rsvd1 : 9 ;// 15:7 reserved
   757F} ;
   758F
   759Funion ADCMAXCONV_REG
   760F{
   761F  Uint16 all ;
   762F  struct ADCMAXCONV_BITS bit ;
   763F} ;
   764F
   765Fstruct ADCCHSELSEQ1_BITS
   766F{                          // bits description
   767F  Uint16 CONV00 : 4 ;// 3:0 Conversion selection 00
   768F  Uint16 CONV01 : 4 ;// 7:4 Conversion selection 01
   769F  Uint16 CONV02 : 4 ;// 11:8 Conversion selection 02
   770F  Uint16 CONV03 : 4 ;// 15:12 Conversion selection 03
   771F} ;
   772F
   773Funion ADCCHSELSEQ1_REG
   774F{
   775F  Uint16 all ;
   776F  struct ADCCHSELSEQ1_BITS bit ;
   777F} ;
   778F
   779Fstruct ADCCHSELSEQ2_BITS
   780F{                          // bits description
   781F  Uint16 CONV04 : 4 ;// 3:0 Conversion selection 04
   782F  Uint16 CONV05 : 4 ;// 7:4 Conversion selection 05
   783F  Uint16 CONV06 : 4 ;// 11:8 Conversion selection 06
   784F  Uint16 CONV07 : 4 ;// 15:12 Conversion selection 07
   785F} ;
   786F
   787Funion ADCCHSELSEQ2_REG
   788F{
   789F  Uint16 all ;
   790F  struct ADCCHSELSEQ2_BITS bit ;
   791F} ;
   792F
   793Fstruct ADCCHSELSEQ3_BITS
   794F{                          // bits description
   795F  Uint16 CONV08 : 4 ;// 3:0 Conversion selection 08
   796F  Uint16 CONV09 : 4 ;// 7:4 Conversion selection 09
   797F  Uint16 CONV10 : 4 ;// 11:8 Conversion selection 10
   798F  Uint16 CONV11 : 4 ;// 15:12 Conversion selection 11
   799F} ;
   800F
   801Funion ADCCHSELSEQ3_REG
   802F{
   803F  Uint16 all ;
   804F  struct ADCCHSELSEQ3_BITS bit ;
   805F} ;
   806F
   807Fstruct ADCCHSELSEQ4_BITS
   808F{                          // bits description
   809F  Uint16 CONV12 : 4 ;// 3:0 Conversion selection 12
   810F  Uint16 CONV13 : 4 ;// 7:4 Conversion selection 13
   811F  Uint16 CONV14 : 4 ;// 11:8 Conversion selection 14
   812F  Uint16 CONV15 : 4 ;// 15:12 Conversion selection 15
   813F} ;
   814F
   815Funion ADCCHSELSEQ4_REG
   816F{
   817F  Uint16 all ;
   818F  struct ADCCHSELSEQ4_BITS bit ;
   819F} ;
   820F
   821Fstruct ADCTRL3_BITS
   822F{                     // bits description
   823F  Uint16 SMODE_SEL : 1 ;// 0 Sampling mode select
   824F  Uint16 ADCCLKPS : 4 ;// 4:1 ADC core clock divider
   825F  Uint16 ADCPWDN : 1 ;// 5 ADC powerdown
   826F  Uint16 ADCBGRFDN : 2 ;// 7:6 ADC bandgap/ref power down
   827F  Uint16 rsvd1 : 8 ;// 15:8 reserved
   828F} ;
   829F
   830Funion ADCTRL3_REG
   831F{
   832F  Uint16 all ;
   833F  struct ADCTRL3_BITS bit ;
   834F} ;
   835F
   836Fstruct ADCST_BITS
   837F{                   // bits description
   838F  Uint16 INT_SEQ1 : 1 ;// 0 SEQ1 Interrupt flag
   839F  Uint16 INT_SEQ2 : 1 ;// 1 SEQ2 Interrupt flag
   840F  Uint16 SEQ1_BSY : 1 ;// 2 SEQ1 busy status
   841F  Uint16 SEQ2_BSY : 1 ;// 3 SEQ2 busy status
   842F  Uint16 INT_SEQ1_CLR : 1 ;// 4 SEQ1 Interrupt clear
   843F  Uint16 INT_SEQ2_CLR : 1 ;// 5 SEQ2 Interrupt clear
   844F  Uint16 EOS_BUF1 : 1 ;// 6 End of sequence buffer1
   845F  Uint16 EOS_BUF2 : 1 ;// 7 End of sequence buffer2
   846F  Uint16 rsvd1 : 8 ;// 15:8 reserved
   847F} ;
   848F
   849Funion ADCST_REG
   850F{
   851F  Uint16 all ;
   852F  struct ADCST_BITS bit ;
   853F} ;
   854F
   855Fstruct ADCREFSEL_BITS
   856F{                       // bits description
   857F  Uint16 rsvd1 : 14 ;    // 13:0 reserved
   858F  Uint16 REF_SEL : 2 ;    // 15:14 Reference select
   859F} ;
   860F
   861Funion ADCREFSEL_REG
   862F{
   863F  Uint16 all ;
   864F  struct ADCREFSEL_BITS bit ;
   865F} ;
   866F
   867Fstruct ADCOFFTRIM_BITS
   868F{                       // bits description
   869F  int16 OFFSET_TRIM : 9 ;    // 8:0 Offset Trim
   870F  Uint16 rsvd1 : 7 ;    // 15:9 reserved
   871F} ;
   872F
   873Funion ADCOFFTRIM_REG
   874F{
   875F  Uint16 all ;
   876F  struct ADCOFFTRIM_BITS bit ;
   877F} ;
   878F
   879Fstruct ADC_REGS
   880F{
   881F  union ADCTRL1_REG ADCTRL1 ;  // ADC Control 1
   882F  union ADCTRL2_REG ADCTRL2 ;  // ADC Control 2
   883F  union ADCMAXCONV_REG ADCMAXCONV ;  // Max conversions
   884F  union ADCCHSELSEQ1_REG ADCCHSELSEQ1 ;  // Channel select sequencing control 1
   885F  union ADCCHSELSEQ2_REG ADCCHSELSEQ2 ;  // Channel select sequencing control 2
   886F  union ADCCHSELSEQ3_REG ADCCHSELSEQ3 ;  // Channel select sequencing control 3
   887F  union ADCCHSELSEQ4_REG ADCCHSELSEQ4 ;  // Channel select sequencing control 4
   888F  union ADCASEQSR_REG ADCASEQSR ;  // Autosequence status register
   889F  Uint16 ADCRESULT0 ;  // Conversion Result Buffer 0
   890F  Uint16 ADCRESULT1 ;  // Conversion Result Buffer 1
   891F  Uint16 ADCRESULT2 ;  // Conversion Result Buffer 2
   892F  Uint16 ADCRESULT3 ;  // Conversion Result Buffer 3
   893F  Uint16 ADCRESULT4 ;  // Conversion Result Buffer 4
   894F  Uint16 ADCRESULT5 ;  // Conversion Result Buffer 5
   895F  Uint16 ADCRESULT6 ;  // Conversion Result Buffer 6
   896F  Uint16 ADCRESULT7 ;  // Conversion Result Buffer 7
   897F  Uint16 ADCRESULT8 ;  // Conversion Result Buffer 8
   898F  Uint16 ADCRESULT9 ;  // Conversion Result Buffer 9
   899F  Uint16 ADCRESULT10 ;  // Conversion Result Buffer 10
   900F  Uint16 ADCRESULT11 ;  // Conversion Result Buffer 11
   901F  Uint16 ADCRESULT12 ;  // Conversion Result Buffer 12
   902F  Uint16 ADCRESULT13 ;  // Conversion Result Buffer 13
   903F  Uint16 ADCRESULT14 ;  // Conversion Result Buffer 14
   904F  Uint16 ADCRESULT15 ;  // Conversion Result Buffer 15
   905F  union ADCTRL3_REG ADCTRL3 ;  // ADC Control 3
   906F  union ADCST_REG ADCST ;  // ADC Status Register
   907F  Uint16 rsvd1 ;
   908F  Uint16 rsvd2 ;
   909F  union ADCREFSEL_REG ADCREFSEL ;  // Reference Select Register
   910F  union ADCOFFTRIM_REG ADCOFFTRIM ;  // Offset Trim Register
   911F} ;
   912F
   913Fstruct ADC_RESULT_MIRROR_REGS
   914F{
   915F  Uint16 ADCRESULT0 ;  // Conversion Result Buffer 0
   916F  Uint16 ADCRESULT1 ;  // Conversion Result Buffer 1
   917F  Uint16 ADCRESULT2 ;  // Conversion Result Buffer 2
   918F  Uint16 ADCRESULT3 ;  // Conversion Result Buffer 3
   919F  Uint16 ADCRESULT4 ;  // Conversion Result Buffer 4
   920F  Uint16 ADCRESULT5 ;  // Conversion Result Buffer 5
   921F  Uint16 ADCRESULT6 ;  // Conversion Result Buffer 6
   922F  Uint16 ADCRESULT7 ;  // Conversion Result Buffer 7
   923F  Uint16 ADCRESULT8 ;  // Conversion Result Buffer 8
   924F  Uint16 ADCRESULT9 ;  // Conversion Result Buffer 9
   925F  Uint16 ADCRESULT10 ;  // Conversion Result Buffer 10
   926F  Uint16 ADCRESULT11 ;  // Conversion Result Buffer 11
   927F  Uint16 ADCRESULT12 ;  // Conversion Result Buffer 12
   928F  Uint16 ADCRESULT13 ;  // Conversion Result Buffer 13
   929F  Uint16 ADCRESULT14 ;  // Conversion Result Buffer 14
   930F  Uint16 ADCRESULT15 ;  // Conversion Result Buffer 15
   931F} ;
   932F//---------------------------------------------------------------------------
   933F// ADC External References & Function Declarations:
   934F//
   935F
   936Fextern volatile struct ADC_REGS
   937F  AdcRegs ;
   938F
   939Fextern volatile struct ADC_RESULT_MIRROR_REGS
   940F  AdcMirror ;
   941F       /* extern "C" */
   942F       // end of DSP2833x_ADC_H definition
   943F//===========================================================================
   944F// End of file.
   945F//===========================================================================
   946F 
   947F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Adc.h*/
   948F/*   CLOSE_FILE Include File */
   949F 
   950F                // ADC Registers
   951F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DevEmu.h */
   952F// TI File $Revision: /main/4 $
   953F// Checkin $Date: April 15, 2009 10:05:17 $
   954F//###########################################################################
   955F//
   956F// FILE: DSP2833x_DevEmu.h
   957F//
   958F// TITLE: DSP2833x Device Emulation Register Definitions.
   959F//
   960F//###########################################################################
   961F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   962F// $Release Date: August 4, 2009 $
   963F//###########################################################################
   964F#ifndef DSP2833x_DEV_EMU_H
   965F#define DSP2833x_DEV_EMU_H
   966F//---------------------------------------------------------------------------
   967F// Device Emulation Register Bit Definitions:
   968F//
   969F// Device Configuration Register Bit Definitions
   970F
   971Fstruct DEVICECNF_BITS
   972F{                       // bits description
   973F  Uint16 rsvd1 : 3 ;
   974F                   // 2:0 reserved
   975F  Uint16 VMAPS : 1 ;
   976F                   // 3 VMAP Status
   977F  Uint16 rsvd2 : 1 ;
   978F                   // 4 reserved
   979F  Uint16 XRSn : 1 ;
   980F                  // 5 XRSn Signal Status
   981F  Uint16 rsvd3 : 10 ;
   982F                    // 15:6
   983F  Uint16 rsvd4 : 3 ;
   984F                   // 18:16
   985F  Uint16 ENPROT : 1 ;
   986F                    // 19 Enable/Disable pipeline protection
   987F  Uint16 rsvd5 : 7 ;
   988F                   // 26:20 reserved
   989F  Uint16 TRSTN : 1 ;
   990F                   // 27 Status of TRSTn signal
   991F  Uint16 rsvd6 : 4 ;
   992F                   // 31:28 reserved
   993F} ;
   994F
   995Funion DEVICECNF_REG
   996F{
   997F  Uint32 all ;
   998F  struct DEVICECNF_BITS bit ;
   999F} ;
  1000F// CLASSID
  1001F
  1002Fstruct CLASSID_BITS
  1003F{                     // bits description
  1004F  Uint16 CLASSNO : 8 ;
  1005F                     // 7:0 Class Number
  1006F  Uint16 PARTTYPE : 8 ;
  1007F                      // 15:8 Part Type
  1008F} ;
  1009F
  1010Funion CLASSID_REG
  1011F{
  1012F  Uint16 all ;
  1013F  struct CLASSID_BITS bit ;
  1014F} ;
  1015F
  1016Fstruct DEV_EMU_REGS
  1017F{
  1018F  union DEVICECNF_REG DEVICECNF ; // device configuration
  1019F  union CLASSID_REG CLASSID ; // Class ID
  1020F  Uint16 REVID ; // Device ID
  1021F  Uint16 PROTSTART ; // Write-Read protection start
  1022F  Uint16 PROTRANGE ; // Write-Read protection range
  1023F  Uint16 rsvd2 [ 202 ] ;
  1024F} ;
  1025F// PARTID
  1026F
  1027Fstruct PARTID_BITS
  1028F{                    // bits description
  1029F  Uint16 PARTNO : 8 ;
  1030F                    // 7:0 Part Number
  1031F  Uint16 PARTTYPE : 8 ;
  1032F                      // 15:8 Part Type
  1033F} ;
  1034F
  1035Funion PARTID_REG
  1036F{
  1037F  Uint16 all ;
  1038F  struct PARTID_BITS bit ;
  1039F} ;
  1040F
  1041Fstruct PARTID_REGS
  1042F{
  1043F  union PARTID_REG PARTID ; // Part ID
  1044F} ;
  1045F//---------------------------------------------------------------------------
  1046F// Device Emulation Register References & Function Declarations:
  1047F//
  1048F
  1049Fextern volatile struct DEV_EMU_REGS
  1050F  DevEmuRegs ;
  1051F
  1052Fextern volatile struct PARTID_REGS
  1053F  PartIdRegs ;
  1054F       /* extern "C" */
  1055F       // end of DSP2833x_DEV_EMU_H definition
  1056F//===========================================================================
  1057F// End of file.
  1058F//===========================================================================
  1059F 
  1060F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DevEmu.h*/
  1061F/*   CLOSE_FILE Include File */
  1062F 
  1063F             // Device Emulation Registers
  1064F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_CpuTimers.h */
  1065F// TI File $Revision: /main/4 $
  1066F// Checkin $Date: March 20, 2007 15:33:42 $
  1067F//###########################################################################
  1068F//
  1069F// FILE: DSP2833x_CpuTimers.h
  1070F//
  1071F// TITLE: DSP2833x CPU 32-bit Timers Register Definitions.
  1072F//
  1073F// NOTES: CpuTimer1 and CpuTimer2 are reserved for use with DSP BIOS and
  1074F// other realtime operating systems.
  1075F//
  1076F// Do not use these two timers in your application if you ever plan
  1077F// on integrating DSP-BIOS or another realtime OS.
  1078F//
  1079F// For this reason, comment out the code to manipulate these two timers
  1080F// if using DSP-BIOS or another realtime OS.
  1081F//
  1082F//###########################################################################
  1083F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  1084F// $Release Date: August 4, 2009 $
  1085F//###########################################################################
  1086F#ifndef DSP2833x_CPU_TIMERS_H
  1087F#define DSP2833x_CPU_TIMERS_H
  1088F//---------------------------------------------------------------------------
  1089F// CPU Timer Register Bit Definitions:
  1090F//
  1091F//
  1092F// TCR: Control register bit definitions:
  1093F
  1094Fstruct TCR_BITS
  1095F{                 // bits description
  1096F  Uint16 rsvd1 : 4 ;
  1097F                   // 3:0 reserved
  1098F  Uint16 TSS : 1 ;
  1099F                 // 4 Timer Start/Stop
  1100F  Uint16 TRB : 1 ;
  1101F                 // 5 Timer reload
  1102F  Uint16 rsvd2 : 4 ;
  1103F                   // 9:6 reserved
  1104F  Uint16 SOFT : 1 ;
  1105F                  // 10 Emulation modes
  1106F  Uint16 FREE : 1 ;
  1107F                  // 11
  1108F  Uint16 rsvd3 : 2 ;
  1109F                   // 12:13 reserved
  1110F  Uint16 TIE : 1 ;
  1111F                 // 14 Output enable
  1112F  Uint16 TIF : 1 ;
  1113F                 // 15 Interrupt flag
  1114F} ;
  1115F
  1116Funion TCR_REG
  1117F{
  1118F  Uint16 all ;
  1119F  struct TCR_BITS bit ;
  1120F} ;
  1121F// TPR: Pre-scale low bit definitions:
  1122F
  1123Fstruct TPR_BITS
  1124F{                 // bits description
  1125F  Uint16 TDDR : 8 ;
  1126F                  // 7:0 Divide-down low
  1127F  Uint16 PSC : 8 ;
  1128F                 // 15:8 Prescale counter low
  1129F} ;
  1130F
  1131Funion TPR_REG
  1132F{
  1133F  Uint16 all ;
  1134F  struct TPR_BITS bit ;
  1135F} ;
  1136F// TPRH: Pre-scale high bit definitions:
  1137F
  1138Fstruct TPRH_BITS
  1139F{                  // bits description
  1140F  Uint16 TDDRH : 8 ;
  1141F                   // 7:0 Divide-down high
  1142F  Uint16 PSCH : 8 ;
  1143F                  // 15:8 Prescale counter high
  1144F} ;
  1145F
  1146Funion TPRH_REG
  1147F{
  1148F  Uint16 all ;
  1149F  struct TPRH_BITS bit ;
  1150F} ;
  1151F// TIM, TIMH: Timer register definitions:
  1152F
  1153Fstruct TIM_REG
  1154F{
  1155F  Uint16 LSW ;
  1156F  Uint16 MSW ;
  1157F} ;
  1158F
  1159Funion TIM_GROUP
  1160F{
  1161F  Uint32 all ;
  1162F  struct TIM_REG half ;
  1163F} ;
  1164F// PRD, PRDH: Period register definitions:
  1165F
  1166Fstruct PRD_REG
  1167F{
  1168F  Uint16 LSW ;
  1169F  Uint16 MSW ;
  1170F} ;
  1171F
  1172Funion PRD_GROUP
  1173F{
  1174F  Uint32 all ;
  1175F  struct PRD_REG half ;
  1176F} ;
  1177F//---------------------------------------------------------------------------
  1178F// CPU Timer Register File:
  1179F//
  1180F
  1181Fstruct CPUTIMER_REGS
  1182F{
  1183F  union TIM_GROUP TIM ; // Timer counter register
  1184F  union PRD_GROUP PRD ; // Period register
  1185F  union TCR_REG TCR ; // Timer control register
  1186F  Uint16 rsvd1 ; // reserved
  1187F  union TPR_REG TPR ; // Timer pre-scale low
  1188F  union TPRH_REG TPRH ; // Timer pre-scale high
  1189F} ;
  1190F//---------------------------------------------------------------------------
  1191F// CPU Timer Support Variables:
  1192F//
  1193F
  1194Fstruct CPUTIMER_VARS
  1195F{
  1196F  volatile struct CPUTIMER_REGS * RegsAddr ;
  1197F  Uint32 InterruptCount ;
  1198F  float CPUFreqInMHz ;
  1199F  float PeriodInUSec ;
  1200F} ;
  1201F//---------------------------------------------------------------------------
  1202F// Function prototypes and external definitions:
  1203F//
  1204F
  1205Fvoid
  1206F  InitCpuTimers ( void ) ;
  1207F
  1208Fvoid
  1209T  ConfigCpuTimer (
  1210F  struct CPUTIMER_VARS * Timer ,
  1211F  float Freq ,
  1212F  float Period ) ;
  1213F
  1214Fextern volatile struct CPUTIMER_REGS
  1215F  CpuTimer0Regs ;
  1216F
  1217Fextern struct CPUTIMER_VARS
  1218F  CpuTimer0 ;
  1219F// CpuTimer 1 and CpuTimer2 are reserved for DSP BIOS & other RTOS. Comment out CpuTimer1 and CpuTimer2 if using DSP BIOS or other RTOS
  1220F
  1221Fextern volatile struct CPUTIMER_REGS
  1222F  CpuTimer1Regs ;
  1223F
  1224Fextern volatile struct CPUTIMER_REGS
  1225F  CpuTimer2Regs ;
  1226F
  1227Fextern struct CPUTIMER_VARS
  1228F  CpuTimer1 ;
  1229F
  1230Fextern struct CPUTIMER_VARS
  1231F  CpuTimer2 ;
  1232F//---------------------------------------------------------------------------
  1233F// Usefull Timer Operations:
  1234F//
  1235F// Start Timer:
  1236F#define StartCpuTimer0( ) CpuTimer0Regs . TCR . bit . TSS = 0
  1237F// Stop Timer:
  1238F#define StopCpuTimer0( ) CpuTimer0Regs . TCR . bit . TSS = 1
  1239F// Reload Timer With period Value:
  1240F#define ReloadCpuTimer0( ) CpuTimer0Regs . TCR . bit . TRB = 1
  1241F// Read 32-Bit Timer Value:
  1242F#define ReadCpuTimer0Counter( ) CpuTimer0Regs . TIM . all
  1243F// Read 32-Bit Period Value:
  1244F#define ReadCpuTimer0Period( ) CpuTimer0Regs . PRD . all
  1245F// CpuTimer 1 and CpuTimer2 are reserved for DSP BIOS & other RTOS
  1246F// Do not use these two timers if you ever plan on integrating
  1247F// DSP-BIOS or another realtime OS.
  1248F//
  1249F// For this reason, comment out the code to manipulate these two timers
  1250F// if using DSP-BIOS or another realtime OS.
  1251F// Start Timer:
  1252F#define StartCpuTimer1( ) CpuTimer1Regs . TCR . bit . TSS = 0
  1253F#define StartCpuTimer2( ) CpuTimer2Regs . TCR . bit . TSS = 0
  1254F// Stop Timer:
  1255F#define StopCpuTimer1( ) CpuTimer1Regs . TCR . bit . TSS = 1
  1256F#define StopCpuTimer2( ) CpuTimer2Regs . TCR . bit . TSS = 1
  1257F// Reload Timer With period Value:
  1258F#define ReloadCpuTimer1( ) CpuTimer1Regs . TCR . bit . TRB = 1
  1259F#define ReloadCpuTimer2( ) CpuTimer2Regs . TCR . bit . TRB = 1
  1260F// Read 32-Bit Timer Value:
  1261F#define ReadCpuTimer1Counter( ) CpuTimer1Regs . TIM . all
  1262F#define ReadCpuTimer2Counter( ) CpuTimer2Regs . TIM . all
  1263F// Read 32-Bit Period Value:
  1264F#define ReadCpuTimer1Period( ) CpuTimer1Regs . PRD . all
  1265F#define ReadCpuTimer2Period( ) CpuTimer2Regs . PRD . all
  1266F       /* extern "C" */
  1267F       // end of DSP2833x_CPU_TIMERS_H definition
  1268F//===========================================================================
  1269F// End of file.
  1270F//===========================================================================
  1271F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_CpuTimers.h*/
  1272F/*   CLOSE_FILE Include File */
  1273F 
  1274F          // 32-bit CPU Timers
  1275F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECan.h */
  1276F// TI File $Revision: /main/2 $
  1277F// Checkin $Date: May 7, 2007 16:05:39 $
  1278F//###########################################################################
  1279F//
  1280F// FILE: DSP2833x_ECan.h
  1281F//
  1282F// TITLE: DSP2833x Device eCAN Register Definitions.
  1283F//
  1284F//###########################################################################
  1285F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  1286F// $Release Date: August 4, 2009 $
  1287F//###########################################################################
  1288F#ifndef DSP2833x_ECAN_H
  1289F#define DSP2833x_ECAN_H
  1290F/* --------------------------------------------------- */
  1291F/* eCAN Control & Status Registers */
  1292F/* ----------------------------------------------------*/
  1293F/* eCAN Mailbox enable register (CANME) bit definitions */
  1294F
  1295Fstruct CANME_BITS
  1296F{                   // bit description
  1297F  Uint16 ME0 : 1 ;
  1298F                 // 0 Enable Mailbox 0
  1299F  Uint16 ME1 : 1 ;
  1300F                 // 1 Enable Mailbox 1
  1301F  Uint16 ME2 : 1 ;
  1302F                 // 2 Enable Mailbox 2
  1303F  Uint16 ME3 : 1 ;
  1304F                 // 3 Enable Mailbox 3
  1305F  Uint16 ME4 : 1 ;
  1306F                 // 4 Enable Mailbox 4
  1307F  Uint16 ME5 : 1 ;
  1308F                 // 5 Enable Mailbox 5
  1309F  Uint16 ME6 : 1 ;
  1310F                 // 6 Enable Mailbox 6
  1311F  Uint16 ME7 : 1 ;
  1312F                 // 7 Enable Mailbox 7
  1313F  Uint16 ME8 : 1 ;
  1314F                 // 8 Enable Mailbox 8
  1315F  Uint16 ME9 : 1 ;
  1316F                 // 9 Enable Mailbox 9
  1317F  Uint16 ME10 : 1 ;
  1318F                  // 10 Enable Mailbox 10
  1319F  Uint16 ME11 : 1 ;
  1320F                  // 11 Enable Mailbox 11
  1321F  Uint16 ME12 : 1 ;
  1322F                  // 12 Enable Mailbox 12
  1323F  Uint16 ME13 : 1 ;
  1324F                  // 13 Enable Mailbox 13
  1325F  Uint16 ME14 : 1 ;
  1326F                  // 14 Enable Mailbox 14
  1327F  Uint16 ME15 : 1 ;
  1328F                  // 15 Enable Mailbox 15
  1329F  Uint16 ME16 : 1 ;
  1330F                  // 16 Enable Mailbox 16
  1331F  Uint16 ME17 : 1 ;
  1332F                  // 17 Enable Mailbox 17
  1333F  Uint16 ME18 : 1 ;
  1334F                  // 18 Enable Mailbox 18
  1335F  Uint16 ME19 : 1 ;
  1336F                  // 19 Enable Mailbox 19
  1337F  Uint16 ME20 : 1 ;
  1338F                  // 20 Enable Mailbox 20
  1339F  Uint16 ME21 : 1 ;
  1340F                  // 21 Enable Mailbox 21
  1341F  Uint16 ME22 : 1 ;
  1342F                  // 22 Enable Mailbox 22
  1343F  Uint16 ME23 : 1 ;
  1344F                  // 23 Enable Mailbox 23
  1345F  Uint16 ME24 : 1 ;
  1346F                  // 24 Enable Mailbox 24
  1347F  Uint16 ME25 : 1 ;
  1348F                  // 25 Enable Mailbox 25
  1349F  Uint16 ME26 : 1 ;
  1350F                  // 26 Enable Mailbox 26
  1351F  Uint16 ME27 : 1 ;
  1352F                  // 27 Enable Mailbox 27
  1353F  Uint16 ME28 : 1 ;
  1354F                  // 28 Enable Mailbox 28
  1355F  Uint16 ME29 : 1 ;
  1356F                  // 29 Enable Mailbox 29
  1357F  Uint16 ME30 : 1 ;
  1358F                  // 30 Enable Mailbox 30
  1359F  Uint16 ME31 : 1 ;
  1360F                  // 31 Enable Mailbox 31
  1361F} ;
  1362F/* Allow access to the bit fields or entire register */
  1363F
  1364Funion CANME_REG
  1365F{
  1366F  Uint32 all ;
  1367F  struct CANME_BITS bit ;
  1368F} ;
  1369F/* eCAN Mailbox direction register (CANMD) bit definitions */
  1370F
  1371Fstruct CANMD_BITS
  1372F{                   // bit description
  1373F  Uint16 MD0 : 1 ;
  1374F                 // 0 0 -> Tx 1 -> Rx
  1375F  Uint16 MD1 : 1 ;
  1376F                 // 1 0 -> Tx 1 -> Rx
  1377F  Uint16 MD2 : 1 ;
  1378F                 // 2 0 -> Tx 1 -> Rx
  1379F  Uint16 MD3 : 1 ;
  1380F                 // 3 0 -> Tx 1 -> Rx
  1381F  Uint16 MD4 : 1 ;
  1382F                 // 4 0 -> Tx 1 -> Rx
  1383F  Uint16 MD5 : 1 ;
  1384F                 // 5 0 -> Tx 1 -> Rx
  1385F  Uint16 MD6 : 1 ;
  1386F                 // 6 0 -> Tx 1 -> Rx
  1387F  Uint16 MD7 : 1 ;
  1388F                 // 7 0 -> Tx 1 -> Rx
  1389F  Uint16 MD8 : 1 ;
  1390F                 // 8 0 -> Tx 1 -> Rx
  1391F  Uint16 MD9 : 1 ;
  1392F                 // 9 0 -> Tx 1 -> Rx
  1393F  Uint16 MD10 : 1 ;
  1394F                  // 10 0 -> Tx 1 -> Rx
  1395F  Uint16 MD11 : 1 ;
  1396F                  // 11 0 -> Tx 1 -> Rx
  1397F  Uint16 MD12 : 1 ;
  1398F                  // 12 0 -> Tx 1 -> Rx
  1399F  Uint16 MD13 : 1 ;
  1400F                  // 13 0 -> Tx 1 -> Rx
  1401F  Uint16 MD14 : 1 ;
  1402F                  // 14 0 -> Tx 1 -> Rx
  1403F  Uint16 MD15 : 1 ;
  1404F                  // 15 0 -> Tx 1 -> Rx
  1405F  Uint16 MD16 : 1 ;
  1406F                  // 16 0 -> Tx 1 -> Rx
  1407F  Uint16 MD17 : 1 ;
  1408F                  // 17 0 -> Tx 1 -> Rx
  1409F  Uint16 MD18 : 1 ;
  1410F                  // 18 0 -> Tx 1 -> Rx
  1411F  Uint16 MD19 : 1 ;
  1412F                  // 19 0 -> Tx 1 -> Rx
  1413F  Uint16 MD20 : 1 ;
  1414F                  // 20 0 -> Tx 1 -> Rx
  1415F  Uint16 MD21 : 1 ;
  1416F                  // 21 0 -> Tx 1 -> Rx
  1417F  Uint16 MD22 : 1 ;
  1418F                  // 22 0 -> Tx 1 -> Rx
  1419F  Uint16 MD23 : 1 ;
  1420F                  // 23 0 -> Tx 1 -> Rx
  1421F  Uint16 MD24 : 1 ;
  1422F                  // 24 0 -> Tx 1 -> Rx
  1423F  Uint16 MD25 : 1 ;
  1424F                  // 25 0 -> Tx 1 -> Rx
  1425F  Uint16 MD26 : 1 ;
  1426F                  // 26 0 -> Tx 1 -> Rx
  1427F  Uint16 MD27 : 1 ;
  1428F                  // 27 0 -> Tx 1 -> Rx
  1429F  Uint16 MD28 : 1 ;
  1430F                  // 28 0 -> Tx 1 -> Rx
  1431F  Uint16 MD29 : 1 ;
  1432F                  // 29 0 -> Tx 1 -> Rx
  1433F  Uint16 MD30 : 1 ;
  1434F                  // 30 0 -> Tx 1 -> Rx
  1435F  Uint16 MD31 : 1 ;
  1436F                  // 31 0 -> Tx 1 -> Rx
  1437F} ;
  1438F/* Allow access to the bit fields or entire register */
  1439F
  1440Funion CANMD_REG
  1441F{
  1442F  Uint32 all ;
  1443F  struct CANMD_BITS bit ;
  1444F} ;
  1445F/* eCAN Transmit Request Set register (CANTRS) bit definitions */
  1446F
  1447Fstruct CANTRS_BITS
  1448F{                    // bit description
  1449F  Uint16 TRS0 : 1 ;
  1450F                  // 0 TRS for Mailbox 0
  1451F  Uint16 TRS1 : 1 ;
  1452F                  // 1 TRS for Mailbox 1
  1453F  Uint16 TRS2 : 1 ;
  1454F                  // 2 TRS for Mailbox 2
  1455F  Uint16 TRS3 : 1 ;
  1456F                  // 3 TRS for Mailbox 3
  1457F  Uint16 TRS4 : 1 ;
  1458F                  // 4 TRS for Mailbox 4
  1459F  Uint16 TRS5 : 1 ;
  1460F                  // 5 TRS for Mailbox 5
  1461F  Uint16 TRS6 : 1 ;
  1462F                  // 6 TRS for Mailbox 6
  1463F  Uint16 TRS7 : 1 ;
  1464F                  // 7 TRS for Mailbox 7
  1465F  Uint16 TRS8 : 1 ;
  1466F                  // 8 TRS for Mailbox 8
  1467F  Uint16 TRS9 : 1 ;
  1468F                  // 9 TRS for Mailbox 9
  1469F  Uint16 TRS10 : 1 ;
  1470F                   // 10 TRS for Mailbox 10
  1471F  Uint16 TRS11 : 1 ;
  1472F                   // 11 TRS for Mailbox 11
  1473F  Uint16 TRS12 : 1 ;
  1474F                   // 12 TRS for Mailbox 12
  1475F  Uint16 TRS13 : 1 ;
  1476F                   // 13 TRS for Mailbox 13
  1477F  Uint16 TRS14 : 1 ;
  1478F                   // 14 TRS for Mailbox 14
  1479F  Uint16 TRS15 : 1 ;
  1480F                   // 15 TRS for Mailbox 15
  1481F  Uint16 TRS16 : 1 ;
  1482F                   // 16 TRS for Mailbox 16
  1483F  Uint16 TRS17 : 1 ;
  1484F                   // 17 TRS for Mailbox 17
  1485F  Uint16 TRS18 : 1 ;
  1486F                   // 18 TRS for Mailbox 18
  1487F  Uint16 TRS19 : 1 ;
  1488F                   // 19 TRS for Mailbox 19
  1489F  Uint16 TRS20 : 1 ;
  1490F                   // 20 TRS for Mailbox 20
  1491F  Uint16 TRS21 : 1 ;
  1492F                   // 21 TRS for Mailbox 21
  1493F  Uint16 TRS22 : 1 ;
  1494F                   // 22 TRS for Mailbox 22
  1495F  Uint16 TRS23 : 1 ;
  1496F                   // 23 TRS for Mailbox 23
  1497F  Uint16 TRS24 : 1 ;
  1498F                   // 24 TRS for Mailbox 24
  1499F  Uint16 TRS25 : 1 ;
  1500F                   // 25 TRS for Mailbox 25
  1501F  Uint16 TRS26 : 1 ;
  1502F                   // 26 TRS for Mailbox 26
  1503F  Uint16 TRS27 : 1 ;
  1504F                   // 27 TRS for Mailbox 27
  1505F  Uint16 TRS28 : 1 ;
  1506F                   // 28 TRS for Mailbox 28
  1507F  Uint16 TRS29 : 1 ;
  1508F                   // 29 TRS for Mailbox 29
  1509F  Uint16 TRS30 : 1 ;
  1510F                   // 30 TRS for Mailbox 30
  1511F  Uint16 TRS31 : 1 ;
  1512F                   // 31 TRS for Mailbox 31
  1513F} ;
  1514F/* Allow access to the bit fields or entire register */
  1515F
  1516Funion CANTRS_REG
  1517F{
  1518F  Uint32 all ;
  1519F  struct CANTRS_BITS bit ;
  1520F} ;
  1521F/* eCAN Transmit Request Reset register (CANTRR) bit definitions */
  1522F
  1523Fstruct CANTRR_BITS
  1524F{                    // bit description
  1525F  Uint16 TRR0 : 1 ;
  1526F                  // 0 TRR for Mailbox 0
  1527F  Uint16 TRR1 : 1 ;
  1528F                  // 1 TRR for Mailbox 1
  1529F  Uint16 TRR2 : 1 ;
  1530F                  // 2 TRR for Mailbox 2
  1531F  Uint16 TRR3 : 1 ;
  1532F                  // 3 TRR for Mailbox 3
  1533F  Uint16 TRR4 : 1 ;
  1534F                  // 4 TRR for Mailbox 4
  1535F  Uint16 TRR5 : 1 ;
  1536F                  // 5 TRR for Mailbox 5
  1537F  Uint16 TRR6 : 1 ;
  1538F                  // 6 TRR for Mailbox 6
  1539F  Uint16 TRR7 : 1 ;
  1540F                  // 7 TRR for Mailbox 7
  1541F  Uint16 TRR8 : 1 ;
  1542F                  // 8 TRR for Mailbox 8
  1543F  Uint16 TRR9 : 1 ;
  1544F                  // 9 TRR for Mailbox 9
  1545F  Uint16 TRR10 : 1 ;
  1546F                   // 10 TRR for Mailbox 10
  1547F  Uint16 TRR11 : 1 ;
  1548F                   // 11 TRR for Mailbox 11
  1549F  Uint16 TRR12 : 1 ;
  1550F                   // 12 TRR for Mailbox 12
  1551F  Uint16 TRR13 : 1 ;
  1552F                   // 13 TRR for Mailbox 13
  1553F  Uint16 TRR14 : 1 ;
  1554F                   // 14 TRR for Mailbox 14
  1555F  Uint16 TRR15 : 1 ;
  1556F                   // 15 TRR for Mailbox 15
  1557F  Uint16 TRR16 : 1 ;
  1558F                   // 16 TRR for Mailbox 16
  1559F  Uint16 TRR17 : 1 ;
  1560F                   // 17 TRR for Mailbox 17
  1561F  Uint16 TRR18 : 1 ;
  1562F                   // 18 TRR for Mailbox 18
  1563F  Uint16 TRR19 : 1 ;
  1564F                   // 19 TRR for Mailbox 19
  1565F  Uint16 TRR20 : 1 ;
  1566F                   // 20 TRR for Mailbox 20
  1567F  Uint16 TRR21 : 1 ;
  1568F                   // 21 TRR for Mailbox 21
  1569F  Uint16 TRR22 : 1 ;
  1570F                   // 22 TRR for Mailbox 22
  1571F  Uint16 TRR23 : 1 ;
  1572F                   // 23 TRR for Mailbox 23
  1573F  Uint16 TRR24 : 1 ;
  1574F                   // 24 TRR for Mailbox 24
  1575F  Uint16 TRR25 : 1 ;
  1576F                   // 25 TRR for Mailbox 25
  1577F  Uint16 TRR26 : 1 ;
  1578F                   // 26 TRR for Mailbox 26
  1579F  Uint16 TRR27 : 1 ;
  1580F                   // 27 TRR for Mailbox 27
  1581F  Uint16 TRR28 : 1 ;
  1582F                   // 28 TRR for Mailbox 28
  1583F  Uint16 TRR29 : 1 ;
  1584F                   // 29 TRR for Mailbox 29
  1585F  Uint16 TRR30 : 1 ;
  1586F                   // 30 TRR for Mailbox 30
  1587F  Uint16 TRR31 : 1 ;
  1588F                   // 31 TRR for Mailbox 31
  1589F} ;
  1590F/* Allow access to the bit fields or entire register */
  1591F
  1592Funion CANTRR_REG
  1593F{
  1594F  Uint32 all ;
  1595F  struct CANTRR_BITS bit ;
  1596F} ;
  1597F/* eCAN Transmit Acknowledge register (CANTA) bit definitions */
  1598F
  1599Fstruct CANTA_BITS
  1600F{                   // bit description
  1601F  Uint16 TA0 : 1 ;
  1602F                 // 0 TA for Mailbox 0
  1603F  Uint16 TA1 : 1 ;
  1604F                 // 1 TA for Mailbox 1
  1605F  Uint16 TA2 : 1 ;
  1606F                 // 2 TA for Mailbox 2
  1607F  Uint16 TA3 : 1 ;
  1608F                 // 3 TA for Mailbox 3
  1609F  Uint16 TA4 : 1 ;
  1610F                 // 4 TA for Mailbox 4
  1611F  Uint16 TA5 : 1 ;
  1612F                 // 5 TA for Mailbox 5
  1613F  Uint16 TA6 : 1 ;
  1614F                 // 6 TA for Mailbox 6
  1615F  Uint16 TA7 : 1 ;
  1616F                 // 7 TA for Mailbox 7
  1617F  Uint16 TA8 : 1 ;
  1618F                 // 8 TA for Mailbox 8
  1619F  Uint16 TA9 : 1 ;
  1620F                 // 9 TA for Mailbox 9
  1621F  Uint16 TA10 : 1 ;
  1622F                  // 10 TA for Mailbox 10
  1623F  Uint16 TA11 : 1 ;
  1624F                  // 11 TA for Mailbox 11
  1625F  Uint16 TA12 : 1 ;
  1626F                  // 12 TA for Mailbox 12
  1627F  Uint16 TA13 : 1 ;
  1628F                  // 13 TA for Mailbox 13
  1629F  Uint16 TA14 : 1 ;
  1630F                  // 14 TA for Mailbox 14
  1631F  Uint16 TA15 : 1 ;
  1632F                  // 15 TA for Mailbox 15
  1633F  Uint16 TA16 : 1 ;
  1634F                  // 16 TA for Mailbox 16
  1635F  Uint16 TA17 : 1 ;
  1636F                  // 17 TA for Mailbox 17
  1637F  Uint16 TA18 : 1 ;
  1638F                  // 18 TA for Mailbox 18
  1639F  Uint16 TA19 : 1 ;
  1640F                  // 19 TA for Mailbox 19
  1641F  Uint16 TA20 : 1 ;
  1642F                  // 20 TA for Mailbox 20
  1643F  Uint16 TA21 : 1 ;
  1644F                  // 21 TA for Mailbox 21
  1645F  Uint16 TA22 : 1 ;
  1646F                  // 22 TA for Mailbox 22
  1647F  Uint16 TA23 : 1 ;
  1648F                  // 23 TA for Mailbox 23
  1649F  Uint16 TA24 : 1 ;
  1650F                  // 24 TA for Mailbox 24
  1651F  Uint16 TA25 : 1 ;
  1652F                  // 25 TA for Mailbox 25
  1653F  Uint16 TA26 : 1 ;
  1654F                  // 26 TA for Mailbox 26
  1655F  Uint16 TA27 : 1 ;
  1656F                  // 27 TA for Mailbox 27
  1657F  Uint16 TA28 : 1 ;
  1658F                  // 28 TA for Mailbox 28
  1659F  Uint16 TA29 : 1 ;
  1660F                  // 29 TA for Mailbox 29
  1661F  Uint16 TA30 : 1 ;
  1662F                  // 30 TA for Mailbox 30
  1663F  Uint16 TA31 : 1 ;
  1664F                  // 31 TA for Mailbox 31
  1665F} ;
  1666F/* Allow access to the bit fields or entire register */
  1667F
  1668Funion CANTA_REG
  1669F{
  1670F  Uint32 all ;
  1671F  struct CANTA_BITS bit ;
  1672F} ;
  1673F/* eCAN Transmit Abort Acknowledge register (CANAA) bit definitions */
  1674F
  1675Fstruct CANAA_BITS
  1676F{                   // bit description
  1677F  Uint16 AA0 : 1 ;
  1678F                 // 0 AA for Mailbox 0
  1679F  Uint16 AA1 : 1 ;
  1680F                 // 1 AA for Mailbox 1
  1681F  Uint16 AA2 : 1 ;
  1682F                 // 2 AA for Mailbox 2
  1683F  Uint16 AA3 : 1 ;
  1684F                 // 3 AA for Mailbox 3
  1685F  Uint16 AA4 : 1 ;
  1686F                 // 4 AA for Mailbox 4
  1687F  Uint16 AA5 : 1 ;
  1688F                 // 5 AA for Mailbox 5
  1689F  Uint16 AA6 : 1 ;
  1690F                 // 6 AA for Mailbox 6
  1691F  Uint16 AA7 : 1 ;
  1692F                 // 7 AA for Mailbox 7
  1693F  Uint16 AA8 : 1 ;
  1694F                 // 8 AA for Mailbox 8
  1695F  Uint16 AA9 : 1 ;
  1696F                 // 9 AA for Mailbox 9
  1697F  Uint16 AA10 : 1 ;
  1698F                  // 10 AA for Mailbox 10
  1699F  Uint16 AA11 : 1 ;
  1700F                  // 11 AA for Mailbox 11
  1701F  Uint16 AA12 : 1 ;
  1702F                  // 12 AA for Mailbox 12
  1703F  Uint16 AA13 : 1 ;
  1704F                  // 13 AA for Mailbox 13
  1705F  Uint16 AA14 : 1 ;
  1706F                  // 14 AA for Mailbox 14
  1707F  Uint16 AA15 : 1 ;
  1708F                  // 15 AA for Mailbox 15
  1709F  Uint16 AA16 : 1 ;
  1710F                  // 16 AA for Mailbox 16
  1711F  Uint16 AA17 : 1 ;
  1712F                  // 17 AA for Mailbox 17
  1713F  Uint16 AA18 : 1 ;
  1714F                  // 18 AA for Mailbox 18
  1715F  Uint16 AA19 : 1 ;
  1716F                  // 19 AA for Mailbox 19
  1717F  Uint16 AA20 : 1 ;
  1718F                  // 20 AA for Mailbox 20
  1719F  Uint16 AA21 : 1 ;
  1720F                  // 21 AA for Mailbox 21
  1721F  Uint16 AA22 : 1 ;
  1722F                  // 22 AA for Mailbox 22
  1723F  Uint16 AA23 : 1 ;
  1724F                  // 23 AA for Mailbox 23
  1725F  Uint16 AA24 : 1 ;
  1726F                  // 24 AA for Mailbox 24
  1727F  Uint16 AA25 : 1 ;
  1728F                  // 25 AA for Mailbox 25
  1729F  Uint16 AA26 : 1 ;
  1730F                  // 26 AA for Mailbox 26
  1731F  Uint16 AA27 : 1 ;
  1732F                  // 27 AA for Mailbox 27
  1733F  Uint16 AA28 : 1 ;
  1734F                  // 28 AA for Mailbox 28
  1735F  Uint16 AA29 : 1 ;
  1736F                  // 29 AA for Mailbox 29
  1737F  Uint16 AA30 : 1 ;
  1738F                  // 30 AA for Mailbox 30
  1739F  Uint16 AA31 : 1 ;
  1740F                  // 31 AA for Mailbox 31
  1741F} ;
  1742F/* Allow access to the bit fields or entire register */
  1743F
  1744Funion CANAA_REG
  1745F{
  1746F  Uint32 all ;
  1747F  struct CANAA_BITS bit ;
  1748F} ;
  1749F/* eCAN Received Message Pending register (CANRMP) bit definitions */
  1750F
  1751Fstruct CANRMP_BITS
  1752F{                    // bit description
  1753F  Uint16 RMP0 : 1 ;
  1754F                  // 0 RMP for Mailbox 0
  1755F  Uint16 RMP1 : 1 ;
  1756F                  // 1 RMP for Mailbox 1
  1757F  Uint16 RMP2 : 1 ;
  1758F                  // 2 RMP for Mailbox 2
  1759F  Uint16 RMP3 : 1 ;
  1760F                  // 3 RMP for Mailbox 3
  1761F  Uint16 RMP4 : 1 ;
  1762F                  // 4 RMP for Mailbox 4
  1763F  Uint16 RMP5 : 1 ;
  1764F                  // 5 RMP for Mailbox 5
  1765F  Uint16 RMP6 : 1 ;
  1766F                  // 6 RMP for Mailbox 6
  1767F  Uint16 RMP7 : 1 ;
  1768F                  // 7 RMP for Mailbox 7
  1769F  Uint16 RMP8 : 1 ;
  1770F                  // 8 RMP for Mailbox 8
  1771F  Uint16 RMP9 : 1 ;
  1772F                  // 9 RMP for Mailbox 9
  1773F  Uint16 RMP10 : 1 ;
  1774F                   // 10 RMP for Mailbox 10
  1775F  Uint16 RMP11 : 1 ;
  1776F                   // 11 RMP for Mailbox 11
  1777F  Uint16 RMP12 : 1 ;
  1778F                   // 12 RMP for Mailbox 12
  1779F  Uint16 RMP13 : 1 ;
  1780F                   // 13 RMP for Mailbox 13
  1781F  Uint16 RMP14 : 1 ;
  1782F                   // 14 RMP for Mailbox 14
  1783F  Uint16 RMP15 : 1 ;
  1784F                   // 15 RMP for Mailbox 15
  1785F  Uint16 RMP16 : 1 ;
  1786F                   // 16 RMP for Mailbox 16
  1787F  Uint16 RMP17 : 1 ;
  1788F                   // 17 RMP for Mailbox 17
  1789F  Uint16 RMP18 : 1 ;
  1790F                   // 18 RMP for Mailbox 18
  1791F  Uint16 RMP19 : 1 ;
  1792F                   // 19 RMP for Mailbox 19
  1793F  Uint16 RMP20 : 1 ;
  1794F                   // 20 RMP for Mailbox 20
  1795F  Uint16 RMP21 : 1 ;
  1796F                   // 21 RMP for Mailbox 21
  1797F  Uint16 RMP22 : 1 ;
  1798F                   // 22 RMP for Mailbox 22
  1799F  Uint16 RMP23 : 1 ;
  1800F                   // 23 RMP for Mailbox 23
  1801F  Uint16 RMP24 : 1 ;
  1802F                   // 24 RMP for Mailbox 24
  1803F  Uint16 RMP25 : 1 ;
  1804F                   // 25 RMP for Mailbox 25
  1805F  Uint16 RMP26 : 1 ;
  1806F                   // 26 RMP for Mailbox 26
  1807F  Uint16 RMP27 : 1 ;
  1808F                   // 27 RMP for Mailbox 27
  1809F  Uint16 RMP28 : 1 ;
  1810F                   // 28 RMP for Mailbox 28
  1811F  Uint16 RMP29 : 1 ;
  1812F                   // 29 RMP for Mailbox 29
  1813F  Uint16 RMP30 : 1 ;
  1814F                   // 30 RMP for Mailbox 30
  1815F  Uint16 RMP31 : 1 ;
  1816F                   // 31 RMP for Mailbox 31
  1817F} ;
  1818F/* Allow access to the bit fields or entire register */
  1819F
  1820Funion CANRMP_REG
  1821F{
  1822F  Uint32 all ;
  1823F  struct CANRMP_BITS bit ;
  1824F} ;
  1825F/* eCAN Received Message Lost register (CANRML) bit definitions */
  1826F
  1827Fstruct CANRML_BITS
  1828F{                    // bit description
  1829F  Uint16 RML0 : 1 ;
  1830F                  // 0 RML for Mailbox 0
  1831F  Uint16 RML1 : 1 ;
  1832F                  // 1 RML for Mailbox 1
  1833F  Uint16 RML2 : 1 ;
  1834F                  // 2 RML for Mailbox 2
  1835F  Uint16 RML3 : 1 ;
  1836F                  // 3 RML for Mailbox 3
  1837F  Uint16 RML4 : 1 ;
  1838F                  // 4 RML for Mailbox 4
  1839F  Uint16 RML5 : 1 ;
  1840F                  // 5 RML for Mailbox 5
  1841F  Uint16 RML6 : 1 ;
  1842F                  // 6 RML for Mailbox 6
  1843F  Uint16 RML7 : 1 ;
  1844F                  // 7 RML for Mailbox 7
  1845F  Uint16 RML8 : 1 ;
  1846F                  // 8 RML for Mailbox 8
  1847F  Uint16 RML9 : 1 ;
  1848F                  // 9 RML for Mailbox 9
  1849F  Uint16 RML10 : 1 ;
  1850F                   // 10 RML for Mailbox 10
  1851F  Uint16 RML11 : 1 ;
  1852F                   // 11 RML for Mailbox 11
  1853F  Uint16 RML12 : 1 ;
  1854F                   // 12 RML for Mailbox 12
  1855F  Uint16 RML13 : 1 ;
  1856F                   // 13 RML for Mailbox 13
  1857F  Uint16 RML14 : 1 ;
  1858F                   // 14 RML for Mailbox 14
  1859F  Uint16 RML15 : 1 ;
  1860F                   // 15 RML for Mailbox 15
  1861F  Uint16 RML16 : 1 ;
  1862F                   // 16 RML for Mailbox 16
  1863F  Uint16 RML17 : 1 ;
  1864F                   // 17 RML for Mailbox 17
  1865F  Uint16 RML18 : 1 ;
  1866F                   // 18 RML for Mailbox 18
  1867F  Uint16 RML19 : 1 ;
  1868F                   // 19 RML for Mailbox 19
  1869F  Uint16 RML20 : 1 ;
  1870F                   // 20 RML for Mailbox 20
  1871F  Uint16 RML21 : 1 ;
  1872F                   // 21 RML for Mailbox 21
  1873F  Uint16 RML22 : 1 ;
  1874F                   // 22 RML for Mailbox 22
  1875F  Uint16 RML23 : 1 ;
  1876F                   // 23 RML for Mailbox 23
  1877F  Uint16 RML24 : 1 ;
  1878F                   // 24 RML for Mailbox 24
  1879F  Uint16 RML25 : 1 ;
  1880F                   // 25 RML for Mailbox 25
  1881F  Uint16 RML26 : 1 ;
  1882F                   // 26 RML for Mailbox 26
  1883F  Uint16 RML27 : 1 ;
  1884F                   // 27 RML for Mailbox 27
  1885F  Uint16 RML28 : 1 ;
  1886F                   // 28 RML for Mailbox 28
  1887F  Uint16 RML29 : 1 ;
  1888F                   // 29 RML for Mailbox 29
  1889F  Uint16 RML30 : 1 ;
  1890F                   // 30 RML for Mailbox 30
  1891F  Uint16 RML31 : 1 ;
  1892F                   // 31 RML for Mailbox 31
  1893F} ;
  1894F/* Allow access to the bit fields or entire register */
  1895F
  1896Funion CANRML_REG
  1897F{
  1898F  Uint32 all ;
  1899F  struct CANRML_BITS bit ;
  1900F} ;
  1901F/* eCAN Remote Frame Pending register (CANRFP) bit definitions */
  1902F
  1903Fstruct CANRFP_BITS
  1904F{                    // bit description
  1905F  Uint16 RFP0 : 1 ;
  1906F                  // 0 RFP for Mailbox 0
  1907F  Uint16 RFP1 : 1 ;
  1908F                  // 1 RFP for Mailbox 1
  1909F  Uint16 RFP2 : 1 ;
  1910F                  // 2 RFP for Mailbox 2
  1911F  Uint16 RFP3 : 1 ;
  1912F                  // 3 RFP for Mailbox 3
  1913F  Uint16 RFP4 : 1 ;
  1914F                  // 4 RFP for Mailbox 4
  1915F  Uint16 RFP5 : 1 ;
  1916F                  // 5 RFP for Mailbox 5
  1917F  Uint16 RFP6 : 1 ;
  1918F                  // 6 RFP for Mailbox 6
  1919F  Uint16 RFP7 : 1 ;
  1920F                  // 7 RFP for Mailbox 7
  1921F  Uint16 RFP8 : 1 ;
  1922F                  // 8 RFP for Mailbox 8
  1923F  Uint16 RFP9 : 1 ;
  1924F                  // 9 RFP for Mailbox 9
  1925F  Uint16 RFP10 : 1 ;
  1926F                   // 10 RFP for Mailbox 10
  1927F  Uint16 RFP11 : 1 ;
  1928F                   // 11 RFP for Mailbox 11
  1929F  Uint16 RFP12 : 1 ;
  1930F                   // 12 RFP for Mailbox 12
  1931F  Uint16 RFP13 : 1 ;
  1932F                   // 13 RFP for Mailbox 13
  1933F  Uint16 RFP14 : 1 ;
  1934F                   // 14 RFP for Mailbox 14
  1935F  Uint16 RFP15 : 1 ;
  1936F                   // 15 RFP for Mailbox 15
  1937F  Uint16 RFP16 : 1 ;
  1938F                   // 16 RFP for Mailbox 16
  1939F  Uint16 RFP17 : 1 ;
  1940F                   // 17 RFP for Mailbox 17
  1941F  Uint16 RFP18 : 1 ;
  1942F                   // 18 RFP for Mailbox 18
  1943F  Uint16 RFP19 : 1 ;
  1944F                   // 19 RFP for Mailbox 19
  1945F  Uint16 RFP20 : 1 ;
  1946F                   // 20 RFP for Mailbox 20
  1947F  Uint16 RFP21 : 1 ;
  1948F                   // 21 RFP for Mailbox 21
  1949F  Uint16 RFP22 : 1 ;
  1950F                   // 22 RFP for Mailbox 22
  1951F  Uint16 RFP23 : 1 ;
  1952F                   // 23 RFP for Mailbox 23
  1953F  Uint16 RFP24 : 1 ;
  1954F                   // 24 RFP for Mailbox 24
  1955F  Uint16 RFP25 : 1 ;
  1956F                   // 25 RFP for Mailbox 25
  1957F  Uint16 RFP26 : 1 ;
  1958F                   // 26 RFP for Mailbox 26
  1959F  Uint16 RFP27 : 1 ;
  1960F                   // 27 RFP for Mailbox 27
  1961F  Uint16 RFP28 : 1 ;
  1962F                   // 28 RFP for Mailbox 28
  1963F  Uint16 RFP29 : 1 ;
  1964F                   // 29 RFP for Mailbox 29
  1965F  Uint16 RFP30 : 1 ;
  1966F                   // 30 RFP for Mailbox 30
  1967F  Uint16 RFP31 : 1 ;
  1968F                   // 31 RFP for Mailbox 31
  1969F} ;
  1970F/* Allow access to the bit fields or entire register */
  1971F
  1972Funion CANRFP_REG
  1973F{
  1974F  Uint32 all ;
  1975F  struct CANRFP_BITS bit ;
  1976F} ;
  1977F/* eCAN Global Acceptance Mask register (CANGAM) bit definitions */
  1978F
  1979Fstruct CANGAM_BITS
  1980F{                    // bits description
  1981F  Uint16 GAM150 : 16 ;
  1982F                     // 15:0 Global acceptance mask bits 0-15
  1983F  Uint16 GAM2816 : 13 ;
  1984F                      // 28:16 Global acceptance mask bits 16-28
  1985F  Uint16 rsvd : 2 ;
  1986F                  // 30:29 reserved
  1987F  Uint16 AMI : 1 ;
  1988F                 // 31 AMI bit
  1989F} ;
  1990F/* Allow access to the bit fields or entire register */
  1991F
  1992Funion CANGAM_REG
  1993F{
  1994F  Uint32 all ;
  1995F  struct CANGAM_BITS bit ;
  1996F} ;
  1997F/* eCAN Master Control register (CANMC) bit definitions */
  1998F
  1999Fstruct CANMC_BITS
  2000F{                   // bits description
  2001F  Uint16 MBNR : 5 ;
  2002F                  // 4:0 MBX #for CDR bit
  2003F  Uint16 SRES : 1 ;
  2004F                  // 5 Soft reset
  2005F  Uint16 STM : 1 ;
  2006F                 // 6 Self-test mode
  2007F  Uint16 ABO : 1 ;
  2008F                 // 7 Auto bus-on
  2009F  Uint16 CDR : 1 ;
  2010F                 // 8 Change data request
  2011F  Uint16 WUBA : 1 ;
  2012F                  // 9 Wake-up on bus activity
  2013F  Uint16 DBO : 1 ;
  2014F                 // 10 Data-byte order
  2015F  Uint16 PDR : 1 ;
  2016F                 // 11 Power-down mode request
  2017F  Uint16 CCR : 1 ;
  2018F                 // 12 Change configuration request
  2019F  Uint16 SCB : 1 ;
  2020F                 // 13 SCC compatibility bit
  2021F  Uint16 TCC : 1 ;
  2022F                 // 14 TSC MSB clear bit
  2023F  Uint16 MBCC : 1 ;
  2024F                  // 15 TSC clear bit thru mailbox 16
  2025F  Uint16 SUSP : 1 ;
  2026F                  // 16 SUSPEND free/soft bit
  2027F  Uint16 rsvd : 15 ;
  2028F                   // 31:17 reserved
  2029F} ;
  2030F/* Allow access to the bit fields or entire register */
  2031F
  2032Funion CANMC_REG
  2033F{
  2034F  Uint32 all ;
  2035F  struct CANMC_BITS bit ;
  2036F} ;
  2037F/* eCAN Bit -timing configuration register (CANBTC) bit definitions */
  2038F
  2039Fstruct CANBTC_BITS
  2040F{                    // bits description
  2041F  Uint16 TSEG2REG : 3 ;
  2042F                      // 2:0 TSEG2 register value
  2043F  Uint16 TSEG1REG : 4 ;
  2044F                      // 6:3 TSEG1 register value
  2045F  Uint16 SAM : 1 ;
  2046F                 // 7 Sample-point setting
  2047F  Uint16 SJWREG : 2 ;
  2048F                    // 9:8 Synchroniztion Jump Width register value
  2049F  Uint16 rsvd1 : 6 ;
  2050F                   // 15:10 reserved
  2051F  Uint16 BRPREG : 8 ;
  2052F                    // 23:16 Baudrate prescaler register value
  2053F  Uint16 rsvd2 : 8 ;
  2054F                   // 31:24 reserved
  2055F} ;
  2056F/* Allow access to the bit fields or entire register */
  2057F
  2058Funion CANBTC_REG
  2059F{
  2060F  Uint32 all ;
  2061F  struct CANBTC_BITS bit ;
  2062F} ;
  2063F/* eCAN Error & Status register (CANES) bit definitions */
  2064F
  2065Fstruct CANES_BITS
  2066F{                   // bits description
  2067F  Uint16 TM : 1 ;
  2068F                // 0 Transmit Mode
  2069F  Uint16 RM : 1 ;
  2070F                // 1 Receive Mode
  2071F  Uint16 rsvd1 : 1 ;
  2072F                   // 2 reserved
  2073F  Uint16 PDA : 1 ;
  2074F                 // 3 Power-down acknowledge
  2075F  Uint16 CCE : 1 ;
  2076F                 // 4 Change Configuration Enable
  2077F  Uint16 SMA : 1 ;
  2078F                 // 5 Suspend Mode Acknowledge
  2079F  Uint16 rsvd2 : 10 ;
  2080F                    // 15:6 reserved
  2081F  Uint16 EW : 1 ;
  2082F                // 16 Warning status
  2083F  Uint16 EP : 1 ;
  2084F                // 17 Error Passive status
  2085F  Uint16 BO : 1 ;
  2086F                // 18 Bus-off status
  2087F  Uint16 ACKE : 1 ;
  2088F                  // 19 Acknowledge error
  2089F  Uint16 SE : 1 ;
  2090F                // 20 Stuff error
  2091F  Uint16 CRCE : 1 ;
  2092F                  // 21 CRC error
  2093F  Uint16 SA1 : 1 ;
  2094F                 // 22 Stuck at Dominant error
  2095F  Uint16 BE : 1 ;
  2096F                // 23 Bit error
  2097F  Uint16 FE : 1 ;
  2098F                // 24 Framing error
  2099F  Uint16 rsvd3 : 7 ;
  2100F                   // 31:25 reserved
  2101F} ;
  2102F/* Allow access to the bit fields or entire register */
  2103F
  2104Funion CANES_REG
  2105F{
  2106F  Uint32 all ;
  2107F  struct CANES_BITS bit ;
  2108F} ;
  2109F/* eCAN Transmit Error Counter register (CANTEC) bit definitions */
  2110F
  2111Fstruct CANTEC_BITS
  2112F{                    // bits description
  2113F  Uint16 TEC : 8 ;
  2114F                 // 7:0 TEC
  2115F  Uint16 rsvd1 : 8 ;
  2116F                   // 15:8 reserved
  2117F  Uint16 rsvd2 : 16 ;
  2118F                    // 31:16 reserved
  2119F} ;
  2120F/* Allow access to the bit fields or entire register */
  2121F
  2122Funion CANTEC_REG
  2123F{
  2124F  Uint32 all ;
  2125F  struct CANTEC_BITS bit ;
  2126F} ;
  2127F/* eCAN Receive Error Counter register (CANREC) bit definitions */
  2128F
  2129Fstruct CANREC_BITS
  2130F{                    // bits description
  2131F  Uint16 REC : 8 ;
  2132F                 // 7:0 REC
  2133F  Uint16 rsvd1 : 8 ;
  2134F                   // 15:8 reserved
  2135F  Uint16 rsvd2 : 16 ;
  2136F                    // 31:16 reserved
  2137F} ;
  2138F/* Allow access to the bit fields or entire register */
  2139F
  2140Funion CANREC_REG
  2141F{
  2142F  Uint32 all ;
  2143F  struct CANREC_BITS bit ;
  2144F} ;
  2145F/* eCAN Global Interrupt Flag 0 (CANGIF0) bit definitions */
  2146F
  2147Fstruct CANGIF0_BITS
  2148F{                     // bits description
  2149F  Uint16 MIV0 : 5 ;
  2150F                  // 4:0 Mailbox Interrupt Vector
  2151F  Uint16 rsvd1 : 3 ;
  2152F                   // 7:5 reserved
  2153F  Uint16 WLIF0 : 1 ;
  2154F                   // 8 Warning level interrupt flag
  2155F  Uint16 EPIF0 : 1 ;
  2156F                   // 9 Error-passive interrupt flag
  2157F  Uint16 BOIF0 : 1 ;
  2158F                   // 10 Bus-off interrupt flag
  2159F  Uint16 RMLIF0 : 1 ;
  2160F                    // 11 Received message lost interrupt flag
  2161F  Uint16 WUIF0 : 1 ;
  2162F                   // 12 Wakeup interrupt flag
  2163F  Uint16 WDIF0 : 1 ;
  2164F                   // 13 Write denied interrupt flag
  2165F  Uint16 AAIF0 : 1 ;
  2166F                   // 14 Abort Ack interrupt flag
  2167F  Uint16 GMIF0 : 1 ;
  2168F                   // 15 Global MBX interrupt flag
  2169F  Uint16 TCOF0 : 1 ;
  2170F                   // 16 TSC Overflow flag
  2171F  Uint16 MTOF0 : 1 ;
  2172F                   // 17 Mailbox Timeout flag
  2173F  Uint16 rsvd2 : 14 ;
  2174F                    // 31:18 reserved
  2175F} ;
  2176F/* Allow access to the bit fields or entire register */
  2177F
  2178Funion CANGIF0_REG
  2179F{
  2180F  Uint32 all ;
  2181F  struct CANGIF0_BITS bit ;
  2182F} ;
  2183F/* eCAN Global Interrupt Mask register (CANGIM) bit definitions */
  2184F
  2185Fstruct CANGIM_BITS
  2186F{                    // bits description
  2187F  Uint16 I0EN : 1 ;
  2188F                  // 0 Interrupt 0 enable
  2189F  Uint16 I1EN : 1 ;
  2190F                  // 1 Interrupt 1 enable
  2191F  Uint16 GIL : 1 ;
  2192F                 // 2 Global Interrupt Level
  2193F  Uint16 rsvd1 : 5 ;
  2194F                   // 7:3 reserved
  2195F  Uint16 WLIM : 1 ;
  2196F                  // 8 Warning level interrupt mask
  2197F  Uint16 EPIM : 1 ;
  2198F                  // 9 Error-passive interrupt mask
  2199F  Uint16 BOIM : 1 ;
  2200F                  // 10 Bus-off interrupt mask
  2201F  Uint16 RMLIM : 1 ;
  2202F                   // 11 Received message lost interrupt mask
  2203F  Uint16 WUIM : 1 ;
  2204F                  // 12 Wakeup interrupt mask
  2205F  Uint16 WDIM : 1 ;
  2206F                  // 13 Write denied interrupt mask
  2207F  Uint16 AAIM : 1 ;
  2208F                  // 14 Abort Ack interrupt mask
  2209F  Uint16 rsvd2 : 1 ;
  2210F                   // 15 reserved
  2211F  Uint16 TCOM : 1 ;
  2212F                  // 16 TSC overflow interrupt mask
  2213F  Uint16 MTOM : 1 ;
  2214F                  // 17 MBX Timeout interrupt mask
  2215F  Uint16 rsvd3 : 14 ;
  2216F                    // 31:18 reserved
  2217F} ;
  2218F/* Allow access to the bit fields or entire register */
  2219F
  2220Funion CANGIM_REG
  2221F{
  2222F  Uint32 all ;
  2223F  struct CANGIM_BITS bit ;
  2224F} ;
  2225F/* eCAN Global Interrupt Flag 1 (eCANGIF1) bit definitions */
  2226F
  2227Fstruct CANGIF1_BITS
  2228F{                     // bits description
  2229F  Uint16 MIV1 : 5 ;
  2230F                  // 4:0 Mailbox Interrupt Vector
  2231F  Uint16 rsvd1 : 3 ;
  2232F                   // 7:5 reserved
  2233F  Uint16 WLIF1 : 1 ;
  2234F                   // 8 Warning level interrupt flag
  2235F  Uint16 EPIF1 : 1 ;
  2236F                   // 9 Error-passive interrupt flag
  2237F  Uint16 BOIF1 : 1 ;
  2238F                   // 10 Bus-off interrupt flag
  2239F  Uint16 RMLIF1 : 1 ;
  2240F                    // 11 Received message lost interrupt flag
  2241F  Uint16 WUIF1 : 1 ;
  2242F                   // 12 Wakeup interrupt flag
  2243F  Uint16 WDIF1 : 1 ;
  2244F                   // 13 Write denied interrupt flag
  2245F  Uint16 AAIF1 : 1 ;
  2246F                   // 14 Abort Ack interrupt flag
  2247F  Uint16 GMIF1 : 1 ;
  2248F                   // 15 Global MBX interrupt flag
  2249F  Uint16 TCOF1 : 1 ;
  2250F                   // 16 TSC Overflow flag
  2251F  Uint16 MTOF1 : 1 ;
  2252F                   // 17 Mailbox Timeout flag
  2253F  Uint16 rsvd2 : 14 ;
  2254F                    // 31:18 reserved
  2255F} ;
  2256F/* Allow access to the bit fields or entire register */
  2257F
  2258Funion CANGIF1_REG
  2259F{
  2260F  Uint32 all ;
  2261F  struct CANGIF1_BITS bit ;
  2262F} ;
  2263F/* eCAN Mailbox Interrupt Mask register (CANMIM) bit definitions */
  2264F
  2265Fstruct CANMIM_BITS
  2266F{                    // bit description
  2267F  Uint16 MIM0 : 1 ;
  2268F                  // 0 MIM for Mailbox 0
  2269F  Uint16 MIM1 : 1 ;
  2270F                  // 1 MIM for Mailbox 1
  2271F  Uint16 MIM2 : 1 ;
  2272F                  // 2 MIM for Mailbox 2
  2273F  Uint16 MIM3 : 1 ;
  2274F                  // 3 MIM for Mailbox 3
  2275F  Uint16 MIM4 : 1 ;
  2276F                  // 4 MIM for Mailbox 4
  2277F  Uint16 MIM5 : 1 ;
  2278F                  // 5 MIM for Mailbox 5
  2279F  Uint16 MIM6 : 1 ;
  2280F                  // 6 MIM for Mailbox 6
  2281F  Uint16 MIM7 : 1 ;
  2282F                  // 7 MIM for Mailbox 7
  2283F  Uint16 MIM8 : 1 ;
  2284F                  // 8 MIM for Mailbox 8
  2285F  Uint16 MIM9 : 1 ;
  2286F                  // 9 MIM for Mailbox 9
  2287F  Uint16 MIM10 : 1 ;
  2288F                   // 10 MIM for Mailbox 10
  2289F  Uint16 MIM11 : 1 ;
  2290F                   // 11 MIM for Mailbox 11
  2291F  Uint16 MIM12 : 1 ;
  2292F                   // 12 MIM for Mailbox 12
  2293F  Uint16 MIM13 : 1 ;
  2294F                   // 13 MIM for Mailbox 13
  2295F  Uint16 MIM14 : 1 ;
  2296F                   // 14 MIM for Mailbox 14
  2297F  Uint16 MIM15 : 1 ;
  2298F                   // 15 MIM for Mailbox 15
  2299F  Uint16 MIM16 : 1 ;
  2300F                   // 16 MIM for Mailbox 16
  2301F  Uint16 MIM17 : 1 ;
  2302F                   // 17 MIM for Mailbox 17
  2303F  Uint16 MIM18 : 1 ;
  2304F                   // 18 MIM for Mailbox 18
  2305F  Uint16 MIM19 : 1 ;
  2306F                   // 19 MIM for Mailbox 19
  2307F  Uint16 MIM20 : 1 ;
  2308F                   // 20 MIM for Mailbox 20
  2309F  Uint16 MIM21 : 1 ;
  2310F                   // 21 MIM for Mailbox 21
  2311F  Uint16 MIM22 : 1 ;
  2312F                   // 22 MIM for Mailbox 22
  2313F  Uint16 MIM23 : 1 ;
  2314F                   // 23 MIM for Mailbox 23
  2315F  Uint16 MIM24 : 1 ;
  2316F                   // 24 MIM for Mailbox 24
  2317F  Uint16 MIM25 : 1 ;
  2318F                   // 25 MIM for Mailbox 25
  2319F  Uint16 MIM26 : 1 ;
  2320F                   // 26 MIM for Mailbox 26
  2321F  Uint16 MIM27 : 1 ;
  2322F                   // 27 MIM for Mailbox 27
  2323F  Uint16 MIM28 : 1 ;
  2324F                   // 28 MIM for Mailbox 28
  2325F  Uint16 MIM29 : 1 ;
  2326F                   // 29 MIM for Mailbox 29
  2327F  Uint16 MIM30 : 1 ;
  2328F                   // 30 MIM for Mailbox 30
  2329F  Uint16 MIM31 : 1 ;
  2330F                   // 31 MIM for Mailbox 31
  2331F} ;
  2332F/* Allow access to the bit fields or entire register */
  2333F
  2334Funion CANMIM_REG
  2335F{
  2336F  Uint32 all ;
  2337F  struct CANMIM_BITS bit ;
  2338F} ;
  2339F/* eCAN Mailbox Interrupt Level register (CANMIL) bit definitions */
  2340F
  2341Fstruct CANMIL_BITS
  2342F{                    // bit description
  2343F  Uint16 MIL0 : 1 ;
  2344F                  // 0 0 -> Int 9.5 1 -> Int 9.6
  2345F  Uint16 MIL1 : 1 ;
  2346F                  // 1 0 -> Int 9.5 1 -> Int 9.6
  2347F  Uint16 MIL2 : 1 ;
  2348F                  // 2 0 -> Int 9.5 1 -> Int 9.6
  2349F  Uint16 MIL3 : 1 ;
  2350F                  // 3 0 -> Int 9.5 1 -> Int 9.6
  2351F  Uint16 MIL4 : 1 ;
  2352F                  // 4 0 -> Int 9.5 1 -> Int 9.6
  2353F  Uint16 MIL5 : 1 ;
  2354F                  // 5 0 -> Int 9.5 1 -> Int 9.6
  2355F  Uint16 MIL6 : 1 ;
  2356F                  // 6 0 -> Int 9.5 1 -> Int 9.6
  2357F  Uint16 MIL7 : 1 ;
  2358F                  // 7 0 -> Int 9.5 1 -> Int 9.6
  2359F  Uint16 MIL8 : 1 ;
  2360F                  // 8 0 -> Int 9.5 1 -> Int 9.6
  2361F  Uint16 MIL9 : 1 ;
  2362F                  // 9 0 -> Int 9.5 1 -> Int 9.6
  2363F  Uint16 MIL10 : 1 ;
  2364F                   // 10 0 -> Int 9.5 1 -> Int 9.6
  2365F  Uint16 MIL11 : 1 ;
  2366F                   // 11 0 -> Int 9.5 1 -> Int 9.6
  2367F  Uint16 MIL12 : 1 ;
  2368F                   // 12 0 -> Int 9.5 1 -> Int 9.6
  2369F  Uint16 MIL13 : 1 ;
  2370F                   // 13 0 -> Int 9.5 1 -> Int 9.6
  2371F  Uint16 MIL14 : 1 ;
  2372F                   // 14 0 -> Int 9.5 1 -> Int 9.6
  2373F  Uint16 MIL15 : 1 ;
  2374F                   // 15 0 -> Int 9.5 1 -> Int 9.6
  2375F  Uint16 MIL16 : 1 ;
  2376F                   // 16 0 -> Int 9.5 1 -> Int 9.6
  2377F  Uint16 MIL17 : 1 ;
  2378F                   // 17 0 -> Int 9.5 1 -> Int 9.6
  2379F  Uint16 MIL18 : 1 ;
  2380F                   // 18 0 -> Int 9.5 1 -> Int 9.6
  2381F  Uint16 MIL19 : 1 ;
  2382F                   // 19 0 -> Int 9.5 1 -> Int 9.6
  2383F  Uint16 MIL20 : 1 ;
  2384F                   // 20 0 -> Int 9.5 1 -> Int 9.6
  2385F  Uint16 MIL21 : 1 ;
  2386F                   // 21 0 -> Int 9.5 1 -> Int 9.6
  2387F  Uint16 MIL22 : 1 ;
  2388F                   // 22 0 -> Int 9.5 1 -> Int 9.6
  2389F  Uint16 MIL23 : 1 ;
  2390F                   // 23 0 -> Int 9.5 1 -> Int 9.6
  2391F  Uint16 MIL24 : 1 ;
  2392F                   // 24 0 -> Int 9.5 1 -> Int 9.6
  2393F  Uint16 MIL25 : 1 ;
  2394F                   // 25 0 -> Int 9.5 1 -> Int 9.6
  2395F  Uint16 MIL26 : 1 ;
  2396F                   // 26 0 -> Int 9.5 1 -> Int 9.6
  2397F  Uint16 MIL27 : 1 ;
  2398F                   // 27 0 -> Int 9.5 1 -> Int 9.6
  2399F  Uint16 MIL28 : 1 ;
  2400F                   // 28 0 -> Int 9.5 1 -> Int 9.6
  2401F  Uint16 MIL29 : 1 ;
  2402F                   // 29 0 -> Int 9.5 1 -> Int 9.6
  2403F  Uint16 MIL30 : 1 ;
  2404F                   // 30 0 -> Int 9.5 1 -> Int 9.6
  2405F  Uint16 MIL31 : 1 ;
  2406F                   // 31 0 -> Int 9.5 1 -> Int 9.6
  2407F} ;
  2408F/* Allow access to the bit fields or entire register */
  2409F
  2410Funion CANMIL_REG
  2411F{
  2412F  Uint32 all ;
  2413F  struct CANMIL_BITS bit ;
  2414F} ;
  2415F/* eCAN Overwrite Protection Control register (CANOPC) bit definitions */
  2416F
  2417Fstruct CANOPC_BITS
  2418F{                    // bit description
  2419F  Uint16 OPC0 : 1 ;
  2420F                  // 0 OPC for Mailbox 0
  2421F  Uint16 OPC1 : 1 ;
  2422F                  // 1 OPC for Mailbox 1
  2423F  Uint16 OPC2 : 1 ;
  2424F                  // 2 OPC for Mailbox 2
  2425F  Uint16 OPC3 : 1 ;
  2426F                  // 3 OPC for Mailbox 3
  2427F  Uint16 OPC4 : 1 ;
  2428F                  // 4 OPC for Mailbox 4
  2429F  Uint16 OPC5 : 1 ;
  2430F                  // 5 OPC for Mailbox 5
  2431F  Uint16 OPC6 : 1 ;
  2432F                  // 6 OPC for Mailbox 6
  2433F  Uint16 OPC7 : 1 ;
  2434F                  // 7 OPC for Mailbox 7
  2435F  Uint16 OPC8 : 1 ;
  2436F                  // 8 OPC for Mailbox 8
  2437F  Uint16 OPC9 : 1 ;
  2438F                  // 9 OPC for Mailbox 9
  2439F  Uint16 OPC10 : 1 ;
  2440F                   // 10 OPC for Mailbox 10
  2441F  Uint16 OPC11 : 1 ;
  2442F                   // 11 OPC for Mailbox 11
  2443F  Uint16 OPC12 : 1 ;
  2444F                   // 12 OPC for Mailbox 12
  2445F  Uint16 OPC13 : 1 ;
  2446F                   // 13 OPC for Mailbox 13
  2447F  Uint16 OPC14 : 1 ;
  2448F                   // 14 OPC for Mailbox 14
  2449F  Uint16 OPC15 : 1 ;
  2450F                   // 15 OPC for Mailbox 15
  2451F  Uint16 OPC16 : 1 ;
  2452F                   // 16 OPC for Mailbox 16
  2453F  Uint16 OPC17 : 1 ;
  2454F                   // 17 OPC for Mailbox 17
  2455F  Uint16 OPC18 : 1 ;
  2456F                   // 18 OPC for Mailbox 18
  2457F  Uint16 OPC19 : 1 ;
  2458F                   // 19 OPC for Mailbox 19
  2459F  Uint16 OPC20 : 1 ;
  2460F                   // 20 OPC for Mailbox 20
  2461F  Uint16 OPC21 : 1 ;
  2462F                   // 21 OPC for Mailbox 21
  2463F  Uint16 OPC22 : 1 ;
  2464F                   // 22 OPC for Mailbox 22
  2465F  Uint16 OPC23 : 1 ;
  2466F                   // 23 OPC for Mailbox 23
  2467F  Uint16 OPC24 : 1 ;
  2468F                   // 24 OPC for Mailbox 24
  2469F  Uint16 OPC25 : 1 ;
  2470F                   // 25 OPC for Mailbox 25
  2471F  Uint16 OPC26 : 1 ;
  2472F                   // 26 OPC for Mailbox 26
  2473F  Uint16 OPC27 : 1 ;
  2474F                   // 27 OPC for Mailbox 27
  2475F  Uint16 OPC28 : 1 ;
  2476F                   // 28 OPC for Mailbox 28
  2477F  Uint16 OPC29 : 1 ;
  2478F                   // 29 OPC for Mailbox 29
  2479F  Uint16 OPC30 : 1 ;
  2480F                   // 30 OPC for Mailbox 30
  2481F  Uint16 OPC31 : 1 ;
  2482F                   // 31 OPC for Mailbox 31
  2483F} ;
  2484F/* Allow access to the bit fields or entire register */
  2485F
  2486Funion CANOPC_REG
  2487F{
  2488F  Uint32 all ;
  2489F  struct CANOPC_BITS bit ;
  2490F} ;
  2491F/* eCAN TX I/O Control Register (CANTIOC) bit definitions */
  2492F
  2493Fstruct CANTIOC_BITS
  2494F{                     // bits description
  2495F  Uint16 rsvd1 : 3 ;
  2496F                   // 2:0 reserved
  2497F  Uint16 TXFUNC : 1 ;
  2498F                    // 3 TXFUNC
  2499F  Uint16 rsvd2 : 12 ;
  2500F                    // 15:4 reserved
  2501F  Uint16 rsvd3 : 16 ;
  2502F                    // 31:16 reserved
  2503F} ;
  2504F/* Allow access to the bit fields or entire register */
  2505F
  2506Funion CANTIOC_REG
  2507F{
  2508F  Uint32 all ;
  2509F  struct CANTIOC_BITS bit ;
  2510F} ;
  2511F/* eCAN RX I/O Control Register (CANRIOC) bit definitions */
  2512F
  2513Fstruct CANRIOC_BITS
  2514F{                     // bits description
  2515F  Uint16 rsvd1 : 3 ;
  2516F                   // 2:0 reserved
  2517F  Uint16 RXFUNC : 1 ;
  2518F                    // 3 RXFUNC
  2519F  Uint16 rsvd2 : 12 ;
  2520F                    // 15:4 reserved
  2521F  Uint16 rsvd3 : 16 ;
  2522F                    // 31:16 reserved
  2523F} ;
  2524F/* Allow access to the bit fields or entire register */
  2525F
  2526Funion CANRIOC_REG
  2527F{
  2528F  Uint32 all ;
  2529F  struct CANRIOC_BITS bit ;
  2530F} ;
  2531F/* eCAN Time-out Control register (CANTOC) bit definitions */
  2532F
  2533Fstruct CANTOC_BITS
  2534F{                    // bit description
  2535F  Uint16 TOC0 : 1 ;
  2536F                  // 0 TOC for Mailbox 0
  2537F  Uint16 TOC1 : 1 ;
  2538F                  // 1 TOC for Mailbox 1
  2539F  Uint16 TOC2 : 1 ;
  2540F                  // 2 TOC for Mailbox 2
  2541F  Uint16 TOC3 : 1 ;
  2542F                  // 3 TOC for Mailbox 3
  2543F  Uint16 TOC4 : 1 ;
  2544F                  // 4 TOC for Mailbox 4
  2545F  Uint16 TOC5 : 1 ;
  2546F                  // 5 TOC for Mailbox 5
  2547F  Uint16 TOC6 : 1 ;
  2548F                  // 6 TOC for Mailbox 6
  2549F  Uint16 TOC7 : 1 ;
  2550F                  // 7 TOC for Mailbox 7
  2551F  Uint16 TOC8 : 1 ;
  2552F                  // 8 TOC for Mailbox 8
  2553F  Uint16 TOC9 : 1 ;
  2554F                  // 9 TOC for Mailbox 9
  2555F  Uint16 TOC10 : 1 ;
  2556F                   // 10 TOC for Mailbox 10
  2557F  Uint16 TOC11 : 1 ;
  2558F                   // 11 TOC for Mailbox 11
  2559F  Uint16 TOC12 : 1 ;
  2560F                   // 12 TOC for Mailbox 12
  2561F  Uint16 TOC13 : 1 ;
  2562F                   // 13 TOC for Mailbox 13
  2563F  Uint16 TOC14 : 1 ;
  2564F                   // 14 TOC for Mailbox 14
  2565F  Uint16 TOC15 : 1 ;
  2566F                   // 15 TOC for Mailbox 15
  2567F  Uint16 TOC16 : 1 ;
  2568F                   // 16 TOC for Mailbox 16
  2569F  Uint16 TOC17 : 1 ;
  2570F                   // 17 TOC for Mailbox 17
  2571F  Uint16 TOC18 : 1 ;
  2572F                   // 18 TOC for Mailbox 18
  2573F  Uint16 TOC19 : 1 ;
  2574F                   // 19 TOC for Mailbox 19
  2575F  Uint16 TOC20 : 1 ;
  2576F                   // 20 TOC for Mailbox 20
  2577F  Uint16 TOC21 : 1 ;
  2578F                   // 21 TOC for Mailbox 21
  2579F  Uint16 TOC22 : 1 ;
  2580F                   // 22 TOC for Mailbox 22
  2581F  Uint16 TOC23 : 1 ;
  2582F                   // 23 TOC for Mailbox 23
  2583F  Uint16 TOC24 : 1 ;
  2584F                   // 24 TOC for Mailbox 24
  2585F  Uint16 TOC25 : 1 ;
  2586F                   // 25 TOC for Mailbox 25
  2587F  Uint16 TOC26 : 1 ;
  2588F                   // 26 TOC for Mailbox 26
  2589F  Uint16 TOC27 : 1 ;
  2590F                   // 27 TOC for Mailbox 27
  2591F  Uint16 TOC28 : 1 ;
  2592F                   // 28 TOC for Mailbox 28
  2593F  Uint16 TOC29 : 1 ;
  2594F                   // 29 TOC for Mailbox 29
  2595F  Uint16 TOC30 : 1 ;
  2596F                   // 30 TOC for Mailbox 30
  2597F  Uint16 TOC31 : 1 ;
  2598F                   // 31 TOC for Mailbox 31
  2599F} ;
  2600F/* Allow access to the bit fields or entire register */
  2601F
  2602Funion CANTOC_REG
  2603F{
  2604F  Uint32 all ;
  2605F  struct CANTOC_BITS bit ;
  2606F} ;
  2607F/* eCAN Time-out Status register (CANTOS) bit definitions */
  2608F
  2609Fstruct CANTOS_BITS
  2610F{                    // bit description
  2611F  Uint16 TOS0 : 1 ;
  2612F                  // 0 TOS for Mailbox 0
  2613F  Uint16 TOS1 : 1 ;
  2614F                  // 1 TOS for Mailbox 1
  2615F  Uint16 TOS2 : 1 ;
  2616F                  // 2 TOS for Mailbox 2
  2617F  Uint16 TOS3 : 1 ;
  2618F                  // 3 TOS for Mailbox 3
  2619F  Uint16 TOS4 : 1 ;
  2620F                  // 4 TOS for Mailbox 4
  2621F  Uint16 TOS5 : 1 ;
  2622F                  // 5 TOS for Mailbox 5
  2623F  Uint16 TOS6 : 1 ;
  2624F                  // 6 TOS for Mailbox 6
  2625F  Uint16 TOS7 : 1 ;
  2626F                  // 7 TOS for Mailbox 7
  2627F  Uint16 TOS8 : 1 ;
  2628F                  // 8 TOS for Mailbox 8
  2629F  Uint16 TOS9 : 1 ;
  2630F                  // 9 TOS for Mailbox 9
  2631F  Uint16 TOS10 : 1 ;
  2632F                   // 10 TOS for Mailbox 10
  2633F  Uint16 TOS11 : 1 ;
  2634F                   // 11 TOS for Mailbox 11
  2635F  Uint16 TOS12 : 1 ;
  2636F                   // 12 TOS for Mailbox 12
  2637F  Uint16 TOS13 : 1 ;
  2638F                   // 13 TOS for Mailbox 13
  2639F  Uint16 TOS14 : 1 ;
  2640F                   // 14 TOS for Mailbox 14
  2641F  Uint16 TOS15 : 1 ;
  2642F                   // 15 TOS for Mailbox 15
  2643F  Uint16 TOS16 : 1 ;
  2644F                   // 16 TOS for Mailbox 16
  2645F  Uint16 TOS17 : 1 ;
  2646F                   // 17 TOS for Mailbox 17
  2647F  Uint16 TOS18 : 1 ;
  2648F                   // 18 TOS for Mailbox 18
  2649F  Uint16 TOS19 : 1 ;
  2650F                   // 19 TOS for Mailbox 19
  2651F  Uint16 TOS20 : 1 ;
  2652F                   // 20 TOS for Mailbox 20
  2653F  Uint16 TOS21 : 1 ;
  2654F                   // 21 TOS for Mailbox 21
  2655F  Uint16 TOS22 : 1 ;
  2656F                   // 22 TOS for Mailbox 22
  2657F  Uint16 TOS23 : 1 ;
  2658F                   // 23 TOS for Mailbox 23
  2659F  Uint16 TOS24 : 1 ;
  2660F                   // 24 TOS for Mailbox 24
  2661F  Uint16 TOS25 : 1 ;
  2662F                   // 25 TOS for Mailbox 25
  2663F  Uint16 TOS26 : 1 ;
  2664F                   // 26 TOS for Mailbox 26
  2665F  Uint16 TOS27 : 1 ;
  2666F                   // 27 TOS for Mailbox 27
  2667F  Uint16 TOS28 : 1 ;
  2668F                   // 28 TOS for Mailbox 28
  2669F  Uint16 TOS29 : 1 ;
  2670F                   // 29 TOS for Mailbox 29
  2671F  Uint16 TOS30 : 1 ;
  2672F                   // 30 TOS for Mailbox 30
  2673F  Uint16 TOS31 : 1 ;
  2674F                   // 31 TOS for Mailbox 31
  2675F} ;
  2676F/* Allow access to the bit fields or entire register */
  2677F
  2678Funion CANTOS_REG
  2679F{
  2680F  Uint32 all ;
  2681F  struct CANTOS_BITS bit ;
  2682F} ;
  2683F/**************************************/
  2684F/* eCAN Control & Status register file */
  2685F/**************************************/
  2686F
  2687Fstruct ECAN_REGS
  2688F{
  2689F  union CANME_REG CANME ; // Mailbox Enable
  2690F  union CANMD_REG CANMD ; // Mailbox Direction
  2691F  union CANTRS_REG CANTRS ; // Transmit Request Set
  2692F  union CANTRR_REG CANTRR ; // Transmit Request Reset
  2693F  union CANTA_REG CANTA ; // Transmit Acknowledge
  2694F  union CANAA_REG CANAA ; // Abort Acknowledge
  2695F  union CANRMP_REG CANRMP ; // Received Message Pending
  2696F  union CANRML_REG CANRML ; // Received Message Lost
  2697F  union CANRFP_REG CANRFP ; // Remote Frame Pending
  2698F  union CANGAM_REG CANGAM ; // Global Acceptance Mask
  2699F  union CANMC_REG CANMC ; // Master Control
  2700F  union CANBTC_REG CANBTC ; // Bit Timing
  2701F  union CANES_REG CANES ; // Error Status
  2702F  union CANTEC_REG CANTEC ; // Transmit Error Counter
  2703F  union CANREC_REG CANREC ; // Receive Error Counter
  2704F  union CANGIF0_REG CANGIF0 ; // Global Interrupt Flag 0
  2705F  union CANGIM_REG CANGIM ; // Global Interrupt Mask 0
  2706F  union CANGIF1_REG CANGIF1 ; // Global Interrupt Flag 1
  2707F  union CANMIM_REG CANMIM ; // Mailbox Interrupt Mask
  2708F  union CANMIL_REG CANMIL ; // Mailbox Interrupt Level
  2709F  union CANOPC_REG CANOPC ; // Overwrite Protection Control
  2710F  union CANTIOC_REG CANTIOC ; // TX I/O Control
  2711F  union CANRIOC_REG CANRIOC ; // RX I/O Control
  2712F  Uint32 CANTSC ; // Time-stamp counter
  2713F  union CANTOC_REG CANTOC ; // Time-out Control
  2714F  union CANTOS_REG CANTOS ; // Time-out Status
  2715F} ;
  2716F/* --------------------------------------------------- */
  2717F/* eCAN Mailbox Registers */
  2718F/* ----------------------------------------------------*/
  2719F/* eCAN Message ID (MSGID) bit definitions */
  2720F
  2721Fstruct CANMSGID_BITS
  2722F{                      // bits description
  2723F  Uint16 EXTMSGID_L : 16 ;
  2724F                         // 0:15
  2725F  Uint16 EXTMSGID_H : 2 ;
  2726F                        // 16:17
  2727F  Uint16 STDMSGID : 11 ;
  2728F                       // 18:28
  2729F  Uint16 AAM : 1 ;
  2730F                 // 29
  2731F  Uint16 AME : 1 ;
  2732F                 // 30
  2733F  Uint16 IDE : 1 ;
  2734F                 // 31
  2735F} ;
  2736F/* Allow access to the bit fields or entire register */
  2737F
  2738Funion CANMSGID_REG
  2739F{
  2740F  Uint32 all ;
  2741F  struct CANMSGID_BITS bit ;
  2742F} ;
  2743F/* eCAN Message Control Register (MSGCTRL) bit definitions */
  2744F
  2745Fstruct CANMSGCTRL_BITS
  2746F{                        // bits description
  2747F  Uint16 DLC : 4 ;
  2748F                 // 0:3
  2749F  Uint16 RTR : 1 ;
  2750F                 // 4
  2751F  Uint16 rsvd1 : 3 ;
  2752F                   // 7:5 reserved
  2753F  Uint16 TPL : 5 ;
  2754F                 // 12:8
  2755F  Uint16 rsvd2 : 3 ;
  2756F                   // 15:13 reserved
  2757F  Uint16 rsvd3 : 16 ;
  2758F                    // 31:16 reserved
  2759F} ;
  2760F/* Allow access to the bit fields or entire register */
  2761F
  2762Funion CANMSGCTRL_REG
  2763F{
  2764F  Uint32 all ;
  2765F  struct CANMSGCTRL_BITS bit ;
  2766F} ;
  2767F/* eCAN Message Data Register low (MDR_L) word definitions */
  2768F
  2769Fstruct CANMDL_WORDS
  2770F{                     // bits description
  2771F  Uint16 LOW_WORD : 16 ;
  2772F                       // 0:15
  2773F  Uint16 HI_WORD : 16 ;
  2774F                      // 31:16
  2775F} ;
  2776F/* eCAN Message Data Register low (MDR_L) byte definitions */
  2777F
  2778Fstruct CANMDL_BYTES
  2779F{                     // bits description
  2780F  Uint16 BYTE3 : 8 ;
  2781F                   // 31:24
  2782F  Uint16 BYTE2 : 8 ;
  2783F                   // 23:16
  2784F  Uint16 BYTE1 : 8 ;
  2785F                   // 15:8
  2786F  Uint16 BYTE0 : 8 ;
  2787F                   // 7:0
  2788F} ;
  2789F/* Allow access to the bit fields or entire register */
  2790F
  2791Funion CANMDL_REG
  2792F{
  2793F  Uint32 all ;
  2794F  struct CANMDL_WORDS word ;
  2795F  struct CANMDL_BYTES byte ;
  2796F} ;
  2797F/* eCAN Message Data Register high (MDR_H) word definitions */
  2798F
  2799Fstruct CANMDH_WORDS
  2800F{                     // bits description
  2801F  Uint16 LOW_WORD : 16 ;
  2802F                       // 0:15
  2803F  Uint16 HI_WORD : 16 ;
  2804F                      // 31:16
  2805F} ;
  2806F/* eCAN Message Data Register low (MDR_H) byte definitions */
  2807F
  2808Fstruct CANMDH_BYTES
  2809F{                     // bits description
  2810F  Uint16 BYTE7 : 8 ;
  2811F                   // 63:56
  2812F  Uint16 BYTE6 : 8 ;
  2813F                   // 55:48
  2814F  Uint16 BYTE5 : 8 ;
  2815F                   // 47:40
  2816F  Uint16 BYTE4 : 8 ;
  2817F                   // 39:32
  2818F} ;
  2819F/* Allow access to the bit fields or entire register */
  2820F
  2821Funion CANMDH_REG
  2822F{
  2823F  Uint32 all ;
  2824F  struct CANMDH_WORDS word ;
  2825F  struct CANMDH_BYTES byte ;
  2826F} ;
  2827F
  2828Fstruct MBOX
  2829F{
  2830F  union CANMSGID_REG MSGID ;
  2831F  union CANMSGCTRL_REG MSGCTRL ;
  2832F  union CANMDL_REG MDL ;
  2833F  union CANMDH_REG MDH ;
  2834F} ;
  2835F/**************************************/
  2836F/* eCAN Mailboxes */
  2837F/**************************************/
  2838F
  2839Fstruct ECAN_MBOXES
  2840F{
  2841F  struct MBOX MBOX0 ;
  2842F  struct MBOX MBOX1 ;
  2843F  struct MBOX MBOX2 ;
  2844F  struct MBOX MBOX3 ;
  2845F  struct MBOX MBOX4 ;
  2846F  struct MBOX MBOX5 ;
  2847F  struct MBOX MBOX6 ;
  2848F  struct MBOX MBOX7 ;
  2849F  struct MBOX MBOX8 ;
  2850F  struct MBOX MBOX9 ;
  2851F  struct MBOX MBOX10 ;
  2852F  struct MBOX MBOX11 ;
  2853F  struct MBOX MBOX12 ;
  2854F  struct MBOX MBOX13 ;
  2855F  struct MBOX MBOX14 ;
  2856F  struct MBOX MBOX15 ;
  2857F  struct MBOX MBOX16 ;
  2858F  struct MBOX MBOX17 ;
  2859F  struct MBOX MBOX18 ;
  2860F  struct MBOX MBOX19 ;
  2861F  struct MBOX MBOX20 ;
  2862F  struct MBOX MBOX21 ;
  2863F  struct MBOX MBOX22 ;
  2864F  struct MBOX MBOX23 ;
  2865F  struct MBOX MBOX24 ;
  2866F  struct MBOX MBOX25 ;
  2867F  struct MBOX MBOX26 ;
  2868F  struct MBOX MBOX27 ;
  2869F  struct MBOX MBOX28 ;
  2870F  struct MBOX MBOX29 ;
  2871F  struct MBOX MBOX30 ;
  2872F  struct MBOX MBOX31 ;
  2873F} ;
  2874F/* eCAN Local Acceptance Mask (LAM) bit definitions */
  2875F
  2876Fstruct CANLAM_BITS
  2877F{                    // bits description
  2878F  Uint16 LAM_L : 16 ;
  2879F                    // 0:15
  2880F  Uint16 LAM_H : 13 ;
  2881F                    // 16:28
  2882F  Uint16 rsvd1 : 2 ;
  2883F                   // 29:30 reserved
  2884F  Uint16 LAMI : 1 ;
  2885F                  // 31
  2886F} ;
  2887F/* Allow access to the bit fields or entire register */
  2888F
  2889Funion CANLAM_REG
  2890F{
  2891F  Uint32 all ;
  2892F  struct CANLAM_BITS bit ;
  2893F} ;
  2894F/**************************************/
  2895F/* eCAN Local Acceptance Masks */
  2896F/**************************************/
  2897F/* eCAN LAM File */
  2898F
  2899Fstruct LAM_REGS
  2900F{
  2901F  union CANLAM_REG LAM0 ;
  2902F  union CANLAM_REG LAM1 ;
  2903F  union CANLAM_REG LAM2 ;
  2904F  union CANLAM_REG LAM3 ;
  2905F  union CANLAM_REG LAM4 ;
  2906F  union CANLAM_REG LAM5 ;
  2907F  union CANLAM_REG LAM6 ;
  2908F  union CANLAM_REG LAM7 ;
  2909F  union CANLAM_REG LAM8 ;
  2910F  union CANLAM_REG LAM9 ;
  2911F  union CANLAM_REG LAM10 ;
  2912F  union CANLAM_REG LAM11 ;
  2913F  union CANLAM_REG LAM12 ;
  2914F  union CANLAM_REG LAM13 ;
  2915F  union CANLAM_REG LAM14 ;
  2916F  union CANLAM_REG LAM15 ;
  2917F  union CANLAM_REG LAM16 ;
  2918F  union CANLAM_REG LAM17 ;
  2919F  union CANLAM_REG LAM18 ;
  2920F  union CANLAM_REG LAM19 ;
  2921F  union CANLAM_REG LAM20 ;
  2922F  union CANLAM_REG LAM21 ;
  2923F  union CANLAM_REG LAM22 ;
  2924F  union CANLAM_REG LAM23 ;
  2925F  union CANLAM_REG LAM24 ;
  2926F  union CANLAM_REG LAM25 ;
  2927F  union CANLAM_REG LAM26 ;
  2928F  union CANLAM_REG LAM27 ;
  2929F  union CANLAM_REG LAM28 ;
  2930F  union CANLAM_REG LAM29 ;
  2931F  union CANLAM_REG LAM30 ;
  2932F  union CANLAM_REG LAM31 ;
  2933F} ;
  2934F/* Mailbox MOTS File */
  2935F
  2936Fstruct MOTS_REGS
  2937F{
  2938F  Uint32 MOTS0 ;
  2939F  Uint32 MOTS1 ;
  2940F  Uint32 MOTS2 ;
  2941F  Uint32 MOTS3 ;
  2942F  Uint32 MOTS4 ;
  2943F  Uint32 MOTS5 ;
  2944F  Uint32 MOTS6 ;
  2945F  Uint32 MOTS7 ;
  2946F  Uint32 MOTS8 ;
  2947F  Uint32 MOTS9 ;
  2948F  Uint32 MOTS10 ;
  2949F  Uint32 MOTS11 ;
  2950F  Uint32 MOTS12 ;
  2951F  Uint32 MOTS13 ;
  2952F  Uint32 MOTS14 ;
  2953F  Uint32 MOTS15 ;
  2954F  Uint32 MOTS16 ;
  2955F  Uint32 MOTS17 ;
  2956F  Uint32 MOTS18 ;
  2957F  Uint32 MOTS19 ;
  2958F  Uint32 MOTS20 ;
  2959F  Uint32 MOTS21 ;
  2960F  Uint32 MOTS22 ;
  2961F  Uint32 MOTS23 ;
  2962F  Uint32 MOTS24 ;
  2963F  Uint32 MOTS25 ;
  2964F  Uint32 MOTS26 ;
  2965F  Uint32 MOTS27 ;
  2966F  Uint32 MOTS28 ;
  2967F  Uint32 MOTS29 ;
  2968F  Uint32 MOTS30 ;
  2969F  Uint32 MOTS31 ;
  2970F} ;
  2971F/* Mailbox MOTO File */
  2972F
  2973Fstruct MOTO_REGS
  2974F{
  2975F  Uint32 MOTO0 ;
  2976F  Uint32 MOTO1 ;
  2977F  Uint32 MOTO2 ;
  2978F  Uint32 MOTO3 ;
  2979F  Uint32 MOTO4 ;
  2980F  Uint32 MOTO5 ;
  2981F  Uint32 MOTO6 ;
  2982F  Uint32 MOTO7 ;
  2983F  Uint32 MOTO8 ;
  2984F  Uint32 MOTO9 ;
  2985F  Uint32 MOTO10 ;
  2986F  Uint32 MOTO11 ;
  2987F  Uint32 MOTO12 ;
  2988F  Uint32 MOTO13 ;
  2989F  Uint32 MOTO14 ;
  2990F  Uint32 MOTO15 ;
  2991F  Uint32 MOTO16 ;
  2992F  Uint32 MOTO17 ;
  2993F  Uint32 MOTO18 ;
  2994F  Uint32 MOTO19 ;
  2995F  Uint32 MOTO20 ;
  2996F  Uint32 MOTO21 ;
  2997F  Uint32 MOTO22 ;
  2998F  Uint32 MOTO23 ;
  2999F  Uint32 MOTO24 ;
  3000F  Uint32 MOTO25 ;
  3001F  Uint32 MOTO26 ;
  3002F  Uint32 MOTO27 ;
  3003F  Uint32 MOTO28 ;
  3004F  Uint32 MOTO29 ;
  3005F  Uint32 MOTO30 ;
  3006F  Uint32 MOTO31 ;
  3007F} ;
  3008F//---------------------------------------------------------------------------
  3009F// eCAN External References & Function Declarations:
  3010F//
  3011F
  3012Fextern volatile struct ECAN_REGS
  3013F  ECanaRegs ;
  3014F
  3015Fextern volatile struct ECAN_MBOXES
  3016F  ECanaMboxes ;
  3017F
  3018Fextern volatile struct LAM_REGS
  3019F  ECanaLAMRegs ;
  3020F
  3021Fextern volatile struct MOTO_REGS
  3022F  ECanaMOTORegs ;
  3023F
  3024Fextern volatile struct MOTS_REGS
  3025F  ECanaMOTSRegs ;
  3026F
  3027Fextern volatile struct ECAN_REGS
  3028F  ECanbRegs ;
  3029F
  3030Fextern volatile struct ECAN_MBOXES
  3031F  ECanbMboxes ;
  3032F
  3033Fextern volatile struct LAM_REGS
  3034F  ECanbLAMRegs ;
  3035F
  3036Fextern volatile struct MOTO_REGS
  3037F  ECanbMOTORegs ;
  3038F
  3039Fextern volatile struct MOTS_REGS
  3040F  ECanbMOTSRegs ;
  3041F       /* extern "C" */
  3042F       // end of DSP2833x_ECAN.H definition
  3043F//===========================================================================
  3044F// End of file.
  3045F//===========================================================================
  3046F 
  3047F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECan.h*/
  3048F/*   CLOSE_FILE Include File */
  3049F 
  3050F               // Enhanced eCAN Registers
  3051F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECap.h */
  3052F// TI File $Revision: /main/1 $
  3053F// Checkin $Date: August 18, 2006 13:52:07 $
  3054F//###########################################################################
  3055F//
  3056F// FILE: DSP2833x_ECap.h
  3057F//
  3058F// TITLE: DSP2833x Enhanced Capture Module Register Bit Definitions.
  3059F//
  3060F//###########################################################################
  3061F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  3062F// $Release Date: August 4, 2009 $
  3063F//###########################################################################
  3064F#ifndef DSP2833x_ECAP_H
  3065F#define DSP2833x_ECAP_H
  3066F//----------------------------------------------------
  3067F// Capture control register 1 bit definitions */
  3068F
  3069Fstruct ECCTL1_BITS
  3070F{                    // bits description
  3071F  Uint16 CAP1POL : 1 ;
  3072F                     // 0 Capture Event 1 Polarity select
  3073F  Uint16 CTRRST1 : 1 ;
  3074F                     // 1 Counter Reset on Capture Event 1
  3075F  Uint16 CAP2POL : 1 ;
  3076F                     // 2 Capture Event 2 Polarity select
  3077F  Uint16 CTRRST2 : 1 ;
  3078F                     // 3 Counter Reset on Capture Event 2
  3079F  Uint16 CAP3POL : 1 ;
  3080F                     // 4 Capture Event 3 Polarity select
  3081F  Uint16 CTRRST3 : 1 ;
  3082F                     // 5 Counter Reset on Capture Event 3
  3083F  Uint16 CAP4POL : 1 ;
  3084F                     // 6 Capture Event 4 Polarity select
  3085F  Uint16 CTRRST4 : 1 ;
  3086F                     // 7 Counter Reset on Capture Event 4
  3087F  Uint16 CAPLDEN : 1 ;
  3088F                     // 8 Enable Loading CAP1-4 regs on a Cap Event
  3089F  Uint16 PRESCALE : 5 ;
  3090F                      // 13:9 Event Filter prescale select
  3091F  Uint16 FREE_SOFT : 2 ;
  3092F                       // 15:14 Emulation mode
  3093F} ;
  3094F
  3095Funion ECCTL1_REG
  3096F{
  3097F  Uint16 all ;
  3098F  struct ECCTL1_BITS bit ;
  3099F} ;
  3100F// In V1.1 the STOPVALUE bit field was changed to
  3101F// STOP_WRAP. This correlated to a silicon change from
  3102F// F2833x Rev 0 to Rev A.
  3103F//----------------------------------------------------
  3104F// Capture control register 2 bit definitions */
  3105F
  3106Fstruct ECCTL2_BITS
  3107F{                    // bits description
  3108F  Uint16 CONT_ONESHT : 1 ;
  3109F                         // 0 Continuous or one-shot
  3110F  Uint16 STOP_WRAP : 2 ;
  3111F                       // 2:1 Stop value for one-shot, Wrap for continuous
  3112F  Uint16 REARM : 1 ;
  3113F                   // 3 One-shot re-arm
  3114F  Uint16 TSCTRSTOP : 1 ;
  3115F                       // 4 TSCNT counter stop
  3116F  Uint16 SYNCI_EN : 1 ;
  3117F                      // 5 Counter sync-in select
  3118F  Uint16 SYNCO_SEL : 2 ;
  3119F                       // 7:6 Sync-out mode
  3120F  Uint16 SWSYNC : 1 ;
  3121F                    // 8 SW forced counter sync
  3122F  Uint16 CAP_APWM : 1 ;
  3123F                      // 9 CAP/APWM operating mode select
  3124F  Uint16 APWMPOL : 1 ;
  3125F                     // 10 APWM output polarity select
  3126F  Uint16 rsvd1 : 5 ;
  3127F                   // 15:11
  3128F} ;
  3129F
  3130Funion ECCTL2_REG
  3131F{
  3132F  Uint16 all ;
  3133F  struct ECCTL2_BITS bit ;
  3134F} ;
  3135F//----------------------------------------------------
  3136F// ECAP interrupt enable register bit definitions */
  3137F
  3138Fstruct ECEINT_BITS
  3139F{                    // bits description
  3140F  Uint16 rsvd1 : 1 ;
  3141F                   // 0 reserved
  3142F  Uint16 CEVT1 : 1 ;
  3143F                   // 1 Capture Event 1 Interrupt Enable
  3144F  Uint16 CEVT2 : 1 ;
  3145F                   // 2 Capture Event 2 Interrupt Enable
  3146F  Uint16 CEVT3 : 1 ;
  3147F                   // 3 Capture Event 3 Interrupt Enable
  3148F  Uint16 CEVT4 : 1 ;
  3149F                   // 4 Capture Event 4 Interrupt Enable
  3150F  Uint16 CTROVF : 1 ;
  3151F                    // 5 Counter Overflow Interrupt Enable
  3152F  Uint16 CTR_EQ_PRD : 1 ;
  3153F                        // 6 Period Equal Interrupt Enable
  3154F  Uint16 CTR_EQ_CMP : 1 ;
  3155F                        // 7 Compare Equal Interrupt Enable
  3156F  Uint16 rsvd2 : 8 ;
  3157F                   // 15:8 reserved
  3158F} ;
  3159F
  3160Funion ECEINT_REG
  3161F{
  3162F  Uint16 all ;
  3163F  struct ECEINT_BITS bit ;
  3164F} ;
  3165F//----------------------------------------------------
  3166F// ECAP interrupt flag register bit definitions */
  3167F
  3168Fstruct ECFLG_BITS
  3169F{                   // bits description
  3170F  Uint16 INT : 1 ;
  3171F                 // 0 Global Flag
  3172F  Uint16 CEVT1 : 1 ;
  3173F                   // 1 Capture Event 1 Interrupt Flag
  3174F  Uint16 CEVT2 : 1 ;
  3175F                   // 2 Capture Event 2 Interrupt Flag
  3176F  Uint16 CEVT3 : 1 ;
  3177F                   // 3 Capture Event 3 Interrupt Flag
  3178F  Uint16 CEVT4 : 1 ;
  3179F                   // 4 Capture Event 4 Interrupt Flag
  3180F  Uint16 CTROVF : 1 ;
  3181F                    // 5 Counter Overflow Interrupt Flag
  3182F  Uint16 CTR_EQ_PRD : 1 ;
  3183F                        // 6 Period Equal Interrupt Flag
  3184F  Uint16 CTR_EQ_CMP : 1 ;
  3185F                        // 7 Compare Equal Interrupt Flag
  3186F  Uint16 rsvd2 : 8 ;
  3187F                   // 15:8 reserved
  3188F} ;
  3189F
  3190Funion ECFLG_REG
  3191F{
  3192F  Uint16 all ;
  3193F  struct ECFLG_BITS bit ;
  3194F} ;
  3195F//----------------------------------------------------
  3196F
  3197Fstruct ECAP_REGS
  3198F{
  3199F  Uint32 TSCTR ; // Time stamp counter
  3200F  Uint32 CTRPHS ; // Counter phase
  3201F  Uint32 CAP1 ; // Capture 1
  3202F  Uint32 CAP2 ; // Capture 2
  3203F  Uint32 CAP3 ; // Capture 3
  3204F  Uint32 CAP4 ; // Capture 4
  3205F  Uint16 rsvd1 [ 8 ] ;
  3206F                    // reserved
  3207F  union ECCTL1_REG ECCTL1 ; // Capture Control Reg 1
  3208F  union ECCTL2_REG ECCTL2 ; // Capture Control Reg 2
  3209F  union ECEINT_REG ECEINT ; // ECAP interrupt enable
  3210F  union ECFLG_REG ECFLG ; // ECAP interrupt flags
  3211F  union ECFLG_REG ECCLR ; // ECAP interrupt clear
  3212F  union ECEINT_REG ECFRC ; // ECAP interrupt force
  3213F  Uint16 rsvd2 [ 6 ] ;
  3214F                    // reserved
  3215F} ;
  3216F//---------------------------------------------------------------------------
  3217F// GPI/O External References & Function Declarations:
  3218F//
  3219F
  3220Fextern volatile struct ECAP_REGS
  3221F  ECap1Regs ;
  3222F
  3223Fextern volatile struct ECAP_REGS
  3224F  ECap2Regs ;
  3225F
  3226Fextern volatile struct ECAP_REGS
  3227F  ECap3Regs ;
  3228F
  3229Fextern volatile struct ECAP_REGS
  3230F  ECap4Regs ;
  3231F
  3232Fextern volatile struct ECAP_REGS
  3233F  ECap5Regs ;
  3234F
  3235Fextern volatile struct ECAP_REGS
  3236F  ECap6Regs ;
  3237F       /* extern "C" */
  3238F       // end of DSP2833x_ECAP_H definition
  3239F//===========================================================================
  3240F// End of file.
  3241F//===========================================================================
  3242F 
  3243F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECap.h*/
  3244F/*   CLOSE_FILE Include File */
  3245F 
  3246F               // Enhanced Capture
  3247F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DMA.h */
  3248F// TI File $Revision: /main/11 $
  3249F// Checkin $Date: June 23, 2008 11:34:15 $
  3250F//###########################################################################
  3251F//
  3252F// FILE: DSP2833x_DMA.h
  3253F//
  3254F// TITLE: DSP2833x DMA Module Register Bit Definitions.
  3255F//
  3256F//###########################################################################
  3257F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  3258F// $Release Date: August 4, 2009 $
  3259F//###########################################################################
  3260F#ifndef DSP2833x_DMA_H
  3261F#define DSP2833x_DMA_H
  3262F//----------------------------------------------------
  3263F// Channel MODE register bit definitions:
  3264F
  3265Fstruct MODE_BITS
  3266F{                  // bits description
  3267F  Uint16 PERINTSEL : 5 ;
  3268F                       // 4:0 Peripheral Interrupt and Sync Select Bits (R/W):
  3269F                             // 0 no interrupt
  3270F               // 1 SEQ1INT & ADCSYNC
  3271F                             // 2 SEQ2INT
  3272F               // 3 XINT1
  3273F               // 4 XINT2
  3274F               // 5 XINT3
  3275F               // 6 XINT4
  3276F               // 7 XINT5
  3277F               // 8 XINT6
  3278F               // 9 XINT7
  3279F               // 10 XINT13
  3280F               // 11 TINT0
  3281F               // 12 TINT1
  3282F               // 13 TINT2
  3283F               // 14 MXEVTA & MXSYNCA
  3284F               // 15 MREVTA & MRSYNCA
  3285F               // 16 MXEVTB & MXSYNCB
  3286F               // 17 MREVTB & MRSYNCB
  3287F                                 // 18 ePWM1SOCA
  3288F                                 // 19 ePWM1SOCB
  3289F                                 // 20 ePWM2SOCA
  3290F                                 // 21 ePWM2SOCB
  3291F                                 // 22 ePWM3SOCA
  3292F                                 // 23 ePWM3SOCB
  3293F                                 // 24 ePWM4SOCA
  3294F                                 // 25 ePWM4SOCB
  3295F                                 // 26 ePWM5SOCA
  3296F                                 // 27 ePWM5SOCB
  3297F                                 // 28 ePWM6SOCA
  3298F                                 // 29 ePWM6SOCB
  3299F                                 // 30:31 no interrupt
  3300F  Uint16 rsvd1 : 2 ;
  3301F                   // 6:5 (R=0:0)
  3302F  Uint16 OVRINTE : 1 ;
  3303F                     // 7 Overflow Interrupt Enable (R/W):
  3304F                             // 0 overflow interrupt disabled
  3305F                             // 1 overflow interrupt enabled
  3306F  Uint16 PERINTE : 1 ;
  3307F                     // 8 Peripheral Interrupt Enable Bit (R/W):
  3308F                             // 0 peripheral interrupt disabled
  3309F                             // 1 peripheral interrupt enabled
  3310F  Uint16 CHINTMODE : 1 ;
  3311F                       // 9 Channel Interrupt Mode Bit (R/W):
  3312F                             // 0 generate interrupt at beginning of new transfer
  3313F                             // 1 generate interrupt at end of transfer
  3314F  Uint16 ONESHOT : 1 ;
  3315F                     // 10 One Shot Mode Bit (R/W):
  3316F                             // 0 only interrupt event triggers single burst transfer
  3317F                             // 1 first interrupt triggers burst, continue until transfer count is zero
  3318F  Uint16 CONTINUOUS : 1 ;
  3319F                        // 11 Continous Mode Bit (R/W):
  3320F                             // 0 stop when transfer count is zero
  3321F                             // 1 re-initialize when transfer count is zero
  3322F  Uint16 SYNCE : 1 ;
  3323F                   // 12 Sync Enable Bit (R/W):
  3324F                             // 0 ignore selected interrupt sync signal
  3325F                             // 1 enable selected interrupt sync signal
  3326F  Uint16 SYNCSEL : 1 ;
  3327F                     // 13 Sync Select Bit (R/W):
  3328F                             // 0 sync signal controls source wrap counter
  3329F                             // 1 sync signal controls destination wrap counter
  3330F  Uint16 DATASIZE : 1 ;
  3331F                      // 14 Data Size Mode Bit (R/W):
  3332F                             // 0 16-bit data transfer size
  3333F                             // 1 32-bit data transfer size
  3334F  Uint16 CHINTE : 1 ;
  3335F                    // 15 Channel Interrupt Enable Bit (R/W):
  3336F                             // 0 channel interrupt disabled
  3337F                             // 1 channel interrupt enabled
  3338F} ;
  3339F
  3340Funion MODE_REG
  3341F{
  3342F  Uint16 all ;
  3343F  struct MODE_BITS bit ;
  3344F} ;
  3345F//----------------------------------------------------
  3346F// Channel CONTROL register bit definitions:
  3347F
  3348Fstruct CONTROL_BITS
  3349F{                     // bits description
  3350F  Uint16 RUN : 1 ;
  3351F                 // 0 Run Bit (R=0/W=1)
  3352F  Uint16 HALT : 1 ;
  3353F                  // 1 Halt Bit (R=0/W=1)
  3354F  Uint16 SOFTRESET : 1 ;
  3355F                       // 2 Soft Reset Bit (R=0/W=1)
  3356F  Uint16 PERINTFRC : 1 ;
  3357F                       // 3 Interrupt Force Bit (R=0/W=1)
  3358F  Uint16 PERINTCLR : 1 ;
  3359F                       // 4 Interrupt Clear Bit (R=0/W=1)
  3360F  Uint16 SYNCFRC : 1 ;
  3361F                     // 5 Sync Force Bit (R=0/W=1)
  3362F  Uint16 SYNCCLR : 1 ;
  3363F                     // 6 Sync Clear Bit (R=0/W=1)
  3364F  Uint16 ERRCLR : 1 ;
  3365F                    // 7 Error Clear Bit (R=0/W=1)
  3366F  Uint16 PERINTFLG : 1 ;
  3367F                       // 8 Interrupt Flag Bit (R):
  3368F                             // 0 no interrupt pending
  3369F                             // 1 interrupt pending
  3370F  Uint16 SYNCFLG : 1 ;
  3371F                     // 9 Sync Flag Bit (R):
  3372F                             // 0 no sync pending
  3373F                             // 1 sync pending
  3374F  Uint16 SYNCERR : 1 ;
  3375F                     // 10 Sync Error Flag Bit (R):
  3376F                             // 0 no sync error
  3377F                             // 1 sync error detected
  3378F  Uint16 TRANSFERSTS : 1 ;
  3379F                         // 11 Transfer Status Bit (R):
  3380F                             // 0 no transfer in progress or pending
  3381F                             // 1 transfer in progress or pending
  3382F  Uint16 BURSTSTS : 1 ;
  3383F                      // 12 Burst Status Bit (R):
  3384F                             // 0 no burst in progress or pending
  3385F                             // 1 burst in progress or pending
  3386F  Uint16 RUNSTS : 1 ;
  3387F                    // 13 Run Status Bit (R):
  3388F                             // 0 channel not running or halted
  3389F                             // 1 channel running
  3390F  Uint16 OVRFLG : 1 ;
  3391F                    // 14 Overflow Flag Bit(R)
  3392F                             // 0 no overflow event
  3393F                             // 1 overflow event
  3394F  Uint16 rsvd1 : 1 ;
  3395F                   // 15 (R=0)
  3396F} ;
  3397F
  3398Funion CONTROL_REG
  3399F{
  3400F  Uint16 all ;
  3401F  struct CONTROL_BITS bit ;
  3402F} ;
  3403F//----------------------------------------------------
  3404F// DMACTRL register bit definitions:
  3405F
  3406Fstruct DMACTRL_BITS
  3407F{                     // bits description
  3408F  Uint16 HARDRESET : 1 ;
  3409F                       // 0 Hard Reset Bit (R=0/W=1)
  3410F  Uint16 PRIORITYRESET : 1 ;
  3411F                           // 1 Priority Reset Bit (R=0/W=1)
  3412F  Uint16 rsvd1 : 14 ;
  3413F                    // 15:2 (R=0:0)
  3414F} ;
  3415F
  3416Funion DMACTRL_REG
  3417F{
  3418F  Uint16 all ;
  3419F  struct DMACTRL_BITS bit ;
  3420F} ;
  3421F//----------------------------------------------------
  3422F// DEBUGCTRL register bit definitions:
  3423F
  3424Fstruct DEBUGCTRL_BITS
  3425F{                       // bits description
  3426F  Uint16 rsvd1 : 15 ;
  3427F                    // 14:0 (R=0:0)
  3428F  Uint16 FREE : 1 ;
  3429F                  // 15 Debug Mode Bit (R/W):
  3430F                             // 0 halt after current read-write operation
  3431F                             // 1 continue running
  3432F} ;
  3433F
  3434Funion DEBUGCTRL_REG
  3435F{
  3436F  Uint16 all ;
  3437F  struct DEBUGCTRL_BITS bit ;
  3438F} ;
  3439F//----------------------------------------------------
  3440F// PRIORITYCTRL1 register bit definitions:
  3441F
  3442Fstruct PRIORITYCTRL1_BITS
  3443F{                           // bits description
  3444F  Uint16 CH1PRIORITY : 1 ;
  3445F                         // 0 Ch1 Priority Bit (R/W):
  3446F                             // 0 same priority as all other channels
  3447F                             // 1 highest priority channel
  3448F  Uint16 rsvd1 : 15 ;
  3449F                    // 15:1 (R=0:0)
  3450F} ;
  3451F
  3452Funion PRIORITYCTRL1_REG
  3453F{
  3454F  Uint16 all ;
  3455F  struct PRIORITYCTRL1_BITS bit ;
  3456F} ;
  3457F//----------------------------------------------------
  3458F// PRIORITYSTAT register bit definitions:
  3459F
  3460Fstruct PRIORITYSTAT_BITS
  3461F{                          // bits description
  3462F  Uint16 ACTIVESTS : 3 ;
  3463F                       // 2:0 Active Channel Status Bits (R):
  3464F                              // 0,0,0 no channel active
  3465F                              // 0,0,1 Ch1 channel active
  3466F                              // 0,1,0 Ch2 channel active
  3467F                              // 0,1,1 Ch3 channel active
  3468F                              // 1,0,0 Ch4 channel active
  3469F                              // 1,0,1 Ch5 channel active
  3470F                              // 1,1,0 Ch6 channel active
  3471F  Uint16 rsvd1 : 1 ;
  3472F                   // 3 (R=0)
  3473F  Uint16 ACTIVESTS_SHADOW : 3 ;
  3474F                              // 6:4 Active Channel Status Shadow Bits (R):
  3475F                              // 0,0,0 no channel active and interrupted by Ch1
  3476F                              // 0,0,1 cannot occur
  3477F                              // 0,1,0 Ch2 was active and interrupted by Ch1
  3478F                              // 0,1,1 Ch3 was active and interrupted by Ch1
  3479F                              // 1,0,0 Ch4 was active and interrupted by Ch1
  3480F                              // 1,0,1 Ch5 was active and interrupted by Ch1
  3481F                              // 1,1,0 Ch6 was active and interrupted by Ch1
  3482F  Uint16 rsvd2 : 9 ;
  3483F                   // 15:7 (R=0:0)
  3484F} ;
  3485F
  3486Funion PRIORITYSTAT_REG
  3487F{
  3488F  Uint16 all ;
  3489F  struct PRIORITYSTAT_BITS bit ;
  3490F} ;
  3491F// Burst Size
  3492F
  3493Fstruct BURST_SIZE_BITS
  3494F{                        // bits description
  3495F  Uint16 BURSTSIZE : 5 ;
  3496F                       // 4:0 Burst transfer size
  3497F  Uint16 rsvd1 : 11 ;
  3498F                    // 15:5 reserved
  3499F} ;
  3500F
  3501Funion BURST_SIZE_REG
  3502F{
  3503F  Uint16 all ;
  3504F  struct BURST_SIZE_BITS bit ;
  3505F} ;
  3506F// Burst Count
  3507F
  3508Fstruct BURST_COUNT_BITS
  3509F{                         // bits description
  3510F  Uint16 BURSTCOUNT : 5 ;
  3511F                        // 4:0 Burst transfer size
  3512F  Uint16 rsvd1 : 11 ;
  3513F                    // 15:5 reserved
  3514F} ;
  3515F
  3516Funion BURST_COUNT_REG
  3517F{
  3518F  Uint16 all ;
  3519F  struct BURST_COUNT_BITS bit ;
  3520F} ;
  3521F//----------------------------------------------------
  3522F// DMA Channel Registers:
  3523F
  3524Fstruct CH_REGS
  3525F{
  3526F  union MODE_REG MODE ; // Mode Register
  3527F  union CONTROL_REG CONTROL ; // Control Register
  3528F  union BURST_SIZE_REG BURST_SIZE ; // Burst Size Register
  3529F  union BURST_COUNT_REG BURST_COUNT ; // Burst Count Register
  3530F  int16 SRC_BURST_STEP ; // Source Burst Step Register
  3531F  int16 DST_BURST_STEP ; // Destination Burst Step Register
  3532F  Uint16 TRANSFER_SIZE ; // Transfer Size Register
  3533F  Uint16 TRANSFER_COUNT ; // Transfer Count Register
  3534F  int16 SRC_TRANSFER_STEP ; // Source Transfer Step Register
  3535F  int16 DST_TRANSFER_STEP ; // Destination Transfer Step Register
  3536F  Uint16 SRC_WRAP_SIZE ; // Source Wrap Size Register
  3537F  Uint16 SRC_WRAP_COUNT ; // Source Wrap Count Register
  3538F  int16 SRC_WRAP_STEP ; // Source Wrap Step Register
  3539F  Uint16 DST_WRAP_SIZE ; // Destination Wrap Size Register
  3540F  Uint16 DST_WRAP_COUNT ; // Destination Wrap Count Register
  3541F  int16 DST_WRAP_STEP ; // Destination Wrap Step Register
  3542F  Uint32 SRC_BEG_ADDR_SHADOW ; // Source Begin Address Shadow Register
  3543F  Uint32 SRC_ADDR_SHADOW ; // Source Address Shadow Register
  3544F  Uint32 SRC_BEG_ADDR_ACTIVE ; // Source Begin Address Active Register
  3545F  Uint32 SRC_ADDR_ACTIVE ; // Source Address Active Register
  3546F  Uint32 DST_BEG_ADDR_SHADOW ; // Destination Begin Address Shadow Register
  3547F  Uint32 DST_ADDR_SHADOW ; // Destination Address Shadow Register
  3548F  Uint32 DST_BEG_ADDR_ACTIVE ; // Destination Begin Address Active Register
  3549F  Uint32 DST_ADDR_ACTIVE ; // Destination Address Active Register
  3550F} ;
  3551F//----------------------------------------------------
  3552F// DMA Registers:
  3553F
  3554Fstruct DMA_REGS
  3555F{
  3556F  union DMACTRL_REG DMACTRL ; // DMA Control Register
  3557F  union DEBUGCTRL_REG DEBUGCTRL ; // Debug Control Register
  3558F  Uint16 rsvd0 ; // reserved
  3559F  Uint16 rsvd1 ; //
  3560F  union PRIORITYCTRL1_REG PRIORITYCTRL1 ; // Priority Control 1 Register
  3561F  Uint16 rsvd2 ; //
  3562F  union PRIORITYSTAT_REG PRIORITYSTAT ; // Priority Status Register
  3563F  Uint16 rsvd3 [ 25 ] ;
  3564F                     //
  3565F  struct CH_REGS CH1 ; // DMA Channel 1 Registers
  3566F  struct CH_REGS CH2 ; // DMA Channel 2 Registers
  3567F  struct CH_REGS CH3 ; // DMA Channel 3 Registers
  3568F  struct CH_REGS CH4 ; // DMA Channel 4 Registers
  3569F  struct CH_REGS CH5 ; // DMA Channel 5 Registers
  3570F  struct CH_REGS CH6 ; // DMA Channel 6 Registers
  3571F} ;
  3572F//---------------------------------------------------------------------------
  3573F// External References & Function Declarations:
  3574F//
  3575F
  3576Fextern volatile struct DMA_REGS
  3577F  DmaRegs ;
  3578F       /* extern "C" */
  3579F       // end of DSP2833x_DMA_H definition
  3580F//===========================================================================
  3581F// End of file.
  3582F//===========================================================================
  3583F 
  3584F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DMA.h*/
  3585F/*   CLOSE_FILE Include File */
  3586F 
  3587F                // DMA Registers
  3588F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EPwm.h */
  3589F// TI File $Revision: /main/1 $
  3590F// Checkin $Date: August 18, 2006 13:52:10 $
  3591F//###########################################################################
  3592F//
  3593F// FILE: DSP2833x_EPwm.h
  3594F//
  3595F// TITLE: DSP2833x Enhanced PWM Module Register Bit Definitions.
  3596F//
  3597F//###########################################################################
  3598F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  3599F// $Release Date: August 4, 2009 $
  3600F//###########################################################################
  3601F#ifndef DSP2833x_EPWM_H
  3602F#define DSP2833x_EPWM_H
  3603F//----------------------------------------------------
  3604F// Time base control register bit definitions */
  3605F
  3606Fstruct TBCTL_BITS
  3607F{                   // bits description
  3608F  Uint16 CTRMODE : 2 ;
  3609F                     // 1:0 Counter Mode
  3610F  Uint16 PHSEN : 1 ;
  3611F                   // 2 Phase load enable
  3612F  Uint16 PRDLD : 1 ;
  3613F                   // 3 Active period load
  3614F  Uint16 SYNCOSEL : 2 ;
  3615F                      // 5:4 Sync output select
  3616F  Uint16 SWFSYNC : 1 ;
  3617F                     // 6 Software force sync pulse
  3618F  Uint16 HSPCLKDIV : 3 ;
  3619F                       // 9:7 High speed time pre-scale
  3620F  Uint16 CLKDIV : 3 ;
  3621F                    // 12:10 Timebase clock pre-scale
  3622F  Uint16 PHSDIR : 1 ;
  3623F                    // 13 Phase Direction
  3624F  Uint16 FREE_SOFT : 2 ;
  3625F                       // 15:14 Emulation mode
  3626F} ;
  3627F
  3628Funion TBCTL_REG
  3629F{
  3630F  Uint16 all ;
  3631F  struct TBCTL_BITS bit ;
  3632F} ;
  3633F//----------------------------------------------------
  3634F// Time base status register bit definitions */
  3635F
  3636Fstruct TBSTS_BITS
  3637F{                   // bits description
  3638F  Uint16 CTRDIR : 1 ;
  3639F                    // 0 Counter direction status
  3640F  Uint16 SYNCI : 1 ;
  3641F                   // 1 External input sync status
  3642F  Uint16 CTRMAX : 1 ;
  3643F                    // 2 Counter max latched status
  3644F  Uint16 rsvd1 : 13 ;
  3645F                    // 15:3 reserved
  3646F} ;
  3647F
  3648Funion TBSTS_REG
  3649F{
  3650F  Uint16 all ;
  3651F  struct TBSTS_BITS bit ;
  3652F} ;
  3653F//----------------------------------------------------
  3654F// Compare control register bit definitions */
  3655F
  3656Fstruct CMPCTL_BITS
  3657F{                    // bits description
  3658F  Uint16 LOADAMODE : 2 ;
  3659F                       // 0:1 Active compare A
  3660F  Uint16 LOADBMODE : 2 ;
  3661F                       // 3:2 Active compare B
  3662F  Uint16 SHDWAMODE : 1 ;
  3663F                       // 4 Compare A block operating mode
  3664F  Uint16 rsvd1 : 1 ;
  3665F                   // 5 reserved
  3666F  Uint16 SHDWBMODE : 1 ;
  3667F                       // 6 Compare B block operating mode
  3668F  Uint16 rsvd2 : 1 ;
  3669F                   // 7 reserved
  3670F  Uint16 SHDWAFULL : 1 ;
  3671F                       // 8 Compare A Shadow registers full Status
  3672F  Uint16 SHDWBFULL : 1 ;
  3673F                       // 9 Compare B Shadow registers full Status
  3674F  Uint16 rsvd3 : 6 ;
  3675F                   // 15:10 reserved
  3676F} ;
  3677F
  3678Funion CMPCTL_REG
  3679F{
  3680F  Uint16 all ;
  3681F  struct CMPCTL_BITS bit ;
  3682F} ;
  3683F//----------------------------------------------------
  3684F// Action qualifier register bit definitions */
  3685F
  3686Fstruct AQCTL_BITS
  3687F{                   // bits description
  3688F  Uint16 ZRO : 2 ;
  3689F                 // 1:0 Action Counter = Zero
  3690F  Uint16 PRD : 2 ;
  3691F                 // 3:2 Action Counter = Period
  3692F  Uint16 CAU : 2 ;
  3693F                 // 5:4 Action Counter = Compare A up
  3694F  Uint16 CAD : 2 ;
  3695F                 // 7:6 Action Counter = Compare A down
  3696F  Uint16 CBU : 2 ;
  3697F                 // 9:8 Action Counter = Compare B up
  3698F  Uint16 CBD : 2 ;
  3699F                 // 11:10 Action Counter = Compare B down
  3700F  Uint16 rsvd : 4 ;
  3701F                  // 15:12 reserved
  3702F} ;
  3703F
  3704Funion AQCTL_REG
  3705F{
  3706F  Uint16 all ;
  3707F  struct AQCTL_BITS bit ;
  3708F} ;
  3709F//----------------------------------------------------
  3710F// Action qualifier SW force register bit definitions */
  3711F
  3712Fstruct AQSFRC_BITS
  3713F{                    // bits description
  3714F  Uint16 ACTSFA : 2 ;
  3715F                    // 1:0 Action when One-time SW Force A invoked
  3716F  Uint16 OTSFA : 1 ;
  3717F                   // 2 One-time SW Force A output
  3718F  Uint16 ACTSFB : 2 ;
  3719F                    // 4:3 Action when One-time SW Force B invoked
  3720F  Uint16 OTSFB : 1 ;
  3721F                   // 5 One-time SW Force A output
  3722F  Uint16 RLDCSF : 2 ;
  3723F                    // 7:6 Reload from Shadow options
  3724F  Uint16 rsvd1 : 8 ;
  3725F                   // 15:8 reserved
  3726F} ;
  3727F
  3728Funion AQSFRC_REG
  3729F{
  3730F  Uint16 all ;
  3731F  struct AQSFRC_BITS bit ;
  3732F} ;
  3733F//----------------------------------------------------
  3734F// Action qualifier continuous SW force register bit definitions */
  3735F
  3736Fstruct AQCSFRC_BITS
  3737F{                     // bits description
  3738F  Uint16 CSFA : 2 ;
  3739F                  // 1:0 Continuous Software Force on output A
  3740F  Uint16 CSFB : 2 ;
  3741F                  // 3:2 Continuous Software Force on output B
  3742F  Uint16 rsvd1 : 12 ;
  3743F                    // 15:4 reserved
  3744F} ;
  3745F
  3746Funion AQCSFRC_REG
  3747F{
  3748F  Uint16 all ;
  3749F  struct AQCSFRC_BITS bit ;
  3750F} ;
  3751F// As of version 1.1
  3752F// Changed the MODE bit-field to OUT_MODE
  3753F// Added the bit-field IN_MODE
  3754F// This corresponds to changes in silicon as of F2833x devices
  3755F// Rev A silicon.
  3756F//----------------------------------------------------
  3757F// Dead-band generator control register bit definitions
  3758F
  3759Fstruct DBCTL_BITS
  3760F{                   // bits description
  3761F  Uint16 OUT_MODE : 2 ;  // 1:0 Dead Band Output Mode Control
  3762F  Uint16 POLSEL : 2 ;
  3763F                    // 3:2 Polarity Select Control
  3764F  Uint16 IN_MODE : 2 ;
  3765F                     // 5:4 Dead Band Input Select Mode Control
  3766F  Uint16 rsvd1 : 10 ;
  3767F                    // 15:4 reserved
  3768F} ;
  3769F
  3770Funion DBCTL_REG
  3771F{
  3772F  Uint16 all ;
  3773F  struct DBCTL_BITS bit ;
  3774F} ;
  3775F//----------------------------------------------------
  3776F// Trip zone select register bit definitions
  3777F
  3778Fstruct TZSEL_BITS
  3779F{                   // bits description
  3780F  Uint16 CBC1 : 1 ;
  3781F                  // 0 TZ1 CBC select
  3782F  Uint16 CBC2 : 1 ;
  3783F                  // 1 TZ2 CBC select
  3784F  Uint16 CBC3 : 1 ;
  3785F                  // 2 TZ3 CBC select
  3786F  Uint16 CBC4 : 1 ;
  3787F                  // 3 TZ4 CBC select
  3788F  Uint16 CBC5 : 1 ;
  3789F                  // 4 TZ5 CBC select
  3790F  Uint16 CBC6 : 1 ;
  3791F                  // 5 TZ6 CBC select
  3792F  Uint16 rsvd1 : 2 ;
  3793F                   // 7:6 reserved
  3794F  Uint16 OSHT1 : 1 ;
  3795F                   // 8 One-shot TZ1 select
  3796F  Uint16 OSHT2 : 1 ;
  3797F                   // 9 One-shot TZ2 select
  3798F  Uint16 OSHT3 : 1 ;
  3799F                   // 10 One-shot TZ3 select
  3800F  Uint16 OSHT4 : 1 ;
  3801F                   // 11 One-shot TZ4 select
  3802F  Uint16 OSHT5 : 1 ;
  3803F                   // 12 One-shot TZ5 select
  3804F  Uint16 OSHT6 : 1 ;
  3805F                   // 13 One-shot TZ6 select
  3806F  Uint16 rsvd2 : 2 ;
  3807F                   // 15:14 reserved
  3808F} ;
  3809F
  3810Funion TZSEL_REG
  3811F{
  3812F  Uint16 all ;
  3813F  struct TZSEL_BITS bit ;
  3814F} ;
  3815F//----------------------------------------------------
  3816F// Trip zone control register bit definitions */
  3817F
  3818Fstruct TZCTL_BITS
  3819F{                   // bits description
  3820F  Uint16 TZA : 2 ;
  3821F                 // 1:0 TZ1 to TZ6 Trip Action On EPWMxA
  3822F  Uint16 TZB : 2 ;
  3823F                 // 3:2 TZ1 to TZ6 Trip Action On EPWMxB
  3824F  Uint16 rsvd : 12 ;
  3825F                   // 15:4 reserved
  3826F} ;
  3827F
  3828Funion TZCTL_REG
  3829F{
  3830F  Uint16 all ;
  3831F  struct TZCTL_BITS bit ;
  3832F} ;
  3833F//----------------------------------------------------
  3834F// Trip zone control register bit definitions */
  3835F
  3836Fstruct TZEINT_BITS
  3837F{                    // bits description
  3838F  Uint16 rsvd1 : 1 ;
  3839F                   // 0 reserved
  3840F  Uint16 CBC : 1 ;
  3841F                 // 1 Trip Zones Cycle By Cycle Int Enable
  3842F  Uint16 OST : 1 ;
  3843F                 // 2 Trip Zones One Shot Int Enable
  3844F  Uint16 rsvd2 : 13 ;
  3845F                    // 15:3 reserved
  3846F} ;
  3847F
  3848Funion TZEINT_REG
  3849F{
  3850F  Uint16 all ;
  3851F  struct TZEINT_BITS bit ;
  3852F} ;
  3853F//----------------------------------------------------
  3854F// Trip zone flag register bit definitions */
  3855F
  3856Fstruct TZFLG_BITS
  3857F{                   // bits description
  3858F  Uint16 INT : 1 ;
  3859F                 // 0 Global status
  3860F  Uint16 CBC : 1 ;
  3861F                 // 1 Trip Zones Cycle By Cycle Int
  3862F  Uint16 OST : 1 ;
  3863F                 // 2 Trip Zones One Shot Int
  3864F  Uint16 rsvd2 : 13 ;
  3865F                    // 15:3 reserved
  3866F} ;
  3867F
  3868Funion TZFLG_REG
  3869F{
  3870F  Uint16 all ;
  3871F  struct TZFLG_BITS bit ;
  3872F} ;
  3873F//----------------------------------------------------
  3874F// Trip zone flag clear register bit definitions */
  3875F
  3876Fstruct TZCLR_BITS
  3877F{                   // bits description
  3878F  Uint16 INT : 1 ;
  3879F                 // 0 Global status
  3880F  Uint16 CBC : 1 ;
  3881F                 // 1 Trip Zones Cycle By Cycle Int
  3882F  Uint16 OST : 1 ;
  3883F                 // 2 Trip Zones One Shot Int
  3884F  Uint16 rsvd2 : 13 ;
  3885F                    // 15:3 reserved
  3886F} ;
  3887F
  3888Funion TZCLR_REG
  3889F{
  3890F  Uint16 all ;
  3891F  struct TZCLR_BITS bit ;
  3892F} ;
  3893F//----------------------------------------------------
  3894F// Trip zone flag force register bit definitions */
  3895F
  3896Fstruct TZFRC_BITS
  3897F{                   // bits description
  3898F  Uint16 rsvd1 : 1 ;
  3899F                   // 0 reserved
  3900F  Uint16 CBC : 1 ;
  3901F                 // 1 Trip Zones Cycle By Cycle Int
  3902F  Uint16 OST : 1 ;
  3903F                 // 2 Trip Zones One Shot Int
  3904F  Uint16 rsvd2 : 13 ;
  3905F                    // 15:3 reserved
  3906F} ;
  3907F
  3908Funion TZFRC_REG
  3909F{
  3910F  Uint16 all ;
  3911F  struct TZFRC_BITS bit ;
  3912F} ;
  3913F//----------------------------------------------------
  3914F// Event trigger select register bit definitions */
  3915F
  3916Fstruct ETSEL_BITS
  3917F{                   // bits description
  3918F  Uint16 INTSEL : 3 ;
  3919F                    // 2:0 EPWMxINTn Select
  3920F  Uint16 INTEN : 1 ;
  3921F                   // 3 EPWMxINTn Enable
  3922F  Uint16 rsvd1 : 4 ;
  3923F                   // 7:4 reserved
  3924F  Uint16 SOCASEL : 3 ;
  3925F                     // 10:8 Start of conversion A Select
  3926F  Uint16 SOCAEN : 1 ;
  3927F                    // 11 Start of conversion A Enable
  3928F  Uint16 SOCBSEL : 3 ;
  3929F                     // 14:12 Start of conversion B Select
  3930F  Uint16 SOCBEN : 1 ;
  3931F                    // 15 Start of conversion B Enable
  3932F} ;
  3933F
  3934Funion ETSEL_REG
  3935F{
  3936F  Uint16 all ;
  3937F  struct ETSEL_BITS bit ;
  3938F} ;
  3939F//----------------------------------------------------
  3940F// Event trigger pre-scale register bit definitions */
  3941F
  3942Fstruct ETPS_BITS
  3943F{                  // bits description
  3944F  Uint16 INTPRD : 2 ;
  3945F                    // 1:0 EPWMxINTn Period Select
  3946F  Uint16 INTCNT : 2 ;
  3947F                    // 3:2 EPWMxINTn Counter Register
  3948F  Uint16 rsvd1 : 4 ;
  3949F                   // 7:4 reserved
  3950F  Uint16 SOCAPRD : 2 ;
  3951F                     // 9:8 EPWMxSOCA Period Select
  3952F  Uint16 SOCACNT : 2 ;
  3953F                     // 11:10 EPWMxSOCA Counter Register
  3954F  Uint16 SOCBPRD : 2 ;
  3955F                     // 13:12 EPWMxSOCB Period Select
  3956F  Uint16 SOCBCNT : 2 ;
  3957F                     // 15:14 EPWMxSOCB Counter Register
  3958F} ;
  3959F
  3960Funion ETPS_REG
  3961F{
  3962F  Uint16 all ;
  3963F  struct ETPS_BITS bit ;
  3964F} ;
  3965F//----------------------------------------------------
  3966F// Event trigger Flag register bit definitions */
  3967F
  3968Fstruct ETFLG_BITS
  3969F{                   // bits description
  3970F  Uint16 INT : 1 ;
  3971F                 // 0   EPWMxINTn Flag
  3972F  Uint16 rsvd1 : 1 ;
  3973F                   // 1 reserved
  3974F  Uint16 SOCA : 1 ;
  3975F                  // 2  EPWMxSOCA Flag
  3976F  Uint16 SOCB : 1 ;
  3977F                  // 3  EPWMxSOCB Flag
  3978F  Uint16 rsvd2 : 12 ;
  3979F                    // 15:4     reserved
  3980F} ;
  3981F
  3982Funion ETFLG_REG
  3983F{
  3984F  Uint16 all ;
  3985F  struct ETFLG_BITS bit ;
  3986F} ;
  3987F//----------------------------------------------------
  3988F// Event trigger Clear register bit definitions */
  3989F
  3990Fstruct ETCLR_BITS
  3991F{                   // bits description
  3992F  Uint16 INT : 1 ;
  3993F                 // 0   EPWMxINTn Clear
  3994F  Uint16 rsvd1 : 1 ;
  3995F                   // 1 reserved
  3996F  Uint16 SOCA : 1 ;
  3997F                  // 2  EPWMxSOCA Clear
  3998F  Uint16 SOCB : 1 ;
  3999F                  // 3  EPWMxSOCB Clear
  4000F  Uint16 rsvd2 : 12 ;
  4001F                    // 15:4     reserved
  4002F} ;
  4003F
  4004Funion ETCLR_REG
  4005F{
  4006F  Uint16 all ;
  4007F  struct ETCLR_BITS bit ;
  4008F} ;
  4009F//----------------------------------------------------
  4010F// Event trigger Force register bit definitions */
  4011F
  4012Fstruct ETFRC_BITS
  4013F{                   // bits description
  4014F  Uint16 INT : 1 ;
  4015F                 // 0   EPWMxINTn Force
  4016F  Uint16 rsvd1 : 1 ;
  4017F                   // 1 reserved
  4018F  Uint16 SOCA : 1 ;
  4019F                  // 2  EPWMxSOCA Force
  4020F  Uint16 SOCB : 1 ;
  4021F                  // 3  EPWMxSOCB Force
  4022F  Uint16 rsvd2 : 12 ;
  4023F                    // 15:4     reserved
  4024F} ;
  4025F
  4026Funion ETFRC_REG
  4027F{
  4028F  Uint16 all ;
  4029F  struct ETFRC_BITS bit ;
  4030F} ;
  4031F//----------------------------------------------------
  4032F// PWM chopper control register bit definitions */
  4033F
  4034Fstruct PCCTL_BITS
  4035F{                   // bits description
  4036F  Uint16 CHPEN : 1 ;
  4037F                   // 0 PWM chopping enable
  4038F  Uint16 OSHTWTH : 4 ;
  4039F                     // 4:1 One-shot pulse width
  4040F  Uint16 CHPFREQ : 3 ;
  4041F                     // 7:5 Chopping clock frequency
  4042F  Uint16 CHPDUTY : 3 ;
  4043F                     // 10:8 Chopping clock Duty cycle
  4044F  Uint16 rsvd1 : 5 ;
  4045F                   // 15:11 reserved
  4046F} ;
  4047F
  4048Funion PCCTL_REG
  4049F{
  4050F  Uint16 all ;
  4051F  struct PCCTL_BITS bit ;
  4052F} ;
  4053F
  4054Fstruct HRCNFG_BITS
  4055F{                       // bits description
  4056F  Uint16 EDGMODE : 2 ;  // 1:0 Edge Mode select Bits
  4057F  Uint16 CTLMODE : 1 ;  // 2 Control mode Select Bit
  4058F  Uint16 HRLOAD : 1 ;   // 3 Shadow mode Select Bit
  4059F  Uint16 rsvd1 : 12 ;   // 15:4 reserved
  4060F} ;
  4061F
  4062Funion HRCNFG_REG
  4063F{
  4064F  Uint16 all ;
  4065F  struct HRCNFG_BITS bit ;
  4066F} ;
  4067F
  4068Fstruct TBPHS_HRPWM_REG
  4069F{                               // bits description
  4070F  Uint16 TBPHSHR ;      // 15:0 Extension register for HRPWM Phase (8 bits)
  4071F  Uint16 TBPHS ; // 31:16 Phase offset register
  4072F} ;
  4073F
  4074Funion TBPHS_HRPWM_GROUP
  4075F{
  4076F  Uint32 all ;
  4077F  struct TBPHS_HRPWM_REG half ;
  4078F} ;
  4079F
  4080Fstruct CMPA_HRPWM_REG
  4081F{                               // bits description
  4082F  Uint16 CMPAHR ;        // 15:0 Extension register for HRPWM compare (8 bits)
  4083F  Uint16 CMPA ; // 31:16 Compare A reg
  4084F} ;
  4085F
  4086Funion CMPA_HRPWM_GROUP
  4087F{
  4088F  Uint32 all ;
  4089F  struct CMPA_HRPWM_REG half ;
  4090F} ;
  4091F
  4092Fstruct EPWM_REGS
  4093F{
  4094F  union TBCTL_REG TBCTL ; //
  4095F  union TBSTS_REG TBSTS ; //
  4096F  union TBPHS_HRPWM_GROUP TBPHS ; // Union of TBPHS:TBPHSHR
  4097F  Uint16 TBCTR ; // Counter
  4098F  Uint16 TBPRD ; // Period register set
  4099F  Uint16 rsvd1 ; //
  4100F  union CMPCTL_REG CMPCTL ; // Compare control
  4101F  union CMPA_HRPWM_GROUP CMPA ; // Union of CMPA:CMPAHR
  4102F  Uint16 CMPB ; // Compare B reg
  4103F  union AQCTL_REG AQCTLA ; // Action qual output A
  4104F  union AQCTL_REG AQCTLB ; // Action qual output B
  4105F  union AQSFRC_REG AQSFRC ; // Action qual SW force
  4106F  union AQCSFRC_REG AQCSFRC ; // Action qualifier continuous SW force
  4107F  union DBCTL_REG DBCTL ; // Dead-band control
  4108F  Uint16 DBRED ; // Dead-band rising edge delay
  4109F  Uint16 DBFED ; // Dead-band falling edge delay
  4110F  union TZSEL_REG TZSEL ; // Trip zone select
  4111F  Uint16 rsvd2 ;
  4112F  union TZCTL_REG TZCTL ; // Trip zone control
  4113F  union TZEINT_REG TZEINT ; // Trip zone interrupt enable
  4114F  union TZFLG_REG TZFLG ; // Trip zone interrupt flags
  4115F  union TZCLR_REG TZCLR ; // Trip zone clear
  4116F  union TZFRC_REG TZFRC ;       // Trip zone force interrupt
  4117F  union ETSEL_REG ETSEL ; // Event trigger selection
  4118F  union ETPS_REG ETPS ; // Event trigger pre-scaler
  4119F  union ETFLG_REG ETFLG ; // Event trigger flags
  4120F  union ETCLR_REG ETCLR ; // Event trigger clear
  4121F  union ETFRC_REG ETFRC ; // Event trigger force
  4122F  union PCCTL_REG PCCTL ; // PWM chopper control
  4123F  Uint16 rsvd3 ; //
  4124F  union HRCNFG_REG HRCNFG ; // HRPWM Config Reg
  4125F} ;
  4126F//---------------------------------------------------------------------------
  4127F// External References & Function Declarations:
  4128F//
  4129F
  4130Fextern volatile struct EPWM_REGS
  4131F  EPwm1Regs ;
  4132F
  4133Fextern volatile struct EPWM_REGS
  4134F  EPwm2Regs ;
  4135F
  4136Fextern volatile struct EPWM_REGS
  4137F  EPwm3Regs ;
  4138F
  4139Fextern volatile struct EPWM_REGS
  4140F  EPwm4Regs ;
  4141F
  4142Fextern volatile struct EPWM_REGS
  4143F  EPwm5Regs ;
  4144F
  4145Fextern volatile struct EPWM_REGS
  4146F  EPwm6Regs ;
  4147F       /* extern "C" */
  4148F       // end of DSP2833x_EPWM_H definition
  4149F//===========================================================================
  4150F// End of file.
  4151F//===========================================================================
  4152F 
  4153F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EPwm.h*/
  4154F/*   CLOSE_FILE Include File */
  4155F 
  4156F               // Enhanced PWM
  4157F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EQep.h */
  4158F// TI File $Revision: /main/1 $
  4159F// Checkin $Date: August 18, 2006 13:52:13 $
  4160F//###########################################################################
  4161F//
  4162F// FILE: DSP2833x_EQep.h
  4163F//
  4164F// TITLE: DSP2833x Enhanced Quadrature Encoder Pulse Module
  4165F// Register Bit Definitions.
  4166F//
  4167F//###########################################################################
  4168F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  4169F// $Release Date: August 4, 2009 $
  4170F//###########################################################################
  4171F#ifndef DSP2833x_EQEP_H
  4172F#define DSP2833x_EQEP_H
  4173F//----------------------------------------------------
  4174F// Capture decoder control register bit definitions */
  4175F
  4176Fstruct QDECCTL_BITS
  4177F{                     // bits description
  4178F  Uint16 rsvd1 : 5 ;
  4179F                   // 4:0 reserved
  4180F  Uint16 QSP : 1 ;
  4181F                 // 5 QEPS input polarity
  4182F  Uint16 QIP : 1 ;
  4183F                 // 6 QEPI input polarity
  4184F  Uint16 QBP : 1 ;
  4185F                 // 7 QEPB input polarity
  4186F  Uint16 QAP : 1 ;
  4187F                 // 8 QEPA input polarity
  4188F  Uint16 IGATE : 1 ;
  4189F                   // 9 Index pulse gating option
  4190F  Uint16 SWAP : 1 ;
  4191F                  // 10 CLK/DIR signal source for Position Counter
  4192F  Uint16 XCR : 1 ;
  4193F                 // 11 External clock rate
  4194F  Uint16 SPSEL : 1 ;
  4195F                   // 12 Sync output pin select
  4196F  Uint16 SOEN : 1 ;
  4197F                  // 13 Enable position compare sync
  4198F  Uint16 QSRC : 2 ;
  4199F                  // 15:14 Position counter source
  4200F} ;
  4201F
  4202Funion QDECCTL_REG
  4203F{
  4204F  Uint16 all ;
  4205F  struct QDECCTL_BITS bit ;
  4206F} ;
  4207F//----------------------------------------------------
  4208F// QEP control register bit definitions */
  4209F
  4210Fstruct QEPCTL_BITS
  4211F{                    // bits description
  4212F  Uint16 WDE : 1 ;
  4213F                 // 0 QEP watchdog enable
  4214F  Uint16 UTE : 1 ;
  4215F                 // 1 QEP unit timer enable
  4216F  Uint16 QCLM : 1 ;
  4217F                  // 2 QEP capture latch mode
  4218F  Uint16 QPEN : 1 ;
  4219F                  // 3 Quadrature position counter enable
  4220F  Uint16 IEL : 2 ;
  4221F                 // 5:4 Index event latch
  4222F  Uint16 SEL : 1 ;
  4223F                 // 6 Strobe event latch
  4224F  Uint16 SWI : 1 ;
  4225F                 // 7 Software init position counter
  4226F  Uint16 IEI : 2 ;
  4227F                 // 9:8 Index event init of position count
  4228F  Uint16 SEI : 2 ;
  4229F                 // 11:10 Strobe event init
  4230F  Uint16 PCRM : 2 ;
  4231F                  // 13:12 Position counter reset
  4232F  Uint16 FREE_SOFT : 2 ;
  4233F                       // 15:14 Emulation mode
  4234F} ;
  4235F
  4236Funion QEPCTL_REG
  4237F{
  4238F  Uint16 all ;
  4239F  struct QEPCTL_BITS bit ;
  4240F} ;
  4241F//----------------------------------------------------
  4242F// Quadrature capture control register bit definitions */
  4243F
  4244Fstruct QCAPCTL_BITS
  4245F{                     // bits description
  4246F  Uint16 UPPS : 4 ;
  4247F                  // 3:0 Unit position pre-scale
  4248F  Uint16 CCPS : 3 ;
  4249F                  // 6:4 QEP capture timer pre-scale
  4250F  Uint16 rsvd1 : 8 ;
  4251F                   // 14:7 reserved
  4252F  Uint16 CEN : 1 ;
  4253F                 // 15 Enable QEP capture
  4254F} ;
  4255F
  4256Funion QCAPCTL_REG
  4257F{
  4258F  Uint16 all ;
  4259F  struct QCAPCTL_BITS bit ;
  4260F} ;
  4261F//----------------------------------------------------
  4262F// Position compare control register bit definitions */
  4263F
  4264Fstruct QPOSCTL_BITS
  4265F{                     // bits description
  4266F  Uint16 PCSPW : 12 ;
  4267F                    // 11:0 Position compare sync pulse width
  4268F  Uint16 PCE : 1 ;
  4269F                 // 12 Position compare enable/disable
  4270F  Uint16 PCPOL : 1 ;
  4271F                   // 13 Polarity of sync output
  4272F  Uint16 PCLOAD : 1 ;
  4273F                    // 14 Position compare of shadow load
  4274F  Uint16 PCSHDW : 1 ;
  4275F                    // 15 Position compare shadow enable
  4276F} ;
  4277F
  4278Funion QPOSCTL_REG
  4279F{
  4280F  Uint16 all ;
  4281F  struct QPOSCTL_BITS bit ;
  4282F} ;
  4283F//----------------------------------------------------
  4284F// QEP interrupt control register bit definitions */
  4285F
  4286Fstruct QEINT_BITS
  4287F{                   // bits description
  4288F  Uint16 rsvd1 : 1 ;
  4289F                   // 0 reserved
  4290F  Uint16 PCE : 1 ;
  4291F                 // 1 Position counter error
  4292F  Uint16 QPE : 1 ;
  4293F                 // 2 Quadrature phase error
  4294F  Uint16 QDC : 1 ;
  4295F                 // 3 Quadrature dir change
  4296F  Uint16 WTO : 1 ;
  4297F                 // 4 Watchdog timeout
  4298F  Uint16 PCU : 1 ;
  4299F                 // 5 Position counter underflow
  4300F  Uint16 PCO : 1 ;
  4301F                 // 6 Position counter overflow
  4302F  Uint16 PCR : 1 ;
  4303F                 // 7 Position compare ready
  4304F  Uint16 PCM : 1 ;
  4305F                 // 8 Position compare match
  4306F  Uint16 SEL : 1 ;
  4307F                 // 9 Strobe event latch
  4308F  Uint16 IEL : 1 ;
  4309F                 // 10 Event latch
  4310F  Uint16 UTO : 1 ;
  4311F                 // 11 Unit timeout
  4312F  Uint16 rsvd2 : 4 ;
  4313F                   // 15:12 reserved
  4314F} ;
  4315F
  4316Funion QEINT_REG
  4317F{
  4318F  Uint16 all ;
  4319F  struct QEINT_BITS bit ;
  4320F} ;
  4321F//----------------------------------------------------
  4322F// QEP interrupt status register bit definitions */
  4323F
  4324Fstruct QFLG_BITS
  4325F{                  // bits description
  4326F  Uint16 INT : 1 ;
  4327F                 // 0 Global interrupt
  4328F  Uint16 PCE : 1 ;
  4329F                 // 1 Position counter error
  4330F  Uint16 PHE : 1 ;
  4331F                 // 2 Quadrature phase error
  4332F  Uint16 QDC : 1 ;
  4333F                 // 3 Quadrature dir change
  4334F  Uint16 WTO : 1 ;
  4335F                 // 4 Watchdog timeout
  4336F  Uint16 PCU : 1 ;
  4337F                 // 5 Position counter underflow
  4338F  Uint16 PCO : 1 ;
  4339F                 // 6 Position counter overflow
  4340F  Uint16 PCR : 1 ;
  4341F                 // 7 Position compare ready
  4342F  Uint16 PCM : 1 ;
  4343F                 // 8 Position compare match
  4344F  Uint16 SEL : 1 ;
  4345F                 // 9 Strobe event latch
  4346F  Uint16 IEL : 1 ;
  4347F                 // 10 Event latch
  4348F  Uint16 UTO : 1 ;
  4349F                 // 11 Unit timeout
  4350F  Uint16 rsvd2 : 4 ;
  4351F                   // 15:12 reserved
  4352F} ;
  4353F
  4354Funion QFLG_REG
  4355F{
  4356F  Uint16 all ;
  4357F  struct QFLG_BITS bit ;
  4358F} ;
  4359F//----------------------------------------------------
  4360F// QEP interrupt force register bit definitions */
  4361F
  4362Fstruct QFRC_BITS
  4363F{                  // bits description
  4364F  Uint16 reserved : 1 ;
  4365F                      // 0 Reserved
  4366F  Uint16 PCE : 1 ;
  4367F                 // 1 Position counter error
  4368F  Uint16 PHE : 1 ;
  4369F                 // 2 Quadrature phase error
  4370F  Uint16 QDC : 1 ;
  4371F                 // 3 Quadrature dir change
  4372F  Uint16 WTO : 1 ;
  4373F                 // 4 Watchdog timeout
  4374F  Uint16 PCU : 1 ;
  4375F                 // 5 Position counter underflow
  4376F  Uint16 PCO : 1 ;
  4377F                 // 6 Position counter overflow
  4378F  Uint16 PCR : 1 ;
  4379F                 // 7 Position compare ready
  4380F  Uint16 PCM : 1 ;
  4381F                 // 8 Position compare match
  4382F  Uint16 SEL : 1 ;
  4383F                 // 9 Strobe event latch
  4384F  Uint16 IEL : 1 ;
  4385F                 // 10 Event latch
  4386F  Uint16 UTO : 1 ;
  4387F                 // 11 Unit timeout
  4388F  Uint16 rsvd2 : 4 ;
  4389F                   // 15:12 reserved
  4390F} ;
  4391F
  4392Funion QFRC_REG
  4393F{
  4394F  Uint16 all ;
  4395F  struct QFRC_BITS bit ;
  4396F} ;
  4397F// V1.1 Added UPEVNT (bit 7) This reflects changes
  4398F// made as of F2833x Rev A devices
  4399F//----------------------------------------------------
  4400F// QEP status register bit definitions */
  4401F
  4402Fstruct QEPSTS_BITS
  4403F{                    // bits description
  4404F  Uint16 PCEF : 1 ;
  4405F                  // 0 Position counter error
  4406F  Uint16 FIMF : 1 ;
  4407F                  // 1 First index marker
  4408F  Uint16 CDEF : 1 ;
  4409F                  // 2 Capture direction error
  4410F  Uint16 COEF : 1 ;
  4411F                  // 3 Capture overflow error
  4412F  Uint16 QDLF : 1 ;
  4413F                  // 4 QEP direction latch
  4414F  Uint16 QDF : 1 ;
  4415F                 // 5 Quadrature direction
  4416F  Uint16 FIDF : 1 ;
  4417F                  // 6 Direction on first index marker
  4418F  Uint16 UPEVNT : 1 ;
  4419F                    // 7 Unit position event flag
  4420F  Uint16 rsvd1 : 8 ;
  4421F                   // 15:8 reserved
  4422F} ;
  4423F
  4424Funion QEPSTS_REG
  4425F{
  4426F  Uint16 all ;
  4427F  struct QEPSTS_BITS bit ;
  4428F} ;
  4429F//----------------------------------------------------
  4430F
  4431Fstruct EQEP_REGS
  4432F{
  4433F  Uint32 QPOSCNT ; // Position counter
  4434F  Uint32 QPOSINIT ; // Position counter init
  4435F  Uint32 QPOSMAX ; // Maximum position count
  4436F  Uint32 QPOSCMP ; // Position compare
  4437F  Uint32 QPOSILAT ; // Index position latch
  4438F  Uint32 QPOSSLAT ; // Strobe position latch
  4439F  Uint32 QPOSLAT ; // Position latch
  4440F  Uint32 QUTMR ; // Unit timer
  4441F  Uint32 QUPRD ; // Unit period
  4442F  Uint16 QWDTMR ; // QEP watchdog timer
  4443F  Uint16 QWDPRD ; // QEP watchdog period
  4444F  union QDECCTL_REG QDECCTL ; // Quadrature decoder control
  4445F  union QEPCTL_REG QEPCTL ; // QEP control
  4446F  union QCAPCTL_REG QCAPCTL ; // Quadrature capture control
  4447F  union QPOSCTL_REG QPOSCTL ; // Position compare control
  4448F  union QEINT_REG QEINT ; // QEP interrupt control
  4449F  union QFLG_REG QFLG ; // QEP interrupt flag
  4450F  union QFLG_REG QCLR ; // QEP interrupt clear
  4451F  union QFRC_REG QFRC ; // QEP interrupt force
  4452F  union QEPSTS_REG QEPSTS ; // QEP status
  4453F  Uint16 QCTMR ; // QEP capture timer
  4454F  Uint16 QCPRD ; // QEP capture period
  4455F  Uint16 QCTMRLAT ; // QEP capture latch
  4456F  Uint16 QCPRDLAT ; // QEP capture period latch
  4457F  Uint16 rsvd1 [ 30 ] ;
  4458F                     // reserved
  4459F} ;
  4460F//---------------------------------------------------------------------------
  4461F// GPI/O External References & Function Declarations:
  4462F//
  4463F
  4464Fextern volatile struct EQEP_REGS
  4465F  EQep1Regs ;
  4466F
  4467Fextern volatile struct EQEP_REGS
  4468F  EQep2Regs ;
  4469F       /* extern "C" */
  4470F       // end of DSP2833x_EQEP_H definition
  4471F//===========================================================================
  4472F// End of file.
  4473F//===========================================================================
  4474F 
  4475F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EQep.h*/
  4476F/*   CLOSE_FILE Include File */
  4477F 
  4478F               // Enhanced QEP
  4479F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Gpio.h */
  4480F// TI File $Revision: /main/4 $
  4481F// Checkin $Date: November 15, 2007 09:58:53 $
  4482F//###########################################################################
  4483F//
  4484F// FILE: DSP2833x_Gpio.h
  4485F//
  4486F// TITLE: DSP2833x General Purpose I/O Definitions.
  4487F//
  4488F//###########################################################################
  4489F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  4490F// $Release Date: August 4, 2009 $
  4491F//###########################################################################
  4492F#ifndef DSP2833x_GPIO_H
  4493F#define DSP2833x_GPIO_H
  4494F//----------------------------------------------------
  4495F// GPIO A control register bit definitions */
  4496F
  4497Ftypedef
  4498Fstruct GPACTRL_BITS
  4499F{                             // bits description
  4500F  Uint16 QUALPRD0 : 8 ;
  4501F                      // 7:0 Qual period
  4502F  Uint16 QUALPRD1 : 8 ;
  4503F                      // 15:8 Qual period
  4504F  Uint16 QUALPRD2 : 8 ;
  4505F                      // 23:16 Qual period
  4506F  Uint16 QUALPRD3 : 8 ;
  4507F                      // 31:24 Qual period
  4508F} GPACTRL_BITS ;
  4509F
  4510Ftypedef
  4511Funion GPACTRL_REG
  4512F{
  4513F  Uint32 all ;
  4514F  struct GPACTRL_BITS bit ;
  4515F} GPACTRL_REG ;
  4516F//----------------------------------------------------
  4517F// GPIO B control register bit definitions */
  4518F
  4519Ftypedef
  4520Fstruct GPBCTRL_BITS
  4521F{                             // bits description
  4522F  Uint16 QUALPRD0 : 8 ;
  4523F                      // 7:0 Qual period
  4524F  Uint16 QUALPRD1 : 8 ;
  4525F                      // 15:8 Qual period
  4526F  Uint16 QUALPRD2 : 8 ;
  4527F                      // 23:16 Qual period
  4528F  Uint16 QUALPRD3 : 8 ;
  4529F                      // 31:24
  4530F} GPBCTRL_BITS ;
  4531F
  4532Ftypedef
  4533Funion GPBCTRL_REG
  4534F{
  4535F  Uint32 all ;
  4536F  struct GPBCTRL_BITS bit ;
  4537F} GPBCTRL_REG ;
  4538F//----------------------------------------------------
  4539F// GPIO A Qual/MUX select register bit definitions */
  4540F
  4541Ftypedef
  4542Fstruct GPA1_BITS
  4543F{                          // bits description
  4544F  Uint16 GPIO0 : 2 ;
  4545F                   // 1:0 GPIO0
  4546F  Uint16 GPIO1 : 2 ;
  4547F                   // 3:2 GPIO1
  4548F  Uint16 GPIO2 : 2 ;
  4549F                   // 5:4 GPIO2
  4550F  Uint16 GPIO3 : 2 ;
  4551F                   // 7:6 GPIO3
  4552F  Uint16 GPIO4 : 2 ;
  4553F                   // 9:8 GPIO4
  4554F  Uint16 GPIO5 : 2 ;
  4555F                   // 11:10 GPIO5
  4556F  Uint16 GPIO6 : 2 ;
  4557F                   // 13:12 GPIO6
  4558F  Uint16 GPIO7 : 2 ;
  4559F                   // 15:14 GPIO7
  4560F  Uint16 GPIO8 : 2 ;
  4561F                   // 17:16 GPIO8
  4562F  Uint16 GPIO9 : 2 ;
  4563F                   // 19:18 GPIO9
  4564F  Uint16 GPIO10 : 2 ;
  4565F                    // 21:20 GPIO10
  4566F  Uint16 GPIO11 : 2 ;
  4567F                    // 23:22 GPIO11
  4568F  Uint16 GPIO12 : 2 ;
  4569F                    // 25:24 GPIO12
  4570F  Uint16 GPIO13 : 2 ;
  4571F                    // 27:26 GPIO13
  4572F  Uint16 GPIO14 : 2 ;
  4573F                    // 29:28 GPIO14
  4574F  Uint16 GPIO15 : 2 ;
  4575F                    // 31:30 GPIO15
  4576F} GPA1_BITS ;
  4577F
  4578Ftypedef
  4579Fstruct GPA2_BITS
  4580F{                          // bits description
  4581F  Uint16 GPIO16 : 2 ;
  4582F                    // 1:0 GPIO16
  4583F  Uint16 GPIO17 : 2 ;
  4584F                    // 3:2 GPIO17
  4585F  Uint16 GPIO18 : 2 ;
  4586F                    // 5:4 GPIO18
  4587F  Uint16 GPIO19 : 2 ;
  4588F                    // 7:6 GPIO19
  4589F  Uint16 GPIO20 : 2 ;
  4590F                    // 9:8 GPIO20
  4591F  Uint16 GPIO21 : 2 ;
  4592F                    // 11:10 GPIO21
  4593F  Uint16 GPIO22 : 2 ;
  4594F                    // 13:12 GPIO22
  4595F  Uint16 GPIO23 : 2 ;
  4596F                    // 15:14 GPIO23
  4597F  Uint16 GPIO24 : 2 ;
  4598F                    // 17:16 GPIO24
  4599F  Uint16 GPIO25 : 2 ;
  4600F                    // 19:18 GPIO25
  4601F  Uint16 GPIO26 : 2 ;
  4602F                    // 21:20 GPIO26
  4603F  Uint16 GPIO27 : 2 ;
  4604F                    // 23:22 GPIO27
  4605F  Uint16 GPIO28 : 2 ;
  4606F                    // 25:24 GPIO28
  4607F  Uint16 GPIO29 : 2 ;
  4608F                    // 27:26 GPIO29
  4609F  Uint16 GPIO30 : 2 ;
  4610F                    // 29:28 GPIO30
  4611F  Uint16 GPIO31 : 2 ;
  4612F                    // 31:30 GPIO31
  4613F} GPA2_BITS ;
  4614F
  4615Ftypedef
  4616Fstruct GPB1_BITS
  4617F{                          // bits description
  4618F  Uint16 GPIO32 : 2 ;
  4619F                    // 1:0 GPIO32
  4620F  Uint16 GPIO33 : 2 ;
  4621F                    // 3:2 GPIO33
  4622F  Uint16 GPIO34 : 2 ;
  4623F                    // 5:4 GPIO34
  4624F  Uint16 GPIO35 : 2 ;
  4625F                    // 7:6 GPIO35
  4626F  Uint16 GPIO36 : 2 ;
  4627F                    // 9:8 GPIO36
  4628F  Uint16 GPIO37 : 2 ;
  4629F                    // 11:10 GPIO37
  4630F  Uint16 GPIO38 : 2 ;
  4631F                    // 13:12 GPIO38
  4632F  Uint16 GPIO39 : 2 ;
  4633F                    // 15:14 GPIO39
  4634F  Uint16 GPIO40 : 2 ;
  4635F                    // 17:16 GPIO40
  4636F  Uint16 GPIO41 : 2 ;
  4637F                    // 19:16 GPIO41
  4638F  Uint16 GPIO42 : 2 ;
  4639F                    // 21:20 GPIO42
  4640F  Uint16 GPIO43 : 2 ;
  4641F                    // 23:22 GPIO43
  4642F  Uint16 GPIO44 : 2 ;
  4643F                    // 25:24 GPIO44
  4644F  Uint16 GPIO45 : 2 ;
  4645F                    // 27:26 GPIO45
  4646F  Uint16 GPIO46 : 2 ;
  4647F                    // 29:28 GPIO46
  4648F  Uint16 GPIO47 : 2 ;
  4649F                    // 31:30 GPIO47
  4650F} GPB1_BITS ;
  4651F
  4652Ftypedef
  4653Fstruct GPB2_BITS
  4654F{                          // bits description
  4655F  Uint16 GPIO48 : 2 ;
  4656F                    // 1:0 GPIO48
  4657F  Uint16 GPIO49 : 2 ;
  4658F                    // 3:2 GPIO49
  4659F  Uint16 GPIO50 : 2 ;
  4660F                    // 5:4 GPIO50
  4661F  Uint16 GPIO51 : 2 ;
  4662F                    // 7:6 GPIO51
  4663F  Uint16 GPIO52 : 2 ;
  4664F                    // 9:8 GPIO52
  4665F  Uint16 GPIO53 : 2 ;
  4666F                    // 11:10 GPIO53
  4667F  Uint16 GPIO54 : 2 ;
  4668F                    // 13:12 GPIO54
  4669F  Uint16 GPIO55 : 2 ;
  4670F                    // 15:14 GPIO55
  4671F  Uint16 GPIO56 : 2 ;
  4672F                    // 17:16 GPIO56
  4673F  Uint16 GPIO57 : 2 ;
  4674F                    // 19:18 GPIO57
  4675F  Uint16 GPIO58 : 2 ;
  4676F                    // 21:20 GPIO58
  4677F  Uint16 GPIO59 : 2 ;
  4678F                    // 23:22 GPIO59
  4679F  Uint16 GPIO60 : 2 ;
  4680F                    // 25:24 GPIO60
  4681F  Uint16 GPIO61 : 2 ;
  4682F                    // 27:26 GPIO61
  4683F  Uint16 GPIO62 : 2 ;
  4684F                    // 29:28 GPIO62
  4685F  Uint16 GPIO63 : 2 ;
  4686F                    // 31:30 GPIO63
  4687F} GPB2_BITS ;
  4688F
  4689Ftypedef
  4690Fstruct GPC1_BITS
  4691F{                          // bits description
  4692F  Uint16 GPIO64 : 2 ;
  4693F                    // 1:0 GPIO64
  4694F  Uint16 GPIO65 : 2 ;
  4695F                    // 3:2 GPIO65
  4696F  Uint16 GPIO66 : 2 ;
  4697F                    // 5:4 GPIO66
  4698F  Uint16 GPIO67 : 2 ;
  4699F                    // 7:6 GPIO67
  4700F  Uint16 GPIO68 : 2 ;
  4701F                    // 9:8 GPIO68
  4702F  Uint16 GPIO69 : 2 ;
  4703F                    // 11:10 GPIO69
  4704F  Uint16 GPIO70 : 2 ;
  4705F                    // 13:12 GPIO70
  4706F  Uint16 GPIO71 : 2 ;
  4707F                    // 15:14 GPIO71
  4708F  Uint16 GPIO72 : 2 ;
  4709F                    // 17:16 GPIO72
  4710F  Uint16 GPIO73 : 2 ;
  4711F                    // 19:18 GPIO73
  4712F  Uint16 GPIO74 : 2 ;
  4713F                    // 21:20 GPIO74
  4714F  Uint16 GPIO75 : 2 ;
  4715F                    // 23:22 GPIO75
  4716F  Uint16 GPIO76 : 2 ;
  4717F                    // 25:24 GPIO76
  4718F  Uint16 GPIO77 : 2 ;
  4719F                    // 27:26 GPIO77
  4720F  Uint16 GPIO78 : 2 ;
  4721F                    // 29:28 GPIO78
  4722F  Uint16 GPIO79 : 2 ;
  4723F                    // 31:30 GPIO79
  4724F} GPC1_BITS ;
  4725F
  4726Ftypedef
  4727Fstruct GPC2_BITS
  4728F{                          // bits description
  4729F  Uint16 GPIO80 : 2 ;
  4730F                    // 1:0 GPIO80
  4731F  Uint16 GPIO81 : 2 ;
  4732F                    // 3:2 GPIO81
  4733F  Uint16 GPIO82 : 2 ;
  4734F                    // 5:4 GPIO82
  4735F  Uint16 GPIO83 : 2 ;
  4736F                    // 7:6 GPIO83
  4737F  Uint16 GPIO84 : 2 ;
  4738F                    // 9:8 GPIO84
  4739F  Uint16 GPIO85 : 2 ;
  4740F                    // 11:10 GPIO85
  4741F  Uint16 GPIO86 : 2 ;
  4742F                    // 13:12 GPIO86
  4743F  Uint16 GPIO87 : 2 ;
  4744F                    // 15:14 GPIO87
  4745F  Uint16 rsvd : 16 ;
  4746F                   // 31:16 reserved
  4747F} GPC2_BITS ;
  4748F
  4749Ftypedef
  4750Funion GPA1_REG
  4751F{
  4752F  Uint32 all ;
  4753F  struct GPA1_BITS bit ;
  4754F} GPA1_REG ;
  4755F
  4756Ftypedef
  4757Funion GPA2_REG
  4758F{
  4759F  Uint32 all ;
  4760F  struct GPA2_BITS bit ;
  4761F} GPA2_REG ;
  4762F
  4763Ftypedef
  4764Funion GPB1_REG
  4765F{
  4766F  Uint32 all ;
  4767F  struct GPB1_BITS bit ;
  4768F} GPB1_REG ;
  4769F
  4770Ftypedef
  4771Funion GPB2_REG
  4772F{
  4773F  Uint32 all ;
  4774F  struct GPB2_BITS bit ;
  4775F} GPB2_REG ;
  4776F
  4777Ftypedef
  4778Funion GPC1_REG
  4779F{
  4780F  Uint32 all ;
  4781F  struct GPC1_BITS bit ;
  4782F} GPC1_REG ;
  4783F
  4784Ftypedef
  4785Funion GPC2_REG
  4786F{
  4787F  Uint32 all ;
  4788F  struct GPC2_BITS bit ;
  4789F} GPC2_REG ;
  4790F//----------------------------------------------------
  4791F// GPIO A DIR/TOGGLE/SET/CLEAR register bit definitions */
  4792F
  4793Ftypedef
  4794Fstruct GPADAT_BITS
  4795F{                            // bits description
  4796F  Uint16 GPIO0 : 1 ;
  4797F                   // 0 GPIO0
  4798F  Uint16 GPIO1 : 1 ;
  4799F                   // 1 GPIO1
  4800F  Uint16 GPIO2 : 1 ;
  4801F                   // 2 GPIO2
  4802F  Uint16 GPIO3 : 1 ;
  4803F                   // 3 GPIO3
  4804F  Uint16 GPIO4 : 1 ;
  4805F                   // 4 GPIO4
  4806F  Uint16 GPIO5 : 1 ;
  4807F                   // 5 GPIO5
  4808F  Uint16 GPIO6 : 1 ;
  4809F                   // 6 GPIO6
  4810F  Uint16 GPIO7 : 1 ;
  4811F                   // 7 GPIO7
  4812F  Uint16 GPIO8 : 1 ;
  4813F                   // 8 GPIO8
  4814F  Uint16 GPIO9 : 1 ;
  4815F                   // 9 GPIO9
  4816F  Uint16 GPIO10 : 1 ;
  4817F                    // 10 GPIO10
  4818F  Uint16 GPIO11 : 1 ;
  4819F                    // 11 GPIO11
  4820F  Uint16 GPIO12 : 1 ;
  4821F                    // 12 GPIO12
  4822F  Uint16 GPIO13 : 1 ;
  4823F                    // 13 GPIO13
  4824F  Uint16 GPIO14 : 1 ;
  4825F                    // 14 GPIO14
  4826F  Uint16 GPIO15 : 1 ;
  4827F                    // 15 GPIO15
  4828F  Uint16 GPIO16 : 1 ;
  4829F                    // 16 GPIO16
  4830F  Uint16 GPIO17 : 1 ;
  4831F                    // 17 GPIO17
  4832F  Uint16 GPIO18 : 1 ;
  4833F                    // 18 GPIO18
  4834F  Uint16 GPIO19 : 1 ;
  4835F                    // 19 GPIO19
  4836F  Uint16 GPIO20 : 1 ;
  4837F                    // 20 GPIO20
  4838F  Uint16 GPIO21 : 1 ;
  4839F                    // 21 GPIO21
  4840F  Uint16 GPIO22 : 1 ;
  4841F                    // 22 GPIO22
  4842F  Uint16 GPIO23 : 1 ;
  4843F                    // 23 GPIO23
  4844F  Uint16 GPIO24 : 1 ;
  4845F                    // 24 GPIO24
  4846F  Uint16 GPIO25 : 1 ;
  4847F                    // 25 GPIO25
  4848F  Uint16 GPIO26 : 1 ;
  4849F                    // 26 GPIO26
  4850F  Uint16 GPIO27 : 1 ;
  4851F                    // 27 GPIO27
  4852F  Uint16 GPIO28 : 1 ;
  4853F                    // 28 GPIO28
  4854F  Uint16 GPIO29 : 1 ;
  4855F                    // 29 GPIO29
  4856F  Uint16 GPIO30 : 1 ;
  4857F                    // 30 GPIO30
  4858F  Uint16 GPIO31 : 1 ;
  4859F                    // 31 GPIO31
  4860F} GPADAT_BITS ;
  4861F
  4862Ftypedef
  4863Fstruct GPBDAT_BITS
  4864F{                            // bits description
  4865F  Uint16 GPIO32 : 1 ;
  4866F                    // 0 GPIO32
  4867F  Uint16 GPIO33 : 1 ;
  4868F                    // 1 GPIO33
  4869F  Uint16 GPIO34 : 1 ;
  4870F                    // 2 GPIO34
  4871F  Uint16 GPIO35 : 1 ;
  4872F                    // 3 GPIO35
  4873F  Uint16 GPIO36 : 1 ;
  4874F                    // 4 GPIO36
  4875F  Uint16 GPIO37 : 1 ;
  4876F                    // 5 GPIO37
  4877F  Uint16 GPIO38 : 1 ;
  4878F                    // 6 GPIO38
  4879F  Uint16 GPIO39 : 1 ;
  4880F                    // 7 GPIO39
  4881F  Uint16 GPIO40 : 1 ;
  4882F                    // 8 GPIO40
  4883F  Uint16 GPIO41 : 1 ;
  4884F                    // 9 GPIO41
  4885F  Uint16 GPIO42 : 1 ;
  4886F                    // 10 GPIO42
  4887F  Uint16 GPIO43 : 1 ;
  4888F                    // 11 GPIO43
  4889F  Uint16 GPIO44 : 1 ;
  4890F                    // 12 GPIO44
  4891F  Uint16 GPIO45 : 1 ;
  4892F                    // 13 GPIO45
  4893F  Uint16 GPIO46 : 1 ;
  4894F                    // 14 GPIO46
  4895F  Uint16 GPIO47 : 1 ;
  4896F                    // 15 GPIO47
  4897F  Uint16 GPIO48 : 1 ;
  4898F                    // 16 GPIO48
  4899F  Uint16 GPIO49 : 1 ;
  4900F                    // 17 GPIO49
  4901F  Uint16 GPIO50 : 1 ;
  4902F                    // 18 GPIO50
  4903F  Uint16 GPIO51 : 1 ;
  4904F                    // 19 GPIO51
  4905F  Uint16 GPIO52 : 1 ;
  4906F                    // 20 GPIO52
  4907F  Uint16 GPIO53 : 1 ;
  4908F                    // 21 GPIO53
  4909F  Uint16 GPIO54 : 1 ;
  4910F                    // 22 GPIO54
  4911F  Uint16 GPIO55 : 1 ;
  4912F                    // 23 GPIO55
  4913F  Uint16 GPIO56 : 1 ;
  4914F                    // 24 GPIO56
  4915F  Uint16 GPIO57 : 1 ;
  4916F                    // 25 GPIO57
  4917F  Uint16 GPIO58 : 1 ;
  4918F                    // 26 GPIO58
  4919F  Uint16 GPIO59 : 1 ;
  4920F                    // 27 GPIO59
  4921F  Uint16 GPIO60 : 1 ;
  4922F                    // 28 GPIO60
  4923F  Uint16 GPIO61 : 1 ;
  4924F                    // 29 GPIO61
  4925F  Uint16 GPIO62 : 1 ;
  4926F                    // 30 GPIO62
  4927F  Uint16 GPIO63 : 1 ;
  4928F                    // 31 GPIO63
  4929F} GPBDAT_BITS ;
  4930F
  4931Ftypedef
  4932Fstruct GPCDAT_BITS
  4933F{                            // bits description
  4934F  Uint16 GPIO64 : 1 ;
  4935F                    // 0 GPIO64
  4936F  Uint16 GPIO65 : 1 ;
  4937F                    // 1 GPIO65
  4938F  Uint16 GPIO66 : 1 ;
  4939F                    // 2 GPIO66
  4940F  Uint16 GPIO67 : 1 ;
  4941F                    // 3 GPIO67
  4942F  Uint16 GPIO68 : 1 ;
  4943F                    // 4 GPIO68
  4944F  Uint16 GPIO69 : 1 ;
  4945F                    // 5 GPIO69
  4946F  Uint16 GPIO70 : 1 ;
  4947F                    // 6 GPIO70
  4948F  Uint16 GPIO71 : 1 ;
  4949F                    // 7 GPIO71
  4950F  Uint16 GPIO72 : 1 ;
  4951F                    // 8 GPIO72
  4952F  Uint16 GPIO73 : 1 ;
  4953F                    // 9 GPIO73
  4954F  Uint16 GPIO74 : 1 ;
  4955F                    // 10 GPIO74
  4956F  Uint16 GPIO75 : 1 ;
  4957F                    // 11 GPIO75
  4958F  Uint16 GPIO76 : 1 ;
  4959F                    // 12 GPIO76
  4960F  Uint16 GPIO77 : 1 ;
  4961F                    // 13 GPIO77
  4962F  Uint16 GPIO78 : 1 ;
  4963F                    // 14 GPIO78
  4964F  Uint16 GPIO79 : 1 ;
  4965F                    // 15 GPIO79
  4966F  Uint16 GPIO80 : 1 ;
  4967F                    // 16 GPIO80
  4968F  Uint16 GPIO81 : 1 ;
  4969F                    // 17 GPIO81
  4970F  Uint16 GPIO82 : 1 ;
  4971F                    // 18 GPIO82
  4972F  Uint16 GPIO83 : 1 ;
  4973F                    // 19 GPIO83
  4974F  Uint16 GPIO84 : 1 ;
  4975F                    // 20 GPIO84
  4976F  Uint16 GPIO85 : 1 ;
  4977F                    // 21 GPIO85
  4978F  Uint16 GPIO86 : 1 ;
  4979F                    // 22 GPIO86
  4980F  Uint16 GPIO87 : 1 ;
  4981F                    // 23 GPIO87
  4982F  Uint16 rsvd1 : 8 ;
  4983F                   // 31:24 reserved
  4984F} GPCDAT_BITS ;
  4985F
  4986Ftypedef
  4987Funion GPADAT_REG
  4988F{
  4989F  Uint32 all ;
  4990F  struct GPADAT_BITS bit ;
  4991F} GPADAT_REG ;
  4992F
  4993Ftypedef
  4994Funion GPBDAT_REG
  4995F{
  4996F  Uint32 all ;
  4997F  struct GPBDAT_BITS bit ;
  4998F} GPBDAT_REG ;
  4999F
  5000Ftypedef
  5001Funion GPCDAT_REG
  5002F{
  5003F  Uint32 all ;
  5004F  struct GPCDAT_BITS bit ;
  5005F} GPCDAT_REG ;
  5006F//----------------------------------------------------
  5007F// GPIO Xint1/XINT2/XNMI select register bit definitions */
  5008F
  5009Ftypedef
  5010Fstruct GPIOXINT_BITS
  5011F{                              // bits description
  5012F  Uint16 GPIOSEL : 5 ;// 4:0 Select GPIO interrupt input source
  5013F  Uint16 rsvd1 : 11 ;// 15:5 reserved
  5014F} GPIOXINT_BITS ;
  5015F
  5016Ftypedef
  5017Funion GPIOXINT_REG
  5018F{
  5019F  Uint16 all ;
  5020F  struct GPIOXINT_BITS bit ;
  5021F} GPIOXINT_REG ;
  5022F
  5023Ftypedef
  5024Fstruct GPIO_CTRL_REGS
  5025F{
  5026F  union GPACTRL_REG GPACTRL ; // GPIO A Control Register (GPIO0 to 31)
  5027F  union GPA1_REG GPAQSEL1 ; // GPIO A Qualifier Select 1 Register (GPIO0 to 15)
  5028F  union GPA2_REG GPAQSEL2 ; // GPIO A Qualifier Select 2 Register (GPIO16 to 31)
  5029F  union GPA1_REG GPAMUX1 ; // GPIO A Mux 1 Register (GPIO0 to 15)
  5030F  union GPA2_REG GPAMUX2 ; // GPIO A Mux 2 Register (GPIO16 to 31)
  5031F  union GPADAT_REG GPADIR ; // GPIO A Direction Register (GPIO0 to 31)
  5032F  union GPADAT_REG GPAPUD ; // GPIO A Pull Up Disable Register (GPIO0 to 31)
  5033F  Uint32 rsvd1 ;
  5034F  union GPBCTRL_REG GPBCTRL ; // GPIO B Control Register (GPIO32 to 63)
  5035F  union GPB1_REG GPBQSEL1 ; // GPIO B Qualifier Select 1 Register (GPIO32 to 47)
  5036F  union GPB2_REG GPBQSEL2 ; // GPIO B Qualifier Select 2 Register (GPIO48 to 63)
  5037F  union GPB1_REG GPBMUX1 ; // GPIO B Mux 1 Register (GPIO32 to 47)
  5038F  union GPB2_REG GPBMUX2 ; // GPIO B Mux 2 Register (GPIO48 to 63)
  5039F  union GPBDAT_REG GPBDIR ; // GPIO B Direction Register (GPIO32 to 63)
  5040F  union GPBDAT_REG GPBPUD ; // GPIO B Pull Up Disable Register (GPIO32 to 63)
  5041F  Uint16 rsvd2 [ 8 ] ;
  5042F  union GPC1_REG GPCMUX1 ; // GPIO C Mux 1 Register (GPIO64 to 79)
  5043F  union GPC2_REG GPCMUX2 ; // GPIO C Mux 2 Register (GPIO80 to 95)
  5044F  union GPCDAT_REG GPCDIR ; // GPIO C Direction Register (GPIO64 to 95)
  5045F  union GPCDAT_REG GPCPUD ; // GPIO C Pull Up Disable Register (GPIO64 to 95)
  5046F} GPIO_CTRL_REGS ;
  5047F
  5048Ftypedef
  5049Fstruct GPIO_DATA_REGS
  5050F{
  5051F  union GPADAT_REG GPADAT ; // GPIO Data Register (GPIO0 to 31)
  5052F  union GPADAT_REG GPASET ; // GPIO Data Set Register (GPIO0 to 31)
  5053F  union GPADAT_REG GPACLEAR ; // GPIO Data Clear Register (GPIO0 to 31)
  5054F  union GPADAT_REG GPATOGGLE ; // GPIO Data Toggle Register (GPIO0 to 31)
  5055F  union GPBDAT_REG GPBDAT ; // GPIO Data Register (GPIO32 to 63)
  5056F  union GPBDAT_REG GPBSET ; // GPIO Data Set Register (GPIO32 to 63)
  5057F  union GPBDAT_REG GPBCLEAR ; // GPIO Data Clear Register (GPIO32 to 63)
  5058F  union GPBDAT_REG GPBTOGGLE ; // GPIO Data Toggle Register (GPIO32 to 63)
  5059F  union GPCDAT_REG GPCDAT ; // GPIO Data Register (GPIO64 to 95)
  5060F  union GPCDAT_REG GPCSET ; // GPIO Data Set Register (GPIO64 to 95)
  5061F  union GPCDAT_REG GPCCLEAR ; // GPIO Data Clear Register (GPIO64 to 95)
  5062F  union GPCDAT_REG GPCTOGGLE ; // GPIO Data Toggle Register (GPIO64 to 95)
  5063F  Uint16 rsvd1 [ 8 ] ;
  5064F} GPIO_DATA_REGS ;
  5065F
  5066Ftypedef
  5067Fstruct GPIO_INT_REGS
  5068F{
  5069F  union GPIOXINT_REG GPIOXINT1SEL ; // XINT1 GPIO Input Selection
  5070F  union GPIOXINT_REG GPIOXINT2SEL ; // XINT2 GPIO Input Selection
  5071F  union GPIOXINT_REG GPIOXNMISEL ; // XNMI_Xint13 GPIO Input Selection
  5072F  union GPIOXINT_REG GPIOXINT3SEL ; // XINT3 GPIO Input Selection
  5073F  union GPIOXINT_REG GPIOXINT4SEL ; // XINT4 GPIO Input Selection
  5074F  union GPIOXINT_REG GPIOXINT5SEL ; // XINT5 GPIO Input Selection
  5075F  union GPIOXINT_REG GPIOXINT6SEL ; // XINT6 GPIO Input Selection
  5076F  union GPIOXINT_REG GPIOXINT7SEL ; // XINT7 GPIO Input Selection
  5077F  union GPADAT_REG GPIOLPMSEL ; // Low power modes GP I/O input select
  5078F} GPIO_INT_REGS ;
  5079F//---------------------------------------------------------------------------
  5080F// GPI/O External References & Function Declarations:
  5081F//
  5082F
  5083Fextern volatile struct GPIO_CTRL_REGS
  5084F  GpioCtrlRegs ;
  5085F
  5086Fextern volatile struct GPIO_DATA_REGS
  5087F  GpioDataRegs ;
  5088F
  5089Fextern volatile struct GPIO_INT_REGS
  5090F  GpioIntRegs ;
  5091F       // end of DSP2833x_GPIO_H definition
  5092F//===========================================================================
  5093F// End of file.
  5094F//===========================================================================
  5095F 
  5096F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Gpio.h*/
  5097F/*   CLOSE_FILE Include File */
  5098F 
  5099F               // General Purpose I/O Registers
  5100F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_I2c.h */
  5101F// TI File $Revision: /main/2 $
  5102F// Checkin $Date: March 22, 2007 10:40:22 $
  5103F//###########################################################################
  5104F//
  5105F// FILE: DSP2833x_I2c.h
  5106F//
  5107F// TITLE: DSP2833x Enhanced Quadrature Encoder Pulse Module
  5108F// Register Bit Definitions.
  5109F//
  5110F//###########################################################################
  5111F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  5112F// $Release Date: August 4, 2009 $
  5113F//###########################################################################
  5114F#ifndef DSP2833x_I2C_H
  5115F#define DSP2833x_I2C_H
  5116F//----------------------------------------------------
  5117F// I2C interrupt vector register bit definitions */
  5118F
  5119Fstruct I2CISRC_BITS
  5120F{                     // bits description
  5121F  Uint16 INTCODE : 3 ;
  5122F                     // 2:0 Interrupt code
  5123F  Uint16 rsvd1 : 13 ;
  5124F                    // 15:3 reserved
  5125F} ;
  5126F
  5127Funion I2CISRC_REG
  5128F{
  5129F  Uint16 all ;
  5130F  struct I2CISRC_BITS bit ;
  5131F} ;
  5132F//----------------------------------------------------
  5133F// I2C interrupt mask register bit definitions */
  5134F
  5135Fstruct I2CIER_BITS
  5136F{                    // bits description
  5137F  Uint16 ARBL : 1 ;
  5138F                  // 0 Arbitration lost interrupt
  5139F  Uint16 NACK : 1 ;
  5140F                  // 1 No ack interrupt
  5141F  Uint16 ARDY : 1 ;
  5142F                  // 2 Register access ready interrupt
  5143F  Uint16 RRDY : 1 ;
  5144F                  // 3 Recieve data ready interrupt
  5145F  Uint16 XRDY : 1 ;
  5146F                  // 4 Transmit data ready interrupt
  5147F  Uint16 SCD : 1 ;
  5148F                 // 5 Stop condition detection
  5149F  Uint16 AAS : 1 ;
  5150F                 // 6 Address as slave
  5151F  Uint16 rsvd : 9 ;
  5152F                  // 15:7 reserved
  5153F} ;
  5154F
  5155Funion I2CIER_REG
  5156F{
  5157F  Uint16 all ;
  5158F  struct I2CIER_BITS bit ;
  5159F} ;
  5160F//----------------------------------------------------
  5161F// I2C status register bit definitions */
  5162F
  5163Fstruct I2CSTR_BITS
  5164F{                    // bits description
  5165F  Uint16 ARBL : 1 ;
  5166F                  // 0 Arbitration lost interrupt
  5167F  Uint16 NACK : 1 ;
  5168F                  // 1 No ack interrupt
  5169F  Uint16 ARDY : 1 ;
  5170F                  // 2 Register access ready interrupt
  5171F  Uint16 RRDY : 1 ;
  5172F                  // 3 Recieve data ready interrupt
  5173F  Uint16 XRDY : 1 ;
  5174F                  // 4 Transmit data ready interrupt
  5175F  Uint16 SCD : 1 ;
  5176F                 // 5 Stop condition detection
  5177F  Uint16 rsvd1 : 2 ;
  5178F                   // 7:6 reserved
  5179F  Uint16 AD0 : 1 ;
  5180F                 // 8 Address Zero
  5181F  Uint16 AAS : 1 ;
  5182F                 // 9 Address as slave
  5183F  Uint16 XSMT : 1 ;
  5184F                  // 10 XMIT shift empty
  5185F  Uint16 RSFULL : 1 ;
  5186F                    // 11 Recieve shift full
  5187F  Uint16 BB : 1 ;
  5188F                // 12 Bus busy
  5189F  Uint16 NACKSNT : 1 ;
  5190F                     // 13 A no ack sent
  5191F  Uint16 SDIR : 1 ;
  5192F                  // 14 Slave direction
  5193F  Uint16 rsvd2 : 1 ;
  5194F                   // 15 reserved
  5195F} ;
  5196F
  5197Funion I2CSTR_REG
  5198F{
  5199F  Uint16 all ;
  5200F  struct I2CSTR_BITS bit ;
  5201F} ;
  5202F//----------------------------------------------------
  5203F// I2C mode control register bit definitions */
  5204F
  5205Fstruct I2CMDR_BITS
  5206F{                    // bits description
  5207F  Uint16 BC : 3 ;
  5208F                // 2:0 Bit count
  5209F  Uint16 FDF : 1 ;
  5210F                 // 3 Free data format
  5211F  Uint16 STB : 1 ;
  5212F                 // 4 Start byte
  5213F  Uint16 IRS : 1 ;
  5214F                 // 5 I2C Reset not
  5215F  Uint16 DLB : 1 ;
  5216F                 // 6 Digital loopback
  5217F  Uint16 RM : 1 ;
  5218F                // 7 Repeat mode
  5219F  Uint16 XA : 1 ;
  5220F                // 8 Expand address
  5221F  Uint16 TRX : 1 ;
  5222F                 // 9 Transmitter/reciever
  5223F  Uint16 MST : 1 ;
  5224F                 // 10 Master/slave
  5225F  Uint16 STP : 1 ;
  5226F                 // 11 Stop condition
  5227F  Uint16 rsvd1 : 1 ;
  5228F                   // 12 reserved
  5229F  Uint16 STT : 1 ;
  5230F                 // 13 Start condition
  5231F  Uint16 FREE : 1 ;
  5232F                  // 14 Emulation mode
  5233F  Uint16 NACKMOD : 1 ;
  5234F                     // 15 No Ack mode
  5235F} ;
  5236F
  5237Funion I2CMDR_REG
  5238F{
  5239F  Uint16 all ;
  5240F  struct I2CMDR_BITS bit ;
  5241F} ;
  5242F//----------------------------------------------------
  5243F// I2C pre-scaler register bit definitions */
  5244F
  5245Fstruct I2CPSC_BITS
  5246F{                    // bits description
  5247F  Uint16 IPSC : 8 ;
  5248F                  // 7:0 pre-scaler
  5249F  Uint16 rsvd1 : 8 ;
  5250F                   // 15:8 reserved
  5251F} ;
  5252F
  5253Funion I2CPSC_REG
  5254F{
  5255F  Uint16 all ;
  5256F  struct I2CPSC_BITS bit ;
  5257F} ;
  5258F//----------------------------------------------------
  5259F// TX FIFO control register bit definitions */
  5260F
  5261Fstruct I2CFFTX_BITS
  5262F{                     // bits description
  5263F  Uint16 TXFFIL : 5 ;
  5264F                    // 4:0 FIFO interrupt level
  5265F  Uint16 TXFFIENA : 1 ;
  5266F                      // 5 FIFO interrupt enable/disable
  5267F  Uint16 TXFFINTCLR : 1 ;
  5268F                        // 6 FIFO clear
  5269F  Uint16 TXFFINT : 1 ;
  5270F                     // 7 FIFO interrupt flag
  5271F  Uint16 TXFFST : 5 ;
  5272F                    // 12:8 FIFO level status
  5273F  Uint16 TXFFRST : 1 ;
  5274F                     // 13 FIFO reset
  5275F  Uint16 I2CFFEN : 1 ;
  5276F                     // 14 enable/disable TX & RX FIFOs
  5277F  Uint16 rsvd1 : 1 ;
  5278F                   // 15 reserved
  5279F} ;
  5280F
  5281Funion I2CFFTX_REG
  5282F{
  5283F  Uint16 all ;
  5284F  struct I2CFFTX_BITS bit ;
  5285F} ;
  5286F//----------------------------------------------------
  5287F// RX FIFO control register bit definitions */
  5288F
  5289Fstruct I2CFFRX_BITS
  5290F{                     // bits description
  5291F  Uint16 RXFFIL : 5 ;
  5292F                    // 4:0 FIFO interrupt level
  5293F  Uint16 RXFFIENA : 1 ;
  5294F                      // 5 FIFO interrupt enable/disable
  5295F  Uint16 RXFFINTCLR : 1 ;
  5296F                        // 6 FIFO clear
  5297F  Uint16 RXFFINT : 1 ;
  5298F                     // 7 FIFO interrupt flag
  5299F  Uint16 RXFFST : 5 ;
  5300F                    // 12:8 FIFO level
  5301F  Uint16 RXFFRST : 1 ;
  5302F                     // 13 FIFO reset
  5303F  Uint16 rsvd1 : 2 ;
  5304F                   // 15:14 reserved
  5305F} ;
  5306F
  5307Funion I2CFFRX_REG
  5308F{
  5309F  Uint16 all ;
  5310F  struct I2CFFRX_BITS bit ;
  5311F} ;
  5312F//----------------------------------------------------
  5313F
  5314Fstruct I2C_REGS
  5315F{
  5316F  Uint16 I2COAR ; // Own address register
  5317F  union I2CIER_REG I2CIER ; // Interrupt enable
  5318F  union I2CSTR_REG I2CSTR ; // Interrupt status
  5319F  Uint16 I2CCLKL ; // Clock divider low
  5320F  Uint16 I2CCLKH ; // Clock divider high
  5321F  Uint16 I2CCNT ; // Data count
  5322F  Uint16 I2CDRR ; // Data recieve
  5323F  Uint16 I2CSAR ; // Slave address
  5324F  Uint16 I2CDXR ; // Data transmit
  5325F  union I2CMDR_REG I2CMDR ; // Mode
  5326F  union I2CISRC_REG I2CISRC ; // Interrupt source
  5327F  Uint16 rsvd1 ; // reserved
  5328F  union I2CPSC_REG I2CPSC ; // Pre-scaler
  5329F  Uint16 rsvd2 [ 19 ] ;
  5330F                     // reserved
  5331F  union I2CFFTX_REG I2CFFTX ; // Transmit FIFO
  5332F  union I2CFFRX_REG I2CFFRX ; // Recieve FIFO
  5333F} ;
  5334F//---------------------------------------------------------------------------
  5335F// External References & Function Declarations:
  5336F//
  5337F
  5338Fextern volatile struct I2C_REGS
  5339F  I2caRegs ;
  5340F       /* extern "C" */
  5341F       // end of DSP2833x_I2C_H definition
  5342F//===========================================================================
  5343F// End of file.
  5344F//===========================================================================
  5345F 
  5346F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_I2c.h*/
  5347F/*   CLOSE_FILE Include File */
  5348F 
  5349F                // I2C Registers
  5350F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_McBSP.h */
  5351F// TI File $Revision: /main/5 $
  5352F// Checkin $Date: May 14, 2008 16:30:31 $
  5353F//###########################################################################
  5354F//
  5355F// FILE: DSP2833x_Mcbsp.h
  5356F//
  5357F// TITLE: DSP2833x Device McBSP Register Definitions.
  5358F//
  5359F//###########################################################################
  5360F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  5361F// $Release Date: August 4, 2009 $
  5362F//###########################################################################
  5363F#ifndef DSP2833x_MCBSP_H
  5364F#define DSP2833x_MCBSP_H
  5365F//---------------------------------------------------------------------------
  5366F// McBSP Individual Register Bit Definitions:
  5367F//
  5368F// McBSP DRR2 register bit definitions:
  5369F
  5370Fstruct DRR2_BITS
  5371F{                  // bit description
  5372F  Uint16 HWLB : 8 ;
  5373F                  // 16:23 High word low byte
  5374F  Uint16 HWHB : 8 ;
  5375F                  // 24:31 High word high byte
  5376F} ;
  5377F
  5378Funion DRR2_REG
  5379F{
  5380F  Uint16 all ;
  5381F  struct DRR2_BITS bit ;
  5382F} ;
  5383F// McBSP DRR1 register bit definitions:
  5384F
  5385Fstruct DRR1_BITS
  5386F{                  // bit description
  5387F  Uint16 LWLB : 8 ;
  5388F                  // 16:23 Low word low byte
  5389F  Uint16 LWHB : 8 ;
  5390F                  // 24:31 low word high byte
  5391F} ;
  5392F
  5393Funion DRR1_REG
  5394F{
  5395F  Uint16 all ;
  5396F  struct DRR1_BITS bit ;
  5397F} ;
  5398F// McBSP DXR2 register bit definitions:
  5399F
  5400Fstruct DXR2_BITS
  5401F{                  // bit description
  5402F  Uint16 HWLB : 8 ;
  5403F                  // 16:23 High word low byte
  5404F  Uint16 HWHB : 8 ;
  5405F                  // 24:31 High word high byte
  5406F} ;
  5407F
  5408Funion DXR2_REG
  5409F{
  5410F  Uint16 all ;
  5411F  struct DXR2_BITS bit ;
  5412F} ;
  5413F// McBSP DXR1 register bit definitions:
  5414F
  5415Fstruct DXR1_BITS
  5416F{                  // bit description
  5417F  Uint16 LWLB : 8 ;
  5418F                  // 16:23 Low word low byte
  5419F  Uint16 LWHB : 8 ;
  5420F                  // 24:31 low word high byte
  5421F} ;
  5422F
  5423Funion DXR1_REG
  5424F{
  5425F  Uint16 all ;
  5426F  struct DXR1_BITS bit ;
  5427F} ;
  5428F// SPCR2 control register bit definitions:
  5429F
  5430Fstruct SPCR2_BITS
  5431F{                   // bit description
  5432F  Uint16 XRST : 1 ;
  5433F                  // 0 transmit reset
  5434F  Uint16 XRDY : 1 ;
  5435F                  // 1 transmit ready
  5436F  Uint16 XEMPTY : 1 ;
  5437F                    // 2 Transmit empty
  5438F  Uint16 XSYNCERR : 1 ;
  5439F                      // 3 Transmit syn errorINT flag
  5440F  Uint16 XINTM : 2 ;
  5441F                   // 5:4 Transmit interrupt types
  5442F  Uint16 GRST : 1 ;
  5443F                  // 6 CLKG reset
  5444F  Uint16 FRST : 1 ;
  5445F                  // 7 Frame sync reset
  5446F  Uint16 SOFT : 1 ;
  5447F                  // 8 SOFT bit
  5448F  Uint16 FREE : 1 ;
  5449F                  // 9 FREE bit
  5450F  Uint16 rsvd : 6 ;
  5451F                  // 15:10 reserved
  5452F} ;
  5453F
  5454Funion SPCR2_REG
  5455F{
  5456F  Uint16 all ;
  5457F  struct SPCR2_BITS bit ;
  5458F} ;
  5459F// SPCR1 control register bit definitions:
  5460F
  5461Fstruct SPCR1_BITS
  5462F{                   // bit description
  5463F  Uint16 RRST : 1 ;
  5464F                  // 0 Receive reset
  5465F  Uint16 RRDY : 1 ;
  5466F                  // 1 Receive ready
  5467F  Uint16 RFULL : 1 ;
  5468F                   // 2 Receive full
  5469F  Uint16 RSYNCERR : 1 ;
  5470F                      // 7 Receive syn error
  5471F  Uint16 RINTM : 2 ;
  5472F                   // 5:4 Receive interrupt types
  5473F  Uint16 ABIS : 1 ;
  5474F                  // 6 ABIS mode select
  5475F  Uint16 DXENA : 1 ;
  5476F                   // 7 DX hi-z enable
  5477F  Uint16 rsvd : 3 ;
  5478F                  // 10:8 reserved
  5479F  Uint16 CLKSTP : 2 ;
  5480F                    // 12:11 CLKSTOP mode bit
  5481F  Uint16 RJUST : 2 ;
  5482F                   // 13:14 Right justified
  5483F  Uint16 DLB : 1 ;
  5484F                 // 15 Digital loop back
  5485F} ;
  5486F
  5487Funion SPCR1_REG
  5488F{
  5489F  Uint16 all ;
  5490F  struct SPCR1_BITS bit ;
  5491F} ;
  5492F// RCR2 control register bit definitions:
  5493F
  5494Fstruct RCR2_BITS
  5495F{                  // bit description
  5496F  Uint16 RDATDLY : 2 ;
  5497F                     // 1:0 Receive data delay
  5498F  Uint16 RFIG : 1 ;
  5499F                  // 2 Receive frame sync ignore
  5500F  Uint16 RCOMPAND : 2 ;
  5501F                      // 4:3 Receive Companding Mode selects
  5502F  Uint16 RWDLEN2 : 3 ;
  5503F                     // 7:5 Receive word length
  5504F  Uint16 RFRLEN2 : 7 ;
  5505F                     // 14:8 Receive Frame sync
  5506F  Uint16 RPHASE : 1 ;
  5507F                    // 15 Receive Phase
  5508F} ;
  5509F
  5510Funion RCR2_REG
  5511F{
  5512F  Uint16 all ;
  5513F  struct RCR2_BITS bit ;
  5514F} ;
  5515F// RCR1 control register bit definitions:
  5516F
  5517Fstruct RCR1_BITS
  5518F{                  // bit description
  5519F  Uint16 rsvd1 : 5 ;
  5520F                   // 4:0 reserved
  5521F  Uint16 RWDLEN1 : 3 ;
  5522F                     // 7:5 Receive word length
  5523F  Uint16 RFRLEN1 : 7 ;
  5524F                     // 14:8 Receive frame length
  5525F  Uint16 rsvd2 : 1 ;
  5526F                   // 15 reserved
  5527F} ;
  5528F
  5529Funion RCR1_REG
  5530F{
  5531F  Uint16 all ;
  5532F  struct RCR1_BITS bit ;
  5533F} ;
  5534F// XCR2 control register bit definitions:
  5535F
  5536Fstruct XCR2_BITS
  5537F{                  // bit description
  5538F  Uint16 XDATDLY : 2 ;
  5539F                     // 1:0 Transmit data delay
  5540F  Uint16 XFIG : 1 ;
  5541F                  // 2 Transmit frame sync ignore
  5542F  Uint16 XCOMPAND : 2 ;
  5543F                      // 4:3 Transmit Companding Mode selects
  5544F  Uint16 XWDLEN2 : 3 ;
  5545F                     // 7:5 Transmit word length
  5546F  Uint16 XFRLEN2 : 7 ;
  5547F                     // 14:8 Transmit Frame sync
  5548F  Uint16 XPHASE : 1 ;
  5549F                    // 15 Transmit Phase
  5550F} ;
  5551F
  5552Funion XCR2_REG
  5553F{
  5554F  Uint16 all ;
  5555F  struct XCR2_BITS bit ;
  5556F} ;
  5557F// XCR1 control register bit definitions:
  5558F
  5559Fstruct XCR1_BITS
  5560F{                  // bit description
  5561F  Uint16 rsvd1 : 5 ;
  5562F                   // 4:0 reserved
  5563F  Uint16 XWDLEN1 : 3 ;
  5564F                     // 7:5 Transmit word length
  5565F  Uint16 XFRLEN1 : 7 ;
  5566F                     // 14:8 Transmit frame length
  5567F  Uint16 rsvd2 : 1 ;
  5568F                   // 15 reserved
  5569F} ;
  5570F
  5571Funion XCR1_REG
  5572F{
  5573F  Uint16 all ;
  5574F  struct XCR1_BITS bit ;
  5575F} ;
  5576F// SRGR2 Sample rate generator control register bit definitions:
  5577F
  5578Fstruct SRGR2_BITS
  5579F{                   // bit description
  5580F  Uint16 FPER : 12 ;
  5581F                   // 11:0 Frame period
  5582F  Uint16 FSGM : 1 ;
  5583F                  // 12 Frame sync generator mode
  5584F  Uint16 CLKSM : 1 ;
  5585F                   // 13 Sample rate generator mode
  5586F  Uint16 rsvd : 1 ;
  5587F                  // 14 reserved
  5588F  Uint16 GSYNC : 1 ;
  5589F                   // 15 CLKG sync
  5590F} ;
  5591F
  5592Funion SRGR2_REG
  5593F{
  5594F  Uint16 all ;
  5595F  struct SRGR2_BITS bit ;
  5596F} ;
  5597F// SRGR1 control register bit definitions:
  5598F
  5599Fstruct SRGR1_BITS
  5600F{                   // bit description
  5601F  Uint16 CLKGDV : 8 ;
  5602F                    // 7:0 CLKG divider
  5603F  Uint16 FWID : 8 ;
  5604F                  // 15:8 Frame width
  5605F} ;
  5606F
  5607Funion SRGR1_REG
  5608F{
  5609F  Uint16 all ;
  5610F  struct SRGR1_BITS bit ;
  5611F} ;
  5612F// MCR2 Multichannel control register bit definitions:
  5613F
  5614Fstruct MCR2_BITS
  5615F{                  // bit description
  5616F  Uint16 XMCM : 2 ;
  5617F                  // 1:0 Transmit multichannel mode
  5618F  Uint16 XCBLK : 3 ;
  5619F                   // 2:4 Transmit current block
  5620F  Uint16 XPABLK : 2 ;
  5621F                    // 5:6 Transmit partition A Block
  5622F  Uint16 XPBBLK : 2 ;
  5623F                    // 7:8 Transmit partition B Block
  5624F  Uint16 XMCME : 1 ;
  5625F                   // 9 Transmit multi-channel enhance mode
  5626F  Uint16 rsvd : 6 ;
  5627F                  // 15:10 reserved
  5628F} ;
  5629F
  5630Funion MCR2_REG
  5631F{
  5632F  Uint16 all ;
  5633F  struct MCR2_BITS bit ;
  5634F} ;
  5635F// MCR1 Multichannel control register bit definitions:
  5636F
  5637Fstruct MCR1_BITS
  5638F{                  // bit description
  5639F  Uint16 RMCM : 1 ;
  5640F                  // 0 Receive multichannel mode
  5641F  Uint16 rsvd : 1 ;
  5642F                  // 1 reserved
  5643F  Uint16 RCBLK : 3 ;
  5644F                   // 4:2 Receive current block
  5645F  Uint16 RPABLK : 2 ;
  5646F                    // 6:5 Receive partition A Block
  5647F  Uint16 RPBBLK : 2 ;
  5648F                    // 7:8 Receive partition B Block
  5649F  Uint16 RMCME : 1 ;
  5650F                   // 9 Receive multi-channel enhance mode
  5651F  Uint16 rsvd1 : 6 ;
  5652F                   // 15:10 reserved
  5653F} ;
  5654F
  5655Funion MCR1_REG
  5656F{
  5657F  Uint16 all ;
  5658F  struct MCR1_BITS bit ;
  5659F} ;
  5660F// RCERA control register bit definitions:
  5661F
  5662Fstruct RCERA_BITS
  5663F{                   // bit description
  5664F  Uint16 RCEA0 : 1 ;
  5665F                   // 0 Receive Channel enable bit
  5666F  Uint16 RCEA1 : 1 ;
  5667F                   // 1 Receive Channel enable bit
  5668F  Uint16 RCEA2 : 1 ;
  5669F                   // 2 Receive Channel enable bit
  5670F  Uint16 RCEA3 : 1 ;
  5671F                   // 3 Receive Channel enable bit
  5672F  Uint16 RCEA4 : 1 ;
  5673F                   // 4 Receive Channel enable bit
  5674F  Uint16 RCEA5 : 1 ;
  5675F                   // 5 Receive Channel enable bit
  5676F  Uint16 RCEA6 : 1 ;
  5677F                   // 6 Receive Channel enable bit
  5678F  Uint16 RCEA7 : 1 ;
  5679F                   // 7 Receive Channel enable bit
  5680F  Uint16 RCEA8 : 1 ;
  5681F                   // 8 Receive Channel enable bit
  5682F  Uint16 RCEA9 : 1 ;
  5683F                   // 9 Receive Channel enable bit
  5684F  Uint16 RCEA10 : 1 ;
  5685F                    // 10 Receive Channel enable bit
  5686F  Uint16 RCEA11 : 1 ;
  5687F                    // 11 Receive Channel enable bit
  5688F  Uint16 RCEA12 : 1 ;
  5689F                    // 12 Receive Channel enable bit
  5690F  Uint16 RCEA13 : 1 ;
  5691F                    // 13 Receive Channel enable bit
  5692F  Uint16 RCEA14 : 1 ;
  5693F                    // 14 Receive Channel enable bit
  5694F  Uint16 RCEA15 : 1 ;
  5695F                    // 15 Receive Channel enable bit
  5696F} ;
  5697F
  5698Funion RCERA_REG
  5699F{
  5700F  Uint16 all ;
  5701F  struct RCERA_BITS bit ;
  5702F} ;
  5703F// RCERB control register bit definitions:
  5704F
  5705Fstruct RCERB_BITS
  5706F{                   // bit description
  5707F  Uint16 RCEB0 : 1 ;
  5708F                   // 0 Receive Channel enable bit
  5709F  Uint16 RCEB1 : 1 ;
  5710F                   // 1 Receive Channel enable bit
  5711F  Uint16 RCEB2 : 1 ;
  5712F                   // 2 Receive Channel enable bit
  5713F  Uint16 RCEB3 : 1 ;
  5714F                   // 3 Receive Channel enable bit
  5715F  Uint16 RCEB4 : 1 ;
  5716F                   // 4 Receive Channel enable bit
  5717F  Uint16 RCEB5 : 1 ;
  5718F                   // 5 Receive Channel enable bit
  5719F  Uint16 RCEB6 : 1 ;
  5720F                   // 6 Receive Channel enable bit
  5721F  Uint16 RCEB7 : 1 ;
  5722F                   // 7 Receive Channel enable bit
  5723F  Uint16 RCEB8 : 1 ;
  5724F                   // 8 Receive Channel enable bit
  5725F  Uint16 RCEB9 : 1 ;
  5726F                   // 9 Receive Channel enable bit
  5727F  Uint16 RCEB10 : 1 ;
  5728F                    // 10 Receive Channel enable bit
  5729F  Uint16 RCEB11 : 1 ;
  5730F                    // 11 Receive Channel enable bit
  5731F  Uint16 RCEB12 : 1 ;
  5732F                    // 12 Receive Channel enable bit
  5733F  Uint16 RCEB13 : 1 ;
  5734F                    // 13 Receive Channel enable bit
  5735F  Uint16 RCEB14 : 1 ;
  5736F                    // 14 Receive Channel enable bit
  5737F  Uint16 RCEB15 : 1 ;
  5738F                    // 15 Receive Channel enable bit
  5739F} ;
  5740F
  5741Funion RCERB_REG
  5742F{
  5743F  Uint16 all ;
  5744F  struct RCERB_BITS bit ;
  5745F} ;
  5746F// XCERA control register bit definitions:
  5747F
  5748Fstruct XCERA_BITS
  5749F{                   // bit description
  5750F  Uint16 XCERA0 : 1 ;
  5751F                    // 0 Receive Channel enable bit
  5752F  Uint16 XCERA1 : 1 ;
  5753F                    // 1 Receive Channel enable bit
  5754F  Uint16 XCERA2 : 1 ;
  5755F                    // 2 Receive Channel enable bit
  5756F  Uint16 XCERA3 : 1 ;
  5757F                    // 3 Receive Channel enable bit
  5758F  Uint16 XCERA4 : 1 ;
  5759F                    // 4 Receive Channel enable bit
  5760F  Uint16 XCERA5 : 1 ;
  5761F                    // 5 Receive Channel enable bit
  5762F  Uint16 XCERA6 : 1 ;
  5763F                    // 6 Receive Channel enable bit
  5764F  Uint16 XCERA7 : 1 ;
  5765F                    // 7 Receive Channel enable bit
  5766F  Uint16 XCERA8 : 1 ;
  5767F                    // 8 Receive Channel enable bit
  5768F  Uint16 XCERA9 : 1 ;
  5769F                    // 9 Receive Channel enable bit
  5770F  Uint16 XCERA10 : 1 ;
  5771F                     // 10 Receive Channel enable bit
  5772F  Uint16 XCERA11 : 1 ;
  5773F                     // 11 Receive Channel enable bit
  5774F  Uint16 XCERA12 : 1 ;
  5775F                     // 12 Receive Channel enable bit
  5776F  Uint16 XCERA13 : 1 ;
  5777F                     // 13 Receive Channel enable bit
  5778F  Uint16 XCERA14 : 1 ;
  5779F                     // 14 Receive Channel enable bit
  5780F  Uint16 XCERA15 : 1 ;
  5781F                     // 15 Receive Channel enable bit
  5782F} ;
  5783F
  5784Funion XCERA_REG
  5785F{
  5786F  Uint16 all ;
  5787F  struct XCERA_BITS bit ;
  5788F} ;
  5789F// XCERB control register bit definitions:
  5790F
  5791Fstruct XCERB_BITS
  5792F{                   // bit description
  5793F  Uint16 XCERB0 : 1 ;
  5794F                    // 0 Receive Channel enable bit
  5795F  Uint16 XCERB1 : 1 ;
  5796F                    // 1 Receive Channel enable bit
  5797F  Uint16 XCERB2 : 1 ;
  5798F                    // 2 Receive Channel enable bit
  5799F  Uint16 XCERB3 : 1 ;
  5800F                    // 3 Receive Channel enable bit
  5801F  Uint16 XCERB4 : 1 ;
  5802F                    // 4 Receive Channel enable bit
  5803F  Uint16 XCERB5 : 1 ;
  5804F                    // 5 Receive Channel enable bit
  5805F  Uint16 XCERB6 : 1 ;
  5806F                    // 6 Receive Channel enable bit
  5807F  Uint16 XCERB7 : 1 ;
  5808F                    // 7 Receive Channel enable bit
  5809F  Uint16 XCERB8 : 1 ;
  5810F                    // 8 Receive Channel enable bit
  5811F  Uint16 XCERB9 : 1 ;
  5812F                    // 9 Receive Channel enable bit
  5813F  Uint16 XCERB10 : 1 ;
  5814F                     // 10 Receive Channel enable bit
  5815F  Uint16 XCERB11 : 1 ;
  5816F                     // 11 Receive Channel enable bit
  5817F  Uint16 XCERB12 : 1 ;
  5818F                     // 12 Receive Channel enable bit
  5819F  Uint16 XCERB13 : 1 ;
  5820F                     // 13 Receive Channel enable bit
  5821F  Uint16 XCERB14 : 1 ;
  5822F                     // 14 Receive Channel enable bit
  5823F  Uint16 XCERB15 : 1 ;
  5824F                     // 15 Receive Channel enable bit
  5825F} ;
  5826F
  5827Funion XCERB_REG
  5828F{
  5829F  Uint16 all ;
  5830F  struct XCERB_BITS bit ;
  5831F} ;
  5832F// PCR control register bit definitions:
  5833F
  5834Fstruct PCR_BITS
  5835F{                 // bit description
  5836F  Uint16 CLKRP : 1 ;
  5837F                   // 0 Receive Clock polarity
  5838F  Uint16 CLKXP : 1 ;
  5839F                   // 1 Transmit clock polarity
  5840F  Uint16 FSRP : 1 ;
  5841F                  // 2 Receive Frame synchronization polarity
  5842F  Uint16 FSXP : 1 ;
  5843F                  // 3 Transmit Frame synchronization polarity
  5844F  Uint16 DR_STAT : 1 ;
  5845F                     // 4 DR pin status - reserved for this McBSP
  5846F  Uint16 DX_STAT : 1 ;
  5847F                     // 5 DX pin status - reserved for this McBSP
  5848F  Uint16 CLKS_STAT : 1 ;
  5849F                       // 6 CLKS pin status - reserved for 28x -McBSP
  5850F  Uint16 SCLKME : 1 ;
  5851F                    // 7 Enhanced sample clock mode selection bit.
  5852F  Uint16 CLKRM : 1 ;
  5853F                   // 8 Receiver Clock Mode
  5854F  Uint16 CLKXM : 1 ;
  5855F                   // 9 Transmitter Clock Mode.
  5856F  Uint16 FSRM : 1 ;
  5857F                  // 10 Receive Frame Synchronization Mode
  5858F  Uint16 FSXM : 1 ;
  5859F                  // 11 Transmit Frame Synchronization Mode
  5860F  Uint16 RIOEN : 1 ;
  5861F                   // 12 General Purpose I/O Mode - reserved in this 28x-McBSP
  5862F  Uint16 XIOEN : 1 ;
  5863F                   // 13 General Purpose I/O Mode - reserved in this 28x-McBSP
  5864F  Uint16 IDEL_EN : 1 ;
  5865F                     // 14 reserved in this 28x-McBSP
  5866F  Uint16 rsvd : 1 ;// 15 reserved
  5867F} ;
  5868F
  5869Funion PCR_REG
  5870F{
  5871F  Uint16 all ;
  5872F  struct PCR_BITS bit ;
  5873F} ;
  5874F// RCERC control register bit definitions:
  5875F
  5876Fstruct RCERC_BITS
  5877F{                   // bit description
  5878F  Uint16 RCEC0 : 1 ;
  5879F                   // 0 Receive Channel enable bit
  5880F  Uint16 RCEC1 : 1 ;
  5881F                   // 1 Receive Channel enable bit
  5882F  Uint16 RCEC2 : 1 ;
  5883F                   // 2 Receive Channel enable bit
  5884F  Uint16 RCEC3 : 1 ;
  5885F                   // 3 Receive Channel enable bit
  5886F  Uint16 RCEC4 : 1 ;
  5887F                   // 4 Receive Channel enable bit
  5888F  Uint16 RCEC5 : 1 ;
  5889F                   // 5 Receive Channel enable bit
  5890F  Uint16 RCEC6 : 1 ;
  5891F                   // 6 Receive Channel enable bit
  5892F  Uint16 RCEC7 : 1 ;
  5893F                   // 7 Receive Channel enable bit
  5894F  Uint16 RCEC8 : 1 ;
  5895F                   // 8 Receive Channel enable bit
  5896F  Uint16 RCEC9 : 1 ;
  5897F                   // 9 Receive Channel enable bit
  5898F  Uint16 RCEC10 : 1 ;
  5899F                    // 10 Receive Channel enable bit
  5900F  Uint16 RCEC11 : 1 ;
  5901F                    // 11 Receive Channel enable bit
  5902F  Uint16 RCEC12 : 1 ;
  5903F                    // 12 Receive Channel enable bit
  5904F  Uint16 RCEC13 : 1 ;
  5905F                    // 13 Receive Channel enable bit
  5906F  Uint16 RCEC14 : 1 ;
  5907F                    // 14 Receive Channel enable bit
  5908F  Uint16 RCEC15 : 1 ;
  5909F                    // 15 Receive Channel enable bit
  5910F} ;
  5911F
  5912Funion RCERC_REG
  5913F{
  5914F  Uint16 all ;
  5915F  struct RCERC_BITS bit ;
  5916F} ;
  5917F// RCERD control register bit definitions:
  5918F
  5919Fstruct RCERD_BITS
  5920F{                   // bit description
  5921F  Uint16 RCED0 : 1 ;
  5922F                   // 0 Receive Channel enable bit
  5923F  Uint16 RCED1 : 1 ;
  5924F                   // 1 Receive Channel enable bit
  5925F  Uint16 RCED2 : 1 ;
  5926F                   // 2 Receive Channel enable bit
  5927F  Uint16 RCED3 : 1 ;
  5928F                   // 3 Receive Channel enable bit
  5929F  Uint16 RCED4 : 1 ;
  5930F                   // 4 Receive Channel enable bit
  5931F  Uint16 RCED5 : 1 ;
  5932F                   // 5 Receive Channel enable bit
  5933F  Uint16 RCED6 : 1 ;
  5934F                   // 6 Receive Channel enable bit
  5935F  Uint16 RCED7 : 1 ;
  5936F                   // 7 Receive Channel enable bit
  5937F  Uint16 RCED8 : 1 ;
  5938F                   // 8 Receive Channel enable bit
  5939F  Uint16 RCED9 : 1 ;
  5940F                   // 9 Receive Channel enable bit
  5941F  Uint16 RCED10 : 1 ;
  5942F                    // 10 Receive Channel enable bit
  5943F  Uint16 RCED11 : 1 ;
  5944F                    // 11 Receive Channel enable bit
  5945F  Uint16 RCED12 : 1 ;
  5946F                    // 12 Receive Channel enable bit
  5947F  Uint16 RCED13 : 1 ;
  5948F                    // 13 Receive Channel enable bit
  5949F  Uint16 RCED14 : 1 ;
  5950F                    // 14 Receive Channel enable bit
  5951F  Uint16 RCED15 : 1 ;
  5952F                    // 15 Receive Channel enable bit
  5953F} ;
  5954F
  5955Funion RCERD_REG
  5956F{
  5957F  Uint16 all ;
  5958F  struct RCERD_BITS bit ;
  5959F} ;
  5960F// XCERC control register bit definitions:
  5961F
  5962Fstruct XCERC_BITS
  5963F{                   // bit description
  5964F  Uint16 XCERC0 : 1 ;
  5965F                    // 0 Receive Channel enable bit
  5966F  Uint16 XCERC1 : 1 ;
  5967F                    // 1 Receive Channel enable bit
  5968F  Uint16 XCERC2 : 1 ;
  5969F                    // 2 Receive Channel enable bit
  5970F  Uint16 XCERC3 : 1 ;
  5971F                    // 3 Receive Channel enable bit
  5972F  Uint16 XCERC4 : 1 ;
  5973F                    // 4 Receive Channel enable bit
  5974F  Uint16 XCERC5 : 1 ;
  5975F                    // 5 Receive Channel enable bit
  5976F  Uint16 XCERC6 : 1 ;
  5977F                    // 6 Receive Channel enable bit
  5978F  Uint16 XCERC7 : 1 ;
  5979F                    // 7 Receive Channel enable bit
  5980F  Uint16 XCERC8 : 1 ;
  5981F                    // 8 Receive Channel enable bit
  5982F  Uint16 XCERC9 : 1 ;
  5983F                    // 9 Receive Channel enable bit
  5984F  Uint16 XCERC10 : 1 ;
  5985F                     // 10 Receive Channel enable bit
  5986F  Uint16 XCERC11 : 1 ;
  5987F                     // 11 Receive Channel enable bit
  5988F  Uint16 XCERC12 : 1 ;
  5989F                     // 12 Receive Channel enable bit
  5990F  Uint16 XCERC13 : 1 ;
  5991F                     // 13 Receive Channel enable bit
  5992F  Uint16 XCERC14 : 1 ;
  5993F                     // 14 Receive Channel enable bit
  5994F  Uint16 XCERC15 : 1 ;
  5995F                     // 15 Receive Channel enable bit
  5996F} ;
  5997F
  5998Funion XCERC_REG
  5999F{
  6000F  Uint16 all ;
  6001F  struct XCERC_BITS bit ;
  6002F} ;
  6003F// XCERD control register bit definitions:
  6004F
  6005Fstruct XCERD_BITS
  6006F{                   // bit description
  6007F  Uint16 XCERD0 : 1 ;
  6008F                    // 0 Receive Channel enable bit
  6009F  Uint16 XCERD1 : 1 ;
  6010F                    // 1 Receive Channel enable bit
  6011F  Uint16 XCERD2 : 1 ;
  6012F                    // 2 Receive Channel enable bit
  6013F  Uint16 XCERD3 : 1 ;
  6014F                    // 3 Receive Channel enable bit
  6015F  Uint16 XCERD4 : 1 ;
  6016F                    // 4 Receive Channel enable bit
  6017F  Uint16 XCERD5 : 1 ;
  6018F                    // 5 Receive Channel enable bit
  6019F  Uint16 XCERD6 : 1 ;
  6020F                    // 6 Receive Channel enable bit
  6021F  Uint16 XCERD7 : 1 ;
  6022F                    // 7 Receive Channel enable bit
  6023F  Uint16 XCERD8 : 1 ;
  6024F                    // 8 Receive Channel enable bit
  6025F  Uint16 XCERD9 : 1 ;
  6026F                    // 9 Receive Channel enable bit
  6027F  Uint16 XCERD10 : 1 ;
  6028F                     // 10 Receive Channel enable bit
  6029F  Uint16 XCERD11 : 1 ;
  6030F                     // 11 Receive Channel enable bit
  6031F  Uint16 XCERD12 : 1 ;
  6032F                     // 12 Receive Channel enable bit
  6033F  Uint16 XCERD13 : 1 ;
  6034F                     // 13 Receive Channel enable bit
  6035F  Uint16 XCERD14 : 1 ;
  6036F                     // 14 Receive Channel enable bit
  6037F  Uint16 XCERD15 : 1 ;
  6038F                     // 15 Receive Channel enable bit
  6039F} ;
  6040F
  6041Funion XCERD_REG
  6042F{
  6043F  Uint16 all ;
  6044F  struct XCERD_BITS bit ;
  6045F} ;
  6046F// RCERE control register bit definitions:
  6047F
  6048Fstruct RCERE_BITS
  6049F{                   // bit description
  6050F  Uint16 RCEE0 : 1 ;
  6051F                   // 0 Receive Channel enable bit
  6052F  Uint16 RCEE1 : 1 ;
  6053F                   // 1 Receive Channel enable bit
  6054F  Uint16 RCEE2 : 1 ;
  6055F                   // 2 Receive Channel enable bit
  6056F  Uint16 RCEE3 : 1 ;
  6057F                   // 3 Receive Channel enable bit
  6058F  Uint16 RCEE4 : 1 ;
  6059F                   // 4 Receive Channel enable bit
  6060F  Uint16 RCEE5 : 1 ;
  6061F                   // 5 Receive Channel enable bit
  6062F  Uint16 RCEE6 : 1 ;
  6063F                   // 6 Receive Channel enable bit
  6064F  Uint16 RCEE7 : 1 ;
  6065F                   // 7 Receive Channel enable bit
  6066F  Uint16 RCEE8 : 1 ;
  6067F                   // 8 Receive Channel enable bit
  6068F  Uint16 RCEE9 : 1 ;
  6069F                   // 9 Receive Channel enable bit
  6070F  Uint16 RCEE10 : 1 ;
  6071F                    // 10 Receive Channel enable bit
  6072F  Uint16 RCEE11 : 1 ;
  6073F                    // 11 Receive Channel enable bit
  6074F  Uint16 RCEE12 : 1 ;
  6075F                    // 12 Receive Channel enable bit
  6076F  Uint16 RCEE13 : 1 ;
  6077F                    // 13 Receive Channel enable bit
  6078F  Uint16 RCEE14 : 1 ;
  6079F                    // 14 Receive Channel enable bit
  6080F  Uint16 RCEE15 : 1 ;
  6081F                    // 15 Receive Channel enable bit
  6082F} ;
  6083F
  6084Funion RCERE_REG
  6085F{
  6086F  Uint16 all ;
  6087F  struct RCERE_BITS bit ;
  6088F} ;
  6089F// RCERF control register bit definitions:
  6090F
  6091Fstruct RCERF_BITS
  6092F{                   // bit description
  6093F  Uint16 RCEF0 : 1 ;
  6094F                   // 0 Receive Channel enable bit
  6095F  Uint16 RCEF1 : 1 ;
  6096F                   // 1 Receive Channel enable bit
  6097F  Uint16 RCEF2 : 1 ;
  6098F                   // 2 Receive Channel enable bit
  6099F  Uint16 RCEF3 : 1 ;
  6100F                   // 3 Receive Channel enable bit
  6101F  Uint16 RCEF4 : 1 ;
  6102F                   // 4 Receive Channel enable bit
  6103F  Uint16 RCEF5 : 1 ;
  6104F                   // 5 Receive Channel enable bit
  6105F  Uint16 RCEF6 : 1 ;
  6106F                   // 6 Receive Channel enable bit
  6107F  Uint16 RCEF7 : 1 ;
  6108F                   // 7 Receive Channel enable bit
  6109F  Uint16 RCEF8 : 1 ;
  6110F                   // 8 Receive Channel enable bit
  6111F  Uint16 RCEF9 : 1 ;
  6112F                   // 9 Receive Channel enable bit
  6113F  Uint16 RCEF10 : 1 ;
  6114F                    // 10 Receive Channel enable bit
  6115F  Uint16 RCEF11 : 1 ;
  6116F                    // 11 Receive Channel enable bit
  6117F  Uint16 RCEF12 : 1 ;
  6118F                    // 12 Receive Channel enable bit
  6119F  Uint16 RCEF13 : 1 ;
  6120F                    // 13 Receive Channel enable bit
  6121F  Uint16 RCEF14 : 1 ;
  6122F                    // 14 Receive Channel enable bit
  6123F  Uint16 RCEF15 : 1 ;
  6124F                    // 15 Receive Channel enable bit
  6125F} ;
  6126F
  6127Funion RCERF_REG
  6128F{
  6129F  Uint16 all ;
  6130F  struct RCERF_BITS bit ;
  6131F} ;
  6132F// XCERE control register bit definitions:
  6133F
  6134Fstruct XCERE_BITS
  6135F{                   // bit description
  6136F  Uint16 XCERE0 : 1 ;
  6137F                    // 0 Receive Channel enable bit
  6138F  Uint16 XCERE1 : 1 ;
  6139F                    // 1 Receive Channel enable bit
  6140F  Uint16 XCERE2 : 1 ;
  6141F                    // 2 Receive Channel enable bit
  6142F  Uint16 XCERE3 : 1 ;
  6143F                    // 3 Receive Channel enable bit
  6144F  Uint16 XCERE4 : 1 ;
  6145F                    // 4 Receive Channel enable bit
  6146F  Uint16 XCERE5 : 1 ;
  6147F                    // 5 Receive Channel enable bit
  6148F  Uint16 XCERE6 : 1 ;
  6149F                    // 6 Receive Channel enable bit
  6150F  Uint16 XCERE7 : 1 ;
  6151F                    // 7 Receive Channel enable bit
  6152F  Uint16 XCERE8 : 1 ;
  6153F                    // 8 Receive Channel enable bit
  6154F  Uint16 XCERE9 : 1 ;
  6155F                    // 9 Receive Channel enable bit
  6156F  Uint16 XCERE10 : 1 ;
  6157F                     // 10 Receive Channel enable bit
  6158F  Uint16 XCERE11 : 1 ;
  6159F                     // 11 Receive Channel enable bit
  6160F  Uint16 XCERE12 : 1 ;
  6161F                     // 12 Receive Channel enable bit
  6162F  Uint16 XCERE13 : 1 ;
  6163F                     // 13 Receive Channel enable bit
  6164F  Uint16 XCERE14 : 1 ;
  6165F                     // 14 Receive Channel enable bit
  6166F  Uint16 XCERE15 : 1 ;
  6167F                     // 15 Receive Channel enable bit
  6168F} ;
  6169F
  6170Funion XCERE_REG
  6171F{
  6172F  Uint16 all ;
  6173F  struct XCERE_BITS bit ;
  6174F} ;
  6175F// XCERF control register bit definitions:
  6176F
  6177Fstruct XCERF_BITS
  6178F{                   // bit description
  6179F  Uint16 XCERF0 : 1 ;
  6180F                    // 0 Receive Channel enable bit
  6181F  Uint16 XCERF1 : 1 ;
  6182F                    // 1 Receive Channel enable bit
  6183F  Uint16 XCERF2 : 1 ;
  6184F                    // 2 Receive Channel enable bit
  6185F  Uint16 XCERF3 : 1 ;
  6186F                    // 3 Receive Channel enable bit
  6187F  Uint16 XCERF4 : 1 ;
  6188F                    // 4 Receive Channel enable bit
  6189F  Uint16 XCERF5 : 1 ;
  6190F                    // 5 Receive Channel enable bit
  6191F  Uint16 XCERF6 : 1 ;
  6192F                    // 6 Receive Channel enable bit
  6193F  Uint16 XCERF7 : 1 ;
  6194F                    // 7 Receive Channel enable bit
  6195F  Uint16 XCERF8 : 1 ;
  6196F                    // 8 Receive Channel enable bit
  6197F  Uint16 XCERF9 : 1 ;
  6198F                    // 9 Receive Channel enable bit
  6199F  Uint16 XCERF10 : 1 ;
  6200F                     // 10 Receive Channel enable bit
  6201F  Uint16 XCERF11 : 1 ;
  6202F                     // 11 Receive Channel enable bit
  6203F  Uint16 XCERF12 : 1 ;
  6204F                     // 12 Receive Channel enable bit
  6205F  Uint16 XCERF13 : 1 ;
  6206F                     // 13 Receive Channel enable bit
  6207F  Uint16 XCERF14 : 1 ;
  6208F                     // 14 Receive Channel enable bit
  6209F  Uint16 XCERF15 : 1 ;
  6210F                     // 15 Receive Channel enable bit
  6211F} ;
  6212F
  6213Funion XCERF_REG
  6214F{
  6215F  Uint16 all ;
  6216F  struct XCERF_BITS bit ;
  6217F} ;
  6218F// RCERG control register bit definitions:
  6219F
  6220Fstruct RCERG_BITS
  6221F{                   // bit description
  6222F  Uint16 RCEG0 : 1 ;
  6223F                   // 0 Receive Channel enable bit
  6224F  Uint16 RCEG1 : 1 ;
  6225F                   // 1 Receive Channel enable bit
  6226F  Uint16 RCEG2 : 1 ;
  6227F                   // 2 Receive Channel enable bit
  6228F  Uint16 RCEG3 : 1 ;
  6229F                   // 3 Receive Channel enable bit
  6230F  Uint16 RCEG4 : 1 ;
  6231F                   // 4 Receive Channel enable bit
  6232F  Uint16 RCEG5 : 1 ;
  6233F                   // 5 Receive Channel enable bit
  6234F  Uint16 RCEG6 : 1 ;
  6235F                   // 6 Receive Channel enable bit
  6236F  Uint16 RCEG7 : 1 ;
  6237F                   // 7 Receive Channel enable bit
  6238F  Uint16 RCEG8 : 1 ;
  6239F                   // 8 Receive Channel enable bit
  6240F  Uint16 RCEG9 : 1 ;
  6241F                   // 9 Receive Channel enable bit
  6242F  Uint16 RCEG10 : 1 ;
  6243F                    // 10 Receive Channel enable bit
  6244F  Uint16 RCEG11 : 1 ;
  6245F                    // 11 Receive Channel enable bit
  6246F  Uint16 RCEG12 : 1 ;
  6247F                    // 12 Receive Channel enable bit
  6248F  Uint16 RCEG13 : 1 ;
  6249F                    // 13 Receive Channel enable bit
  6250F  Uint16 RCEG14 : 1 ;
  6251F                    // 14 Receive Channel enable bit
  6252F  Uint16 RCEG15 : 1 ;
  6253F                    // 15 Receive Channel enable bit
  6254F} ;
  6255F
  6256Funion RCERG_REG
  6257F{
  6258F  Uint16 all ;
  6259F  struct RCERG_BITS bit ;
  6260F} ;
  6261F// RCERH control register bit definitions:
  6262F
  6263Fstruct RCERH_BITS
  6264F{                   // bit description
  6265F  Uint16 RCEH0 : 1 ;
  6266F                   // 0 Receive Channel enable bit
  6267F  Uint16 RCEH1 : 1 ;
  6268F                   // 1 Receive Channel enable bit
  6269F  Uint16 RCEH2 : 1 ;
  6270F                   // 2 Receive Channel enable bit
  6271F  Uint16 RCEH3 : 1 ;
  6272F                   // 3 Receive Channel enable bit
  6273F  Uint16 RCEH4 : 1 ;
  6274F                   // 4 Receive Channel enable bit
  6275F  Uint16 RCEH5 : 1 ;
  6276F                   // 5 Receive Channel enable bit
  6277F  Uint16 RCEH6 : 1 ;
  6278F                   // 6 Receive Channel enable bit
  6279F  Uint16 RCEH7 : 1 ;
  6280F                   // 7 Receive Channel enable bit
  6281F  Uint16 RCEH8 : 1 ;
  6282F                   // 8 Receive Channel enable bit
  6283F  Uint16 RCEH9 : 1 ;
  6284F                   // 9 Receive Channel enable bit
  6285F  Uint16 RCEH10 : 1 ;
  6286F                    // 10 Receive Channel enable bit
  6287F  Uint16 RCEH11 : 1 ;
  6288F                    // 11 Receive Channel enable bit
  6289F  Uint16 RCEH12 : 1 ;
  6290F                    // 12 Receive Channel enable bit
  6291F  Uint16 RCEH13 : 1 ;
  6292F                    // 13 Receive Channel enable bit
  6293F  Uint16 RCEH14 : 1 ;
  6294F                    // 14 Receive Channel enable bit
  6295F  Uint16 RCEH15 : 1 ;
  6296F                    // 15 Receive Channel enable bit
  6297F} ;
  6298F
  6299Funion RCERH_REG
  6300F{
  6301F  Uint16 all ;
  6302F  struct RCERH_BITS bit ;
  6303F} ;
  6304F// XCERG control register bit definitions:
  6305F
  6306Fstruct XCERG_BITS
  6307F{                   // bit description
  6308F  Uint16 XCERG0 : 1 ;
  6309F                    // 0 Receive Channel enable bit
  6310F  Uint16 XCERG1 : 1 ;
  6311F                    // 1 Receive Channel enable bit
  6312F  Uint16 XCERG2 : 1 ;
  6313F                    // 2 Receive Channel enable bit
  6314F  Uint16 XCERG3 : 1 ;
  6315F                    // 3 Receive Channel enable bit
  6316F  Uint16 XCERG4 : 1 ;
  6317F                    // 4 Receive Channel enable bit
  6318F  Uint16 XCERG5 : 1 ;
  6319F                    // 5 Receive Channel enable bit
  6320F  Uint16 XCERG6 : 1 ;
  6321F                    // 6 Receive Channel enable bit
  6322F  Uint16 XCERG7 : 1 ;
  6323F                    // 7 Receive Channel enable bit
  6324F  Uint16 XCERG8 : 1 ;
  6325F                    // 8 Receive Channel enable bit
  6326F  Uint16 XCERG9 : 1 ;
  6327F                    // 9 Receive Channel enable bit
  6328F  Uint16 XCERG10 : 1 ;
  6329F                     // 10 Receive Channel enable bit
  6330F  Uint16 XCERG11 : 1 ;
  6331F                     // 11 Receive Channel enable bit
  6332F  Uint16 XCERG12 : 1 ;
  6333F                     // 12 Receive Channel enable bit
  6334F  Uint16 XCERG13 : 1 ;
  6335F                     // 13 Receive Channel enable bit
  6336F  Uint16 XCERG14 : 1 ;
  6337F                     // 14 Receive Channel enable bit
  6338F  Uint16 XCERG15 : 1 ;
  6339F                     // 15 Receive Channel enable bit
  6340F} ;
  6341F
  6342Funion XCERG_REG
  6343F{
  6344F  Uint16 all ;
  6345F  struct XCERG_BITS bit ;
  6346F} ;
  6347F// XCERH control register bit definitions:
  6348F
  6349Fstruct XCERH_BITS
  6350F{                   // bit description
  6351F  Uint16 XCEH0 : 1 ;
  6352F                   // 0 Receive Channel enable bit
  6353F  Uint16 XCEH1 : 1 ;
  6354F                   // 1 Receive Channel enable bit
  6355F  Uint16 XCEH2 : 1 ;
  6356F                   // 2 Receive Channel enable bit
  6357F  Uint16 XCEH3 : 1 ;
  6358F                   // 3 Receive Channel enable bit
  6359F  Uint16 XCEH4 : 1 ;
  6360F                   // 4 Receive Channel enable bit
  6361F  Uint16 XCEH5 : 1 ;
  6362F                   // 5 Receive Channel enable bit
  6363F  Uint16 XCEH6 : 1 ;
  6364F                   // 6 Receive Channel enable bit
  6365F  Uint16 XCEH7 : 1 ;
  6366F                   // 7 Receive Channel enable bit
  6367F  Uint16 XCEH8 : 1 ;
  6368F                   // 8 Receive Channel enable bit
  6369F  Uint16 XCEH9 : 1 ;
  6370F                   // 9 Receive Channel enable bit
  6371F  Uint16 XCEH10 : 1 ;
  6372F                    // 10 Receive Channel enable bit
  6373F  Uint16 XCEH11 : 1 ;
  6374F                    // 11 Receive Channel enable bit
  6375F  Uint16 XCEH12 : 1 ;
  6376F                    // 12 Receive Channel enable bit
  6377F  Uint16 XCEH13 : 1 ;
  6378F                    // 13 Receive Channel enable bit
  6379F  Uint16 XCEH14 : 1 ;
  6380F                    // 14 Receive Channel enable bit
  6381F  Uint16 XCEH15 : 1 ;
  6382F                    // 15 Receive Channel enable bit
  6383F} ;
  6384F
  6385Funion XCERH_REG
  6386F{
  6387F  Uint16 all ;
  6388F  struct XCERH_BITS bit ;
  6389F} ;
  6390F// McBSP Interrupt enable register for RINT/XINT
  6391F
  6392Fstruct MFFINT_BITS
  6393F{                    // bits description
  6394F  Uint16 XINT : 1 ;// 0 XINT interrupt enable
  6395F  Uint16 rsvd1 : 1 ;// 1 reserved
  6396F  Uint16 RINT : 1 ;// 2 RINT interrupt enable
  6397F  Uint16 rsvd2 : 13 ;// 15:3 reserved
  6398F} ;
  6399F
  6400Funion MFFINT_REG
  6401F{
  6402F  Uint16 all ;
  6403F  struct MFFINT_BITS bit ;
  6404F} ;
  6405F//---------------------------------------------------------------------------
  6406F// McBSP Register File:
  6407F//
  6408F
  6409Fstruct MCBSP_REGS
  6410F{
  6411F  union DRR2_REG DRR2 ; // MCBSP Data receive register bits 31-16
  6412F  union DRR1_REG DRR1 ; // MCBSP Data receive register bits 15-0
  6413F  union DXR2_REG DXR2 ; // MCBSP Data transmit register bits 31-16
  6414F  union DXR1_REG DXR1 ; // MCBSP Data transmit register bits 15-0
  6415F  union SPCR2_REG SPCR2 ; // MCBSP control register bits 31-16
  6416F  union SPCR1_REG SPCR1 ; // MCBSP control register bits 15-0
  6417F  union RCR2_REG RCR2 ; // MCBSP receive control register bits 31-16
  6418F  union RCR1_REG RCR1 ; // MCBSP receive control register bits 15-0
  6419F  union XCR2_REG XCR2 ; // MCBSP transmit control register bits 31-16
  6420F  union XCR1_REG XCR1 ; // MCBSP transmit control register bits 15-0
  6421F  union SRGR2_REG SRGR2 ; // MCBSP sample rate gen register bits 31-16
  6422F  union SRGR1_REG SRGR1 ; // MCBSP sample rate gen register bits 15-0
  6423F  union MCR2_REG MCR2 ; // MCBSP multichannel register bits 31-16
  6424F  union MCR1_REG MCR1 ; // MCBSP multichannel register bits 15-0
  6425F  union RCERA_REG RCERA ; // MCBSP Receive channel enable partition A
  6426F  union RCERB_REG RCERB ; // MCBSP Receive channel enable partition B
  6427F  union XCERA_REG XCERA ; // MCBSP Transmit channel enable partition A
  6428F  union XCERB_REG XCERB ; // MCBSP Transmit channel enable partition B
  6429F  union PCR_REG PCR ; // MCBSP Pin control register bits 15-0
  6430F  union RCERC_REG RCERC ; // MCBSP Receive channel enable partition C
  6431F  union RCERD_REG RCERD ; // MCBSP Receive channel enable partition D
  6432F  union XCERC_REG XCERC ; // MCBSP Transmit channel enable partition C
  6433F  union XCERD_REG XCERD ; // MCBSP Transmit channel enable partition D
  6434F  union RCERE_REG RCERE ; // MCBSP Receive channel enable partition E
  6435F  union RCERF_REG RCERF ; // MCBSP Receive channel enable partition F
  6436F  union XCERE_REG XCERE ; // MCBSP Transmit channel enable partition E
  6437F  union XCERF_REG XCERF ; // MCBSP Transmit channel enable partition F
  6438F  union RCERG_REG RCERG ; // MCBSP Receive channel enable partition G
  6439F  union RCERH_REG RCERH ; // MCBSP Receive channel enable partition H
  6440F  union XCERG_REG XCERG ; // MCBSP Transmit channel enable partition G
  6441F  union XCERH_REG XCERH ; // MCBSP Transmit channel enable partition H
  6442F  Uint16 rsvd1 [ 4 ] ;
  6443F                    // reserved
  6444F  union MFFINT_REG MFFINT ; // MCBSP Interrupt enable register for RINT/XINT
  6445F  Uint16 rsvd2 ; // reserved
  6446F} ;
  6447F//---------------------------------------------------------------------------
  6448F// McBSP External References & Function Declarations:
  6449F//
  6450F
  6451Fextern volatile struct MCBSP_REGS
  6452F  McbspaRegs ;
  6453F
  6454Fextern volatile struct MCBSP_REGS
  6455F  McbspbRegs ;
  6456F       /* extern "C" */
  6457F       // end of DSP2833x_MCBSP_H definition
  6458F//===========================================================================
  6459F// No more.
  6460F//===========================================================================
  6461F 
  6462F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_McBSP.h*/
  6463F/*   CLOSE_FILE Include File */
  6464F 
  6465F              // McBSP
  6466F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieCtrl.h */
  6467F// TI File $Revision: /main/1 $
  6468F// Checkin $Date: August 18, 2006 13:52:24 $
  6469F//###########################################################################
  6470F//
  6471F// FILE: DSP2833x_PieCtrl.h
  6472F//
  6473F// TITLE: DSP2833x Device PIE Control Register Definitions.
  6474F//
  6475F//###########################################################################
  6476F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6477F// $Release Date: August 4, 2009 $
  6478F//###########################################################################
  6479F#ifndef DSP2833x_PIE_CTRL_H
  6480F#define DSP2833x_PIE_CTRL_H
  6481F//---------------------------------------------------------------------------
  6482F// PIE Control Register Bit Definitions:
  6483F//
  6484F// PIECTRL: Register bit definitions:
  6485F
  6486Ftypedef
  6487Fstruct PIECTRL_BITS
  6488F{                            // bits description
  6489F  Uint16 ENPIE : 1 ;
  6490F                   // 0 Enable PIE block
  6491F  Uint16 PIEVECT : 15 ;
  6492F                      // 15:1 Fetched vector address
  6493F} PIECTRL_BITS ;
  6494F
  6495Ftypedef
  6496Funion PIECTRL_REG
  6497F{
  6498F  Uint16 all ;
  6499F  struct PIECTRL_BITS bit ;
  6500F} PIECTRL_REG ;
  6501F// PIEIER: Register bit definitions:
  6502F
  6503Ftypedef
  6504Fstruct PIEIER_BITS
  6505F{                            // bits description
  6506F  Uint16 INTx1 : 1 ;
  6507F                   // 0 INTx.1
  6508F  Uint16 INTx2 : 1 ;
  6509F                   // 1 INTx.2
  6510F  Uint16 INTx3 : 1 ;
  6511F                   // 2 INTx.3
  6512F  Uint16 INTx4 : 1 ;
  6513F                   // 3 INTx.4
  6514F  Uint16 INTx5 : 1 ;
  6515F                   // 4 INTx.5
  6516F  Uint16 INTx6 : 1 ;
  6517F                   // 5 INTx.6
  6518F  Uint16 INTx7 : 1 ;
  6519F                   // 6 INTx.7
  6520F  Uint16 INTx8 : 1 ;
  6521F                   // 7 INTx.8
  6522F  Uint16 rsvd : 8 ;
  6523F                  // 15:8 reserved
  6524F} PIEIER_BITS ;
  6525F
  6526Ftypedef
  6527Funion PIEIER_REG
  6528F{
  6529F  Uint16 all ;
  6530F  struct PIEIER_BITS bit ;
  6531F} PIEIER_REG ;
  6532F// PIEIFR: Register bit definitions:
  6533F
  6534Ftypedef
  6535Fstruct PIEIFR_BITS
  6536F{                            // bits description
  6537F  Uint16 INTx1 : 1 ;
  6538F                   // 0 INTx.1
  6539F  Uint16 INTx2 : 1 ;
  6540F                   // 1 INTx.2
  6541F  Uint16 INTx3 : 1 ;
  6542F                   // 2 INTx.3
  6543F  Uint16 INTx4 : 1 ;
  6544F                   // 3 INTx.4
  6545F  Uint16 INTx5 : 1 ;
  6546F                   // 4 INTx.5
  6547F  Uint16 INTx6 : 1 ;
  6548F                   // 5 INTx.6
  6549F  Uint16 INTx7 : 1 ;
  6550F                   // 6 INTx.7
  6551F  Uint16 INTx8 : 1 ;
  6552F                   // 7 INTx.8
  6553F  Uint16 rsvd : 8 ;
  6554F                  // 15:8 reserved
  6555F} PIEIFR_BITS ;
  6556F
  6557Ftypedef
  6558Funion PIEIFR_REG
  6559F{
  6560F  Uint16 all ;
  6561F  struct PIEIFR_BITS bit ;
  6562F} PIEIFR_REG ;
  6563F// PIEACK: Register bit definitions:
  6564F
  6565Ftypedef
  6566Fstruct PIEACK_BITS
  6567F{                            // bits description
  6568F  Uint16 ACK1 : 1 ;
  6569F                  // 0 Acknowledge PIE interrupt group 1
  6570F  Uint16 ACK2 : 1 ;
  6571F                  // 1 Acknowledge PIE interrupt group 2
  6572F  Uint16 ACK3 : 1 ;
  6573F                  // 2 Acknowledge PIE interrupt group 3
  6574F  Uint16 ACK4 : 1 ;
  6575F                  // 3 Acknowledge PIE interrupt group 4
  6576F  Uint16 ACK5 : 1 ;
  6577F                  // 4 Acknowledge PIE interrupt group 5
  6578F  Uint16 ACK6 : 1 ;
  6579F                  // 5 Acknowledge PIE interrupt group 6
  6580F  Uint16 ACK7 : 1 ;
  6581F                  // 6 Acknowledge PIE interrupt group 7
  6582F  Uint16 ACK8 : 1 ;
  6583F                  // 7 Acknowledge PIE interrupt group 8
  6584F  Uint16 ACK9 : 1 ;
  6585F                  // 8 Acknowledge PIE interrupt group 9
  6586F  Uint16 ACK10 : 1 ;
  6587F                   // 9 Acknowledge PIE interrupt group 10
  6588F  Uint16 ACK11 : 1 ;
  6589F                   // 10 Acknowledge PIE interrupt group 11
  6590F  Uint16 ACK12 : 1 ;
  6591F                   // 11 Acknowledge PIE interrupt group 12
  6592F  Uint16 rsvd : 4 ;
  6593F                  // 15:12 reserved
  6594F} PIEACK_BITS ;
  6595F
  6596Ftypedef
  6597Funion PIEACK_REG
  6598F{
  6599F  Uint16 all ;
  6600F  struct PIEACK_BITS bit ;
  6601F} PIEACK_REG ;
  6602F//---------------------------------------------------------------------------
  6603F// PIE Control Register File:
  6604F//
  6605F
  6606Ftypedef
  6607Fstruct PIE_CTRL_REGS
  6608F{
  6609F  union PIECTRL_REG PIECTRL ; // PIE control register
  6610F  union PIEACK_REG PIEACK ; // PIE acknowledge
  6611F  union PIEIER_REG PIEIER1 ; // PIE int1 IER register
  6612F  union PIEIFR_REG PIEIFR1 ; // PIE int1 IFR register
  6613F  union PIEIER_REG PIEIER2 ; // PIE INT2 IER register
  6614F  union PIEIFR_REG PIEIFR2 ; // PIE INT2 IFR register
  6615F  union PIEIER_REG PIEIER3 ; // PIE INT3 IER register
  6616F  union PIEIFR_REG PIEIFR3 ; // PIE INT3 IFR register
  6617F  union PIEIER_REG PIEIER4 ; // PIE INT4 IER register
  6618F  union PIEIFR_REG PIEIFR4 ; // PIE INT4 IFR register
  6619F  union PIEIER_REG PIEIER5 ; // PIE INT5 IER register
  6620F  union PIEIFR_REG PIEIFR5 ; // PIE INT5 IFR register
  6621F  union PIEIER_REG PIEIER6 ; // PIE INT6 IER register
  6622F  union PIEIFR_REG PIEIFR6 ; // PIE INT6 IFR register
  6623F  union PIEIER_REG PIEIER7 ; // PIE INT7 IER register
  6624F  union PIEIFR_REG PIEIFR7 ; // PIE INT7 IFR register
  6625F  union PIEIER_REG PIEIER8 ; // PIE INT8 IER register
  6626F  union PIEIFR_REG PIEIFR8 ; // PIE INT8 IFR register
  6627F  union PIEIER_REG PIEIER9 ; // PIE INT9 IER register
  6628F  union PIEIFR_REG PIEIFR9 ; // PIE INT9 IFR register
  6629F  union PIEIER_REG PIEIER10 ; // PIE int10 IER register
  6630F  union PIEIFR_REG PIEIFR10 ; // PIE int10 IFR register
  6631F  union PIEIER_REG PIEIER11 ; // PIE int11 IER register
  6632F  union PIEIFR_REG PIEIFR11 ; // PIE int11 IFR register
  6633F  union PIEIER_REG PIEIER12 ; // PIE int12 IER register
  6634F  union PIEIFR_REG PIEIFR12 ; // PIE int12 IFR register
  6635F} PIE_CTRL_REGS ;
  6636F#define PIEACK_GROUP1 0x0001
  6637F#define PIEACK_GROUP2 0x0002
  6638F#define PIEACK_GROUP3 0x0004
  6639F#define PIEACK_GROUP4 0x0008
  6640F#define PIEACK_GROUP5 0x0010
  6641F#define PIEACK_GROUP6 0x0020
  6642F#define PIEACK_GROUP7 0x0040
  6643F#define PIEACK_GROUP8 0x0080
  6644F#define PIEACK_GROUP9 0x0100
  6645F#define PIEACK_GROUP10 0x0200
  6646F#define PIEACK_GROUP11 0x0400
  6647F#define PIEACK_GROUP12 0x0800
  6648F//---------------------------------------------------------------------------
  6649F// PIE Control Registers External References & Function Declarations:
  6650F//
  6651F
  6652Fextern volatile struct PIE_CTRL_REGS
  6653F  PieCtrlRegs ;
  6654F       // end of DSP2833x_PIE_CTRL_H definition
  6655F//===========================================================================
  6656F// End of file.
  6657F//===========================================================================
  6658F 
  6659F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieCtrl.h*/
  6660F/*   CLOSE_FILE Include File */
  6661F 
  6662F            // PIE Control Registers
  6663F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieVect.h */
  6664F// TI File $Revision: /main/2 $
  6665F// Checkin $Date: March 16, 2007 09:00:21 $
  6666F//###########################################################################
  6667F//
  6668F// FILE: DSP2833x_PieVect.h
  6669F//
  6670F// TITLE: DSP2833x Devices PIE Vector Table Definitions.
  6671F//
  6672F//###########################################################################
  6673F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6674F// $Release Date: August 4, 2009 $
  6675F//###########################################################################
  6676F#ifndef DSP2833x_PIE_VECT_H
  6677F#define DSP2833x_PIE_VECT_H
  6678F//---------------------------------------------------------------------------
  6679F// PIE Interrupt Vector Table Definition:
  6680F//
  6681F// Create a user type called PINT (pointer to interrupt):
  6682F
  6683Ftypedef
  6684Fconst
  6685Finterrupt void ( * PINT ) ( void ) ;
  6686F// Define Vector Table:
  6687F
  6688Ftypedef
  6689Fstruct PIE_VECT_TABLE
  6690F{
  6691F// Reset is never fetched from this table.
  6692F// It will always be fetched from 0x3FFFC0 in
  6693F// boot ROM
  6694F  PINT PIE1_RESERVED ;
  6695F  PINT PIE2_RESERVED ;
  6696F  PINT PIE3_RESERVED ;
  6697F  PINT PIE4_RESERVED ;
  6698F  PINT PIE5_RESERVED ;
  6699F  PINT PIE6_RESERVED ;
  6700F  PINT PIE7_RESERVED ;
  6701F  PINT PIE8_RESERVED ;
  6702F  PINT PIE9_RESERVED ;
  6703F  PINT PIE10_RESERVED ;
  6704F  PINT PIE11_RESERVED ;
  6705F  PINT PIE12_RESERVED ;
  6706F  PINT PIE13_RESERVED ;
  6707F// Non-Peripheral Interrupts:
  6708F  PINT XINT13 ;    // XINT13 / CPU-Timer1
  6709F  PINT TINT2 ;    // CPU-Timer2
  6710F  PINT DATALOG ;    // Datalogging interrupt
  6711F  PINT RTOSINT ;    // RTOS interrupt
  6712F  PINT EMUINT ;    // Emulation interrupt
  6713F  PINT XNMI ;    // Non-maskable interrupt
  6714F  PINT ILLEGAL ;    // Illegal operation TRAP
  6715F  PINT USER1 ;    // User Defined trap 1
  6716F  PINT USER2 ;    // User Defined trap 2
  6717F  PINT USER3 ;    // User Defined trap 3
  6718F  PINT USER4 ;    // User Defined trap 4
  6719F  PINT USER5 ;    // User Defined trap 5
  6720F  PINT USER6 ;    // User Defined trap 6
  6721F  PINT USER7 ;    // User Defined trap 7
  6722F  PINT USER8 ;    // User Defined trap 8
  6723F  PINT USER9 ;    // User Defined trap 9
  6724F  PINT USER10 ;    // User Defined trap 10
  6725F  PINT USER11 ;    // User Defined trap 11
  6726F  PINT USER12 ;    // User Defined trap 12
  6727F// Group 1 PIE Peripheral Vectors:
  6728F  PINT SEQ1INT ;
  6729F  PINT SEQ2INT ;
  6730F  PINT rsvd1_3 ;
  6731F  PINT XINT1 ;
  6732F  PINT XINT2 ;
  6733F  PINT ADCINT ;    // ADC
  6734F  PINT TINT0 ;    // Timer 0
  6735F  PINT WAKEINT ;    // WD
  6736F// Group 2 PIE Peripheral Vectors:
  6737F  PINT EPWM1_TZINT ;    // EPWM-1
  6738F  PINT EPWM2_TZINT ;    // EPWM-2
  6739F  PINT EPWM3_TZINT ;    // EPWM-3
  6740F  PINT EPWM4_TZINT ;    // EPWM-4
  6741F  PINT EPWM5_TZINT ;    // EPWM-5
  6742F  PINT EPWM6_TZINT ;    // EPWM-6
  6743F  PINT rsvd2_7 ;
  6744F  PINT rsvd2_8 ;
  6745F// Group 3 PIE Peripheral Vectors:
  6746F  PINT EPWM1_INT ;    // EPWM-1
  6747F  PINT EPWM2_INT ;    // EPWM-2
  6748F  PINT EPWM3_INT ;    // EPWM-3
  6749F  PINT EPWM4_INT ;    // EPWM-4
  6750F  PINT EPWM5_INT ;    // EPWM-5
  6751F  PINT EPWM6_INT ;    // EPWM-6
  6752F  PINT rsvd3_7 ;
  6753F  PINT rsvd3_8 ;
  6754F// Group 4 PIE Peripheral Vectors:
  6755F  PINT ECAP1_INT ;    // ECAP-1
  6756F  PINT ECAP2_INT ;    // ECAP-2
  6757F  PINT ECAP3_INT ;    // ECAP-3
  6758F  PINT ECAP4_INT ;    // ECAP-4
  6759F  PINT ECAP5_INT ;    // ECAP-5
  6760F  PINT ECAP6_INT ;    // ECAP-6
  6761F  PINT rsvd4_7 ;
  6762F  PINT rsvd4_8 ;
  6763F// Group 5 PIE Peripheral Vectors:
  6764F  PINT EQEP1_INT ;    // EQEP-1
  6765F  PINT EQEP2_INT ;    // EQEP-2
  6766F  PINT rsvd5_3 ;
  6767F  PINT rsvd5_4 ;
  6768F  PINT rsvd5_5 ;
  6769F  PINT rsvd5_6 ;
  6770F  PINT rsvd5_7 ;
  6771F  PINT rsvd5_8 ;
  6772F// Group 6 PIE Peripheral Vectors:
  6773F  PINT SPIRXINTA ;    // SPI-A
  6774F  PINT SPITXINTA ;    // SPI-A
  6775F  PINT MRINTB ;    // McBSP-B
  6776F  PINT MXINTB ;    // McBSP-B
  6777F  PINT MRINTA ;        // McBSP-A
  6778F  PINT MXINTA ;    // McBSP-A
  6779F  PINT rsvd6_7 ;
  6780F  PINT rsvd6_8 ;
  6781F// Group 7 PIE Peripheral Vectors:
  6782F  PINT DINTCH1 ;    // DMA
  6783F  PINT DINTCH2 ;    // DMA
  6784F  PINT DINTCH3 ;    // DMA
  6785F  PINT DINTCH4 ;    // DMA
  6786F  PINT DINTCH5 ;    // DMA
  6787F  PINT DINTCH6 ;    // DMA
  6788F  PINT rsvd7_7 ;
  6789F  PINT rsvd7_8 ;
  6790F// Group 8 PIE Peripheral Vectors:
  6791F  PINT I2CINT1A ;    // I2C-A
  6792F  PINT I2CINT2A ;    // I2C-A
  6793F  PINT rsvd8_3 ;
  6794F  PINT rsvd8_4 ;
  6795F  PINT SCIRXINTC ;    // SCI-C
  6796F  PINT SCITXINTC ;    // SCI-C
  6797F  PINT rsvd8_7 ;
  6798F  PINT rsvd8_8 ;
  6799F// Group 9 PIE Peripheral Vectors:
  6800F  PINT SCIRXINTA ;    // SCI-A
  6801F  PINT SCITXINTA ;    // SCI-A
  6802F  PINT SCIRXINTB ;    // SCI-B
  6803F  PINT SCITXINTB ;    // SCI-B
  6804F  PINT ECAN0INTA ;    // eCAN-A
  6805F  PINT ECAN1INTA ;    // eCAN-A
  6806F  PINT ECAN0INTB ;    // eCAN-B
  6807F  PINT ECAN1INTB ;    // eCAN-B
  6808F// Group 10 PIE Peripheral Vectors:
  6809F  PINT rsvd10_1 ;
  6810F  PINT rsvd10_2 ;
  6811F  PINT rsvd10_3 ;
  6812F  PINT rsvd10_4 ;
  6813F  PINT rsvd10_5 ;
  6814F  PINT rsvd10_6 ;
  6815F  PINT rsvd10_7 ;
  6816F  PINT rsvd10_8 ;
  6817F// Group 11 PIE Peripheral Vectors:
  6818F  PINT rsvd11_1 ;
  6819F  PINT rsvd11_2 ;
  6820F  PINT rsvd11_3 ;
  6821F  PINT rsvd11_4 ;
  6822F  PINT rsvd11_5 ;
  6823F  PINT rsvd11_6 ;
  6824F  PINT rsvd11_7 ;
  6825F  PINT rsvd11_8 ;
  6826F// Group 12 PIE Peripheral Vectors:
  6827F  PINT XINT3 ;    // External interrupt
  6828F  PINT XINT4 ;
  6829F  PINT XINT5 ;
  6830F  PINT XINT6 ;
  6831F  PINT XINT7 ;
  6832F  PINT rsvd12_6 ;
  6833F  PINT LVF ;    // Latched overflow
  6834F  PINT LUF ;    // Latched underflow
  6835F} PIE_VECT_TABLE ;
  6836F//---------------------------------------------------------------------------
  6837F// PIE Interrupt Vector Table External References & Function Declarations:
  6838F//
  6839F
  6840Fextern struct PIE_VECT_TABLE
  6841F  PieVectTable ;
  6842F       // end of DSP2833x_PIE_VECT_H definition
  6843F//===========================================================================
  6844F// End of file.
  6845F//===========================================================================
  6846F 
  6847F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieVect.h*/
  6848F/*   CLOSE_FILE Include File */
  6849F 
  6850F            // PIE Vector Table
  6851F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Spi.h */
  6852F// TI File $Revision: /main/3 $
  6853F// Checkin $Date: April 17, 2008 11:08:27 $
  6854F//###########################################################################
  6855F//
  6856F// FILE: DSP2833x_Spi.h
  6857F//
  6858F// TITLE: DSP2833x Device SPI Register Definitions.
  6859F//
  6860F//###########################################################################
  6861F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6862F// $Release Date: August 4, 2009 $
  6863F//###########################################################################
  6864F#ifndef DSP2833x_SPI_H
  6865F#define DSP2833x_SPI_H
  6866F//---------------------------------------------------------------------------
  6867F// SPI Individual Register Bit Definitions:
  6868F//
  6869F// SPI FIFO Transmit register bit definitions:
  6870F
  6871Fstruct SPIFFTX_BITS
  6872F{                     // bit description
  6873F  Uint16 TXFFIL : 5 ;
  6874F                    // 4:0 Interrupt level
  6875F  Uint16 TXFFIENA : 1 ;
  6876F                      // 5 Interrupt enable
  6877F  Uint16 TXFFINTCLR : 1 ;
  6878F                        // 6 Clear INT flag
  6879F  Uint16 TXFFINT : 1 ;
  6880F                     // 7 INT flag
  6881F  Uint16 TXFFST : 5 ;
  6882F                    // 12:8 FIFO status
  6883F  Uint16 TXFIFO : 1 ;
  6884F                    // 13 FIFO reset
  6885F  Uint16 SPIFFENA : 1 ;
  6886F                      // 14 Enhancement enable
  6887F  Uint16 SPIRST : 1 ;
  6888F                    // 15 Reset SPI
  6889F} ;
  6890F
  6891Funion SPIFFTX_REG
  6892F{
  6893F  Uint16 all ;
  6894F  struct SPIFFTX_BITS bit ;
  6895F} ;
  6896F//--------------------------------------------
  6897F// SPI FIFO recieve register bit definitions:
  6898F//
  6899F//
  6900F
  6901Fstruct SPIFFRX_BITS
  6902F{                     // bits description
  6903F  Uint16 RXFFIL : 5 ;
  6904F                    // 4:0 Interrupt level
  6905F  Uint16 RXFFIENA : 1 ;
  6906F                      // 5 Interrupt enable
  6907F  Uint16 RXFFINTCLR : 1 ;
  6908F                        // 6 Clear INT flag
  6909F  Uint16 RXFFINT : 1 ;
  6910F                     // 7 INT flag
  6911F  Uint16 RXFFST : 5 ;
  6912F                    // 12:8 FIFO status
  6913F  Uint16 RXFIFORESET : 1 ;
  6914F                         // 13 FIFO reset
  6915F  Uint16 RXFFOVFCLR : 1 ;
  6916F                        // 14 Clear overflow
  6917F  Uint16 RXFFOVF : 1 ;
  6918F                     // 15 FIFO overflow
  6919F} ;
  6920F
  6921Funion SPIFFRX_REG
  6922F{
  6923F  Uint16 all ;
  6924F  struct SPIFFRX_BITS bit ;
  6925F} ;
  6926F//--------------------------------------------
  6927F// SPI FIFO control register bit definitions:
  6928F//
  6929F//
  6930F
  6931Fstruct SPIFFCT_BITS
  6932F{                     // bits description
  6933F  Uint16 TXDLY : 8 ;
  6934F                   // 7:0 FIFO transmit delay
  6935F  Uint16 rsvd : 8 ;
  6936F                  // 15:8 reserved
  6937F} ;
  6938F
  6939Funion SPIFFCT_REG
  6940F{
  6941F  Uint16 all ;
  6942F  struct SPIFFCT_BITS bit ;
  6943F} ;
  6944F//---------------------------------------------
  6945F// SPI configuration register bit definitions:
  6946F//
  6947F//
  6948F
  6949Fstruct SPICCR_BITS
  6950F{                    // bits description
  6951F  Uint16 SPICHAR : 4 ;
  6952F                     // 3:0 Character length control
  6953F  Uint16 SPILBK : 1 ;
  6954F                    // 4 Loop-back enable/disable
  6955F  Uint16 rsvd1 : 1 ;
  6956F                   // 5 reserved
  6957F  Uint16 CLKPOLARITY : 1 ;
  6958F                         // 6 Clock polarity
  6959F  Uint16 SPISWRESET : 1 ;
  6960F                        // 7 SPI SW Reset
  6961F  Uint16 rsvd2 : 8 ;
  6962F                   // 15:8 reserved
  6963F} ;
  6964F
  6965Funion SPICCR_REG
  6966F{
  6967F  Uint16 all ;
  6968F  struct SPICCR_BITS bit ;
  6969F} ;
  6970F//-------------------------------------------------
  6971F// SPI operation control register bit definitions:
  6972F//
  6973F//
  6974F
  6975Fstruct SPICTL_BITS
  6976F{                    // bits description
  6977F  Uint16 SPIINTENA : 1 ;
  6978F                       // 0 Interrupt enable
  6979F  Uint16 TALK : 1 ;
  6980F                  // 1 Master/Slave transmit enable
  6981F  Uint16 MASTER_SLAVE : 1 ;
  6982F                          // 2 Network control mode
  6983F  Uint16 CLK_PHASE : 1 ;
  6984F                       // 3 Clock phase select
  6985F  Uint16 OVERRUNINTENA : 1 ;
  6986F                           // 4 Overrun interrupt enable
  6987F  Uint16 rsvd : 11 ;
  6988F                   // 15:5 reserved
  6989F} ;
  6990F
  6991Funion SPICTL_REG
  6992F{
  6993F  Uint16 all ;
  6994F  struct SPICTL_BITS bit ;
  6995F} ;
  6996F//--------------------------------------
  6997F// SPI status register bit definitions:
  6998F//
  6999F//
  7000F
  7001Fstruct SPISTS_BITS
  7002F{                    // bits description
  7003F  Uint16 rsvd1 : 5 ;
  7004F                   // 4:0 reserved
  7005F  Uint16 BUFFULL_FLAG : 1 ;
  7006F                          // 5 SPI transmit buffer full flag
  7007F  Uint16 INT_FLAG : 1 ;
  7008F                      // 6 SPI interrupt flag
  7009F  Uint16 OVERRUN_FLAG : 1 ;
  7010F                          // 7 SPI reciever overrun flag
  7011F  Uint16 rsvd2 : 8 ;
  7012F                   // 15:8 reserved
  7013F} ;
  7014F
  7015Funion SPISTS_REG
  7016F{
  7017F  Uint16 all ;
  7018F  struct SPISTS_BITS bit ;
  7019F} ;
  7020F//------------------------------------------------
  7021F// SPI priority control register bit definitions:
  7022F//
  7023F//
  7024F
  7025Fstruct SPIPRI_BITS
  7026F{                    // bits description
  7027F  Uint16 rsvd1 : 4 ;
  7028F                   // 3:0 reserved
  7029F  Uint16 FREE : 1 ;
  7030F                  // 4 Free emulation mode control
  7031F  Uint16 SOFT : 1 ;
  7032F                  // 5 Soft emulation mode control
  7033F  Uint16 rsvd2 : 1 ;
  7034F                   // 6 reserved
  7035F  Uint16 rsvd3 : 9 ;
  7036F                   // 15:7 reserved
  7037F} ;
  7038F
  7039Funion SPIPRI_REG
  7040F{
  7041F  Uint16 all ;
  7042F  struct SPIPRI_BITS bit ;
  7043F} ;
  7044F//---------------------------------------------------------------------------
  7045F// SPI Register File:
  7046F//
  7047F
  7048Fstruct SPI_REGS
  7049F{
  7050F  union SPICCR_REG SPICCR ; // Configuration register
  7051F  union SPICTL_REG SPICTL ; // Operation control register
  7052F  union SPISTS_REG SPISTS ; // Status register
  7053F  Uint16 rsvd1 ; // reserved
  7054F  Uint16 SPIBRR ; // Baud Rate
  7055F  Uint16 rsvd2 ; // reserved
  7056F  Uint16 SPIRXEMU ; // Emulation buffer
  7057F  Uint16 SPIRXBUF ; // Serial input buffer
  7058F  Uint16 SPITXBUF ; // Serial output buffer
  7059F  Uint16 SPIDAT ; // Serial data
  7060F  union SPIFFTX_REG SPIFFTX ; // FIFO transmit register
  7061F  union SPIFFRX_REG SPIFFRX ; // FIFO recieve register
  7062F  union SPIFFCT_REG SPIFFCT ; // FIFO control register
  7063F  Uint16 rsvd3 [ 2 ] ;
  7064F                    // reserved
  7065F  union SPIPRI_REG SPIPRI ; // FIFO Priority control
  7066F} ;
  7067F//---------------------------------------------------------------------------
  7068F// SPI External References & Function Declarations:
  7069F//
  7070F
  7071Fextern volatile struct SPI_REGS
  7072F  SpiaRegs ;
  7073F       /* extern "C" */
  7074F       // end of DSP2833x_SPI_H definition
  7075F//===========================================================================
  7076F// End of file.
  7077F//===========================================================================
  7078F 
  7079F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Spi.h*/
  7080F/*   CLOSE_FILE Include File */
  7081F 
  7082F                // SPI Registers
  7083F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Sci.h */
  7084F// TI File $Revision: /main/2 $
  7085F// Checkin $Date: March 1, 2007 15:57:02 $
  7086F//###########################################################################
  7087F//
  7088F// FILE:        DSP2833x_Sci.h
  7089F//
  7090F// TITLE:       DSP2833x Device SCI Register Definitions.
  7091F//
  7092F//###########################################################################
  7093F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  7094F// $Release Date: August 4, 2009 $
  7095F//###########################################################################
  7096F#ifndef DSP2833x_SCI_H
  7097F#define DSP2833x_SCI_H
  7098F//---------------------------------------------------------------------------
  7099F// SCI Individual Register Bit Definitions
  7100F//----------------------------------------------------------
  7101F// SCICCR communication control register bit definitions:
  7102F//
  7103F
  7104Fstruct SCICCR_BITS
  7105F{                    // bit description
  7106F  Uint16 SCICHAR : 3 ;
  7107F                     // 2:0 Character length control
  7108F  Uint16 ADDRIDLE_MODE : 1 ;
  7109F                           // 3 ADDR/IDLE Mode control
  7110F  Uint16 LOOPBKENA : 1 ;
  7111F                       // 4 Loop Back enable
  7112F  Uint16 PARITYENA : 1 ;
  7113F                       // 5 Parity enable
  7114F  Uint16 PARITY : 1 ;
  7115F                    // 6 Even or Odd Parity
  7116F  Uint16 STOPBITS : 1 ;
  7117F                      // 7 Number of Stop Bits
  7118F  Uint16 rsvd1 : 8 ;
  7119F                   // 15:8 reserved
  7120F} ;
  7121F
  7122Funion SCICCR_REG
  7123F{
  7124F  Uint16 all ;
  7125F  struct SCICCR_BITS bit ;
  7126F} ;
  7127F//-------------------------------------------
  7128F// SCICTL1 control register 1 bit definitions:
  7129F//
  7130F
  7131Fstruct SCICTL1_BITS
  7132F{                     // bit description
  7133F  Uint16 RXENA : 1 ;
  7134F                   // 0 SCI receiver enable
  7135F  Uint16 TXENA : 1 ;
  7136F                   // 1 SCI transmitter enable
  7137F  Uint16 SLEEP : 1 ;
  7138F                   // 2 SCI sleep
  7139F  Uint16 TXWAKE : 1 ;
  7140F                    // 3 Transmitter wakeup method
  7141F  Uint16 rsvd : 1 ;
  7142F                  // 4 reserved
  7143F  Uint16 SWRESET : 1 ;
  7144F                     // 5 Software reset
  7145F  Uint16 RXERRINTENA : 1 ;
  7146F                         // 6 Recieve interrupt enable
  7147F  Uint16 rsvd1 : 9 ;
  7148F                   // 15:7 reserved
  7149F} ;
  7150F
  7151Funion SCICTL1_REG
  7152F{
  7153F  Uint16 all ;
  7154F  struct SCICTL1_BITS bit ;
  7155F} ;
  7156F//---------------------------------------------
  7157F// SCICTL2 control register 2 bit definitions:
  7158F//
  7159F
  7160Fstruct SCICTL2_BITS
  7161F{                     // bit description
  7162F  Uint16 TXINTENA : 1 ;
  7163F                      // 0 Transmit interrupt enable
  7164F  Uint16 RXBKINTENA : 1 ;
  7165F                        // 1 Receiver-buffer break enable
  7166F  Uint16 rsvd : 4 ;
  7167F                  // 5:2 reserved
  7168F  Uint16 TXEMPTY : 1 ;
  7169F                     // 6 Transmitter empty flag
  7170F  Uint16 TXRDY : 1 ;
  7171F                   // 7 Transmitter ready flag
  7172F  Uint16 rsvd1 : 8 ;
  7173F                   // 15:8 reserved
  7174F} ;
  7175F
  7176Funion SCICTL2_REG
  7177F{
  7178F  Uint16 all ;
  7179F  struct SCICTL2_BITS bit ;
  7180F} ;
  7181F//---------------------------------------------------
  7182F// SCIRXST Receiver status register bit definitions:
  7183F//
  7184F
  7185Fstruct SCIRXST_BITS
  7186F{                     // bit description
  7187F  Uint16 rsvd : 1 ;
  7188F                  // 0 reserved
  7189F  Uint16 RXWAKE : 1 ;
  7190F                    // 1 Receiver wakeup detect flag
  7191F  Uint16 PE : 1 ;
  7192F                // 2 Parity error flag
  7193F  Uint16 OE : 1 ;
  7194F                // 3 Overrun error flag
  7195F  Uint16 FE : 1 ;
  7196F                // 4 Framing error flag
  7197F  Uint16 BRKDT : 1 ;
  7198F                   // 5 Break-detect flag
  7199F  Uint16 RXRDY : 1 ;
  7200F                   // 6 Receiver ready flag
  7201F  Uint16 RXERROR : 1 ;
  7202F                     // 7 Receiver error flag
  7203F} ;
  7204F
  7205Funion SCIRXST_REG
  7206F{
  7207F  Uint16 all ;
  7208F  struct SCIRXST_BITS bit ;
  7209F} ;
  7210F//----------------------------------------------------
  7211F// SCIRXBUF Receiver Data Buffer with FIFO bit definitions:
  7212F//
  7213F
  7214Fstruct SCIRXBUF_BITS
  7215F{                      // bits description
  7216F  Uint16 RXDT : 8 ;
  7217F                  // 7:0 Receive word
  7218F  Uint16 rsvd : 6 ;
  7219F                  // 13:8 reserved
  7220F  Uint16 SCIFFPE : 1 ;
  7221F                     // 14 SCI PE error in FIFO mode
  7222F  Uint16 SCIFFFE : 1 ;
  7223F                     // 15 SCI FE error in FIFO mode
  7224F} ;
  7225F
  7226Funion SCIRXBUF_REG
  7227F{
  7228F  Uint16 all ;
  7229F  struct SCIRXBUF_BITS bit ;
  7230F} ;
  7231F//--------------------------------------------------
  7232F// SCIPRI Priority control register bit definitions:
  7233F//
  7234F//
  7235F
  7236Fstruct SCIPRI_BITS
  7237F{                    // bit description
  7238F  Uint16 rsvd : 3 ;
  7239F                  // 2:0 reserved
  7240F  Uint16 FREE : 1 ;
  7241F                  // 3 Free emulation suspend mode
  7242F  Uint16 SOFT : 1 ;
  7243F                  // 4 Soft emulation suspend mode
  7244F  Uint16 rsvd1 : 3 ;
  7245F                   // 7:5 reserved
  7246F} ;
  7247F
  7248Funion SCIPRI_REG
  7249F{
  7250F  Uint16 all ;
  7251F  struct SCIPRI_BITS bit ;
  7252F} ;
  7253F//-------------------------------------------------
  7254F// SCI FIFO Transmit register bit definitions:
  7255F//
  7256F//
  7257F
  7258Fstruct SCIFFTX_BITS
  7259F{                     // bit description
  7260F  Uint16 TXFFIL : 5 ;
  7261F                    // 4:0 Interrupt level
  7262F  Uint16 TXFFIENA : 1 ;
  7263F                      // 5 Interrupt enable
  7264F  Uint16 TXFFINTCLR : 1 ;
  7265F                        // 6 Clear INT flag
  7266F  Uint16 TXFFINT : 1 ;
  7267F                     // 7 INT flag
  7268F  Uint16 TXFFST : 5 ;
  7269F                    // 12:8 FIFO status
  7270F  Uint16 TXFIFOXRESET : 1 ;
  7271F                          // 13 FIFO reset
  7272F  Uint16 SCIFFENA : 1 ;
  7273F                      // 14 Enhancement enable
  7274F  Uint16 SCIRST : 1 ;
  7275F                    // 15 SCI reset rx/tx channels
  7276F} ;
  7277F
  7278Funion SCIFFTX_REG
  7279F{
  7280F  Uint16 all ;
  7281F  struct SCIFFTX_BITS bit ;
  7282F} ;
  7283F//------------------------------------------------
  7284F// SCI FIFO recieve register bit definitions:
  7285F//
  7286F//
  7287F
  7288Fstruct SCIFFRX_BITS
  7289F{                     // bits description
  7290F  Uint16 RXFFIL : 5 ;
  7291F                    // 4:0 Interrupt level
  7292F  Uint16 RXFFIENA : 1 ;
  7293F                      // 5 Interrupt enable
  7294F  Uint16 RXFFINTCLR : 1 ;
  7295F                        // 6 Clear INT flag
  7296F  Uint16 RXFFINT : 1 ;
  7297F                     // 7 INT flag
  7298F  Uint16 RXFFST : 5 ;
  7299F                    // 12:8 FIFO status
  7300F  Uint16 RXFIFORESET : 1 ;
  7301F                         // 13 FIFO reset
  7302F  Uint16 RXFFOVRCLR : 1 ;
  7303F                        // 14 Clear overflow
  7304F  Uint16 RXFFOVF : 1 ;
  7305F                     // 15 FIFO overflow
  7306F} ;
  7307F
  7308Funion SCIFFRX_REG
  7309F{
  7310F  Uint16 all ;
  7311F  struct SCIFFRX_BITS bit ;
  7312F} ;
  7313F// SCI FIFO control register bit definitions:
  7314F
  7315Fstruct SCIFFCT_BITS
  7316F{                     // bits description
  7317F  Uint16 FFTXDLY : 8 ;
  7318F                     // 7:0 FIFO transmit delay
  7319F  Uint16 rsvd : 5 ;
  7320F                  // 12:8 reserved
  7321F  Uint16 CDC : 1 ;
  7322F                 // 13 Auto baud mode enable
  7323F  Uint16 ABDCLR : 1 ;
  7324F                    // 14 Auto baud clear
  7325F  Uint16 ABD : 1 ;
  7326F                 // 15 Auto baud detect
  7327F} ;
  7328F
  7329Funion SCIFFCT_REG
  7330F{
  7331F  Uint16 all ;
  7332F  struct SCIFFCT_BITS bit ;
  7333F} ;
  7334F//---------------------------------------------------------------------------
  7335F// SCI Register File:
  7336F//
  7337F
  7338Fstruct SCI_REGS
  7339F{
  7340F  union SCICCR_REG SCICCR ; // Communications control register
  7341F  union SCICTL1_REG SCICTL1 ; // Control register 1
  7342F  Uint16 SCIHBAUD ; // Baud rate (high) register
  7343F  Uint16 SCILBAUD ; // Baud rate (low) register
  7344F  union SCICTL2_REG SCICTL2 ; // Control register 2
  7345F  union SCIRXST_REG SCIRXST ; // Recieve status register
  7346F  Uint16 SCIRXEMU ; // Recieve emulation buffer register
  7347F  union SCIRXBUF_REG SCIRXBUF ; // Recieve data buffer
  7348F  Uint16 rsvd1 ; // reserved
  7349F  Uint16 SCITXBUF ; // Transmit data buffer
  7350F  union SCIFFTX_REG SCIFFTX ; // FIFO transmit register
  7351F  union SCIFFRX_REG SCIFFRX ; // FIFO recieve register
  7352F  union SCIFFCT_REG SCIFFCT ; // FIFO control register
  7353F  Uint16 rsvd2 ; // reserved
  7354F  Uint16 rsvd3 ; // reserved
  7355F  union SCIPRI_REG SCIPRI ; // FIFO Priority control
  7356F} ;
  7357F//---------------------------------------------------------------------------
  7358F// SCI External References & Function Declarations:
  7359F//
  7360F
  7361Fextern volatile struct SCI_REGS
  7362F  SciaRegs ;
  7363F
  7364Fextern volatile struct SCI_REGS
  7365F  ScibRegs ;
  7366F
  7367Fextern volatile struct SCI_REGS
  7368F  ScicRegs ;
  7369F       /* extern "C" */
  7370F       // end of DSP2833x_SCI_H definition
  7371F//===========================================================================
  7372F// End of file.
  7373F//===========================================================================
  7374F 
  7375F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Sci.h*/
  7376F/*   CLOSE_FILE Include File */
  7377F 
  7378F                // SCI Registers
  7379F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_SysCtrl.h */
  7380F// TI File $Revision: /main/5 $
  7381F// Checkin $Date: May 12, 2008 09:34:58 $
  7382F//###########################################################################
  7383F//
  7384F// FILE: DSP2833x_SysCtrl.h
  7385F//
  7386F// TITLE: DSP2833x Device System Control Register Definitions.
  7387F//
  7388F//###########################################################################
  7389F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  7390F// $Release Date: August 4, 2009 $
  7391F//###########################################################################
  7392F#ifndef DSP2833x_SYS_CTRL_H
  7393F#define DSP2833x_SYS_CTRL_H
  7394F//---------------------------------------------------------------------------
  7395F// System Control Individual Register Bit Definitions:
  7396F//
  7397F// PLL Status Register
  7398F
  7399Ftypedef
  7400Fstruct PLLSTS_BITS
  7401F{                            // bits description
  7402F  Uint16 PLLLOCKS : 1 ;
  7403F                      // 0 PLL lock status
  7404F  Uint16 rsvd1 : 1 ;
  7405F                   // 1 reserved
  7406F  Uint16 PLLOFF : 1 ;
  7407F                    // 2 PLL off bit
  7408F  Uint16 MCLKSTS : 1 ;
  7409F                     // 3 Missing clock status bit
  7410F  Uint16 MCLKCLR : 1 ;
  7411F                     // 4 Missing clock clear bit
  7412F  Uint16 OSCOFF : 1 ;
  7413F                    // 5 Oscillator clock off
  7414F  Uint16 MCLKOFF : 1 ;
  7415F                     // 6 Missing clock detect
  7416F  Uint16 DIVSEL : 2 ;
  7417F                    // 7 Divide Select
  7418F  Uint16 rsvd2 : 7 ;
  7419F                   // 15:7 reserved
  7420F} PLLSTS_BITS ;
  7421F
  7422Ftypedef
  7423Funion PLLSTS_REG
  7424F{
  7425F  Uint16 all ;
  7426F  struct PLLSTS_BITS bit ;
  7427F} PLLSTS_REG ;
  7428F// High speed peripheral clock register bit definitions:
  7429F
  7430Ftypedef
  7431Fstruct HISPCP_BITS
  7432F{                            // bits description
  7433F  Uint16 HSPCLK : 3 ;
  7434F                    // 2:0 Rate relative to SYSCLKOUT
  7435F  Uint16 rsvd1 : 13 ;
  7436F                    // 15:3 reserved
  7437F} HISPCP_BITS ;
  7438F
  7439Ftypedef
  7440Funion HISPCP_REG
  7441F{
  7442F  Uint16 all ;
  7443F  struct HISPCP_BITS bit ;
  7444F} HISPCP_REG ;
  7445F// Low speed peripheral clock register bit definitions:
  7446F
  7447Ftypedef
  7448Fstruct LOSPCP_BITS
  7449F{                            // bits description
  7450F  Uint16 LSPCLK : 3 ;
  7451F                    // 2:0 Rate relative to SYSCLKOUT
  7452F  Uint16 rsvd1 : 13 ;
  7453F                    // 15:3 reserved
  7454F} LOSPCP_BITS ;
  7455F
  7456Ftypedef
  7457Funion LOSPCP_REG
  7458F{
  7459F  Uint16 all ;
  7460F  struct LOSPCP_BITS bit ;
  7461F} LOSPCP_REG ;
  7462F// Peripheral clock control register 0 bit definitions:
  7463F
  7464Ftypedef
  7465Fstruct PCLKCR0_BITS
  7466F{                             // bits description
  7467F  Uint16 rsvd1 : 2 ;
  7468F                   // 1:0 reserved
  7469F  Uint16 TBCLKSYNC : 1 ;
  7470F                       // 2 EWPM Module TBCLK enable/sync
  7471F  Uint16 ADCENCLK : 1 ;
  7472F                      // 3 Enable high speed clk to ADC
  7473F  Uint16 I2CAENCLK : 1 ;
  7474F                       // 4 Enable SYSCLKOUT to I2C-A
  7475F  Uint16 SCICENCLK : 1 ;
  7476F                       // 5 Enalbe low speed clk to SCI-C
  7477F  Uint16 rsvd2 : 2 ;
  7478F                   // 7:6 reserved
  7479F  Uint16 SPIAENCLK : 1 ;
  7480F                       // 8 Enable low speed clk to SPI-A
  7481F  Uint16 rsvd3 : 1 ;
  7482F                   // 9 reserved
  7483F  Uint16 SCIAENCLK : 1 ;
  7484F                       // 10 Enable low speed clk to SCI-A
  7485F  Uint16 SCIBENCLK : 1 ;
  7486F                       // 11 Enable low speed clk to SCI-B
  7487F  Uint16 MCBSPAENCLK : 1 ;
  7488F                         // 12 Enable low speed clk to McBSP-A
  7489F  Uint16 MCBSPBENCLK : 1 ;
  7490F                         // 13 Enable low speed clk to McBSP-B
  7491F  Uint16 ECANAENCLK : 1 ;
  7492F                        // 14 Enable system clk to eCAN-A
  7493F  Uint16 ECANBENCLK : 1 ;
  7494F                        // 15 Enable system clk to eCAN-B
  7495F} PCLKCR0_BITS ;
  7496F
  7497Ftypedef
  7498Funion PCLKCR0_REG
  7499F{
  7500F  Uint16 all ;
  7501F  struct PCLKCR0_BITS bit ;
  7502F} PCLKCR0_REG ;
  7503F// Peripheral clock control register 1 bit definitions:
  7504F
  7505Ftypedef
  7506Fstruct PCLKCR1_BITS
  7507F{                             // bits description
  7508F  Uint16 EPWM1ENCLK : 1 ;
  7509F                        // 0 Enable SYSCLKOUT to EPWM1
  7510F  Uint16 EPWM2ENCLK : 1 ;
  7511F                        // 1 Enable SYSCLKOUT to EPWM2
  7512F  Uint16 EPWM3ENCLK : 1 ;
  7513F                        // 2 Enable SYSCLKOUT to EPWM3
  7514F  Uint16 EPWM4ENCLK : 1 ;
  7515F                        // 3 Enable SYSCLKOUT to EPWM4
  7516F  Uint16 EPWM5ENCLK : 1 ;
  7517F                        // 4 Enable SYSCLKOUT to EPWM5
  7518F  Uint16 EPWM6ENCLK : 1 ;
  7519F                        // 5 Enable SYSCLKOUT to EPWM6
  7520F  Uint16 rsvd1 : 2 ;
  7521F                   // 7:6 reserved
  7522F  Uint16 ECAP1ENCLK : 1 ;
  7523F                        // 8 Enable SYSCLKOUT to ECAP1
  7524F  Uint16 ECAP2ENCLK : 1 ;
  7525F                        // 9 Enable SYSCLKOUT to ECAP2
  7526F  Uint16 ECAP3ENCLK : 1 ;
  7527F                        // 10 Enable SYSCLKOUT to ECAP3
  7528F  Uint16 ECAP4ENCLK : 1 ;
  7529F                        // 11 Enable SYSCLKOUT to ECAP4
  7530F  Uint16 ECAP5ENCLK : 1 ;
  7531F                        // 12 Enable SYSCLKOUT to ECAP5
  7532F  Uint16 ECAP6ENCLK : 1 ;
  7533F                        // 13 Enable SYSCLKOUT to ECAP6
  7534F  Uint16 EQEP1ENCLK : 1 ;
  7535F                        // 14 Enable SYSCLKOUT to EQEP1
  7536F  Uint16 EQEP2ENCLK : 1 ;
  7537F                        // 15 Enable SYSCLKOUT to EQEP2
  7538F} PCLKCR1_BITS ;
  7539F
  7540Ftypedef
  7541Funion PCLKCR1_REG
  7542F{
  7543F  Uint16 all ;
  7544F  struct PCLKCR1_BITS bit ;
  7545F} PCLKCR1_REG ;
  7546F// Peripheral clock control register 2 bit definitions:
  7547F
  7548Ftypedef
  7549Fstruct PCLKCR3_BITS
  7550F{                             // bits description
  7551F  Uint16 rsvd1 : 8 ;
  7552F                   // 7:0 reserved
  7553F  Uint16 CPUTIMER0ENCLK : 1 ;
  7554F                            // 8 Enable SYSCLKOUT to CPU-Timer 0
  7555F  Uint16 CPUTIMER1ENCLK : 1 ;
  7556F                            // 9 Enable SYSCLKOUT to CPU-Timer 1
  7557F  Uint16 CPUTIMER2ENCLK : 1 ;
  7558F                            // 10 Enable SYSCLKOUT to CPU-Timer 2
  7559F  Uint16 DMAENCLK : 1 ;
  7560F                      // 11 Enable the DMA clock
  7561F  Uint16 XINTFENCLK : 1 ;
  7562F                        // 12 Enable SYSCLKOUT to XINTF
  7563F  Uint16 GPIOINENCLK : 1 ;
  7564F                         // Enable GPIO input clock
  7565F  Uint16 rsvd2 : 2 ;
  7566F                   // 15:14 reserved
  7567F} PCLKCR3_BITS ;
  7568F
  7569Ftypedef
  7570Funion PCLKCR3_REG
  7571F{
  7572F  Uint16 all ;
  7573F  struct PCLKCR3_BITS bit ;
  7574F} PCLKCR3_REG ;
  7575F// PLL control register bit definitions:
  7576F
  7577Ftypedef
  7578Fstruct PLLCR_BITS
  7579F{                           // bits description
  7580F  Uint16 DIV : 4 ;
  7581F                 // 3:0 Set clock ratio for the PLL
  7582F  Uint16 rsvd1 : 12 ;
  7583F                    // 15:4 reserved
  7584F} PLLCR_BITS ;
  7585F
  7586Ftypedef
  7587Funion PLLCR_REG
  7588F{
  7589F  Uint16 all ;
  7590F  struct PLLCR_BITS bit ;
  7591F} PLLCR_REG ;
  7592F// Low Power Mode 0 control register bit definitions:
  7593F
  7594Ftypedef
  7595Fstruct LPMCR0_BITS
  7596F{                            // bits description
  7597F  Uint16 LPM : 2 ;
  7598F                 // 1:0 Set the low power mode
  7599F  Uint16 QUALSTDBY : 6 ;
  7600F                       // 7:2 Qualification
  7601F  Uint16 rsvd1 : 7 ;
  7602F                   // 14:8 reserved
  7603F  Uint16 WDINTE : 1 ;
  7604F                    // 15 Enables WD to wake the device from STANDBY
  7605F} LPMCR0_BITS ;
  7606F
  7607Ftypedef
  7608Funion LPMCR0_REG
  7609F{
  7610F  Uint16 all ;
  7611F  struct LPMCR0_BITS bit ;
  7612F} LPMCR0_REG ;
  7613F// Dual-mapping configuration register bit definitions:
  7614F
  7615Ftypedef
  7616Fstruct MAPCNF_BITS
  7617F{                            // bits description
  7618F  Uint16 MAPEPWM : 1 ;// 0 EPWM dual-map enable
  7619F  Uint16 rsvd1 : 15 ;// 15:1 reserved
  7620F} MAPCNF_BITS ;
  7621F
  7622Ftypedef
  7623Funion MAPCNF_REG
  7624F{
  7625F  Uint16 all ;
  7626F  struct MAPCNF_BITS bit ;
  7627F} MAPCNF_REG ;
  7628F//---------------------------------------------------------------------------
  7629F// System Control Register File:
  7630F//
  7631F
  7632Ftypedef
  7633Fstruct SYS_CTRL_REGS
  7634F{
  7635F  Uint16 rsvd1 ; // 0
  7636F  union PLLSTS_REG PLLSTS ; // 1
  7637F  Uint16 rsvd2 [ 8 ] ;
  7638F                    // 2-9
  7639F  union HISPCP_REG HISPCP ; // 10: High-speed peripheral clock pre-scaler
  7640F  union LOSPCP_REG LOSPCP ; // 11: Low-speed peripheral clock pre-scaler
  7641F  union PCLKCR0_REG PCLKCR0 ; // 12: Peripheral clock control register
  7642F  union PCLKCR1_REG PCLKCR1 ; // 13: Peripheral clock control register
  7643F  union LPMCR0_REG LPMCR0 ; // 14: Low-power mode control register 0
  7644F  Uint16 rsvd3 ; // 15: reserved
  7645F  union PCLKCR3_REG PCLKCR3 ; // 16: Peripheral clock control register
  7646F  union PLLCR_REG PLLCR ;
  7647F                          // 17: PLL control register
  7648F   // No bit definitions are defined for SCSR because
  7649F   // a read-modify-write instruction can clear the WDOVERRIDE bit
  7650F  Uint16 SCSR ; // 18: System control and status register
  7651F  Uint16 WDCNTR ; // 19: WD counter register
  7652F  Uint16 rsvd4 ; // 20
  7653F  Uint16 WDKEY ; // 21: WD reset key register
  7654F  Uint16 rsvd5 [ 3 ] ;
  7655F                    // 22-24
  7656F   // No bit definitions are defined for WDCR because
  7657F   // the proper value must be written to the WDCHK field
  7658F   // whenever writing to this register.
  7659F  Uint16 WDCR ; // 25: WD timer control register
  7660F  Uint16 rsvd6 [ 4 ] ;
  7661F                    // 26-29
  7662F  union MAPCNF_REG MAPCNF ; // 30: Dual-mapping configuration register
  7663F  Uint16 rsvd7 [ 1 ] ;
  7664F                    // 31
  7665F} SYS_CTRL_REGS ;
  7666F/* --------------------------------------------------- */
  7667F/* CSM Registers */
  7668F/* */
  7669F/* ----------------------------------------------------*/
  7670F/* CSM Status & Control register bit definitions */
  7671F
  7672Ftypedef
  7673Fstruct CSMSCR_BITS
  7674F{                            // bit description
  7675F  Uint16 SECURE : 1 ;
  7676F                    // 0 Secure flag
  7677F  Uint16 rsvd1 : 14 ;
  7678F                    // 14-1 reserved
  7679F  Uint16 FORCESEC : 1 ;
  7680F                      // 15 Force Secure control bit
  7681F} CSMSCR_BITS ;
  7682F/* Allow access to the bit fields or entire register */
  7683F
  7684Ftypedef
  7685Funion CSMSCR_REG
  7686F{
  7687F  Uint16 all ;
  7688F  struct CSMSCR_BITS bit ;
  7689F} CSMSCR_REG ;
  7690F/* CSM Register File */
  7691F
  7692Ftypedef
  7693Fstruct CSM_REGS
  7694F{
  7695F  Uint16 KEY0 ; // KEY reg bits 15-0
  7696F  Uint16 KEY1 ; // KEY reg bits 31-16
  7697F  Uint16 KEY2 ; // KEY reg bits 47-32
  7698F  Uint16 KEY3 ; // KEY reg bits 63-48
  7699F  Uint16 KEY4 ; // KEY reg bits 79-64
  7700F  Uint16 KEY5 ; // KEY reg bits 95-80
  7701F  Uint16 KEY6 ; // KEY reg bits 111-96
  7702F  Uint16 KEY7 ; // KEY reg bits 127-112
  7703F  Uint16 rsvd1 ; // reserved
  7704F  Uint16 rsvd2 ; // reserved
  7705F  Uint16 rsvd3 ; // reserved
  7706F  Uint16 rsvd4 ; // reserved
  7707F  Uint16 rsvd5 ; // reserved
  7708F  Uint16 rsvd6 ; // reserved
  7709F  Uint16 rsvd7 ; // reserved
  7710F  union CSMSCR_REG CSMSCR ; // CSM Status & Control register
  7711F} CSM_REGS ;
  7712F/* Password locations */
  7713F
  7714Ftypedef
  7715Fstruct CSM_PWL
  7716F{
  7717F  Uint16 PSWD0 ; // PSWD bits 15-0
  7718F  Uint16 PSWD1 ; // PSWD bits 31-16
  7719F  Uint16 PSWD2 ; // PSWD bits 47-32
  7720F  Uint16 PSWD3 ; // PSWD bits 63-48
  7721F  Uint16 PSWD4 ; // PSWD bits 79-64
  7722F  Uint16 PSWD5 ; // PSWD bits 95-80
  7723F  Uint16 PSWD6 ; // PSWD bits 111-96
  7724F  Uint16 PSWD7 ; // PSWD bits 127-112
  7725F} CSM_PWL ;
  7726F/* Flash Registers */
  7727F#define FLASH_SLEEP 0x0000 ;
  7728F#define FLASH_STANDBY 0x0001 ;
  7729F#define FLASH_ACTIVE 0x0003 ;
  7730F/* Flash Option Register bit definitions */
  7731F
  7732Ftypedef
  7733Fstruct FOPT_BITS
  7734F{                          // bit description
  7735F  Uint16 ENPIPE : 1 ;
  7736F                    // 0 Enable Pipeline Mode
  7737F  Uint16 rsvd : 15 ;
  7738F                   // 1-15 reserved
  7739F} FOPT_BITS ;
  7740F/* Allow access to the bit fields or entire register */
  7741F
  7742Ftypedef
  7743Funion FOPT_REG
  7744F{
  7745F  Uint16 all ;
  7746F  struct FOPT_BITS bit ;
  7747F} FOPT_REG ;
  7748F/* Flash Power Modes Register bit definitions */
  7749F
  7750Ftypedef
  7751Fstruct FPWR_BITS
  7752F{                          // bit description
  7753F  Uint16 PWR : 2 ;
  7754F                 // 0-1 Power Mode bits
  7755F  Uint16 rsvd : 14 ;
  7756F                   // 2-15 reserved
  7757F} FPWR_BITS ;
  7758F/* Allow access to the bit fields or entire register */
  7759F
  7760Ftypedef
  7761Funion FPWR_REG
  7762F{
  7763F  Uint16 all ;
  7764F  struct FPWR_BITS bit ;
  7765F} FPWR_REG ;
  7766F/* Flash Status Register bit definitions */
  7767F
  7768Ftypedef
  7769Fstruct FSTATUS_BITS
  7770F{                             // bit description
  7771F  Uint16 PWRS : 2 ;
  7772F                  // 0-1 Power Mode Status bits
  7773F  Uint16 STDBYWAITS : 1 ;
  7774F                        // 2 Bank/Pump Sleep to Standby Wait Counter Status bits
  7775F  Uint16 ACTIVEWAITS : 1 ;
  7776F                         // 3 Bank/Pump Standby to Active Wait Counter Status bits
  7777F  Uint16 rsvd1 : 4 ;
  7778F                   // 4-7 reserved
  7779F  Uint16 V3STAT : 1 ;
  7780F                    // 8 VDD3V Status Latch bit
  7781F  Uint16 rsvd2 : 7 ;
  7782F                   // 9-15 reserved
  7783F} FSTATUS_BITS ;
  7784F/* Allow access to the bit fields or entire register */
  7785F
  7786Ftypedef
  7787Funion FSTATUS_REG
  7788F{
  7789F  Uint16 all ;
  7790F  struct FSTATUS_BITS bit ;
  7791F} FSTATUS_REG ;
  7792F/* Flash Sleep to Standby Wait Counter Register bit definitions */
  7793F
  7794Ftypedef
  7795Fstruct FSTDBYWAIT_BITS
  7796F{                                // bit description
  7797F  Uint16 STDBYWAIT : 9 ;
  7798F                       // 0-8 Bank/Pump Sleep to Standby Wait Count bits
  7799F  Uint16 rsvd : 7 ;
  7800F                  // 9-15 reserved
  7801F} FSTDBYWAIT_BITS ;
  7802F/* Allow access to the bit fields or entire register */
  7803F
  7804Ftypedef
  7805Funion FSTDBYWAIT_REG
  7806F{
  7807F  Uint16 all ;
  7808F  struct FSTDBYWAIT_BITS bit ;
  7809F} FSTDBYWAIT_REG ;
  7810F/* Flash Standby to Active Wait Counter Register bit definitions */
  7811F
  7812Ftypedef
  7813Fstruct FACTIVEWAIT_BITS
  7814F{                                 // bit description
  7815F  Uint16 ACTIVEWAIT : 9 ;
  7816F                        // 0-8 Bank/Pump Standby to Active Wait Count bits
  7817F  Uint16 rsvd : 7 ;
  7818F                  // 9-15 reserved
  7819F} FACTIVEWAIT_BITS ;
  7820F/* Allow access to the bit fields or entire register */
  7821F
  7822Ftypedef
  7823Funion FACTIVEWAIT_REG
  7824F{
  7825F  Uint16 all ;
  7826F  struct FACTIVEWAIT_BITS bit ;
  7827F} FACTIVEWAIT_REG ;
  7828F/* Bank Read Access Wait State Register bit definitions */
  7829F
  7830Ftypedef
  7831Fstruct FBANKWAIT_BITS
  7832F{                               // bit description
  7833F  Uint16 RANDWAIT : 4 ;
  7834F                      // 0-3 Flash Random Read Wait State bits
  7835F  Uint16 rsvd1 : 4 ;
  7836F                   // 4-7 reserved
  7837F  Uint16 PAGEWAIT : 4 ;
  7838F                      // 8-11 Flash Paged Read Wait State bits
  7839F  Uint16 rsvd2 : 4 ;
  7840F                   // 12-15 reserved
  7841F} FBANKWAIT_BITS ;
  7842F/* Allow access to the bit fields or entire register */
  7843F
  7844Ftypedef
  7845Funion FBANKWAIT_REG
  7846F{
  7847F  Uint16 all ;
  7848F  struct FBANKWAIT_BITS bit ;
  7849F} FBANKWAIT_REG ;
  7850F/* OTP Read Access Wait State Register bit definitions */
  7851F
  7852Ftypedef
  7853Fstruct FOTPWAIT_BITS
  7854F{                              // bit description
  7855F  Uint16 OTPWAIT : 5 ;
  7856F                     // 0-4 OTP Read Wait State bits
  7857F  Uint16 rsvd : 11 ;
  7858F                   // 5-15 reserved
  7859F} FOTPWAIT_BITS ;
  7860F/* Allow access to the bit fields or entire register */
  7861F
  7862Ftypedef
  7863Funion FOTPWAIT_REG
  7864F{
  7865F  Uint16 all ;
  7866F  struct FOTPWAIT_BITS bit ;
  7867F} FOTPWAIT_REG ;
  7868F
  7869Ftypedef
  7870Fstruct FLASH_REGS
  7871F{
  7872F  union FOPT_REG FOPT ; // Option Register
  7873F  Uint16 rsvd1 ; // reserved
  7874F  union FPWR_REG FPWR ; // Power Modes Register
  7875F  union FSTATUS_REG FSTATUS ; // Status Register
  7876F  union FSTDBYWAIT_REG FSTDBYWAIT ; // Pump/Bank Sleep to Standby Wait State Register
  7877F  union FACTIVEWAIT_REG FACTIVEWAIT ; // Pump/Bank Standby to Active Wait State Register
  7878F  union FBANKWAIT_REG FBANKWAIT ; // Bank Read Access Wait State Register
  7879F  union FOTPWAIT_REG FOTPWAIT ; // OTP Read Access Wait State Register
  7880F} FLASH_REGS ;
  7881F//---------------------------------------------------------------------------
  7882F// System Control External References & Function Declarations:
  7883F//
  7884F
  7885Fextern volatile struct SYS_CTRL_REGS
  7886F  SysCtrlRegs ;
  7887F
  7888Fextern volatile struct CSM_REGS
  7889F  CsmRegs ;
  7890F
  7891Fextern volatile struct CSM_PWL
  7892F  CsmPwl ;
  7893F
  7894Fextern volatile struct FLASH_REGS
  7895F  FlashRegs ;
  7896F       // end of DSP2833x_SYS_CTRL_H definition
  7897F//===========================================================================
  7898F// End of file.
  7899F//===========================================================================
  7900F 
  7901F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_SysCtrl.h*/
  7902F/*   CLOSE_FILE Include File */
  7903F 
  7904F            // System Control/Power Modes
  7905F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_XIntrupt.h */
  7906F// TI File $Revision: /main/1 $
  7907F// Checkin $Date: August 18, 2006 13:52:39 $
  7908F//###########################################################################
  7909F//
  7910F// FILE: DSP2833x_XIntrupt.h
  7911F//
  7912F// TITLE: DSP2833x Device External Interrupt Register Definitions.
  7913F//
  7914F//###########################################################################
  7915F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  7916F// $Release Date: August 4, 2009 $
  7917F//###########################################################################
  7918F#ifndef DSP2833x_XINTRUPT_H
  7919F#define DSP2833x_XINTRUPT_H
  7920F//---------------------------------------------------------------------------
  7921F
  7922Fstruct XINTCR_BITS
  7923F{
  7924F  Uint16 ENABLE : 1 ;// 0 enable/disable
  7925F  Uint16 rsvd1 : 1 ;// 1 reserved
  7926F  Uint16 POLARITY : 2 ;// 3:2 pos/neg, both triggered
  7927F  Uint16 rsvd2 : 12 ;//15:4 reserved
  7928F} ;
  7929F
  7930Funion XINTCR_REG
  7931F{
  7932F  Uint16 all ;
  7933F  struct XINTCR_BITS bit ;
  7934F} ;
  7935F
  7936Fstruct XNMICR_BITS
  7937F{
  7938F  Uint16 ENABLE : 1 ;// 0 enable/disable
  7939F  Uint16 SELECT : 1 ;// 1 Timer 1 or XNMI connected to int13
  7940F  Uint16 POLARITY : 2 ;// 3:2 pos/neg, or both triggered
  7941F  Uint16 rsvd2 : 12 ;// 15:4 reserved
  7942F} ;
  7943F
  7944Funion XNMICR_REG
  7945F{
  7946F  Uint16 all ;
  7947F  struct XNMICR_BITS bit ;
  7948F} ;
  7949F//---------------------------------------------------------------------------
  7950F// External Interrupt Register File:
  7951F//
  7952F
  7953Fstruct XINTRUPT_REGS
  7954F{
  7955F  union XINTCR_REG XINT1CR ;
  7956F  union XINTCR_REG XINT2CR ;
  7957F  union XINTCR_REG XINT3CR ;
  7958F  union XINTCR_REG XINT4CR ;
  7959F  union XINTCR_REG XINT5CR ;
  7960F  union XINTCR_REG XINT6CR ;
  7961F  union XINTCR_REG XINT7CR ;
  7962F  union XNMICR_REG XNMICR ;
  7963F  Uint16 XINT1CTR ;
  7964F  Uint16 XINT2CTR ;
  7965F  Uint16 rsvd [ 5 ] ;
  7966F  Uint16 XNMICTR ;
  7967F} ;
  7968F//---------------------------------------------------------------------------
  7969F// External Interrupt References & Function Declarations:
  7970F//
  7971F
  7972Fextern volatile struct XINTRUPT_REGS
  7973F  XIntruptRegs ;
  7974F       /* extern "C" */
  7975F       // end of DSP2833x_XINTF_H definition
  7976F//===========================================================================
  7977F// End of file.
  7978F//===========================================================================
  7979F 
  7980F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_XIntrupt.h*/
  7981F/*   CLOSE_FILE Include File */
  7982F 
  7983F           // External Interrupts
  7984F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Xintf.h */
  7985F// TI File $Revision: /main/4 $
  7986F// Checkin $Date: July 27, 2009 13:57:25 $
  7987F//###########################################################################
  7988F//
  7989F// FILE: DSP2833x_Xintf.h
  7990F//
  7991F// TITLE: DSP2833x Device External Interface Register Definitions.
  7992F//
  7993F//###########################################################################
  7994F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  7995F// $Release Date: August 4, 2009 $
  7996F//###########################################################################
  7997F#ifndef DSP2833x_XINTF_H
  7998F#define DSP2833x_XINTF_H
  7999F// XINTF timing register bit definitions:
  8000F
  8001Fstruct XTIMING_BITS
  8002F{                     // bits description
  8003F  Uint16 XWRTRAIL : 2 ;
  8004F                      // 1:0 Write access trail timing
  8005F  Uint16 XWRACTIVE : 3 ;
  8006F                       // 4:2 Write access active timing
  8007F  Uint16 XWRLEAD : 2 ;
  8008F                     // 6:5 Write access lead timing
  8009F  Uint16 XRDTRAIL : 2 ;
  8010F                      // 8:7 Read access trail timing
  8011F  Uint16 XRDACTIVE : 3 ;
  8012F                       // 11:9 Read access active timing
  8013F  Uint16 XRDLEAD : 2 ;
  8014F                     // 13:12 Read access lead timing
  8015F  Uint16 USEREADY : 1 ;
  8016F                      // 14 Extend access using HW waitstates
  8017F  Uint16 READYMODE : 1 ;
  8018F                       // 15 Ready mode
  8019F  Uint16 XSIZE : 2 ;
  8020F                   // 17:16 XINTF bus width - must be written as 11b
  8021F  Uint16 rsvd1 : 4 ;
  8022F                   // 21:18 reserved
  8023F  Uint16 X2TIMING : 1 ;
  8024F                      // 22 Double lead/active/trail timing
  8025F  Uint16 rsvd3 : 9 ;
  8026F                   // 31:23 reserved
  8027F} ;
  8028F
  8029Funion XTIMING_REG
  8030F{
  8031F  Uint32 all ;
  8032F  struct XTIMING_BITS bit ;
  8033F} ;
  8034F// XINTF control register bit definitions:
  8035F
  8036Fstruct XINTCNF2_BITS
  8037F{                      // bits description
  8038F  Uint16 WRBUFF : 2 ;
  8039F                    // 1:0 Write buffer depth
  8040F  Uint16 CLKMODE : 1 ;
  8041F                     // 2 Ratio for XCLKOUT with respect to XTIMCLK
  8042F  Uint16 CLKOFF : 1 ;
  8043F                    // 3 Disable XCLKOUT
  8044F  Uint16 rsvd1 : 2 ;
  8045F                   // 5:4 reserved
  8046F  Uint16 WLEVEL : 2 ;
  8047F                    // 7:6 Current level of the write buffer
  8048F  Uint16 rsvd2 : 1 ;
  8049F                   // 8 reserved
  8050F  Uint16 HOLD : 1 ;
  8051F                  // 9 Hold enable/disable
  8052F  Uint16 HOLDS : 1 ;
  8053F                   // 10 Current state of HOLDn input
  8054F  Uint16 HOLDAS : 1 ;
  8055F                    // 11 Current state of HOLDAn output
  8056F  Uint16 rsvd3 : 4 ;
  8057F                   // 15:12 reserved
  8058F  Uint16 XTIMCLK : 3 ;
  8059F                     // 18:16 Ratio for XTIMCLK
  8060F  Uint16 rsvd4 : 13 ;
  8061F                    // 31:19 reserved
  8062F} ;
  8063F
  8064Funion XINTCNF2_REG
  8065F{
  8066F  Uint32 all ;
  8067F  struct XINTCNF2_BITS bit ;
  8068F} ;
  8069F// XINTF bank switching register bit definitions:
  8070F
  8071Fstruct XBANK_BITS
  8072F{                   // bits description
  8073F  Uint16 BANK : 3 ;
  8074F                  // 2:0 Zone for which banking is enabled
  8075F  Uint16 BCYC : 3 ;
  8076F                  // 5:3 XTIMCLK cycles to add
  8077F  Uint16 rsvd : 10 ;
  8078F                   // 15:6 reserved
  8079F} ;
  8080F
  8081Funion XBANK_REG
  8082F{
  8083F  Uint16 all ;
  8084F  struct XBANK_BITS bit ;
  8085F} ;
  8086F
  8087Fstruct XRESET_BITS
  8088F{
  8089F  Uint16 XHARDRESET : 1 ;
  8090F  Uint16 rsvd1 : 15 ;
  8091F} ;
  8092F
  8093Funion XRESET_REG
  8094F{
  8095F  Uint16 all ;
  8096F  struct XRESET_BITS bit ;
  8097F} ;
  8098F//---------------------------------------------------------------------------
  8099F// XINTF Register File:
  8100F//
  8101F
  8102Fstruct XINTF_REGS
  8103F{
  8104F  union XTIMING_REG XTIMING0 ;
  8105F  Uint32 rsvd1 [ 5 ] ;
  8106F  union XTIMING_REG XTIMING6 ;
  8107F  union XTIMING_REG XTIMING7 ;
  8108F  Uint32 rsvd2 [ 2 ] ;
  8109F  union XINTCNF2_REG XINTCNF2 ;
  8110F  Uint32 rsvd3 ;
  8111F  union XBANK_REG XBANK ;
  8112F  Uint16 rsvd4 ;
  8113F  Uint16 XREVISION ;
  8114F  Uint16 rsvd5 [ 2 ] ;
  8115F  union XRESET_REG XRESET ;
  8116F} ;
  8117F//---------------------------------------------------------------------------
  8118F// XINTF External References & Function Declarations:
  8119F//
  8120F
  8121Fextern volatile struct XINTF_REGS
  8122F  XintfRegs ;
  8123F       /* extern "C" */
  8124F       // end of DSP2833x_XINTF_H definition
  8125F//===========================================================================
  8126F// No more.
  8127F//===========================================================================
  8128F 
  8129F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Xintf.h*/
  8130F/*   CLOSE_FILE Include File */
  8131F 
  8132F              // XINTF External Interface
  8133F#define DSP28_EPWM1 1
  8134F#define DSP28_EPWM2 1
  8135F#define DSP28_EPWM3 1
  8136F#define DSP28_EPWM4 1
  8137F#define DSP28_EPWM5 1
  8138F#define DSP28_EPWM6 1
  8139F#define DSP28_ECAP1 1
  8140F#define DSP28_ECAP2 1
  8141F#define DSP28_ECAP3 1
  8142F#define DSP28_ECAP4 1
  8143F#define DSP28_ECAP5 1
  8144F#define DSP28_ECAP6 1
  8145F#define DSP28_EQEP1 1
  8146F#define DSP28_EQEP2 1
  8147F#define DSP28_ECANA 1
  8148F#define DSP28_ECANB 1
  8149F#define DSP28_MCBSPA 1
  8150F#define DSP28_MCBSPB 1
  8151F#define DSP28_SPIA 1
  8152F#define DSP28_SCIA 1
  8153F#define DSP28_SCIB 1
  8154F#define DSP28_SCIC 1
  8155F#define DSP28_I2CA 1
  8156F       // end DSP28_28335
  8157F       // end DSP28_28334
  8158F       // end DSP28_28332
  8159F       /* extern "C" */
  8160F       // end of DSP2833x_DEVICE_H definition
  8161F//===========================================================================
  8162F// End of file.
  8163F//===========================================================================
  8164F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Device.h*/
  8165F/*   CLOSE_FILE Include File */
  8166F 
  8167F#define ___SPI_8BITS
  8168F//#define ___SPI_16BITS
  8169F//extern char *SCI_TX_Message;
  8170F//extern char SciTxQtd;  // quantity to be send
  8171F//extern char SciTxStatus;
  8172F//
  8173F//extern char *SPI_TX_Message_C;
  8174F//#ifdef ___SPI_8BITS
  8175F//extern char SPI_RX_Message[16];
  8176F//#endif
  8177F//#ifdef ___SPI_16BITS
  8178F//extern Uint16 *SPI_TX_Message_W;
  8179F//extern Uint16 SPI_RX_Message[16];
  8180F//#endif
  8181F//extern int SpiTxQtd;
  8182F//extern char SpiTxStatus;
  8183F//
  8184F//extern char line[80];
  8185F//extern char gps_in[200];
  8186F//extern char gps_in_index;
  8187F//extern char gps_in_flag;
  8188F//extern int GpsMessageReady;
  8189F//extern char NewGpsMessage;
  8190F//extern Uint32 idMessage;
  8191F//extern struct gps_data_translated gps_dat;
  8192F//
  8193F//extern char SPI_received_ok;   // It's warn when one message is received by SPI
  8194F////extern char gtx_msg_ind_in;  // Variable to index Gumstix_Message_in
  8195F////extern char gtx_msg_ind_out;         // Variable to index Gumstix_Message_out
  8196F////extern char Gumstix_Message_in[80];
  8197F////extern char Gumstix_Message_out[80];
  8198F//
  8199F//extern Uint32 Timer0_count_before, Timer0_count_after, diff;   // Timer0 counter
  8200F////extern char internal_timing;        // 0: external timing - GPS
  8201F//
  8202F//extern unsigned char I2CRead_flag;     // 1: internal timing - DSP
  8203F       // APPLICATION_CONTROL_VARIABLES_H
  8204F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\Application_Control_Variables.h*/
  8205F/*   CLOSE_FILE Include File */
  8206F 
  8207F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\Application_IO_Functions.h */
  8208F//#ifndef APPLICATION_IO_FUNCTION_H
  8209F//#define APPLICATION_IO_FUNCTION_H
  8210F//
  8211F//void SCIA_TX(char* vec, int qtd);
  8212F//void SCIA_TX_String(char *str);
  8213F////char SCIA_Read_Byte();
  8214F//char sciBatchWrite( unsigned char* txBuffer, unsigned char bytesToWrite );
  8215F//
  8216F//#ifdef ___SPI_8BITS
  8217F//void SPI_TX(char* vec, int qtd);
  8218F//#endif
  8219F//#ifdef ___SPI_16BITS
  8220F//void SPI_TX(Uint16* vec, int qtd);
  8221F//#endif
  8222F//void SPI_TX_String(char *str);
  8223F//
  8224F//#endif // APPLICATION_IO_FUNCTION_H
  8225F/*   CLOSE_FILE Include File */
  8226F/* LDRA REMOVE #include "DSP2833x_Device.h" */
  8227F/* LDRA REMOVE #include "DSP2833x_Gpio.h" */
  8228F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_GlobalPrototypes.h */
  8229F// TI File $Revision: /main/11 $
  8230F// Checkin $Date: May 12, 2008 14:30:08 $
  8231F//###########################################################################
  8232F//
  8233F// FILE: DSP2833x_GlobalPrototypes.h
  8234F//
  8235F// TITLE: Global prototypes for DSP2833x Examples
  8236F//
  8237F//###########################################################################
  8238F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  8239F// $Release Date: August 4, 2009 $
  8240F//###########################################################################
  8241F#ifndef DSP2833x_GLOBALPROTOTYPES_H
  8242F#define DSP2833x_GLOBALPROTOTYPES_H
  8243F/*---- shared global function prototypes -----------------------------------*/
  8244F
  8245Fextern void
  8246F  InitAdc ( void ) ;
  8247F
  8248Fextern void
  8249F  DMAInitialize ( void ) ;
  8250F// DMA Channel 1
  8251F
  8252Fextern void
  8253T  DMACH1AddrConfig (
  8254F  volatile Uint16 * DMA_Dest ,
  8255F  volatile Uint16 * DMA_Source ) ;
  8256F
  8257Fextern void
  8258T  DMACH1BurstConfig (
  8259F  Uint16 bsize ,
  8260F  int16 srcbstep ,
  8261F  int16 desbstep ) ;
  8262F
  8263Fextern void
  8264T  DMACH1TransferConfig (
  8265F  Uint16 tsize ,
  8266F  int16 srctstep ,
  8267F  int16 deststep ) ;
  8268F
  8269Fextern void
  8270T  DMACH1WrapConfig (
  8271F  Uint16 srcwsize ,
  8272F  int16 srcwstep ,
  8273F  Uint16 deswsize ,
  8274F  int16 deswstep ) ;
  8275F
  8276Fextern void
  8277T  DMACH1ModeConfig (
  8278F  Uint16 persel ,
  8279F  Uint16 perinte ,
  8280F  Uint16 oneshot ,
  8281F  Uint16 cont ,
  8282F  Uint16 synce ,
  8283F  Uint16 syncsel ,
  8284F  Uint16 ovrinte ,
  8285F  Uint16 datasize ,
  8286F  Uint16 chintmode ,
  8287F  Uint16 chinte ) ;
  8288F
  8289Fextern void
  8290F  StartDMACH1 ( void ) ;
  8291F// DMA Channel 2
  8292F
  8293Fextern void
  8294T  DMACH2AddrConfig (
  8295F  volatile Uint16 * DMA_Dest ,
  8296F  volatile Uint16 * DMA_Source ) ;
  8297F
  8298Fextern void
  8299T  DMACH2BurstConfig (
  8300F  Uint16 bsize ,
  8301F  int16 srcbstep ,
  8302F  int16 desbstep ) ;
  8303F
  8304Fextern void
  8305T  DMACH2TransferConfig (
  8306F  Uint16 tsize ,
  8307F  int16 srctstep ,
  8308F  int16 deststep ) ;
  8309F
  8310Fextern void
  8311T  DMACH2WrapConfig (
  8312F  Uint16 srcwsize ,
  8313F  int16 srcwstep ,
  8314F  Uint16 deswsize ,
  8315F  int16 deswstep ) ;
  8316F
  8317Fextern void
  8318T  DMACH2ModeConfig (
  8319F  Uint16 persel ,
  8320F  Uint16 perinte ,
  8321F  Uint16 oneshot ,
  8322F  Uint16 cont ,
  8323F  Uint16 synce ,
  8324F  Uint16 syncsel ,
  8325F  Uint16 ovrinte ,
  8326F  Uint16 datasize ,
  8327F  Uint16 chintmode ,
  8328F  Uint16 chinte ) ;
  8329F
  8330Fextern void
  8331F  StartDMACH2 ( void ) ;
  8332F// DMA Channel 3
  8333F
  8334Fextern void
  8335T  DMACH3AddrConfig (
  8336F  volatile Uint16 * DMA_Dest ,
  8337F  volatile Uint16 * DMA_Source ) ;
  8338F
  8339Fextern void
  8340T  DMACH3BurstConfig (
  8341F  Uint16 bsize ,
  8342F  int16 srcbstep ,
  8343F  int16 desbstep ) ;
  8344F
  8345Fextern void
  8346T  DMACH3TransferConfig (
  8347F  Uint16 tsize ,
  8348F  int16 srctstep ,
  8349F  int16 deststep ) ;
  8350F
  8351Fextern void
  8352T  DMACH3WrapConfig (
  8353F  Uint16 srcwsize ,
  8354F  int16 srcwstep ,
  8355F  Uint16 deswsize ,
  8356F  int16 deswstep ) ;
  8357F
  8358Fextern void
  8359T  DMACH3ModeConfig (
  8360F  Uint16 persel ,
  8361F  Uint16 perinte ,
  8362F  Uint16 oneshot ,
  8363F  Uint16 cont ,
  8364F  Uint16 synce ,
  8365F  Uint16 syncsel ,
  8366F  Uint16 ovrinte ,
  8367F  Uint16 datasize ,
  8368F  Uint16 chintmode ,
  8369F  Uint16 chinte ) ;
  8370F
  8371Fextern void
  8372F  StartDMACH3 ( void ) ;
  8373F// DMA Channel 4
  8374F
  8375Fextern void
  8376T  DMACH4AddrConfig (
  8377F  volatile Uint16 * DMA_Dest ,
  8378F  volatile Uint16 * DMA_Source ) ;
  8379F
  8380Fextern void
  8381T  DMACH4BurstConfig (
  8382F  Uint16 bsize ,
  8383F  int16 srcbstep ,
  8384F  int16 desbstep ) ;
  8385F
  8386Fextern void
  8387T  DMACH4TransferConfig (
  8388F  Uint16 tsize ,
  8389F  int16 srctstep ,
  8390F  int16 deststep ) ;
  8391F
  8392Fextern void
  8393T  DMACH4WrapConfig (
  8394F  Uint16 srcwsize ,
  8395F  int16 srcwstep ,
  8396F  Uint16 deswsize ,
  8397F  int16 deswstep ) ;
  8398F
  8399Fextern void
  8400T  DMACH4ModeConfig (
  8401F  Uint16 persel ,
  8402F  Uint16 perinte ,
  8403F  Uint16 oneshot ,
  8404F  Uint16 cont ,
  8405F  Uint16 synce ,
  8406F  Uint16 syncsel ,
  8407F  Uint16 ovrinte ,
  8408F  Uint16 datasize ,
  8409F  Uint16 chintmode ,
  8410F  Uint16 chinte ) ;
  8411F
  8412Fextern void
  8413F  StartDMACH4 ( void ) ;
  8414F// DMA Channel 5
  8415F
  8416Fextern void
  8417T  DMACH5AddrConfig (
  8418F  volatile Uint16 * DMA_Dest ,
  8419F  volatile Uint16 * DMA_Source ) ;
  8420F
  8421Fextern void
  8422T  DMACH5BurstConfig (
  8423F  Uint16 bsize ,
  8424F  int16 srcbstep ,
  8425F  int16 desbstep ) ;
  8426F
  8427Fextern void
  8428T  DMACH5TransferConfig (
  8429F  Uint16 tsize ,
  8430F  int16 srctstep ,
  8431F  int16 deststep ) ;
  8432F
  8433Fextern void
  8434T  DMACH5WrapConfig (
  8435F  Uint16 srcwsize ,
  8436F  int16 srcwstep ,
  8437F  Uint16 deswsize ,
  8438F  int16 deswstep ) ;
  8439F
  8440Fextern void
  8441T  DMACH5ModeConfig (
  8442F  Uint16 persel ,
  8443F  Uint16 perinte ,
  8444F  Uint16 oneshot ,
  8445F  Uint16 cont ,
  8446F  Uint16 synce ,
  8447F  Uint16 syncsel ,
  8448F  Uint16 ovrinte ,
  8449F  Uint16 datasize ,
  8450F  Uint16 chintmode ,
  8451F  Uint16 chinte ) ;
  8452F
  8453Fextern void
  8454F  StartDMACH5 ( void ) ;
  8455F// DMA Channel 6
  8456F
  8457Fextern void
  8458T  DMACH6AddrConfig (
  8459F  volatile Uint16 * DMA_Dest ,
  8460F  volatile Uint16 * DMA_Source ) ;
  8461F
  8462Fextern void
  8463T  DMACH6BurstConfig (
  8464F  Uint16 bsize ,
  8465F  Uint16 srcbstep ,
  8466F  int16 desbstep ) ;
  8467F
  8468Fextern void
  8469T  DMACH6TransferConfig (
  8470F  Uint16 tsize ,
  8471F  int16 srctstep ,
  8472F  int16 deststep ) ;
  8473F
  8474Fextern void
  8475T  DMACH6WrapConfig (
  8476F  Uint16 srcwsize ,
  8477F  int16 srcwstep ,
  8478F  Uint16 deswsize ,
  8479F  int16 deswstep ) ;
  8480F
  8481Fextern void
  8482T  DMACH6ModeConfig (
  8483F  Uint16 persel ,
  8484F  Uint16 perinte ,
  8485F  Uint16 oneshot ,
  8486F  Uint16 cont ,
  8487F  Uint16 synce ,
  8488F  Uint16 syncsel ,
  8489F  Uint16 ovrinte ,
  8490F  Uint16 datasize ,
  8491F  Uint16 chintmode ,
  8492F  Uint16 chinte ) ;
  8493F
  8494Fextern void
  8495F  StartDMACH6 ( void ) ;
  8496F
  8497Fextern void
  8498F  InitPeripherals ( void ) ;
  8499F
  8500Fextern void
  8501F  InitECan ( void ) ;
  8502F
  8503Fextern void
  8504F  InitECana ( void ) ;
  8505F
  8506Fextern void
  8507F  InitECanGpio ( void ) ;
  8508F
  8509Fextern void
  8510F  InitECanaGpio ( void ) ;
  8511F       // endif DSP28_ECANA
  8512F
  8513Fextern void
  8514F  InitECanb ( void ) ;
  8515F
  8516Fextern void
  8517F  InitECanbGpio ( void ) ;
  8518F       // endif DSP28_ECANB
  8519F
  8520Fextern void
  8521F  InitECap ( void ) ;
  8522F
  8523Fextern void
  8524F  InitECapGpio ( void ) ;
  8525F
  8526Fextern void
  8527F  InitECap1Gpio ( void ) ;
  8528F
  8529Fextern void
  8530F  InitECap2Gpio ( void ) ;
  8531F
  8532Fextern void
  8533F  InitECap3Gpio ( void ) ;
  8534F       // endif DSP28_ECAP3
  8535F
  8536Fextern void
  8537F  InitECap4Gpio ( void ) ;
  8538F       // endif DSP28_ECAP4
  8539F
  8540Fextern void
  8541F  InitECap5Gpio ( void ) ;
  8542F       // endif DSP28_ECAP5
  8543F
  8544Fextern void
  8545F  InitECap6Gpio ( void ) ;
  8546F       // endif DSP28_ECAP6
  8547F
  8548Fextern void
  8549F  InitEPwm ( void ) ;
  8550F
  8551Fextern void
  8552F  InitEPwmGpio ( void ) ;
  8553F
  8554Fextern void
  8555F  InitEPwm1Gpio ( void ) ;
  8556F
  8557Fextern void
  8558F  InitEPwm2Gpio ( void ) ;
  8559F
  8560Fextern void
  8561F  InitEPwm3Gpio ( void ) ;
  8562F
  8563Fextern void
  8564F  InitEPwm4Gpio ( void ) ;
  8565F       // endif DSP28_EPWM4
  8566F
  8567Fextern void
  8568F  InitEPwm5Gpio ( void ) ;
  8569F       // endif DSP28_EPWM5
  8570F
  8571Fextern void
  8572F  InitEPwm6Gpio ( void ) ;
  8573F       // endif DSP28_EPWM6
  8574F
  8575Fextern void
  8576F  InitEQep ( void ) ;
  8577F
  8578Fextern void
  8579F  InitEQepGpio ( void ) ;
  8580F
  8581Fextern void
  8582F  InitEQep1Gpio ( void ) ;
  8583F       // if DSP28_EQEP1
  8584F
  8585Fextern void
  8586F  InitEQep2Gpio ( void ) ;
  8587F       // endif DSP28_EQEP2
  8588F
  8589Fextern void
  8590F  InitGpio ( void ) ;
  8591F
  8592Fextern void
  8593F  InitI2CGpio ( void ) ;
  8594F
  8595Fextern void
  8596F  InitMcbsp ( void ) ;
  8597F
  8598Fextern void
  8599F  InitMcbspa ( void ) ;
  8600F
  8601Fextern void
  8602F  delay_loop ( void ) ;
  8603F
  8604Fextern void
  8605F  InitMcbspaGpio ( void ) ;
  8606F
  8607Fextern void
  8608F  InitMcbspa8bit ( void ) ;
  8609F
  8610Fextern void
  8611F  InitMcbspa12bit ( void ) ;
  8612F
  8613Fextern void
  8614F  InitMcbspa16bit ( void ) ;
  8615F
  8616Fextern void
  8617F  InitMcbspa20bit ( void ) ;
  8618F
  8619Fextern void
  8620F  InitMcbspa24bit ( void ) ;
  8621F
  8622Fextern void
  8623F  InitMcbspa32bit ( void ) ;
  8624F
  8625Fextern void
  8626F  InitMcbspb ( void ) ;
  8627F
  8628Fextern void
  8629F  InitMcbspbGpio ( void ) ;
  8630F
  8631Fextern void
  8632F  InitMcbspb8bit ( void ) ;
  8633F
  8634Fextern void
  8635F  InitMcbspb12bit ( void ) ;
  8636F
  8637Fextern void
  8638F  InitMcbspb16bit ( void ) ;
  8639F
  8640Fextern void
  8641F  InitMcbspb20bit ( void ) ;
  8642F
  8643Fextern void
  8644F  InitMcbspb24bit ( void ) ;
  8645F
  8646Fextern void
  8647F  InitMcbspb32bit ( void ) ;
  8648F       // endif DSP28_MCBSPB
  8649F
  8650Fextern void
  8651F  InitPieCtrl ( void ) ;
  8652F
  8653Fextern void
  8654F  InitPieVectTable ( void ) ;
  8655F
  8656Fextern void
  8657F  InitSci ( void ) ;
  8658F
  8659Fextern void
  8660F  InitSciGpio ( void ) ;
  8661F
  8662Fextern void
  8663F  InitSciaGpio ( void ) ;
  8664F
  8665Fextern void
  8666F  InitScibGpio ( void ) ;
  8667F       // endif DSP28_SCIB
  8668F
  8669Fextern void
  8670F  InitScicGpio ( void ) ;
  8671F
  8672Fextern void
  8673F  InitSpi ( void ) ;
  8674F
  8675Fextern void
  8676F  InitSpiGpio ( void ) ;
  8677F
  8678Fextern void
  8679F  InitSpiaGpio ( void ) ;
  8680F
  8681Fextern void
  8682F  InitSysCtrl ( void ) ;
  8683F
  8684Fextern void
  8685F  InitTzGpio ( void ) ;
  8686F
  8687Fextern void
  8688F  InitXIntrupt ( void ) ;
  8689F
  8690Fextern void
  8691F  XintfInit ( void ) ;
  8692F
  8693Fextern void
  8694F  InitXintf16Gpio() ;
  8695F
  8696Fextern void
  8697F  InitXintf32Gpio() ;
  8698F
  8699Fextern void
  8700T  InitPll (
  8701F  Uint16 pllcr ,
  8702F  Uint16 clkindiv ) ;
  8703F
  8704Fextern void
  8705F  InitPeripheralClocks ( void ) ;
  8706F
  8707Fextern void
  8708F  EnableInterrupts ( void ) ;
  8709F
  8710Fextern void
  8711T  DSP28x_usDelay (
  8712F  Uint32 Count ) ;
  8713F
  8714Fextern void
  8715F  ADC_cal ( void ) ;
  8716F#define KickDog ServiceDog
  8717F
  8718Fextern void
  8719F  ServiceDog ( void ) ;
  8720F
  8721Fextern void
  8722F  DisableDog ( void ) ;
  8723F
  8724Fextern Uint16
  8725F  CsmUnlock ( void ) ;
  8726F// DSP28_DBGIER.asm
  8727F
  8728Fextern void
  8729T  SetDBGIER (
  8730F  Uint16 dbgier ) ;
  8731F// CAUTION
  8732F// This function MUST be executed out of RAM. Executing it
  8733F// out of OTP/Flash will yield unpredictable results
  8734F
  8735Fextern void
  8736F  InitFlash ( void ) ;
  8737F
  8738Fvoid
  8739T  MemCopy (
  8740F  Uint16 * SourceAddr ,
  8741F  Uint16 * SourceEndAddr ,
  8742F  Uint16 * DestAddr ) ;
  8743F//---------------------------------------------------------------------------
  8744F// External symbols created by the linker cmd file
  8745F// DSP28 examples will use these to relocate code from one LOAD location
  8746F// in either Flash or XINTF to a different RUN location in internal
  8747F// RAM
  8748F
  8749Fextern Uint16
  8750F  RamfuncsLoadStart ;
  8751F
  8752Fextern Uint16
  8753F  RamfuncsLoadEnd ;
  8754F
  8755Fextern Uint16
  8756F  RamfuncsRunStart ;
  8757F
  8758Fextern Uint16
  8759F  XintffuncsLoadStart ;
  8760F
  8761Fextern Uint16
  8762F  XintffuncsLoadEnd ;
  8763F
  8764Fextern Uint16
  8765F  XintffuncsRunStart ;
  8766F       /* extern "C" */
  8767F       // - end of DSP2833x_GLOBALPROTOTYPES_H
  8768F//===========================================================================
  8769F// End of file.
  8770F//===========================================================================
  8771F 
  8772F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_GlobalPrototypes.h*/
  8773F/*   CLOSE_FILE Include File */
  8774F 
  8775F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Examples.h */
  8776F// TI File $Revision: /main/9 $
  8777F// Checkin $Date: July 2, 2008 14:31:12 $
  8778F//###########################################################################
  8779F//
  8780F// FILE: DSP2833x_Examples.h
  8781F//
  8782F// TITLE: DSP2833x Device Definitions.
  8783F//
  8784F//###########################################################################
  8785F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  8786F// $Release Date: August 4, 2009 $
  8787F//###########################################################################
  8788F#ifndef DSP2833x_EXAMPLES_H
  8789F#define DSP2833x_EXAMPLES_H
  8790F/*-----------------------------------------------------------------------------
  8791F      Specify the PLL control register (PLLCR) and divide select (DIVSEL) value.
  8792F-----------------------------------------------------------------------------*/
  8793F//#define DSP28_DIVSEL 0 // Enable /4 for SYSCLKOUT
  8794F//#define DSP28_DIVSEL 1 // Enable /4 for SYSCKOUT
  8795F#define DSP28_DIVSEL 2
  8796F//#define DSP28_DIVSEL 3 // Enable /1 for SYSCLKOUT
  8797F#define DSP28_PLLCR 10
  8798F//#define DSP28_PLLCR 9
  8799F//#define DSP28_PLLCR 8
  8800F//#define DSP28_PLLCR 7
  8801F//#define DSP28_PLLCR 6
  8802F//#define DSP28_PLLCR 5
  8803F//#define DSP28_PLLCR 4
  8804F//#define DSP28_PLLCR 3
  8805F//#define DSP28_PLLCR 2
  8806F//#define DSP28_PLLCR 1
  8807F//#define DSP28_PLLCR 0 // PLL is bypassed in this mode
  8808F//----------------------------------------------------------------------------
  8809F/*-----------------------------------------------------------------------------
  8810F      Specify the clock rate of the CPU (SYSCLKOUT) in nS.
  8811F      Take into account the input clock frequency and the PLL multiplier
  8812F      selected in step 1.
  8813F      Use one of the values provided, or define your own.
  8814F      The trailing L is required tells the compiler to treat
  8815F      the number as a 64-bit value.
  8816F      Only one statement should be uncommented.
  8817F      Example 1:150 MHz devices:
  8818F                CLKIN is a 30MHz crystal.
  8819F                In step 1 the user specified PLLCR = 0xA for a
  8820F                150Mhz CPU clock (SYSCLKOUT = 150MHz).
  8821F                In this case, the CPU_RATE will be 6.667L
  8822F                Uncomment the line: #define CPU_RATE 6.667L
  8823F      Example 2: 100 MHz devices:
  8824F                  CLKIN is a 20MHz crystal.
  8825F                      In step 1 the user specified PLLCR = 0xA for a
  8826F                      100Mhz CPU clock (SYSCLKOUT = 100MHz).
  8827F                      In this case, the CPU_RATE will be 10.000L
  8828F                  Uncomment the line: #define CPU_RATE 10.000L
  8829F-----------------------------------------------------------------------------*/
  8830F#define CPU_RATE 6.667L
  8831F//#define CPU_RATE 7.143L // for a 140MHz CPU clock speed (SYSCLKOUT)
  8832F//#define CPU_RATE 8.333L // for a 120MHz CPU clock speed (SYSCLKOUT)
  8833F//#define CPU_RATE 10.000L // for a 100MHz CPU clock speed (SYSCLKOUT)
  8834F//#define CPU_RATE 13.330L // for a 75MHz CPU clock speed (SYSCLKOUT)
  8835F//#define CPU_RATE 20.000L // for a 50MHz CPU clock speed (SYSCLKOUT)
  8836F//#define CPU_RATE 33.333L // for a 30MHz CPU clock speed (SYSCLKOUT)
  8837F//#define CPU_RATE 41.667L // for a 24MHz CPU clock speed (SYSCLKOUT)
  8838F//#define CPU_RATE 50.000L // for a 20MHz CPU clock speed (SYSCLKOUT)
  8839F//#define CPU_RATE 66.667L // for a 15MHz CPU clock speed (SYSCLKOUT)
  8840F//#define CPU_RATE 100.000L // for a 10MHz CPU clock speed (SYSCLKOUT)
  8841F//----------------------------------------------------------------------------
  8842F/*-----------------------------------------------------------------------------
  8843F      Target device (in DSP2833x_Device.h) determines CPU frequency
  8844F      (for examples) - either 150 MHz (for 28335 and 28334) or 100 MHz
  8845F      (for 28332). User does not have to change anything here.
  8846F-----------------------------------------------------------------------------*/
  8847F#define CPU_FRQ_100MHZ 0
  8848F#define CPU_FRQ_150MHZ 1
  8849F//---------------------------------------------------------------------------
  8850F// Include Example Header Files:
  8851F//
  8852F/* LDRA REMOVE #include "DSP2833x_GlobalPrototypes.h"         // Prototypes for global functions within the */
  8853F                                              // .c files.
  8854F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ePwm_defines.h */
  8855F// TI File $Revision: /main/1 $
  8856F// Checkin $Date: August 18, 2006 13:45:39 $
  8857F//###########################################################################
  8858F//
  8859F// FILE: DSP2833x_EPwm_defines.h
  8860F//
  8861F// TITLE: #defines used in ePWM examples examples
  8862F//
  8863F//###########################################################################
  8864F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  8865F// $Release Date: August 4, 2009 $
  8866F//###########################################################################
  8867F#ifndef DSP2833x_EPWM_DEFINES_H
  8868F#define DSP2833x_EPWM_DEFINES_H
  8869F// TBCTL (Time-Base Control)
  8870F//==========================
  8871F// CTRMODE bits
  8872F#define TB_COUNT_UP 0x0
  8873F#define TB_COUNT_DOWN 0x1
  8874F#define TB_COUNT_UPDOWN 0x2
  8875F#define TB_FREEZE 0x3
  8876F// PHSEN bit
  8877F#define TB_DISABLE 0x0
  8878F#define TB_ENABLE 0x1
  8879F// PRDLD bit
  8880F#define TB_SHADOW 0x0
  8881F#define TB_IMMEDIATE 0x1
  8882F// SYNCOSEL bits
  8883F#define TB_SYNC_IN 0x0
  8884F#define TB_CTR_ZERO 0x1
  8885F#define TB_CTR_CMPB 0x2
  8886F#define TB_SYNC_DISABLE 0x3
  8887F// HSPCLKDIV and CLKDIV bits
  8888F#define TB_DIV1 0x0
  8889F#define TB_DIV2 0x1
  8890F#define TB_DIV4 0x2
  8891F// PHSDIR bit
  8892F#define TB_DOWN 0x0
  8893F#define TB_UP 0x1
  8894F// CMPCTL (Compare Control)
  8895F//==========================
  8896F// LOADAMODE and LOADBMODE bits
  8897F#define CC_CTR_ZERO 0x0
  8898F#define CC_CTR_PRD 0x1
  8899F#define CC_CTR_ZERO_PRD 0x2
  8900F#define CC_LD_DISABLE 0x3
  8901F// SHDWAMODE and SHDWBMODE bits
  8902F#define CC_SHADOW 0x0
  8903F#define CC_IMMEDIATE 0x1
  8904F// AQCTLA and AQCTLB (Action Qualifier Control)
  8905F//=============================================
  8906F// ZRO, PRD, CAU, CAD, CBU, CBD bits
  8907F#define AQ_NO_ACTION 0x0
  8908F#define AQ_CLEAR 0x1
  8909F#define AQ_SET 0x2
  8910F#define AQ_TOGGLE 0x3
  8911F// DBCTL (Dead-Band Control)
  8912F//==========================
  8913F// OUT MODE bits
  8914F#define DB_DISABLE 0x0
  8915F#define DBA_ENABLE 0x1
  8916F#define DBB_ENABLE 0x2
  8917F#define DB_FULL_ENABLE 0x3
  8918F// POLSEL bits
  8919F#define DB_ACTV_HI 0x0
  8920F#define DB_ACTV_LOC 0x1
  8921F#define DB_ACTV_HIC 0x2
  8922F#define DB_ACTV_LO 0x3
  8923F// IN MODE
  8924F#define DBA_ALL 0x0
  8925F#define DBB_RED_DBA_FED 0x1
  8926F#define DBA_RED_DBB_FED 0x2
  8927F#define DBB_ALL 0x3
  8928F// CHPCTL (chopper control)
  8929F//==========================
  8930F// CHPEN bit
  8931F#define CHP_DISABLE 0x0
  8932F#define CHP_ENABLE 0x1
  8933F// CHPFREQ bits
  8934F#define CHP_DIV1 0x0
  8935F#define CHP_DIV2 0x1
  8936F#define CHP_DIV3 0x2
  8937F#define CHP_DIV4 0x3
  8938F#define CHP_DIV5 0x4
  8939F#define CHP_DIV6 0x5
  8940F#define CHP_DIV7 0x6
  8941F#define CHP_DIV8 0x7
  8942F// CHPDUTY bits
  8943F#define CHP1_8TH 0x0
  8944F#define CHP2_8TH 0x1
  8945F#define CHP3_8TH 0x2
  8946F#define CHP4_8TH 0x3
  8947F#define CHP5_8TH 0x4
  8948F#define CHP6_8TH 0x5
  8949F#define CHP7_8TH 0x6
  8950F// TZSEL (Trip Zone Select)
  8951F//==========================
  8952F// CBCn and OSHTn bits
  8953F#define TZ_DISABLE 0x0
  8954F#define TZ_ENABLE 0x1
  8955F// TZCTL (Trip Zone Control)
  8956F//==========================
  8957F// TZA and TZB bits
  8958F#define TZ_HIZ 0x0
  8959F#define TZ_FORCE_HI 0x1
  8960F#define TZ_FORCE_LO 0x2
  8961F#define TZ_NO_CHANGE 0x3
  8962F// ETSEL (Event Trigger Select)
  8963F//=============================
  8964F#define ET_CTR_ZERO 0x1
  8965F#define ET_CTR_PRD 0x2
  8966F#define ET_CTRU_CMPA 0x4
  8967F#define ET_CTRD_CMPA 0x5
  8968F#define ET_CTRU_CMPB 0x6
  8969F#define ET_CTRD_CMPB 0x7
  8970F// ETPS (Event Trigger Pre-scale)
  8971F//===============================
  8972F// INTPRD, SOCAPRD, SOCBPRD bits
  8973F#define ET_DISABLE 0x0
  8974F#define ET_1ST 0x1
  8975F#define ET_2ND 0x2
  8976F#define ET_3RD 0x3
  8977F//--------------------------------
  8978F// HRPWM (High Resolution PWM)
  8979F//================================
  8980F// HRCNFG
  8981F#define HR_Disable 0x0
  8982F#define HR_REP 0x1
  8983F#define HR_FEP 0x2
  8984F#define HR_BEP 0x3
  8985F#define HR_CMP 0x0
  8986F#define HR_PHS 0x1
  8987F#define HR_CTR_ZERO 0x0
  8988F#define HR_CTR_PRD 0x1
  8989F       /* extern "C" */
  8990F       // - end of DSP2833x_EPWM_DEFINES_H
  8991F//===========================================================================
  8992F// End of file.
  8993F//===========================================================================
  8994F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ePwm_defines.h*/
  8995F/*   CLOSE_FILE Include File */
  8996F 
  8997F             // Macros used for PWM examples.
  8998F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Dma_defines.h */
  8999F// TI File $Revision: /main/2 $
  9000F// Checkin $Date: August 14, 2007 16:32:29 $
  9001F//###########################################################################
  9002F//
  9003F// FILE: DSP2833x_Dma_defines.h
  9004F//
  9005F// TITLE: #defines used in DMA examples
  9006F//
  9007F//###########################################################################
  9008F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  9009F// $Release Date: August 4, 2009 $
  9010F//###########################################################################
  9011F#ifndef DSP2833x_DMA_DEFINES_H
  9012F#define DSP2833x_DMA_DEFINES_H
  9013F// MODE
  9014F//==========================
  9015F// PERINTSEL bits
  9016F#define DMA_SEQ1INT 1
  9017F#define DMA_SEQ2INT 2
  9018F#define DMA_XINT1 3
  9019F#define DMA_XINT2 4
  9020F#define DMA_XINT3 5
  9021F#define DMA_XINT4 6
  9022F#define DMA_XINT5 7
  9023F#define DMA_XINT6 8
  9024F#define DMA_XINT7 9
  9025F#define DMA_XINT13 10
  9026F#define DMA_TINT0 11
  9027F#define DMA_TINT1 12
  9028F#define DMA_TINT2 13
  9029F#define DMA_MXEVTA 14
  9030F#define DMA_MREVTA 15
  9031F#define DMA_MXREVTB 16
  9032F#define DMA_MREVTB 17
  9033F// OVERINTE bit
  9034F#define OVRFLOW_DISABLE 0x0
  9035F#define OVEFLOW_ENABLE 0x1
  9036F// PERINTE bit
  9037F#define PERINT_DISABLE 0x0
  9038F#define PERINT_ENABLE 0x1
  9039F// CHINTMODE bits
  9040F#define CHINT_BEGIN 0x0
  9041F#define CHINT_END 0x1
  9042F// ONESHOT bits
  9043F#define ONESHOT_DISABLE 0x0
  9044F#define ONESHOT_ENABLE 0x1
  9045F// CONTINOUS bit
  9046F#define CONT_DISABLE 0x0
  9047F#define CONT_ENABLE 0x1
  9048F// SYNCE bit
  9049F#define SYNC_DISABLE 0x0
  9050F#define SYNC_ENABLE 0x1
  9051F// SYNCSEL bit
  9052F#define SYNC_SRC 0x0
  9053F#define SYNC_DST 0x1
  9054F// DATASIZE bit
  9055F#define SIXTEEN_BIT 0x0
  9056F#define THIRTYTWO_BIT 0x1
  9057F// CHINTE bit
  9058F#define CHINT_DISABLE 0x0
  9059F#define CHINT_ENABLE 0x1
  9060F       /* extern "C" */
  9061F       // - end of DSP2833x_EPWM_DEFINES_H
  9062F//===========================================================================
  9063F// End of file.
  9064F//===========================================================================
  9065F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Dma_defines.h*/
  9066F/*   CLOSE_FILE Include File */
  9067F 
  9068F              // Macros used for DMA examples.
  9069F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_I2C_defines.h */
  9070F// TI File $Revision: /main/2 $
  9071F// Checkin $Date: April 16, 2008 17:16:47 $
  9072F//###########################################################################
  9073F//
  9074F// FILE:        DSP2833x_I2cExample.h
  9075F//
  9076F// TITLE:       2833x I2C Example Code Definitions.
  9077F//
  9078F//###########################################################################
  9079F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  9080F// $Release Date: August 4, 2009 $
  9081F//###########################################################################
  9082F#ifndef DSP2833x_I2C_DEFINES_H
  9083F#define DSP2833x_I2C_DEFINES_H
  9084F//--------------------------------------------
  9085F// Defines
  9086F//--------------------------------------------
  9087F// Error Messages
  9088F#define I2C_ERROR 0xFFFF
  9089F#define I2C_ARB_LOST_ERROR 0x0001
  9090F#define I2C_NACK_ERROR 0x0002
  9091F#define I2C_BUS_BUSY_ERROR 0x1000
  9092F#define I2C_STP_NOT_READY_ERROR 0x5555
  9093F#define I2C_NO_FLAGS 0xAAAA
  9094F#define I2C_SUCCESS 0x0000
  9095F// Clear Status Flags
  9096F#define I2C_CLR_AL_BIT 0x0001
  9097F#define I2C_CLR_NACK_BIT 0x0002
  9098F#define I2C_CLR_ARDY_BIT 0x0004
  9099F#define I2C_CLR_RRDY_BIT 0x0008
  9100F#define I2C_CLR_SCD_BIT 0x0020
  9101F// Interrupt Source Messages
  9102F#define I2C_NO_ISRC 0x0000
  9103F#define I2C_ARB_ISRC 0x0001
  9104F#define I2C_NACK_ISRC 0x0002
  9105F#define I2C_ARDY_ISRC 0x0003
  9106F#define I2C_RX_ISRC 0x0004
  9107F#define I2C_TX_ISRC 0x0005
  9108F#define I2C_SCD_ISRC 0x0006
  9109F#define I2C_AAS_ISRC 0x0007
  9110F// I2CMSG structure defines
  9111F#define I2C_NO_STOP 0
  9112F#define I2C_YES_STOP 1
  9113F#define I2C_RECEIVE 0
  9114F#define I2C_TRANSMIT 1
  9115F#define I2C_MAX_BUFFER_SIZE 16
  9116F// I2C Slave State defines
  9117F#define I2C_NOTSLAVE 0
  9118F#define I2C_ADDR_AS_SLAVE 1
  9119F#define I2C_ST_MSG_READY 2
  9120F// I2C Slave Receiver messages defines
  9121F#define I2C_SND_MSG1 1
  9122F#define I2C_SND_MSG2 2
  9123F// I2C State defines
  9124F#define I2C_IDLE 0
  9125F#define I2C_SLAVE_RECEIVER 1
  9126F#define I2C_SLAVE_TRANSMITTER 2
  9127F#define I2C_MASTER_RECEIVER 3
  9128F#define I2C_MASTER_TRANSMITTER 4
  9129F// I2C Message Commands for I2CMSG struct
  9130F#define I2C_MSGSTAT_INACTIVE 0x0000
  9131F#define I2C_MSGSTAT_SEND_WITHSTOP 0x0010
  9132F#define I2C_MSGSTAT_WRITE_BUSY 0x0011
  9133F#define I2C_MSGSTAT_SEND_NOSTOP 0x0020
  9134F#define I2C_MSGSTAT_SEND_NOSTOP_BUSY 0x0021
  9135F#define I2C_MSGSTAT_RESTART 0x0022
  9136F#define I2C_MSGSTAT_READ_BUSY 0x0023
  9137F// Generic defines
  9138F#define I2C_TRUE 1
  9139F#define I2C_FALSE 0
  9140F#define I2C_YES 1
  9141F#define I2C_NO 0
  9142F#define I2C_DUMMY_BYTE 0
  9143F//--------------------------------------------
  9144F// Structures
  9145F//--------------------------------------------
  9146F// I2C Message Structure
  9147F
  9148Fstruct I2CMSG
  9149F{
  9150F  Uint16 MsgStatus ;
  9151F                         // Word stating what state msg is in:
  9152F               // I2C_MSGCMD_INACTIVE = do not send msg
  9153F               // I2C_MSGCMD_BUSY = msg start has been sent,
  9154F               // awaiting stop
  9155F               // I2C_MSGCMD_SEND_WITHSTOP = command to send
  9156F               // master trans msg complete with a stop bit
  9157F               // I2C_MSGCMD_SEND_NOSTOP = command to send
  9158F               // master trans msg without the stop bit
  9159F               // I2C_MSGCMD_RESTART = command to send a restart
  9160F               // as a master receiver with a stop bit
  9161F  Uint16 SlaveAddress ;  // I2C address of slave msg is intended for
  9162F  Uint16 NumOfBytes ;    // Num of valid bytes in (or to be put in MsgBuffer)
  9163F  Uint16 MemoryHighAddr ;        // EEPROM address of data associated with msg (high byte)
  9164F  Uint16 MemoryLowAddr ; // EEPROM address of data associated with msg (low byte)
  9165F  Uint16 MsgBuffer [ 16 ] ;
  9166F                                                // Array holding msg data - max that
  9167F                     // MAX_BUFFER_SIZE can be is 16 due to
  9168F                     // the FIFO's
  9169F} ;
  9170F       // end of DSP2833x_I2C_DEFINES_H definition
  9171F//===========================================================================
  9172F// End of file.
  9173F//===========================================================================
  9174F 
  9175F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_I2C_defines.h*/
  9176F/*   CLOSE_FILE Include File */
  9177F 
  9178F              // Macros used for I2C examples.
  9179F#define PARTNO_28335 0xEF
  9180F#define PARTNO_28334 0xEE
  9181F#define PARTNO_28332 0xED
  9182F#define PARTNO_28235 0xE8
  9183F#define PARTNO_28234 0xE7
  9184F#define PARTNO_28232 0xE6
  9185F// Include files not used with DSP/BIOS
  9186F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DefaultISR.h */
  9187F// TI File $Revision: /main/1 $
  9188F// Checkin $Date: August 18, 2006 13:45:37 $
  9189F//###########################################################################
  9190F//
  9191F// FILE: DSP2833x_DefaultIsr.h
  9192F//
  9193F// TITLE: DSP2833x Devices Default Interrupt Service Routines Definitions.
  9194F//
  9195F//###########################################################################
  9196F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  9197F// $Release Date: August 4, 2009 $
  9198F//###########################################################################
  9199F#ifndef DSP2833x_DEFAULT_ISR_H
  9200F#define DSP2833x_DEFAULT_ISR_H
  9201F//---------------------------------------------------------------------------
  9202F// Default Interrupt Service Routine Declarations:
  9203F//
  9204F// The following function prototypes are for the
  9205F// default ISR routines used with the default PIE vector table.
  9206F// This default vector table is found in the DSP2833x_PieVect.h
  9207F// file.
  9208F//
  9209F// Non-Peripheral Interrupts:
  9210F
  9211Finterrupt void
  9212F  INT13_ISR ( void ) ;          // XINT13 or CPU-Timer 1
  9213T  interrupt void
  9214F  INT14_ISR ( void ) ;          // CPU-Timer2
  9215T  interrupt void
  9216F  DATALOG_ISR ( void ) ;          // Datalogging interrupt
  9217T  interrupt void
  9218F  RTOSINT_ISR ( void ) ;          // RTOS interrupt
  9219T  interrupt void
  9220F  EMUINT_ISR ( void ) ;          // Emulation interrupt
  9221T  interrupt void
  9222F  NMI_ISR ( void ) ;          // Non-maskable interrupt
  9223T  interrupt void
  9224F  ILLEGAL_ISR ( void ) ;          // Illegal operation TRAP
  9225F// Group 1 PIE Interrupt Service Routines:
  9226T  interrupt void
  9227F  SEQ1INT_ISR ( void ) ;          // ADC Sequencer 1 ISR
  9228T  interrupt void
  9229F  SEQ2INT_ISR ( void ) ;          // ADC Sequencer 2 ISR
  9230T  interrupt void
  9231F  XINT1_ISR ( void ) ;          // External interrupt 1
  9232T  interrupt void
  9233F  XINT2_ISR ( void ) ;          // External interrupt 2
  9234T  interrupt void
  9235F  ADCINT_ISR ( void ) ;          // ADC
  9236T  interrupt void
  9237F  TINT0_ISR ( void ) ;          // Timer 0
  9238T  interrupt void
  9239F  WAKEINT_ISR ( void ) ;          // WD
  9240F// Group 6 PIE Interrupt Service Routines:
  9241T  interrupt void
  9242F  SPIRXINTA_ISR ( void ) ;          // SPI-A
  9243T  interrupt void
  9244F  SPITXINTA_ISR ( void ) ;          // SPI-A
  9245T  interrupt void
  9246F  MRINTA_ISR ( void ) ;          // McBSP-A
  9247T  interrupt void
  9248F  MXINTA_ISR ( void ) ;          // McBSP-A
  9249T  interrupt void
  9250F  MRINTB_ISR ( void ) ;          // McBSP-B
  9251T  interrupt void
  9252F  MXINTB_ISR ( void ) ;          // McBSP-B
  9253F// Group 7 PIE Interrupt Service Routines:
  9254T  interrupt void
  9255F  DINTCH1_ISR ( void ) ;          // DMA-Channel 1
  9256T  interrupt void
  9257F  DINTCH2_ISR ( void ) ;          // DMA-Channel 2
  9258T  interrupt void
  9259F  DINTCH3_ISR ( void ) ;          // DMA-Channel 3
  9260T  interrupt void
  9261F  DINTCH4_ISR ( void ) ;          // DMA-Channel 4
  9262T  interrupt void
  9263F  DINTCH5_ISR ( void ) ;          // DMA-Channel 5
  9264T  interrupt void
  9265F  DINTCH6_ISR ( void ) ;          // DMA-Channel 6
  9266F// Group 8 PIE Interrupt Service Routines:
  9267T  interrupt void
  9268F  I2CINT1A_ISR ( void ) ;          // I2C-A
  9269T  interrupt void
  9270F  I2CINT2A_ISR ( void ) ;          // I2C-A
  9271T  interrupt void
  9272F  SCIRXINTC_ISR ( void ) ;          // SCI-C
  9273T  interrupt void
  9274F  SCITXINTC_ISR ( void ) ;          // SCI-C
  9275F// Group 9 PIE Interrupt Service Routines:
  9276T  interrupt void
  9277F  SCIRXINTA_ISR ( void ) ;          // SCI-A
  9278T  interrupt void
  9279F  SCITXINTA_ISR ( void ) ;          // SCI-A
  9280T  interrupt void
  9281F  SCIRXINTB_ISR ( void ) ;          // SCI-B
  9282T  interrupt void
  9283F  SCITXINTB_ISR ( void ) ;          // SCI-B
  9284T  interrupt void
  9285F  ECAN0INTA_ISR ( void ) ;          // eCAN-A
  9286T  interrupt void
  9287F  ECAN1INTA_ISR ( void ) ;          // eCAN-A
  9288T  interrupt void
  9289F  ECAN0INTB_ISR ( void ) ;          // eCAN-B
  9290T  interrupt void
  9291F  ECAN1INTB_ISR ( void ) ;
  9292F                                    // eCAN-B
  9293F// Group 10 PIE Interrupt Service Routines:
  9294F// Group 11 PIE Interrupt Service Routines:
  9295F// Group 12 PIE Interrupt Service Routines:
  9296T  interrupt void
  9297F  XINT3_ISR ( void ) ;          // External interrupt 3
  9298T  interrupt void
  9299F  XINT4_ISR ( void ) ;          // External interrupt 4
  9300T  interrupt void
  9301F  XINT5_ISR ( void ) ;          // External interrupt 5
  9302T  interrupt void
  9303F  XINT6_ISR ( void ) ;          // External interrupt 6
  9304T  interrupt void
  9305F  XINT7_ISR ( void ) ;          // External interrupt 7
  9306T  interrupt void
  9307F  LVF_ISR ( void ) ;          // Latched overflow flag
  9308T  interrupt void
  9309F  LUF_ISR ( void ) ;          // Latched underflow flag
  9310F// Catch-all for Reserved Locations For testing purposes:
  9311T  interrupt void
  9312F  PIE_RESERVED ( void ) ;          // Reserved for test
  9313T  interrupt void
  9314F  rsvd_ISR ( void ) ;          // for test
  9315T  interrupt void
  9316F  INT_NOTUSED_ISR ( void ) ;
  9317F                                      // for unused interrupts
  9318F       /* extern "C" */
  9319F       // end of DSP2833x_DEFAULT_ISR_H definition
  9320F//===========================================================================
  9321F// End of file.
  9322F//===========================================================================
  9323F 
  9324F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DefaultISR.h*/
  9325F/*   CLOSE_FILE Include File */
  9326F 
  9327F// DO NOT MODIFY THIS LINE.
  9328F#define DELAY_US( A ) DSP28x_usDelay ( ( ( ( ( long double ) A * 1000.0L ) / ( long double ) CPU_RATE ) - 9.0L ) / 5.0L )
  9329F       /* extern "C" */
  9330F       // end of DSP2833x_EXAMPLES_H definition
  9331F//===========================================================================
  9332F// End of file.
  9333F//===========================================================================
  9334F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Examples.h*/
  9335F/*   CLOSE_FILE Include File */
  9336F 
  9337F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_gps.h */
  9338F/******************************************************************************
  9339F* FILENAME:
  9340F*
  9341F* DESCRIPTION:
  9342F* Function prototypes of ...
  9343F*
  9344F* FUNCTIONS:
  9345F* void xxx
  9346F* void xxx
  9347F*
  9348F* VERSION DATE WHO DETAIL
  9349F* 1.0 05 Set 2011 Rogerio Lima Start-up coding.
  9350F* Plínio Pereira
  9351F* -----------------------------------------------------------------------------
  9352F* 2.0 30 Aug 2014 Rogerio Lima Improving code quality rewriting the
  9353F* code and correcting errors.
  9354F******************************************************************************/
  9355F#ifndef DSP_GPS_H
  9356F#define DSP_GPS_H
  9357F#include <stdlib.h>
  9358F#include <string.h>
  9359F#include <stdio.h>
  9360F#define NULL 0
  9361F
  9362Ftypedef
  9363F  struct
  9364F  {
  9365F    int lat_deg ;
  9366F    double lat_min ;
  9367F    uint8_t lat_sector ;
  9368F    int lon_deg ;
  9369F    double lon_min ;
  9370F    uint8_t lon_sector ;
  9371F    double altitude ;
  9372F    double speed ;
  9373F    uint8_t speed_unit ;
  9374F    double course ;
  9375F    uint8_t course_type ;
  9376F    uint8_t hour ;
  9377F    uint8_t min ;
  9378F    float sec ;
  9379F    uint8_t position_fix_status ;
  9380F    uint8_t nosv ;
  9381F    float hdop ;
  9382F    int gps_new_message ;
  9383F  } gps_data_buffer_t ;
  9384F
  9385Ftypedef
  9386F  enum
  9387F  {
  9388F    GGA ,
  9389F    GSA ,
  9390F    GSV ,
  9391F    RMC ,
  9392F    VTG ,
  9393F    GLL ,
  9394F    ZDA
  9395F  } NMEA_type_t ;
  9396F// PROTOTYPES
  9397F
  9398Fuint8_t
  9399T  get_line (
  9400F  uint8_t * line ,
  9401F  uint8_t * msg_in ) ;
  9402F
  9403Fvoid
  9404T  translate_msg (
  9405F  uint8_t * line ,
  9406F  gps_data_buffer_t * gps_data ) ;
  9407F
  9408FNMEA_type_t
  9409T  get_NMEA_type (
  9410F  uint8_t * str ) ;
  9411F
  9412Fvoid
  9413T  translate_GGA (
  9414F  uint8_t * line ,
  9415F  gps_data_buffer_t * gps_data ) ;
  9416F
  9417Fvoid
  9418T  translate_GLL (
  9419F  uint8_t * line ,
  9420F  gps_data_buffer_t * gps_data ) ;
  9421F
  9422Fvoid
  9423T  translate_VTG (
  9424F  uint8_t * line ,
  9425F  gps_data_buffer_t * gps_data ) ;
  9426F
  9427Fvoid
  9428T  translate_GSA (
  9429F  uint8_t * line ,
  9430F  gps_data_buffer_t * gps_data ) ;
  9431F
  9432Fvoid
  9433T  translate_GSV (
  9434F  uint8_t * line ,
  9435F  gps_data_buffer_t * gps_data ) ;
  9436F
  9437Fvoid
  9438T  translate_RMC (
  9439F  uint8_t * line ,
  9440F  gps_data_buffer_t * gps_data ) ;
  9441F
  9442Fvoid
  9443T  translate_ZDA (
  9444F  uint8_t * line ,
  9445F  gps_data_buffer_t * gps_data ) ;
  9446F
  9447Fvoid
  9448T  print_serial_gps (
  9449F  gps_data_buffer_t * gps_data ) ;
  9450F
  9451Fvoid
  9452T  strcpy_len (
  9453F  uint8_t * destination ,
  9454F  uint8_t * source ,
  9455F  unsigned start ,
  9456F  unsigned lenght ) ;
  9457F
  9458Fdouble
  9459T  CvtStF (
  9460F  uint8_t * str ) ;
  9461F
  9462Fint
  9463T  str_split (
  9464F  uint8_t * str ,
  9465F  int start ,
  9466F  uint8_t c ,
  9467F  uint8_t * flag ) ;
  9468F
  9469Fuint8_t
  9470T  Process_GPS (
  9471F  gps_data_buffer_t * gps_dat ) ;
  9472F
  9473Fvoid
  9474F  Init_GPS() ;
  9475F
  9476Fuint8_t
  9477F  Read_Byte_RS232() ;
  9478F
  9479Fvoid
  9480T  Transmit_Byte_RS232 (
  9481F  uint8_t * byte ) ;
  9482F
  9483Fvoid
  9484T  Wait_for_uint8_t_RS232 (
  9485F  uint8_t c ) ;
  9486F// Read one messange until a new line is fouded.
  9487F
  9488Fint
  9489T  RS232_gets (
  9490F  uint8_t * line ,
  9491F  int max ) ;
  9492F       // GPS_H
  9493F 
  9494F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_gps.h*/
  9495F/*   CLOSE_FILE Include File */
  9496F 
  9497F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\dsp_isr.h */
  9498F#ifndef DSP_ISR_H
  9499F#define DSP_ISR_H
  9500F/* SCI-A Transmit Interrupt Service */
  9501F
  9502Finterrupt void
  9503F  SCIA_TX_isr ( void ) ;
  9504F  /* SCI-A Receive Interrupt Service */
  9505T  interrupt void
  9506F  SCIA_RX_isr ( void ) ;
  9507F       // DSP_ISR_H
  9508F 
  9509F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\dsp_isr.h*/
  9510F/*   CLOSE_FILE Include File */
  9511F 
  9512F/* LDRA REMOVE #include "dsp_quat.h" */
  9513F/* LDRA REMOVE #include "dsp_matrix.h" */
  9514F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_i2c.h */
  9515F/******************************************************************************
  9516F* FILENAME: dsp_i2c.h
  9517F*
  9518F* DESCRIPTION:
  9519F* High-level functions for I2C module..
  9520F*
  9521F* FUNCTIONS:
  9522F* uint8_t i2cBatchWrite ( uint8_t, uint8_t*, uint8_t)
  9523F* uint8_t i2cBatchRead ( uint8_t, uint8_t, uint8_t*, uint8_t)
  9524F* void I2C_get_data (I2C_RawSensorData*)
  9525F* void I2C_init_sensors (void)
  9526F*
  9527F* VERSION DATE WHO DETAIL
  9528F* 1.0 05 Set 2011 Rogerio Lima Start-up coding.
  9529F* Plínio Pereira
  9530F* -----------------------------------------------------------------------------
  9531F* 2.0 30 Aug 2014 Rogerio Lima Improving code quality rewriting the
  9532F* code and correcting errors.
  9533F******************************************************************************/
  9534F/*
  9535F * SECTION ORDER
  9536F * 1. Comment block
  9537F * 2. Include statements
  9538F * 3. Definitions: data type, constants, macros
  9539F * 4. Static data declarations
  9540F * 5. Private functions prototypes
  9541F * 6. Public function bodies
  9542F * 7. Private function bodies
  9543F *
  9544F */
  9545F#ifndef DSP_I2C_H
  9546F#define DSP_I2C_H
  9547F#define I2C_TX_BUFSIZE 16U
  9548F#define I2C_RX_BUFSIZE 24U
  9549F#define I2C_ACK_ATTEMPTS 5000U
  9550F#define MAX_RETRIES 10000U
  9551F#define I2C_TRANSMITTER I2C_Direction_Transmitter
  9552F#define I2C_RECEIVER I2C_Direction_Receiver
  9553F#define I2C_BIT_SET 1U
  9554F#define I2C_BIT_CLEAR 0U
  9555F#define I2C_ACK_DISABLE 1U
  9556F#define I2C_ACK_ENABLE 0U
  9557F#define I2C_SEND_START 1U
  9558F#define I2C_NO_START 0U
  9559F#define I2C_SEND_STOP 1U
  9560F#define I2C_NO_STOP 0U
  9561F#define I2C_SCL_PIN GPIO_Pin_6
  9562F#define I2C_SDA_PIN GPIO_Pin_7
  9563F#define I2C_PORT GPIOB
  9564F#define I2C_ARBITRATION_LOST 10U
  9565F#define I2C_NACK 1U
  9566F#define I2C_TIMEOUT 11U
  9567F/*------------------------------------------------------------------------------
  9568F F28335 Register I2CMDR
  9569F------------------------------------------------------------------------------*/
  9570F// BC Bits
  9571F#define I2C_BC_8BITS 0x0000
  9572F#define I2C_BC_1BITS 0x0001
  9573F#define I2C_BC_2BITS 0x0002
  9574F#define I2C_BC_3BITS 0x0003
  9575F#define I2C_BC_4BITS 0x0004
  9576F#define I2C_BC_5BITS 0x0005
  9577F#define I2C_BC_6BITS 0x0006
  9578F#define I2C_BC_7BITS 0x0007
  9579F// FDF
  9580F#define I2C_NO_FREE_DATA_FORMAT 0x0000
  9581F#define I2C_FREE_DATA_FORMAT 0x0008
  9582F// STB
  9583F#define I2C_NO_START_BYTE 0x0000
  9584F#define I2C_START_BYTE 0x0010
  9585F// IRS
  9586F#define I2C_RESET 0x0000
  9587F#define I2C_ENABLED 0x0020
  9588F// DLB
  9589F#define I2C_NO_LOOPBACK 0x0000
  9590F#define I2C_LOOPBACK 0x0040
  9591F// RM
  9592F#define I2C_NO_REPEAT 0x0000
  9593F#define I2C_REPEAT 0x0080
  9594F/* Defines the length of time the i2c software will wait for clock stretching *
  9595F * the number of attempts simply corresponds with the number of iterations *
  9596F * through a for loop. */
  9597F#define I2C_MAX_ATTEMPTS 1000
  9598F/* Macro definitions */
  9599F#define I2C_DELAY_INIT( ) int16_t _counter ;
  9600F#define I2C_DELAY( ) for ( _counter = 0 ; _counter < 5 ; _counter ++ ) { asm volatile("mov r0, r0")   ; }
  9601F#define I2C_DELAY_SHORT( ) asm volatile("mov r0, r0")
  9602F/* Structure for holding raw sensor data from I2C bus
  9603Ftypedef struct __I2CData {
  9604F Gyrometers
  9605F int16_t W_x;
  9606F int16_t W_y;
  9607F int16_t W_z;
  9608F int16_t new_gyro_data;
  9609F Accelerometers
  9610F int16_t A_x;
  9611F int16_t A_y;
  9612F int16_t A_z;
  9613F Flag specifies whether there is new accel data in the sensor data structure
  9614F int16_t new_accel_data;
  9615F Magnetometers
  9616F int16_t H_x;
  9617F int16_t H_y;
  9618F int16_t H_z;
  9619F Flag specifies whether there is new magnetometer data in the sensor data structure
  9620F int16_t new_mag_data;
  9621F 
  9622F Rate gyro temperature measurement
  9623F int16_t gyro_temperature;
  9624F Differential pressure
  9625F int16_t diff_press;
  9626F Flag specifies whether there is new differential pressure data in the sensor data structure
  9627F int16_t new_diff_press_data;
  9628F Absolute pressure
  9629F int16_t abs_press;
  9630F Flag specifies whether there is new differential pressure data in the sensor data structure
  9631F int16_t new_abs_press_data;
  9632F} I2C_RawSensorData;*/
  9633F// Prototype statements for functions found within this file.
  9634F
  9635Fvoid
  9636F  Gpio_select_I2C ( void ) ;
  9637F// Software-emulated i2c function calls. Use these ones.
  9638F
  9639Fuint8_t
  9640T  i2cBatchWrite (
  9641F  const uint8_t address7 ,
  9642F  uint8_t * txBuffer ,
  9643F  const uint8_t bytesToWrite ) ;
  9644F
  9645Fuint8_t
  9646T  i2cBatchRead (
  9647F  const uint8_t address7 ,
  9648F  const uint8_t device_start_address ,
  9649F  uint8_t * rxBuffer ,
  9650F  const uint8_t bytesToRead ) ;
  9651F
  9652Fvoid
  9653T  i2c_get_data (
  9654F  sensor_data_raw_t * raw_data ) ;
  9655F
  9656Fvoid
  9657F  i2c_init_sensors ( void ) ;
  9658F 
  9659F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_i2c.h*/
  9660F/*   CLOSE_FILE Include File */
  9661F 
  9662F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_ekf.h */
  9663F//############################################################################
  9664F//
  9665F// File: EKF_Funcs.h
  9666F// Version: 0.1
  9667F//
  9668F// Description: Preprocessor definitions and function declarations for EKF
  9669F// calculations.
  9670F//
  9671F//############################################################################
  9672F// Author: Rogério Lima
  9673F// Release Date: July 2012
  9674F//############################################################################
  9675F#ifndef DSP_EKF_H
  9676F#define DSP_EKF_H
  9677F/* Function prototypes */
  9678F
  9679Fvoid
  9680T  ekf_init (
  9681F  ahrs_states_t * estimated_states ) ;
  9682F  /* EKF prediction functions */
  9683F
  9684Fvoid
  9685T  ekf_prediction (
  9686F  ahrs_states_t * estimated_states ,
  9687F  sensor_data_scaled_t * scaled_data ) ;
  9688F
  9689Fvoid
  9690T  ekf_stm (
  9691F  ahrs_states_t * estimated_states ,
  9692F  fMatrix * stm ,
  9693F  sensor_data_scaled_t * scaled_data ) ;
  9694F
  9695Fvoid
  9696T  ekf_apriori_covariance (
  9697F  ahrs_states_t * estimated_states ,
  9698F  fMatrix * F ) ;
  9699F
  9700Fvoid
  9701T  ekf_apriori_estimate (
  9702F  ahrs_states_t * estimated_states ,
  9703F  sensor_data_scaled_t * scaled_data ) ;
  9704F  /* EKF correction functions */
  9705F
  9706Fvoid
  9707T  ekf_correction (
  9708F  ahrs_states_t * estimated_states ,
  9709F  sensor_data_scaled_t * scaled_data ) ;
  9710F
  9711Fvoid
  9712T  ekf_h_matrix (
  9713F  ahrs_states_t * estimated_states ,
  9714F  fMatrix * H ) ;
  9715F  /* General functions */
  9716F
  9717Fvoid
  9718T  ekf_estimate_states (
  9719F  ahrs_states_t * states ,
  9720F  sensor_data_scaled_t * scaled_data ) ;
  9721F// General functions
  9722F//void EKF_Init( ahrs_states_t* estimated_states );
  9723F//void EKF_InitFromSensors( ahrs_states_t* estimated_states, sensor_data_raw_t* sensor_data );
  9724F//void EKF_EstimateStates( ahrs_states_t* estimated_states, sensor_data_raw_t* sensor_data );
  9725F//void EKF_Predict( ahrs_states_t* estimated_states, sensor_data_raw_t* sensor_data );
  9726F//void EKF_Update( ahrs_states_t* estimated_states, sensor_data_raw_t* sensor_data );
  9727F//void EKF_Correction( fMatrix* C, float sensor_data, float sensor_hat, float sensor_covariance, ahrs_states_t* estimated_states, int sensor_type );
  9728F/* Digital filtering prototype functions */
  9729F
  9730Fvoid
  9731T  lpf_butterworth_init (
  9732F  digital_filter_data_t * filtered_dat ) ;
  9733F
  9734Fvoid
  9735T  lpf_butterworth (
  9736F  sensor_data_scaled_t * input_scaled_data ,
  9737F  digital_filter_data_t * filtered_dat ) ;
  9738F 
  9739F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_ekf.h*/
  9740F/*   CLOSE_FILE Include File */
  9741F 
  9742F#include <string.h>
  9743F/* Flash functions */
  9744F
  9745Fextern Uint16
  9746F  RamfuncsLoadStart ;
  9747F
  9748Fextern Uint16
  9749F  RamfuncsLoadEnd ;
  9750F
  9751Fextern Uint16
  9752F  RamfuncsRunStart ;
  9753F  /* Prototype statements for functions found within this file. */
  9754F
  9755Fvoid
  9756F  escalonador ( void ) ;
  9757F
  9758Fvoid
  9759F  toggle_led ( void ) ;
  9760F  /* Global variables */
  9761F
  9762Fahrs_states_t
  9763F  g_states ;
  9764F
  9765Fsensor_data_raw_t
  9766F  g_sensor_data_raw ;
  9767F
  9768Fsensor_data_scaled_t
  9769F  g_sensor_data_scaled ;
  9770F
  9771Fdigital_filter_data_t
  9772F  filtered_data ;
  9773F//struct gps_data_translated gps_dat;
  9774F//struct gps_data_translated gps_dat;
  9775F//unsigned char g_sciTxBuf[68];
  9776F//float gps_speed, gps_heading;
  9777F// Global Variables
  9778F//Uint32 Timer0_count_before=0, Timer0_count_after=0, diff=0; // Timer0 counter
  9779F//Uint32 idMessage = 0;
  9780F//###########################################################################
  9781F// main code
  9782F//###########################################################################
  9783F
  9784Fvoid
  9785T  main ( void )
  9786F  {
  9787T    InitSysCtrl () ;// Basic Core Initialization
  9788F                    // SYSCLK=150MHz, HISPCLK=75MHz, LSPCLK=37.5MHz
  9789Fasm (" EALLOW")
  9790F;
  9791T    SysCtrlRegs.WDCR = 0x00E8 ;       // Re-enable the watchdog
  9792Fasm (" EDIS")
  9793F;            // 0x00E8 to disable the Watchdog , Prescaler = 1
  9794F                                       // 0x00AF to NOT disable the Watchdog, Prescaler = 64
  9795T    memcpy ( & RamfuncsRunStart , & RamfuncsLoadStart , & RamfuncsLoadEnd - & RamfuncsLoadStart ) ;
  9796T    InitFlash () ;
  9797F                 // call InitFlash in RAM (SARAM - L0)
  9798T    gpio_select () ;// GPIO9, GPIO11, GPIO34 and GPIO49 as output
  9799F                    // to 4 LEDs at Peripheral Explorer
  9800T    InitPieCtrl () ;
  9801F                   // default status of PIE; in DSP2833x_PieCtrl.c
  9802T    InitPieVectTable () ;// init PIE vector table; in DSP2833x_PieVect.c
  9803F    // re-map PIE - entry for SCI-A-TX and SCI-A-RX
  9804Fasm (" EALLOW")
  9805F;
  9806T    PieVectTable.SCITXINTA = & SCIA_TX_isr ;
  9807T    PieVectTable.SCIRXINTA = & SCIA_RX_isr ;
  9808T    PieVectTable.SPIRXINTA = & SPI_RxFifoIsr ;
  9809T    PieVectTable.SPITXINTA = & SPI_TxFifoIsr ;
  9810F    //PieVectTable.I2CINT1A = &I2C_basic_isr;
  9811F    //PieVectTable.I2CINT2A = &I2C_fifo_isr;
  9812T    PieVectTable.XINT1 = & spi_cs_isr ;
  9813T    PieVectTable.XINT2 = & timing_isr ;
  9814T    PieVectTable.TINT0 = & cpu_timer0_isr ;
  9815T    PieVectTable.XINT13 = & cpu_timer1_isr ;
  9816T    PieVectTable.EPWM1_INT = & ePWM1A_compare_isr ;
  9817Fasm (" EDIS")
  9818F;
  9819T    InitCpuTimers () ;/* basic setup CPU Timer0, 1 and 2 */
  9820T    setup_epwm1a () ;/* Basic ePWM1A setup */
  9821T    scia_init () ;   /* Initialize SCI */
  9822T    spia_init () ;   /* Initialize SPI */
  9823T    i2ca_init () ;/* Initialize I2C */
  9824T    ConfigCpuTimer ( & CpuTimer0 , 150 , 20100 ) ;
  9825F                                            // CPU - Timer0 at 20.1 milliseconds
  9826T    ConfigCpuTimer ( & CpuTimer1 , 150 , 5000 ) ;// CPU - Timer1 at 5 milliseconds
  9827F    // Enable SPI-A RX Interrupt Group6 interupt 1
  9828T    PieCtrlRegs.PIEIER6.bit.INTx1 = 1U ;
  9829F    // Enable SPI-A TX Interrupt Group6 interupt 2
  9830T    PieCtrlRegs.PIEIER6.bit.INTx2 = 1U ;
  9831F    // Enable SCI-A RX Interrupt Group9 interupt 1
  9832T    PieCtrlRegs.PIEIER9.bit.INTx1 = 1U ;
  9833F    // Enable SCI-A TX Interrupt Group9 interupt 2
  9834T    PieCtrlRegs.PIEIER9.bit.INTx2 = 1U ;
  9835F    // Enable I2C-basic Interrupt Group8 interupt 1
  9836F    //PieCtrlRegs.PIEIER8.bit.INTx1 = 1U; // i2c - basic
  9837F    // Enable I2C-FIFO Interrupt Group8 interupt 2
  9838F    //PieCtrlRegs.PIEIER8.bit.INTx2 = 1U; // i2c - FIFO
  9839F    // Enable GPIO23-SPI_CS External Interrupt (XINT1) Group1 interupt 4
  9840T    PieCtrlRegs.PIEIER1.bit.INTx4 = 1U ;
  9841F    // Enable GPIO20-Timing External Interrupt (XINT2) Group1 interupt 5
  9842T    PieCtrlRegs.PIEIER1.bit.INTx5 = 1U ;
  9843F    // Enable Timer0 Interrupt Group1 interrupt 7
  9844T    PieCtrlRegs.PIEIER1.bit.INTx7 = 1U ;
  9845F    // Enable EPWM1A INT in the PIE: Group 3 interrupt 1
  9846T    PieCtrlRegs.PIEIER3.bit.INTx1 = 1U ;
  9847F    // External interrupt XINT1 configuration for spi_cs
  9848T    XIntruptRegs.XINT1CR.bit.ENABLE = 1U ;// Enables external interrupt
  9849T    XIntruptRegs.XINT1CR.bit.POLARITY = 3U ;
  9850F                                            // 00 = falling edge (high-to-low transition)
  9851F                                            // 01 = rising edge (low-to-high transition)
  9852F                                            // 10 = falling edge (high-to-low transition)
  9853F                                             // 11 = rising and falling edge
  9854F    // External interrupt XINT2 configuration for timing
  9855T    XIntruptRegs.XINT2CR.bit.ENABLE = 1U ;// Enables external interrupt
  9856T    XIntruptRegs.XINT2CR.bit.POLARITY = 0U ;
  9857F                                            // 00 = falling edge (high-to-low transition)
  9858F                                            // 01 = rising edge (low-to-high transition)
  9859F                                            // 10 = falling edge (high-to-low transition)
  9860F                                            // 11 = rising and falling edge
  9861F    // External interrupt XINT13 configuration for CpuTimer1
  9862Fasm (" EALLOW")
  9863F;
  9864T    XIntruptRegs.XNMICR.bit.ENABLE = 0U ;// Timer1 connected to XINT13
  9865T    XIntruptRegs.XNMICR.bit.SELECT = 0U ; // Disable NMI
  9866Fasm (" EDIS")
  9867F;
  9868F    // Enable group interrupt
  9869T    IER |= 0x01U ;// enable INT1 for /SPISTE and Timing
  9870T    IER |= 0x04U ;// enable INT3 for ePWM1
  9871T    IER |= 0x20U ;// enable INT6 for SPI
  9872F    //IER |= 0x80U; // enable INT8 for I2C
  9873T    IER |= 0x100U ;// enable INT9 for SCIA-TX and SCIA-RX
  9874T    IER |= 0x1000U ;// enable INT13 for CPU-Timer 1
  9875F    // Enable global Interrupts and higher priority real-time debug events:
  9876T    EnableInterrupts () ;
  9877Fasm (" clrc DBGM")
  9878F;            // Enable Global realtime interrupt DBGM
  9879T    CpuTimer0Regs.TCR.bit.TSS = 0U ;// start timer0
  9880T    DSP28x_usDelay (
  9881T    (
  9882T    (
  9883T    (
  9884T    ( long double ) 50000 * 1000.0L ) /
  9885T    ( long double ) 6.667L ) - 9.0L ) /
  9886T    5.0L ) ;
  9887F    // Initializes all I2C sensors
  9888T    i2c_init_sensors () ;
  9889F    // EKF initialization
  9890T    ekf_init ( & g_states ) ;
  9891F    // Low-pass digital filter initialization
  9892F    // LPF_Butter_Init(&filtered_dat);
  9893T
  9894T    escalonador ( ) ;
  9895T  }
  9896F//===========================================================================
  9897F// End of SourceCode.
  9898F//===========================================================================
  9899F
  9900Fvoid
  9901T  escalonador()
  9902F  {
  9903F    extern int
  9904F      GpsMessageReady ;
  9905F    extern unsigned char
  9906F      I2CRead_flag ;
  9907F    extern char
  9908F      SPI_received_ok ;
  9909T    while
  9910T      (
  9911T      1U
  9912T      )
  9913T      {
  9914F// EALLOW;
  9915F// SysCtrlRegs.WDKEY = 0x55U; // Service watchdog #1
  9916F// SysCtrlRegs.WDKEY = 0xAAU; // Service watchdog #2
  9917F// EDIS;
  9918T        if
  9919T          (
  9920T          GpsMessageReady
  9921T          )
  9922T          {
  9923F// Process_GPS(&gps_dat);
  9924T            GpsMessageReady = 0U ;
  9925T          }
  9926T        if
  9927T          (
  9928T          I2CRead_flag
  9929T          )
  9930T          {
  9931T            I2CRead_flag = 0U ;
  9932T            i2c_get_data ( & g_sensor_data_raw ) ;
  9933T            apply_sensors_scale_factor ( & g_sensor_data_scaled , & g_sensor_data_raw ) ;
  9934F            // LPF_Butter( &states, &filtered_dat );
  9935T            ekf_estimate_states ( & g_states , & g_sensor_data_scaled ) ;
  9936F            //SPI_Gumstix_write( &states, &i2c_dat, &gps_dat);
  9937T
  9938T            toggle_led ( ) ;
  9939F            //printf("acc %d %d %d\n", i2c_dat.A_x, i2c_dat.A_y, i2c_dat.A_z);
  9940F            //printf("gyro %d %d %d\n", i2c_dat.W_x, i2c_dat.W_y, i2c_dat.W_z);
  9941F            //printf("mag %d %d %d\n", i2c_dat.H_x, i2c_dat.H_y, i2c_dat.H_z);
  9942F            //printf("attitude %f %f %f\n", states.phi, states.theta, states.psi);
  9943T          }
  9944F          // end-if
  9945F        /*
  9946F        if (SPI_received_ok){
  9947F            SPI_Gumstix_write( &g_states, &g_sensor_data_raw);
  9948F            SPI_Gumstix_read();
  9949F            SPI_received_ok = 0;
  9950F        }
  9951F        */
  9952T      }
  9953F      // end-while
  9954T  }
  9955F  // end-Escalonador
  9956F
  9957Fvoid
  9958T  toggle_led()
  9959F  {
  9960T    GpioDataRegs.GPATOGGLE.bit.GPIO6 = 1U ;
  9961F// while(1U)
  9962F// {
  9963F// GpioDataRegs.GPATOGGLE.bit.GPIO6 = 1U;
  9964F// DELAY_US(50000); // 50 ms
  9965F// }
  9966T  }
  9967F// Timer0_count_before = CpuTimer0Regs.TIM.all;
  9968F// GpioDataRegs.GPATOGGLE.bit.GPIO6 = 1;
  9969F// GpioDataRegs.GPACLEAR.bit.GPIO6 = 1;
  9970F// GpioDataRegs.GPASET.bit.GPIO6 = 1;
  9971F 
