     1F/*
     2FC TESTBED VERSION  : 9.4.4                                                                                               
     3FFILE UNDER TEST  : "F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\src\usr\dsp_i2c.c"            
     4FDATE OF ANALYSIS : Fri Nov 07 10:51:43 2014                          
     5F*/
     6F/******************************************************************************
     7F* FILENAME: dsp_i2c.c
     8F*
     9F* DESCRIPTION:
    10F* High-level functions for I2C module..
    11F*
    12F* FUNCTIONS:
    13F* uint8_t i2cBatchWrite ( uint8_t, uint8_t*, uint8_t)
    14F* uint8_t i2cBatchRead ( uint8_t, uint8_t, uint8_t*, uint8_t)
    15F* void I2C_get_data (I2C_RawSensorData*)
    16F* void I2C_init_sensors (void)
    17F*
    18F* NOTES:
    19F* Functions to implement high-level procedures of the I2C peripheral.
    20F*
    21F* REFERENCES:
    22F* Adapted from CH Robotics.
    23F*
    24F* START DATE: 05 Set 2011
    25F*
    26F* CHANGES :
    27F*
    28F* VERSION DATE WHO DETAIL
    29F* 1.0 05 Set 2011 Rogerio Lima Start-up coding.
    30F* Plínio Pereira
    31F* -----------------------------------------------------------------------------
    32F* 2.0 06 Set 2014 Rogerio Lima Improving code quality rewriting the
    33F* code and correcting errors.
    34F******************************************************************************/
    35F/*
    36F * SECTION ORDER
    37F * 1. Comment block
    38F * 2. Include statements
    39F * 3. Definitions: data type, constants, macros
    40F * 4. Static data declarations
    41F * 5. Private functions prototypes
    42F * 6. Public function bodies
    43F * 7. Private function bodies
    44F *
    45F */
    46F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\my_stdint.h */
    47F/*****************************************************************************/
    48F/* STDINT.H v6.2.0 */
    49F/* */
    50F/* Copyright (c) 2002-2013 Texas Instruments Incorporated */
    51F/* http://www.ti.com/ */
    52F/* */
    53F/* Redistribution and use in source and binary forms, with or without */
    54F/* modification, are permitted provided that the following conditions */
    55F/* are met: */
    56F/* */
    57F/* Redistributions of source code must retain the above copyright */
    58F/* notice, this list of conditions and the following disclaimer. */
    59F/* */
    60F/* Redistributions in binary form must reproduce the above copyright */
    61F/* notice, this list of conditions and the following disclaimer in */
    62F/* the documentation and/or other materials provided with the */
    63F/* distribution. */
    64F/* */
    65F/* Neither the name of Texas Instruments Incorporated nor the names */
    66F/* of its contributors may be used to endorse or promote products */
    67F/* derived from this software without specific prior written */
    68F/* permission. */
    69F/* */
    70F/* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS */
    71F/* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT */
    72F/* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR */
    73F/* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT */
    74F/* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, */
    75F/* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT */
    76F/* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, */
    77F/* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY */
    78F/* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT */
    79F/* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE */
    80F/* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
    81F/* */
    82F/*****************************************************************************/
    83F#ifndef _MY_STDINT_H_
    84F#define _MY_STDINT_H_
    85F/* These definitions might not be 8-bit wide */
    86F
    87Ftypedef
    88Fsigned char
    89F  int8_t ;
    90F
    91Ftypedef
    92Funsigned char
    93F  uint8_t ;
    94F  /* 7.18.1.1 Exact-width integer types */
    95F
    96Ftypedef
    97Fshort
    98F  int16_t ;
    99F
   100Ftypedef
   101Funsigned short
   102F  uint16_t ;
   103F
   104Ftypedef
   105Flong
   106F  int32_t ;
   107F
   108Ftypedef
   109Funsigned long
   110F  uint32_t ;
   111F  /* 7.18.1.2 Minimum-width integer types */
   112F
   113Ftypedef
   114Fint16_t
   115F  int_least8_t ;
   116F
   117Ftypedef
   118Fuint16_t
   119F  uint_least8_t ;
   120F
   121Ftypedef
   122Fint16_t
   123F  int_least16_t ;
   124F
   125Ftypedef
   126Fuint16_t
   127F  uint_least16_t ;
   128F
   129Ftypedef
   130Fint32_t
   131F  int_least32_t ;
   132F
   133Ftypedef
   134Fuint32_t
   135F  uint_least32_t ;
   136F/* sorry, [u]int_least64_t not implemented for C27X, CLA */
   137F/* 7.18.1.3 Fastest minimum-width integer types */
   138F
   139Ftypedef
   140Fint16_t
   141F  int_fast8_t ;
   142F
   143Ftypedef
   144Fuint16_t
   145F  uint_fast8_t ;
   146F
   147Ftypedef
   148Fint16_t
   149F  int_fast16_t ;
   150F
   151Ftypedef
   152Fuint16_t
   153F  uint_fast16_t ;
   154F
   155Ftypedef
   156Fint32_t
   157F  int_fast32_t ;
   158F
   159Ftypedef
   160Fuint32_t
   161F  uint_fast32_t ;
   162F/* sorry, [u]int_fast64_t not implemented for C27X, CLA */
   163F/* 7.18.1.4 Integer types capable of holding object pointers */
   164F
   165Ftypedef
   166Flong
   167F  intptr_t ;
   168F
   169Ftypedef
   170Funsigned long
   171F  uintptr_t ;
   172F/* 7.18.1.5 Greatest-width integer types */
   173F      /* C27X or CLA */
   174F
   175Ftypedef
   176Flong
   177F  intmax_t ;
   178F
   179Ftypedef
   180Funsigned long
   181F  uintmax_t ;
   182F/*
   183F According to footnotes in the 1999 C standard, "C++ implementations
   184F should define these macros only when __STDC_LIMIT_MACROS is defined
   185F before <stdint.h> is included."
   186F*/
   187F/* 7.18.2 Limits of specified width integer types */
   188F#define INT16_MAX 0x7fff
   189F#define INT16_MIN ( - INT16_MAX - 1 )
   190F#define UINT16_MAX 0xffff
   191F#define INT32_MAX 0x7fffffff
   192F#define INT32_MIN ( - INT32_MAX - 1 )
   193F#define UINT32_MAX 0xffffffff
   194F#define INT_LEAST8_MAX ( INT16_MAX )
   195F#define INT_LEAST8_MIN ( INT16_MIN )
   196F#define UINT_LEAST8_MAX ( UINT16_MAX )
   197F#define INT_LEAST16_MAX ( INT16_MAX )
   198F#define INT_LEAST16_MIN ( INT16_MIN )
   199F#define UINT_LEAST16_MAX ( UINT16_MAX )
   200F#define INT_LEAST32_MAX ( INT32_MAX )
   201F#define INT_LEAST32_MIN ( INT32_MIN )
   202F#define UINT_LEAST32_MAX ( UINT32_MAX )
   203F#define INT_FAST8_MAX ( INT16_MAX )
   204F#define INT_FAST8_MIN ( INT16_MIN )
   205F#define UINT_FAST8_MAX ( UINT16_MAX )
   206F#define INT_FAST16_MAX ( INT16_MAX )
   207F#define INT_FAST16_MIN ( INT16_MIN )
   208F#define UINT_FAST16_MAX ( UINT16_MAX )
   209F#define INT_FAST32_MAX ( INT32_MAX )
   210F#define INT_FAST32_MIN ( INT32_MIN )
   211F#define UINT_FAST32_MAX ( UINT32_MAX )
   212F#define INTPTR_MAX ( INT32_MAX )
   213F#define INTPTR_MIN ( INT32_MIN )
   214F#define UINTPTR_MAX ( UINT32_MAX )
   215F#define INTMAX_MIN ( INT32_MIN )
   216F#define INTMAX_MAX ( INT32_MAX )
   217F#define UINTMAX_MAX ( UINT32_MAX )
   218F/* 7.18.3 Limits of other integer types */
   219F#define PTRDIFF_MAX ( INT32_MAX )
   220F#define PTRDIFF_MIN ( INT32_MIN )
   221F#define SIG_ATOMIC_MIN ( INT32_MIN )
   222F#define SIG_ATOMIC_MAX ( INT32_MAX )
   223F#define SIZE_MAX ( INT32_MAX )
   224F#define WCHAR_MAX 0xffffu
   225F#define WCHAR_MIN 0
   226F#define WINT_MIN ( INT32_MIN )
   227F#define WINT_MAX ( INT32_MAX )
   228F/* 7.18.4.1 Macros for minimum-width integer constants */
   229F/*
   230F There is a defect report filed against the C99 standard concerning how
   231F the (U)INTN_C macros should be implemented. Please refer to --
   232F http://wwwold.dkuug.dk/JTC1/SC22/WG14/www/docs/dr_209.htm
   233F for more information. These macros are implemented according to the
   234F suggestion given at this web site.
   235F*/
   236F#define INT8_C( value ) ( ( int_least8_t ) ( value ) )
   237F#define UINT8_C( value ) ( ( uint_least8_t ) ( value ) )
   238F#define INT16_C( value ) ( ( int_least16_t ) ( value ) )
   239F#define UINT16_C( value ) ( ( uint_least16_t ) ( value ) )
   240F#define INT32_C( value ) ( ( int_least32_t ) ( value ) )
   241F#define UINT32_C( value ) ( ( uint_least32_t ) ( value ) )
   242F/* 7.18.4.2 Macros for greatest-width integer constants */
   243F#define INTMAX_C( value ) ( ( intmax_t ) ( value ) )
   244F#define UINTMAX_C( value ) ( ( uintmax_t ) ( value ) )
   245F       /* !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS) */
   246F       /* _STDINT_H_ */
   247F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\my_stdint.h*/
   248F/*   CLOSE_FILE Include File */
   249F 
   250F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Device.h */
   251F// TI File $Revision: /main/5 $
   252F// Checkin $Date: January 22, 2008 16:55:35 $
   253F//###########################################################################
   254F//
   255F// FILE: DSP2833x_Device.h
   256F//
   257F// TITLE: DSP2833x Device Definitions.
   258F//
   259F//###########################################################################
   260F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   261F// $Release Date: August 4, 2009 $
   262F//###########################################################################
   263F#ifndef DSP2833x_DEVICE_H
   264F#define DSP2833x_DEVICE_H
   265F#define TARGET 1
   266F//---------------------------------------------------------------------------
   267F// User To Select Target Device:
   268F#define DSP28_28335 TARGET
   269F#define DSP28_28334 0
   270F#define DSP28_28332 0
   271F//---------------------------------------------------------------------------
   272F// Common CPU Definitions:
   273F//
   274F
   275Fextern cregister volatile unsigned int
   276F  IFR ;
   277F
   278Fextern cregister volatile unsigned int
   279F  IER ;
   280F#define EINT asm (" clrc INTM")
   281F#define DINT asm (" setc INTM")
   282F#define ERTM asm (" clrc DBGM")
   283F#define DRTM asm (" setc DBGM")
   284F#define EALLOW asm (" EALLOW")
   285F#define EDIS asm (" EDIS")
   286F#define ESTOP0 asm (" ESTOP0")
   287F#define M_INT1 0x0001
   288F#define M_INT2 0x0002
   289F#define M_INT3 0x0004
   290F#define M_INT4 0x0008
   291F#define M_INT5 0x0010
   292F#define M_INT6 0x0020
   293F#define M_INT7 0x0040
   294F#define M_INT8 0x0080
   295F#define M_INT9 0x0100
   296F#define M_INT10 0x0200
   297F#define M_INT11 0x0400
   298F#define M_INT12 0x0800
   299F#define M_INT13 0x1000
   300F#define M_INT14 0x2000
   301F#define M_DLOG 0x4000
   302F#define M_RTOS 0x8000
   303F#define BIT0 0x0001
   304F#define BIT1 0x0002
   305F#define BIT2 0x0004
   306F#define BIT3 0x0008
   307F#define BIT4 0x0010
   308F#define BIT5 0x0020
   309F#define BIT6 0x0040
   310F#define BIT7 0x0080
   311F#define BIT8 0x0100
   312F#define BIT9 0x0200
   313F#define BIT10 0x0400
   314F#define BIT11 0x0800
   315F#define BIT12 0x1000
   316F#define BIT13 0x2000
   317F#define BIT14 0x4000
   318F#define BIT15 0x8000
   319F//---------------------------------------------------------------------------
   320F// For Portability, User Is Recommended To Use Following Data Type Size
   321F// Definitions For 16-bit and 32-Bit Signed/Unsigned Integers:
   322F//
   323F#define DSP28_DATA_TYPES
   324F
   325Ftypedef
   326Fchar
   327F  int8 ;
   328F
   329Ftypedef
   330Fint
   331F  int16 ;
   332F
   333Ftypedef
   334Flong
   335F  int32 ;
   336F
   337Ftypedef
   338Flong long
   339F  int64 ;
   340F
   341Ftypedef
   342Funsigned char
   343F  Uint8 ;
   344F
   345Ftypedef
   346Funsigned int
   347F  Uint16 ;
   348F
   349Ftypedef
   350Funsigned long
   351F  Uint32 ;
   352F
   353Ftypedef
   354Funsigned long long
   355F  Uint64 ;
   356F
   357Ftypedef
   358Ffloat
   359F  float32 ;
   360F
   361Ftypedef
   362Flong double
   363F  float64 ;
   364F//---------------------------------------------------------------------------
   365F// Include All Peripheral Header Files:
   366F//
   367F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Adc.h */
   368F// TI File $Revision: /main/1 $
   369F// Checkin $Date: August 18, 2006 13:51:50 $
   370F//###########################################################################
   371F//
   372F// FILE: DSP2833x_Adc.h
   373F//
   374F// TITLE: DSP2833x Device ADC Register Definitions.
   375F//
   376F//###########################################################################
   377F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   378F// $Release Date: August 4, 2009 $
   379F//###########################################################################
   380F#ifndef DSP2833x_ADC_H
   381F#define DSP2833x_ADC_H
   382F//---------------------------------------------------------------------------
   383F// ADC Individual Register Bit Definitions:
   384F
   385Fstruct ADCTRL1_BITS
   386F{                     // bits description
   387F  Uint16 rsvd1 : 4 ;// 3:0 reserved
   388F  Uint16 SEQ_CASC : 1 ;// 4 Cascaded sequencer mode
   389F  Uint16 SEQ_OVRD : 1 ;// 5 Sequencer override
   390F  Uint16 CONT_RUN : 1 ;// 6 Continuous run
   391F  Uint16 CPS : 1 ;// 7 ADC core clock pre-scalar
   392F  Uint16 ACQ_PS : 4 ;// 11:8 Acquisition window size
   393F  Uint16 SUSMOD : 2 ;// 13:12 Emulation suspend mode
   394F  Uint16 RESET : 1 ;// 14 ADC reset
   395F  Uint16 rsvd2 : 1 ;// 15 reserved
   396F} ;
   397F
   398Funion ADCTRL1_REG
   399F{
   400F  Uint16 all ;
   401F  struct ADCTRL1_BITS bit ;
   402F} ;
   403F
   404Fstruct ADCTRL2_BITS
   405F{                     // bits description
   406F  Uint16 EPWM_SOCB_SEQ2 : 1 ;// 0 EPWM compare B SOC mask for SEQ2
   407F  Uint16 rsvd1 : 1 ;// 1 reserved
   408F  Uint16 INT_MOD_SEQ2 : 1 ;// 2 SEQ2 Interrupt mode
   409F  Uint16 INT_ENA_SEQ2 : 1 ;// 3 SEQ2 Interrupt enable
   410F  Uint16 rsvd2 : 1 ;// 4 reserved
   411F  Uint16 SOC_SEQ2 : 1 ;// 5 Start of conversion for SEQ2
   412F  Uint16 RST_SEQ2 : 1 ;// 6 Reset SEQ2
   413F  Uint16 EXT_SOC_SEQ1 : 1 ;// 7 External start of conversion for SEQ1
   414F  Uint16 EPWM_SOCA_SEQ1 : 1 ;// 8 EPWM compare B SOC mask for SEQ1
   415F  Uint16 rsvd3 : 1 ;// 9 reserved
   416F  Uint16 INT_MOD_SEQ1 : 1 ;// 10 SEQ1 Interrupt mode
   417F  Uint16 INT_ENA_SEQ1 : 1 ;// 11 SEQ1 Interrupt enable
   418F  Uint16 rsvd4 : 1 ;// 12 reserved
   419F  Uint16 SOC_SEQ1 : 1 ;// 13 Start of conversion trigger for SEQ1
   420F  Uint16 RST_SEQ1 : 1 ;// 14 Restart sequencer 1
   421F  Uint16 EPWM_SOCB_SEQ : 1 ;// 15 EPWM compare B SOC enable
   422F} ;
   423F
   424Funion ADCTRL2_REG
   425F{
   426F  Uint16 all ;
   427F  struct ADCTRL2_BITS bit ;
   428F} ;
   429F
   430Fstruct ADCASEQSR_BITS
   431F{                       // bits description
   432F  Uint16 SEQ1_STATE : 4 ;// 3:0 SEQ1 state
   433F  Uint16 SEQ2_STATE : 3 ;// 6:4 SEQ2 state
   434F  Uint16 rsvd1 : 1 ;// 7 reserved
   435F  Uint16 SEQ_CNTR : 4 ;// 11:8 Sequencing counter status
   436F  Uint16 rsvd2 : 4 ;// 15:12 reserved
   437F} ;
   438F
   439Funion ADCASEQSR_REG
   440F{
   441F  Uint16 all ;
   442F  struct ADCASEQSR_BITS bit ;
   443F} ;
   444F
   445Fstruct ADCMAXCONV_BITS
   446F{                        // bits description
   447F  Uint16 MAX_CONV1 : 4 ;// 3:0 Max number of conversions
   448F  Uint16 MAX_CONV2 : 3 ;// 6:4 Max number of conversions
   449F  Uint16 rsvd1 : 9 ;// 15:7 reserved
   450F} ;
   451F
   452Funion ADCMAXCONV_REG
   453F{
   454F  Uint16 all ;
   455F  struct ADCMAXCONV_BITS bit ;
   456F} ;
   457F
   458Fstruct ADCCHSELSEQ1_BITS
   459F{                          // bits description
   460F  Uint16 CONV00 : 4 ;// 3:0 Conversion selection 00
   461F  Uint16 CONV01 : 4 ;// 7:4 Conversion selection 01
   462F  Uint16 CONV02 : 4 ;// 11:8 Conversion selection 02
   463F  Uint16 CONV03 : 4 ;// 15:12 Conversion selection 03
   464F} ;
   465F
   466Funion ADCCHSELSEQ1_REG
   467F{
   468F  Uint16 all ;
   469F  struct ADCCHSELSEQ1_BITS bit ;
   470F} ;
   471F
   472Fstruct ADCCHSELSEQ2_BITS
   473F{                          // bits description
   474F  Uint16 CONV04 : 4 ;// 3:0 Conversion selection 04
   475F  Uint16 CONV05 : 4 ;// 7:4 Conversion selection 05
   476F  Uint16 CONV06 : 4 ;// 11:8 Conversion selection 06
   477F  Uint16 CONV07 : 4 ;// 15:12 Conversion selection 07
   478F} ;
   479F
   480Funion ADCCHSELSEQ2_REG
   481F{
   482F  Uint16 all ;
   483F  struct ADCCHSELSEQ2_BITS bit ;
   484F} ;
   485F
   486Fstruct ADCCHSELSEQ3_BITS
   487F{                          // bits description
   488F  Uint16 CONV08 : 4 ;// 3:0 Conversion selection 08
   489F  Uint16 CONV09 : 4 ;// 7:4 Conversion selection 09
   490F  Uint16 CONV10 : 4 ;// 11:8 Conversion selection 10
   491F  Uint16 CONV11 : 4 ;// 15:12 Conversion selection 11
   492F} ;
   493F
   494Funion ADCCHSELSEQ3_REG
   495F{
   496F  Uint16 all ;
   497F  struct ADCCHSELSEQ3_BITS bit ;
   498F} ;
   499F
   500Fstruct ADCCHSELSEQ4_BITS
   501F{                          // bits description
   502F  Uint16 CONV12 : 4 ;// 3:0 Conversion selection 12
   503F  Uint16 CONV13 : 4 ;// 7:4 Conversion selection 13
   504F  Uint16 CONV14 : 4 ;// 11:8 Conversion selection 14
   505F  Uint16 CONV15 : 4 ;// 15:12 Conversion selection 15
   506F} ;
   507F
   508Funion ADCCHSELSEQ4_REG
   509F{
   510F  Uint16 all ;
   511F  struct ADCCHSELSEQ4_BITS bit ;
   512F} ;
   513F
   514Fstruct ADCTRL3_BITS
   515F{                     // bits description
   516F  Uint16 SMODE_SEL : 1 ;// 0 Sampling mode select
   517F  Uint16 ADCCLKPS : 4 ;// 4:1 ADC core clock divider
   518F  Uint16 ADCPWDN : 1 ;// 5 ADC powerdown
   519F  Uint16 ADCBGRFDN : 2 ;// 7:6 ADC bandgap/ref power down
   520F  Uint16 rsvd1 : 8 ;// 15:8 reserved
   521F} ;
   522F
   523Funion ADCTRL3_REG
   524F{
   525F  Uint16 all ;
   526F  struct ADCTRL3_BITS bit ;
   527F} ;
   528F
   529Fstruct ADCST_BITS
   530F{                   // bits description
   531F  Uint16 INT_SEQ1 : 1 ;// 0 SEQ1 Interrupt flag
   532F  Uint16 INT_SEQ2 : 1 ;// 1 SEQ2 Interrupt flag
   533F  Uint16 SEQ1_BSY : 1 ;// 2 SEQ1 busy status
   534F  Uint16 SEQ2_BSY : 1 ;// 3 SEQ2 busy status
   535F  Uint16 INT_SEQ1_CLR : 1 ;// 4 SEQ1 Interrupt clear
   536F  Uint16 INT_SEQ2_CLR : 1 ;// 5 SEQ2 Interrupt clear
   537F  Uint16 EOS_BUF1 : 1 ;// 6 End of sequence buffer1
   538F  Uint16 EOS_BUF2 : 1 ;// 7 End of sequence buffer2
   539F  Uint16 rsvd1 : 8 ;// 15:8 reserved
   540F} ;
   541F
   542Funion ADCST_REG
   543F{
   544F  Uint16 all ;
   545F  struct ADCST_BITS bit ;
   546F} ;
   547F
   548Fstruct ADCREFSEL_BITS
   549F{                       // bits description
   550F  Uint16 rsvd1 : 14 ;    // 13:0 reserved
   551F  Uint16 REF_SEL : 2 ;    // 15:14 Reference select
   552F} ;
   553F
   554Funion ADCREFSEL_REG
   555F{
   556F  Uint16 all ;
   557F  struct ADCREFSEL_BITS bit ;
   558F} ;
   559F
   560Fstruct ADCOFFTRIM_BITS
   561F{                       // bits description
   562F  int16 OFFSET_TRIM : 9 ;    // 8:0 Offset Trim
   563F  Uint16 rsvd1 : 7 ;    // 15:9 reserved
   564F} ;
   565F
   566Funion ADCOFFTRIM_REG
   567F{
   568F  Uint16 all ;
   569F  struct ADCOFFTRIM_BITS bit ;
   570F} ;
   571F
   572Fstruct ADC_REGS
   573F{
   574F  union ADCTRL1_REG ADCTRL1 ;  // ADC Control 1
   575F  union ADCTRL2_REG ADCTRL2 ;  // ADC Control 2
   576F  union ADCMAXCONV_REG ADCMAXCONV ;  // Max conversions
   577F  union ADCCHSELSEQ1_REG ADCCHSELSEQ1 ;  // Channel select sequencing control 1
   578F  union ADCCHSELSEQ2_REG ADCCHSELSEQ2 ;  // Channel select sequencing control 2
   579F  union ADCCHSELSEQ3_REG ADCCHSELSEQ3 ;  // Channel select sequencing control 3
   580F  union ADCCHSELSEQ4_REG ADCCHSELSEQ4 ;  // Channel select sequencing control 4
   581F  union ADCASEQSR_REG ADCASEQSR ;  // Autosequence status register
   582F  Uint16 ADCRESULT0 ;  // Conversion Result Buffer 0
   583F  Uint16 ADCRESULT1 ;  // Conversion Result Buffer 1
   584F  Uint16 ADCRESULT2 ;  // Conversion Result Buffer 2
   585F  Uint16 ADCRESULT3 ;  // Conversion Result Buffer 3
   586F  Uint16 ADCRESULT4 ;  // Conversion Result Buffer 4
   587F  Uint16 ADCRESULT5 ;  // Conversion Result Buffer 5
   588F  Uint16 ADCRESULT6 ;  // Conversion Result Buffer 6
   589F  Uint16 ADCRESULT7 ;  // Conversion Result Buffer 7
   590F  Uint16 ADCRESULT8 ;  // Conversion Result Buffer 8
   591F  Uint16 ADCRESULT9 ;  // Conversion Result Buffer 9
   592F  Uint16 ADCRESULT10 ;  // Conversion Result Buffer 10
   593F  Uint16 ADCRESULT11 ;  // Conversion Result Buffer 11
   594F  Uint16 ADCRESULT12 ;  // Conversion Result Buffer 12
   595F  Uint16 ADCRESULT13 ;  // Conversion Result Buffer 13
   596F  Uint16 ADCRESULT14 ;  // Conversion Result Buffer 14
   597F  Uint16 ADCRESULT15 ;  // Conversion Result Buffer 15
   598F  union ADCTRL3_REG ADCTRL3 ;  // ADC Control 3
   599F  union ADCST_REG ADCST ;  // ADC Status Register
   600F  Uint16 rsvd1 ;
   601F  Uint16 rsvd2 ;
   602F  union ADCREFSEL_REG ADCREFSEL ;  // Reference Select Register
   603F  union ADCOFFTRIM_REG ADCOFFTRIM ;  // Offset Trim Register
   604F} ;
   605F
   606Fstruct ADC_RESULT_MIRROR_REGS
   607F{
   608F  Uint16 ADCRESULT0 ;  // Conversion Result Buffer 0
   609F  Uint16 ADCRESULT1 ;  // Conversion Result Buffer 1
   610F  Uint16 ADCRESULT2 ;  // Conversion Result Buffer 2
   611F  Uint16 ADCRESULT3 ;  // Conversion Result Buffer 3
   612F  Uint16 ADCRESULT4 ;  // Conversion Result Buffer 4
   613F  Uint16 ADCRESULT5 ;  // Conversion Result Buffer 5
   614F  Uint16 ADCRESULT6 ;  // Conversion Result Buffer 6
   615F  Uint16 ADCRESULT7 ;  // Conversion Result Buffer 7
   616F  Uint16 ADCRESULT8 ;  // Conversion Result Buffer 8
   617F  Uint16 ADCRESULT9 ;  // Conversion Result Buffer 9
   618F  Uint16 ADCRESULT10 ;  // Conversion Result Buffer 10
   619F  Uint16 ADCRESULT11 ;  // Conversion Result Buffer 11
   620F  Uint16 ADCRESULT12 ;  // Conversion Result Buffer 12
   621F  Uint16 ADCRESULT13 ;  // Conversion Result Buffer 13
   622F  Uint16 ADCRESULT14 ;  // Conversion Result Buffer 14
   623F  Uint16 ADCRESULT15 ;  // Conversion Result Buffer 15
   624F} ;
   625F//---------------------------------------------------------------------------
   626F// ADC External References & Function Declarations:
   627F//
   628F
   629Fextern volatile struct ADC_REGS
   630F  AdcRegs ;
   631F
   632Fextern volatile struct ADC_RESULT_MIRROR_REGS
   633F  AdcMirror ;
   634F       /* extern "C" */
   635F       // end of DSP2833x_ADC_H definition
   636F//===========================================================================
   637F// End of file.
   638F//===========================================================================
   639F 
   640F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Adc.h*/
   641F/*   CLOSE_FILE Include File */
   642F 
   643F                // ADC Registers
   644F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DevEmu.h */
   645F// TI File $Revision: /main/4 $
   646F// Checkin $Date: April 15, 2009 10:05:17 $
   647F//###########################################################################
   648F//
   649F// FILE: DSP2833x_DevEmu.h
   650F//
   651F// TITLE: DSP2833x Device Emulation Register Definitions.
   652F//
   653F//###########################################################################
   654F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   655F// $Release Date: August 4, 2009 $
   656F//###########################################################################
   657F#ifndef DSP2833x_DEV_EMU_H
   658F#define DSP2833x_DEV_EMU_H
   659F//---------------------------------------------------------------------------
   660F// Device Emulation Register Bit Definitions:
   661F//
   662F// Device Configuration Register Bit Definitions
   663F
   664Fstruct DEVICECNF_BITS
   665F{                       // bits description
   666F  Uint16 rsvd1 : 3 ;
   667F                   // 2:0 reserved
   668F  Uint16 VMAPS : 1 ;
   669F                   // 3 VMAP Status
   670F  Uint16 rsvd2 : 1 ;
   671F                   // 4 reserved
   672F  Uint16 XRSn : 1 ;
   673F                  // 5 XRSn Signal Status
   674F  Uint16 rsvd3 : 10 ;
   675F                    // 15:6
   676F  Uint16 rsvd4 : 3 ;
   677F                   // 18:16
   678F  Uint16 ENPROT : 1 ;
   679F                    // 19 Enable/Disable pipeline protection
   680F  Uint16 rsvd5 : 7 ;
   681F                   // 26:20 reserved
   682F  Uint16 TRSTN : 1 ;
   683F                   // 27 Status of TRSTn signal
   684F  Uint16 rsvd6 : 4 ;
   685F                   // 31:28 reserved
   686F} ;
   687F
   688Funion DEVICECNF_REG
   689F{
   690F  Uint32 all ;
   691F  struct DEVICECNF_BITS bit ;
   692F} ;
   693F// CLASSID
   694F
   695Fstruct CLASSID_BITS
   696F{                     // bits description
   697F  Uint16 CLASSNO : 8 ;
   698F                     // 7:0 Class Number
   699F  Uint16 PARTTYPE : 8 ;
   700F                      // 15:8 Part Type
   701F} ;
   702F
   703Funion CLASSID_REG
   704F{
   705F  Uint16 all ;
   706F  struct CLASSID_BITS bit ;
   707F} ;
   708F
   709Fstruct DEV_EMU_REGS
   710F{
   711F  union DEVICECNF_REG DEVICECNF ; // device configuration
   712F  union CLASSID_REG CLASSID ; // Class ID
   713F  Uint16 REVID ; // Device ID
   714F  Uint16 PROTSTART ; // Write-Read protection start
   715F  Uint16 PROTRANGE ; // Write-Read protection range
   716F  Uint16 rsvd2 [ 202 ] ;
   717F} ;
   718F// PARTID
   719F
   720Fstruct PARTID_BITS
   721F{                    // bits description
   722F  Uint16 PARTNO : 8 ;
   723F                    // 7:0 Part Number
   724F  Uint16 PARTTYPE : 8 ;
   725F                      // 15:8 Part Type
   726F} ;
   727F
   728Funion PARTID_REG
   729F{
   730F  Uint16 all ;
   731F  struct PARTID_BITS bit ;
   732F} ;
   733F
   734Fstruct PARTID_REGS
   735F{
   736F  union PARTID_REG PARTID ; // Part ID
   737F} ;
   738F//---------------------------------------------------------------------------
   739F// Device Emulation Register References & Function Declarations:
   740F//
   741F
   742Fextern volatile struct DEV_EMU_REGS
   743F  DevEmuRegs ;
   744F
   745Fextern volatile struct PARTID_REGS
   746F  PartIdRegs ;
   747F       /* extern "C" */
   748F       // end of DSP2833x_DEV_EMU_H definition
   749F//===========================================================================
   750F// End of file.
   751F//===========================================================================
   752F 
   753F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DevEmu.h*/
   754F/*   CLOSE_FILE Include File */
   755F 
   756F             // Device Emulation Registers
   757F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_CpuTimers.h */
   758F// TI File $Revision: /main/4 $
   759F// Checkin $Date: March 20, 2007 15:33:42 $
   760F//###########################################################################
   761F//
   762F// FILE: DSP2833x_CpuTimers.h
   763F//
   764F// TITLE: DSP2833x CPU 32-bit Timers Register Definitions.
   765F//
   766F// NOTES: CpuTimer1 and CpuTimer2 are reserved for use with DSP BIOS and
   767F// other realtime operating systems.
   768F//
   769F// Do not use these two timers in your application if you ever plan
   770F// on integrating DSP-BIOS or another realtime OS.
   771F//
   772F// For this reason, comment out the code to manipulate these two timers
   773F// if using DSP-BIOS or another realtime OS.
   774F//
   775F//###########################################################################
   776F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   777F// $Release Date: August 4, 2009 $
   778F//###########################################################################
   779F#ifndef DSP2833x_CPU_TIMERS_H
   780F#define DSP2833x_CPU_TIMERS_H
   781F//---------------------------------------------------------------------------
   782F// CPU Timer Register Bit Definitions:
   783F//
   784F//
   785F// TCR: Control register bit definitions:
   786F
   787Fstruct TCR_BITS
   788F{                 // bits description
   789F  Uint16 rsvd1 : 4 ;
   790F                   // 3:0 reserved
   791F  Uint16 TSS : 1 ;
   792F                 // 4 Timer Start/Stop
   793F  Uint16 TRB : 1 ;
   794F                 // 5 Timer reload
   795F  Uint16 rsvd2 : 4 ;
   796F                   // 9:6 reserved
   797F  Uint16 SOFT : 1 ;
   798F                  // 10 Emulation modes
   799F  Uint16 FREE : 1 ;
   800F                  // 11
   801F  Uint16 rsvd3 : 2 ;
   802F                   // 12:13 reserved
   803F  Uint16 TIE : 1 ;
   804F                 // 14 Output enable
   805F  Uint16 TIF : 1 ;
   806F                 // 15 Interrupt flag
   807F} ;
   808F
   809Funion TCR_REG
   810F{
   811F  Uint16 all ;
   812F  struct TCR_BITS bit ;
   813F} ;
   814F// TPR: Pre-scale low bit definitions:
   815F
   816Fstruct TPR_BITS
   817F{                 // bits description
   818F  Uint16 TDDR : 8 ;
   819F                  // 7:0 Divide-down low
   820F  Uint16 PSC : 8 ;
   821F                 // 15:8 Prescale counter low
   822F} ;
   823F
   824Funion TPR_REG
   825F{
   826F  Uint16 all ;
   827F  struct TPR_BITS bit ;
   828F} ;
   829F// TPRH: Pre-scale high bit definitions:
   830F
   831Fstruct TPRH_BITS
   832F{                  // bits description
   833F  Uint16 TDDRH : 8 ;
   834F                   // 7:0 Divide-down high
   835F  Uint16 PSCH : 8 ;
   836F                  // 15:8 Prescale counter high
   837F} ;
   838F
   839Funion TPRH_REG
   840F{
   841F  Uint16 all ;
   842F  struct TPRH_BITS bit ;
   843F} ;
   844F// TIM, TIMH: Timer register definitions:
   845F
   846Fstruct TIM_REG
   847F{
   848F  Uint16 LSW ;
   849F  Uint16 MSW ;
   850F} ;
   851F
   852Funion TIM_GROUP
   853F{
   854F  Uint32 all ;
   855F  struct TIM_REG half ;
   856F} ;
   857F// PRD, PRDH: Period register definitions:
   858F
   859Fstruct PRD_REG
   860F{
   861F  Uint16 LSW ;
   862F  Uint16 MSW ;
   863F} ;
   864F
   865Funion PRD_GROUP
   866F{
   867F  Uint32 all ;
   868F  struct PRD_REG half ;
   869F} ;
   870F//---------------------------------------------------------------------------
   871F// CPU Timer Register File:
   872F//
   873F
   874Fstruct CPUTIMER_REGS
   875F{
   876F  union TIM_GROUP TIM ; // Timer counter register
   877F  union PRD_GROUP PRD ; // Period register
   878F  union TCR_REG TCR ; // Timer control register
   879F  Uint16 rsvd1 ; // reserved
   880F  union TPR_REG TPR ; // Timer pre-scale low
   881F  union TPRH_REG TPRH ; // Timer pre-scale high
   882F} ;
   883F//---------------------------------------------------------------------------
   884F// CPU Timer Support Variables:
   885F//
   886F
   887Fstruct CPUTIMER_VARS
   888F{
   889F  volatile struct CPUTIMER_REGS * RegsAddr ;
   890F  Uint32 InterruptCount ;
   891F  float CPUFreqInMHz ;
   892F  float PeriodInUSec ;
   893F} ;
   894F//---------------------------------------------------------------------------
   895F// Function prototypes and external definitions:
   896F//
   897F
   898Fvoid
   899F  InitCpuTimers ( void ) ;
   900F
   901Fvoid
   902T  ConfigCpuTimer (
   903F  struct CPUTIMER_VARS * Timer ,
   904F  float Freq ,
   905F  float Period ) ;
   906F
   907Fextern volatile struct CPUTIMER_REGS
   908F  CpuTimer0Regs ;
   909F
   910Fextern struct CPUTIMER_VARS
   911F  CpuTimer0 ;
   912F// CpuTimer 1 and CpuTimer2 are reserved for DSP BIOS & other RTOS. Comment out CpuTimer1 and CpuTimer2 if using DSP BIOS or other RTOS
   913F
   914Fextern volatile struct CPUTIMER_REGS
   915F  CpuTimer1Regs ;
   916F
   917Fextern volatile struct CPUTIMER_REGS
   918F  CpuTimer2Regs ;
   919F
   920Fextern struct CPUTIMER_VARS
   921F  CpuTimer1 ;
   922F
   923Fextern struct CPUTIMER_VARS
   924F  CpuTimer2 ;
   925F//---------------------------------------------------------------------------
   926F// Usefull Timer Operations:
   927F//
   928F// Start Timer:
   929F#define StartCpuTimer0( ) CpuTimer0Regs . TCR . bit . TSS = 0
   930F// Stop Timer:
   931F#define StopCpuTimer0( ) CpuTimer0Regs . TCR . bit . TSS = 1
   932F// Reload Timer With period Value:
   933F#define ReloadCpuTimer0( ) CpuTimer0Regs . TCR . bit . TRB = 1
   934F// Read 32-Bit Timer Value:
   935F#define ReadCpuTimer0Counter( ) CpuTimer0Regs . TIM . all
   936F// Read 32-Bit Period Value:
   937F#define ReadCpuTimer0Period( ) CpuTimer0Regs . PRD . all
   938F// CpuTimer 1 and CpuTimer2 are reserved for DSP BIOS & other RTOS
   939F// Do not use these two timers if you ever plan on integrating
   940F// DSP-BIOS or another realtime OS.
   941F//
   942F// For this reason, comment out the code to manipulate these two timers
   943F// if using DSP-BIOS or another realtime OS.
   944F// Start Timer:
   945F#define StartCpuTimer1( ) CpuTimer1Regs . TCR . bit . TSS = 0
   946F#define StartCpuTimer2( ) CpuTimer2Regs . TCR . bit . TSS = 0
   947F// Stop Timer:
   948F#define StopCpuTimer1( ) CpuTimer1Regs . TCR . bit . TSS = 1
   949F#define StopCpuTimer2( ) CpuTimer2Regs . TCR . bit . TSS = 1
   950F// Reload Timer With period Value:
   951F#define ReloadCpuTimer1( ) CpuTimer1Regs . TCR . bit . TRB = 1
   952F#define ReloadCpuTimer2( ) CpuTimer2Regs . TCR . bit . TRB = 1
   953F// Read 32-Bit Timer Value:
   954F#define ReadCpuTimer1Counter( ) CpuTimer1Regs . TIM . all
   955F#define ReadCpuTimer2Counter( ) CpuTimer2Regs . TIM . all
   956F// Read 32-Bit Period Value:
   957F#define ReadCpuTimer1Period( ) CpuTimer1Regs . PRD . all
   958F#define ReadCpuTimer2Period( ) CpuTimer2Regs . PRD . all
   959F       /* extern "C" */
   960F       // end of DSP2833x_CPU_TIMERS_H definition
   961F//===========================================================================
   962F// End of file.
   963F//===========================================================================
   964F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_CpuTimers.h*/
   965F/*   CLOSE_FILE Include File */
   966F 
   967F          // 32-bit CPU Timers
   968F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECan.h */
   969F// TI File $Revision: /main/2 $
   970F// Checkin $Date: May 7, 2007 16:05:39 $
   971F//###########################################################################
   972F//
   973F// FILE: DSP2833x_ECan.h
   974F//
   975F// TITLE: DSP2833x Device eCAN Register Definitions.
   976F//
   977F//###########################################################################
   978F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
   979F// $Release Date: August 4, 2009 $
   980F//###########################################################################
   981F#ifndef DSP2833x_ECAN_H
   982F#define DSP2833x_ECAN_H
   983F/* --------------------------------------------------- */
   984F/* eCAN Control & Status Registers */
   985F/* ----------------------------------------------------*/
   986F/* eCAN Mailbox enable register (CANME) bit definitions */
   987F
   988Fstruct CANME_BITS
   989F{                   // bit description
   990F  Uint16 ME0 : 1 ;
   991F                 // 0 Enable Mailbox 0
   992F  Uint16 ME1 : 1 ;
   993F                 // 1 Enable Mailbox 1
   994F  Uint16 ME2 : 1 ;
   995F                 // 2 Enable Mailbox 2
   996F  Uint16 ME3 : 1 ;
   997F                 // 3 Enable Mailbox 3
   998F  Uint16 ME4 : 1 ;
   999F                 // 4 Enable Mailbox 4
  1000F  Uint16 ME5 : 1 ;
  1001F                 // 5 Enable Mailbox 5
  1002F  Uint16 ME6 : 1 ;
  1003F                 // 6 Enable Mailbox 6
  1004F  Uint16 ME7 : 1 ;
  1005F                 // 7 Enable Mailbox 7
  1006F  Uint16 ME8 : 1 ;
  1007F                 // 8 Enable Mailbox 8
  1008F  Uint16 ME9 : 1 ;
  1009F                 // 9 Enable Mailbox 9
  1010F  Uint16 ME10 : 1 ;
  1011F                  // 10 Enable Mailbox 10
  1012F  Uint16 ME11 : 1 ;
  1013F                  // 11 Enable Mailbox 11
  1014F  Uint16 ME12 : 1 ;
  1015F                  // 12 Enable Mailbox 12
  1016F  Uint16 ME13 : 1 ;
  1017F                  // 13 Enable Mailbox 13
  1018F  Uint16 ME14 : 1 ;
  1019F                  // 14 Enable Mailbox 14
  1020F  Uint16 ME15 : 1 ;
  1021F                  // 15 Enable Mailbox 15
  1022F  Uint16 ME16 : 1 ;
  1023F                  // 16 Enable Mailbox 16
  1024F  Uint16 ME17 : 1 ;
  1025F                  // 17 Enable Mailbox 17
  1026F  Uint16 ME18 : 1 ;
  1027F                  // 18 Enable Mailbox 18
  1028F  Uint16 ME19 : 1 ;
  1029F                  // 19 Enable Mailbox 19
  1030F  Uint16 ME20 : 1 ;
  1031F                  // 20 Enable Mailbox 20
  1032F  Uint16 ME21 : 1 ;
  1033F                  // 21 Enable Mailbox 21
  1034F  Uint16 ME22 : 1 ;
  1035F                  // 22 Enable Mailbox 22
  1036F  Uint16 ME23 : 1 ;
  1037F                  // 23 Enable Mailbox 23
  1038F  Uint16 ME24 : 1 ;
  1039F                  // 24 Enable Mailbox 24
  1040F  Uint16 ME25 : 1 ;
  1041F                  // 25 Enable Mailbox 25
  1042F  Uint16 ME26 : 1 ;
  1043F                  // 26 Enable Mailbox 26
  1044F  Uint16 ME27 : 1 ;
  1045F                  // 27 Enable Mailbox 27
  1046F  Uint16 ME28 : 1 ;
  1047F                  // 28 Enable Mailbox 28
  1048F  Uint16 ME29 : 1 ;
  1049F                  // 29 Enable Mailbox 29
  1050F  Uint16 ME30 : 1 ;
  1051F                  // 30 Enable Mailbox 30
  1052F  Uint16 ME31 : 1 ;
  1053F                  // 31 Enable Mailbox 31
  1054F} ;
  1055F/* Allow access to the bit fields or entire register */
  1056F
  1057Funion CANME_REG
  1058F{
  1059F  Uint32 all ;
  1060F  struct CANME_BITS bit ;
  1061F} ;
  1062F/* eCAN Mailbox direction register (CANMD) bit definitions */
  1063F
  1064Fstruct CANMD_BITS
  1065F{                   // bit description
  1066F  Uint16 MD0 : 1 ;
  1067F                 // 0 0 -> Tx 1 -> Rx
  1068F  Uint16 MD1 : 1 ;
  1069F                 // 1 0 -> Tx 1 -> Rx
  1070F  Uint16 MD2 : 1 ;
  1071F                 // 2 0 -> Tx 1 -> Rx
  1072F  Uint16 MD3 : 1 ;
  1073F                 // 3 0 -> Tx 1 -> Rx
  1074F  Uint16 MD4 : 1 ;
  1075F                 // 4 0 -> Tx 1 -> Rx
  1076F  Uint16 MD5 : 1 ;
  1077F                 // 5 0 -> Tx 1 -> Rx
  1078F  Uint16 MD6 : 1 ;
  1079F                 // 6 0 -> Tx 1 -> Rx
  1080F  Uint16 MD7 : 1 ;
  1081F                 // 7 0 -> Tx 1 -> Rx
  1082F  Uint16 MD8 : 1 ;
  1083F                 // 8 0 -> Tx 1 -> Rx
  1084F  Uint16 MD9 : 1 ;
  1085F                 // 9 0 -> Tx 1 -> Rx
  1086F  Uint16 MD10 : 1 ;
  1087F                  // 10 0 -> Tx 1 -> Rx
  1088F  Uint16 MD11 : 1 ;
  1089F                  // 11 0 -> Tx 1 -> Rx
  1090F  Uint16 MD12 : 1 ;
  1091F                  // 12 0 -> Tx 1 -> Rx
  1092F  Uint16 MD13 : 1 ;
  1093F                  // 13 0 -> Tx 1 -> Rx
  1094F  Uint16 MD14 : 1 ;
  1095F                  // 14 0 -> Tx 1 -> Rx
  1096F  Uint16 MD15 : 1 ;
  1097F                  // 15 0 -> Tx 1 -> Rx
  1098F  Uint16 MD16 : 1 ;
  1099F                  // 16 0 -> Tx 1 -> Rx
  1100F  Uint16 MD17 : 1 ;
  1101F                  // 17 0 -> Tx 1 -> Rx
  1102F  Uint16 MD18 : 1 ;
  1103F                  // 18 0 -> Tx 1 -> Rx
  1104F  Uint16 MD19 : 1 ;
  1105F                  // 19 0 -> Tx 1 -> Rx
  1106F  Uint16 MD20 : 1 ;
  1107F                  // 20 0 -> Tx 1 -> Rx
  1108F  Uint16 MD21 : 1 ;
  1109F                  // 21 0 -> Tx 1 -> Rx
  1110F  Uint16 MD22 : 1 ;
  1111F                  // 22 0 -> Tx 1 -> Rx
  1112F  Uint16 MD23 : 1 ;
  1113F                  // 23 0 -> Tx 1 -> Rx
  1114F  Uint16 MD24 : 1 ;
  1115F                  // 24 0 -> Tx 1 -> Rx
  1116F  Uint16 MD25 : 1 ;
  1117F                  // 25 0 -> Tx 1 -> Rx
  1118F  Uint16 MD26 : 1 ;
  1119F                  // 26 0 -> Tx 1 -> Rx
  1120F  Uint16 MD27 : 1 ;
  1121F                  // 27 0 -> Tx 1 -> Rx
  1122F  Uint16 MD28 : 1 ;
  1123F                  // 28 0 -> Tx 1 -> Rx
  1124F  Uint16 MD29 : 1 ;
  1125F                  // 29 0 -> Tx 1 -> Rx
  1126F  Uint16 MD30 : 1 ;
  1127F                  // 30 0 -> Tx 1 -> Rx
  1128F  Uint16 MD31 : 1 ;
  1129F                  // 31 0 -> Tx 1 -> Rx
  1130F} ;
  1131F/* Allow access to the bit fields or entire register */
  1132F
  1133Funion CANMD_REG
  1134F{
  1135F  Uint32 all ;
  1136F  struct CANMD_BITS bit ;
  1137F} ;
  1138F/* eCAN Transmit Request Set register (CANTRS) bit definitions */
  1139F
  1140Fstruct CANTRS_BITS
  1141F{                    // bit description
  1142F  Uint16 TRS0 : 1 ;
  1143F                  // 0 TRS for Mailbox 0
  1144F  Uint16 TRS1 : 1 ;
  1145F                  // 1 TRS for Mailbox 1
  1146F  Uint16 TRS2 : 1 ;
  1147F                  // 2 TRS for Mailbox 2
  1148F  Uint16 TRS3 : 1 ;
  1149F                  // 3 TRS for Mailbox 3
  1150F  Uint16 TRS4 : 1 ;
  1151F                  // 4 TRS for Mailbox 4
  1152F  Uint16 TRS5 : 1 ;
  1153F                  // 5 TRS for Mailbox 5
  1154F  Uint16 TRS6 : 1 ;
  1155F                  // 6 TRS for Mailbox 6
  1156F  Uint16 TRS7 : 1 ;
  1157F                  // 7 TRS for Mailbox 7
  1158F  Uint16 TRS8 : 1 ;
  1159F                  // 8 TRS for Mailbox 8
  1160F  Uint16 TRS9 : 1 ;
  1161F                  // 9 TRS for Mailbox 9
  1162F  Uint16 TRS10 : 1 ;
  1163F                   // 10 TRS for Mailbox 10
  1164F  Uint16 TRS11 : 1 ;
  1165F                   // 11 TRS for Mailbox 11
  1166F  Uint16 TRS12 : 1 ;
  1167F                   // 12 TRS for Mailbox 12
  1168F  Uint16 TRS13 : 1 ;
  1169F                   // 13 TRS for Mailbox 13
  1170F  Uint16 TRS14 : 1 ;
  1171F                   // 14 TRS for Mailbox 14
  1172F  Uint16 TRS15 : 1 ;
  1173F                   // 15 TRS for Mailbox 15
  1174F  Uint16 TRS16 : 1 ;
  1175F                   // 16 TRS for Mailbox 16
  1176F  Uint16 TRS17 : 1 ;
  1177F                   // 17 TRS for Mailbox 17
  1178F  Uint16 TRS18 : 1 ;
  1179F                   // 18 TRS for Mailbox 18
  1180F  Uint16 TRS19 : 1 ;
  1181F                   // 19 TRS for Mailbox 19
  1182F  Uint16 TRS20 : 1 ;
  1183F                   // 20 TRS for Mailbox 20
  1184F  Uint16 TRS21 : 1 ;
  1185F                   // 21 TRS for Mailbox 21
  1186F  Uint16 TRS22 : 1 ;
  1187F                   // 22 TRS for Mailbox 22
  1188F  Uint16 TRS23 : 1 ;
  1189F                   // 23 TRS for Mailbox 23
  1190F  Uint16 TRS24 : 1 ;
  1191F                   // 24 TRS for Mailbox 24
  1192F  Uint16 TRS25 : 1 ;
  1193F                   // 25 TRS for Mailbox 25
  1194F  Uint16 TRS26 : 1 ;
  1195F                   // 26 TRS for Mailbox 26
  1196F  Uint16 TRS27 : 1 ;
  1197F                   // 27 TRS for Mailbox 27
  1198F  Uint16 TRS28 : 1 ;
  1199F                   // 28 TRS for Mailbox 28
  1200F  Uint16 TRS29 : 1 ;
  1201F                   // 29 TRS for Mailbox 29
  1202F  Uint16 TRS30 : 1 ;
  1203F                   // 30 TRS for Mailbox 30
  1204F  Uint16 TRS31 : 1 ;
  1205F                   // 31 TRS for Mailbox 31
  1206F} ;
  1207F/* Allow access to the bit fields or entire register */
  1208F
  1209Funion CANTRS_REG
  1210F{
  1211F  Uint32 all ;
  1212F  struct CANTRS_BITS bit ;
  1213F} ;
  1214F/* eCAN Transmit Request Reset register (CANTRR) bit definitions */
  1215F
  1216Fstruct CANTRR_BITS
  1217F{                    // bit description
  1218F  Uint16 TRR0 : 1 ;
  1219F                  // 0 TRR for Mailbox 0
  1220F  Uint16 TRR1 : 1 ;
  1221F                  // 1 TRR for Mailbox 1
  1222F  Uint16 TRR2 : 1 ;
  1223F                  // 2 TRR for Mailbox 2
  1224F  Uint16 TRR3 : 1 ;
  1225F                  // 3 TRR for Mailbox 3
  1226F  Uint16 TRR4 : 1 ;
  1227F                  // 4 TRR for Mailbox 4
  1228F  Uint16 TRR5 : 1 ;
  1229F                  // 5 TRR for Mailbox 5
  1230F  Uint16 TRR6 : 1 ;
  1231F                  // 6 TRR for Mailbox 6
  1232F  Uint16 TRR7 : 1 ;
  1233F                  // 7 TRR for Mailbox 7
  1234F  Uint16 TRR8 : 1 ;
  1235F                  // 8 TRR for Mailbox 8
  1236F  Uint16 TRR9 : 1 ;
  1237F                  // 9 TRR for Mailbox 9
  1238F  Uint16 TRR10 : 1 ;
  1239F                   // 10 TRR for Mailbox 10
  1240F  Uint16 TRR11 : 1 ;
  1241F                   // 11 TRR for Mailbox 11
  1242F  Uint16 TRR12 : 1 ;
  1243F                   // 12 TRR for Mailbox 12
  1244F  Uint16 TRR13 : 1 ;
  1245F                   // 13 TRR for Mailbox 13
  1246F  Uint16 TRR14 : 1 ;
  1247F                   // 14 TRR for Mailbox 14
  1248F  Uint16 TRR15 : 1 ;
  1249F                   // 15 TRR for Mailbox 15
  1250F  Uint16 TRR16 : 1 ;
  1251F                   // 16 TRR for Mailbox 16
  1252F  Uint16 TRR17 : 1 ;
  1253F                   // 17 TRR for Mailbox 17
  1254F  Uint16 TRR18 : 1 ;
  1255F                   // 18 TRR for Mailbox 18
  1256F  Uint16 TRR19 : 1 ;
  1257F                   // 19 TRR for Mailbox 19
  1258F  Uint16 TRR20 : 1 ;
  1259F                   // 20 TRR for Mailbox 20
  1260F  Uint16 TRR21 : 1 ;
  1261F                   // 21 TRR for Mailbox 21
  1262F  Uint16 TRR22 : 1 ;
  1263F                   // 22 TRR for Mailbox 22
  1264F  Uint16 TRR23 : 1 ;
  1265F                   // 23 TRR for Mailbox 23
  1266F  Uint16 TRR24 : 1 ;
  1267F                   // 24 TRR for Mailbox 24
  1268F  Uint16 TRR25 : 1 ;
  1269F                   // 25 TRR for Mailbox 25
  1270F  Uint16 TRR26 : 1 ;
  1271F                   // 26 TRR for Mailbox 26
  1272F  Uint16 TRR27 : 1 ;
  1273F                   // 27 TRR for Mailbox 27
  1274F  Uint16 TRR28 : 1 ;
  1275F                   // 28 TRR for Mailbox 28
  1276F  Uint16 TRR29 : 1 ;
  1277F                   // 29 TRR for Mailbox 29
  1278F  Uint16 TRR30 : 1 ;
  1279F                   // 30 TRR for Mailbox 30
  1280F  Uint16 TRR31 : 1 ;
  1281F                   // 31 TRR for Mailbox 31
  1282F} ;
  1283F/* Allow access to the bit fields or entire register */
  1284F
  1285Funion CANTRR_REG
  1286F{
  1287F  Uint32 all ;
  1288F  struct CANTRR_BITS bit ;
  1289F} ;
  1290F/* eCAN Transmit Acknowledge register (CANTA) bit definitions */
  1291F
  1292Fstruct CANTA_BITS
  1293F{                   // bit description
  1294F  Uint16 TA0 : 1 ;
  1295F                 // 0 TA for Mailbox 0
  1296F  Uint16 TA1 : 1 ;
  1297F                 // 1 TA for Mailbox 1
  1298F  Uint16 TA2 : 1 ;
  1299F                 // 2 TA for Mailbox 2
  1300F  Uint16 TA3 : 1 ;
  1301F                 // 3 TA for Mailbox 3
  1302F  Uint16 TA4 : 1 ;
  1303F                 // 4 TA for Mailbox 4
  1304F  Uint16 TA5 : 1 ;
  1305F                 // 5 TA for Mailbox 5
  1306F  Uint16 TA6 : 1 ;
  1307F                 // 6 TA for Mailbox 6
  1308F  Uint16 TA7 : 1 ;
  1309F                 // 7 TA for Mailbox 7
  1310F  Uint16 TA8 : 1 ;
  1311F                 // 8 TA for Mailbox 8
  1312F  Uint16 TA9 : 1 ;
  1313F                 // 9 TA for Mailbox 9
  1314F  Uint16 TA10 : 1 ;
  1315F                  // 10 TA for Mailbox 10
  1316F  Uint16 TA11 : 1 ;
  1317F                  // 11 TA for Mailbox 11
  1318F  Uint16 TA12 : 1 ;
  1319F                  // 12 TA for Mailbox 12
  1320F  Uint16 TA13 : 1 ;
  1321F                  // 13 TA for Mailbox 13
  1322F  Uint16 TA14 : 1 ;
  1323F                  // 14 TA for Mailbox 14
  1324F  Uint16 TA15 : 1 ;
  1325F                  // 15 TA for Mailbox 15
  1326F  Uint16 TA16 : 1 ;
  1327F                  // 16 TA for Mailbox 16
  1328F  Uint16 TA17 : 1 ;
  1329F                  // 17 TA for Mailbox 17
  1330F  Uint16 TA18 : 1 ;
  1331F                  // 18 TA for Mailbox 18
  1332F  Uint16 TA19 : 1 ;
  1333F                  // 19 TA for Mailbox 19
  1334F  Uint16 TA20 : 1 ;
  1335F                  // 20 TA for Mailbox 20
  1336F  Uint16 TA21 : 1 ;
  1337F                  // 21 TA for Mailbox 21
  1338F  Uint16 TA22 : 1 ;
  1339F                  // 22 TA for Mailbox 22
  1340F  Uint16 TA23 : 1 ;
  1341F                  // 23 TA for Mailbox 23
  1342F  Uint16 TA24 : 1 ;
  1343F                  // 24 TA for Mailbox 24
  1344F  Uint16 TA25 : 1 ;
  1345F                  // 25 TA for Mailbox 25
  1346F  Uint16 TA26 : 1 ;
  1347F                  // 26 TA for Mailbox 26
  1348F  Uint16 TA27 : 1 ;
  1349F                  // 27 TA for Mailbox 27
  1350F  Uint16 TA28 : 1 ;
  1351F                  // 28 TA for Mailbox 28
  1352F  Uint16 TA29 : 1 ;
  1353F                  // 29 TA for Mailbox 29
  1354F  Uint16 TA30 : 1 ;
  1355F                  // 30 TA for Mailbox 30
  1356F  Uint16 TA31 : 1 ;
  1357F                  // 31 TA for Mailbox 31
  1358F} ;
  1359F/* Allow access to the bit fields or entire register */
  1360F
  1361Funion CANTA_REG
  1362F{
  1363F  Uint32 all ;
  1364F  struct CANTA_BITS bit ;
  1365F} ;
  1366F/* eCAN Transmit Abort Acknowledge register (CANAA) bit definitions */
  1367F
  1368Fstruct CANAA_BITS
  1369F{                   // bit description
  1370F  Uint16 AA0 : 1 ;
  1371F                 // 0 AA for Mailbox 0
  1372F  Uint16 AA1 : 1 ;
  1373F                 // 1 AA for Mailbox 1
  1374F  Uint16 AA2 : 1 ;
  1375F                 // 2 AA for Mailbox 2
  1376F  Uint16 AA3 : 1 ;
  1377F                 // 3 AA for Mailbox 3
  1378F  Uint16 AA4 : 1 ;
  1379F                 // 4 AA for Mailbox 4
  1380F  Uint16 AA5 : 1 ;
  1381F                 // 5 AA for Mailbox 5
  1382F  Uint16 AA6 : 1 ;
  1383F                 // 6 AA for Mailbox 6
  1384F  Uint16 AA7 : 1 ;
  1385F                 // 7 AA for Mailbox 7
  1386F  Uint16 AA8 : 1 ;
  1387F                 // 8 AA for Mailbox 8
  1388F  Uint16 AA9 : 1 ;
  1389F                 // 9 AA for Mailbox 9
  1390F  Uint16 AA10 : 1 ;
  1391F                  // 10 AA for Mailbox 10
  1392F  Uint16 AA11 : 1 ;
  1393F                  // 11 AA for Mailbox 11
  1394F  Uint16 AA12 : 1 ;
  1395F                  // 12 AA for Mailbox 12
  1396F  Uint16 AA13 : 1 ;
  1397F                  // 13 AA for Mailbox 13
  1398F  Uint16 AA14 : 1 ;
  1399F                  // 14 AA for Mailbox 14
  1400F  Uint16 AA15 : 1 ;
  1401F                  // 15 AA for Mailbox 15
  1402F  Uint16 AA16 : 1 ;
  1403F                  // 16 AA for Mailbox 16
  1404F  Uint16 AA17 : 1 ;
  1405F                  // 17 AA for Mailbox 17
  1406F  Uint16 AA18 : 1 ;
  1407F                  // 18 AA for Mailbox 18
  1408F  Uint16 AA19 : 1 ;
  1409F                  // 19 AA for Mailbox 19
  1410F  Uint16 AA20 : 1 ;
  1411F                  // 20 AA for Mailbox 20
  1412F  Uint16 AA21 : 1 ;
  1413F                  // 21 AA for Mailbox 21
  1414F  Uint16 AA22 : 1 ;
  1415F                  // 22 AA for Mailbox 22
  1416F  Uint16 AA23 : 1 ;
  1417F                  // 23 AA for Mailbox 23
  1418F  Uint16 AA24 : 1 ;
  1419F                  // 24 AA for Mailbox 24
  1420F  Uint16 AA25 : 1 ;
  1421F                  // 25 AA for Mailbox 25
  1422F  Uint16 AA26 : 1 ;
  1423F                  // 26 AA for Mailbox 26
  1424F  Uint16 AA27 : 1 ;
  1425F                  // 27 AA for Mailbox 27
  1426F  Uint16 AA28 : 1 ;
  1427F                  // 28 AA for Mailbox 28
  1428F  Uint16 AA29 : 1 ;
  1429F                  // 29 AA for Mailbox 29
  1430F  Uint16 AA30 : 1 ;
  1431F                  // 30 AA for Mailbox 30
  1432F  Uint16 AA31 : 1 ;
  1433F                  // 31 AA for Mailbox 31
  1434F} ;
  1435F/* Allow access to the bit fields or entire register */
  1436F
  1437Funion CANAA_REG
  1438F{
  1439F  Uint32 all ;
  1440F  struct CANAA_BITS bit ;
  1441F} ;
  1442F/* eCAN Received Message Pending register (CANRMP) bit definitions */
  1443F
  1444Fstruct CANRMP_BITS
  1445F{                    // bit description
  1446F  Uint16 RMP0 : 1 ;
  1447F                  // 0 RMP for Mailbox 0
  1448F  Uint16 RMP1 : 1 ;
  1449F                  // 1 RMP for Mailbox 1
  1450F  Uint16 RMP2 : 1 ;
  1451F                  // 2 RMP for Mailbox 2
  1452F  Uint16 RMP3 : 1 ;
  1453F                  // 3 RMP for Mailbox 3
  1454F  Uint16 RMP4 : 1 ;
  1455F                  // 4 RMP for Mailbox 4
  1456F  Uint16 RMP5 : 1 ;
  1457F                  // 5 RMP for Mailbox 5
  1458F  Uint16 RMP6 : 1 ;
  1459F                  // 6 RMP for Mailbox 6
  1460F  Uint16 RMP7 : 1 ;
  1461F                  // 7 RMP for Mailbox 7
  1462F  Uint16 RMP8 : 1 ;
  1463F                  // 8 RMP for Mailbox 8
  1464F  Uint16 RMP9 : 1 ;
  1465F                  // 9 RMP for Mailbox 9
  1466F  Uint16 RMP10 : 1 ;
  1467F                   // 10 RMP for Mailbox 10
  1468F  Uint16 RMP11 : 1 ;
  1469F                   // 11 RMP for Mailbox 11
  1470F  Uint16 RMP12 : 1 ;
  1471F                   // 12 RMP for Mailbox 12
  1472F  Uint16 RMP13 : 1 ;
  1473F                   // 13 RMP for Mailbox 13
  1474F  Uint16 RMP14 : 1 ;
  1475F                   // 14 RMP for Mailbox 14
  1476F  Uint16 RMP15 : 1 ;
  1477F                   // 15 RMP for Mailbox 15
  1478F  Uint16 RMP16 : 1 ;
  1479F                   // 16 RMP for Mailbox 16
  1480F  Uint16 RMP17 : 1 ;
  1481F                   // 17 RMP for Mailbox 17
  1482F  Uint16 RMP18 : 1 ;
  1483F                   // 18 RMP for Mailbox 18
  1484F  Uint16 RMP19 : 1 ;
  1485F                   // 19 RMP for Mailbox 19
  1486F  Uint16 RMP20 : 1 ;
  1487F                   // 20 RMP for Mailbox 20
  1488F  Uint16 RMP21 : 1 ;
  1489F                   // 21 RMP for Mailbox 21
  1490F  Uint16 RMP22 : 1 ;
  1491F                   // 22 RMP for Mailbox 22
  1492F  Uint16 RMP23 : 1 ;
  1493F                   // 23 RMP for Mailbox 23
  1494F  Uint16 RMP24 : 1 ;
  1495F                   // 24 RMP for Mailbox 24
  1496F  Uint16 RMP25 : 1 ;
  1497F                   // 25 RMP for Mailbox 25
  1498F  Uint16 RMP26 : 1 ;
  1499F                   // 26 RMP for Mailbox 26
  1500F  Uint16 RMP27 : 1 ;
  1501F                   // 27 RMP for Mailbox 27
  1502F  Uint16 RMP28 : 1 ;
  1503F                   // 28 RMP for Mailbox 28
  1504F  Uint16 RMP29 : 1 ;
  1505F                   // 29 RMP for Mailbox 29
  1506F  Uint16 RMP30 : 1 ;
  1507F                   // 30 RMP for Mailbox 30
  1508F  Uint16 RMP31 : 1 ;
  1509F                   // 31 RMP for Mailbox 31
  1510F} ;
  1511F/* Allow access to the bit fields or entire register */
  1512F
  1513Funion CANRMP_REG
  1514F{
  1515F  Uint32 all ;
  1516F  struct CANRMP_BITS bit ;
  1517F} ;
  1518F/* eCAN Received Message Lost register (CANRML) bit definitions */
  1519F
  1520Fstruct CANRML_BITS
  1521F{                    // bit description
  1522F  Uint16 RML0 : 1 ;
  1523F                  // 0 RML for Mailbox 0
  1524F  Uint16 RML1 : 1 ;
  1525F                  // 1 RML for Mailbox 1
  1526F  Uint16 RML2 : 1 ;
  1527F                  // 2 RML for Mailbox 2
  1528F  Uint16 RML3 : 1 ;
  1529F                  // 3 RML for Mailbox 3
  1530F  Uint16 RML4 : 1 ;
  1531F                  // 4 RML for Mailbox 4
  1532F  Uint16 RML5 : 1 ;
  1533F                  // 5 RML for Mailbox 5
  1534F  Uint16 RML6 : 1 ;
  1535F                  // 6 RML for Mailbox 6
  1536F  Uint16 RML7 : 1 ;
  1537F                  // 7 RML for Mailbox 7
  1538F  Uint16 RML8 : 1 ;
  1539F                  // 8 RML for Mailbox 8
  1540F  Uint16 RML9 : 1 ;
  1541F                  // 9 RML for Mailbox 9
  1542F  Uint16 RML10 : 1 ;
  1543F                   // 10 RML for Mailbox 10
  1544F  Uint16 RML11 : 1 ;
  1545F                   // 11 RML for Mailbox 11
  1546F  Uint16 RML12 : 1 ;
  1547F                   // 12 RML for Mailbox 12
  1548F  Uint16 RML13 : 1 ;
  1549F                   // 13 RML for Mailbox 13
  1550F  Uint16 RML14 : 1 ;
  1551F                   // 14 RML for Mailbox 14
  1552F  Uint16 RML15 : 1 ;
  1553F                   // 15 RML for Mailbox 15
  1554F  Uint16 RML16 : 1 ;
  1555F                   // 16 RML for Mailbox 16
  1556F  Uint16 RML17 : 1 ;
  1557F                   // 17 RML for Mailbox 17
  1558F  Uint16 RML18 : 1 ;
  1559F                   // 18 RML for Mailbox 18
  1560F  Uint16 RML19 : 1 ;
  1561F                   // 19 RML for Mailbox 19
  1562F  Uint16 RML20 : 1 ;
  1563F                   // 20 RML for Mailbox 20
  1564F  Uint16 RML21 : 1 ;
  1565F                   // 21 RML for Mailbox 21
  1566F  Uint16 RML22 : 1 ;
  1567F                   // 22 RML for Mailbox 22
  1568F  Uint16 RML23 : 1 ;
  1569F                   // 23 RML for Mailbox 23
  1570F  Uint16 RML24 : 1 ;
  1571F                   // 24 RML for Mailbox 24
  1572F  Uint16 RML25 : 1 ;
  1573F                   // 25 RML for Mailbox 25
  1574F  Uint16 RML26 : 1 ;
  1575F                   // 26 RML for Mailbox 26
  1576F  Uint16 RML27 : 1 ;
  1577F                   // 27 RML for Mailbox 27
  1578F  Uint16 RML28 : 1 ;
  1579F                   // 28 RML for Mailbox 28
  1580F  Uint16 RML29 : 1 ;
  1581F                   // 29 RML for Mailbox 29
  1582F  Uint16 RML30 : 1 ;
  1583F                   // 30 RML for Mailbox 30
  1584F  Uint16 RML31 : 1 ;
  1585F                   // 31 RML for Mailbox 31
  1586F} ;
  1587F/* Allow access to the bit fields or entire register */
  1588F
  1589Funion CANRML_REG
  1590F{
  1591F  Uint32 all ;
  1592F  struct CANRML_BITS bit ;
  1593F} ;
  1594F/* eCAN Remote Frame Pending register (CANRFP) bit definitions */
  1595F
  1596Fstruct CANRFP_BITS
  1597F{                    // bit description
  1598F  Uint16 RFP0 : 1 ;
  1599F                  // 0 RFP for Mailbox 0
  1600F  Uint16 RFP1 : 1 ;
  1601F                  // 1 RFP for Mailbox 1
  1602F  Uint16 RFP2 : 1 ;
  1603F                  // 2 RFP for Mailbox 2
  1604F  Uint16 RFP3 : 1 ;
  1605F                  // 3 RFP for Mailbox 3
  1606F  Uint16 RFP4 : 1 ;
  1607F                  // 4 RFP for Mailbox 4
  1608F  Uint16 RFP5 : 1 ;
  1609F                  // 5 RFP for Mailbox 5
  1610F  Uint16 RFP6 : 1 ;
  1611F                  // 6 RFP for Mailbox 6
  1612F  Uint16 RFP7 : 1 ;
  1613F                  // 7 RFP for Mailbox 7
  1614F  Uint16 RFP8 : 1 ;
  1615F                  // 8 RFP for Mailbox 8
  1616F  Uint16 RFP9 : 1 ;
  1617F                  // 9 RFP for Mailbox 9
  1618F  Uint16 RFP10 : 1 ;
  1619F                   // 10 RFP for Mailbox 10
  1620F  Uint16 RFP11 : 1 ;
  1621F                   // 11 RFP for Mailbox 11
  1622F  Uint16 RFP12 : 1 ;
  1623F                   // 12 RFP for Mailbox 12
  1624F  Uint16 RFP13 : 1 ;
  1625F                   // 13 RFP for Mailbox 13
  1626F  Uint16 RFP14 : 1 ;
  1627F                   // 14 RFP for Mailbox 14
  1628F  Uint16 RFP15 : 1 ;
  1629F                   // 15 RFP for Mailbox 15
  1630F  Uint16 RFP16 : 1 ;
  1631F                   // 16 RFP for Mailbox 16
  1632F  Uint16 RFP17 : 1 ;
  1633F                   // 17 RFP for Mailbox 17
  1634F  Uint16 RFP18 : 1 ;
  1635F                   // 18 RFP for Mailbox 18
  1636F  Uint16 RFP19 : 1 ;
  1637F                   // 19 RFP for Mailbox 19
  1638F  Uint16 RFP20 : 1 ;
  1639F                   // 20 RFP for Mailbox 20
  1640F  Uint16 RFP21 : 1 ;
  1641F                   // 21 RFP for Mailbox 21
  1642F  Uint16 RFP22 : 1 ;
  1643F                   // 22 RFP for Mailbox 22
  1644F  Uint16 RFP23 : 1 ;
  1645F                   // 23 RFP for Mailbox 23
  1646F  Uint16 RFP24 : 1 ;
  1647F                   // 24 RFP for Mailbox 24
  1648F  Uint16 RFP25 : 1 ;
  1649F                   // 25 RFP for Mailbox 25
  1650F  Uint16 RFP26 : 1 ;
  1651F                   // 26 RFP for Mailbox 26
  1652F  Uint16 RFP27 : 1 ;
  1653F                   // 27 RFP for Mailbox 27
  1654F  Uint16 RFP28 : 1 ;
  1655F                   // 28 RFP for Mailbox 28
  1656F  Uint16 RFP29 : 1 ;
  1657F                   // 29 RFP for Mailbox 29
  1658F  Uint16 RFP30 : 1 ;
  1659F                   // 30 RFP for Mailbox 30
  1660F  Uint16 RFP31 : 1 ;
  1661F                   // 31 RFP for Mailbox 31
  1662F} ;
  1663F/* Allow access to the bit fields or entire register */
  1664F
  1665Funion CANRFP_REG
  1666F{
  1667F  Uint32 all ;
  1668F  struct CANRFP_BITS bit ;
  1669F} ;
  1670F/* eCAN Global Acceptance Mask register (CANGAM) bit definitions */
  1671F
  1672Fstruct CANGAM_BITS
  1673F{                    // bits description
  1674F  Uint16 GAM150 : 16 ;
  1675F                     // 15:0 Global acceptance mask bits 0-15
  1676F  Uint16 GAM2816 : 13 ;
  1677F                      // 28:16 Global acceptance mask bits 16-28
  1678F  Uint16 rsvd : 2 ;
  1679F                  // 30:29 reserved
  1680F  Uint16 AMI : 1 ;
  1681F                 // 31 AMI bit
  1682F} ;
  1683F/* Allow access to the bit fields or entire register */
  1684F
  1685Funion CANGAM_REG
  1686F{
  1687F  Uint32 all ;
  1688F  struct CANGAM_BITS bit ;
  1689F} ;
  1690F/* eCAN Master Control register (CANMC) bit definitions */
  1691F
  1692Fstruct CANMC_BITS
  1693F{                   // bits description
  1694F  Uint16 MBNR : 5 ;
  1695F                  // 4:0 MBX #for CDR bit
  1696F  Uint16 SRES : 1 ;
  1697F                  // 5 Soft reset
  1698F  Uint16 STM : 1 ;
  1699F                 // 6 Self-test mode
  1700F  Uint16 ABO : 1 ;
  1701F                 // 7 Auto bus-on
  1702F  Uint16 CDR : 1 ;
  1703F                 // 8 Change data request
  1704F  Uint16 WUBA : 1 ;
  1705F                  // 9 Wake-up on bus activity
  1706F  Uint16 DBO : 1 ;
  1707F                 // 10 Data-byte order
  1708F  Uint16 PDR : 1 ;
  1709F                 // 11 Power-down mode request
  1710F  Uint16 CCR : 1 ;
  1711F                 // 12 Change configuration request
  1712F  Uint16 SCB : 1 ;
  1713F                 // 13 SCC compatibility bit
  1714F  Uint16 TCC : 1 ;
  1715F                 // 14 TSC MSB clear bit
  1716F  Uint16 MBCC : 1 ;
  1717F                  // 15 TSC clear bit thru mailbox 16
  1718F  Uint16 SUSP : 1 ;
  1719F                  // 16 SUSPEND free/soft bit
  1720F  Uint16 rsvd : 15 ;
  1721F                   // 31:17 reserved
  1722F} ;
  1723F/* Allow access to the bit fields or entire register */
  1724F
  1725Funion CANMC_REG
  1726F{
  1727F  Uint32 all ;
  1728F  struct CANMC_BITS bit ;
  1729F} ;
  1730F/* eCAN Bit -timing configuration register (CANBTC) bit definitions */
  1731F
  1732Fstruct CANBTC_BITS
  1733F{                    // bits description
  1734F  Uint16 TSEG2REG : 3 ;
  1735F                      // 2:0 TSEG2 register value
  1736F  Uint16 TSEG1REG : 4 ;
  1737F                      // 6:3 TSEG1 register value
  1738F  Uint16 SAM : 1 ;
  1739F                 // 7 Sample-point setting
  1740F  Uint16 SJWREG : 2 ;
  1741F                    // 9:8 Synchroniztion Jump Width register value
  1742F  Uint16 rsvd1 : 6 ;
  1743F                   // 15:10 reserved
  1744F  Uint16 BRPREG : 8 ;
  1745F                    // 23:16 Baudrate prescaler register value
  1746F  Uint16 rsvd2 : 8 ;
  1747F                   // 31:24 reserved
  1748F} ;
  1749F/* Allow access to the bit fields or entire register */
  1750F
  1751Funion CANBTC_REG
  1752F{
  1753F  Uint32 all ;
  1754F  struct CANBTC_BITS bit ;
  1755F} ;
  1756F/* eCAN Error & Status register (CANES) bit definitions */
  1757F
  1758Fstruct CANES_BITS
  1759F{                   // bits description
  1760F  Uint16 TM : 1 ;
  1761F                // 0 Transmit Mode
  1762F  Uint16 RM : 1 ;
  1763F                // 1 Receive Mode
  1764F  Uint16 rsvd1 : 1 ;
  1765F                   // 2 reserved
  1766F  Uint16 PDA : 1 ;
  1767F                 // 3 Power-down acknowledge
  1768F  Uint16 CCE : 1 ;
  1769F                 // 4 Change Configuration Enable
  1770F  Uint16 SMA : 1 ;
  1771F                 // 5 Suspend Mode Acknowledge
  1772F  Uint16 rsvd2 : 10 ;
  1773F                    // 15:6 reserved
  1774F  Uint16 EW : 1 ;
  1775F                // 16 Warning status
  1776F  Uint16 EP : 1 ;
  1777F                // 17 Error Passive status
  1778F  Uint16 BO : 1 ;
  1779F                // 18 Bus-off status
  1780F  Uint16 ACKE : 1 ;
  1781F                  // 19 Acknowledge error
  1782F  Uint16 SE : 1 ;
  1783F                // 20 Stuff error
  1784F  Uint16 CRCE : 1 ;
  1785F                  // 21 CRC error
  1786F  Uint16 SA1 : 1 ;
  1787F                 // 22 Stuck at Dominant error
  1788F  Uint16 BE : 1 ;
  1789F                // 23 Bit error
  1790F  Uint16 FE : 1 ;
  1791F                // 24 Framing error
  1792F  Uint16 rsvd3 : 7 ;
  1793F                   // 31:25 reserved
  1794F} ;
  1795F/* Allow access to the bit fields or entire register */
  1796F
  1797Funion CANES_REG
  1798F{
  1799F  Uint32 all ;
  1800F  struct CANES_BITS bit ;
  1801F} ;
  1802F/* eCAN Transmit Error Counter register (CANTEC) bit definitions */
  1803F
  1804Fstruct CANTEC_BITS
  1805F{                    // bits description
  1806F  Uint16 TEC : 8 ;
  1807F                 // 7:0 TEC
  1808F  Uint16 rsvd1 : 8 ;
  1809F                   // 15:8 reserved
  1810F  Uint16 rsvd2 : 16 ;
  1811F                    // 31:16 reserved
  1812F} ;
  1813F/* Allow access to the bit fields or entire register */
  1814F
  1815Funion CANTEC_REG
  1816F{
  1817F  Uint32 all ;
  1818F  struct CANTEC_BITS bit ;
  1819F} ;
  1820F/* eCAN Receive Error Counter register (CANREC) bit definitions */
  1821F
  1822Fstruct CANREC_BITS
  1823F{                    // bits description
  1824F  Uint16 REC : 8 ;
  1825F                 // 7:0 REC
  1826F  Uint16 rsvd1 : 8 ;
  1827F                   // 15:8 reserved
  1828F  Uint16 rsvd2 : 16 ;
  1829F                    // 31:16 reserved
  1830F} ;
  1831F/* Allow access to the bit fields or entire register */
  1832F
  1833Funion CANREC_REG
  1834F{
  1835F  Uint32 all ;
  1836F  struct CANREC_BITS bit ;
  1837F} ;
  1838F/* eCAN Global Interrupt Flag 0 (CANGIF0) bit definitions */
  1839F
  1840Fstruct CANGIF0_BITS
  1841F{                     // bits description
  1842F  Uint16 MIV0 : 5 ;
  1843F                  // 4:0 Mailbox Interrupt Vector
  1844F  Uint16 rsvd1 : 3 ;
  1845F                   // 7:5 reserved
  1846F  Uint16 WLIF0 : 1 ;
  1847F                   // 8 Warning level interrupt flag
  1848F  Uint16 EPIF0 : 1 ;
  1849F                   // 9 Error-passive interrupt flag
  1850F  Uint16 BOIF0 : 1 ;
  1851F                   // 10 Bus-off interrupt flag
  1852F  Uint16 RMLIF0 : 1 ;
  1853F                    // 11 Received message lost interrupt flag
  1854F  Uint16 WUIF0 : 1 ;
  1855F                   // 12 Wakeup interrupt flag
  1856F  Uint16 WDIF0 : 1 ;
  1857F                   // 13 Write denied interrupt flag
  1858F  Uint16 AAIF0 : 1 ;
  1859F                   // 14 Abort Ack interrupt flag
  1860F  Uint16 GMIF0 : 1 ;
  1861F                   // 15 Global MBX interrupt flag
  1862F  Uint16 TCOF0 : 1 ;
  1863F                   // 16 TSC Overflow flag
  1864F  Uint16 MTOF0 : 1 ;
  1865F                   // 17 Mailbox Timeout flag
  1866F  Uint16 rsvd2 : 14 ;
  1867F                    // 31:18 reserved
  1868F} ;
  1869F/* Allow access to the bit fields or entire register */
  1870F
  1871Funion CANGIF0_REG
  1872F{
  1873F  Uint32 all ;
  1874F  struct CANGIF0_BITS bit ;
  1875F} ;
  1876F/* eCAN Global Interrupt Mask register (CANGIM) bit definitions */
  1877F
  1878Fstruct CANGIM_BITS
  1879F{                    // bits description
  1880F  Uint16 I0EN : 1 ;
  1881F                  // 0 Interrupt 0 enable
  1882F  Uint16 I1EN : 1 ;
  1883F                  // 1 Interrupt 1 enable
  1884F  Uint16 GIL : 1 ;
  1885F                 // 2 Global Interrupt Level
  1886F  Uint16 rsvd1 : 5 ;
  1887F                   // 7:3 reserved
  1888F  Uint16 WLIM : 1 ;
  1889F                  // 8 Warning level interrupt mask
  1890F  Uint16 EPIM : 1 ;
  1891F                  // 9 Error-passive interrupt mask
  1892F  Uint16 BOIM : 1 ;
  1893F                  // 10 Bus-off interrupt mask
  1894F  Uint16 RMLIM : 1 ;
  1895F                   // 11 Received message lost interrupt mask
  1896F  Uint16 WUIM : 1 ;
  1897F                  // 12 Wakeup interrupt mask
  1898F  Uint16 WDIM : 1 ;
  1899F                  // 13 Write denied interrupt mask
  1900F  Uint16 AAIM : 1 ;
  1901F                  // 14 Abort Ack interrupt mask
  1902F  Uint16 rsvd2 : 1 ;
  1903F                   // 15 reserved
  1904F  Uint16 TCOM : 1 ;
  1905F                  // 16 TSC overflow interrupt mask
  1906F  Uint16 MTOM : 1 ;
  1907F                  // 17 MBX Timeout interrupt mask
  1908F  Uint16 rsvd3 : 14 ;
  1909F                    // 31:18 reserved
  1910F} ;
  1911F/* Allow access to the bit fields or entire register */
  1912F
  1913Funion CANGIM_REG
  1914F{
  1915F  Uint32 all ;
  1916F  struct CANGIM_BITS bit ;
  1917F} ;
  1918F/* eCAN Global Interrupt Flag 1 (eCANGIF1) bit definitions */
  1919F
  1920Fstruct CANGIF1_BITS
  1921F{                     // bits description
  1922F  Uint16 MIV1 : 5 ;
  1923F                  // 4:0 Mailbox Interrupt Vector
  1924F  Uint16 rsvd1 : 3 ;
  1925F                   // 7:5 reserved
  1926F  Uint16 WLIF1 : 1 ;
  1927F                   // 8 Warning level interrupt flag
  1928F  Uint16 EPIF1 : 1 ;
  1929F                   // 9 Error-passive interrupt flag
  1930F  Uint16 BOIF1 : 1 ;
  1931F                   // 10 Bus-off interrupt flag
  1932F  Uint16 RMLIF1 : 1 ;
  1933F                    // 11 Received message lost interrupt flag
  1934F  Uint16 WUIF1 : 1 ;
  1935F                   // 12 Wakeup interrupt flag
  1936F  Uint16 WDIF1 : 1 ;
  1937F                   // 13 Write denied interrupt flag
  1938F  Uint16 AAIF1 : 1 ;
  1939F                   // 14 Abort Ack interrupt flag
  1940F  Uint16 GMIF1 : 1 ;
  1941F                   // 15 Global MBX interrupt flag
  1942F  Uint16 TCOF1 : 1 ;
  1943F                   // 16 TSC Overflow flag
  1944F  Uint16 MTOF1 : 1 ;
  1945F                   // 17 Mailbox Timeout flag
  1946F  Uint16 rsvd2 : 14 ;
  1947F                    // 31:18 reserved
  1948F} ;
  1949F/* Allow access to the bit fields or entire register */
  1950F
  1951Funion CANGIF1_REG
  1952F{
  1953F  Uint32 all ;
  1954F  struct CANGIF1_BITS bit ;
  1955F} ;
  1956F/* eCAN Mailbox Interrupt Mask register (CANMIM) bit definitions */
  1957F
  1958Fstruct CANMIM_BITS
  1959F{                    // bit description
  1960F  Uint16 MIM0 : 1 ;
  1961F                  // 0 MIM for Mailbox 0
  1962F  Uint16 MIM1 : 1 ;
  1963F                  // 1 MIM for Mailbox 1
  1964F  Uint16 MIM2 : 1 ;
  1965F                  // 2 MIM for Mailbox 2
  1966F  Uint16 MIM3 : 1 ;
  1967F                  // 3 MIM for Mailbox 3
  1968F  Uint16 MIM4 : 1 ;
  1969F                  // 4 MIM for Mailbox 4
  1970F  Uint16 MIM5 : 1 ;
  1971F                  // 5 MIM for Mailbox 5
  1972F  Uint16 MIM6 : 1 ;
  1973F                  // 6 MIM for Mailbox 6
  1974F  Uint16 MIM7 : 1 ;
  1975F                  // 7 MIM for Mailbox 7
  1976F  Uint16 MIM8 : 1 ;
  1977F                  // 8 MIM for Mailbox 8
  1978F  Uint16 MIM9 : 1 ;
  1979F                  // 9 MIM for Mailbox 9
  1980F  Uint16 MIM10 : 1 ;
  1981F                   // 10 MIM for Mailbox 10
  1982F  Uint16 MIM11 : 1 ;
  1983F                   // 11 MIM for Mailbox 11
  1984F  Uint16 MIM12 : 1 ;
  1985F                   // 12 MIM for Mailbox 12
  1986F  Uint16 MIM13 : 1 ;
  1987F                   // 13 MIM for Mailbox 13
  1988F  Uint16 MIM14 : 1 ;
  1989F                   // 14 MIM for Mailbox 14
  1990F  Uint16 MIM15 : 1 ;
  1991F                   // 15 MIM for Mailbox 15
  1992F  Uint16 MIM16 : 1 ;
  1993F                   // 16 MIM for Mailbox 16
  1994F  Uint16 MIM17 : 1 ;
  1995F                   // 17 MIM for Mailbox 17
  1996F  Uint16 MIM18 : 1 ;
  1997F                   // 18 MIM for Mailbox 18
  1998F  Uint16 MIM19 : 1 ;
  1999F                   // 19 MIM for Mailbox 19
  2000F  Uint16 MIM20 : 1 ;
  2001F                   // 20 MIM for Mailbox 20
  2002F  Uint16 MIM21 : 1 ;
  2003F                   // 21 MIM for Mailbox 21
  2004F  Uint16 MIM22 : 1 ;
  2005F                   // 22 MIM for Mailbox 22
  2006F  Uint16 MIM23 : 1 ;
  2007F                   // 23 MIM for Mailbox 23
  2008F  Uint16 MIM24 : 1 ;
  2009F                   // 24 MIM for Mailbox 24
  2010F  Uint16 MIM25 : 1 ;
  2011F                   // 25 MIM for Mailbox 25
  2012F  Uint16 MIM26 : 1 ;
  2013F                   // 26 MIM for Mailbox 26
  2014F  Uint16 MIM27 : 1 ;
  2015F                   // 27 MIM for Mailbox 27
  2016F  Uint16 MIM28 : 1 ;
  2017F                   // 28 MIM for Mailbox 28
  2018F  Uint16 MIM29 : 1 ;
  2019F                   // 29 MIM for Mailbox 29
  2020F  Uint16 MIM30 : 1 ;
  2021F                   // 30 MIM for Mailbox 30
  2022F  Uint16 MIM31 : 1 ;
  2023F                   // 31 MIM for Mailbox 31
  2024F} ;
  2025F/* Allow access to the bit fields or entire register */
  2026F
  2027Funion CANMIM_REG
  2028F{
  2029F  Uint32 all ;
  2030F  struct CANMIM_BITS bit ;
  2031F} ;
  2032F/* eCAN Mailbox Interrupt Level register (CANMIL) bit definitions */
  2033F
  2034Fstruct CANMIL_BITS
  2035F{                    // bit description
  2036F  Uint16 MIL0 : 1 ;
  2037F                  // 0 0 -> Int 9.5 1 -> Int 9.6
  2038F  Uint16 MIL1 : 1 ;
  2039F                  // 1 0 -> Int 9.5 1 -> Int 9.6
  2040F  Uint16 MIL2 : 1 ;
  2041F                  // 2 0 -> Int 9.5 1 -> Int 9.6
  2042F  Uint16 MIL3 : 1 ;
  2043F                  // 3 0 -> Int 9.5 1 -> Int 9.6
  2044F  Uint16 MIL4 : 1 ;
  2045F                  // 4 0 -> Int 9.5 1 -> Int 9.6
  2046F  Uint16 MIL5 : 1 ;
  2047F                  // 5 0 -> Int 9.5 1 -> Int 9.6
  2048F  Uint16 MIL6 : 1 ;
  2049F                  // 6 0 -> Int 9.5 1 -> Int 9.6
  2050F  Uint16 MIL7 : 1 ;
  2051F                  // 7 0 -> Int 9.5 1 -> Int 9.6
  2052F  Uint16 MIL8 : 1 ;
  2053F                  // 8 0 -> Int 9.5 1 -> Int 9.6
  2054F  Uint16 MIL9 : 1 ;
  2055F                  // 9 0 -> Int 9.5 1 -> Int 9.6
  2056F  Uint16 MIL10 : 1 ;
  2057F                   // 10 0 -> Int 9.5 1 -> Int 9.6
  2058F  Uint16 MIL11 : 1 ;
  2059F                   // 11 0 -> Int 9.5 1 -> Int 9.6
  2060F  Uint16 MIL12 : 1 ;
  2061F                   // 12 0 -> Int 9.5 1 -> Int 9.6
  2062F  Uint16 MIL13 : 1 ;
  2063F                   // 13 0 -> Int 9.5 1 -> Int 9.6
  2064F  Uint16 MIL14 : 1 ;
  2065F                   // 14 0 -> Int 9.5 1 -> Int 9.6
  2066F  Uint16 MIL15 : 1 ;
  2067F                   // 15 0 -> Int 9.5 1 -> Int 9.6
  2068F  Uint16 MIL16 : 1 ;
  2069F                   // 16 0 -> Int 9.5 1 -> Int 9.6
  2070F  Uint16 MIL17 : 1 ;
  2071F                   // 17 0 -> Int 9.5 1 -> Int 9.6
  2072F  Uint16 MIL18 : 1 ;
  2073F                   // 18 0 -> Int 9.5 1 -> Int 9.6
  2074F  Uint16 MIL19 : 1 ;
  2075F                   // 19 0 -> Int 9.5 1 -> Int 9.6
  2076F  Uint16 MIL20 : 1 ;
  2077F                   // 20 0 -> Int 9.5 1 -> Int 9.6
  2078F  Uint16 MIL21 : 1 ;
  2079F                   // 21 0 -> Int 9.5 1 -> Int 9.6
  2080F  Uint16 MIL22 : 1 ;
  2081F                   // 22 0 -> Int 9.5 1 -> Int 9.6
  2082F  Uint16 MIL23 : 1 ;
  2083F                   // 23 0 -> Int 9.5 1 -> Int 9.6
  2084F  Uint16 MIL24 : 1 ;
  2085F                   // 24 0 -> Int 9.5 1 -> Int 9.6
  2086F  Uint16 MIL25 : 1 ;
  2087F                   // 25 0 -> Int 9.5 1 -> Int 9.6
  2088F  Uint16 MIL26 : 1 ;
  2089F                   // 26 0 -> Int 9.5 1 -> Int 9.6
  2090F  Uint16 MIL27 : 1 ;
  2091F                   // 27 0 -> Int 9.5 1 -> Int 9.6
  2092F  Uint16 MIL28 : 1 ;
  2093F                   // 28 0 -> Int 9.5 1 -> Int 9.6
  2094F  Uint16 MIL29 : 1 ;
  2095F                   // 29 0 -> Int 9.5 1 -> Int 9.6
  2096F  Uint16 MIL30 : 1 ;
  2097F                   // 30 0 -> Int 9.5 1 -> Int 9.6
  2098F  Uint16 MIL31 : 1 ;
  2099F                   // 31 0 -> Int 9.5 1 -> Int 9.6
  2100F} ;
  2101F/* Allow access to the bit fields or entire register */
  2102F
  2103Funion CANMIL_REG
  2104F{
  2105F  Uint32 all ;
  2106F  struct CANMIL_BITS bit ;
  2107F} ;
  2108F/* eCAN Overwrite Protection Control register (CANOPC) bit definitions */
  2109F
  2110Fstruct CANOPC_BITS
  2111F{                    // bit description
  2112F  Uint16 OPC0 : 1 ;
  2113F                  // 0 OPC for Mailbox 0
  2114F  Uint16 OPC1 : 1 ;
  2115F                  // 1 OPC for Mailbox 1
  2116F  Uint16 OPC2 : 1 ;
  2117F                  // 2 OPC for Mailbox 2
  2118F  Uint16 OPC3 : 1 ;
  2119F                  // 3 OPC for Mailbox 3
  2120F  Uint16 OPC4 : 1 ;
  2121F                  // 4 OPC for Mailbox 4
  2122F  Uint16 OPC5 : 1 ;
  2123F                  // 5 OPC for Mailbox 5
  2124F  Uint16 OPC6 : 1 ;
  2125F                  // 6 OPC for Mailbox 6
  2126F  Uint16 OPC7 : 1 ;
  2127F                  // 7 OPC for Mailbox 7
  2128F  Uint16 OPC8 : 1 ;
  2129F                  // 8 OPC for Mailbox 8
  2130F  Uint16 OPC9 : 1 ;
  2131F                  // 9 OPC for Mailbox 9
  2132F  Uint16 OPC10 : 1 ;
  2133F                   // 10 OPC for Mailbox 10
  2134F  Uint16 OPC11 : 1 ;
  2135F                   // 11 OPC for Mailbox 11
  2136F  Uint16 OPC12 : 1 ;
  2137F                   // 12 OPC for Mailbox 12
  2138F  Uint16 OPC13 : 1 ;
  2139F                   // 13 OPC for Mailbox 13
  2140F  Uint16 OPC14 : 1 ;
  2141F                   // 14 OPC for Mailbox 14
  2142F  Uint16 OPC15 : 1 ;
  2143F                   // 15 OPC for Mailbox 15
  2144F  Uint16 OPC16 : 1 ;
  2145F                   // 16 OPC for Mailbox 16
  2146F  Uint16 OPC17 : 1 ;
  2147F                   // 17 OPC for Mailbox 17
  2148F  Uint16 OPC18 : 1 ;
  2149F                   // 18 OPC for Mailbox 18
  2150F  Uint16 OPC19 : 1 ;
  2151F                   // 19 OPC for Mailbox 19
  2152F  Uint16 OPC20 : 1 ;
  2153F                   // 20 OPC for Mailbox 20
  2154F  Uint16 OPC21 : 1 ;
  2155F                   // 21 OPC for Mailbox 21
  2156F  Uint16 OPC22 : 1 ;
  2157F                   // 22 OPC for Mailbox 22
  2158F  Uint16 OPC23 : 1 ;
  2159F                   // 23 OPC for Mailbox 23
  2160F  Uint16 OPC24 : 1 ;
  2161F                   // 24 OPC for Mailbox 24
  2162F  Uint16 OPC25 : 1 ;
  2163F                   // 25 OPC for Mailbox 25
  2164F  Uint16 OPC26 : 1 ;
  2165F                   // 26 OPC for Mailbox 26
  2166F  Uint16 OPC27 : 1 ;
  2167F                   // 27 OPC for Mailbox 27
  2168F  Uint16 OPC28 : 1 ;
  2169F                   // 28 OPC for Mailbox 28
  2170F  Uint16 OPC29 : 1 ;
  2171F                   // 29 OPC for Mailbox 29
  2172F  Uint16 OPC30 : 1 ;
  2173F                   // 30 OPC for Mailbox 30
  2174F  Uint16 OPC31 : 1 ;
  2175F                   // 31 OPC for Mailbox 31
  2176F} ;
  2177F/* Allow access to the bit fields or entire register */
  2178F
  2179Funion CANOPC_REG
  2180F{
  2181F  Uint32 all ;
  2182F  struct CANOPC_BITS bit ;
  2183F} ;
  2184F/* eCAN TX I/O Control Register (CANTIOC) bit definitions */
  2185F
  2186Fstruct CANTIOC_BITS
  2187F{                     // bits description
  2188F  Uint16 rsvd1 : 3 ;
  2189F                   // 2:0 reserved
  2190F  Uint16 TXFUNC : 1 ;
  2191F                    // 3 TXFUNC
  2192F  Uint16 rsvd2 : 12 ;
  2193F                    // 15:4 reserved
  2194F  Uint16 rsvd3 : 16 ;
  2195F                    // 31:16 reserved
  2196F} ;
  2197F/* Allow access to the bit fields or entire register */
  2198F
  2199Funion CANTIOC_REG
  2200F{
  2201F  Uint32 all ;
  2202F  struct CANTIOC_BITS bit ;
  2203F} ;
  2204F/* eCAN RX I/O Control Register (CANRIOC) bit definitions */
  2205F
  2206Fstruct CANRIOC_BITS
  2207F{                     // bits description
  2208F  Uint16 rsvd1 : 3 ;
  2209F                   // 2:0 reserved
  2210F  Uint16 RXFUNC : 1 ;
  2211F                    // 3 RXFUNC
  2212F  Uint16 rsvd2 : 12 ;
  2213F                    // 15:4 reserved
  2214F  Uint16 rsvd3 : 16 ;
  2215F                    // 31:16 reserved
  2216F} ;
  2217F/* Allow access to the bit fields or entire register */
  2218F
  2219Funion CANRIOC_REG
  2220F{
  2221F  Uint32 all ;
  2222F  struct CANRIOC_BITS bit ;
  2223F} ;
  2224F/* eCAN Time-out Control register (CANTOC) bit definitions */
  2225F
  2226Fstruct CANTOC_BITS
  2227F{                    // bit description
  2228F  Uint16 TOC0 : 1 ;
  2229F                  // 0 TOC for Mailbox 0
  2230F  Uint16 TOC1 : 1 ;
  2231F                  // 1 TOC for Mailbox 1
  2232F  Uint16 TOC2 : 1 ;
  2233F                  // 2 TOC for Mailbox 2
  2234F  Uint16 TOC3 : 1 ;
  2235F                  // 3 TOC for Mailbox 3
  2236F  Uint16 TOC4 : 1 ;
  2237F                  // 4 TOC for Mailbox 4
  2238F  Uint16 TOC5 : 1 ;
  2239F                  // 5 TOC for Mailbox 5
  2240F  Uint16 TOC6 : 1 ;
  2241F                  // 6 TOC for Mailbox 6
  2242F  Uint16 TOC7 : 1 ;
  2243F                  // 7 TOC for Mailbox 7
  2244F  Uint16 TOC8 : 1 ;
  2245F                  // 8 TOC for Mailbox 8
  2246F  Uint16 TOC9 : 1 ;
  2247F                  // 9 TOC for Mailbox 9
  2248F  Uint16 TOC10 : 1 ;
  2249F                   // 10 TOC for Mailbox 10
  2250F  Uint16 TOC11 : 1 ;
  2251F                   // 11 TOC for Mailbox 11
  2252F  Uint16 TOC12 : 1 ;
  2253F                   // 12 TOC for Mailbox 12
  2254F  Uint16 TOC13 : 1 ;
  2255F                   // 13 TOC for Mailbox 13
  2256F  Uint16 TOC14 : 1 ;
  2257F                   // 14 TOC for Mailbox 14
  2258F  Uint16 TOC15 : 1 ;
  2259F                   // 15 TOC for Mailbox 15
  2260F  Uint16 TOC16 : 1 ;
  2261F                   // 16 TOC for Mailbox 16
  2262F  Uint16 TOC17 : 1 ;
  2263F                   // 17 TOC for Mailbox 17
  2264F  Uint16 TOC18 : 1 ;
  2265F                   // 18 TOC for Mailbox 18
  2266F  Uint16 TOC19 : 1 ;
  2267F                   // 19 TOC for Mailbox 19
  2268F  Uint16 TOC20 : 1 ;
  2269F                   // 20 TOC for Mailbox 20
  2270F  Uint16 TOC21 : 1 ;
  2271F                   // 21 TOC for Mailbox 21
  2272F  Uint16 TOC22 : 1 ;
  2273F                   // 22 TOC for Mailbox 22
  2274F  Uint16 TOC23 : 1 ;
  2275F                   // 23 TOC for Mailbox 23
  2276F  Uint16 TOC24 : 1 ;
  2277F                   // 24 TOC for Mailbox 24
  2278F  Uint16 TOC25 : 1 ;
  2279F                   // 25 TOC for Mailbox 25
  2280F  Uint16 TOC26 : 1 ;
  2281F                   // 26 TOC for Mailbox 26
  2282F  Uint16 TOC27 : 1 ;
  2283F                   // 27 TOC for Mailbox 27
  2284F  Uint16 TOC28 : 1 ;
  2285F                   // 28 TOC for Mailbox 28
  2286F  Uint16 TOC29 : 1 ;
  2287F                   // 29 TOC for Mailbox 29
  2288F  Uint16 TOC30 : 1 ;
  2289F                   // 30 TOC for Mailbox 30
  2290F  Uint16 TOC31 : 1 ;
  2291F                   // 31 TOC for Mailbox 31
  2292F} ;
  2293F/* Allow access to the bit fields or entire register */
  2294F
  2295Funion CANTOC_REG
  2296F{
  2297F  Uint32 all ;
  2298F  struct CANTOC_BITS bit ;
  2299F} ;
  2300F/* eCAN Time-out Status register (CANTOS) bit definitions */
  2301F
  2302Fstruct CANTOS_BITS
  2303F{                    // bit description
  2304F  Uint16 TOS0 : 1 ;
  2305F                  // 0 TOS for Mailbox 0
  2306F  Uint16 TOS1 : 1 ;
  2307F                  // 1 TOS for Mailbox 1
  2308F  Uint16 TOS2 : 1 ;
  2309F                  // 2 TOS for Mailbox 2
  2310F  Uint16 TOS3 : 1 ;
  2311F                  // 3 TOS for Mailbox 3
  2312F  Uint16 TOS4 : 1 ;
  2313F                  // 4 TOS for Mailbox 4
  2314F  Uint16 TOS5 : 1 ;
  2315F                  // 5 TOS for Mailbox 5
  2316F  Uint16 TOS6 : 1 ;
  2317F                  // 6 TOS for Mailbox 6
  2318F  Uint16 TOS7 : 1 ;
  2319F                  // 7 TOS for Mailbox 7
  2320F  Uint16 TOS8 : 1 ;
  2321F                  // 8 TOS for Mailbox 8
  2322F  Uint16 TOS9 : 1 ;
  2323F                  // 9 TOS for Mailbox 9
  2324F  Uint16 TOS10 : 1 ;
  2325F                   // 10 TOS for Mailbox 10
  2326F  Uint16 TOS11 : 1 ;
  2327F                   // 11 TOS for Mailbox 11
  2328F  Uint16 TOS12 : 1 ;
  2329F                   // 12 TOS for Mailbox 12
  2330F  Uint16 TOS13 : 1 ;
  2331F                   // 13 TOS for Mailbox 13
  2332F  Uint16 TOS14 : 1 ;
  2333F                   // 14 TOS for Mailbox 14
  2334F  Uint16 TOS15 : 1 ;
  2335F                   // 15 TOS for Mailbox 15
  2336F  Uint16 TOS16 : 1 ;
  2337F                   // 16 TOS for Mailbox 16
  2338F  Uint16 TOS17 : 1 ;
  2339F                   // 17 TOS for Mailbox 17
  2340F  Uint16 TOS18 : 1 ;
  2341F                   // 18 TOS for Mailbox 18
  2342F  Uint16 TOS19 : 1 ;
  2343F                   // 19 TOS for Mailbox 19
  2344F  Uint16 TOS20 : 1 ;
  2345F                   // 20 TOS for Mailbox 20
  2346F  Uint16 TOS21 : 1 ;
  2347F                   // 21 TOS for Mailbox 21
  2348F  Uint16 TOS22 : 1 ;
  2349F                   // 22 TOS for Mailbox 22
  2350F  Uint16 TOS23 : 1 ;
  2351F                   // 23 TOS for Mailbox 23
  2352F  Uint16 TOS24 : 1 ;
  2353F                   // 24 TOS for Mailbox 24
  2354F  Uint16 TOS25 : 1 ;
  2355F                   // 25 TOS for Mailbox 25
  2356F  Uint16 TOS26 : 1 ;
  2357F                   // 26 TOS for Mailbox 26
  2358F  Uint16 TOS27 : 1 ;
  2359F                   // 27 TOS for Mailbox 27
  2360F  Uint16 TOS28 : 1 ;
  2361F                   // 28 TOS for Mailbox 28
  2362F  Uint16 TOS29 : 1 ;
  2363F                   // 29 TOS for Mailbox 29
  2364F  Uint16 TOS30 : 1 ;
  2365F                   // 30 TOS for Mailbox 30
  2366F  Uint16 TOS31 : 1 ;
  2367F                   // 31 TOS for Mailbox 31
  2368F} ;
  2369F/* Allow access to the bit fields or entire register */
  2370F
  2371Funion CANTOS_REG
  2372F{
  2373F  Uint32 all ;
  2374F  struct CANTOS_BITS bit ;
  2375F} ;
  2376F/**************************************/
  2377F/* eCAN Control & Status register file */
  2378F/**************************************/
  2379F
  2380Fstruct ECAN_REGS
  2381F{
  2382F  union CANME_REG CANME ; // Mailbox Enable
  2383F  union CANMD_REG CANMD ; // Mailbox Direction
  2384F  union CANTRS_REG CANTRS ; // Transmit Request Set
  2385F  union CANTRR_REG CANTRR ; // Transmit Request Reset
  2386F  union CANTA_REG CANTA ; // Transmit Acknowledge
  2387F  union CANAA_REG CANAA ; // Abort Acknowledge
  2388F  union CANRMP_REG CANRMP ; // Received Message Pending
  2389F  union CANRML_REG CANRML ; // Received Message Lost
  2390F  union CANRFP_REG CANRFP ; // Remote Frame Pending
  2391F  union CANGAM_REG CANGAM ; // Global Acceptance Mask
  2392F  union CANMC_REG CANMC ; // Master Control
  2393F  union CANBTC_REG CANBTC ; // Bit Timing
  2394F  union CANES_REG CANES ; // Error Status
  2395F  union CANTEC_REG CANTEC ; // Transmit Error Counter
  2396F  union CANREC_REG CANREC ; // Receive Error Counter
  2397F  union CANGIF0_REG CANGIF0 ; // Global Interrupt Flag 0
  2398F  union CANGIM_REG CANGIM ; // Global Interrupt Mask 0
  2399F  union CANGIF1_REG CANGIF1 ; // Global Interrupt Flag 1
  2400F  union CANMIM_REG CANMIM ; // Mailbox Interrupt Mask
  2401F  union CANMIL_REG CANMIL ; // Mailbox Interrupt Level
  2402F  union CANOPC_REG CANOPC ; // Overwrite Protection Control
  2403F  union CANTIOC_REG CANTIOC ; // TX I/O Control
  2404F  union CANRIOC_REG CANRIOC ; // RX I/O Control
  2405F  Uint32 CANTSC ; // Time-stamp counter
  2406F  union CANTOC_REG CANTOC ; // Time-out Control
  2407F  union CANTOS_REG CANTOS ; // Time-out Status
  2408F} ;
  2409F/* --------------------------------------------------- */
  2410F/* eCAN Mailbox Registers */
  2411F/* ----------------------------------------------------*/
  2412F/* eCAN Message ID (MSGID) bit definitions */
  2413F
  2414Fstruct CANMSGID_BITS
  2415F{                      // bits description
  2416F  Uint16 EXTMSGID_L : 16 ;
  2417F                         // 0:15
  2418F  Uint16 EXTMSGID_H : 2 ;
  2419F                        // 16:17
  2420F  Uint16 STDMSGID : 11 ;
  2421F                       // 18:28
  2422F  Uint16 AAM : 1 ;
  2423F                 // 29
  2424F  Uint16 AME : 1 ;
  2425F                 // 30
  2426F  Uint16 IDE : 1 ;
  2427F                 // 31
  2428F} ;
  2429F/* Allow access to the bit fields or entire register */
  2430F
  2431Funion CANMSGID_REG
  2432F{
  2433F  Uint32 all ;
  2434F  struct CANMSGID_BITS bit ;
  2435F} ;
  2436F/* eCAN Message Control Register (MSGCTRL) bit definitions */
  2437F
  2438Fstruct CANMSGCTRL_BITS
  2439F{                        // bits description
  2440F  Uint16 DLC : 4 ;
  2441F                 // 0:3
  2442F  Uint16 RTR : 1 ;
  2443F                 // 4
  2444F  Uint16 rsvd1 : 3 ;
  2445F                   // 7:5 reserved
  2446F  Uint16 TPL : 5 ;
  2447F                 // 12:8
  2448F  Uint16 rsvd2 : 3 ;
  2449F                   // 15:13 reserved
  2450F  Uint16 rsvd3 : 16 ;
  2451F                    // 31:16 reserved
  2452F} ;
  2453F/* Allow access to the bit fields or entire register */
  2454F
  2455Funion CANMSGCTRL_REG
  2456F{
  2457F  Uint32 all ;
  2458F  struct CANMSGCTRL_BITS bit ;
  2459F} ;
  2460F/* eCAN Message Data Register low (MDR_L) word definitions */
  2461F
  2462Fstruct CANMDL_WORDS
  2463F{                     // bits description
  2464F  Uint16 LOW_WORD : 16 ;
  2465F                       // 0:15
  2466F  Uint16 HI_WORD : 16 ;
  2467F                      // 31:16
  2468F} ;
  2469F/* eCAN Message Data Register low (MDR_L) byte definitions */
  2470F
  2471Fstruct CANMDL_BYTES
  2472F{                     // bits description
  2473F  Uint16 BYTE3 : 8 ;
  2474F                   // 31:24
  2475F  Uint16 BYTE2 : 8 ;
  2476F                   // 23:16
  2477F  Uint16 BYTE1 : 8 ;
  2478F                   // 15:8
  2479F  Uint16 BYTE0 : 8 ;
  2480F                   // 7:0
  2481F} ;
  2482F/* Allow access to the bit fields or entire register */
  2483F
  2484Funion CANMDL_REG
  2485F{
  2486F  Uint32 all ;
  2487F  struct CANMDL_WORDS word ;
  2488F  struct CANMDL_BYTES byte ;
  2489F} ;
  2490F/* eCAN Message Data Register high (MDR_H) word definitions */
  2491F
  2492Fstruct CANMDH_WORDS
  2493F{                     // bits description
  2494F  Uint16 LOW_WORD : 16 ;
  2495F                       // 0:15
  2496F  Uint16 HI_WORD : 16 ;
  2497F                      // 31:16
  2498F} ;
  2499F/* eCAN Message Data Register low (MDR_H) byte definitions */
  2500F
  2501Fstruct CANMDH_BYTES
  2502F{                     // bits description
  2503F  Uint16 BYTE7 : 8 ;
  2504F                   // 63:56
  2505F  Uint16 BYTE6 : 8 ;
  2506F                   // 55:48
  2507F  Uint16 BYTE5 : 8 ;
  2508F                   // 47:40
  2509F  Uint16 BYTE4 : 8 ;
  2510F                   // 39:32
  2511F} ;
  2512F/* Allow access to the bit fields or entire register */
  2513F
  2514Funion CANMDH_REG
  2515F{
  2516F  Uint32 all ;
  2517F  struct CANMDH_WORDS word ;
  2518F  struct CANMDH_BYTES byte ;
  2519F} ;
  2520F
  2521Fstruct MBOX
  2522F{
  2523F  union CANMSGID_REG MSGID ;
  2524F  union CANMSGCTRL_REG MSGCTRL ;
  2525F  union CANMDL_REG MDL ;
  2526F  union CANMDH_REG MDH ;
  2527F} ;
  2528F/**************************************/
  2529F/* eCAN Mailboxes */
  2530F/**************************************/
  2531F
  2532Fstruct ECAN_MBOXES
  2533F{
  2534F  struct MBOX MBOX0 ;
  2535F  struct MBOX MBOX1 ;
  2536F  struct MBOX MBOX2 ;
  2537F  struct MBOX MBOX3 ;
  2538F  struct MBOX MBOX4 ;
  2539F  struct MBOX MBOX5 ;
  2540F  struct MBOX MBOX6 ;
  2541F  struct MBOX MBOX7 ;
  2542F  struct MBOX MBOX8 ;
  2543F  struct MBOX MBOX9 ;
  2544F  struct MBOX MBOX10 ;
  2545F  struct MBOX MBOX11 ;
  2546F  struct MBOX MBOX12 ;
  2547F  struct MBOX MBOX13 ;
  2548F  struct MBOX MBOX14 ;
  2549F  struct MBOX MBOX15 ;
  2550F  struct MBOX MBOX16 ;
  2551F  struct MBOX MBOX17 ;
  2552F  struct MBOX MBOX18 ;
  2553F  struct MBOX MBOX19 ;
  2554F  struct MBOX MBOX20 ;
  2555F  struct MBOX MBOX21 ;
  2556F  struct MBOX MBOX22 ;
  2557F  struct MBOX MBOX23 ;
  2558F  struct MBOX MBOX24 ;
  2559F  struct MBOX MBOX25 ;
  2560F  struct MBOX MBOX26 ;
  2561F  struct MBOX MBOX27 ;
  2562F  struct MBOX MBOX28 ;
  2563F  struct MBOX MBOX29 ;
  2564F  struct MBOX MBOX30 ;
  2565F  struct MBOX MBOX31 ;
  2566F} ;
  2567F/* eCAN Local Acceptance Mask (LAM) bit definitions */
  2568F
  2569Fstruct CANLAM_BITS
  2570F{                    // bits description
  2571F  Uint16 LAM_L : 16 ;
  2572F                    // 0:15
  2573F  Uint16 LAM_H : 13 ;
  2574F                    // 16:28
  2575F  Uint16 rsvd1 : 2 ;
  2576F                   // 29:30 reserved
  2577F  Uint16 LAMI : 1 ;
  2578F                  // 31
  2579F} ;
  2580F/* Allow access to the bit fields or entire register */
  2581F
  2582Funion CANLAM_REG
  2583F{
  2584F  Uint32 all ;
  2585F  struct CANLAM_BITS bit ;
  2586F} ;
  2587F/**************************************/
  2588F/* eCAN Local Acceptance Masks */
  2589F/**************************************/
  2590F/* eCAN LAM File */
  2591F
  2592Fstruct LAM_REGS
  2593F{
  2594F  union CANLAM_REG LAM0 ;
  2595F  union CANLAM_REG LAM1 ;
  2596F  union CANLAM_REG LAM2 ;
  2597F  union CANLAM_REG LAM3 ;
  2598F  union CANLAM_REG LAM4 ;
  2599F  union CANLAM_REG LAM5 ;
  2600F  union CANLAM_REG LAM6 ;
  2601F  union CANLAM_REG LAM7 ;
  2602F  union CANLAM_REG LAM8 ;
  2603F  union CANLAM_REG LAM9 ;
  2604F  union CANLAM_REG LAM10 ;
  2605F  union CANLAM_REG LAM11 ;
  2606F  union CANLAM_REG LAM12 ;
  2607F  union CANLAM_REG LAM13 ;
  2608F  union CANLAM_REG LAM14 ;
  2609F  union CANLAM_REG LAM15 ;
  2610F  union CANLAM_REG LAM16 ;
  2611F  union CANLAM_REG LAM17 ;
  2612F  union CANLAM_REG LAM18 ;
  2613F  union CANLAM_REG LAM19 ;
  2614F  union CANLAM_REG LAM20 ;
  2615F  union CANLAM_REG LAM21 ;
  2616F  union CANLAM_REG LAM22 ;
  2617F  union CANLAM_REG LAM23 ;
  2618F  union CANLAM_REG LAM24 ;
  2619F  union CANLAM_REG LAM25 ;
  2620F  union CANLAM_REG LAM26 ;
  2621F  union CANLAM_REG LAM27 ;
  2622F  union CANLAM_REG LAM28 ;
  2623F  union CANLAM_REG LAM29 ;
  2624F  union CANLAM_REG LAM30 ;
  2625F  union CANLAM_REG LAM31 ;
  2626F} ;
  2627F/* Mailbox MOTS File */
  2628F
  2629Fstruct MOTS_REGS
  2630F{
  2631F  Uint32 MOTS0 ;
  2632F  Uint32 MOTS1 ;
  2633F  Uint32 MOTS2 ;
  2634F  Uint32 MOTS3 ;
  2635F  Uint32 MOTS4 ;
  2636F  Uint32 MOTS5 ;
  2637F  Uint32 MOTS6 ;
  2638F  Uint32 MOTS7 ;
  2639F  Uint32 MOTS8 ;
  2640F  Uint32 MOTS9 ;
  2641F  Uint32 MOTS10 ;
  2642F  Uint32 MOTS11 ;
  2643F  Uint32 MOTS12 ;
  2644F  Uint32 MOTS13 ;
  2645F  Uint32 MOTS14 ;
  2646F  Uint32 MOTS15 ;
  2647F  Uint32 MOTS16 ;
  2648F  Uint32 MOTS17 ;
  2649F  Uint32 MOTS18 ;
  2650F  Uint32 MOTS19 ;
  2651F  Uint32 MOTS20 ;
  2652F  Uint32 MOTS21 ;
  2653F  Uint32 MOTS22 ;
  2654F  Uint32 MOTS23 ;
  2655F  Uint32 MOTS24 ;
  2656F  Uint32 MOTS25 ;
  2657F  Uint32 MOTS26 ;
  2658F  Uint32 MOTS27 ;
  2659F  Uint32 MOTS28 ;
  2660F  Uint32 MOTS29 ;
  2661F  Uint32 MOTS30 ;
  2662F  Uint32 MOTS31 ;
  2663F} ;
  2664F/* Mailbox MOTO File */
  2665F
  2666Fstruct MOTO_REGS
  2667F{
  2668F  Uint32 MOTO0 ;
  2669F  Uint32 MOTO1 ;
  2670F  Uint32 MOTO2 ;
  2671F  Uint32 MOTO3 ;
  2672F  Uint32 MOTO4 ;
  2673F  Uint32 MOTO5 ;
  2674F  Uint32 MOTO6 ;
  2675F  Uint32 MOTO7 ;
  2676F  Uint32 MOTO8 ;
  2677F  Uint32 MOTO9 ;
  2678F  Uint32 MOTO10 ;
  2679F  Uint32 MOTO11 ;
  2680F  Uint32 MOTO12 ;
  2681F  Uint32 MOTO13 ;
  2682F  Uint32 MOTO14 ;
  2683F  Uint32 MOTO15 ;
  2684F  Uint32 MOTO16 ;
  2685F  Uint32 MOTO17 ;
  2686F  Uint32 MOTO18 ;
  2687F  Uint32 MOTO19 ;
  2688F  Uint32 MOTO20 ;
  2689F  Uint32 MOTO21 ;
  2690F  Uint32 MOTO22 ;
  2691F  Uint32 MOTO23 ;
  2692F  Uint32 MOTO24 ;
  2693F  Uint32 MOTO25 ;
  2694F  Uint32 MOTO26 ;
  2695F  Uint32 MOTO27 ;
  2696F  Uint32 MOTO28 ;
  2697F  Uint32 MOTO29 ;
  2698F  Uint32 MOTO30 ;
  2699F  Uint32 MOTO31 ;
  2700F} ;
  2701F//---------------------------------------------------------------------------
  2702F// eCAN External References & Function Declarations:
  2703F//
  2704F
  2705Fextern volatile struct ECAN_REGS
  2706F  ECanaRegs ;
  2707F
  2708Fextern volatile struct ECAN_MBOXES
  2709F  ECanaMboxes ;
  2710F
  2711Fextern volatile struct LAM_REGS
  2712F  ECanaLAMRegs ;
  2713F
  2714Fextern volatile struct MOTO_REGS
  2715F  ECanaMOTORegs ;
  2716F
  2717Fextern volatile struct MOTS_REGS
  2718F  ECanaMOTSRegs ;
  2719F
  2720Fextern volatile struct ECAN_REGS
  2721F  ECanbRegs ;
  2722F
  2723Fextern volatile struct ECAN_MBOXES
  2724F  ECanbMboxes ;
  2725F
  2726Fextern volatile struct LAM_REGS
  2727F  ECanbLAMRegs ;
  2728F
  2729Fextern volatile struct MOTO_REGS
  2730F  ECanbMOTORegs ;
  2731F
  2732Fextern volatile struct MOTS_REGS
  2733F  ECanbMOTSRegs ;
  2734F       /* extern "C" */
  2735F       // end of DSP2833x_ECAN.H definition
  2736F//===========================================================================
  2737F// End of file.
  2738F//===========================================================================
  2739F 
  2740F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECan.h*/
  2741F/*   CLOSE_FILE Include File */
  2742F 
  2743F               // Enhanced eCAN Registers
  2744F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECap.h */
  2745F// TI File $Revision: /main/1 $
  2746F// Checkin $Date: August 18, 2006 13:52:07 $
  2747F//###########################################################################
  2748F//
  2749F// FILE: DSP2833x_ECap.h
  2750F//
  2751F// TITLE: DSP2833x Enhanced Capture Module Register Bit Definitions.
  2752F//
  2753F//###########################################################################
  2754F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  2755F// $Release Date: August 4, 2009 $
  2756F//###########################################################################
  2757F#ifndef DSP2833x_ECAP_H
  2758F#define DSP2833x_ECAP_H
  2759F//----------------------------------------------------
  2760F// Capture control register 1 bit definitions */
  2761F
  2762Fstruct ECCTL1_BITS
  2763F{                    // bits description
  2764F  Uint16 CAP1POL : 1 ;
  2765F                     // 0 Capture Event 1 Polarity select
  2766F  Uint16 CTRRST1 : 1 ;
  2767F                     // 1 Counter Reset on Capture Event 1
  2768F  Uint16 CAP2POL : 1 ;
  2769F                     // 2 Capture Event 2 Polarity select
  2770F  Uint16 CTRRST2 : 1 ;
  2771F                     // 3 Counter Reset on Capture Event 2
  2772F  Uint16 CAP3POL : 1 ;
  2773F                     // 4 Capture Event 3 Polarity select
  2774F  Uint16 CTRRST3 : 1 ;
  2775F                     // 5 Counter Reset on Capture Event 3
  2776F  Uint16 CAP4POL : 1 ;
  2777F                     // 6 Capture Event 4 Polarity select
  2778F  Uint16 CTRRST4 : 1 ;
  2779F                     // 7 Counter Reset on Capture Event 4
  2780F  Uint16 CAPLDEN : 1 ;
  2781F                     // 8 Enable Loading CAP1-4 regs on a Cap Event
  2782F  Uint16 PRESCALE : 5 ;
  2783F                      // 13:9 Event Filter prescale select
  2784F  Uint16 FREE_SOFT : 2 ;
  2785F                       // 15:14 Emulation mode
  2786F} ;
  2787F
  2788Funion ECCTL1_REG
  2789F{
  2790F  Uint16 all ;
  2791F  struct ECCTL1_BITS bit ;
  2792F} ;
  2793F// In V1.1 the STOPVALUE bit field was changed to
  2794F// STOP_WRAP. This correlated to a silicon change from
  2795F// F2833x Rev 0 to Rev A.
  2796F//----------------------------------------------------
  2797F// Capture control register 2 bit definitions */
  2798F
  2799Fstruct ECCTL2_BITS
  2800F{                    // bits description
  2801F  Uint16 CONT_ONESHT : 1 ;
  2802F                         // 0 Continuous or one-shot
  2803F  Uint16 STOP_WRAP : 2 ;
  2804F                       // 2:1 Stop value for one-shot, Wrap for continuous
  2805F  Uint16 REARM : 1 ;
  2806F                   // 3 One-shot re-arm
  2807F  Uint16 TSCTRSTOP : 1 ;
  2808F                       // 4 TSCNT counter stop
  2809F  Uint16 SYNCI_EN : 1 ;
  2810F                      // 5 Counter sync-in select
  2811F  Uint16 SYNCO_SEL : 2 ;
  2812F                       // 7:6 Sync-out mode
  2813F  Uint16 SWSYNC : 1 ;
  2814F                    // 8 SW forced counter sync
  2815F  Uint16 CAP_APWM : 1 ;
  2816F                      // 9 CAP/APWM operating mode select
  2817F  Uint16 APWMPOL : 1 ;
  2818F                     // 10 APWM output polarity select
  2819F  Uint16 rsvd1 : 5 ;
  2820F                   // 15:11
  2821F} ;
  2822F
  2823Funion ECCTL2_REG
  2824F{
  2825F  Uint16 all ;
  2826F  struct ECCTL2_BITS bit ;
  2827F} ;
  2828F//----------------------------------------------------
  2829F// ECAP interrupt enable register bit definitions */
  2830F
  2831Fstruct ECEINT_BITS
  2832F{                    // bits description
  2833F  Uint16 rsvd1 : 1 ;
  2834F                   // 0 reserved
  2835F  Uint16 CEVT1 : 1 ;
  2836F                   // 1 Capture Event 1 Interrupt Enable
  2837F  Uint16 CEVT2 : 1 ;
  2838F                   // 2 Capture Event 2 Interrupt Enable
  2839F  Uint16 CEVT3 : 1 ;
  2840F                   // 3 Capture Event 3 Interrupt Enable
  2841F  Uint16 CEVT4 : 1 ;
  2842F                   // 4 Capture Event 4 Interrupt Enable
  2843F  Uint16 CTROVF : 1 ;
  2844F                    // 5 Counter Overflow Interrupt Enable
  2845F  Uint16 CTR_EQ_PRD : 1 ;
  2846F                        // 6 Period Equal Interrupt Enable
  2847F  Uint16 CTR_EQ_CMP : 1 ;
  2848F                        // 7 Compare Equal Interrupt Enable
  2849F  Uint16 rsvd2 : 8 ;
  2850F                   // 15:8 reserved
  2851F} ;
  2852F
  2853Funion ECEINT_REG
  2854F{
  2855F  Uint16 all ;
  2856F  struct ECEINT_BITS bit ;
  2857F} ;
  2858F//----------------------------------------------------
  2859F// ECAP interrupt flag register bit definitions */
  2860F
  2861Fstruct ECFLG_BITS
  2862F{                   // bits description
  2863F  Uint16 INT : 1 ;
  2864F                 // 0 Global Flag
  2865F  Uint16 CEVT1 : 1 ;
  2866F                   // 1 Capture Event 1 Interrupt Flag
  2867F  Uint16 CEVT2 : 1 ;
  2868F                   // 2 Capture Event 2 Interrupt Flag
  2869F  Uint16 CEVT3 : 1 ;
  2870F                   // 3 Capture Event 3 Interrupt Flag
  2871F  Uint16 CEVT4 : 1 ;
  2872F                   // 4 Capture Event 4 Interrupt Flag
  2873F  Uint16 CTROVF : 1 ;
  2874F                    // 5 Counter Overflow Interrupt Flag
  2875F  Uint16 CTR_EQ_PRD : 1 ;
  2876F                        // 6 Period Equal Interrupt Flag
  2877F  Uint16 CTR_EQ_CMP : 1 ;
  2878F                        // 7 Compare Equal Interrupt Flag
  2879F  Uint16 rsvd2 : 8 ;
  2880F                   // 15:8 reserved
  2881F} ;
  2882F
  2883Funion ECFLG_REG
  2884F{
  2885F  Uint16 all ;
  2886F  struct ECFLG_BITS bit ;
  2887F} ;
  2888F//----------------------------------------------------
  2889F
  2890Fstruct ECAP_REGS
  2891F{
  2892F  Uint32 TSCTR ; // Time stamp counter
  2893F  Uint32 CTRPHS ; // Counter phase
  2894F  Uint32 CAP1 ; // Capture 1
  2895F  Uint32 CAP2 ; // Capture 2
  2896F  Uint32 CAP3 ; // Capture 3
  2897F  Uint32 CAP4 ; // Capture 4
  2898F  Uint16 rsvd1 [ 8 ] ;
  2899F                    // reserved
  2900F  union ECCTL1_REG ECCTL1 ; // Capture Control Reg 1
  2901F  union ECCTL2_REG ECCTL2 ; // Capture Control Reg 2
  2902F  union ECEINT_REG ECEINT ; // ECAP interrupt enable
  2903F  union ECFLG_REG ECFLG ; // ECAP interrupt flags
  2904F  union ECFLG_REG ECCLR ; // ECAP interrupt clear
  2905F  union ECEINT_REG ECFRC ; // ECAP interrupt force
  2906F  Uint16 rsvd2 [ 6 ] ;
  2907F                    // reserved
  2908F} ;
  2909F//---------------------------------------------------------------------------
  2910F// GPI/O External References & Function Declarations:
  2911F//
  2912F
  2913Fextern volatile struct ECAP_REGS
  2914F  ECap1Regs ;
  2915F
  2916Fextern volatile struct ECAP_REGS
  2917F  ECap2Regs ;
  2918F
  2919Fextern volatile struct ECAP_REGS
  2920F  ECap3Regs ;
  2921F
  2922Fextern volatile struct ECAP_REGS
  2923F  ECap4Regs ;
  2924F
  2925Fextern volatile struct ECAP_REGS
  2926F  ECap5Regs ;
  2927F
  2928Fextern volatile struct ECAP_REGS
  2929F  ECap6Regs ;
  2930F       /* extern "C" */
  2931F       // end of DSP2833x_ECAP_H definition
  2932F//===========================================================================
  2933F// End of file.
  2934F//===========================================================================
  2935F 
  2936F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ECap.h*/
  2937F/*   CLOSE_FILE Include File */
  2938F 
  2939F               // Enhanced Capture
  2940F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DMA.h */
  2941F// TI File $Revision: /main/11 $
  2942F// Checkin $Date: June 23, 2008 11:34:15 $
  2943F//###########################################################################
  2944F//
  2945F// FILE: DSP2833x_DMA.h
  2946F//
  2947F// TITLE: DSP2833x DMA Module Register Bit Definitions.
  2948F//
  2949F//###########################################################################
  2950F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  2951F// $Release Date: August 4, 2009 $
  2952F//###########################################################################
  2953F#ifndef DSP2833x_DMA_H
  2954F#define DSP2833x_DMA_H
  2955F//----------------------------------------------------
  2956F// Channel MODE register bit definitions:
  2957F
  2958Fstruct MODE_BITS
  2959F{                  // bits description
  2960F  Uint16 PERINTSEL : 5 ;
  2961F                       // 4:0 Peripheral Interrupt and Sync Select Bits (R/W):
  2962F                             // 0 no interrupt
  2963F               // 1 SEQ1INT & ADCSYNC
  2964F                             // 2 SEQ2INT
  2965F               // 3 XINT1
  2966F               // 4 XINT2
  2967F               // 5 XINT3
  2968F               // 6 XINT4
  2969F               // 7 XINT5
  2970F               // 8 XINT6
  2971F               // 9 XINT7
  2972F               // 10 XINT13
  2973F               // 11 TINT0
  2974F               // 12 TINT1
  2975F               // 13 TINT2
  2976F               // 14 MXEVTA & MXSYNCA
  2977F               // 15 MREVTA & MRSYNCA
  2978F               // 16 MXEVTB & MXSYNCB
  2979F               // 17 MREVTB & MRSYNCB
  2980F                                 // 18 ePWM1SOCA
  2981F                                 // 19 ePWM1SOCB
  2982F                                 // 20 ePWM2SOCA
  2983F                                 // 21 ePWM2SOCB
  2984F                                 // 22 ePWM3SOCA
  2985F                                 // 23 ePWM3SOCB
  2986F                                 // 24 ePWM4SOCA
  2987F                                 // 25 ePWM4SOCB
  2988F                                 // 26 ePWM5SOCA
  2989F                                 // 27 ePWM5SOCB
  2990F                                 // 28 ePWM6SOCA
  2991F                                 // 29 ePWM6SOCB
  2992F                                 // 30:31 no interrupt
  2993F  Uint16 rsvd1 : 2 ;
  2994F                   // 6:5 (R=0:0)
  2995F  Uint16 OVRINTE : 1 ;
  2996F                     // 7 Overflow Interrupt Enable (R/W):
  2997F                             // 0 overflow interrupt disabled
  2998F                             // 1 overflow interrupt enabled
  2999F  Uint16 PERINTE : 1 ;
  3000F                     // 8 Peripheral Interrupt Enable Bit (R/W):
  3001F                             // 0 peripheral interrupt disabled
  3002F                             // 1 peripheral interrupt enabled
  3003F  Uint16 CHINTMODE : 1 ;
  3004F                       // 9 Channel Interrupt Mode Bit (R/W):
  3005F                             // 0 generate interrupt at beginning of new transfer
  3006F                             // 1 generate interrupt at end of transfer
  3007F  Uint16 ONESHOT : 1 ;
  3008F                     // 10 One Shot Mode Bit (R/W):
  3009F                             // 0 only interrupt event triggers single burst transfer
  3010F                             // 1 first interrupt triggers burst, continue until transfer count is zero
  3011F  Uint16 CONTINUOUS : 1 ;
  3012F                        // 11 Continous Mode Bit (R/W):
  3013F                             // 0 stop when transfer count is zero
  3014F                             // 1 re-initialize when transfer count is zero
  3015F  Uint16 SYNCE : 1 ;
  3016F                   // 12 Sync Enable Bit (R/W):
  3017F                             // 0 ignore selected interrupt sync signal
  3018F                             // 1 enable selected interrupt sync signal
  3019F  Uint16 SYNCSEL : 1 ;
  3020F                     // 13 Sync Select Bit (R/W):
  3021F                             // 0 sync signal controls source wrap counter
  3022F                             // 1 sync signal controls destination wrap counter
  3023F  Uint16 DATASIZE : 1 ;
  3024F                      // 14 Data Size Mode Bit (R/W):
  3025F                             // 0 16-bit data transfer size
  3026F                             // 1 32-bit data transfer size
  3027F  Uint16 CHINTE : 1 ;
  3028F                    // 15 Channel Interrupt Enable Bit (R/W):
  3029F                             // 0 channel interrupt disabled
  3030F                             // 1 channel interrupt enabled
  3031F} ;
  3032F
  3033Funion MODE_REG
  3034F{
  3035F  Uint16 all ;
  3036F  struct MODE_BITS bit ;
  3037F} ;
  3038F//----------------------------------------------------
  3039F// Channel CONTROL register bit definitions:
  3040F
  3041Fstruct CONTROL_BITS
  3042F{                     // bits description
  3043F  Uint16 RUN : 1 ;
  3044F                 // 0 Run Bit (R=0/W=1)
  3045F  Uint16 HALT : 1 ;
  3046F                  // 1 Halt Bit (R=0/W=1)
  3047F  Uint16 SOFTRESET : 1 ;
  3048F                       // 2 Soft Reset Bit (R=0/W=1)
  3049F  Uint16 PERINTFRC : 1 ;
  3050F                       // 3 Interrupt Force Bit (R=0/W=1)
  3051F  Uint16 PERINTCLR : 1 ;
  3052F                       // 4 Interrupt Clear Bit (R=0/W=1)
  3053F  Uint16 SYNCFRC : 1 ;
  3054F                     // 5 Sync Force Bit (R=0/W=1)
  3055F  Uint16 SYNCCLR : 1 ;
  3056F                     // 6 Sync Clear Bit (R=0/W=1)
  3057F  Uint16 ERRCLR : 1 ;
  3058F                    // 7 Error Clear Bit (R=0/W=1)
  3059F  Uint16 PERINTFLG : 1 ;
  3060F                       // 8 Interrupt Flag Bit (R):
  3061F                             // 0 no interrupt pending
  3062F                             // 1 interrupt pending
  3063F  Uint16 SYNCFLG : 1 ;
  3064F                     // 9 Sync Flag Bit (R):
  3065F                             // 0 no sync pending
  3066F                             // 1 sync pending
  3067F  Uint16 SYNCERR : 1 ;
  3068F                     // 10 Sync Error Flag Bit (R):
  3069F                             // 0 no sync error
  3070F                             // 1 sync error detected
  3071F  Uint16 TRANSFERSTS : 1 ;
  3072F                         // 11 Transfer Status Bit (R):
  3073F                             // 0 no transfer in progress or pending
  3074F                             // 1 transfer in progress or pending
  3075F  Uint16 BURSTSTS : 1 ;
  3076F                      // 12 Burst Status Bit (R):
  3077F                             // 0 no burst in progress or pending
  3078F                             // 1 burst in progress or pending
  3079F  Uint16 RUNSTS : 1 ;
  3080F                    // 13 Run Status Bit (R):
  3081F                             // 0 channel not running or halted
  3082F                             // 1 channel running
  3083F  Uint16 OVRFLG : 1 ;
  3084F                    // 14 Overflow Flag Bit(R)
  3085F                             // 0 no overflow event
  3086F                             // 1 overflow event
  3087F  Uint16 rsvd1 : 1 ;
  3088F                   // 15 (R=0)
  3089F} ;
  3090F
  3091Funion CONTROL_REG
  3092F{
  3093F  Uint16 all ;
  3094F  struct CONTROL_BITS bit ;
  3095F} ;
  3096F//----------------------------------------------------
  3097F// DMACTRL register bit definitions:
  3098F
  3099Fstruct DMACTRL_BITS
  3100F{                     // bits description
  3101F  Uint16 HARDRESET : 1 ;
  3102F                       // 0 Hard Reset Bit (R=0/W=1)
  3103F  Uint16 PRIORITYRESET : 1 ;
  3104F                           // 1 Priority Reset Bit (R=0/W=1)
  3105F  Uint16 rsvd1 : 14 ;
  3106F                    // 15:2 (R=0:0)
  3107F} ;
  3108F
  3109Funion DMACTRL_REG
  3110F{
  3111F  Uint16 all ;
  3112F  struct DMACTRL_BITS bit ;
  3113F} ;
  3114F//----------------------------------------------------
  3115F// DEBUGCTRL register bit definitions:
  3116F
  3117Fstruct DEBUGCTRL_BITS
  3118F{                       // bits description
  3119F  Uint16 rsvd1 : 15 ;
  3120F                    // 14:0 (R=0:0)
  3121F  Uint16 FREE : 1 ;
  3122F                  // 15 Debug Mode Bit (R/W):
  3123F                             // 0 halt after current read-write operation
  3124F                             // 1 continue running
  3125F} ;
  3126F
  3127Funion DEBUGCTRL_REG
  3128F{
  3129F  Uint16 all ;
  3130F  struct DEBUGCTRL_BITS bit ;
  3131F} ;
  3132F//----------------------------------------------------
  3133F// PRIORITYCTRL1 register bit definitions:
  3134F
  3135Fstruct PRIORITYCTRL1_BITS
  3136F{                           // bits description
  3137F  Uint16 CH1PRIORITY : 1 ;
  3138F                         // 0 Ch1 Priority Bit (R/W):
  3139F                             // 0 same priority as all other channels
  3140F                             // 1 highest priority channel
  3141F  Uint16 rsvd1 : 15 ;
  3142F                    // 15:1 (R=0:0)
  3143F} ;
  3144F
  3145Funion PRIORITYCTRL1_REG
  3146F{
  3147F  Uint16 all ;
  3148F  struct PRIORITYCTRL1_BITS bit ;
  3149F} ;
  3150F//----------------------------------------------------
  3151F// PRIORITYSTAT register bit definitions:
  3152F
  3153Fstruct PRIORITYSTAT_BITS
  3154F{                          // bits description
  3155F  Uint16 ACTIVESTS : 3 ;
  3156F                       // 2:0 Active Channel Status Bits (R):
  3157F                              // 0,0,0 no channel active
  3158F                              // 0,0,1 Ch1 channel active
  3159F                              // 0,1,0 Ch2 channel active
  3160F                              // 0,1,1 Ch3 channel active
  3161F                              // 1,0,0 Ch4 channel active
  3162F                              // 1,0,1 Ch5 channel active
  3163F                              // 1,1,0 Ch6 channel active
  3164F  Uint16 rsvd1 : 1 ;
  3165F                   // 3 (R=0)
  3166F  Uint16 ACTIVESTS_SHADOW : 3 ;
  3167F                              // 6:4 Active Channel Status Shadow Bits (R):
  3168F                              // 0,0,0 no channel active and interrupted by Ch1
  3169F                              // 0,0,1 cannot occur
  3170F                              // 0,1,0 Ch2 was active and interrupted by Ch1
  3171F                              // 0,1,1 Ch3 was active and interrupted by Ch1
  3172F                              // 1,0,0 Ch4 was active and interrupted by Ch1
  3173F                              // 1,0,1 Ch5 was active and interrupted by Ch1
  3174F                              // 1,1,0 Ch6 was active and interrupted by Ch1
  3175F  Uint16 rsvd2 : 9 ;
  3176F                   // 15:7 (R=0:0)
  3177F} ;
  3178F
  3179Funion PRIORITYSTAT_REG
  3180F{
  3181F  Uint16 all ;
  3182F  struct PRIORITYSTAT_BITS bit ;
  3183F} ;
  3184F// Burst Size
  3185F
  3186Fstruct BURST_SIZE_BITS
  3187F{                        // bits description
  3188F  Uint16 BURSTSIZE : 5 ;
  3189F                       // 4:0 Burst transfer size
  3190F  Uint16 rsvd1 : 11 ;
  3191F                    // 15:5 reserved
  3192F} ;
  3193F
  3194Funion BURST_SIZE_REG
  3195F{
  3196F  Uint16 all ;
  3197F  struct BURST_SIZE_BITS bit ;
  3198F} ;
  3199F// Burst Count
  3200F
  3201Fstruct BURST_COUNT_BITS
  3202F{                         // bits description
  3203F  Uint16 BURSTCOUNT : 5 ;
  3204F                        // 4:0 Burst transfer size
  3205F  Uint16 rsvd1 : 11 ;
  3206F                    // 15:5 reserved
  3207F} ;
  3208F
  3209Funion BURST_COUNT_REG
  3210F{
  3211F  Uint16 all ;
  3212F  struct BURST_COUNT_BITS bit ;
  3213F} ;
  3214F//----------------------------------------------------
  3215F// DMA Channel Registers:
  3216F
  3217Fstruct CH_REGS
  3218F{
  3219F  union MODE_REG MODE ; // Mode Register
  3220F  union CONTROL_REG CONTROL ; // Control Register
  3221F  union BURST_SIZE_REG BURST_SIZE ; // Burst Size Register
  3222F  union BURST_COUNT_REG BURST_COUNT ; // Burst Count Register
  3223F  int16 SRC_BURST_STEP ; // Source Burst Step Register
  3224F  int16 DST_BURST_STEP ; // Destination Burst Step Register
  3225F  Uint16 TRANSFER_SIZE ; // Transfer Size Register
  3226F  Uint16 TRANSFER_COUNT ; // Transfer Count Register
  3227F  int16 SRC_TRANSFER_STEP ; // Source Transfer Step Register
  3228F  int16 DST_TRANSFER_STEP ; // Destination Transfer Step Register
  3229F  Uint16 SRC_WRAP_SIZE ; // Source Wrap Size Register
  3230F  Uint16 SRC_WRAP_COUNT ; // Source Wrap Count Register
  3231F  int16 SRC_WRAP_STEP ; // Source Wrap Step Register
  3232F  Uint16 DST_WRAP_SIZE ; // Destination Wrap Size Register
  3233F  Uint16 DST_WRAP_COUNT ; // Destination Wrap Count Register
  3234F  int16 DST_WRAP_STEP ; // Destination Wrap Step Register
  3235F  Uint32 SRC_BEG_ADDR_SHADOW ; // Source Begin Address Shadow Register
  3236F  Uint32 SRC_ADDR_SHADOW ; // Source Address Shadow Register
  3237F  Uint32 SRC_BEG_ADDR_ACTIVE ; // Source Begin Address Active Register
  3238F  Uint32 SRC_ADDR_ACTIVE ; // Source Address Active Register
  3239F  Uint32 DST_BEG_ADDR_SHADOW ; // Destination Begin Address Shadow Register
  3240F  Uint32 DST_ADDR_SHADOW ; // Destination Address Shadow Register
  3241F  Uint32 DST_BEG_ADDR_ACTIVE ; // Destination Begin Address Active Register
  3242F  Uint32 DST_ADDR_ACTIVE ; // Destination Address Active Register
  3243F} ;
  3244F//----------------------------------------------------
  3245F// DMA Registers:
  3246F
  3247Fstruct DMA_REGS
  3248F{
  3249F  union DMACTRL_REG DMACTRL ; // DMA Control Register
  3250F  union DEBUGCTRL_REG DEBUGCTRL ; // Debug Control Register
  3251F  Uint16 rsvd0 ; // reserved
  3252F  Uint16 rsvd1 ; //
  3253F  union PRIORITYCTRL1_REG PRIORITYCTRL1 ; // Priority Control 1 Register
  3254F  Uint16 rsvd2 ; //
  3255F  union PRIORITYSTAT_REG PRIORITYSTAT ; // Priority Status Register
  3256F  Uint16 rsvd3 [ 25 ] ;
  3257F                     //
  3258F  struct CH_REGS CH1 ; // DMA Channel 1 Registers
  3259F  struct CH_REGS CH2 ; // DMA Channel 2 Registers
  3260F  struct CH_REGS CH3 ; // DMA Channel 3 Registers
  3261F  struct CH_REGS CH4 ; // DMA Channel 4 Registers
  3262F  struct CH_REGS CH5 ; // DMA Channel 5 Registers
  3263F  struct CH_REGS CH6 ; // DMA Channel 6 Registers
  3264F} ;
  3265F//---------------------------------------------------------------------------
  3266F// External References & Function Declarations:
  3267F//
  3268F
  3269Fextern volatile struct DMA_REGS
  3270F  DmaRegs ;
  3271F       /* extern "C" */
  3272F       // end of DSP2833x_DMA_H definition
  3273F//===========================================================================
  3274F// End of file.
  3275F//===========================================================================
  3276F 
  3277F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DMA.h*/
  3278F/*   CLOSE_FILE Include File */
  3279F 
  3280F                // DMA Registers
  3281F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EPwm.h */
  3282F// TI File $Revision: /main/1 $
  3283F// Checkin $Date: August 18, 2006 13:52:10 $
  3284F//###########################################################################
  3285F//
  3286F// FILE: DSP2833x_EPwm.h
  3287F//
  3288F// TITLE: DSP2833x Enhanced PWM Module Register Bit Definitions.
  3289F//
  3290F//###########################################################################
  3291F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  3292F// $Release Date: August 4, 2009 $
  3293F//###########################################################################
  3294F#ifndef DSP2833x_EPWM_H
  3295F#define DSP2833x_EPWM_H
  3296F//----------------------------------------------------
  3297F// Time base control register bit definitions */
  3298F
  3299Fstruct TBCTL_BITS
  3300F{                   // bits description
  3301F  Uint16 CTRMODE : 2 ;
  3302F                     // 1:0 Counter Mode
  3303F  Uint16 PHSEN : 1 ;
  3304F                   // 2 Phase load enable
  3305F  Uint16 PRDLD : 1 ;
  3306F                   // 3 Active period load
  3307F  Uint16 SYNCOSEL : 2 ;
  3308F                      // 5:4 Sync output select
  3309F  Uint16 SWFSYNC : 1 ;
  3310F                     // 6 Software force sync pulse
  3311F  Uint16 HSPCLKDIV : 3 ;
  3312F                       // 9:7 High speed time pre-scale
  3313F  Uint16 CLKDIV : 3 ;
  3314F                    // 12:10 Timebase clock pre-scale
  3315F  Uint16 PHSDIR : 1 ;
  3316F                    // 13 Phase Direction
  3317F  Uint16 FREE_SOFT : 2 ;
  3318F                       // 15:14 Emulation mode
  3319F} ;
  3320F
  3321Funion TBCTL_REG
  3322F{
  3323F  Uint16 all ;
  3324F  struct TBCTL_BITS bit ;
  3325F} ;
  3326F//----------------------------------------------------
  3327F// Time base status register bit definitions */
  3328F
  3329Fstruct TBSTS_BITS
  3330F{                   // bits description
  3331F  Uint16 CTRDIR : 1 ;
  3332F                    // 0 Counter direction status
  3333F  Uint16 SYNCI : 1 ;
  3334F                   // 1 External input sync status
  3335F  Uint16 CTRMAX : 1 ;
  3336F                    // 2 Counter max latched status
  3337F  Uint16 rsvd1 : 13 ;
  3338F                    // 15:3 reserved
  3339F} ;
  3340F
  3341Funion TBSTS_REG
  3342F{
  3343F  Uint16 all ;
  3344F  struct TBSTS_BITS bit ;
  3345F} ;
  3346F//----------------------------------------------------
  3347F// Compare control register bit definitions */
  3348F
  3349Fstruct CMPCTL_BITS
  3350F{                    // bits description
  3351F  Uint16 LOADAMODE : 2 ;
  3352F                       // 0:1 Active compare A
  3353F  Uint16 LOADBMODE : 2 ;
  3354F                       // 3:2 Active compare B
  3355F  Uint16 SHDWAMODE : 1 ;
  3356F                       // 4 Compare A block operating mode
  3357F  Uint16 rsvd1 : 1 ;
  3358F                   // 5 reserved
  3359F  Uint16 SHDWBMODE : 1 ;
  3360F                       // 6 Compare B block operating mode
  3361F  Uint16 rsvd2 : 1 ;
  3362F                   // 7 reserved
  3363F  Uint16 SHDWAFULL : 1 ;
  3364F                       // 8 Compare A Shadow registers full Status
  3365F  Uint16 SHDWBFULL : 1 ;
  3366F                       // 9 Compare B Shadow registers full Status
  3367F  Uint16 rsvd3 : 6 ;
  3368F                   // 15:10 reserved
  3369F} ;
  3370F
  3371Funion CMPCTL_REG
  3372F{
  3373F  Uint16 all ;
  3374F  struct CMPCTL_BITS bit ;
  3375F} ;
  3376F//----------------------------------------------------
  3377F// Action qualifier register bit definitions */
  3378F
  3379Fstruct AQCTL_BITS
  3380F{                   // bits description
  3381F  Uint16 ZRO : 2 ;
  3382F                 // 1:0 Action Counter = Zero
  3383F  Uint16 PRD : 2 ;
  3384F                 // 3:2 Action Counter = Period
  3385F  Uint16 CAU : 2 ;
  3386F                 // 5:4 Action Counter = Compare A up
  3387F  Uint16 CAD : 2 ;
  3388F                 // 7:6 Action Counter = Compare A down
  3389F  Uint16 CBU : 2 ;
  3390F                 // 9:8 Action Counter = Compare B up
  3391F  Uint16 CBD : 2 ;
  3392F                 // 11:10 Action Counter = Compare B down
  3393F  Uint16 rsvd : 4 ;
  3394F                  // 15:12 reserved
  3395F} ;
  3396F
  3397Funion AQCTL_REG
  3398F{
  3399F  Uint16 all ;
  3400F  struct AQCTL_BITS bit ;
  3401F} ;
  3402F//----------------------------------------------------
  3403F// Action qualifier SW force register bit definitions */
  3404F
  3405Fstruct AQSFRC_BITS
  3406F{                    // bits description
  3407F  Uint16 ACTSFA : 2 ;
  3408F                    // 1:0 Action when One-time SW Force A invoked
  3409F  Uint16 OTSFA : 1 ;
  3410F                   // 2 One-time SW Force A output
  3411F  Uint16 ACTSFB : 2 ;
  3412F                    // 4:3 Action when One-time SW Force B invoked
  3413F  Uint16 OTSFB : 1 ;
  3414F                   // 5 One-time SW Force A output
  3415F  Uint16 RLDCSF : 2 ;
  3416F                    // 7:6 Reload from Shadow options
  3417F  Uint16 rsvd1 : 8 ;
  3418F                   // 15:8 reserved
  3419F} ;
  3420F
  3421Funion AQSFRC_REG
  3422F{
  3423F  Uint16 all ;
  3424F  struct AQSFRC_BITS bit ;
  3425F} ;
  3426F//----------------------------------------------------
  3427F// Action qualifier continuous SW force register bit definitions */
  3428F
  3429Fstruct AQCSFRC_BITS
  3430F{                     // bits description
  3431F  Uint16 CSFA : 2 ;
  3432F                  // 1:0 Continuous Software Force on output A
  3433F  Uint16 CSFB : 2 ;
  3434F                  // 3:2 Continuous Software Force on output B
  3435F  Uint16 rsvd1 : 12 ;
  3436F                    // 15:4 reserved
  3437F} ;
  3438F
  3439Funion AQCSFRC_REG
  3440F{
  3441F  Uint16 all ;
  3442F  struct AQCSFRC_BITS bit ;
  3443F} ;
  3444F// As of version 1.1
  3445F// Changed the MODE bit-field to OUT_MODE
  3446F// Added the bit-field IN_MODE
  3447F// This corresponds to changes in silicon as of F2833x devices
  3448F// Rev A silicon.
  3449F//----------------------------------------------------
  3450F// Dead-band generator control register bit definitions
  3451F
  3452Fstruct DBCTL_BITS
  3453F{                   // bits description
  3454F  Uint16 OUT_MODE : 2 ;  // 1:0 Dead Band Output Mode Control
  3455F  Uint16 POLSEL : 2 ;
  3456F                    // 3:2 Polarity Select Control
  3457F  Uint16 IN_MODE : 2 ;
  3458F                     // 5:4 Dead Band Input Select Mode Control
  3459F  Uint16 rsvd1 : 10 ;
  3460F                    // 15:4 reserved
  3461F} ;
  3462F
  3463Funion DBCTL_REG
  3464F{
  3465F  Uint16 all ;
  3466F  struct DBCTL_BITS bit ;
  3467F} ;
  3468F//----------------------------------------------------
  3469F// Trip zone select register bit definitions
  3470F
  3471Fstruct TZSEL_BITS
  3472F{                   // bits description
  3473F  Uint16 CBC1 : 1 ;
  3474F                  // 0 TZ1 CBC select
  3475F  Uint16 CBC2 : 1 ;
  3476F                  // 1 TZ2 CBC select
  3477F  Uint16 CBC3 : 1 ;
  3478F                  // 2 TZ3 CBC select
  3479F  Uint16 CBC4 : 1 ;
  3480F                  // 3 TZ4 CBC select
  3481F  Uint16 CBC5 : 1 ;
  3482F                  // 4 TZ5 CBC select
  3483F  Uint16 CBC6 : 1 ;
  3484F                  // 5 TZ6 CBC select
  3485F  Uint16 rsvd1 : 2 ;
  3486F                   // 7:6 reserved
  3487F  Uint16 OSHT1 : 1 ;
  3488F                   // 8 One-shot TZ1 select
  3489F  Uint16 OSHT2 : 1 ;
  3490F                   // 9 One-shot TZ2 select
  3491F  Uint16 OSHT3 : 1 ;
  3492F                   // 10 One-shot TZ3 select
  3493F  Uint16 OSHT4 : 1 ;
  3494F                   // 11 One-shot TZ4 select
  3495F  Uint16 OSHT5 : 1 ;
  3496F                   // 12 One-shot TZ5 select
  3497F  Uint16 OSHT6 : 1 ;
  3498F                   // 13 One-shot TZ6 select
  3499F  Uint16 rsvd2 : 2 ;
  3500F                   // 15:14 reserved
  3501F} ;
  3502F
  3503Funion TZSEL_REG
  3504F{
  3505F  Uint16 all ;
  3506F  struct TZSEL_BITS bit ;
  3507F} ;
  3508F//----------------------------------------------------
  3509F// Trip zone control register bit definitions */
  3510F
  3511Fstruct TZCTL_BITS
  3512F{                   // bits description
  3513F  Uint16 TZA : 2 ;
  3514F                 // 1:0 TZ1 to TZ6 Trip Action On EPWMxA
  3515F  Uint16 TZB : 2 ;
  3516F                 // 3:2 TZ1 to TZ6 Trip Action On EPWMxB
  3517F  Uint16 rsvd : 12 ;
  3518F                   // 15:4 reserved
  3519F} ;
  3520F
  3521Funion TZCTL_REG
  3522F{
  3523F  Uint16 all ;
  3524F  struct TZCTL_BITS bit ;
  3525F} ;
  3526F//----------------------------------------------------
  3527F// Trip zone control register bit definitions */
  3528F
  3529Fstruct TZEINT_BITS
  3530F{                    // bits description
  3531F  Uint16 rsvd1 : 1 ;
  3532F                   // 0 reserved
  3533F  Uint16 CBC : 1 ;
  3534F                 // 1 Trip Zones Cycle By Cycle Int Enable
  3535F  Uint16 OST : 1 ;
  3536F                 // 2 Trip Zones One Shot Int Enable
  3537F  Uint16 rsvd2 : 13 ;
  3538F                    // 15:3 reserved
  3539F} ;
  3540F
  3541Funion TZEINT_REG
  3542F{
  3543F  Uint16 all ;
  3544F  struct TZEINT_BITS bit ;
  3545F} ;
  3546F//----------------------------------------------------
  3547F// Trip zone flag register bit definitions */
  3548F
  3549Fstruct TZFLG_BITS
  3550F{                   // bits description
  3551F  Uint16 INT : 1 ;
  3552F                 // 0 Global status
  3553F  Uint16 CBC : 1 ;
  3554F                 // 1 Trip Zones Cycle By Cycle Int
  3555F  Uint16 OST : 1 ;
  3556F                 // 2 Trip Zones One Shot Int
  3557F  Uint16 rsvd2 : 13 ;
  3558F                    // 15:3 reserved
  3559F} ;
  3560F
  3561Funion TZFLG_REG
  3562F{
  3563F  Uint16 all ;
  3564F  struct TZFLG_BITS bit ;
  3565F} ;
  3566F//----------------------------------------------------
  3567F// Trip zone flag clear register bit definitions */
  3568F
  3569Fstruct TZCLR_BITS
  3570F{                   // bits description
  3571F  Uint16 INT : 1 ;
  3572F                 // 0 Global status
  3573F  Uint16 CBC : 1 ;
  3574F                 // 1 Trip Zones Cycle By Cycle Int
  3575F  Uint16 OST : 1 ;
  3576F                 // 2 Trip Zones One Shot Int
  3577F  Uint16 rsvd2 : 13 ;
  3578F                    // 15:3 reserved
  3579F} ;
  3580F
  3581Funion TZCLR_REG
  3582F{
  3583F  Uint16 all ;
  3584F  struct TZCLR_BITS bit ;
  3585F} ;
  3586F//----------------------------------------------------
  3587F// Trip zone flag force register bit definitions */
  3588F
  3589Fstruct TZFRC_BITS
  3590F{                   // bits description
  3591F  Uint16 rsvd1 : 1 ;
  3592F                   // 0 reserved
  3593F  Uint16 CBC : 1 ;
  3594F                 // 1 Trip Zones Cycle By Cycle Int
  3595F  Uint16 OST : 1 ;
  3596F                 // 2 Trip Zones One Shot Int
  3597F  Uint16 rsvd2 : 13 ;
  3598F                    // 15:3 reserved
  3599F} ;
  3600F
  3601Funion TZFRC_REG
  3602F{
  3603F  Uint16 all ;
  3604F  struct TZFRC_BITS bit ;
  3605F} ;
  3606F//----------------------------------------------------
  3607F// Event trigger select register bit definitions */
  3608F
  3609Fstruct ETSEL_BITS
  3610F{                   // bits description
  3611F  Uint16 INTSEL : 3 ;
  3612F                    // 2:0 EPWMxINTn Select
  3613F  Uint16 INTEN : 1 ;
  3614F                   // 3 EPWMxINTn Enable
  3615F  Uint16 rsvd1 : 4 ;
  3616F                   // 7:4 reserved
  3617F  Uint16 SOCASEL : 3 ;
  3618F                     // 10:8 Start of conversion A Select
  3619F  Uint16 SOCAEN : 1 ;
  3620F                    // 11 Start of conversion A Enable
  3621F  Uint16 SOCBSEL : 3 ;
  3622F                     // 14:12 Start of conversion B Select
  3623F  Uint16 SOCBEN : 1 ;
  3624F                    // 15 Start of conversion B Enable
  3625F} ;
  3626F
  3627Funion ETSEL_REG
  3628F{
  3629F  Uint16 all ;
  3630F  struct ETSEL_BITS bit ;
  3631F} ;
  3632F//----------------------------------------------------
  3633F// Event trigger pre-scale register bit definitions */
  3634F
  3635Fstruct ETPS_BITS
  3636F{                  // bits description
  3637F  Uint16 INTPRD : 2 ;
  3638F                    // 1:0 EPWMxINTn Period Select
  3639F  Uint16 INTCNT : 2 ;
  3640F                    // 3:2 EPWMxINTn Counter Register
  3641F  Uint16 rsvd1 : 4 ;
  3642F                   // 7:4 reserved
  3643F  Uint16 SOCAPRD : 2 ;
  3644F                     // 9:8 EPWMxSOCA Period Select
  3645F  Uint16 SOCACNT : 2 ;
  3646F                     // 11:10 EPWMxSOCA Counter Register
  3647F  Uint16 SOCBPRD : 2 ;
  3648F                     // 13:12 EPWMxSOCB Period Select
  3649F  Uint16 SOCBCNT : 2 ;
  3650F                     // 15:14 EPWMxSOCB Counter Register
  3651F} ;
  3652F
  3653Funion ETPS_REG
  3654F{
  3655F  Uint16 all ;
  3656F  struct ETPS_BITS bit ;
  3657F} ;
  3658F//----------------------------------------------------
  3659F// Event trigger Flag register bit definitions */
  3660F
  3661Fstruct ETFLG_BITS
  3662F{                   // bits description
  3663F  Uint16 INT : 1 ;
  3664F                 // 0   EPWMxINTn Flag
  3665F  Uint16 rsvd1 : 1 ;
  3666F                   // 1 reserved
  3667F  Uint16 SOCA : 1 ;
  3668F                  // 2  EPWMxSOCA Flag
  3669F  Uint16 SOCB : 1 ;
  3670F                  // 3  EPWMxSOCB Flag
  3671F  Uint16 rsvd2 : 12 ;
  3672F                    // 15:4     reserved
  3673F} ;
  3674F
  3675Funion ETFLG_REG
  3676F{
  3677F  Uint16 all ;
  3678F  struct ETFLG_BITS bit ;
  3679F} ;
  3680F//----------------------------------------------------
  3681F// Event trigger Clear register bit definitions */
  3682F
  3683Fstruct ETCLR_BITS
  3684F{                   // bits description
  3685F  Uint16 INT : 1 ;
  3686F                 // 0   EPWMxINTn Clear
  3687F  Uint16 rsvd1 : 1 ;
  3688F                   // 1 reserved
  3689F  Uint16 SOCA : 1 ;
  3690F                  // 2  EPWMxSOCA Clear
  3691F  Uint16 SOCB : 1 ;
  3692F                  // 3  EPWMxSOCB Clear
  3693F  Uint16 rsvd2 : 12 ;
  3694F                    // 15:4     reserved
  3695F} ;
  3696F
  3697Funion ETCLR_REG
  3698F{
  3699F  Uint16 all ;
  3700F  struct ETCLR_BITS bit ;
  3701F} ;
  3702F//----------------------------------------------------
  3703F// Event trigger Force register bit definitions */
  3704F
  3705Fstruct ETFRC_BITS
  3706F{                   // bits description
  3707F  Uint16 INT : 1 ;
  3708F                 // 0   EPWMxINTn Force
  3709F  Uint16 rsvd1 : 1 ;
  3710F                   // 1 reserved
  3711F  Uint16 SOCA : 1 ;
  3712F                  // 2  EPWMxSOCA Force
  3713F  Uint16 SOCB : 1 ;
  3714F                  // 3  EPWMxSOCB Force
  3715F  Uint16 rsvd2 : 12 ;
  3716F                    // 15:4     reserved
  3717F} ;
  3718F
  3719Funion ETFRC_REG
  3720F{
  3721F  Uint16 all ;
  3722F  struct ETFRC_BITS bit ;
  3723F} ;
  3724F//----------------------------------------------------
  3725F// PWM chopper control register bit definitions */
  3726F
  3727Fstruct PCCTL_BITS
  3728F{                   // bits description
  3729F  Uint16 CHPEN : 1 ;
  3730F                   // 0 PWM chopping enable
  3731F  Uint16 OSHTWTH : 4 ;
  3732F                     // 4:1 One-shot pulse width
  3733F  Uint16 CHPFREQ : 3 ;
  3734F                     // 7:5 Chopping clock frequency
  3735F  Uint16 CHPDUTY : 3 ;
  3736F                     // 10:8 Chopping clock Duty cycle
  3737F  Uint16 rsvd1 : 5 ;
  3738F                   // 15:11 reserved
  3739F} ;
  3740F
  3741Funion PCCTL_REG
  3742F{
  3743F  Uint16 all ;
  3744F  struct PCCTL_BITS bit ;
  3745F} ;
  3746F
  3747Fstruct HRCNFG_BITS
  3748F{                       // bits description
  3749F  Uint16 EDGMODE : 2 ;  // 1:0 Edge Mode select Bits
  3750F  Uint16 CTLMODE : 1 ;  // 2 Control mode Select Bit
  3751F  Uint16 HRLOAD : 1 ;   // 3 Shadow mode Select Bit
  3752F  Uint16 rsvd1 : 12 ;   // 15:4 reserved
  3753F} ;
  3754F
  3755Funion HRCNFG_REG
  3756F{
  3757F  Uint16 all ;
  3758F  struct HRCNFG_BITS bit ;
  3759F} ;
  3760F
  3761Fstruct TBPHS_HRPWM_REG
  3762F{                               // bits description
  3763F  Uint16 TBPHSHR ;      // 15:0 Extension register for HRPWM Phase (8 bits)
  3764F  Uint16 TBPHS ; // 31:16 Phase offset register
  3765F} ;
  3766F
  3767Funion TBPHS_HRPWM_GROUP
  3768F{
  3769F  Uint32 all ;
  3770F  struct TBPHS_HRPWM_REG half ;
  3771F} ;
  3772F
  3773Fstruct CMPA_HRPWM_REG
  3774F{                               // bits description
  3775F  Uint16 CMPAHR ;        // 15:0 Extension register for HRPWM compare (8 bits)
  3776F  Uint16 CMPA ; // 31:16 Compare A reg
  3777F} ;
  3778F
  3779Funion CMPA_HRPWM_GROUP
  3780F{
  3781F  Uint32 all ;
  3782F  struct CMPA_HRPWM_REG half ;
  3783F} ;
  3784F
  3785Fstruct EPWM_REGS
  3786F{
  3787F  union TBCTL_REG TBCTL ; //
  3788F  union TBSTS_REG TBSTS ; //
  3789F  union TBPHS_HRPWM_GROUP TBPHS ; // Union of TBPHS:TBPHSHR
  3790F  Uint16 TBCTR ; // Counter
  3791F  Uint16 TBPRD ; // Period register set
  3792F  Uint16 rsvd1 ; //
  3793F  union CMPCTL_REG CMPCTL ; // Compare control
  3794F  union CMPA_HRPWM_GROUP CMPA ; // Union of CMPA:CMPAHR
  3795F  Uint16 CMPB ; // Compare B reg
  3796F  union AQCTL_REG AQCTLA ; // Action qual output A
  3797F  union AQCTL_REG AQCTLB ; // Action qual output B
  3798F  union AQSFRC_REG AQSFRC ; // Action qual SW force
  3799F  union AQCSFRC_REG AQCSFRC ; // Action qualifier continuous SW force
  3800F  union DBCTL_REG DBCTL ; // Dead-band control
  3801F  Uint16 DBRED ; // Dead-band rising edge delay
  3802F  Uint16 DBFED ; // Dead-band falling edge delay
  3803F  union TZSEL_REG TZSEL ; // Trip zone select
  3804F  Uint16 rsvd2 ;
  3805F  union TZCTL_REG TZCTL ; // Trip zone control
  3806F  union TZEINT_REG TZEINT ; // Trip zone interrupt enable
  3807F  union TZFLG_REG TZFLG ; // Trip zone interrupt flags
  3808F  union TZCLR_REG TZCLR ; // Trip zone clear
  3809F  union TZFRC_REG TZFRC ;       // Trip zone force interrupt
  3810F  union ETSEL_REG ETSEL ; // Event trigger selection
  3811F  union ETPS_REG ETPS ; // Event trigger pre-scaler
  3812F  union ETFLG_REG ETFLG ; // Event trigger flags
  3813F  union ETCLR_REG ETCLR ; // Event trigger clear
  3814F  union ETFRC_REG ETFRC ; // Event trigger force
  3815F  union PCCTL_REG PCCTL ; // PWM chopper control
  3816F  Uint16 rsvd3 ; //
  3817F  union HRCNFG_REG HRCNFG ; // HRPWM Config Reg
  3818F} ;
  3819F//---------------------------------------------------------------------------
  3820F// External References & Function Declarations:
  3821F//
  3822F
  3823Fextern volatile struct EPWM_REGS
  3824F  EPwm1Regs ;
  3825F
  3826Fextern volatile struct EPWM_REGS
  3827F  EPwm2Regs ;
  3828F
  3829Fextern volatile struct EPWM_REGS
  3830F  EPwm3Regs ;
  3831F
  3832Fextern volatile struct EPWM_REGS
  3833F  EPwm4Regs ;
  3834F
  3835Fextern volatile struct EPWM_REGS
  3836F  EPwm5Regs ;
  3837F
  3838Fextern volatile struct EPWM_REGS
  3839F  EPwm6Regs ;
  3840F       /* extern "C" */
  3841F       // end of DSP2833x_EPWM_H definition
  3842F//===========================================================================
  3843F// End of file.
  3844F//===========================================================================
  3845F 
  3846F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EPwm.h*/
  3847F/*   CLOSE_FILE Include File */
  3848F 
  3849F               // Enhanced PWM
  3850F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EQep.h */
  3851F// TI File $Revision: /main/1 $
  3852F// Checkin $Date: August 18, 2006 13:52:13 $
  3853F//###########################################################################
  3854F//
  3855F// FILE: DSP2833x_EQep.h
  3856F//
  3857F// TITLE: DSP2833x Enhanced Quadrature Encoder Pulse Module
  3858F// Register Bit Definitions.
  3859F//
  3860F//###########################################################################
  3861F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  3862F// $Release Date: August 4, 2009 $
  3863F//###########################################################################
  3864F#ifndef DSP2833x_EQEP_H
  3865F#define DSP2833x_EQEP_H
  3866F//----------------------------------------------------
  3867F// Capture decoder control register bit definitions */
  3868F
  3869Fstruct QDECCTL_BITS
  3870F{                     // bits description
  3871F  Uint16 rsvd1 : 5 ;
  3872F                   // 4:0 reserved
  3873F  Uint16 QSP : 1 ;
  3874F                 // 5 QEPS input polarity
  3875F  Uint16 QIP : 1 ;
  3876F                 // 6 QEPI input polarity
  3877F  Uint16 QBP : 1 ;
  3878F                 // 7 QEPB input polarity
  3879F  Uint16 QAP : 1 ;
  3880F                 // 8 QEPA input polarity
  3881F  Uint16 IGATE : 1 ;
  3882F                   // 9 Index pulse gating option
  3883F  Uint16 SWAP : 1 ;
  3884F                  // 10 CLK/DIR signal source for Position Counter
  3885F  Uint16 XCR : 1 ;
  3886F                 // 11 External clock rate
  3887F  Uint16 SPSEL : 1 ;
  3888F                   // 12 Sync output pin select
  3889F  Uint16 SOEN : 1 ;
  3890F                  // 13 Enable position compare sync
  3891F  Uint16 QSRC : 2 ;
  3892F                  // 15:14 Position counter source
  3893F} ;
  3894F
  3895Funion QDECCTL_REG
  3896F{
  3897F  Uint16 all ;
  3898F  struct QDECCTL_BITS bit ;
  3899F} ;
  3900F//----------------------------------------------------
  3901F// QEP control register bit definitions */
  3902F
  3903Fstruct QEPCTL_BITS
  3904F{                    // bits description
  3905F  Uint16 WDE : 1 ;
  3906F                 // 0 QEP watchdog enable
  3907F  Uint16 UTE : 1 ;
  3908F                 // 1 QEP unit timer enable
  3909F  Uint16 QCLM : 1 ;
  3910F                  // 2 QEP capture latch mode
  3911F  Uint16 QPEN : 1 ;
  3912F                  // 3 Quadrature position counter enable
  3913F  Uint16 IEL : 2 ;
  3914F                 // 5:4 Index event latch
  3915F  Uint16 SEL : 1 ;
  3916F                 // 6 Strobe event latch
  3917F  Uint16 SWI : 1 ;
  3918F                 // 7 Software init position counter
  3919F  Uint16 IEI : 2 ;
  3920F                 // 9:8 Index event init of position count
  3921F  Uint16 SEI : 2 ;
  3922F                 // 11:10 Strobe event init
  3923F  Uint16 PCRM : 2 ;
  3924F                  // 13:12 Position counter reset
  3925F  Uint16 FREE_SOFT : 2 ;
  3926F                       // 15:14 Emulation mode
  3927F} ;
  3928F
  3929Funion QEPCTL_REG
  3930F{
  3931F  Uint16 all ;
  3932F  struct QEPCTL_BITS bit ;
  3933F} ;
  3934F//----------------------------------------------------
  3935F// Quadrature capture control register bit definitions */
  3936F
  3937Fstruct QCAPCTL_BITS
  3938F{                     // bits description
  3939F  Uint16 UPPS : 4 ;
  3940F                  // 3:0 Unit position pre-scale
  3941F  Uint16 CCPS : 3 ;
  3942F                  // 6:4 QEP capture timer pre-scale
  3943F  Uint16 rsvd1 : 8 ;
  3944F                   // 14:7 reserved
  3945F  Uint16 CEN : 1 ;
  3946F                 // 15 Enable QEP capture
  3947F} ;
  3948F
  3949Funion QCAPCTL_REG
  3950F{
  3951F  Uint16 all ;
  3952F  struct QCAPCTL_BITS bit ;
  3953F} ;
  3954F//----------------------------------------------------
  3955F// Position compare control register bit definitions */
  3956F
  3957Fstruct QPOSCTL_BITS
  3958F{                     // bits description
  3959F  Uint16 PCSPW : 12 ;
  3960F                    // 11:0 Position compare sync pulse width
  3961F  Uint16 PCE : 1 ;
  3962F                 // 12 Position compare enable/disable
  3963F  Uint16 PCPOL : 1 ;
  3964F                   // 13 Polarity of sync output
  3965F  Uint16 PCLOAD : 1 ;
  3966F                    // 14 Position compare of shadow load
  3967F  Uint16 PCSHDW : 1 ;
  3968F                    // 15 Position compare shadow enable
  3969F} ;
  3970F
  3971Funion QPOSCTL_REG
  3972F{
  3973F  Uint16 all ;
  3974F  struct QPOSCTL_BITS bit ;
  3975F} ;
  3976F//----------------------------------------------------
  3977F// QEP interrupt control register bit definitions */
  3978F
  3979Fstruct QEINT_BITS
  3980F{                   // bits description
  3981F  Uint16 rsvd1 : 1 ;
  3982F                   // 0 reserved
  3983F  Uint16 PCE : 1 ;
  3984F                 // 1 Position counter error
  3985F  Uint16 QPE : 1 ;
  3986F                 // 2 Quadrature phase error
  3987F  Uint16 QDC : 1 ;
  3988F                 // 3 Quadrature dir change
  3989F  Uint16 WTO : 1 ;
  3990F                 // 4 Watchdog timeout
  3991F  Uint16 PCU : 1 ;
  3992F                 // 5 Position counter underflow
  3993F  Uint16 PCO : 1 ;
  3994F                 // 6 Position counter overflow
  3995F  Uint16 PCR : 1 ;
  3996F                 // 7 Position compare ready
  3997F  Uint16 PCM : 1 ;
  3998F                 // 8 Position compare match
  3999F  Uint16 SEL : 1 ;
  4000F                 // 9 Strobe event latch
  4001F  Uint16 IEL : 1 ;
  4002F                 // 10 Event latch
  4003F  Uint16 UTO : 1 ;
  4004F                 // 11 Unit timeout
  4005F  Uint16 rsvd2 : 4 ;
  4006F                   // 15:12 reserved
  4007F} ;
  4008F
  4009Funion QEINT_REG
  4010F{
  4011F  Uint16 all ;
  4012F  struct QEINT_BITS bit ;
  4013F} ;
  4014F//----------------------------------------------------
  4015F// QEP interrupt status register bit definitions */
  4016F
  4017Fstruct QFLG_BITS
  4018F{                  // bits description
  4019F  Uint16 INT : 1 ;
  4020F                 // 0 Global interrupt
  4021F  Uint16 PCE : 1 ;
  4022F                 // 1 Position counter error
  4023F  Uint16 PHE : 1 ;
  4024F                 // 2 Quadrature phase error
  4025F  Uint16 QDC : 1 ;
  4026F                 // 3 Quadrature dir change
  4027F  Uint16 WTO : 1 ;
  4028F                 // 4 Watchdog timeout
  4029F  Uint16 PCU : 1 ;
  4030F                 // 5 Position counter underflow
  4031F  Uint16 PCO : 1 ;
  4032F                 // 6 Position counter overflow
  4033F  Uint16 PCR : 1 ;
  4034F                 // 7 Position compare ready
  4035F  Uint16 PCM : 1 ;
  4036F                 // 8 Position compare match
  4037F  Uint16 SEL : 1 ;
  4038F                 // 9 Strobe event latch
  4039F  Uint16 IEL : 1 ;
  4040F                 // 10 Event latch
  4041F  Uint16 UTO : 1 ;
  4042F                 // 11 Unit timeout
  4043F  Uint16 rsvd2 : 4 ;
  4044F                   // 15:12 reserved
  4045F} ;
  4046F
  4047Funion QFLG_REG
  4048F{
  4049F  Uint16 all ;
  4050F  struct QFLG_BITS bit ;
  4051F} ;
  4052F//----------------------------------------------------
  4053F// QEP interrupt force register bit definitions */
  4054F
  4055Fstruct QFRC_BITS
  4056F{                  // bits description
  4057F  Uint16 reserved : 1 ;
  4058F                      // 0 Reserved
  4059F  Uint16 PCE : 1 ;
  4060F                 // 1 Position counter error
  4061F  Uint16 PHE : 1 ;
  4062F                 // 2 Quadrature phase error
  4063F  Uint16 QDC : 1 ;
  4064F                 // 3 Quadrature dir change
  4065F  Uint16 WTO : 1 ;
  4066F                 // 4 Watchdog timeout
  4067F  Uint16 PCU : 1 ;
  4068F                 // 5 Position counter underflow
  4069F  Uint16 PCO : 1 ;
  4070F                 // 6 Position counter overflow
  4071F  Uint16 PCR : 1 ;
  4072F                 // 7 Position compare ready
  4073F  Uint16 PCM : 1 ;
  4074F                 // 8 Position compare match
  4075F  Uint16 SEL : 1 ;
  4076F                 // 9 Strobe event latch
  4077F  Uint16 IEL : 1 ;
  4078F                 // 10 Event latch
  4079F  Uint16 UTO : 1 ;
  4080F                 // 11 Unit timeout
  4081F  Uint16 rsvd2 : 4 ;
  4082F                   // 15:12 reserved
  4083F} ;
  4084F
  4085Funion QFRC_REG
  4086F{
  4087F  Uint16 all ;
  4088F  struct QFRC_BITS bit ;
  4089F} ;
  4090F// V1.1 Added UPEVNT (bit 7) This reflects changes
  4091F// made as of F2833x Rev A devices
  4092F//----------------------------------------------------
  4093F// QEP status register bit definitions */
  4094F
  4095Fstruct QEPSTS_BITS
  4096F{                    // bits description
  4097F  Uint16 PCEF : 1 ;
  4098F                  // 0 Position counter error
  4099F  Uint16 FIMF : 1 ;
  4100F                  // 1 First index marker
  4101F  Uint16 CDEF : 1 ;
  4102F                  // 2 Capture direction error
  4103F  Uint16 COEF : 1 ;
  4104F                  // 3 Capture overflow error
  4105F  Uint16 QDLF : 1 ;
  4106F                  // 4 QEP direction latch
  4107F  Uint16 QDF : 1 ;
  4108F                 // 5 Quadrature direction
  4109F  Uint16 FIDF : 1 ;
  4110F                  // 6 Direction on first index marker
  4111F  Uint16 UPEVNT : 1 ;
  4112F                    // 7 Unit position event flag
  4113F  Uint16 rsvd1 : 8 ;
  4114F                   // 15:8 reserved
  4115F} ;
  4116F
  4117Funion QEPSTS_REG
  4118F{
  4119F  Uint16 all ;
  4120F  struct QEPSTS_BITS bit ;
  4121F} ;
  4122F//----------------------------------------------------
  4123F
  4124Fstruct EQEP_REGS
  4125F{
  4126F  Uint32 QPOSCNT ; // Position counter
  4127F  Uint32 QPOSINIT ; // Position counter init
  4128F  Uint32 QPOSMAX ; // Maximum position count
  4129F  Uint32 QPOSCMP ; // Position compare
  4130F  Uint32 QPOSILAT ; // Index position latch
  4131F  Uint32 QPOSSLAT ; // Strobe position latch
  4132F  Uint32 QPOSLAT ; // Position latch
  4133F  Uint32 QUTMR ; // Unit timer
  4134F  Uint32 QUPRD ; // Unit period
  4135F  Uint16 QWDTMR ; // QEP watchdog timer
  4136F  Uint16 QWDPRD ; // QEP watchdog period
  4137F  union QDECCTL_REG QDECCTL ; // Quadrature decoder control
  4138F  union QEPCTL_REG QEPCTL ; // QEP control
  4139F  union QCAPCTL_REG QCAPCTL ; // Quadrature capture control
  4140F  union QPOSCTL_REG QPOSCTL ; // Position compare control
  4141F  union QEINT_REG QEINT ; // QEP interrupt control
  4142F  union QFLG_REG QFLG ; // QEP interrupt flag
  4143F  union QFLG_REG QCLR ; // QEP interrupt clear
  4144F  union QFRC_REG QFRC ; // QEP interrupt force
  4145F  union QEPSTS_REG QEPSTS ; // QEP status
  4146F  Uint16 QCTMR ; // QEP capture timer
  4147F  Uint16 QCPRD ; // QEP capture period
  4148F  Uint16 QCTMRLAT ; // QEP capture latch
  4149F  Uint16 QCPRDLAT ; // QEP capture period latch
  4150F  Uint16 rsvd1 [ 30 ] ;
  4151F                     // reserved
  4152F} ;
  4153F//---------------------------------------------------------------------------
  4154F// GPI/O External References & Function Declarations:
  4155F//
  4156F
  4157Fextern volatile struct EQEP_REGS
  4158F  EQep1Regs ;
  4159F
  4160Fextern volatile struct EQEP_REGS
  4161F  EQep2Regs ;
  4162F       /* extern "C" */
  4163F       // end of DSP2833x_EQEP_H definition
  4164F//===========================================================================
  4165F// End of file.
  4166F//===========================================================================
  4167F 
  4168F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_EQep.h*/
  4169F/*   CLOSE_FILE Include File */
  4170F 
  4171F               // Enhanced QEP
  4172F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Gpio.h */
  4173F// TI File $Revision: /main/4 $
  4174F// Checkin $Date: November 15, 2007 09:58:53 $
  4175F//###########################################################################
  4176F//
  4177F// FILE: DSP2833x_Gpio.h
  4178F//
  4179F// TITLE: DSP2833x General Purpose I/O Definitions.
  4180F//
  4181F//###########################################################################
  4182F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  4183F// $Release Date: August 4, 2009 $
  4184F//###########################################################################
  4185F#ifndef DSP2833x_GPIO_H
  4186F#define DSP2833x_GPIO_H
  4187F//----------------------------------------------------
  4188F// GPIO A control register bit definitions */
  4189F
  4190Ftypedef
  4191Fstruct GPACTRL_BITS
  4192F{                             // bits description
  4193F  Uint16 QUALPRD0 : 8 ;
  4194F                      // 7:0 Qual period
  4195F  Uint16 QUALPRD1 : 8 ;
  4196F                      // 15:8 Qual period
  4197F  Uint16 QUALPRD2 : 8 ;
  4198F                      // 23:16 Qual period
  4199F  Uint16 QUALPRD3 : 8 ;
  4200F                      // 31:24 Qual period
  4201F} GPACTRL_BITS ;
  4202F
  4203Ftypedef
  4204Funion GPACTRL_REG
  4205F{
  4206F  Uint32 all ;
  4207F  struct GPACTRL_BITS bit ;
  4208F} GPACTRL_REG ;
  4209F//----------------------------------------------------
  4210F// GPIO B control register bit definitions */
  4211F
  4212Ftypedef
  4213Fstruct GPBCTRL_BITS
  4214F{                             // bits description
  4215F  Uint16 QUALPRD0 : 8 ;
  4216F                      // 7:0 Qual period
  4217F  Uint16 QUALPRD1 : 8 ;
  4218F                      // 15:8 Qual period
  4219F  Uint16 QUALPRD2 : 8 ;
  4220F                      // 23:16 Qual period
  4221F  Uint16 QUALPRD3 : 8 ;
  4222F                      // 31:24
  4223F} GPBCTRL_BITS ;
  4224F
  4225Ftypedef
  4226Funion GPBCTRL_REG
  4227F{
  4228F  Uint32 all ;
  4229F  struct GPBCTRL_BITS bit ;
  4230F} GPBCTRL_REG ;
  4231F//----------------------------------------------------
  4232F// GPIO A Qual/MUX select register bit definitions */
  4233F
  4234Ftypedef
  4235Fstruct GPA1_BITS
  4236F{                          // bits description
  4237F  Uint16 GPIO0 : 2 ;
  4238F                   // 1:0 GPIO0
  4239F  Uint16 GPIO1 : 2 ;
  4240F                   // 3:2 GPIO1
  4241F  Uint16 GPIO2 : 2 ;
  4242F                   // 5:4 GPIO2
  4243F  Uint16 GPIO3 : 2 ;
  4244F                   // 7:6 GPIO3
  4245F  Uint16 GPIO4 : 2 ;
  4246F                   // 9:8 GPIO4
  4247F  Uint16 GPIO5 : 2 ;
  4248F                   // 11:10 GPIO5
  4249F  Uint16 GPIO6 : 2 ;
  4250F                   // 13:12 GPIO6
  4251F  Uint16 GPIO7 : 2 ;
  4252F                   // 15:14 GPIO7
  4253F  Uint16 GPIO8 : 2 ;
  4254F                   // 17:16 GPIO8
  4255F  Uint16 GPIO9 : 2 ;
  4256F                   // 19:18 GPIO9
  4257F  Uint16 GPIO10 : 2 ;
  4258F                    // 21:20 GPIO10
  4259F  Uint16 GPIO11 : 2 ;
  4260F                    // 23:22 GPIO11
  4261F  Uint16 GPIO12 : 2 ;
  4262F                    // 25:24 GPIO12
  4263F  Uint16 GPIO13 : 2 ;
  4264F                    // 27:26 GPIO13
  4265F  Uint16 GPIO14 : 2 ;
  4266F                    // 29:28 GPIO14
  4267F  Uint16 GPIO15 : 2 ;
  4268F                    // 31:30 GPIO15
  4269F} GPA1_BITS ;
  4270F
  4271Ftypedef
  4272Fstruct GPA2_BITS
  4273F{                          // bits description
  4274F  Uint16 GPIO16 : 2 ;
  4275F                    // 1:0 GPIO16
  4276F  Uint16 GPIO17 : 2 ;
  4277F                    // 3:2 GPIO17
  4278F  Uint16 GPIO18 : 2 ;
  4279F                    // 5:4 GPIO18
  4280F  Uint16 GPIO19 : 2 ;
  4281F                    // 7:6 GPIO19
  4282F  Uint16 GPIO20 : 2 ;
  4283F                    // 9:8 GPIO20
  4284F  Uint16 GPIO21 : 2 ;
  4285F                    // 11:10 GPIO21
  4286F  Uint16 GPIO22 : 2 ;
  4287F                    // 13:12 GPIO22
  4288F  Uint16 GPIO23 : 2 ;
  4289F                    // 15:14 GPIO23
  4290F  Uint16 GPIO24 : 2 ;
  4291F                    // 17:16 GPIO24
  4292F  Uint16 GPIO25 : 2 ;
  4293F                    // 19:18 GPIO25
  4294F  Uint16 GPIO26 : 2 ;
  4295F                    // 21:20 GPIO26
  4296F  Uint16 GPIO27 : 2 ;
  4297F                    // 23:22 GPIO27
  4298F  Uint16 GPIO28 : 2 ;
  4299F                    // 25:24 GPIO28
  4300F  Uint16 GPIO29 : 2 ;
  4301F                    // 27:26 GPIO29
  4302F  Uint16 GPIO30 : 2 ;
  4303F                    // 29:28 GPIO30
  4304F  Uint16 GPIO31 : 2 ;
  4305F                    // 31:30 GPIO31
  4306F} GPA2_BITS ;
  4307F
  4308Ftypedef
  4309Fstruct GPB1_BITS
  4310F{                          // bits description
  4311F  Uint16 GPIO32 : 2 ;
  4312F                    // 1:0 GPIO32
  4313F  Uint16 GPIO33 : 2 ;
  4314F                    // 3:2 GPIO33
  4315F  Uint16 GPIO34 : 2 ;
  4316F                    // 5:4 GPIO34
  4317F  Uint16 GPIO35 : 2 ;
  4318F                    // 7:6 GPIO35
  4319F  Uint16 GPIO36 : 2 ;
  4320F                    // 9:8 GPIO36
  4321F  Uint16 GPIO37 : 2 ;
  4322F                    // 11:10 GPIO37
  4323F  Uint16 GPIO38 : 2 ;
  4324F                    // 13:12 GPIO38
  4325F  Uint16 GPIO39 : 2 ;
  4326F                    // 15:14 GPIO39
  4327F  Uint16 GPIO40 : 2 ;
  4328F                    // 17:16 GPIO40
  4329F  Uint16 GPIO41 : 2 ;
  4330F                    // 19:16 GPIO41
  4331F  Uint16 GPIO42 : 2 ;
  4332F                    // 21:20 GPIO42
  4333F  Uint16 GPIO43 : 2 ;
  4334F                    // 23:22 GPIO43
  4335F  Uint16 GPIO44 : 2 ;
  4336F                    // 25:24 GPIO44
  4337F  Uint16 GPIO45 : 2 ;
  4338F                    // 27:26 GPIO45
  4339F  Uint16 GPIO46 : 2 ;
  4340F                    // 29:28 GPIO46
  4341F  Uint16 GPIO47 : 2 ;
  4342F                    // 31:30 GPIO47
  4343F} GPB1_BITS ;
  4344F
  4345Ftypedef
  4346Fstruct GPB2_BITS
  4347F{                          // bits description
  4348F  Uint16 GPIO48 : 2 ;
  4349F                    // 1:0 GPIO48
  4350F  Uint16 GPIO49 : 2 ;
  4351F                    // 3:2 GPIO49
  4352F  Uint16 GPIO50 : 2 ;
  4353F                    // 5:4 GPIO50
  4354F  Uint16 GPIO51 : 2 ;
  4355F                    // 7:6 GPIO51
  4356F  Uint16 GPIO52 : 2 ;
  4357F                    // 9:8 GPIO52
  4358F  Uint16 GPIO53 : 2 ;
  4359F                    // 11:10 GPIO53
  4360F  Uint16 GPIO54 : 2 ;
  4361F                    // 13:12 GPIO54
  4362F  Uint16 GPIO55 : 2 ;
  4363F                    // 15:14 GPIO55
  4364F  Uint16 GPIO56 : 2 ;
  4365F                    // 17:16 GPIO56
  4366F  Uint16 GPIO57 : 2 ;
  4367F                    // 19:18 GPIO57
  4368F  Uint16 GPIO58 : 2 ;
  4369F                    // 21:20 GPIO58
  4370F  Uint16 GPIO59 : 2 ;
  4371F                    // 23:22 GPIO59
  4372F  Uint16 GPIO60 : 2 ;
  4373F                    // 25:24 GPIO60
  4374F  Uint16 GPIO61 : 2 ;
  4375F                    // 27:26 GPIO61
  4376F  Uint16 GPIO62 : 2 ;
  4377F                    // 29:28 GPIO62
  4378F  Uint16 GPIO63 : 2 ;
  4379F                    // 31:30 GPIO63
  4380F} GPB2_BITS ;
  4381F
  4382Ftypedef
  4383Fstruct GPC1_BITS
  4384F{                          // bits description
  4385F  Uint16 GPIO64 : 2 ;
  4386F                    // 1:0 GPIO64
  4387F  Uint16 GPIO65 : 2 ;
  4388F                    // 3:2 GPIO65
  4389F  Uint16 GPIO66 : 2 ;
  4390F                    // 5:4 GPIO66
  4391F  Uint16 GPIO67 : 2 ;
  4392F                    // 7:6 GPIO67
  4393F  Uint16 GPIO68 : 2 ;
  4394F                    // 9:8 GPIO68
  4395F  Uint16 GPIO69 : 2 ;
  4396F                    // 11:10 GPIO69
  4397F  Uint16 GPIO70 : 2 ;
  4398F                    // 13:12 GPIO70
  4399F  Uint16 GPIO71 : 2 ;
  4400F                    // 15:14 GPIO71
  4401F  Uint16 GPIO72 : 2 ;
  4402F                    // 17:16 GPIO72
  4403F  Uint16 GPIO73 : 2 ;
  4404F                    // 19:18 GPIO73
  4405F  Uint16 GPIO74 : 2 ;
  4406F                    // 21:20 GPIO74
  4407F  Uint16 GPIO75 : 2 ;
  4408F                    // 23:22 GPIO75
  4409F  Uint16 GPIO76 : 2 ;
  4410F                    // 25:24 GPIO76
  4411F  Uint16 GPIO77 : 2 ;
  4412F                    // 27:26 GPIO77
  4413F  Uint16 GPIO78 : 2 ;
  4414F                    // 29:28 GPIO78
  4415F  Uint16 GPIO79 : 2 ;
  4416F                    // 31:30 GPIO79
  4417F} GPC1_BITS ;
  4418F
  4419Ftypedef
  4420Fstruct GPC2_BITS
  4421F{                          // bits description
  4422F  Uint16 GPIO80 : 2 ;
  4423F                    // 1:0 GPIO80
  4424F  Uint16 GPIO81 : 2 ;
  4425F                    // 3:2 GPIO81
  4426F  Uint16 GPIO82 : 2 ;
  4427F                    // 5:4 GPIO82
  4428F  Uint16 GPIO83 : 2 ;
  4429F                    // 7:6 GPIO83
  4430F  Uint16 GPIO84 : 2 ;
  4431F                    // 9:8 GPIO84
  4432F  Uint16 GPIO85 : 2 ;
  4433F                    // 11:10 GPIO85
  4434F  Uint16 GPIO86 : 2 ;
  4435F                    // 13:12 GPIO86
  4436F  Uint16 GPIO87 : 2 ;
  4437F                    // 15:14 GPIO87
  4438F  Uint16 rsvd : 16 ;
  4439F                   // 31:16 reserved
  4440F} GPC2_BITS ;
  4441F
  4442Ftypedef
  4443Funion GPA1_REG
  4444F{
  4445F  Uint32 all ;
  4446F  struct GPA1_BITS bit ;
  4447F} GPA1_REG ;
  4448F
  4449Ftypedef
  4450Funion GPA2_REG
  4451F{
  4452F  Uint32 all ;
  4453F  struct GPA2_BITS bit ;
  4454F} GPA2_REG ;
  4455F
  4456Ftypedef
  4457Funion GPB1_REG
  4458F{
  4459F  Uint32 all ;
  4460F  struct GPB1_BITS bit ;
  4461F} GPB1_REG ;
  4462F
  4463Ftypedef
  4464Funion GPB2_REG
  4465F{
  4466F  Uint32 all ;
  4467F  struct GPB2_BITS bit ;
  4468F} GPB2_REG ;
  4469F
  4470Ftypedef
  4471Funion GPC1_REG
  4472F{
  4473F  Uint32 all ;
  4474F  struct GPC1_BITS bit ;
  4475F} GPC1_REG ;
  4476F
  4477Ftypedef
  4478Funion GPC2_REG
  4479F{
  4480F  Uint32 all ;
  4481F  struct GPC2_BITS bit ;
  4482F} GPC2_REG ;
  4483F//----------------------------------------------------
  4484F// GPIO A DIR/TOGGLE/SET/CLEAR register bit definitions */
  4485F
  4486Ftypedef
  4487Fstruct GPADAT_BITS
  4488F{                            // bits description
  4489F  Uint16 GPIO0 : 1 ;
  4490F                   // 0 GPIO0
  4491F  Uint16 GPIO1 : 1 ;
  4492F                   // 1 GPIO1
  4493F  Uint16 GPIO2 : 1 ;
  4494F                   // 2 GPIO2
  4495F  Uint16 GPIO3 : 1 ;
  4496F                   // 3 GPIO3
  4497F  Uint16 GPIO4 : 1 ;
  4498F                   // 4 GPIO4
  4499F  Uint16 GPIO5 : 1 ;
  4500F                   // 5 GPIO5
  4501F  Uint16 GPIO6 : 1 ;
  4502F                   // 6 GPIO6
  4503F  Uint16 GPIO7 : 1 ;
  4504F                   // 7 GPIO7
  4505F  Uint16 GPIO8 : 1 ;
  4506F                   // 8 GPIO8
  4507F  Uint16 GPIO9 : 1 ;
  4508F                   // 9 GPIO9
  4509F  Uint16 GPIO10 : 1 ;
  4510F                    // 10 GPIO10
  4511F  Uint16 GPIO11 : 1 ;
  4512F                    // 11 GPIO11
  4513F  Uint16 GPIO12 : 1 ;
  4514F                    // 12 GPIO12
  4515F  Uint16 GPIO13 : 1 ;
  4516F                    // 13 GPIO13
  4517F  Uint16 GPIO14 : 1 ;
  4518F                    // 14 GPIO14
  4519F  Uint16 GPIO15 : 1 ;
  4520F                    // 15 GPIO15
  4521F  Uint16 GPIO16 : 1 ;
  4522F                    // 16 GPIO16
  4523F  Uint16 GPIO17 : 1 ;
  4524F                    // 17 GPIO17
  4525F  Uint16 GPIO18 : 1 ;
  4526F                    // 18 GPIO18
  4527F  Uint16 GPIO19 : 1 ;
  4528F                    // 19 GPIO19
  4529F  Uint16 GPIO20 : 1 ;
  4530F                    // 20 GPIO20
  4531F  Uint16 GPIO21 : 1 ;
  4532F                    // 21 GPIO21
  4533F  Uint16 GPIO22 : 1 ;
  4534F                    // 22 GPIO22
  4535F  Uint16 GPIO23 : 1 ;
  4536F                    // 23 GPIO23
  4537F  Uint16 GPIO24 : 1 ;
  4538F                    // 24 GPIO24
  4539F  Uint16 GPIO25 : 1 ;
  4540F                    // 25 GPIO25
  4541F  Uint16 GPIO26 : 1 ;
  4542F                    // 26 GPIO26
  4543F  Uint16 GPIO27 : 1 ;
  4544F                    // 27 GPIO27
  4545F  Uint16 GPIO28 : 1 ;
  4546F                    // 28 GPIO28
  4547F  Uint16 GPIO29 : 1 ;
  4548F                    // 29 GPIO29
  4549F  Uint16 GPIO30 : 1 ;
  4550F                    // 30 GPIO30
  4551F  Uint16 GPIO31 : 1 ;
  4552F                    // 31 GPIO31
  4553F} GPADAT_BITS ;
  4554F
  4555Ftypedef
  4556Fstruct GPBDAT_BITS
  4557F{                            // bits description
  4558F  Uint16 GPIO32 : 1 ;
  4559F                    // 0 GPIO32
  4560F  Uint16 GPIO33 : 1 ;
  4561F                    // 1 GPIO33
  4562F  Uint16 GPIO34 : 1 ;
  4563F                    // 2 GPIO34
  4564F  Uint16 GPIO35 : 1 ;
  4565F                    // 3 GPIO35
  4566F  Uint16 GPIO36 : 1 ;
  4567F                    // 4 GPIO36
  4568F  Uint16 GPIO37 : 1 ;
  4569F                    // 5 GPIO37
  4570F  Uint16 GPIO38 : 1 ;
  4571F                    // 6 GPIO38
  4572F  Uint16 GPIO39 : 1 ;
  4573F                    // 7 GPIO39
  4574F  Uint16 GPIO40 : 1 ;
  4575F                    // 8 GPIO40
  4576F  Uint16 GPIO41 : 1 ;
  4577F                    // 9 GPIO41
  4578F  Uint16 GPIO42 : 1 ;
  4579F                    // 10 GPIO42
  4580F  Uint16 GPIO43 : 1 ;
  4581F                    // 11 GPIO43
  4582F  Uint16 GPIO44 : 1 ;
  4583F                    // 12 GPIO44
  4584F  Uint16 GPIO45 : 1 ;
  4585F                    // 13 GPIO45
  4586F  Uint16 GPIO46 : 1 ;
  4587F                    // 14 GPIO46
  4588F  Uint16 GPIO47 : 1 ;
  4589F                    // 15 GPIO47
  4590F  Uint16 GPIO48 : 1 ;
  4591F                    // 16 GPIO48
  4592F  Uint16 GPIO49 : 1 ;
  4593F                    // 17 GPIO49
  4594F  Uint16 GPIO50 : 1 ;
  4595F                    // 18 GPIO50
  4596F  Uint16 GPIO51 : 1 ;
  4597F                    // 19 GPIO51
  4598F  Uint16 GPIO52 : 1 ;
  4599F                    // 20 GPIO52
  4600F  Uint16 GPIO53 : 1 ;
  4601F                    // 21 GPIO53
  4602F  Uint16 GPIO54 : 1 ;
  4603F                    // 22 GPIO54
  4604F  Uint16 GPIO55 : 1 ;
  4605F                    // 23 GPIO55
  4606F  Uint16 GPIO56 : 1 ;
  4607F                    // 24 GPIO56
  4608F  Uint16 GPIO57 : 1 ;
  4609F                    // 25 GPIO57
  4610F  Uint16 GPIO58 : 1 ;
  4611F                    // 26 GPIO58
  4612F  Uint16 GPIO59 : 1 ;
  4613F                    // 27 GPIO59
  4614F  Uint16 GPIO60 : 1 ;
  4615F                    // 28 GPIO60
  4616F  Uint16 GPIO61 : 1 ;
  4617F                    // 29 GPIO61
  4618F  Uint16 GPIO62 : 1 ;
  4619F                    // 30 GPIO62
  4620F  Uint16 GPIO63 : 1 ;
  4621F                    // 31 GPIO63
  4622F} GPBDAT_BITS ;
  4623F
  4624Ftypedef
  4625Fstruct GPCDAT_BITS
  4626F{                            // bits description
  4627F  Uint16 GPIO64 : 1 ;
  4628F                    // 0 GPIO64
  4629F  Uint16 GPIO65 : 1 ;
  4630F                    // 1 GPIO65
  4631F  Uint16 GPIO66 : 1 ;
  4632F                    // 2 GPIO66
  4633F  Uint16 GPIO67 : 1 ;
  4634F                    // 3 GPIO67
  4635F  Uint16 GPIO68 : 1 ;
  4636F                    // 4 GPIO68
  4637F  Uint16 GPIO69 : 1 ;
  4638F                    // 5 GPIO69
  4639F  Uint16 GPIO70 : 1 ;
  4640F                    // 6 GPIO70
  4641F  Uint16 GPIO71 : 1 ;
  4642F                    // 7 GPIO71
  4643F  Uint16 GPIO72 : 1 ;
  4644F                    // 8 GPIO72
  4645F  Uint16 GPIO73 : 1 ;
  4646F                    // 9 GPIO73
  4647F  Uint16 GPIO74 : 1 ;
  4648F                    // 10 GPIO74
  4649F  Uint16 GPIO75 : 1 ;
  4650F                    // 11 GPIO75
  4651F  Uint16 GPIO76 : 1 ;
  4652F                    // 12 GPIO76
  4653F  Uint16 GPIO77 : 1 ;
  4654F                    // 13 GPIO77
  4655F  Uint16 GPIO78 : 1 ;
  4656F                    // 14 GPIO78
  4657F  Uint16 GPIO79 : 1 ;
  4658F                    // 15 GPIO79
  4659F  Uint16 GPIO80 : 1 ;
  4660F                    // 16 GPIO80
  4661F  Uint16 GPIO81 : 1 ;
  4662F                    // 17 GPIO81
  4663F  Uint16 GPIO82 : 1 ;
  4664F                    // 18 GPIO82
  4665F  Uint16 GPIO83 : 1 ;
  4666F                    // 19 GPIO83
  4667F  Uint16 GPIO84 : 1 ;
  4668F                    // 20 GPIO84
  4669F  Uint16 GPIO85 : 1 ;
  4670F                    // 21 GPIO85
  4671F  Uint16 GPIO86 : 1 ;
  4672F                    // 22 GPIO86
  4673F  Uint16 GPIO87 : 1 ;
  4674F                    // 23 GPIO87
  4675F  Uint16 rsvd1 : 8 ;
  4676F                   // 31:24 reserved
  4677F} GPCDAT_BITS ;
  4678F
  4679Ftypedef
  4680Funion GPADAT_REG
  4681F{
  4682F  Uint32 all ;
  4683F  struct GPADAT_BITS bit ;
  4684F} GPADAT_REG ;
  4685F
  4686Ftypedef
  4687Funion GPBDAT_REG
  4688F{
  4689F  Uint32 all ;
  4690F  struct GPBDAT_BITS bit ;
  4691F} GPBDAT_REG ;
  4692F
  4693Ftypedef
  4694Funion GPCDAT_REG
  4695F{
  4696F  Uint32 all ;
  4697F  struct GPCDAT_BITS bit ;
  4698F} GPCDAT_REG ;
  4699F//----------------------------------------------------
  4700F// GPIO Xint1/XINT2/XNMI select register bit definitions */
  4701F
  4702Ftypedef
  4703Fstruct GPIOXINT_BITS
  4704F{                              // bits description
  4705F  Uint16 GPIOSEL : 5 ;// 4:0 Select GPIO interrupt input source
  4706F  Uint16 rsvd1 : 11 ;// 15:5 reserved
  4707F} GPIOXINT_BITS ;
  4708F
  4709Ftypedef
  4710Funion GPIOXINT_REG
  4711F{
  4712F  Uint16 all ;
  4713F  struct GPIOXINT_BITS bit ;
  4714F} GPIOXINT_REG ;
  4715F
  4716Ftypedef
  4717Fstruct GPIO_CTRL_REGS
  4718F{
  4719F  union GPACTRL_REG GPACTRL ; // GPIO A Control Register (GPIO0 to 31)
  4720F  union GPA1_REG GPAQSEL1 ; // GPIO A Qualifier Select 1 Register (GPIO0 to 15)
  4721F  union GPA2_REG GPAQSEL2 ; // GPIO A Qualifier Select 2 Register (GPIO16 to 31)
  4722F  union GPA1_REG GPAMUX1 ; // GPIO A Mux 1 Register (GPIO0 to 15)
  4723F  union GPA2_REG GPAMUX2 ; // GPIO A Mux 2 Register (GPIO16 to 31)
  4724F  union GPADAT_REG GPADIR ; // GPIO A Direction Register (GPIO0 to 31)
  4725F  union GPADAT_REG GPAPUD ; // GPIO A Pull Up Disable Register (GPIO0 to 31)
  4726F  Uint32 rsvd1 ;
  4727F  union GPBCTRL_REG GPBCTRL ; // GPIO B Control Register (GPIO32 to 63)
  4728F  union GPB1_REG GPBQSEL1 ; // GPIO B Qualifier Select 1 Register (GPIO32 to 47)
  4729F  union GPB2_REG GPBQSEL2 ; // GPIO B Qualifier Select 2 Register (GPIO48 to 63)
  4730F  union GPB1_REG GPBMUX1 ; // GPIO B Mux 1 Register (GPIO32 to 47)
  4731F  union GPB2_REG GPBMUX2 ; // GPIO B Mux 2 Register (GPIO48 to 63)
  4732F  union GPBDAT_REG GPBDIR ; // GPIO B Direction Register (GPIO32 to 63)
  4733F  union GPBDAT_REG GPBPUD ; // GPIO B Pull Up Disable Register (GPIO32 to 63)
  4734F  Uint16 rsvd2 [ 8 ] ;
  4735F  union GPC1_REG GPCMUX1 ; // GPIO C Mux 1 Register (GPIO64 to 79)
  4736F  union GPC2_REG GPCMUX2 ; // GPIO C Mux 2 Register (GPIO80 to 95)
  4737F  union GPCDAT_REG GPCDIR ; // GPIO C Direction Register (GPIO64 to 95)
  4738F  union GPCDAT_REG GPCPUD ; // GPIO C Pull Up Disable Register (GPIO64 to 95)
  4739F} GPIO_CTRL_REGS ;
  4740F
  4741Ftypedef
  4742Fstruct GPIO_DATA_REGS
  4743F{
  4744F  union GPADAT_REG GPADAT ; // GPIO Data Register (GPIO0 to 31)
  4745F  union GPADAT_REG GPASET ; // GPIO Data Set Register (GPIO0 to 31)
  4746F  union GPADAT_REG GPACLEAR ; // GPIO Data Clear Register (GPIO0 to 31)
  4747F  union GPADAT_REG GPATOGGLE ; // GPIO Data Toggle Register (GPIO0 to 31)
  4748F  union GPBDAT_REG GPBDAT ; // GPIO Data Register (GPIO32 to 63)
  4749F  union GPBDAT_REG GPBSET ; // GPIO Data Set Register (GPIO32 to 63)
  4750F  union GPBDAT_REG GPBCLEAR ; // GPIO Data Clear Register (GPIO32 to 63)
  4751F  union GPBDAT_REG GPBTOGGLE ; // GPIO Data Toggle Register (GPIO32 to 63)
  4752F  union GPCDAT_REG GPCDAT ; // GPIO Data Register (GPIO64 to 95)
  4753F  union GPCDAT_REG GPCSET ; // GPIO Data Set Register (GPIO64 to 95)
  4754F  union GPCDAT_REG GPCCLEAR ; // GPIO Data Clear Register (GPIO64 to 95)
  4755F  union GPCDAT_REG GPCTOGGLE ; // GPIO Data Toggle Register (GPIO64 to 95)
  4756F  Uint16 rsvd1 [ 8 ] ;
  4757F} GPIO_DATA_REGS ;
  4758F
  4759Ftypedef
  4760Fstruct GPIO_INT_REGS
  4761F{
  4762F  union GPIOXINT_REG GPIOXINT1SEL ; // XINT1 GPIO Input Selection
  4763F  union GPIOXINT_REG GPIOXINT2SEL ; // XINT2 GPIO Input Selection
  4764F  union GPIOXINT_REG GPIOXNMISEL ; // XNMI_Xint13 GPIO Input Selection
  4765F  union GPIOXINT_REG GPIOXINT3SEL ; // XINT3 GPIO Input Selection
  4766F  union GPIOXINT_REG GPIOXINT4SEL ; // XINT4 GPIO Input Selection
  4767F  union GPIOXINT_REG GPIOXINT5SEL ; // XINT5 GPIO Input Selection
  4768F  union GPIOXINT_REG GPIOXINT6SEL ; // XINT6 GPIO Input Selection
  4769F  union GPIOXINT_REG GPIOXINT7SEL ; // XINT7 GPIO Input Selection
  4770F  union GPADAT_REG GPIOLPMSEL ; // Low power modes GP I/O input select
  4771F} GPIO_INT_REGS ;
  4772F//---------------------------------------------------------------------------
  4773F// GPI/O External References & Function Declarations:
  4774F//
  4775F
  4776Fextern volatile struct GPIO_CTRL_REGS
  4777F  GpioCtrlRegs ;
  4778F
  4779Fextern volatile struct GPIO_DATA_REGS
  4780F  GpioDataRegs ;
  4781F
  4782Fextern volatile struct GPIO_INT_REGS
  4783F  GpioIntRegs ;
  4784F       // end of DSP2833x_GPIO_H definition
  4785F//===========================================================================
  4786F// End of file.
  4787F//===========================================================================
  4788F 
  4789F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Gpio.h*/
  4790F/*   CLOSE_FILE Include File */
  4791F 
  4792F               // General Purpose I/O Registers
  4793F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_I2c.h */
  4794F// TI File $Revision: /main/2 $
  4795F// Checkin $Date: March 22, 2007 10:40:22 $
  4796F//###########################################################################
  4797F//
  4798F// FILE: DSP2833x_I2c.h
  4799F//
  4800F// TITLE: DSP2833x Enhanced Quadrature Encoder Pulse Module
  4801F// Register Bit Definitions.
  4802F//
  4803F//###########################################################################
  4804F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  4805F// $Release Date: August 4, 2009 $
  4806F//###########################################################################
  4807F#ifndef DSP2833x_I2C_H
  4808F#define DSP2833x_I2C_H
  4809F//----------------------------------------------------
  4810F// I2C interrupt vector register bit definitions */
  4811F
  4812Fstruct I2CISRC_BITS
  4813F{                     // bits description
  4814F  Uint16 INTCODE : 3 ;
  4815F                     // 2:0 Interrupt code
  4816F  Uint16 rsvd1 : 13 ;
  4817F                    // 15:3 reserved
  4818F} ;
  4819F
  4820Funion I2CISRC_REG
  4821F{
  4822F  Uint16 all ;
  4823F  struct I2CISRC_BITS bit ;
  4824F} ;
  4825F//----------------------------------------------------
  4826F// I2C interrupt mask register bit definitions */
  4827F
  4828Fstruct I2CIER_BITS
  4829F{                    // bits description
  4830F  Uint16 ARBL : 1 ;
  4831F                  // 0 Arbitration lost interrupt
  4832F  Uint16 NACK : 1 ;
  4833F                  // 1 No ack interrupt
  4834F  Uint16 ARDY : 1 ;
  4835F                  // 2 Register access ready interrupt
  4836F  Uint16 RRDY : 1 ;
  4837F                  // 3 Recieve data ready interrupt
  4838F  Uint16 XRDY : 1 ;
  4839F                  // 4 Transmit data ready interrupt
  4840F  Uint16 SCD : 1 ;
  4841F                 // 5 Stop condition detection
  4842F  Uint16 AAS : 1 ;
  4843F                 // 6 Address as slave
  4844F  Uint16 rsvd : 9 ;
  4845F                  // 15:7 reserved
  4846F} ;
  4847F
  4848Funion I2CIER_REG
  4849F{
  4850F  Uint16 all ;
  4851F  struct I2CIER_BITS bit ;
  4852F} ;
  4853F//----------------------------------------------------
  4854F// I2C status register bit definitions */
  4855F
  4856Fstruct I2CSTR_BITS
  4857F{                    // bits description
  4858F  Uint16 ARBL : 1 ;
  4859F                  // 0 Arbitration lost interrupt
  4860F  Uint16 NACK : 1 ;
  4861F                  // 1 No ack interrupt
  4862F  Uint16 ARDY : 1 ;
  4863F                  // 2 Register access ready interrupt
  4864F  Uint16 RRDY : 1 ;
  4865F                  // 3 Recieve data ready interrupt
  4866F  Uint16 XRDY : 1 ;
  4867F                  // 4 Transmit data ready interrupt
  4868F  Uint16 SCD : 1 ;
  4869F                 // 5 Stop condition detection
  4870F  Uint16 rsvd1 : 2 ;
  4871F                   // 7:6 reserved
  4872F  Uint16 AD0 : 1 ;
  4873F                 // 8 Address Zero
  4874F  Uint16 AAS : 1 ;
  4875F                 // 9 Address as slave
  4876F  Uint16 XSMT : 1 ;
  4877F                  // 10 XMIT shift empty
  4878F  Uint16 RSFULL : 1 ;
  4879F                    // 11 Recieve shift full
  4880F  Uint16 BB : 1 ;
  4881F                // 12 Bus busy
  4882F  Uint16 NACKSNT : 1 ;
  4883F                     // 13 A no ack sent
  4884F  Uint16 SDIR : 1 ;
  4885F                  // 14 Slave direction
  4886F  Uint16 rsvd2 : 1 ;
  4887F                   // 15 reserved
  4888F} ;
  4889F
  4890Funion I2CSTR_REG
  4891F{
  4892F  Uint16 all ;
  4893F  struct I2CSTR_BITS bit ;
  4894F} ;
  4895F//----------------------------------------------------
  4896F// I2C mode control register bit definitions */
  4897F
  4898Fstruct I2CMDR_BITS
  4899F{                    // bits description
  4900F  Uint16 BC : 3 ;
  4901F                // 2:0 Bit count
  4902F  Uint16 FDF : 1 ;
  4903F                 // 3 Free data format
  4904F  Uint16 STB : 1 ;
  4905F                 // 4 Start byte
  4906F  Uint16 IRS : 1 ;
  4907F                 // 5 I2C Reset not
  4908F  Uint16 DLB : 1 ;
  4909F                 // 6 Digital loopback
  4910F  Uint16 RM : 1 ;
  4911F                // 7 Repeat mode
  4912F  Uint16 XA : 1 ;
  4913F                // 8 Expand address
  4914F  Uint16 TRX : 1 ;
  4915F                 // 9 Transmitter/reciever
  4916F  Uint16 MST : 1 ;
  4917F                 // 10 Master/slave
  4918F  Uint16 STP : 1 ;
  4919F                 // 11 Stop condition
  4920F  Uint16 rsvd1 : 1 ;
  4921F                   // 12 reserved
  4922F  Uint16 STT : 1 ;
  4923F                 // 13 Start condition
  4924F  Uint16 FREE : 1 ;
  4925F                  // 14 Emulation mode
  4926F  Uint16 NACKMOD : 1 ;
  4927F                     // 15 No Ack mode
  4928F} ;
  4929F
  4930Funion I2CMDR_REG
  4931F{
  4932F  Uint16 all ;
  4933F  struct I2CMDR_BITS bit ;
  4934F} ;
  4935F//----------------------------------------------------
  4936F// I2C pre-scaler register bit definitions */
  4937F
  4938Fstruct I2CPSC_BITS
  4939F{                    // bits description
  4940F  Uint16 IPSC : 8 ;
  4941F                  // 7:0 pre-scaler
  4942F  Uint16 rsvd1 : 8 ;
  4943F                   // 15:8 reserved
  4944F} ;
  4945F
  4946Funion I2CPSC_REG
  4947F{
  4948F  Uint16 all ;
  4949F  struct I2CPSC_BITS bit ;
  4950F} ;
  4951F//----------------------------------------------------
  4952F// TX FIFO control register bit definitions */
  4953F
  4954Fstruct I2CFFTX_BITS
  4955F{                     // bits description
  4956F  Uint16 TXFFIL : 5 ;
  4957F                    // 4:0 FIFO interrupt level
  4958F  Uint16 TXFFIENA : 1 ;
  4959F                      // 5 FIFO interrupt enable/disable
  4960F  Uint16 TXFFINTCLR : 1 ;
  4961F                        // 6 FIFO clear
  4962F  Uint16 TXFFINT : 1 ;
  4963F                     // 7 FIFO interrupt flag
  4964F  Uint16 TXFFST : 5 ;
  4965F                    // 12:8 FIFO level status
  4966F  Uint16 TXFFRST : 1 ;
  4967F                     // 13 FIFO reset
  4968F  Uint16 I2CFFEN : 1 ;
  4969F                     // 14 enable/disable TX & RX FIFOs
  4970F  Uint16 rsvd1 : 1 ;
  4971F                   // 15 reserved
  4972F} ;
  4973F
  4974Funion I2CFFTX_REG
  4975F{
  4976F  Uint16 all ;
  4977F  struct I2CFFTX_BITS bit ;
  4978F} ;
  4979F//----------------------------------------------------
  4980F// RX FIFO control register bit definitions */
  4981F
  4982Fstruct I2CFFRX_BITS
  4983F{                     // bits description
  4984F  Uint16 RXFFIL : 5 ;
  4985F                    // 4:0 FIFO interrupt level
  4986F  Uint16 RXFFIENA : 1 ;
  4987F                      // 5 FIFO interrupt enable/disable
  4988F  Uint16 RXFFINTCLR : 1 ;
  4989F                        // 6 FIFO clear
  4990F  Uint16 RXFFINT : 1 ;
  4991F                     // 7 FIFO interrupt flag
  4992F  Uint16 RXFFST : 5 ;
  4993F                    // 12:8 FIFO level
  4994F  Uint16 RXFFRST : 1 ;
  4995F                     // 13 FIFO reset
  4996F  Uint16 rsvd1 : 2 ;
  4997F                   // 15:14 reserved
  4998F} ;
  4999F
  5000Funion I2CFFRX_REG
  5001F{
  5002F  Uint16 all ;
  5003F  struct I2CFFRX_BITS bit ;
  5004F} ;
  5005F//----------------------------------------------------
  5006F
  5007Fstruct I2C_REGS
  5008F{
  5009F  Uint16 I2COAR ; // Own address register
  5010F  union I2CIER_REG I2CIER ; // Interrupt enable
  5011F  union I2CSTR_REG I2CSTR ; // Interrupt status
  5012F  Uint16 I2CCLKL ; // Clock divider low
  5013F  Uint16 I2CCLKH ; // Clock divider high
  5014F  Uint16 I2CCNT ; // Data count
  5015F  Uint16 I2CDRR ; // Data recieve
  5016F  Uint16 I2CSAR ; // Slave address
  5017F  Uint16 I2CDXR ; // Data transmit
  5018F  union I2CMDR_REG I2CMDR ; // Mode
  5019F  union I2CISRC_REG I2CISRC ; // Interrupt source
  5020F  Uint16 rsvd1 ; // reserved
  5021F  union I2CPSC_REG I2CPSC ; // Pre-scaler
  5022F  Uint16 rsvd2 [ 19 ] ;
  5023F                     // reserved
  5024F  union I2CFFTX_REG I2CFFTX ; // Transmit FIFO
  5025F  union I2CFFRX_REG I2CFFRX ; // Recieve FIFO
  5026F} ;
  5027F//---------------------------------------------------------------------------
  5028F// External References & Function Declarations:
  5029F//
  5030F
  5031Fextern volatile struct I2C_REGS
  5032F  I2caRegs ;
  5033F       /* extern "C" */
  5034F       // end of DSP2833x_I2C_H definition
  5035F//===========================================================================
  5036F// End of file.
  5037F//===========================================================================
  5038F 
  5039F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_I2c.h*/
  5040F/*   CLOSE_FILE Include File */
  5041F 
  5042F                // I2C Registers
  5043F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_McBSP.h */
  5044F// TI File $Revision: /main/5 $
  5045F// Checkin $Date: May 14, 2008 16:30:31 $
  5046F//###########################################################################
  5047F//
  5048F// FILE: DSP2833x_Mcbsp.h
  5049F//
  5050F// TITLE: DSP2833x Device McBSP Register Definitions.
  5051F//
  5052F//###########################################################################
  5053F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  5054F// $Release Date: August 4, 2009 $
  5055F//###########################################################################
  5056F#ifndef DSP2833x_MCBSP_H
  5057F#define DSP2833x_MCBSP_H
  5058F//---------------------------------------------------------------------------
  5059F// McBSP Individual Register Bit Definitions:
  5060F//
  5061F// McBSP DRR2 register bit definitions:
  5062F
  5063Fstruct DRR2_BITS
  5064F{                  // bit description
  5065F  Uint16 HWLB : 8 ;
  5066F                  // 16:23 High word low byte
  5067F  Uint16 HWHB : 8 ;
  5068F                  // 24:31 High word high byte
  5069F} ;
  5070F
  5071Funion DRR2_REG
  5072F{
  5073F  Uint16 all ;
  5074F  struct DRR2_BITS bit ;
  5075F} ;
  5076F// McBSP DRR1 register bit definitions:
  5077F
  5078Fstruct DRR1_BITS
  5079F{                  // bit description
  5080F  Uint16 LWLB : 8 ;
  5081F                  // 16:23 Low word low byte
  5082F  Uint16 LWHB : 8 ;
  5083F                  // 24:31 low word high byte
  5084F} ;
  5085F
  5086Funion DRR1_REG
  5087F{
  5088F  Uint16 all ;
  5089F  struct DRR1_BITS bit ;
  5090F} ;
  5091F// McBSP DXR2 register bit definitions:
  5092F
  5093Fstruct DXR2_BITS
  5094F{                  // bit description
  5095F  Uint16 HWLB : 8 ;
  5096F                  // 16:23 High word low byte
  5097F  Uint16 HWHB : 8 ;
  5098F                  // 24:31 High word high byte
  5099F} ;
  5100F
  5101Funion DXR2_REG
  5102F{
  5103F  Uint16 all ;
  5104F  struct DXR2_BITS bit ;
  5105F} ;
  5106F// McBSP DXR1 register bit definitions:
  5107F
  5108Fstruct DXR1_BITS
  5109F{                  // bit description
  5110F  Uint16 LWLB : 8 ;
  5111F                  // 16:23 Low word low byte
  5112F  Uint16 LWHB : 8 ;
  5113F                  // 24:31 low word high byte
  5114F} ;
  5115F
  5116Funion DXR1_REG
  5117F{
  5118F  Uint16 all ;
  5119F  struct DXR1_BITS bit ;
  5120F} ;
  5121F// SPCR2 control register bit definitions:
  5122F
  5123Fstruct SPCR2_BITS
  5124F{                   // bit description
  5125F  Uint16 XRST : 1 ;
  5126F                  // 0 transmit reset
  5127F  Uint16 XRDY : 1 ;
  5128F                  // 1 transmit ready
  5129F  Uint16 XEMPTY : 1 ;
  5130F                    // 2 Transmit empty
  5131F  Uint16 XSYNCERR : 1 ;
  5132F                      // 3 Transmit syn errorINT flag
  5133F  Uint16 XINTM : 2 ;
  5134F                   // 5:4 Transmit interrupt types
  5135F  Uint16 GRST : 1 ;
  5136F                  // 6 CLKG reset
  5137F  Uint16 FRST : 1 ;
  5138F                  // 7 Frame sync reset
  5139F  Uint16 SOFT : 1 ;
  5140F                  // 8 SOFT bit
  5141F  Uint16 FREE : 1 ;
  5142F                  // 9 FREE bit
  5143F  Uint16 rsvd : 6 ;
  5144F                  // 15:10 reserved
  5145F} ;
  5146F
  5147Funion SPCR2_REG
  5148F{
  5149F  Uint16 all ;
  5150F  struct SPCR2_BITS bit ;
  5151F} ;
  5152F// SPCR1 control register bit definitions:
  5153F
  5154Fstruct SPCR1_BITS
  5155F{                   // bit description
  5156F  Uint16 RRST : 1 ;
  5157F                  // 0 Receive reset
  5158F  Uint16 RRDY : 1 ;
  5159F                  // 1 Receive ready
  5160F  Uint16 RFULL : 1 ;
  5161F                   // 2 Receive full
  5162F  Uint16 RSYNCERR : 1 ;
  5163F                      // 7 Receive syn error
  5164F  Uint16 RINTM : 2 ;
  5165F                   // 5:4 Receive interrupt types
  5166F  Uint16 ABIS : 1 ;
  5167F                  // 6 ABIS mode select
  5168F  Uint16 DXENA : 1 ;
  5169F                   // 7 DX hi-z enable
  5170F  Uint16 rsvd : 3 ;
  5171F                  // 10:8 reserved
  5172F  Uint16 CLKSTP : 2 ;
  5173F                    // 12:11 CLKSTOP mode bit
  5174F  Uint16 RJUST : 2 ;
  5175F                   // 13:14 Right justified
  5176F  Uint16 DLB : 1 ;
  5177F                 // 15 Digital loop back
  5178F} ;
  5179F
  5180Funion SPCR1_REG
  5181F{
  5182F  Uint16 all ;
  5183F  struct SPCR1_BITS bit ;
  5184F} ;
  5185F// RCR2 control register bit definitions:
  5186F
  5187Fstruct RCR2_BITS
  5188F{                  // bit description
  5189F  Uint16 RDATDLY : 2 ;
  5190F                     // 1:0 Receive data delay
  5191F  Uint16 RFIG : 1 ;
  5192F                  // 2 Receive frame sync ignore
  5193F  Uint16 RCOMPAND : 2 ;
  5194F                      // 4:3 Receive Companding Mode selects
  5195F  Uint16 RWDLEN2 : 3 ;
  5196F                     // 7:5 Receive word length
  5197F  Uint16 RFRLEN2 : 7 ;
  5198F                     // 14:8 Receive Frame sync
  5199F  Uint16 RPHASE : 1 ;
  5200F                    // 15 Receive Phase
  5201F} ;
  5202F
  5203Funion RCR2_REG
  5204F{
  5205F  Uint16 all ;
  5206F  struct RCR2_BITS bit ;
  5207F} ;
  5208F// RCR1 control register bit definitions:
  5209F
  5210Fstruct RCR1_BITS
  5211F{                  // bit description
  5212F  Uint16 rsvd1 : 5 ;
  5213F                   // 4:0 reserved
  5214F  Uint16 RWDLEN1 : 3 ;
  5215F                     // 7:5 Receive word length
  5216F  Uint16 RFRLEN1 : 7 ;
  5217F                     // 14:8 Receive frame length
  5218F  Uint16 rsvd2 : 1 ;
  5219F                   // 15 reserved
  5220F} ;
  5221F
  5222Funion RCR1_REG
  5223F{
  5224F  Uint16 all ;
  5225F  struct RCR1_BITS bit ;
  5226F} ;
  5227F// XCR2 control register bit definitions:
  5228F
  5229Fstruct XCR2_BITS
  5230F{                  // bit description
  5231F  Uint16 XDATDLY : 2 ;
  5232F                     // 1:0 Transmit data delay
  5233F  Uint16 XFIG : 1 ;
  5234F                  // 2 Transmit frame sync ignore
  5235F  Uint16 XCOMPAND : 2 ;
  5236F                      // 4:3 Transmit Companding Mode selects
  5237F  Uint16 XWDLEN2 : 3 ;
  5238F                     // 7:5 Transmit word length
  5239F  Uint16 XFRLEN2 : 7 ;
  5240F                     // 14:8 Transmit Frame sync
  5241F  Uint16 XPHASE : 1 ;
  5242F                    // 15 Transmit Phase
  5243F} ;
  5244F
  5245Funion XCR2_REG
  5246F{
  5247F  Uint16 all ;
  5248F  struct XCR2_BITS bit ;
  5249F} ;
  5250F// XCR1 control register bit definitions:
  5251F
  5252Fstruct XCR1_BITS
  5253F{                  // bit description
  5254F  Uint16 rsvd1 : 5 ;
  5255F                   // 4:0 reserved
  5256F  Uint16 XWDLEN1 : 3 ;
  5257F                     // 7:5 Transmit word length
  5258F  Uint16 XFRLEN1 : 7 ;
  5259F                     // 14:8 Transmit frame length
  5260F  Uint16 rsvd2 : 1 ;
  5261F                   // 15 reserved
  5262F} ;
  5263F
  5264Funion XCR1_REG
  5265F{
  5266F  Uint16 all ;
  5267F  struct XCR1_BITS bit ;
  5268F} ;
  5269F// SRGR2 Sample rate generator control register bit definitions:
  5270F
  5271Fstruct SRGR2_BITS
  5272F{                   // bit description
  5273F  Uint16 FPER : 12 ;
  5274F                   // 11:0 Frame period
  5275F  Uint16 FSGM : 1 ;
  5276F                  // 12 Frame sync generator mode
  5277F  Uint16 CLKSM : 1 ;
  5278F                   // 13 Sample rate generator mode
  5279F  Uint16 rsvd : 1 ;
  5280F                  // 14 reserved
  5281F  Uint16 GSYNC : 1 ;
  5282F                   // 15 CLKG sync
  5283F} ;
  5284F
  5285Funion SRGR2_REG
  5286F{
  5287F  Uint16 all ;
  5288F  struct SRGR2_BITS bit ;
  5289F} ;
  5290F// SRGR1 control register bit definitions:
  5291F
  5292Fstruct SRGR1_BITS
  5293F{                   // bit description
  5294F  Uint16 CLKGDV : 8 ;
  5295F                    // 7:0 CLKG divider
  5296F  Uint16 FWID : 8 ;
  5297F                  // 15:8 Frame width
  5298F} ;
  5299F
  5300Funion SRGR1_REG
  5301F{
  5302F  Uint16 all ;
  5303F  struct SRGR1_BITS bit ;
  5304F} ;
  5305F// MCR2 Multichannel control register bit definitions:
  5306F
  5307Fstruct MCR2_BITS
  5308F{                  // bit description
  5309F  Uint16 XMCM : 2 ;
  5310F                  // 1:0 Transmit multichannel mode
  5311F  Uint16 XCBLK : 3 ;
  5312F                   // 2:4 Transmit current block
  5313F  Uint16 XPABLK : 2 ;
  5314F                    // 5:6 Transmit partition A Block
  5315F  Uint16 XPBBLK : 2 ;
  5316F                    // 7:8 Transmit partition B Block
  5317F  Uint16 XMCME : 1 ;
  5318F                   // 9 Transmit multi-channel enhance mode
  5319F  Uint16 rsvd : 6 ;
  5320F                  // 15:10 reserved
  5321F} ;
  5322F
  5323Funion MCR2_REG
  5324F{
  5325F  Uint16 all ;
  5326F  struct MCR2_BITS bit ;
  5327F} ;
  5328F// MCR1 Multichannel control register bit definitions:
  5329F
  5330Fstruct MCR1_BITS
  5331F{                  // bit description
  5332F  Uint16 RMCM : 1 ;
  5333F                  // 0 Receive multichannel mode
  5334F  Uint16 rsvd : 1 ;
  5335F                  // 1 reserved
  5336F  Uint16 RCBLK : 3 ;
  5337F                   // 4:2 Receive current block
  5338F  Uint16 RPABLK : 2 ;
  5339F                    // 6:5 Receive partition A Block
  5340F  Uint16 RPBBLK : 2 ;
  5341F                    // 7:8 Receive partition B Block
  5342F  Uint16 RMCME : 1 ;
  5343F                   // 9 Receive multi-channel enhance mode
  5344F  Uint16 rsvd1 : 6 ;
  5345F                   // 15:10 reserved
  5346F} ;
  5347F
  5348Funion MCR1_REG
  5349F{
  5350F  Uint16 all ;
  5351F  struct MCR1_BITS bit ;
  5352F} ;
  5353F// RCERA control register bit definitions:
  5354F
  5355Fstruct RCERA_BITS
  5356F{                   // bit description
  5357F  Uint16 RCEA0 : 1 ;
  5358F                   // 0 Receive Channel enable bit
  5359F  Uint16 RCEA1 : 1 ;
  5360F                   // 1 Receive Channel enable bit
  5361F  Uint16 RCEA2 : 1 ;
  5362F                   // 2 Receive Channel enable bit
  5363F  Uint16 RCEA3 : 1 ;
  5364F                   // 3 Receive Channel enable bit
  5365F  Uint16 RCEA4 : 1 ;
  5366F                   // 4 Receive Channel enable bit
  5367F  Uint16 RCEA5 : 1 ;
  5368F                   // 5 Receive Channel enable bit
  5369F  Uint16 RCEA6 : 1 ;
  5370F                   // 6 Receive Channel enable bit
  5371F  Uint16 RCEA7 : 1 ;
  5372F                   // 7 Receive Channel enable bit
  5373F  Uint16 RCEA8 : 1 ;
  5374F                   // 8 Receive Channel enable bit
  5375F  Uint16 RCEA9 : 1 ;
  5376F                   // 9 Receive Channel enable bit
  5377F  Uint16 RCEA10 : 1 ;
  5378F                    // 10 Receive Channel enable bit
  5379F  Uint16 RCEA11 : 1 ;
  5380F                    // 11 Receive Channel enable bit
  5381F  Uint16 RCEA12 : 1 ;
  5382F                    // 12 Receive Channel enable bit
  5383F  Uint16 RCEA13 : 1 ;
  5384F                    // 13 Receive Channel enable bit
  5385F  Uint16 RCEA14 : 1 ;
  5386F                    // 14 Receive Channel enable bit
  5387F  Uint16 RCEA15 : 1 ;
  5388F                    // 15 Receive Channel enable bit
  5389F} ;
  5390F
  5391Funion RCERA_REG
  5392F{
  5393F  Uint16 all ;
  5394F  struct RCERA_BITS bit ;
  5395F} ;
  5396F// RCERB control register bit definitions:
  5397F
  5398Fstruct RCERB_BITS
  5399F{                   // bit description
  5400F  Uint16 RCEB0 : 1 ;
  5401F                   // 0 Receive Channel enable bit
  5402F  Uint16 RCEB1 : 1 ;
  5403F                   // 1 Receive Channel enable bit
  5404F  Uint16 RCEB2 : 1 ;
  5405F                   // 2 Receive Channel enable bit
  5406F  Uint16 RCEB3 : 1 ;
  5407F                   // 3 Receive Channel enable bit
  5408F  Uint16 RCEB4 : 1 ;
  5409F                   // 4 Receive Channel enable bit
  5410F  Uint16 RCEB5 : 1 ;
  5411F                   // 5 Receive Channel enable bit
  5412F  Uint16 RCEB6 : 1 ;
  5413F                   // 6 Receive Channel enable bit
  5414F  Uint16 RCEB7 : 1 ;
  5415F                   // 7 Receive Channel enable bit
  5416F  Uint16 RCEB8 : 1 ;
  5417F                   // 8 Receive Channel enable bit
  5418F  Uint16 RCEB9 : 1 ;
  5419F                   // 9 Receive Channel enable bit
  5420F  Uint16 RCEB10 : 1 ;
  5421F                    // 10 Receive Channel enable bit
  5422F  Uint16 RCEB11 : 1 ;
  5423F                    // 11 Receive Channel enable bit
  5424F  Uint16 RCEB12 : 1 ;
  5425F                    // 12 Receive Channel enable bit
  5426F  Uint16 RCEB13 : 1 ;
  5427F                    // 13 Receive Channel enable bit
  5428F  Uint16 RCEB14 : 1 ;
  5429F                    // 14 Receive Channel enable bit
  5430F  Uint16 RCEB15 : 1 ;
  5431F                    // 15 Receive Channel enable bit
  5432F} ;
  5433F
  5434Funion RCERB_REG
  5435F{
  5436F  Uint16 all ;
  5437F  struct RCERB_BITS bit ;
  5438F} ;
  5439F// XCERA control register bit definitions:
  5440F
  5441Fstruct XCERA_BITS
  5442F{                   // bit description
  5443F  Uint16 XCERA0 : 1 ;
  5444F                    // 0 Receive Channel enable bit
  5445F  Uint16 XCERA1 : 1 ;
  5446F                    // 1 Receive Channel enable bit
  5447F  Uint16 XCERA2 : 1 ;
  5448F                    // 2 Receive Channel enable bit
  5449F  Uint16 XCERA3 : 1 ;
  5450F                    // 3 Receive Channel enable bit
  5451F  Uint16 XCERA4 : 1 ;
  5452F                    // 4 Receive Channel enable bit
  5453F  Uint16 XCERA5 : 1 ;
  5454F                    // 5 Receive Channel enable bit
  5455F  Uint16 XCERA6 : 1 ;
  5456F                    // 6 Receive Channel enable bit
  5457F  Uint16 XCERA7 : 1 ;
  5458F                    // 7 Receive Channel enable bit
  5459F  Uint16 XCERA8 : 1 ;
  5460F                    // 8 Receive Channel enable bit
  5461F  Uint16 XCERA9 : 1 ;
  5462F                    // 9 Receive Channel enable bit
  5463F  Uint16 XCERA10 : 1 ;
  5464F                     // 10 Receive Channel enable bit
  5465F  Uint16 XCERA11 : 1 ;
  5466F                     // 11 Receive Channel enable bit
  5467F  Uint16 XCERA12 : 1 ;
  5468F                     // 12 Receive Channel enable bit
  5469F  Uint16 XCERA13 : 1 ;
  5470F                     // 13 Receive Channel enable bit
  5471F  Uint16 XCERA14 : 1 ;
  5472F                     // 14 Receive Channel enable bit
  5473F  Uint16 XCERA15 : 1 ;
  5474F                     // 15 Receive Channel enable bit
  5475F} ;
  5476F
  5477Funion XCERA_REG
  5478F{
  5479F  Uint16 all ;
  5480F  struct XCERA_BITS bit ;
  5481F} ;
  5482F// XCERB control register bit definitions:
  5483F
  5484Fstruct XCERB_BITS
  5485F{                   // bit description
  5486F  Uint16 XCERB0 : 1 ;
  5487F                    // 0 Receive Channel enable bit
  5488F  Uint16 XCERB1 : 1 ;
  5489F                    // 1 Receive Channel enable bit
  5490F  Uint16 XCERB2 : 1 ;
  5491F                    // 2 Receive Channel enable bit
  5492F  Uint16 XCERB3 : 1 ;
  5493F                    // 3 Receive Channel enable bit
  5494F  Uint16 XCERB4 : 1 ;
  5495F                    // 4 Receive Channel enable bit
  5496F  Uint16 XCERB5 : 1 ;
  5497F                    // 5 Receive Channel enable bit
  5498F  Uint16 XCERB6 : 1 ;
  5499F                    // 6 Receive Channel enable bit
  5500F  Uint16 XCERB7 : 1 ;
  5501F                    // 7 Receive Channel enable bit
  5502F  Uint16 XCERB8 : 1 ;
  5503F                    // 8 Receive Channel enable bit
  5504F  Uint16 XCERB9 : 1 ;
  5505F                    // 9 Receive Channel enable bit
  5506F  Uint16 XCERB10 : 1 ;
  5507F                     // 10 Receive Channel enable bit
  5508F  Uint16 XCERB11 : 1 ;
  5509F                     // 11 Receive Channel enable bit
  5510F  Uint16 XCERB12 : 1 ;
  5511F                     // 12 Receive Channel enable bit
  5512F  Uint16 XCERB13 : 1 ;
  5513F                     // 13 Receive Channel enable bit
  5514F  Uint16 XCERB14 : 1 ;
  5515F                     // 14 Receive Channel enable bit
  5516F  Uint16 XCERB15 : 1 ;
  5517F                     // 15 Receive Channel enable bit
  5518F} ;
  5519F
  5520Funion XCERB_REG
  5521F{
  5522F  Uint16 all ;
  5523F  struct XCERB_BITS bit ;
  5524F} ;
  5525F// PCR control register bit definitions:
  5526F
  5527Fstruct PCR_BITS
  5528F{                 // bit description
  5529F  Uint16 CLKRP : 1 ;
  5530F                   // 0 Receive Clock polarity
  5531F  Uint16 CLKXP : 1 ;
  5532F                   // 1 Transmit clock polarity
  5533F  Uint16 FSRP : 1 ;
  5534F                  // 2 Receive Frame synchronization polarity
  5535F  Uint16 FSXP : 1 ;
  5536F                  // 3 Transmit Frame synchronization polarity
  5537F  Uint16 DR_STAT : 1 ;
  5538F                     // 4 DR pin status - reserved for this McBSP
  5539F  Uint16 DX_STAT : 1 ;
  5540F                     // 5 DX pin status - reserved for this McBSP
  5541F  Uint16 CLKS_STAT : 1 ;
  5542F                       // 6 CLKS pin status - reserved for 28x -McBSP
  5543F  Uint16 SCLKME : 1 ;
  5544F                    // 7 Enhanced sample clock mode selection bit.
  5545F  Uint16 CLKRM : 1 ;
  5546F                   // 8 Receiver Clock Mode
  5547F  Uint16 CLKXM : 1 ;
  5548F                   // 9 Transmitter Clock Mode.
  5549F  Uint16 FSRM : 1 ;
  5550F                  // 10 Receive Frame Synchronization Mode
  5551F  Uint16 FSXM : 1 ;
  5552F                  // 11 Transmit Frame Synchronization Mode
  5553F  Uint16 RIOEN : 1 ;
  5554F                   // 12 General Purpose I/O Mode - reserved in this 28x-McBSP
  5555F  Uint16 XIOEN : 1 ;
  5556F                   // 13 General Purpose I/O Mode - reserved in this 28x-McBSP
  5557F  Uint16 IDEL_EN : 1 ;
  5558F                     // 14 reserved in this 28x-McBSP
  5559F  Uint16 rsvd : 1 ;// 15 reserved
  5560F} ;
  5561F
  5562Funion PCR_REG
  5563F{
  5564F  Uint16 all ;
  5565F  struct PCR_BITS bit ;
  5566F} ;
  5567F// RCERC control register bit definitions:
  5568F
  5569Fstruct RCERC_BITS
  5570F{                   // bit description
  5571F  Uint16 RCEC0 : 1 ;
  5572F                   // 0 Receive Channel enable bit
  5573F  Uint16 RCEC1 : 1 ;
  5574F                   // 1 Receive Channel enable bit
  5575F  Uint16 RCEC2 : 1 ;
  5576F                   // 2 Receive Channel enable bit
  5577F  Uint16 RCEC3 : 1 ;
  5578F                   // 3 Receive Channel enable bit
  5579F  Uint16 RCEC4 : 1 ;
  5580F                   // 4 Receive Channel enable bit
  5581F  Uint16 RCEC5 : 1 ;
  5582F                   // 5 Receive Channel enable bit
  5583F  Uint16 RCEC6 : 1 ;
  5584F                   // 6 Receive Channel enable bit
  5585F  Uint16 RCEC7 : 1 ;
  5586F                   // 7 Receive Channel enable bit
  5587F  Uint16 RCEC8 : 1 ;
  5588F                   // 8 Receive Channel enable bit
  5589F  Uint16 RCEC9 : 1 ;
  5590F                   // 9 Receive Channel enable bit
  5591F  Uint16 RCEC10 : 1 ;
  5592F                    // 10 Receive Channel enable bit
  5593F  Uint16 RCEC11 : 1 ;
  5594F                    // 11 Receive Channel enable bit
  5595F  Uint16 RCEC12 : 1 ;
  5596F                    // 12 Receive Channel enable bit
  5597F  Uint16 RCEC13 : 1 ;
  5598F                    // 13 Receive Channel enable bit
  5599F  Uint16 RCEC14 : 1 ;
  5600F                    // 14 Receive Channel enable bit
  5601F  Uint16 RCEC15 : 1 ;
  5602F                    // 15 Receive Channel enable bit
  5603F} ;
  5604F
  5605Funion RCERC_REG
  5606F{
  5607F  Uint16 all ;
  5608F  struct RCERC_BITS bit ;
  5609F} ;
  5610F// RCERD control register bit definitions:
  5611F
  5612Fstruct RCERD_BITS
  5613F{                   // bit description
  5614F  Uint16 RCED0 : 1 ;
  5615F                   // 0 Receive Channel enable bit
  5616F  Uint16 RCED1 : 1 ;
  5617F                   // 1 Receive Channel enable bit
  5618F  Uint16 RCED2 : 1 ;
  5619F                   // 2 Receive Channel enable bit
  5620F  Uint16 RCED3 : 1 ;
  5621F                   // 3 Receive Channel enable bit
  5622F  Uint16 RCED4 : 1 ;
  5623F                   // 4 Receive Channel enable bit
  5624F  Uint16 RCED5 : 1 ;
  5625F                   // 5 Receive Channel enable bit
  5626F  Uint16 RCED6 : 1 ;
  5627F                   // 6 Receive Channel enable bit
  5628F  Uint16 RCED7 : 1 ;
  5629F                   // 7 Receive Channel enable bit
  5630F  Uint16 RCED8 : 1 ;
  5631F                   // 8 Receive Channel enable bit
  5632F  Uint16 RCED9 : 1 ;
  5633F                   // 9 Receive Channel enable bit
  5634F  Uint16 RCED10 : 1 ;
  5635F                    // 10 Receive Channel enable bit
  5636F  Uint16 RCED11 : 1 ;
  5637F                    // 11 Receive Channel enable bit
  5638F  Uint16 RCED12 : 1 ;
  5639F                    // 12 Receive Channel enable bit
  5640F  Uint16 RCED13 : 1 ;
  5641F                    // 13 Receive Channel enable bit
  5642F  Uint16 RCED14 : 1 ;
  5643F                    // 14 Receive Channel enable bit
  5644F  Uint16 RCED15 : 1 ;
  5645F                    // 15 Receive Channel enable bit
  5646F} ;
  5647F
  5648Funion RCERD_REG
  5649F{
  5650F  Uint16 all ;
  5651F  struct RCERD_BITS bit ;
  5652F} ;
  5653F// XCERC control register bit definitions:
  5654F
  5655Fstruct XCERC_BITS
  5656F{                   // bit description
  5657F  Uint16 XCERC0 : 1 ;
  5658F                    // 0 Receive Channel enable bit
  5659F  Uint16 XCERC1 : 1 ;
  5660F                    // 1 Receive Channel enable bit
  5661F  Uint16 XCERC2 : 1 ;
  5662F                    // 2 Receive Channel enable bit
  5663F  Uint16 XCERC3 : 1 ;
  5664F                    // 3 Receive Channel enable bit
  5665F  Uint16 XCERC4 : 1 ;
  5666F                    // 4 Receive Channel enable bit
  5667F  Uint16 XCERC5 : 1 ;
  5668F                    // 5 Receive Channel enable bit
  5669F  Uint16 XCERC6 : 1 ;
  5670F                    // 6 Receive Channel enable bit
  5671F  Uint16 XCERC7 : 1 ;
  5672F                    // 7 Receive Channel enable bit
  5673F  Uint16 XCERC8 : 1 ;
  5674F                    // 8 Receive Channel enable bit
  5675F  Uint16 XCERC9 : 1 ;
  5676F                    // 9 Receive Channel enable bit
  5677F  Uint16 XCERC10 : 1 ;
  5678F                     // 10 Receive Channel enable bit
  5679F  Uint16 XCERC11 : 1 ;
  5680F                     // 11 Receive Channel enable bit
  5681F  Uint16 XCERC12 : 1 ;
  5682F                     // 12 Receive Channel enable bit
  5683F  Uint16 XCERC13 : 1 ;
  5684F                     // 13 Receive Channel enable bit
  5685F  Uint16 XCERC14 : 1 ;
  5686F                     // 14 Receive Channel enable bit
  5687F  Uint16 XCERC15 : 1 ;
  5688F                     // 15 Receive Channel enable bit
  5689F} ;
  5690F
  5691Funion XCERC_REG
  5692F{
  5693F  Uint16 all ;
  5694F  struct XCERC_BITS bit ;
  5695F} ;
  5696F// XCERD control register bit definitions:
  5697F
  5698Fstruct XCERD_BITS
  5699F{                   // bit description
  5700F  Uint16 XCERD0 : 1 ;
  5701F                    // 0 Receive Channel enable bit
  5702F  Uint16 XCERD1 : 1 ;
  5703F                    // 1 Receive Channel enable bit
  5704F  Uint16 XCERD2 : 1 ;
  5705F                    // 2 Receive Channel enable bit
  5706F  Uint16 XCERD3 : 1 ;
  5707F                    // 3 Receive Channel enable bit
  5708F  Uint16 XCERD4 : 1 ;
  5709F                    // 4 Receive Channel enable bit
  5710F  Uint16 XCERD5 : 1 ;
  5711F                    // 5 Receive Channel enable bit
  5712F  Uint16 XCERD6 : 1 ;
  5713F                    // 6 Receive Channel enable bit
  5714F  Uint16 XCERD7 : 1 ;
  5715F                    // 7 Receive Channel enable bit
  5716F  Uint16 XCERD8 : 1 ;
  5717F                    // 8 Receive Channel enable bit
  5718F  Uint16 XCERD9 : 1 ;
  5719F                    // 9 Receive Channel enable bit
  5720F  Uint16 XCERD10 : 1 ;
  5721F                     // 10 Receive Channel enable bit
  5722F  Uint16 XCERD11 : 1 ;
  5723F                     // 11 Receive Channel enable bit
  5724F  Uint16 XCERD12 : 1 ;
  5725F                     // 12 Receive Channel enable bit
  5726F  Uint16 XCERD13 : 1 ;
  5727F                     // 13 Receive Channel enable bit
  5728F  Uint16 XCERD14 : 1 ;
  5729F                     // 14 Receive Channel enable bit
  5730F  Uint16 XCERD15 : 1 ;
  5731F                     // 15 Receive Channel enable bit
  5732F} ;
  5733F
  5734Funion XCERD_REG
  5735F{
  5736F  Uint16 all ;
  5737F  struct XCERD_BITS bit ;
  5738F} ;
  5739F// RCERE control register bit definitions:
  5740F
  5741Fstruct RCERE_BITS
  5742F{                   // bit description
  5743F  Uint16 RCEE0 : 1 ;
  5744F                   // 0 Receive Channel enable bit
  5745F  Uint16 RCEE1 : 1 ;
  5746F                   // 1 Receive Channel enable bit
  5747F  Uint16 RCEE2 : 1 ;
  5748F                   // 2 Receive Channel enable bit
  5749F  Uint16 RCEE3 : 1 ;
  5750F                   // 3 Receive Channel enable bit
  5751F  Uint16 RCEE4 : 1 ;
  5752F                   // 4 Receive Channel enable bit
  5753F  Uint16 RCEE5 : 1 ;
  5754F                   // 5 Receive Channel enable bit
  5755F  Uint16 RCEE6 : 1 ;
  5756F                   // 6 Receive Channel enable bit
  5757F  Uint16 RCEE7 : 1 ;
  5758F                   // 7 Receive Channel enable bit
  5759F  Uint16 RCEE8 : 1 ;
  5760F                   // 8 Receive Channel enable bit
  5761F  Uint16 RCEE9 : 1 ;
  5762F                   // 9 Receive Channel enable bit
  5763F  Uint16 RCEE10 : 1 ;
  5764F                    // 10 Receive Channel enable bit
  5765F  Uint16 RCEE11 : 1 ;
  5766F                    // 11 Receive Channel enable bit
  5767F  Uint16 RCEE12 : 1 ;
  5768F                    // 12 Receive Channel enable bit
  5769F  Uint16 RCEE13 : 1 ;
  5770F                    // 13 Receive Channel enable bit
  5771F  Uint16 RCEE14 : 1 ;
  5772F                    // 14 Receive Channel enable bit
  5773F  Uint16 RCEE15 : 1 ;
  5774F                    // 15 Receive Channel enable bit
  5775F} ;
  5776F
  5777Funion RCERE_REG
  5778F{
  5779F  Uint16 all ;
  5780F  struct RCERE_BITS bit ;
  5781F} ;
  5782F// RCERF control register bit definitions:
  5783F
  5784Fstruct RCERF_BITS
  5785F{                   // bit description
  5786F  Uint16 RCEF0 : 1 ;
  5787F                   // 0 Receive Channel enable bit
  5788F  Uint16 RCEF1 : 1 ;
  5789F                   // 1 Receive Channel enable bit
  5790F  Uint16 RCEF2 : 1 ;
  5791F                   // 2 Receive Channel enable bit
  5792F  Uint16 RCEF3 : 1 ;
  5793F                   // 3 Receive Channel enable bit
  5794F  Uint16 RCEF4 : 1 ;
  5795F                   // 4 Receive Channel enable bit
  5796F  Uint16 RCEF5 : 1 ;
  5797F                   // 5 Receive Channel enable bit
  5798F  Uint16 RCEF6 : 1 ;
  5799F                   // 6 Receive Channel enable bit
  5800F  Uint16 RCEF7 : 1 ;
  5801F                   // 7 Receive Channel enable bit
  5802F  Uint16 RCEF8 : 1 ;
  5803F                   // 8 Receive Channel enable bit
  5804F  Uint16 RCEF9 : 1 ;
  5805F                   // 9 Receive Channel enable bit
  5806F  Uint16 RCEF10 : 1 ;
  5807F                    // 10 Receive Channel enable bit
  5808F  Uint16 RCEF11 : 1 ;
  5809F                    // 11 Receive Channel enable bit
  5810F  Uint16 RCEF12 : 1 ;
  5811F                    // 12 Receive Channel enable bit
  5812F  Uint16 RCEF13 : 1 ;
  5813F                    // 13 Receive Channel enable bit
  5814F  Uint16 RCEF14 : 1 ;
  5815F                    // 14 Receive Channel enable bit
  5816F  Uint16 RCEF15 : 1 ;
  5817F                    // 15 Receive Channel enable bit
  5818F} ;
  5819F
  5820Funion RCERF_REG
  5821F{
  5822F  Uint16 all ;
  5823F  struct RCERF_BITS bit ;
  5824F} ;
  5825F// XCERE control register bit definitions:
  5826F
  5827Fstruct XCERE_BITS
  5828F{                   // bit description
  5829F  Uint16 XCERE0 : 1 ;
  5830F                    // 0 Receive Channel enable bit
  5831F  Uint16 XCERE1 : 1 ;
  5832F                    // 1 Receive Channel enable bit
  5833F  Uint16 XCERE2 : 1 ;
  5834F                    // 2 Receive Channel enable bit
  5835F  Uint16 XCERE3 : 1 ;
  5836F                    // 3 Receive Channel enable bit
  5837F  Uint16 XCERE4 : 1 ;
  5838F                    // 4 Receive Channel enable bit
  5839F  Uint16 XCERE5 : 1 ;
  5840F                    // 5 Receive Channel enable bit
  5841F  Uint16 XCERE6 : 1 ;
  5842F                    // 6 Receive Channel enable bit
  5843F  Uint16 XCERE7 : 1 ;
  5844F                    // 7 Receive Channel enable bit
  5845F  Uint16 XCERE8 : 1 ;
  5846F                    // 8 Receive Channel enable bit
  5847F  Uint16 XCERE9 : 1 ;
  5848F                    // 9 Receive Channel enable bit
  5849F  Uint16 XCERE10 : 1 ;
  5850F                     // 10 Receive Channel enable bit
  5851F  Uint16 XCERE11 : 1 ;
  5852F                     // 11 Receive Channel enable bit
  5853F  Uint16 XCERE12 : 1 ;
  5854F                     // 12 Receive Channel enable bit
  5855F  Uint16 XCERE13 : 1 ;
  5856F                     // 13 Receive Channel enable bit
  5857F  Uint16 XCERE14 : 1 ;
  5858F                     // 14 Receive Channel enable bit
  5859F  Uint16 XCERE15 : 1 ;
  5860F                     // 15 Receive Channel enable bit
  5861F} ;
  5862F
  5863Funion XCERE_REG
  5864F{
  5865F  Uint16 all ;
  5866F  struct XCERE_BITS bit ;
  5867F} ;
  5868F// XCERF control register bit definitions:
  5869F
  5870Fstruct XCERF_BITS
  5871F{                   // bit description
  5872F  Uint16 XCERF0 : 1 ;
  5873F                    // 0 Receive Channel enable bit
  5874F  Uint16 XCERF1 : 1 ;
  5875F                    // 1 Receive Channel enable bit
  5876F  Uint16 XCERF2 : 1 ;
  5877F                    // 2 Receive Channel enable bit
  5878F  Uint16 XCERF3 : 1 ;
  5879F                    // 3 Receive Channel enable bit
  5880F  Uint16 XCERF4 : 1 ;
  5881F                    // 4 Receive Channel enable bit
  5882F  Uint16 XCERF5 : 1 ;
  5883F                    // 5 Receive Channel enable bit
  5884F  Uint16 XCERF6 : 1 ;
  5885F                    // 6 Receive Channel enable bit
  5886F  Uint16 XCERF7 : 1 ;
  5887F                    // 7 Receive Channel enable bit
  5888F  Uint16 XCERF8 : 1 ;
  5889F                    // 8 Receive Channel enable bit
  5890F  Uint16 XCERF9 : 1 ;
  5891F                    // 9 Receive Channel enable bit
  5892F  Uint16 XCERF10 : 1 ;
  5893F                     // 10 Receive Channel enable bit
  5894F  Uint16 XCERF11 : 1 ;
  5895F                     // 11 Receive Channel enable bit
  5896F  Uint16 XCERF12 : 1 ;
  5897F                     // 12 Receive Channel enable bit
  5898F  Uint16 XCERF13 : 1 ;
  5899F                     // 13 Receive Channel enable bit
  5900F  Uint16 XCERF14 : 1 ;
  5901F                     // 14 Receive Channel enable bit
  5902F  Uint16 XCERF15 : 1 ;
  5903F                     // 15 Receive Channel enable bit
  5904F} ;
  5905F
  5906Funion XCERF_REG
  5907F{
  5908F  Uint16 all ;
  5909F  struct XCERF_BITS bit ;
  5910F} ;
  5911F// RCERG control register bit definitions:
  5912F
  5913Fstruct RCERG_BITS
  5914F{                   // bit description
  5915F  Uint16 RCEG0 : 1 ;
  5916F                   // 0 Receive Channel enable bit
  5917F  Uint16 RCEG1 : 1 ;
  5918F                   // 1 Receive Channel enable bit
  5919F  Uint16 RCEG2 : 1 ;
  5920F                   // 2 Receive Channel enable bit
  5921F  Uint16 RCEG3 : 1 ;
  5922F                   // 3 Receive Channel enable bit
  5923F  Uint16 RCEG4 : 1 ;
  5924F                   // 4 Receive Channel enable bit
  5925F  Uint16 RCEG5 : 1 ;
  5926F                   // 5 Receive Channel enable bit
  5927F  Uint16 RCEG6 : 1 ;
  5928F                   // 6 Receive Channel enable bit
  5929F  Uint16 RCEG7 : 1 ;
  5930F                   // 7 Receive Channel enable bit
  5931F  Uint16 RCEG8 : 1 ;
  5932F                   // 8 Receive Channel enable bit
  5933F  Uint16 RCEG9 : 1 ;
  5934F                   // 9 Receive Channel enable bit
  5935F  Uint16 RCEG10 : 1 ;
  5936F                    // 10 Receive Channel enable bit
  5937F  Uint16 RCEG11 : 1 ;
  5938F                    // 11 Receive Channel enable bit
  5939F  Uint16 RCEG12 : 1 ;
  5940F                    // 12 Receive Channel enable bit
  5941F  Uint16 RCEG13 : 1 ;
  5942F                    // 13 Receive Channel enable bit
  5943F  Uint16 RCEG14 : 1 ;
  5944F                    // 14 Receive Channel enable bit
  5945F  Uint16 RCEG15 : 1 ;
  5946F                    // 15 Receive Channel enable bit
  5947F} ;
  5948F
  5949Funion RCERG_REG
  5950F{
  5951F  Uint16 all ;
  5952F  struct RCERG_BITS bit ;
  5953F} ;
  5954F// RCERH control register bit definitions:
  5955F
  5956Fstruct RCERH_BITS
  5957F{                   // bit description
  5958F  Uint16 RCEH0 : 1 ;
  5959F                   // 0 Receive Channel enable bit
  5960F  Uint16 RCEH1 : 1 ;
  5961F                   // 1 Receive Channel enable bit
  5962F  Uint16 RCEH2 : 1 ;
  5963F                   // 2 Receive Channel enable bit
  5964F  Uint16 RCEH3 : 1 ;
  5965F                   // 3 Receive Channel enable bit
  5966F  Uint16 RCEH4 : 1 ;
  5967F                   // 4 Receive Channel enable bit
  5968F  Uint16 RCEH5 : 1 ;
  5969F                   // 5 Receive Channel enable bit
  5970F  Uint16 RCEH6 : 1 ;
  5971F                   // 6 Receive Channel enable bit
  5972F  Uint16 RCEH7 : 1 ;
  5973F                   // 7 Receive Channel enable bit
  5974F  Uint16 RCEH8 : 1 ;
  5975F                   // 8 Receive Channel enable bit
  5976F  Uint16 RCEH9 : 1 ;
  5977F                   // 9 Receive Channel enable bit
  5978F  Uint16 RCEH10 : 1 ;
  5979F                    // 10 Receive Channel enable bit
  5980F  Uint16 RCEH11 : 1 ;
  5981F                    // 11 Receive Channel enable bit
  5982F  Uint16 RCEH12 : 1 ;
  5983F                    // 12 Receive Channel enable bit
  5984F  Uint16 RCEH13 : 1 ;
  5985F                    // 13 Receive Channel enable bit
  5986F  Uint16 RCEH14 : 1 ;
  5987F                    // 14 Receive Channel enable bit
  5988F  Uint16 RCEH15 : 1 ;
  5989F                    // 15 Receive Channel enable bit
  5990F} ;
  5991F
  5992Funion RCERH_REG
  5993F{
  5994F  Uint16 all ;
  5995F  struct RCERH_BITS bit ;
  5996F} ;
  5997F// XCERG control register bit definitions:
  5998F
  5999Fstruct XCERG_BITS
  6000F{                   // bit description
  6001F  Uint16 XCERG0 : 1 ;
  6002F                    // 0 Receive Channel enable bit
  6003F  Uint16 XCERG1 : 1 ;
  6004F                    // 1 Receive Channel enable bit
  6005F  Uint16 XCERG2 : 1 ;
  6006F                    // 2 Receive Channel enable bit
  6007F  Uint16 XCERG3 : 1 ;
  6008F                    // 3 Receive Channel enable bit
  6009F  Uint16 XCERG4 : 1 ;
  6010F                    // 4 Receive Channel enable bit
  6011F  Uint16 XCERG5 : 1 ;
  6012F                    // 5 Receive Channel enable bit
  6013F  Uint16 XCERG6 : 1 ;
  6014F                    // 6 Receive Channel enable bit
  6015F  Uint16 XCERG7 : 1 ;
  6016F                    // 7 Receive Channel enable bit
  6017F  Uint16 XCERG8 : 1 ;
  6018F                    // 8 Receive Channel enable bit
  6019F  Uint16 XCERG9 : 1 ;
  6020F                    // 9 Receive Channel enable bit
  6021F  Uint16 XCERG10 : 1 ;
  6022F                     // 10 Receive Channel enable bit
  6023F  Uint16 XCERG11 : 1 ;
  6024F                     // 11 Receive Channel enable bit
  6025F  Uint16 XCERG12 : 1 ;
  6026F                     // 12 Receive Channel enable bit
  6027F  Uint16 XCERG13 : 1 ;
  6028F                     // 13 Receive Channel enable bit
  6029F  Uint16 XCERG14 : 1 ;
  6030F                     // 14 Receive Channel enable bit
  6031F  Uint16 XCERG15 : 1 ;
  6032F                     // 15 Receive Channel enable bit
  6033F} ;
  6034F
  6035Funion XCERG_REG
  6036F{
  6037F  Uint16 all ;
  6038F  struct XCERG_BITS bit ;
  6039F} ;
  6040F// XCERH control register bit definitions:
  6041F
  6042Fstruct XCERH_BITS
  6043F{                   // bit description
  6044F  Uint16 XCEH0 : 1 ;
  6045F                   // 0 Receive Channel enable bit
  6046F  Uint16 XCEH1 : 1 ;
  6047F                   // 1 Receive Channel enable bit
  6048F  Uint16 XCEH2 : 1 ;
  6049F                   // 2 Receive Channel enable bit
  6050F  Uint16 XCEH3 : 1 ;
  6051F                   // 3 Receive Channel enable bit
  6052F  Uint16 XCEH4 : 1 ;
  6053F                   // 4 Receive Channel enable bit
  6054F  Uint16 XCEH5 : 1 ;
  6055F                   // 5 Receive Channel enable bit
  6056F  Uint16 XCEH6 : 1 ;
  6057F                   // 6 Receive Channel enable bit
  6058F  Uint16 XCEH7 : 1 ;
  6059F                   // 7 Receive Channel enable bit
  6060F  Uint16 XCEH8 : 1 ;
  6061F                   // 8 Receive Channel enable bit
  6062F  Uint16 XCEH9 : 1 ;
  6063F                   // 9 Receive Channel enable bit
  6064F  Uint16 XCEH10 : 1 ;
  6065F                    // 10 Receive Channel enable bit
  6066F  Uint16 XCEH11 : 1 ;
  6067F                    // 11 Receive Channel enable bit
  6068F  Uint16 XCEH12 : 1 ;
  6069F                    // 12 Receive Channel enable bit
  6070F  Uint16 XCEH13 : 1 ;
  6071F                    // 13 Receive Channel enable bit
  6072F  Uint16 XCEH14 : 1 ;
  6073F                    // 14 Receive Channel enable bit
  6074F  Uint16 XCEH15 : 1 ;
  6075F                    // 15 Receive Channel enable bit
  6076F} ;
  6077F
  6078Funion XCERH_REG
  6079F{
  6080F  Uint16 all ;
  6081F  struct XCERH_BITS bit ;
  6082F} ;
  6083F// McBSP Interrupt enable register for RINT/XINT
  6084F
  6085Fstruct MFFINT_BITS
  6086F{                    // bits description
  6087F  Uint16 XINT : 1 ;// 0 XINT interrupt enable
  6088F  Uint16 rsvd1 : 1 ;// 1 reserved
  6089F  Uint16 RINT : 1 ;// 2 RINT interrupt enable
  6090F  Uint16 rsvd2 : 13 ;// 15:3 reserved
  6091F} ;
  6092F
  6093Funion MFFINT_REG
  6094F{
  6095F  Uint16 all ;
  6096F  struct MFFINT_BITS bit ;
  6097F} ;
  6098F//---------------------------------------------------------------------------
  6099F// McBSP Register File:
  6100F//
  6101F
  6102Fstruct MCBSP_REGS
  6103F{
  6104F  union DRR2_REG DRR2 ; // MCBSP Data receive register bits 31-16
  6105F  union DRR1_REG DRR1 ; // MCBSP Data receive register bits 15-0
  6106F  union DXR2_REG DXR2 ; // MCBSP Data transmit register bits 31-16
  6107F  union DXR1_REG DXR1 ; // MCBSP Data transmit register bits 15-0
  6108F  union SPCR2_REG SPCR2 ; // MCBSP control register bits 31-16
  6109F  union SPCR1_REG SPCR1 ; // MCBSP control register bits 15-0
  6110F  union RCR2_REG RCR2 ; // MCBSP receive control register bits 31-16
  6111F  union RCR1_REG RCR1 ; // MCBSP receive control register bits 15-0
  6112F  union XCR2_REG XCR2 ; // MCBSP transmit control register bits 31-16
  6113F  union XCR1_REG XCR1 ; // MCBSP transmit control register bits 15-0
  6114F  union SRGR2_REG SRGR2 ; // MCBSP sample rate gen register bits 31-16
  6115F  union SRGR1_REG SRGR1 ; // MCBSP sample rate gen register bits 15-0
  6116F  union MCR2_REG MCR2 ; // MCBSP multichannel register bits 31-16
  6117F  union MCR1_REG MCR1 ; // MCBSP multichannel register bits 15-0
  6118F  union RCERA_REG RCERA ; // MCBSP Receive channel enable partition A
  6119F  union RCERB_REG RCERB ; // MCBSP Receive channel enable partition B
  6120F  union XCERA_REG XCERA ; // MCBSP Transmit channel enable partition A
  6121F  union XCERB_REG XCERB ; // MCBSP Transmit channel enable partition B
  6122F  union PCR_REG PCR ; // MCBSP Pin control register bits 15-0
  6123F  union RCERC_REG RCERC ; // MCBSP Receive channel enable partition C
  6124F  union RCERD_REG RCERD ; // MCBSP Receive channel enable partition D
  6125F  union XCERC_REG XCERC ; // MCBSP Transmit channel enable partition C
  6126F  union XCERD_REG XCERD ; // MCBSP Transmit channel enable partition D
  6127F  union RCERE_REG RCERE ; // MCBSP Receive channel enable partition E
  6128F  union RCERF_REG RCERF ; // MCBSP Receive channel enable partition F
  6129F  union XCERE_REG XCERE ; // MCBSP Transmit channel enable partition E
  6130F  union XCERF_REG XCERF ; // MCBSP Transmit channel enable partition F
  6131F  union RCERG_REG RCERG ; // MCBSP Receive channel enable partition G
  6132F  union RCERH_REG RCERH ; // MCBSP Receive channel enable partition H
  6133F  union XCERG_REG XCERG ; // MCBSP Transmit channel enable partition G
  6134F  union XCERH_REG XCERH ; // MCBSP Transmit channel enable partition H
  6135F  Uint16 rsvd1 [ 4 ] ;
  6136F                    // reserved
  6137F  union MFFINT_REG MFFINT ; // MCBSP Interrupt enable register for RINT/XINT
  6138F  Uint16 rsvd2 ; // reserved
  6139F} ;
  6140F//---------------------------------------------------------------------------
  6141F// McBSP External References & Function Declarations:
  6142F//
  6143F
  6144Fextern volatile struct MCBSP_REGS
  6145F  McbspaRegs ;
  6146F
  6147Fextern volatile struct MCBSP_REGS
  6148F  McbspbRegs ;
  6149F       /* extern "C" */
  6150F       // end of DSP2833x_MCBSP_H definition
  6151F//===========================================================================
  6152F// No more.
  6153F//===========================================================================
  6154F 
  6155F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_McBSP.h*/
  6156F/*   CLOSE_FILE Include File */
  6157F 
  6158F              // McBSP
  6159F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieCtrl.h */
  6160F// TI File $Revision: /main/1 $
  6161F// Checkin $Date: August 18, 2006 13:52:24 $
  6162F//###########################################################################
  6163F//
  6164F// FILE: DSP2833x_PieCtrl.h
  6165F//
  6166F// TITLE: DSP2833x Device PIE Control Register Definitions.
  6167F//
  6168F//###########################################################################
  6169F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6170F// $Release Date: August 4, 2009 $
  6171F//###########################################################################
  6172F#ifndef DSP2833x_PIE_CTRL_H
  6173F#define DSP2833x_PIE_CTRL_H
  6174F//---------------------------------------------------------------------------
  6175F// PIE Control Register Bit Definitions:
  6176F//
  6177F// PIECTRL: Register bit definitions:
  6178F
  6179Ftypedef
  6180Fstruct PIECTRL_BITS
  6181F{                            // bits description
  6182F  Uint16 ENPIE : 1 ;
  6183F                   // 0 Enable PIE block
  6184F  Uint16 PIEVECT : 15 ;
  6185F                      // 15:1 Fetched vector address
  6186F} PIECTRL_BITS ;
  6187F
  6188Ftypedef
  6189Funion PIECTRL_REG
  6190F{
  6191F  Uint16 all ;
  6192F  struct PIECTRL_BITS bit ;
  6193F} PIECTRL_REG ;
  6194F// PIEIER: Register bit definitions:
  6195F
  6196Ftypedef
  6197Fstruct PIEIER_BITS
  6198F{                            // bits description
  6199F  Uint16 INTx1 : 1 ;
  6200F                   // 0 INTx.1
  6201F  Uint16 INTx2 : 1 ;
  6202F                   // 1 INTx.2
  6203F  Uint16 INTx3 : 1 ;
  6204F                   // 2 INTx.3
  6205F  Uint16 INTx4 : 1 ;
  6206F                   // 3 INTx.4
  6207F  Uint16 INTx5 : 1 ;
  6208F                   // 4 INTx.5
  6209F  Uint16 INTx6 : 1 ;
  6210F                   // 5 INTx.6
  6211F  Uint16 INTx7 : 1 ;
  6212F                   // 6 INTx.7
  6213F  Uint16 INTx8 : 1 ;
  6214F                   // 7 INTx.8
  6215F  Uint16 rsvd : 8 ;
  6216F                  // 15:8 reserved
  6217F} PIEIER_BITS ;
  6218F
  6219Ftypedef
  6220Funion PIEIER_REG
  6221F{
  6222F  Uint16 all ;
  6223F  struct PIEIER_BITS bit ;
  6224F} PIEIER_REG ;
  6225F// PIEIFR: Register bit definitions:
  6226F
  6227Ftypedef
  6228Fstruct PIEIFR_BITS
  6229F{                            // bits description
  6230F  Uint16 INTx1 : 1 ;
  6231F                   // 0 INTx.1
  6232F  Uint16 INTx2 : 1 ;
  6233F                   // 1 INTx.2
  6234F  Uint16 INTx3 : 1 ;
  6235F                   // 2 INTx.3
  6236F  Uint16 INTx4 : 1 ;
  6237F                   // 3 INTx.4
  6238F  Uint16 INTx5 : 1 ;
  6239F                   // 4 INTx.5
  6240F  Uint16 INTx6 : 1 ;
  6241F                   // 5 INTx.6
  6242F  Uint16 INTx7 : 1 ;
  6243F                   // 6 INTx.7
  6244F  Uint16 INTx8 : 1 ;
  6245F                   // 7 INTx.8
  6246F  Uint16 rsvd : 8 ;
  6247F                  // 15:8 reserved
  6248F} PIEIFR_BITS ;
  6249F
  6250Ftypedef
  6251Funion PIEIFR_REG
  6252F{
  6253F  Uint16 all ;
  6254F  struct PIEIFR_BITS bit ;
  6255F} PIEIFR_REG ;
  6256F// PIEACK: Register bit definitions:
  6257F
  6258Ftypedef
  6259Fstruct PIEACK_BITS
  6260F{                            // bits description
  6261F  Uint16 ACK1 : 1 ;
  6262F                  // 0 Acknowledge PIE interrupt group 1
  6263F  Uint16 ACK2 : 1 ;
  6264F                  // 1 Acknowledge PIE interrupt group 2
  6265F  Uint16 ACK3 : 1 ;
  6266F                  // 2 Acknowledge PIE interrupt group 3
  6267F  Uint16 ACK4 : 1 ;
  6268F                  // 3 Acknowledge PIE interrupt group 4
  6269F  Uint16 ACK5 : 1 ;
  6270F                  // 4 Acknowledge PIE interrupt group 5
  6271F  Uint16 ACK6 : 1 ;
  6272F                  // 5 Acknowledge PIE interrupt group 6
  6273F  Uint16 ACK7 : 1 ;
  6274F                  // 6 Acknowledge PIE interrupt group 7
  6275F  Uint16 ACK8 : 1 ;
  6276F                  // 7 Acknowledge PIE interrupt group 8
  6277F  Uint16 ACK9 : 1 ;
  6278F                  // 8 Acknowledge PIE interrupt group 9
  6279F  Uint16 ACK10 : 1 ;
  6280F                   // 9 Acknowledge PIE interrupt group 10
  6281F  Uint16 ACK11 : 1 ;
  6282F                   // 10 Acknowledge PIE interrupt group 11
  6283F  Uint16 ACK12 : 1 ;
  6284F                   // 11 Acknowledge PIE interrupt group 12
  6285F  Uint16 rsvd : 4 ;
  6286F                  // 15:12 reserved
  6287F} PIEACK_BITS ;
  6288F
  6289Ftypedef
  6290Funion PIEACK_REG
  6291F{
  6292F  Uint16 all ;
  6293F  struct PIEACK_BITS bit ;
  6294F} PIEACK_REG ;
  6295F//---------------------------------------------------------------------------
  6296F// PIE Control Register File:
  6297F//
  6298F
  6299Ftypedef
  6300Fstruct PIE_CTRL_REGS
  6301F{
  6302F  union PIECTRL_REG PIECTRL ; // PIE control register
  6303F  union PIEACK_REG PIEACK ; // PIE acknowledge
  6304F  union PIEIER_REG PIEIER1 ; // PIE int1 IER register
  6305F  union PIEIFR_REG PIEIFR1 ; // PIE int1 IFR register
  6306F  union PIEIER_REG PIEIER2 ; // PIE INT2 IER register
  6307F  union PIEIFR_REG PIEIFR2 ; // PIE INT2 IFR register
  6308F  union PIEIER_REG PIEIER3 ; // PIE INT3 IER register
  6309F  union PIEIFR_REG PIEIFR3 ; // PIE INT3 IFR register
  6310F  union PIEIER_REG PIEIER4 ; // PIE INT4 IER register
  6311F  union PIEIFR_REG PIEIFR4 ; // PIE INT4 IFR register
  6312F  union PIEIER_REG PIEIER5 ; // PIE INT5 IER register
  6313F  union PIEIFR_REG PIEIFR5 ; // PIE INT5 IFR register
  6314F  union PIEIER_REG PIEIER6 ; // PIE INT6 IER register
  6315F  union PIEIFR_REG PIEIFR6 ; // PIE INT6 IFR register
  6316F  union PIEIER_REG PIEIER7 ; // PIE INT7 IER register
  6317F  union PIEIFR_REG PIEIFR7 ; // PIE INT7 IFR register
  6318F  union PIEIER_REG PIEIER8 ; // PIE INT8 IER register
  6319F  union PIEIFR_REG PIEIFR8 ; // PIE INT8 IFR register
  6320F  union PIEIER_REG PIEIER9 ; // PIE INT9 IER register
  6321F  union PIEIFR_REG PIEIFR9 ; // PIE INT9 IFR register
  6322F  union PIEIER_REG PIEIER10 ; // PIE int10 IER register
  6323F  union PIEIFR_REG PIEIFR10 ; // PIE int10 IFR register
  6324F  union PIEIER_REG PIEIER11 ; // PIE int11 IER register
  6325F  union PIEIFR_REG PIEIFR11 ; // PIE int11 IFR register
  6326F  union PIEIER_REG PIEIER12 ; // PIE int12 IER register
  6327F  union PIEIFR_REG PIEIFR12 ; // PIE int12 IFR register
  6328F} PIE_CTRL_REGS ;
  6329F#define PIEACK_GROUP1 0x0001
  6330F#define PIEACK_GROUP2 0x0002
  6331F#define PIEACK_GROUP3 0x0004
  6332F#define PIEACK_GROUP4 0x0008
  6333F#define PIEACK_GROUP5 0x0010
  6334F#define PIEACK_GROUP6 0x0020
  6335F#define PIEACK_GROUP7 0x0040
  6336F#define PIEACK_GROUP8 0x0080
  6337F#define PIEACK_GROUP9 0x0100
  6338F#define PIEACK_GROUP10 0x0200
  6339F#define PIEACK_GROUP11 0x0400
  6340F#define PIEACK_GROUP12 0x0800
  6341F//---------------------------------------------------------------------------
  6342F// PIE Control Registers External References & Function Declarations:
  6343F//
  6344F
  6345Fextern volatile struct PIE_CTRL_REGS
  6346F  PieCtrlRegs ;
  6347F       // end of DSP2833x_PIE_CTRL_H definition
  6348F//===========================================================================
  6349F// End of file.
  6350F//===========================================================================
  6351F 
  6352F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieCtrl.h*/
  6353F/*   CLOSE_FILE Include File */
  6354F 
  6355F            // PIE Control Registers
  6356F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieVect.h */
  6357F// TI File $Revision: /main/2 $
  6358F// Checkin $Date: March 16, 2007 09:00:21 $
  6359F//###########################################################################
  6360F//
  6361F// FILE: DSP2833x_PieVect.h
  6362F//
  6363F// TITLE: DSP2833x Devices PIE Vector Table Definitions.
  6364F//
  6365F//###########################################################################
  6366F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6367F// $Release Date: August 4, 2009 $
  6368F//###########################################################################
  6369F#ifndef DSP2833x_PIE_VECT_H
  6370F#define DSP2833x_PIE_VECT_H
  6371F//---------------------------------------------------------------------------
  6372F// PIE Interrupt Vector Table Definition:
  6373F//
  6374F// Create a user type called PINT (pointer to interrupt):
  6375F
  6376Ftypedef
  6377Fconst
  6378Finterrupt void ( * PINT ) ( void ) ;
  6379F// Define Vector Table:
  6380F
  6381Ftypedef
  6382Fstruct PIE_VECT_TABLE
  6383F{
  6384F// Reset is never fetched from this table.
  6385F// It will always be fetched from 0x3FFFC0 in
  6386F// boot ROM
  6387F  PINT PIE1_RESERVED ;
  6388F  PINT PIE2_RESERVED ;
  6389F  PINT PIE3_RESERVED ;
  6390F  PINT PIE4_RESERVED ;
  6391F  PINT PIE5_RESERVED ;
  6392F  PINT PIE6_RESERVED ;
  6393F  PINT PIE7_RESERVED ;
  6394F  PINT PIE8_RESERVED ;
  6395F  PINT PIE9_RESERVED ;
  6396F  PINT PIE10_RESERVED ;
  6397F  PINT PIE11_RESERVED ;
  6398F  PINT PIE12_RESERVED ;
  6399F  PINT PIE13_RESERVED ;
  6400F// Non-Peripheral Interrupts:
  6401F  PINT XINT13 ;    // XINT13 / CPU-Timer1
  6402F  PINT TINT2 ;    // CPU-Timer2
  6403F  PINT DATALOG ;    // Datalogging interrupt
  6404F  PINT RTOSINT ;    // RTOS interrupt
  6405F  PINT EMUINT ;    // Emulation interrupt
  6406F  PINT XNMI ;    // Non-maskable interrupt
  6407F  PINT ILLEGAL ;    // Illegal operation TRAP
  6408F  PINT USER1 ;    // User Defined trap 1
  6409F  PINT USER2 ;    // User Defined trap 2
  6410F  PINT USER3 ;    // User Defined trap 3
  6411F  PINT USER4 ;    // User Defined trap 4
  6412F  PINT USER5 ;    // User Defined trap 5
  6413F  PINT USER6 ;    // User Defined trap 6
  6414F  PINT USER7 ;    // User Defined trap 7
  6415F  PINT USER8 ;    // User Defined trap 8
  6416F  PINT USER9 ;    // User Defined trap 9
  6417F  PINT USER10 ;    // User Defined trap 10
  6418F  PINT USER11 ;    // User Defined trap 11
  6419F  PINT USER12 ;    // User Defined trap 12
  6420F// Group 1 PIE Peripheral Vectors:
  6421F  PINT SEQ1INT ;
  6422F  PINT SEQ2INT ;
  6423F  PINT rsvd1_3 ;
  6424F  PINT XINT1 ;
  6425F  PINT XINT2 ;
  6426F  PINT ADCINT ;    // ADC
  6427F  PINT TINT0 ;    // Timer 0
  6428F  PINT WAKEINT ;    // WD
  6429F// Group 2 PIE Peripheral Vectors:
  6430F  PINT EPWM1_TZINT ;    // EPWM-1
  6431F  PINT EPWM2_TZINT ;    // EPWM-2
  6432F  PINT EPWM3_TZINT ;    // EPWM-3
  6433F  PINT EPWM4_TZINT ;    // EPWM-4
  6434F  PINT EPWM5_TZINT ;    // EPWM-5
  6435F  PINT EPWM6_TZINT ;    // EPWM-6
  6436F  PINT rsvd2_7 ;
  6437F  PINT rsvd2_8 ;
  6438F// Group 3 PIE Peripheral Vectors:
  6439F  PINT EPWM1_INT ;    // EPWM-1
  6440F  PINT EPWM2_INT ;    // EPWM-2
  6441F  PINT EPWM3_INT ;    // EPWM-3
  6442F  PINT EPWM4_INT ;    // EPWM-4
  6443F  PINT EPWM5_INT ;    // EPWM-5
  6444F  PINT EPWM6_INT ;    // EPWM-6
  6445F  PINT rsvd3_7 ;
  6446F  PINT rsvd3_8 ;
  6447F// Group 4 PIE Peripheral Vectors:
  6448F  PINT ECAP1_INT ;    // ECAP-1
  6449F  PINT ECAP2_INT ;    // ECAP-2
  6450F  PINT ECAP3_INT ;    // ECAP-3
  6451F  PINT ECAP4_INT ;    // ECAP-4
  6452F  PINT ECAP5_INT ;    // ECAP-5
  6453F  PINT ECAP6_INT ;    // ECAP-6
  6454F  PINT rsvd4_7 ;
  6455F  PINT rsvd4_8 ;
  6456F// Group 5 PIE Peripheral Vectors:
  6457F  PINT EQEP1_INT ;    // EQEP-1
  6458F  PINT EQEP2_INT ;    // EQEP-2
  6459F  PINT rsvd5_3 ;
  6460F  PINT rsvd5_4 ;
  6461F  PINT rsvd5_5 ;
  6462F  PINT rsvd5_6 ;
  6463F  PINT rsvd5_7 ;
  6464F  PINT rsvd5_8 ;
  6465F// Group 6 PIE Peripheral Vectors:
  6466F  PINT SPIRXINTA ;    // SPI-A
  6467F  PINT SPITXINTA ;    // SPI-A
  6468F  PINT MRINTB ;    // McBSP-B
  6469F  PINT MXINTB ;    // McBSP-B
  6470F  PINT MRINTA ;        // McBSP-A
  6471F  PINT MXINTA ;    // McBSP-A
  6472F  PINT rsvd6_7 ;
  6473F  PINT rsvd6_8 ;
  6474F// Group 7 PIE Peripheral Vectors:
  6475F  PINT DINTCH1 ;    // DMA
  6476F  PINT DINTCH2 ;    // DMA
  6477F  PINT DINTCH3 ;    // DMA
  6478F  PINT DINTCH4 ;    // DMA
  6479F  PINT DINTCH5 ;    // DMA
  6480F  PINT DINTCH6 ;    // DMA
  6481F  PINT rsvd7_7 ;
  6482F  PINT rsvd7_8 ;
  6483F// Group 8 PIE Peripheral Vectors:
  6484F  PINT I2CINT1A ;    // I2C-A
  6485F  PINT I2CINT2A ;    // I2C-A
  6486F  PINT rsvd8_3 ;
  6487F  PINT rsvd8_4 ;
  6488F  PINT SCIRXINTC ;    // SCI-C
  6489F  PINT SCITXINTC ;    // SCI-C
  6490F  PINT rsvd8_7 ;
  6491F  PINT rsvd8_8 ;
  6492F// Group 9 PIE Peripheral Vectors:
  6493F  PINT SCIRXINTA ;    // SCI-A
  6494F  PINT SCITXINTA ;    // SCI-A
  6495F  PINT SCIRXINTB ;    // SCI-B
  6496F  PINT SCITXINTB ;    // SCI-B
  6497F  PINT ECAN0INTA ;    // eCAN-A
  6498F  PINT ECAN1INTA ;    // eCAN-A
  6499F  PINT ECAN0INTB ;    // eCAN-B
  6500F  PINT ECAN1INTB ;    // eCAN-B
  6501F// Group 10 PIE Peripheral Vectors:
  6502F  PINT rsvd10_1 ;
  6503F  PINT rsvd10_2 ;
  6504F  PINT rsvd10_3 ;
  6505F  PINT rsvd10_4 ;
  6506F  PINT rsvd10_5 ;
  6507F  PINT rsvd10_6 ;
  6508F  PINT rsvd10_7 ;
  6509F  PINT rsvd10_8 ;
  6510F// Group 11 PIE Peripheral Vectors:
  6511F  PINT rsvd11_1 ;
  6512F  PINT rsvd11_2 ;
  6513F  PINT rsvd11_3 ;
  6514F  PINT rsvd11_4 ;
  6515F  PINT rsvd11_5 ;
  6516F  PINT rsvd11_6 ;
  6517F  PINT rsvd11_7 ;
  6518F  PINT rsvd11_8 ;
  6519F// Group 12 PIE Peripheral Vectors:
  6520F  PINT XINT3 ;    // External interrupt
  6521F  PINT XINT4 ;
  6522F  PINT XINT5 ;
  6523F  PINT XINT6 ;
  6524F  PINT XINT7 ;
  6525F  PINT rsvd12_6 ;
  6526F  PINT LVF ;    // Latched overflow
  6527F  PINT LUF ;    // Latched underflow
  6528F} PIE_VECT_TABLE ;
  6529F//---------------------------------------------------------------------------
  6530F// PIE Interrupt Vector Table External References & Function Declarations:
  6531F//
  6532F
  6533Fextern struct PIE_VECT_TABLE
  6534F  PieVectTable ;
  6535F       // end of DSP2833x_PIE_VECT_H definition
  6536F//===========================================================================
  6537F// End of file.
  6538F//===========================================================================
  6539F 
  6540F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_PieVect.h*/
  6541F/*   CLOSE_FILE Include File */
  6542F 
  6543F            // PIE Vector Table
  6544F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Spi.h */
  6545F// TI File $Revision: /main/3 $
  6546F// Checkin $Date: April 17, 2008 11:08:27 $
  6547F//###########################################################################
  6548F//
  6549F// FILE: DSP2833x_Spi.h
  6550F//
  6551F// TITLE: DSP2833x Device SPI Register Definitions.
  6552F//
  6553F//###########################################################################
  6554F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6555F// $Release Date: August 4, 2009 $
  6556F//###########################################################################
  6557F#ifndef DSP2833x_SPI_H
  6558F#define DSP2833x_SPI_H
  6559F//---------------------------------------------------------------------------
  6560F// SPI Individual Register Bit Definitions:
  6561F//
  6562F// SPI FIFO Transmit register bit definitions:
  6563F
  6564Fstruct SPIFFTX_BITS
  6565F{                     // bit description
  6566F  Uint16 TXFFIL : 5 ;
  6567F                    // 4:0 Interrupt level
  6568F  Uint16 TXFFIENA : 1 ;
  6569F                      // 5 Interrupt enable
  6570F  Uint16 TXFFINTCLR : 1 ;
  6571F                        // 6 Clear INT flag
  6572F  Uint16 TXFFINT : 1 ;
  6573F                     // 7 INT flag
  6574F  Uint16 TXFFST : 5 ;
  6575F                    // 12:8 FIFO status
  6576F  Uint16 TXFIFO : 1 ;
  6577F                    // 13 FIFO reset
  6578F  Uint16 SPIFFENA : 1 ;
  6579F                      // 14 Enhancement enable
  6580F  Uint16 SPIRST : 1 ;
  6581F                    // 15 Reset SPI
  6582F} ;
  6583F
  6584Funion SPIFFTX_REG
  6585F{
  6586F  Uint16 all ;
  6587F  struct SPIFFTX_BITS bit ;
  6588F} ;
  6589F//--------------------------------------------
  6590F// SPI FIFO recieve register bit definitions:
  6591F//
  6592F//
  6593F
  6594Fstruct SPIFFRX_BITS
  6595F{                     // bits description
  6596F  Uint16 RXFFIL : 5 ;
  6597F                    // 4:0 Interrupt level
  6598F  Uint16 RXFFIENA : 1 ;
  6599F                      // 5 Interrupt enable
  6600F  Uint16 RXFFINTCLR : 1 ;
  6601F                        // 6 Clear INT flag
  6602F  Uint16 RXFFINT : 1 ;
  6603F                     // 7 INT flag
  6604F  Uint16 RXFFST : 5 ;
  6605F                    // 12:8 FIFO status
  6606F  Uint16 RXFIFORESET : 1 ;
  6607F                         // 13 FIFO reset
  6608F  Uint16 RXFFOVFCLR : 1 ;
  6609F                        // 14 Clear overflow
  6610F  Uint16 RXFFOVF : 1 ;
  6611F                     // 15 FIFO overflow
  6612F} ;
  6613F
  6614Funion SPIFFRX_REG
  6615F{
  6616F  Uint16 all ;
  6617F  struct SPIFFRX_BITS bit ;
  6618F} ;
  6619F//--------------------------------------------
  6620F// SPI FIFO control register bit definitions:
  6621F//
  6622F//
  6623F
  6624Fstruct SPIFFCT_BITS
  6625F{                     // bits description
  6626F  Uint16 TXDLY : 8 ;
  6627F                   // 7:0 FIFO transmit delay
  6628F  Uint16 rsvd : 8 ;
  6629F                  // 15:8 reserved
  6630F} ;
  6631F
  6632Funion SPIFFCT_REG
  6633F{
  6634F  Uint16 all ;
  6635F  struct SPIFFCT_BITS bit ;
  6636F} ;
  6637F//---------------------------------------------
  6638F// SPI configuration register bit definitions:
  6639F//
  6640F//
  6641F
  6642Fstruct SPICCR_BITS
  6643F{                    // bits description
  6644F  Uint16 SPICHAR : 4 ;
  6645F                     // 3:0 Character length control
  6646F  Uint16 SPILBK : 1 ;
  6647F                    // 4 Loop-back enable/disable
  6648F  Uint16 rsvd1 : 1 ;
  6649F                   // 5 reserved
  6650F  Uint16 CLKPOLARITY : 1 ;
  6651F                         // 6 Clock polarity
  6652F  Uint16 SPISWRESET : 1 ;
  6653F                        // 7 SPI SW Reset
  6654F  Uint16 rsvd2 : 8 ;
  6655F                   // 15:8 reserved
  6656F} ;
  6657F
  6658Funion SPICCR_REG
  6659F{
  6660F  Uint16 all ;
  6661F  struct SPICCR_BITS bit ;
  6662F} ;
  6663F//-------------------------------------------------
  6664F// SPI operation control register bit definitions:
  6665F//
  6666F//
  6667F
  6668Fstruct SPICTL_BITS
  6669F{                    // bits description
  6670F  Uint16 SPIINTENA : 1 ;
  6671F                       // 0 Interrupt enable
  6672F  Uint16 TALK : 1 ;
  6673F                  // 1 Master/Slave transmit enable
  6674F  Uint16 MASTER_SLAVE : 1 ;
  6675F                          // 2 Network control mode
  6676F  Uint16 CLK_PHASE : 1 ;
  6677F                       // 3 Clock phase select
  6678F  Uint16 OVERRUNINTENA : 1 ;
  6679F                           // 4 Overrun interrupt enable
  6680F  Uint16 rsvd : 11 ;
  6681F                   // 15:5 reserved
  6682F} ;
  6683F
  6684Funion SPICTL_REG
  6685F{
  6686F  Uint16 all ;
  6687F  struct SPICTL_BITS bit ;
  6688F} ;
  6689F//--------------------------------------
  6690F// SPI status register bit definitions:
  6691F//
  6692F//
  6693F
  6694Fstruct SPISTS_BITS
  6695F{                    // bits description
  6696F  Uint16 rsvd1 : 5 ;
  6697F                   // 4:0 reserved
  6698F  Uint16 BUFFULL_FLAG : 1 ;
  6699F                          // 5 SPI transmit buffer full flag
  6700F  Uint16 INT_FLAG : 1 ;
  6701F                      // 6 SPI interrupt flag
  6702F  Uint16 OVERRUN_FLAG : 1 ;
  6703F                          // 7 SPI reciever overrun flag
  6704F  Uint16 rsvd2 : 8 ;
  6705F                   // 15:8 reserved
  6706F} ;
  6707F
  6708Funion SPISTS_REG
  6709F{
  6710F  Uint16 all ;
  6711F  struct SPISTS_BITS bit ;
  6712F} ;
  6713F//------------------------------------------------
  6714F// SPI priority control register bit definitions:
  6715F//
  6716F//
  6717F
  6718Fstruct SPIPRI_BITS
  6719F{                    // bits description
  6720F  Uint16 rsvd1 : 4 ;
  6721F                   // 3:0 reserved
  6722F  Uint16 FREE : 1 ;
  6723F                  // 4 Free emulation mode control
  6724F  Uint16 SOFT : 1 ;
  6725F                  // 5 Soft emulation mode control
  6726F  Uint16 rsvd2 : 1 ;
  6727F                   // 6 reserved
  6728F  Uint16 rsvd3 : 9 ;
  6729F                   // 15:7 reserved
  6730F} ;
  6731F
  6732Funion SPIPRI_REG
  6733F{
  6734F  Uint16 all ;
  6735F  struct SPIPRI_BITS bit ;
  6736F} ;
  6737F//---------------------------------------------------------------------------
  6738F// SPI Register File:
  6739F//
  6740F
  6741Fstruct SPI_REGS
  6742F{
  6743F  union SPICCR_REG SPICCR ; // Configuration register
  6744F  union SPICTL_REG SPICTL ; // Operation control register
  6745F  union SPISTS_REG SPISTS ; // Status register
  6746F  Uint16 rsvd1 ; // reserved
  6747F  Uint16 SPIBRR ; // Baud Rate
  6748F  Uint16 rsvd2 ; // reserved
  6749F  Uint16 SPIRXEMU ; // Emulation buffer
  6750F  Uint16 SPIRXBUF ; // Serial input buffer
  6751F  Uint16 SPITXBUF ; // Serial output buffer
  6752F  Uint16 SPIDAT ; // Serial data
  6753F  union SPIFFTX_REG SPIFFTX ; // FIFO transmit register
  6754F  union SPIFFRX_REG SPIFFRX ; // FIFO recieve register
  6755F  union SPIFFCT_REG SPIFFCT ; // FIFO control register
  6756F  Uint16 rsvd3 [ 2 ] ;
  6757F                    // reserved
  6758F  union SPIPRI_REG SPIPRI ; // FIFO Priority control
  6759F} ;
  6760F//---------------------------------------------------------------------------
  6761F// SPI External References & Function Declarations:
  6762F//
  6763F
  6764Fextern volatile struct SPI_REGS
  6765F  SpiaRegs ;
  6766F       /* extern "C" */
  6767F       // end of DSP2833x_SPI_H definition
  6768F//===========================================================================
  6769F// End of file.
  6770F//===========================================================================
  6771F 
  6772F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Spi.h*/
  6773F/*   CLOSE_FILE Include File */
  6774F 
  6775F                // SPI Registers
  6776F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Sci.h */
  6777F// TI File $Revision: /main/2 $
  6778F// Checkin $Date: March 1, 2007 15:57:02 $
  6779F//###########################################################################
  6780F//
  6781F// FILE:        DSP2833x_Sci.h
  6782F//
  6783F// TITLE:       DSP2833x Device SCI Register Definitions.
  6784F//
  6785F//###########################################################################
  6786F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  6787F// $Release Date: August 4, 2009 $
  6788F//###########################################################################
  6789F#ifndef DSP2833x_SCI_H
  6790F#define DSP2833x_SCI_H
  6791F//---------------------------------------------------------------------------
  6792F// SCI Individual Register Bit Definitions
  6793F//----------------------------------------------------------
  6794F// SCICCR communication control register bit definitions:
  6795F//
  6796F
  6797Fstruct SCICCR_BITS
  6798F{                    // bit description
  6799F  Uint16 SCICHAR : 3 ;
  6800F                     // 2:0 Character length control
  6801F  Uint16 ADDRIDLE_MODE : 1 ;
  6802F                           // 3 ADDR/IDLE Mode control
  6803F  Uint16 LOOPBKENA : 1 ;
  6804F                       // 4 Loop Back enable
  6805F  Uint16 PARITYENA : 1 ;
  6806F                       // 5 Parity enable
  6807F  Uint16 PARITY : 1 ;
  6808F                    // 6 Even or Odd Parity
  6809F  Uint16 STOPBITS : 1 ;
  6810F                      // 7 Number of Stop Bits
  6811F  Uint16 rsvd1 : 8 ;
  6812F                   // 15:8 reserved
  6813F} ;
  6814F
  6815Funion SCICCR_REG
  6816F{
  6817F  Uint16 all ;
  6818F  struct SCICCR_BITS bit ;
  6819F} ;
  6820F//-------------------------------------------
  6821F// SCICTL1 control register 1 bit definitions:
  6822F//
  6823F
  6824Fstruct SCICTL1_BITS
  6825F{                     // bit description
  6826F  Uint16 RXENA : 1 ;
  6827F                   // 0 SCI receiver enable
  6828F  Uint16 TXENA : 1 ;
  6829F                   // 1 SCI transmitter enable
  6830F  Uint16 SLEEP : 1 ;
  6831F                   // 2 SCI sleep
  6832F  Uint16 TXWAKE : 1 ;
  6833F                    // 3 Transmitter wakeup method
  6834F  Uint16 rsvd : 1 ;
  6835F                  // 4 reserved
  6836F  Uint16 SWRESET : 1 ;
  6837F                     // 5 Software reset
  6838F  Uint16 RXERRINTENA : 1 ;
  6839F                         // 6 Recieve interrupt enable
  6840F  Uint16 rsvd1 : 9 ;
  6841F                   // 15:7 reserved
  6842F} ;
  6843F
  6844Funion SCICTL1_REG
  6845F{
  6846F  Uint16 all ;
  6847F  struct SCICTL1_BITS bit ;
  6848F} ;
  6849F//---------------------------------------------
  6850F// SCICTL2 control register 2 bit definitions:
  6851F//
  6852F
  6853Fstruct SCICTL2_BITS
  6854F{                     // bit description
  6855F  Uint16 TXINTENA : 1 ;
  6856F                      // 0 Transmit interrupt enable
  6857F  Uint16 RXBKINTENA : 1 ;
  6858F                        // 1 Receiver-buffer break enable
  6859F  Uint16 rsvd : 4 ;
  6860F                  // 5:2 reserved
  6861F  Uint16 TXEMPTY : 1 ;
  6862F                     // 6 Transmitter empty flag
  6863F  Uint16 TXRDY : 1 ;
  6864F                   // 7 Transmitter ready flag
  6865F  Uint16 rsvd1 : 8 ;
  6866F                   // 15:8 reserved
  6867F} ;
  6868F
  6869Funion SCICTL2_REG
  6870F{
  6871F  Uint16 all ;
  6872F  struct SCICTL2_BITS bit ;
  6873F} ;
  6874F//---------------------------------------------------
  6875F// SCIRXST Receiver status register bit definitions:
  6876F//
  6877F
  6878Fstruct SCIRXST_BITS
  6879F{                     // bit description
  6880F  Uint16 rsvd : 1 ;
  6881F                  // 0 reserved
  6882F  Uint16 RXWAKE : 1 ;
  6883F                    // 1 Receiver wakeup detect flag
  6884F  Uint16 PE : 1 ;
  6885F                // 2 Parity error flag
  6886F  Uint16 OE : 1 ;
  6887F                // 3 Overrun error flag
  6888F  Uint16 FE : 1 ;
  6889F                // 4 Framing error flag
  6890F  Uint16 BRKDT : 1 ;
  6891F                   // 5 Break-detect flag
  6892F  Uint16 RXRDY : 1 ;
  6893F                   // 6 Receiver ready flag
  6894F  Uint16 RXERROR : 1 ;
  6895F                     // 7 Receiver error flag
  6896F} ;
  6897F
  6898Funion SCIRXST_REG
  6899F{
  6900F  Uint16 all ;
  6901F  struct SCIRXST_BITS bit ;
  6902F} ;
  6903F//----------------------------------------------------
  6904F// SCIRXBUF Receiver Data Buffer with FIFO bit definitions:
  6905F//
  6906F
  6907Fstruct SCIRXBUF_BITS
  6908F{                      // bits description
  6909F  Uint16 RXDT : 8 ;
  6910F                  // 7:0 Receive word
  6911F  Uint16 rsvd : 6 ;
  6912F                  // 13:8 reserved
  6913F  Uint16 SCIFFPE : 1 ;
  6914F                     // 14 SCI PE error in FIFO mode
  6915F  Uint16 SCIFFFE : 1 ;
  6916F                     // 15 SCI FE error in FIFO mode
  6917F} ;
  6918F
  6919Funion SCIRXBUF_REG
  6920F{
  6921F  Uint16 all ;
  6922F  struct SCIRXBUF_BITS bit ;
  6923F} ;
  6924F//--------------------------------------------------
  6925F// SCIPRI Priority control register bit definitions:
  6926F//
  6927F//
  6928F
  6929Fstruct SCIPRI_BITS
  6930F{                    // bit description
  6931F  Uint16 rsvd : 3 ;
  6932F                  // 2:0 reserved
  6933F  Uint16 FREE : 1 ;
  6934F                  // 3 Free emulation suspend mode
  6935F  Uint16 SOFT : 1 ;
  6936F                  // 4 Soft emulation suspend mode
  6937F  Uint16 rsvd1 : 3 ;
  6938F                   // 7:5 reserved
  6939F} ;
  6940F
  6941Funion SCIPRI_REG
  6942F{
  6943F  Uint16 all ;
  6944F  struct SCIPRI_BITS bit ;
  6945F} ;
  6946F//-------------------------------------------------
  6947F// SCI FIFO Transmit register bit definitions:
  6948F//
  6949F//
  6950F
  6951Fstruct SCIFFTX_BITS
  6952F{                     // bit description
  6953F  Uint16 TXFFIL : 5 ;
  6954F                    // 4:0 Interrupt level
  6955F  Uint16 TXFFIENA : 1 ;
  6956F                      // 5 Interrupt enable
  6957F  Uint16 TXFFINTCLR : 1 ;
  6958F                        // 6 Clear INT flag
  6959F  Uint16 TXFFINT : 1 ;
  6960F                     // 7 INT flag
  6961F  Uint16 TXFFST : 5 ;
  6962F                    // 12:8 FIFO status
  6963F  Uint16 TXFIFOXRESET : 1 ;
  6964F                          // 13 FIFO reset
  6965F  Uint16 SCIFFENA : 1 ;
  6966F                      // 14 Enhancement enable
  6967F  Uint16 SCIRST : 1 ;
  6968F                    // 15 SCI reset rx/tx channels
  6969F} ;
  6970F
  6971Funion SCIFFTX_REG
  6972F{
  6973F  Uint16 all ;
  6974F  struct SCIFFTX_BITS bit ;
  6975F} ;
  6976F//------------------------------------------------
  6977F// SCI FIFO recieve register bit definitions:
  6978F//
  6979F//
  6980F
  6981Fstruct SCIFFRX_BITS
  6982F{                     // bits description
  6983F  Uint16 RXFFIL : 5 ;
  6984F                    // 4:0 Interrupt level
  6985F  Uint16 RXFFIENA : 1 ;
  6986F                      // 5 Interrupt enable
  6987F  Uint16 RXFFINTCLR : 1 ;
  6988F                        // 6 Clear INT flag
  6989F  Uint16 RXFFINT : 1 ;
  6990F                     // 7 INT flag
  6991F  Uint16 RXFFST : 5 ;
  6992F                    // 12:8 FIFO status
  6993F  Uint16 RXFIFORESET : 1 ;
  6994F                         // 13 FIFO reset
  6995F  Uint16 RXFFOVRCLR : 1 ;
  6996F                        // 14 Clear overflow
  6997F  Uint16 RXFFOVF : 1 ;
  6998F                     // 15 FIFO overflow
  6999F} ;
  7000F
  7001Funion SCIFFRX_REG
  7002F{
  7003F  Uint16 all ;
  7004F  struct SCIFFRX_BITS bit ;
  7005F} ;
  7006F// SCI FIFO control register bit definitions:
  7007F
  7008Fstruct SCIFFCT_BITS
  7009F{                     // bits description
  7010F  Uint16 FFTXDLY : 8 ;
  7011F                     // 7:0 FIFO transmit delay
  7012F  Uint16 rsvd : 5 ;
  7013F                  // 12:8 reserved
  7014F  Uint16 CDC : 1 ;
  7015F                 // 13 Auto baud mode enable
  7016F  Uint16 ABDCLR : 1 ;
  7017F                    // 14 Auto baud clear
  7018F  Uint16 ABD : 1 ;
  7019F                 // 15 Auto baud detect
  7020F} ;
  7021F
  7022Funion SCIFFCT_REG
  7023F{
  7024F  Uint16 all ;
  7025F  struct SCIFFCT_BITS bit ;
  7026F} ;
  7027F//---------------------------------------------------------------------------
  7028F// SCI Register File:
  7029F//
  7030F
  7031Fstruct SCI_REGS
  7032F{
  7033F  union SCICCR_REG SCICCR ; // Communications control register
  7034F  union SCICTL1_REG SCICTL1 ; // Control register 1
  7035F  Uint16 SCIHBAUD ; // Baud rate (high) register
  7036F  Uint16 SCILBAUD ; // Baud rate (low) register
  7037F  union SCICTL2_REG SCICTL2 ; // Control register 2
  7038F  union SCIRXST_REG SCIRXST ; // Recieve status register
  7039F  Uint16 SCIRXEMU ; // Recieve emulation buffer register
  7040F  union SCIRXBUF_REG SCIRXBUF ; // Recieve data buffer
  7041F  Uint16 rsvd1 ; // reserved
  7042F  Uint16 SCITXBUF ; // Transmit data buffer
  7043F  union SCIFFTX_REG SCIFFTX ; // FIFO transmit register
  7044F  union SCIFFRX_REG SCIFFRX ; // FIFO recieve register
  7045F  union SCIFFCT_REG SCIFFCT ; // FIFO control register
  7046F  Uint16 rsvd2 ; // reserved
  7047F  Uint16 rsvd3 ; // reserved
  7048F  union SCIPRI_REG SCIPRI ; // FIFO Priority control
  7049F} ;
  7050F//---------------------------------------------------------------------------
  7051F// SCI External References & Function Declarations:
  7052F//
  7053F
  7054Fextern volatile struct SCI_REGS
  7055F  SciaRegs ;
  7056F
  7057Fextern volatile struct SCI_REGS
  7058F  ScibRegs ;
  7059F
  7060Fextern volatile struct SCI_REGS
  7061F  ScicRegs ;
  7062F       /* extern "C" */
  7063F       // end of DSP2833x_SCI_H definition
  7064F//===========================================================================
  7065F// End of file.
  7066F//===========================================================================
  7067F 
  7068F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Sci.h*/
  7069F/*   CLOSE_FILE Include File */
  7070F 
  7071F                // SCI Registers
  7072F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_SysCtrl.h */
  7073F// TI File $Revision: /main/5 $
  7074F// Checkin $Date: May 12, 2008 09:34:58 $
  7075F//###########################################################################
  7076F//
  7077F// FILE: DSP2833x_SysCtrl.h
  7078F//
  7079F// TITLE: DSP2833x Device System Control Register Definitions.
  7080F//
  7081F//###########################################################################
  7082F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  7083F// $Release Date: August 4, 2009 $
  7084F//###########################################################################
  7085F#ifndef DSP2833x_SYS_CTRL_H
  7086F#define DSP2833x_SYS_CTRL_H
  7087F//---------------------------------------------------------------------------
  7088F// System Control Individual Register Bit Definitions:
  7089F//
  7090F// PLL Status Register
  7091F
  7092Ftypedef
  7093Fstruct PLLSTS_BITS
  7094F{                            // bits description
  7095F  Uint16 PLLLOCKS : 1 ;
  7096F                      // 0 PLL lock status
  7097F  Uint16 rsvd1 : 1 ;
  7098F                   // 1 reserved
  7099F  Uint16 PLLOFF : 1 ;
  7100F                    // 2 PLL off bit
  7101F  Uint16 MCLKSTS : 1 ;
  7102F                     // 3 Missing clock status bit
  7103F  Uint16 MCLKCLR : 1 ;
  7104F                     // 4 Missing clock clear bit
  7105F  Uint16 OSCOFF : 1 ;
  7106F                    // 5 Oscillator clock off
  7107F  Uint16 MCLKOFF : 1 ;
  7108F                     // 6 Missing clock detect
  7109F  Uint16 DIVSEL : 2 ;
  7110F                    // 7 Divide Select
  7111F  Uint16 rsvd2 : 7 ;
  7112F                   // 15:7 reserved
  7113F} PLLSTS_BITS ;
  7114F
  7115Ftypedef
  7116Funion PLLSTS_REG
  7117F{
  7118F  Uint16 all ;
  7119F  struct PLLSTS_BITS bit ;
  7120F} PLLSTS_REG ;
  7121F// High speed peripheral clock register bit definitions:
  7122F
  7123Ftypedef
  7124Fstruct HISPCP_BITS
  7125F{                            // bits description
  7126F  Uint16 HSPCLK : 3 ;
  7127F                    // 2:0 Rate relative to SYSCLKOUT
  7128F  Uint16 rsvd1 : 13 ;
  7129F                    // 15:3 reserved
  7130F} HISPCP_BITS ;
  7131F
  7132Ftypedef
  7133Funion HISPCP_REG
  7134F{
  7135F  Uint16 all ;
  7136F  struct HISPCP_BITS bit ;
  7137F} HISPCP_REG ;
  7138F// Low speed peripheral clock register bit definitions:
  7139F
  7140Ftypedef
  7141Fstruct LOSPCP_BITS
  7142F{                            // bits description
  7143F  Uint16 LSPCLK : 3 ;
  7144F                    // 2:0 Rate relative to SYSCLKOUT
  7145F  Uint16 rsvd1 : 13 ;
  7146F                    // 15:3 reserved
  7147F} LOSPCP_BITS ;
  7148F
  7149Ftypedef
  7150Funion LOSPCP_REG
  7151F{
  7152F  Uint16 all ;
  7153F  struct LOSPCP_BITS bit ;
  7154F} LOSPCP_REG ;
  7155F// Peripheral clock control register 0 bit definitions:
  7156F
  7157Ftypedef
  7158Fstruct PCLKCR0_BITS
  7159F{                             // bits description
  7160F  Uint16 rsvd1 : 2 ;
  7161F                   // 1:0 reserved
  7162F  Uint16 TBCLKSYNC : 1 ;
  7163F                       // 2 EWPM Module TBCLK enable/sync
  7164F  Uint16 ADCENCLK : 1 ;
  7165F                      // 3 Enable high speed clk to ADC
  7166F  Uint16 I2CAENCLK : 1 ;
  7167F                       // 4 Enable SYSCLKOUT to I2C-A
  7168F  Uint16 SCICENCLK : 1 ;
  7169F                       // 5 Enalbe low speed clk to SCI-C
  7170F  Uint16 rsvd2 : 2 ;
  7171F                   // 7:6 reserved
  7172F  Uint16 SPIAENCLK : 1 ;
  7173F                       // 8 Enable low speed clk to SPI-A
  7174F  Uint16 rsvd3 : 1 ;
  7175F                   // 9 reserved
  7176F  Uint16 SCIAENCLK : 1 ;
  7177F                       // 10 Enable low speed clk to SCI-A
  7178F  Uint16 SCIBENCLK : 1 ;
  7179F                       // 11 Enable low speed clk to SCI-B
  7180F  Uint16 MCBSPAENCLK : 1 ;
  7181F                         // 12 Enable low speed clk to McBSP-A
  7182F  Uint16 MCBSPBENCLK : 1 ;
  7183F                         // 13 Enable low speed clk to McBSP-B
  7184F  Uint16 ECANAENCLK : 1 ;
  7185F                        // 14 Enable system clk to eCAN-A
  7186F  Uint16 ECANBENCLK : 1 ;
  7187F                        // 15 Enable system clk to eCAN-B
  7188F} PCLKCR0_BITS ;
  7189F
  7190Ftypedef
  7191Funion PCLKCR0_REG
  7192F{
  7193F  Uint16 all ;
  7194F  struct PCLKCR0_BITS bit ;
  7195F} PCLKCR0_REG ;
  7196F// Peripheral clock control register 1 bit definitions:
  7197F
  7198Ftypedef
  7199Fstruct PCLKCR1_BITS
  7200F{                             // bits description
  7201F  Uint16 EPWM1ENCLK : 1 ;
  7202F                        // 0 Enable SYSCLKOUT to EPWM1
  7203F  Uint16 EPWM2ENCLK : 1 ;
  7204F                        // 1 Enable SYSCLKOUT to EPWM2
  7205F  Uint16 EPWM3ENCLK : 1 ;
  7206F                        // 2 Enable SYSCLKOUT to EPWM3
  7207F  Uint16 EPWM4ENCLK : 1 ;
  7208F                        // 3 Enable SYSCLKOUT to EPWM4
  7209F  Uint16 EPWM5ENCLK : 1 ;
  7210F                        // 4 Enable SYSCLKOUT to EPWM5
  7211F  Uint16 EPWM6ENCLK : 1 ;
  7212F                        // 5 Enable SYSCLKOUT to EPWM6
  7213F  Uint16 rsvd1 : 2 ;
  7214F                   // 7:6 reserved
  7215F  Uint16 ECAP1ENCLK : 1 ;
  7216F                        // 8 Enable SYSCLKOUT to ECAP1
  7217F  Uint16 ECAP2ENCLK : 1 ;
  7218F                        // 9 Enable SYSCLKOUT to ECAP2
  7219F  Uint16 ECAP3ENCLK : 1 ;
  7220F                        // 10 Enable SYSCLKOUT to ECAP3
  7221F  Uint16 ECAP4ENCLK : 1 ;
  7222F                        // 11 Enable SYSCLKOUT to ECAP4
  7223F  Uint16 ECAP5ENCLK : 1 ;
  7224F                        // 12 Enable SYSCLKOUT to ECAP5
  7225F  Uint16 ECAP6ENCLK : 1 ;
  7226F                        // 13 Enable SYSCLKOUT to ECAP6
  7227F  Uint16 EQEP1ENCLK : 1 ;
  7228F                        // 14 Enable SYSCLKOUT to EQEP1
  7229F  Uint16 EQEP2ENCLK : 1 ;
  7230F                        // 15 Enable SYSCLKOUT to EQEP2
  7231F} PCLKCR1_BITS ;
  7232F
  7233Ftypedef
  7234Funion PCLKCR1_REG
  7235F{
  7236F  Uint16 all ;
  7237F  struct PCLKCR1_BITS bit ;
  7238F} PCLKCR1_REG ;
  7239F// Peripheral clock control register 2 bit definitions:
  7240F
  7241Ftypedef
  7242Fstruct PCLKCR3_BITS
  7243F{                             // bits description
  7244F  Uint16 rsvd1 : 8 ;
  7245F                   // 7:0 reserved
  7246F  Uint16 CPUTIMER0ENCLK : 1 ;
  7247F                            // 8 Enable SYSCLKOUT to CPU-Timer 0
  7248F  Uint16 CPUTIMER1ENCLK : 1 ;
  7249F                            // 9 Enable SYSCLKOUT to CPU-Timer 1
  7250F  Uint16 CPUTIMER2ENCLK : 1 ;
  7251F                            // 10 Enable SYSCLKOUT to CPU-Timer 2
  7252F  Uint16 DMAENCLK : 1 ;
  7253F                      // 11 Enable the DMA clock
  7254F  Uint16 XINTFENCLK : 1 ;
  7255F                        // 12 Enable SYSCLKOUT to XINTF
  7256F  Uint16 GPIOINENCLK : 1 ;
  7257F                         // Enable GPIO input clock
  7258F  Uint16 rsvd2 : 2 ;
  7259F                   // 15:14 reserved
  7260F} PCLKCR3_BITS ;
  7261F
  7262Ftypedef
  7263Funion PCLKCR3_REG
  7264F{
  7265F  Uint16 all ;
  7266F  struct PCLKCR3_BITS bit ;
  7267F} PCLKCR3_REG ;
  7268F// PLL control register bit definitions:
  7269F
  7270Ftypedef
  7271Fstruct PLLCR_BITS
  7272F{                           // bits description
  7273F  Uint16 DIV : 4 ;
  7274F                 // 3:0 Set clock ratio for the PLL
  7275F  Uint16 rsvd1 : 12 ;
  7276F                    // 15:4 reserved
  7277F} PLLCR_BITS ;
  7278F
  7279Ftypedef
  7280Funion PLLCR_REG
  7281F{
  7282F  Uint16 all ;
  7283F  struct PLLCR_BITS bit ;
  7284F} PLLCR_REG ;
  7285F// Low Power Mode 0 control register bit definitions:
  7286F
  7287Ftypedef
  7288Fstruct LPMCR0_BITS
  7289F{                            // bits description
  7290F  Uint16 LPM : 2 ;
  7291F                 // 1:0 Set the low power mode
  7292F  Uint16 QUALSTDBY : 6 ;
  7293F                       // 7:2 Qualification
  7294F  Uint16 rsvd1 : 7 ;
  7295F                   // 14:8 reserved
  7296F  Uint16 WDINTE : 1 ;
  7297F                    // 15 Enables WD to wake the device from STANDBY
  7298F} LPMCR0_BITS ;
  7299F
  7300Ftypedef
  7301Funion LPMCR0_REG
  7302F{
  7303F  Uint16 all ;
  7304F  struct LPMCR0_BITS bit ;
  7305F} LPMCR0_REG ;
  7306F// Dual-mapping configuration register bit definitions:
  7307F
  7308Ftypedef
  7309Fstruct MAPCNF_BITS
  7310F{                            // bits description
  7311F  Uint16 MAPEPWM : 1 ;// 0 EPWM dual-map enable
  7312F  Uint16 rsvd1 : 15 ;// 15:1 reserved
  7313F} MAPCNF_BITS ;
  7314F
  7315Ftypedef
  7316Funion MAPCNF_REG
  7317F{
  7318F  Uint16 all ;
  7319F  struct MAPCNF_BITS bit ;
  7320F} MAPCNF_REG ;
  7321F//---------------------------------------------------------------------------
  7322F// System Control Register File:
  7323F//
  7324F
  7325Ftypedef
  7326Fstruct SYS_CTRL_REGS
  7327F{
  7328F  Uint16 rsvd1 ; // 0
  7329F  union PLLSTS_REG PLLSTS ; // 1
  7330F  Uint16 rsvd2 [ 8 ] ;
  7331F                    // 2-9
  7332F  union HISPCP_REG HISPCP ; // 10: High-speed peripheral clock pre-scaler
  7333F  union LOSPCP_REG LOSPCP ; // 11: Low-speed peripheral clock pre-scaler
  7334F  union PCLKCR0_REG PCLKCR0 ; // 12: Peripheral clock control register
  7335F  union PCLKCR1_REG PCLKCR1 ; // 13: Peripheral clock control register
  7336F  union LPMCR0_REG LPMCR0 ; // 14: Low-power mode control register 0
  7337F  Uint16 rsvd3 ; // 15: reserved
  7338F  union PCLKCR3_REG PCLKCR3 ; // 16: Peripheral clock control register
  7339F  union PLLCR_REG PLLCR ;
  7340F                          // 17: PLL control register
  7341F   // No bit definitions are defined for SCSR because
  7342F   // a read-modify-write instruction can clear the WDOVERRIDE bit
  7343F  Uint16 SCSR ; // 18: System control and status register
  7344F  Uint16 WDCNTR ; // 19: WD counter register
  7345F  Uint16 rsvd4 ; // 20
  7346F  Uint16 WDKEY ; // 21: WD reset key register
  7347F  Uint16 rsvd5 [ 3 ] ;
  7348F                    // 22-24
  7349F   // No bit definitions are defined for WDCR because
  7350F   // the proper value must be written to the WDCHK field
  7351F   // whenever writing to this register.
  7352F  Uint16 WDCR ; // 25: WD timer control register
  7353F  Uint16 rsvd6 [ 4 ] ;
  7354F                    // 26-29
  7355F  union MAPCNF_REG MAPCNF ; // 30: Dual-mapping configuration register
  7356F  Uint16 rsvd7 [ 1 ] ;
  7357F                    // 31
  7358F} SYS_CTRL_REGS ;
  7359F/* --------------------------------------------------- */
  7360F/* CSM Registers */
  7361F/* */
  7362F/* ----------------------------------------------------*/
  7363F/* CSM Status & Control register bit definitions */
  7364F
  7365Ftypedef
  7366Fstruct CSMSCR_BITS
  7367F{                            // bit description
  7368F  Uint16 SECURE : 1 ;
  7369F                    // 0 Secure flag
  7370F  Uint16 rsvd1 : 14 ;
  7371F                    // 14-1 reserved
  7372F  Uint16 FORCESEC : 1 ;
  7373F                      // 15 Force Secure control bit
  7374F} CSMSCR_BITS ;
  7375F/* Allow access to the bit fields or entire register */
  7376F
  7377Ftypedef
  7378Funion CSMSCR_REG
  7379F{
  7380F  Uint16 all ;
  7381F  struct CSMSCR_BITS bit ;
  7382F} CSMSCR_REG ;
  7383F/* CSM Register File */
  7384F
  7385Ftypedef
  7386Fstruct CSM_REGS
  7387F{
  7388F  Uint16 KEY0 ; // KEY reg bits 15-0
  7389F  Uint16 KEY1 ; // KEY reg bits 31-16
  7390F  Uint16 KEY2 ; // KEY reg bits 47-32
  7391F  Uint16 KEY3 ; // KEY reg bits 63-48
  7392F  Uint16 KEY4 ; // KEY reg bits 79-64
  7393F  Uint16 KEY5 ; // KEY reg bits 95-80
  7394F  Uint16 KEY6 ; // KEY reg bits 111-96
  7395F  Uint16 KEY7 ; // KEY reg bits 127-112
  7396F  Uint16 rsvd1 ; // reserved
  7397F  Uint16 rsvd2 ; // reserved
  7398F  Uint16 rsvd3 ; // reserved
  7399F  Uint16 rsvd4 ; // reserved
  7400F  Uint16 rsvd5 ; // reserved
  7401F  Uint16 rsvd6 ; // reserved
  7402F  Uint16 rsvd7 ; // reserved
  7403F  union CSMSCR_REG CSMSCR ; // CSM Status & Control register
  7404F} CSM_REGS ;
  7405F/* Password locations */
  7406F
  7407Ftypedef
  7408Fstruct CSM_PWL
  7409F{
  7410F  Uint16 PSWD0 ; // PSWD bits 15-0
  7411F  Uint16 PSWD1 ; // PSWD bits 31-16
  7412F  Uint16 PSWD2 ; // PSWD bits 47-32
  7413F  Uint16 PSWD3 ; // PSWD bits 63-48
  7414F  Uint16 PSWD4 ; // PSWD bits 79-64
  7415F  Uint16 PSWD5 ; // PSWD bits 95-80
  7416F  Uint16 PSWD6 ; // PSWD bits 111-96
  7417F  Uint16 PSWD7 ; // PSWD bits 127-112
  7418F} CSM_PWL ;
  7419F/* Flash Registers */
  7420F#define FLASH_SLEEP 0x0000 ;
  7421F#define FLASH_STANDBY 0x0001 ;
  7422F#define FLASH_ACTIVE 0x0003 ;
  7423F/* Flash Option Register bit definitions */
  7424F
  7425Ftypedef
  7426Fstruct FOPT_BITS
  7427F{                          // bit description
  7428F  Uint16 ENPIPE : 1 ;
  7429F                    // 0 Enable Pipeline Mode
  7430F  Uint16 rsvd : 15 ;
  7431F                   // 1-15 reserved
  7432F} FOPT_BITS ;
  7433F/* Allow access to the bit fields or entire register */
  7434F
  7435Ftypedef
  7436Funion FOPT_REG
  7437F{
  7438F  Uint16 all ;
  7439F  struct FOPT_BITS bit ;
  7440F} FOPT_REG ;
  7441F/* Flash Power Modes Register bit definitions */
  7442F
  7443Ftypedef
  7444Fstruct FPWR_BITS
  7445F{                          // bit description
  7446F  Uint16 PWR : 2 ;
  7447F                 // 0-1 Power Mode bits
  7448F  Uint16 rsvd : 14 ;
  7449F                   // 2-15 reserved
  7450F} FPWR_BITS ;
  7451F/* Allow access to the bit fields or entire register */
  7452F
  7453Ftypedef
  7454Funion FPWR_REG
  7455F{
  7456F  Uint16 all ;
  7457F  struct FPWR_BITS bit ;
  7458F} FPWR_REG ;
  7459F/* Flash Status Register bit definitions */
  7460F
  7461Ftypedef
  7462Fstruct FSTATUS_BITS
  7463F{                             // bit description
  7464F  Uint16 PWRS : 2 ;
  7465F                  // 0-1 Power Mode Status bits
  7466F  Uint16 STDBYWAITS : 1 ;
  7467F                        // 2 Bank/Pump Sleep to Standby Wait Counter Status bits
  7468F  Uint16 ACTIVEWAITS : 1 ;
  7469F                         // 3 Bank/Pump Standby to Active Wait Counter Status bits
  7470F  Uint16 rsvd1 : 4 ;
  7471F                   // 4-7 reserved
  7472F  Uint16 V3STAT : 1 ;
  7473F                    // 8 VDD3V Status Latch bit
  7474F  Uint16 rsvd2 : 7 ;
  7475F                   // 9-15 reserved
  7476F} FSTATUS_BITS ;
  7477F/* Allow access to the bit fields or entire register */
  7478F
  7479Ftypedef
  7480Funion FSTATUS_REG
  7481F{
  7482F  Uint16 all ;
  7483F  struct FSTATUS_BITS bit ;
  7484F} FSTATUS_REG ;
  7485F/* Flash Sleep to Standby Wait Counter Register bit definitions */
  7486F
  7487Ftypedef
  7488Fstruct FSTDBYWAIT_BITS
  7489F{                                // bit description
  7490F  Uint16 STDBYWAIT : 9 ;
  7491F                       // 0-8 Bank/Pump Sleep to Standby Wait Count bits
  7492F  Uint16 rsvd : 7 ;
  7493F                  // 9-15 reserved
  7494F} FSTDBYWAIT_BITS ;
  7495F/* Allow access to the bit fields or entire register */
  7496F
  7497Ftypedef
  7498Funion FSTDBYWAIT_REG
  7499F{
  7500F  Uint16 all ;
  7501F  struct FSTDBYWAIT_BITS bit ;
  7502F} FSTDBYWAIT_REG ;
  7503F/* Flash Standby to Active Wait Counter Register bit definitions */
  7504F
  7505Ftypedef
  7506Fstruct FACTIVEWAIT_BITS
  7507F{                                 // bit description
  7508F  Uint16 ACTIVEWAIT : 9 ;
  7509F                        // 0-8 Bank/Pump Standby to Active Wait Count bits
  7510F  Uint16 rsvd : 7 ;
  7511F                  // 9-15 reserved
  7512F} FACTIVEWAIT_BITS ;
  7513F/* Allow access to the bit fields or entire register */
  7514F
  7515Ftypedef
  7516Funion FACTIVEWAIT_REG
  7517F{
  7518F  Uint16 all ;
  7519F  struct FACTIVEWAIT_BITS bit ;
  7520F} FACTIVEWAIT_REG ;
  7521F/* Bank Read Access Wait State Register bit definitions */
  7522F
  7523Ftypedef
  7524Fstruct FBANKWAIT_BITS
  7525F{                               // bit description
  7526F  Uint16 RANDWAIT : 4 ;
  7527F                      // 0-3 Flash Random Read Wait State bits
  7528F  Uint16 rsvd1 : 4 ;
  7529F                   // 4-7 reserved
  7530F  Uint16 PAGEWAIT : 4 ;
  7531F                      // 8-11 Flash Paged Read Wait State bits
  7532F  Uint16 rsvd2 : 4 ;
  7533F                   // 12-15 reserved
  7534F} FBANKWAIT_BITS ;
  7535F/* Allow access to the bit fields or entire register */
  7536F
  7537Ftypedef
  7538Funion FBANKWAIT_REG
  7539F{
  7540F  Uint16 all ;
  7541F  struct FBANKWAIT_BITS bit ;
  7542F} FBANKWAIT_REG ;
  7543F/* OTP Read Access Wait State Register bit definitions */
  7544F
  7545Ftypedef
  7546Fstruct FOTPWAIT_BITS
  7547F{                              // bit description
  7548F  Uint16 OTPWAIT : 5 ;
  7549F                     // 0-4 OTP Read Wait State bits
  7550F  Uint16 rsvd : 11 ;
  7551F                   // 5-15 reserved
  7552F} FOTPWAIT_BITS ;
  7553F/* Allow access to the bit fields or entire register */
  7554F
  7555Ftypedef
  7556Funion FOTPWAIT_REG
  7557F{
  7558F  Uint16 all ;
  7559F  struct FOTPWAIT_BITS bit ;
  7560F} FOTPWAIT_REG ;
  7561F
  7562Ftypedef
  7563Fstruct FLASH_REGS
  7564F{
  7565F  union FOPT_REG FOPT ; // Option Register
  7566F  Uint16 rsvd1 ; // reserved
  7567F  union FPWR_REG FPWR ; // Power Modes Register
  7568F  union FSTATUS_REG FSTATUS ; // Status Register
  7569F  union FSTDBYWAIT_REG FSTDBYWAIT ; // Pump/Bank Sleep to Standby Wait State Register
  7570F  union FACTIVEWAIT_REG FACTIVEWAIT ; // Pump/Bank Standby to Active Wait State Register
  7571F  union FBANKWAIT_REG FBANKWAIT ; // Bank Read Access Wait State Register
  7572F  union FOTPWAIT_REG FOTPWAIT ; // OTP Read Access Wait State Register
  7573F} FLASH_REGS ;
  7574F//---------------------------------------------------------------------------
  7575F// System Control External References & Function Declarations:
  7576F//
  7577F
  7578Fextern volatile struct SYS_CTRL_REGS
  7579F  SysCtrlRegs ;
  7580F
  7581Fextern volatile struct CSM_REGS
  7582F  CsmRegs ;
  7583F
  7584Fextern volatile struct CSM_PWL
  7585F  CsmPwl ;
  7586F
  7587Fextern volatile struct FLASH_REGS
  7588F  FlashRegs ;
  7589F       // end of DSP2833x_SYS_CTRL_H definition
  7590F//===========================================================================
  7591F// End of file.
  7592F//===========================================================================
  7593F 
  7594F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_SysCtrl.h*/
  7595F/*   CLOSE_FILE Include File */
  7596F 
  7597F            // System Control/Power Modes
  7598F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_XIntrupt.h */
  7599F// TI File $Revision: /main/1 $
  7600F// Checkin $Date: August 18, 2006 13:52:39 $
  7601F//###########################################################################
  7602F//
  7603F// FILE: DSP2833x_XIntrupt.h
  7604F//
  7605F// TITLE: DSP2833x Device External Interrupt Register Definitions.
  7606F//
  7607F//###########################################################################
  7608F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  7609F// $Release Date: August 4, 2009 $
  7610F//###########################################################################
  7611F#ifndef DSP2833x_XINTRUPT_H
  7612F#define DSP2833x_XINTRUPT_H
  7613F//---------------------------------------------------------------------------
  7614F
  7615Fstruct XINTCR_BITS
  7616F{
  7617F  Uint16 ENABLE : 1 ;// 0 enable/disable
  7618F  Uint16 rsvd1 : 1 ;// 1 reserved
  7619F  Uint16 POLARITY : 2 ;// 3:2 pos/neg, both triggered
  7620F  Uint16 rsvd2 : 12 ;//15:4 reserved
  7621F} ;
  7622F
  7623Funion XINTCR_REG
  7624F{
  7625F  Uint16 all ;
  7626F  struct XINTCR_BITS bit ;
  7627F} ;
  7628F
  7629Fstruct XNMICR_BITS
  7630F{
  7631F  Uint16 ENABLE : 1 ;// 0 enable/disable
  7632F  Uint16 SELECT : 1 ;// 1 Timer 1 or XNMI connected to int13
  7633F  Uint16 POLARITY : 2 ;// 3:2 pos/neg, or both triggered
  7634F  Uint16 rsvd2 : 12 ;// 15:4 reserved
  7635F} ;
  7636F
  7637Funion XNMICR_REG
  7638F{
  7639F  Uint16 all ;
  7640F  struct XNMICR_BITS bit ;
  7641F} ;
  7642F//---------------------------------------------------------------------------
  7643F// External Interrupt Register File:
  7644F//
  7645F
  7646Fstruct XINTRUPT_REGS
  7647F{
  7648F  union XINTCR_REG XINT1CR ;
  7649F  union XINTCR_REG XINT2CR ;
  7650F  union XINTCR_REG XINT3CR ;
  7651F  union XINTCR_REG XINT4CR ;
  7652F  union XINTCR_REG XINT5CR ;
  7653F  union XINTCR_REG XINT6CR ;
  7654F  union XINTCR_REG XINT7CR ;
  7655F  union XNMICR_REG XNMICR ;
  7656F  Uint16 XINT1CTR ;
  7657F  Uint16 XINT2CTR ;
  7658F  Uint16 rsvd [ 5 ] ;
  7659F  Uint16 XNMICTR ;
  7660F} ;
  7661F//---------------------------------------------------------------------------
  7662F// External Interrupt References & Function Declarations:
  7663F//
  7664F
  7665Fextern volatile struct XINTRUPT_REGS
  7666F  XIntruptRegs ;
  7667F       /* extern "C" */
  7668F       // end of DSP2833x_XINTF_H definition
  7669F//===========================================================================
  7670F// End of file.
  7671F//===========================================================================
  7672F 
  7673F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_XIntrupt.h*/
  7674F/*   CLOSE_FILE Include File */
  7675F 
  7676F           // External Interrupts
  7677F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Xintf.h */
  7678F// TI File $Revision: /main/4 $
  7679F// Checkin $Date: July 27, 2009 13:57:25 $
  7680F//###########################################################################
  7681F//
  7682F// FILE: DSP2833x_Xintf.h
  7683F//
  7684F// TITLE: DSP2833x Device External Interface Register Definitions.
  7685F//
  7686F//###########################################################################
  7687F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  7688F// $Release Date: August 4, 2009 $
  7689F//###########################################################################
  7690F#ifndef DSP2833x_XINTF_H
  7691F#define DSP2833x_XINTF_H
  7692F// XINTF timing register bit definitions:
  7693F
  7694Fstruct XTIMING_BITS
  7695F{                     // bits description
  7696F  Uint16 XWRTRAIL : 2 ;
  7697F                      // 1:0 Write access trail timing
  7698F  Uint16 XWRACTIVE : 3 ;
  7699F                       // 4:2 Write access active timing
  7700F  Uint16 XWRLEAD : 2 ;
  7701F                     // 6:5 Write access lead timing
  7702F  Uint16 XRDTRAIL : 2 ;
  7703F                      // 8:7 Read access trail timing
  7704F  Uint16 XRDACTIVE : 3 ;
  7705F                       // 11:9 Read access active timing
  7706F  Uint16 XRDLEAD : 2 ;
  7707F                     // 13:12 Read access lead timing
  7708F  Uint16 USEREADY : 1 ;
  7709F                      // 14 Extend access using HW waitstates
  7710F  Uint16 READYMODE : 1 ;
  7711F                       // 15 Ready mode
  7712F  Uint16 XSIZE : 2 ;
  7713F                   // 17:16 XINTF bus width - must be written as 11b
  7714F  Uint16 rsvd1 : 4 ;
  7715F                   // 21:18 reserved
  7716F  Uint16 X2TIMING : 1 ;
  7717F                      // 22 Double lead/active/trail timing
  7718F  Uint16 rsvd3 : 9 ;
  7719F                   // 31:23 reserved
  7720F} ;
  7721F
  7722Funion XTIMING_REG
  7723F{
  7724F  Uint32 all ;
  7725F  struct XTIMING_BITS bit ;
  7726F} ;
  7727F// XINTF control register bit definitions:
  7728F
  7729Fstruct XINTCNF2_BITS
  7730F{                      // bits description
  7731F  Uint16 WRBUFF : 2 ;
  7732F                    // 1:0 Write buffer depth
  7733F  Uint16 CLKMODE : 1 ;
  7734F                     // 2 Ratio for XCLKOUT with respect to XTIMCLK
  7735F  Uint16 CLKOFF : 1 ;
  7736F                    // 3 Disable XCLKOUT
  7737F  Uint16 rsvd1 : 2 ;
  7738F                   // 5:4 reserved
  7739F  Uint16 WLEVEL : 2 ;
  7740F                    // 7:6 Current level of the write buffer
  7741F  Uint16 rsvd2 : 1 ;
  7742F                   // 8 reserved
  7743F  Uint16 HOLD : 1 ;
  7744F                  // 9 Hold enable/disable
  7745F  Uint16 HOLDS : 1 ;
  7746F                   // 10 Current state of HOLDn input
  7747F  Uint16 HOLDAS : 1 ;
  7748F                    // 11 Current state of HOLDAn output
  7749F  Uint16 rsvd3 : 4 ;
  7750F                   // 15:12 reserved
  7751F  Uint16 XTIMCLK : 3 ;
  7752F                     // 18:16 Ratio for XTIMCLK
  7753F  Uint16 rsvd4 : 13 ;
  7754F                    // 31:19 reserved
  7755F} ;
  7756F
  7757Funion XINTCNF2_REG
  7758F{
  7759F  Uint32 all ;
  7760F  struct XINTCNF2_BITS bit ;
  7761F} ;
  7762F// XINTF bank switching register bit definitions:
  7763F
  7764Fstruct XBANK_BITS
  7765F{                   // bits description
  7766F  Uint16 BANK : 3 ;
  7767F                  // 2:0 Zone for which banking is enabled
  7768F  Uint16 BCYC : 3 ;
  7769F                  // 5:3 XTIMCLK cycles to add
  7770F  Uint16 rsvd : 10 ;
  7771F                   // 15:6 reserved
  7772F} ;
  7773F
  7774Funion XBANK_REG
  7775F{
  7776F  Uint16 all ;
  7777F  struct XBANK_BITS bit ;
  7778F} ;
  7779F
  7780Fstruct XRESET_BITS
  7781F{
  7782F  Uint16 XHARDRESET : 1 ;
  7783F  Uint16 rsvd1 : 15 ;
  7784F} ;
  7785F
  7786Funion XRESET_REG
  7787F{
  7788F  Uint16 all ;
  7789F  struct XRESET_BITS bit ;
  7790F} ;
  7791F//---------------------------------------------------------------------------
  7792F// XINTF Register File:
  7793F//
  7794F
  7795Fstruct XINTF_REGS
  7796F{
  7797F  union XTIMING_REG XTIMING0 ;
  7798F  Uint32 rsvd1 [ 5 ] ;
  7799F  union XTIMING_REG XTIMING6 ;
  7800F  union XTIMING_REG XTIMING7 ;
  7801F  Uint32 rsvd2 [ 2 ] ;
  7802F  union XINTCNF2_REG XINTCNF2 ;
  7803F  Uint32 rsvd3 ;
  7804F  union XBANK_REG XBANK ;
  7805F  Uint16 rsvd4 ;
  7806F  Uint16 XREVISION ;
  7807F  Uint16 rsvd5 [ 2 ] ;
  7808F  union XRESET_REG XRESET ;
  7809F} ;
  7810F//---------------------------------------------------------------------------
  7811F// XINTF External References & Function Declarations:
  7812F//
  7813F
  7814Fextern volatile struct XINTF_REGS
  7815F  XintfRegs ;
  7816F       /* extern "C" */
  7817F       // end of DSP2833x_XINTF_H definition
  7818F//===========================================================================
  7819F// No more.
  7820F//===========================================================================
  7821F 
  7822F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Xintf.h*/
  7823F/*   CLOSE_FILE Include File */
  7824F 
  7825F              // XINTF External Interface
  7826F#define DSP28_EPWM1 1
  7827F#define DSP28_EPWM2 1
  7828F#define DSP28_EPWM3 1
  7829F#define DSP28_EPWM4 1
  7830F#define DSP28_EPWM5 1
  7831F#define DSP28_EPWM6 1
  7832F#define DSP28_ECAP1 1
  7833F#define DSP28_ECAP2 1
  7834F#define DSP28_ECAP3 1
  7835F#define DSP28_ECAP4 1
  7836F#define DSP28_ECAP5 1
  7837F#define DSP28_ECAP6 1
  7838F#define DSP28_EQEP1 1
  7839F#define DSP28_EQEP2 1
  7840F#define DSP28_ECANA 1
  7841F#define DSP28_ECANB 1
  7842F#define DSP28_MCBSPA 1
  7843F#define DSP28_MCBSPB 1
  7844F#define DSP28_SPIA 1
  7845F#define DSP28_SCIA 1
  7846F#define DSP28_SCIB 1
  7847F#define DSP28_SCIC 1
  7848F#define DSP28_I2CA 1
  7849F       // end DSP28_28335
  7850F       // end DSP28_28334
  7851F       // end DSP28_28332
  7852F       /* extern "C" */
  7853F       // end of DSP2833x_DEVICE_H definition
  7854F//===========================================================================
  7855F// End of file.
  7856F//===========================================================================
  7857F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Device.h*/
  7858F/*   CLOSE_FILE Include File */
  7859F 
  7860F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Examples.h */
  7861F// TI File $Revision: /main/9 $
  7862F// Checkin $Date: July 2, 2008 14:31:12 $
  7863F//###########################################################################
  7864F//
  7865F// FILE: DSP2833x_Examples.h
  7866F//
  7867F// TITLE: DSP2833x Device Definitions.
  7868F//
  7869F//###########################################################################
  7870F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  7871F// $Release Date: August 4, 2009 $
  7872F//###########################################################################
  7873F#ifndef DSP2833x_EXAMPLES_H
  7874F#define DSP2833x_EXAMPLES_H
  7875F/*-----------------------------------------------------------------------------
  7876F      Specify the PLL control register (PLLCR) and divide select (DIVSEL) value.
  7877F-----------------------------------------------------------------------------*/
  7878F//#define DSP28_DIVSEL 0 // Enable /4 for SYSCLKOUT
  7879F//#define DSP28_DIVSEL 1 // Enable /4 for SYSCKOUT
  7880F#define DSP28_DIVSEL 2
  7881F//#define DSP28_DIVSEL 3 // Enable /1 for SYSCLKOUT
  7882F#define DSP28_PLLCR 10
  7883F//#define DSP28_PLLCR 9
  7884F//#define DSP28_PLLCR 8
  7885F//#define DSP28_PLLCR 7
  7886F//#define DSP28_PLLCR 6
  7887F//#define DSP28_PLLCR 5
  7888F//#define DSP28_PLLCR 4
  7889F//#define DSP28_PLLCR 3
  7890F//#define DSP28_PLLCR 2
  7891F//#define DSP28_PLLCR 1
  7892F//#define DSP28_PLLCR 0 // PLL is bypassed in this mode
  7893F//----------------------------------------------------------------------------
  7894F/*-----------------------------------------------------------------------------
  7895F      Specify the clock rate of the CPU (SYSCLKOUT) in nS.
  7896F      Take into account the input clock frequency and the PLL multiplier
  7897F      selected in step 1.
  7898F      Use one of the values provided, or define your own.
  7899F      The trailing L is required tells the compiler to treat
  7900F      the number as a 64-bit value.
  7901F      Only one statement should be uncommented.
  7902F      Example 1:150 MHz devices:
  7903F                CLKIN is a 30MHz crystal.
  7904F                In step 1 the user specified PLLCR = 0xA for a
  7905F                150Mhz CPU clock (SYSCLKOUT = 150MHz).
  7906F                In this case, the CPU_RATE will be 6.667L
  7907F                Uncomment the line: #define CPU_RATE 6.667L
  7908F      Example 2: 100 MHz devices:
  7909F                  CLKIN is a 20MHz crystal.
  7910F                      In step 1 the user specified PLLCR = 0xA for a
  7911F                      100Mhz CPU clock (SYSCLKOUT = 100MHz).
  7912F                      In this case, the CPU_RATE will be 10.000L
  7913F                  Uncomment the line: #define CPU_RATE 10.000L
  7914F-----------------------------------------------------------------------------*/
  7915F#define CPU_RATE 6.667L
  7916F//#define CPU_RATE 7.143L // for a 140MHz CPU clock speed (SYSCLKOUT)
  7917F//#define CPU_RATE 8.333L // for a 120MHz CPU clock speed (SYSCLKOUT)
  7918F//#define CPU_RATE 10.000L // for a 100MHz CPU clock speed (SYSCLKOUT)
  7919F//#define CPU_RATE 13.330L // for a 75MHz CPU clock speed (SYSCLKOUT)
  7920F//#define CPU_RATE 20.000L // for a 50MHz CPU clock speed (SYSCLKOUT)
  7921F//#define CPU_RATE 33.333L // for a 30MHz CPU clock speed (SYSCLKOUT)
  7922F//#define CPU_RATE 41.667L // for a 24MHz CPU clock speed (SYSCLKOUT)
  7923F//#define CPU_RATE 50.000L // for a 20MHz CPU clock speed (SYSCLKOUT)
  7924F//#define CPU_RATE 66.667L // for a 15MHz CPU clock speed (SYSCLKOUT)
  7925F//#define CPU_RATE 100.000L // for a 10MHz CPU clock speed (SYSCLKOUT)
  7926F//----------------------------------------------------------------------------
  7927F/*-----------------------------------------------------------------------------
  7928F      Target device (in DSP2833x_Device.h) determines CPU frequency
  7929F      (for examples) - either 150 MHz (for 28335 and 28334) or 100 MHz
  7930F      (for 28332). User does not have to change anything here.
  7931F-----------------------------------------------------------------------------*/
  7932F#define CPU_FRQ_100MHZ 0
  7933F#define CPU_FRQ_150MHZ 1
  7934F//---------------------------------------------------------------------------
  7935F// Include Example Header Files:
  7936F//
  7937F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_GlobalPrototypes.h */
  7938F// TI File $Revision: /main/11 $
  7939F// Checkin $Date: May 12, 2008 14:30:08 $
  7940F//###########################################################################
  7941F//
  7942F// FILE: DSP2833x_GlobalPrototypes.h
  7943F//
  7944F// TITLE: Global prototypes for DSP2833x Examples
  7945F//
  7946F//###########################################################################
  7947F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  7948F// $Release Date: August 4, 2009 $
  7949F//###########################################################################
  7950F#ifndef DSP2833x_GLOBALPROTOTYPES_H
  7951F#define DSP2833x_GLOBALPROTOTYPES_H
  7952F/*---- shared global function prototypes -----------------------------------*/
  7953F
  7954Fextern void
  7955F  InitAdc ( void ) ;
  7956F
  7957Fextern void
  7958F  DMAInitialize ( void ) ;
  7959F// DMA Channel 1
  7960F
  7961Fextern void
  7962T  DMACH1AddrConfig (
  7963F  volatile Uint16 * DMA_Dest ,
  7964F  volatile Uint16 * DMA_Source ) ;
  7965F
  7966Fextern void
  7967T  DMACH1BurstConfig (
  7968F  Uint16 bsize ,
  7969F  int16 srcbstep ,
  7970F  int16 desbstep ) ;
  7971F
  7972Fextern void
  7973T  DMACH1TransferConfig (
  7974F  Uint16 tsize ,
  7975F  int16 srctstep ,
  7976F  int16 deststep ) ;
  7977F
  7978Fextern void
  7979T  DMACH1WrapConfig (
  7980F  Uint16 srcwsize ,
  7981F  int16 srcwstep ,
  7982F  Uint16 deswsize ,
  7983F  int16 deswstep ) ;
  7984F
  7985Fextern void
  7986T  DMACH1ModeConfig (
  7987F  Uint16 persel ,
  7988F  Uint16 perinte ,
  7989F  Uint16 oneshot ,
  7990F  Uint16 cont ,
  7991F  Uint16 synce ,
  7992F  Uint16 syncsel ,
  7993F  Uint16 ovrinte ,
  7994F  Uint16 datasize ,
  7995F  Uint16 chintmode ,
  7996F  Uint16 chinte ) ;
  7997F
  7998Fextern void
  7999F  StartDMACH1 ( void ) ;
  8000F// DMA Channel 2
  8001F
  8002Fextern void
  8003T  DMACH2AddrConfig (
  8004F  volatile Uint16 * DMA_Dest ,
  8005F  volatile Uint16 * DMA_Source ) ;
  8006F
  8007Fextern void
  8008T  DMACH2BurstConfig (
  8009F  Uint16 bsize ,
  8010F  int16 srcbstep ,
  8011F  int16 desbstep ) ;
  8012F
  8013Fextern void
  8014T  DMACH2TransferConfig (
  8015F  Uint16 tsize ,
  8016F  int16 srctstep ,
  8017F  int16 deststep ) ;
  8018F
  8019Fextern void
  8020T  DMACH2WrapConfig (
  8021F  Uint16 srcwsize ,
  8022F  int16 srcwstep ,
  8023F  Uint16 deswsize ,
  8024F  int16 deswstep ) ;
  8025F
  8026Fextern void
  8027T  DMACH2ModeConfig (
  8028F  Uint16 persel ,
  8029F  Uint16 perinte ,
  8030F  Uint16 oneshot ,
  8031F  Uint16 cont ,
  8032F  Uint16 synce ,
  8033F  Uint16 syncsel ,
  8034F  Uint16 ovrinte ,
  8035F  Uint16 datasize ,
  8036F  Uint16 chintmode ,
  8037F  Uint16 chinte ) ;
  8038F
  8039Fextern void
  8040F  StartDMACH2 ( void ) ;
  8041F// DMA Channel 3
  8042F
  8043Fextern void
  8044T  DMACH3AddrConfig (
  8045F  volatile Uint16 * DMA_Dest ,
  8046F  volatile Uint16 * DMA_Source ) ;
  8047F
  8048Fextern void
  8049T  DMACH3BurstConfig (
  8050F  Uint16 bsize ,
  8051F  int16 srcbstep ,
  8052F  int16 desbstep ) ;
  8053F
  8054Fextern void
  8055T  DMACH3TransferConfig (
  8056F  Uint16 tsize ,
  8057F  int16 srctstep ,
  8058F  int16 deststep ) ;
  8059F
  8060Fextern void
  8061T  DMACH3WrapConfig (
  8062F  Uint16 srcwsize ,
  8063F  int16 srcwstep ,
  8064F  Uint16 deswsize ,
  8065F  int16 deswstep ) ;
  8066F
  8067Fextern void
  8068T  DMACH3ModeConfig (
  8069F  Uint16 persel ,
  8070F  Uint16 perinte ,
  8071F  Uint16 oneshot ,
  8072F  Uint16 cont ,
  8073F  Uint16 synce ,
  8074F  Uint16 syncsel ,
  8075F  Uint16 ovrinte ,
  8076F  Uint16 datasize ,
  8077F  Uint16 chintmode ,
  8078F  Uint16 chinte ) ;
  8079F
  8080Fextern void
  8081F  StartDMACH3 ( void ) ;
  8082F// DMA Channel 4
  8083F
  8084Fextern void
  8085T  DMACH4AddrConfig (
  8086F  volatile Uint16 * DMA_Dest ,
  8087F  volatile Uint16 * DMA_Source ) ;
  8088F
  8089Fextern void
  8090T  DMACH4BurstConfig (
  8091F  Uint16 bsize ,
  8092F  int16 srcbstep ,
  8093F  int16 desbstep ) ;
  8094F
  8095Fextern void
  8096T  DMACH4TransferConfig (
  8097F  Uint16 tsize ,
  8098F  int16 srctstep ,
  8099F  int16 deststep ) ;
  8100F
  8101Fextern void
  8102T  DMACH4WrapConfig (
  8103F  Uint16 srcwsize ,
  8104F  int16 srcwstep ,
  8105F  Uint16 deswsize ,
  8106F  int16 deswstep ) ;
  8107F
  8108Fextern void
  8109T  DMACH4ModeConfig (
  8110F  Uint16 persel ,
  8111F  Uint16 perinte ,
  8112F  Uint16 oneshot ,
  8113F  Uint16 cont ,
  8114F  Uint16 synce ,
  8115F  Uint16 syncsel ,
  8116F  Uint16 ovrinte ,
  8117F  Uint16 datasize ,
  8118F  Uint16 chintmode ,
  8119F  Uint16 chinte ) ;
  8120F
  8121Fextern void
  8122F  StartDMACH4 ( void ) ;
  8123F// DMA Channel 5
  8124F
  8125Fextern void
  8126T  DMACH5AddrConfig (
  8127F  volatile Uint16 * DMA_Dest ,
  8128F  volatile Uint16 * DMA_Source ) ;
  8129F
  8130Fextern void
  8131T  DMACH5BurstConfig (
  8132F  Uint16 bsize ,
  8133F  int16 srcbstep ,
  8134F  int16 desbstep ) ;
  8135F
  8136Fextern void
  8137T  DMACH5TransferConfig (
  8138F  Uint16 tsize ,
  8139F  int16 srctstep ,
  8140F  int16 deststep ) ;
  8141F
  8142Fextern void
  8143T  DMACH5WrapConfig (
  8144F  Uint16 srcwsize ,
  8145F  int16 srcwstep ,
  8146F  Uint16 deswsize ,
  8147F  int16 deswstep ) ;
  8148F
  8149Fextern void
  8150T  DMACH5ModeConfig (
  8151F  Uint16 persel ,
  8152F  Uint16 perinte ,
  8153F  Uint16 oneshot ,
  8154F  Uint16 cont ,
  8155F  Uint16 synce ,
  8156F  Uint16 syncsel ,
  8157F  Uint16 ovrinte ,
  8158F  Uint16 datasize ,
  8159F  Uint16 chintmode ,
  8160F  Uint16 chinte ) ;
  8161F
  8162Fextern void
  8163F  StartDMACH5 ( void ) ;
  8164F// DMA Channel 6
  8165F
  8166Fextern void
  8167T  DMACH6AddrConfig (
  8168F  volatile Uint16 * DMA_Dest ,
  8169F  volatile Uint16 * DMA_Source ) ;
  8170F
  8171Fextern void
  8172T  DMACH6BurstConfig (
  8173F  Uint16 bsize ,
  8174F  Uint16 srcbstep ,
  8175F  int16 desbstep ) ;
  8176F
  8177Fextern void
  8178T  DMACH6TransferConfig (
  8179F  Uint16 tsize ,
  8180F  int16 srctstep ,
  8181F  int16 deststep ) ;
  8182F
  8183Fextern void
  8184T  DMACH6WrapConfig (
  8185F  Uint16 srcwsize ,
  8186F  int16 srcwstep ,
  8187F  Uint16 deswsize ,
  8188F  int16 deswstep ) ;
  8189F
  8190Fextern void
  8191T  DMACH6ModeConfig (
  8192F  Uint16 persel ,
  8193F  Uint16 perinte ,
  8194F  Uint16 oneshot ,
  8195F  Uint16 cont ,
  8196F  Uint16 synce ,
  8197F  Uint16 syncsel ,
  8198F  Uint16 ovrinte ,
  8199F  Uint16 datasize ,
  8200F  Uint16 chintmode ,
  8201F  Uint16 chinte ) ;
  8202F
  8203Fextern void
  8204F  StartDMACH6 ( void ) ;
  8205F
  8206Fextern void
  8207F  InitPeripherals ( void ) ;
  8208F
  8209Fextern void
  8210F  InitECan ( void ) ;
  8211F
  8212Fextern void
  8213F  InitECana ( void ) ;
  8214F
  8215Fextern void
  8216F  InitECanGpio ( void ) ;
  8217F
  8218Fextern void
  8219F  InitECanaGpio ( void ) ;
  8220F       // endif DSP28_ECANA
  8221F
  8222Fextern void
  8223F  InitECanb ( void ) ;
  8224F
  8225Fextern void
  8226F  InitECanbGpio ( void ) ;
  8227F       // endif DSP28_ECANB
  8228F
  8229Fextern void
  8230F  InitECap ( void ) ;
  8231F
  8232Fextern void
  8233F  InitECapGpio ( void ) ;
  8234F
  8235Fextern void
  8236F  InitECap1Gpio ( void ) ;
  8237F
  8238Fextern void
  8239F  InitECap2Gpio ( void ) ;
  8240F
  8241Fextern void
  8242F  InitECap3Gpio ( void ) ;
  8243F       // endif DSP28_ECAP3
  8244F
  8245Fextern void
  8246F  InitECap4Gpio ( void ) ;
  8247F       // endif DSP28_ECAP4
  8248F
  8249Fextern void
  8250F  InitECap5Gpio ( void ) ;
  8251F       // endif DSP28_ECAP5
  8252F
  8253Fextern void
  8254F  InitECap6Gpio ( void ) ;
  8255F       // endif DSP28_ECAP6
  8256F
  8257Fextern void
  8258F  InitEPwm ( void ) ;
  8259F
  8260Fextern void
  8261F  InitEPwmGpio ( void ) ;
  8262F
  8263Fextern void
  8264F  InitEPwm1Gpio ( void ) ;
  8265F
  8266Fextern void
  8267F  InitEPwm2Gpio ( void ) ;
  8268F
  8269Fextern void
  8270F  InitEPwm3Gpio ( void ) ;
  8271F
  8272Fextern void
  8273F  InitEPwm4Gpio ( void ) ;
  8274F       // endif DSP28_EPWM4
  8275F
  8276Fextern void
  8277F  InitEPwm5Gpio ( void ) ;
  8278F       // endif DSP28_EPWM5
  8279F
  8280Fextern void
  8281F  InitEPwm6Gpio ( void ) ;
  8282F       // endif DSP28_EPWM6
  8283F
  8284Fextern void
  8285F  InitEQep ( void ) ;
  8286F
  8287Fextern void
  8288F  InitEQepGpio ( void ) ;
  8289F
  8290Fextern void
  8291F  InitEQep1Gpio ( void ) ;
  8292F       // if DSP28_EQEP1
  8293F
  8294Fextern void
  8295F  InitEQep2Gpio ( void ) ;
  8296F       // endif DSP28_EQEP2
  8297F
  8298Fextern void
  8299F  InitGpio ( void ) ;
  8300F
  8301Fextern void
  8302F  InitI2CGpio ( void ) ;
  8303F
  8304Fextern void
  8305F  InitMcbsp ( void ) ;
  8306F
  8307Fextern void
  8308F  InitMcbspa ( void ) ;
  8309F
  8310Fextern void
  8311F  delay_loop ( void ) ;
  8312F
  8313Fextern void
  8314F  InitMcbspaGpio ( void ) ;
  8315F
  8316Fextern void
  8317F  InitMcbspa8bit ( void ) ;
  8318F
  8319Fextern void
  8320F  InitMcbspa12bit ( void ) ;
  8321F
  8322Fextern void
  8323F  InitMcbspa16bit ( void ) ;
  8324F
  8325Fextern void
  8326F  InitMcbspa20bit ( void ) ;
  8327F
  8328Fextern void
  8329F  InitMcbspa24bit ( void ) ;
  8330F
  8331Fextern void
  8332F  InitMcbspa32bit ( void ) ;
  8333F
  8334Fextern void
  8335F  InitMcbspb ( void ) ;
  8336F
  8337Fextern void
  8338F  InitMcbspbGpio ( void ) ;
  8339F
  8340Fextern void
  8341F  InitMcbspb8bit ( void ) ;
  8342F
  8343Fextern void
  8344F  InitMcbspb12bit ( void ) ;
  8345F
  8346Fextern void
  8347F  InitMcbspb16bit ( void ) ;
  8348F
  8349Fextern void
  8350F  InitMcbspb20bit ( void ) ;
  8351F
  8352Fextern void
  8353F  InitMcbspb24bit ( void ) ;
  8354F
  8355Fextern void
  8356F  InitMcbspb32bit ( void ) ;
  8357F       // endif DSP28_MCBSPB
  8358F
  8359Fextern void
  8360F  InitPieCtrl ( void ) ;
  8361F
  8362Fextern void
  8363F  InitPieVectTable ( void ) ;
  8364F
  8365Fextern void
  8366F  InitSci ( void ) ;
  8367F
  8368Fextern void
  8369F  InitSciGpio ( void ) ;
  8370F
  8371Fextern void
  8372F  InitSciaGpio ( void ) ;
  8373F
  8374Fextern void
  8375F  InitScibGpio ( void ) ;
  8376F       // endif DSP28_SCIB
  8377F
  8378Fextern void
  8379F  InitScicGpio ( void ) ;
  8380F
  8381Fextern void
  8382F  InitSpi ( void ) ;
  8383F
  8384Fextern void
  8385F  InitSpiGpio ( void ) ;
  8386F
  8387Fextern void
  8388F  InitSpiaGpio ( void ) ;
  8389F
  8390Fextern void
  8391F  InitSysCtrl ( void ) ;
  8392F
  8393Fextern void
  8394F  InitTzGpio ( void ) ;
  8395F
  8396Fextern void
  8397F  InitXIntrupt ( void ) ;
  8398F
  8399Fextern void
  8400F  XintfInit ( void ) ;
  8401F
  8402Fextern void
  8403F  InitXintf16Gpio() ;
  8404F
  8405Fextern void
  8406F  InitXintf32Gpio() ;
  8407F
  8408Fextern void
  8409T  InitPll (
  8410F  Uint16 pllcr ,
  8411F  Uint16 clkindiv ) ;
  8412F
  8413Fextern void
  8414F  InitPeripheralClocks ( void ) ;
  8415F
  8416Fextern void
  8417F  EnableInterrupts ( void ) ;
  8418F
  8419Fextern void
  8420T  DSP28x_usDelay (
  8421F  Uint32 Count ) ;
  8422F
  8423Fextern void
  8424F  ADC_cal ( void ) ;
  8425F#define KickDog ServiceDog
  8426F
  8427Fextern void
  8428F  ServiceDog ( void ) ;
  8429F
  8430Fextern void
  8431F  DisableDog ( void ) ;
  8432F
  8433Fextern Uint16
  8434F  CsmUnlock ( void ) ;
  8435F// DSP28_DBGIER.asm
  8436F
  8437Fextern void
  8438T  SetDBGIER (
  8439F  Uint16 dbgier ) ;
  8440F// CAUTION
  8441F// This function MUST be executed out of RAM. Executing it
  8442F// out of OTP/Flash will yield unpredictable results
  8443F
  8444Fextern void
  8445F  InitFlash ( void ) ;
  8446F
  8447Fvoid
  8448T  MemCopy (
  8449F  Uint16 * SourceAddr ,
  8450F  Uint16 * SourceEndAddr ,
  8451F  Uint16 * DestAddr ) ;
  8452F//---------------------------------------------------------------------------
  8453F// External symbols created by the linker cmd file
  8454F// DSP28 examples will use these to relocate code from one LOAD location
  8455F// in either Flash or XINTF to a different RUN location in internal
  8456F// RAM
  8457F
  8458Fextern Uint16
  8459F  RamfuncsLoadStart ;
  8460F
  8461Fextern Uint16
  8462F  RamfuncsLoadEnd ;
  8463F
  8464Fextern Uint16
  8465F  RamfuncsRunStart ;
  8466F
  8467Fextern Uint16
  8468F  XintffuncsLoadStart ;
  8469F
  8470Fextern Uint16
  8471F  XintffuncsLoadEnd ;
  8472F
  8473Fextern Uint16
  8474F  XintffuncsRunStart ;
  8475F       /* extern "C" */
  8476F       // - end of DSP2833x_GLOBALPROTOTYPES_H
  8477F//===========================================================================
  8478F// End of file.
  8479F//===========================================================================
  8480F 
  8481F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_GlobalPrototypes.h*/
  8482F/*   CLOSE_FILE Include File */
  8483F 
  8484F         // Prototypes for global functions within the
  8485F                                              // .c files.
  8486F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ePwm_defines.h */
  8487F// TI File $Revision: /main/1 $
  8488F// Checkin $Date: August 18, 2006 13:45:39 $
  8489F//###########################################################################
  8490F//
  8491F// FILE: DSP2833x_EPwm_defines.h
  8492F//
  8493F// TITLE: #defines used in ePWM examples examples
  8494F//
  8495F//###########################################################################
  8496F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  8497F// $Release Date: August 4, 2009 $
  8498F//###########################################################################
  8499F#ifndef DSP2833x_EPWM_DEFINES_H
  8500F#define DSP2833x_EPWM_DEFINES_H
  8501F// TBCTL (Time-Base Control)
  8502F//==========================
  8503F// CTRMODE bits
  8504F#define TB_COUNT_UP 0x0
  8505F#define TB_COUNT_DOWN 0x1
  8506F#define TB_COUNT_UPDOWN 0x2
  8507F#define TB_FREEZE 0x3
  8508F// PHSEN bit
  8509F#define TB_DISABLE 0x0
  8510F#define TB_ENABLE 0x1
  8511F// PRDLD bit
  8512F#define TB_SHADOW 0x0
  8513F#define TB_IMMEDIATE 0x1
  8514F// SYNCOSEL bits
  8515F#define TB_SYNC_IN 0x0
  8516F#define TB_CTR_ZERO 0x1
  8517F#define TB_CTR_CMPB 0x2
  8518F#define TB_SYNC_DISABLE 0x3
  8519F// HSPCLKDIV and CLKDIV bits
  8520F#define TB_DIV1 0x0
  8521F#define TB_DIV2 0x1
  8522F#define TB_DIV4 0x2
  8523F// PHSDIR bit
  8524F#define TB_DOWN 0x0
  8525F#define TB_UP 0x1
  8526F// CMPCTL (Compare Control)
  8527F//==========================
  8528F// LOADAMODE and LOADBMODE bits
  8529F#define CC_CTR_ZERO 0x0
  8530F#define CC_CTR_PRD 0x1
  8531F#define CC_CTR_ZERO_PRD 0x2
  8532F#define CC_LD_DISABLE 0x3
  8533F// SHDWAMODE and SHDWBMODE bits
  8534F#define CC_SHADOW 0x0
  8535F#define CC_IMMEDIATE 0x1
  8536F// AQCTLA and AQCTLB (Action Qualifier Control)
  8537F//=============================================
  8538F// ZRO, PRD, CAU, CAD, CBU, CBD bits
  8539F#define AQ_NO_ACTION 0x0
  8540F#define AQ_CLEAR 0x1
  8541F#define AQ_SET 0x2
  8542F#define AQ_TOGGLE 0x3
  8543F// DBCTL (Dead-Band Control)
  8544F//==========================
  8545F// OUT MODE bits
  8546F#define DB_DISABLE 0x0
  8547F#define DBA_ENABLE 0x1
  8548F#define DBB_ENABLE 0x2
  8549F#define DB_FULL_ENABLE 0x3
  8550F// POLSEL bits
  8551F#define DB_ACTV_HI 0x0
  8552F#define DB_ACTV_LOC 0x1
  8553F#define DB_ACTV_HIC 0x2
  8554F#define DB_ACTV_LO 0x3
  8555F// IN MODE
  8556F#define DBA_ALL 0x0
  8557F#define DBB_RED_DBA_FED 0x1
  8558F#define DBA_RED_DBB_FED 0x2
  8559F#define DBB_ALL 0x3
  8560F// CHPCTL (chopper control)
  8561F//==========================
  8562F// CHPEN bit
  8563F#define CHP_DISABLE 0x0
  8564F#define CHP_ENABLE 0x1
  8565F// CHPFREQ bits
  8566F#define CHP_DIV1 0x0
  8567F#define CHP_DIV2 0x1
  8568F#define CHP_DIV3 0x2
  8569F#define CHP_DIV4 0x3
  8570F#define CHP_DIV5 0x4
  8571F#define CHP_DIV6 0x5
  8572F#define CHP_DIV7 0x6
  8573F#define CHP_DIV8 0x7
  8574F// CHPDUTY bits
  8575F#define CHP1_8TH 0x0
  8576F#define CHP2_8TH 0x1
  8577F#define CHP3_8TH 0x2
  8578F#define CHP4_8TH 0x3
  8579F#define CHP5_8TH 0x4
  8580F#define CHP6_8TH 0x5
  8581F#define CHP7_8TH 0x6
  8582F// TZSEL (Trip Zone Select)
  8583F//==========================
  8584F// CBCn and OSHTn bits
  8585F#define TZ_DISABLE 0x0
  8586F#define TZ_ENABLE 0x1
  8587F// TZCTL (Trip Zone Control)
  8588F//==========================
  8589F// TZA and TZB bits
  8590F#define TZ_HIZ 0x0
  8591F#define TZ_FORCE_HI 0x1
  8592F#define TZ_FORCE_LO 0x2
  8593F#define TZ_NO_CHANGE 0x3
  8594F// ETSEL (Event Trigger Select)
  8595F//=============================
  8596F#define ET_CTR_ZERO 0x1
  8597F#define ET_CTR_PRD 0x2
  8598F#define ET_CTRU_CMPA 0x4
  8599F#define ET_CTRD_CMPA 0x5
  8600F#define ET_CTRU_CMPB 0x6
  8601F#define ET_CTRD_CMPB 0x7
  8602F// ETPS (Event Trigger Pre-scale)
  8603F//===============================
  8604F// INTPRD, SOCAPRD, SOCBPRD bits
  8605F#define ET_DISABLE 0x0
  8606F#define ET_1ST 0x1
  8607F#define ET_2ND 0x2
  8608F#define ET_3RD 0x3
  8609F//--------------------------------
  8610F// HRPWM (High Resolution PWM)
  8611F//================================
  8612F// HRCNFG
  8613F#define HR_Disable 0x0
  8614F#define HR_REP 0x1
  8615F#define HR_FEP 0x2
  8616F#define HR_BEP 0x3
  8617F#define HR_CMP 0x0
  8618F#define HR_PHS 0x1
  8619F#define HR_CTR_ZERO 0x0
  8620F#define HR_CTR_PRD 0x1
  8621F       /* extern "C" */
  8622F       // - end of DSP2833x_EPWM_DEFINES_H
  8623F//===========================================================================
  8624F// End of file.
  8625F//===========================================================================
  8626F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_ePwm_defines.h*/
  8627F/*   CLOSE_FILE Include File */
  8628F 
  8629F             // Macros used for PWM examples.
  8630F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Dma_defines.h */
  8631F// TI File $Revision: /main/2 $
  8632F// Checkin $Date: August 14, 2007 16:32:29 $
  8633F//###########################################################################
  8634F//
  8635F// FILE: DSP2833x_Dma_defines.h
  8636F//
  8637F// TITLE: #defines used in DMA examples
  8638F//
  8639F//###########################################################################
  8640F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  8641F// $Release Date: August 4, 2009 $
  8642F//###########################################################################
  8643F#ifndef DSP2833x_DMA_DEFINES_H
  8644F#define DSP2833x_DMA_DEFINES_H
  8645F// MODE
  8646F//==========================
  8647F// PERINTSEL bits
  8648F#define DMA_SEQ1INT 1
  8649F#define DMA_SEQ2INT 2
  8650F#define DMA_XINT1 3
  8651F#define DMA_XINT2 4
  8652F#define DMA_XINT3 5
  8653F#define DMA_XINT4 6
  8654F#define DMA_XINT5 7
  8655F#define DMA_XINT6 8
  8656F#define DMA_XINT7 9
  8657F#define DMA_XINT13 10
  8658F#define DMA_TINT0 11
  8659F#define DMA_TINT1 12
  8660F#define DMA_TINT2 13
  8661F#define DMA_MXEVTA 14
  8662F#define DMA_MREVTA 15
  8663F#define DMA_MXREVTB 16
  8664F#define DMA_MREVTB 17
  8665F// OVERINTE bit
  8666F#define OVRFLOW_DISABLE 0x0
  8667F#define OVEFLOW_ENABLE 0x1
  8668F// PERINTE bit
  8669F#define PERINT_DISABLE 0x0
  8670F#define PERINT_ENABLE 0x1
  8671F// CHINTMODE bits
  8672F#define CHINT_BEGIN 0x0
  8673F#define CHINT_END 0x1
  8674F// ONESHOT bits
  8675F#define ONESHOT_DISABLE 0x0
  8676F#define ONESHOT_ENABLE 0x1
  8677F// CONTINOUS bit
  8678F#define CONT_DISABLE 0x0
  8679F#define CONT_ENABLE 0x1
  8680F// SYNCE bit
  8681F#define SYNC_DISABLE 0x0
  8682F#define SYNC_ENABLE 0x1
  8683F// SYNCSEL bit
  8684F#define SYNC_SRC 0x0
  8685F#define SYNC_DST 0x1
  8686F// DATASIZE bit
  8687F#define SIXTEEN_BIT 0x0
  8688F#define THIRTYTWO_BIT 0x1
  8689F// CHINTE bit
  8690F#define CHINT_DISABLE 0x0
  8691F#define CHINT_ENABLE 0x1
  8692F       /* extern "C" */
  8693F       // - end of DSP2833x_EPWM_DEFINES_H
  8694F//===========================================================================
  8695F// End of file.
  8696F//===========================================================================
  8697F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Dma_defines.h*/
  8698F/*   CLOSE_FILE Include File */
  8699F 
  8700F              // Macros used for DMA examples.
  8701F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_I2C_defines.h */
  8702F// TI File $Revision: /main/2 $
  8703F// Checkin $Date: April 16, 2008 17:16:47 $
  8704F//###########################################################################
  8705F//
  8706F// FILE:        DSP2833x_I2cExample.h
  8707F//
  8708F// TITLE:       2833x I2C Example Code Definitions.
  8709F//
  8710F//###########################################################################
  8711F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  8712F// $Release Date: August 4, 2009 $
  8713F//###########################################################################
  8714F#ifndef DSP2833x_I2C_DEFINES_H
  8715F#define DSP2833x_I2C_DEFINES_H
  8716F//--------------------------------------------
  8717F// Defines
  8718F//--------------------------------------------
  8719F// Error Messages
  8720F#define I2C_ERROR 0xFFFF
  8721F#define I2C_ARB_LOST_ERROR 0x0001
  8722F#define I2C_NACK_ERROR 0x0002
  8723F#define I2C_BUS_BUSY_ERROR 0x1000
  8724F#define I2C_STP_NOT_READY_ERROR 0x5555
  8725F#define I2C_NO_FLAGS 0xAAAA
  8726F#define I2C_SUCCESS 0x0000
  8727F// Clear Status Flags
  8728F#define I2C_CLR_AL_BIT 0x0001
  8729F#define I2C_CLR_NACK_BIT 0x0002
  8730F#define I2C_CLR_ARDY_BIT 0x0004
  8731F#define I2C_CLR_RRDY_BIT 0x0008
  8732F#define I2C_CLR_SCD_BIT 0x0020
  8733F// Interrupt Source Messages
  8734F#define I2C_NO_ISRC 0x0000
  8735F#define I2C_ARB_ISRC 0x0001
  8736F#define I2C_NACK_ISRC 0x0002
  8737F#define I2C_ARDY_ISRC 0x0003
  8738F#define I2C_RX_ISRC 0x0004
  8739F#define I2C_TX_ISRC 0x0005
  8740F#define I2C_SCD_ISRC 0x0006
  8741F#define I2C_AAS_ISRC 0x0007
  8742F// I2CMSG structure defines
  8743F#define I2C_NO_STOP 0
  8744F#define I2C_YES_STOP 1
  8745F#define I2C_RECEIVE 0
  8746F#define I2C_TRANSMIT 1
  8747F#define I2C_MAX_BUFFER_SIZE 16
  8748F// I2C Slave State defines
  8749F#define I2C_NOTSLAVE 0
  8750F#define I2C_ADDR_AS_SLAVE 1
  8751F#define I2C_ST_MSG_READY 2
  8752F// I2C Slave Receiver messages defines
  8753F#define I2C_SND_MSG1 1
  8754F#define I2C_SND_MSG2 2
  8755F// I2C State defines
  8756F#define I2C_IDLE 0
  8757F#define I2C_SLAVE_RECEIVER 1
  8758F#define I2C_SLAVE_TRANSMITTER 2
  8759F#define I2C_MASTER_RECEIVER 3
  8760F#define I2C_MASTER_TRANSMITTER 4
  8761F// I2C Message Commands for I2CMSG struct
  8762F#define I2C_MSGSTAT_INACTIVE 0x0000
  8763F#define I2C_MSGSTAT_SEND_WITHSTOP 0x0010
  8764F#define I2C_MSGSTAT_WRITE_BUSY 0x0011
  8765F#define I2C_MSGSTAT_SEND_NOSTOP 0x0020
  8766F#define I2C_MSGSTAT_SEND_NOSTOP_BUSY 0x0021
  8767F#define I2C_MSGSTAT_RESTART 0x0022
  8768F#define I2C_MSGSTAT_READ_BUSY 0x0023
  8769F// Generic defines
  8770F#define I2C_TRUE 1
  8771F#define I2C_FALSE 0
  8772F#define I2C_YES 1
  8773F#define I2C_NO 0
  8774F#define I2C_DUMMY_BYTE 0
  8775F//--------------------------------------------
  8776F// Structures
  8777F//--------------------------------------------
  8778F// I2C Message Structure
  8779F
  8780Fstruct I2CMSG
  8781F{
  8782F  Uint16 MsgStatus ;
  8783F                         // Word stating what state msg is in:
  8784F               // I2C_MSGCMD_INACTIVE = do not send msg
  8785F               // I2C_MSGCMD_BUSY = msg start has been sent,
  8786F               // awaiting stop
  8787F               // I2C_MSGCMD_SEND_WITHSTOP = command to send
  8788F               // master trans msg complete with a stop bit
  8789F               // I2C_MSGCMD_SEND_NOSTOP = command to send
  8790F               // master trans msg without the stop bit
  8791F               // I2C_MSGCMD_RESTART = command to send a restart
  8792F               // as a master receiver with a stop bit
  8793F  Uint16 SlaveAddress ;  // I2C address of slave msg is intended for
  8794F  Uint16 NumOfBytes ;    // Num of valid bytes in (or to be put in MsgBuffer)
  8795F  Uint16 MemoryHighAddr ;        // EEPROM address of data associated with msg (high byte)
  8796F  Uint16 MemoryLowAddr ; // EEPROM address of data associated with msg (low byte)
  8797F  Uint16 MsgBuffer [ 16 ] ;
  8798F                                                // Array holding msg data - max that
  8799F                     // MAX_BUFFER_SIZE can be is 16 due to
  8800F                     // the FIFO's
  8801F} ;
  8802F       // end of DSP2833x_I2C_DEFINES_H definition
  8803F//===========================================================================
  8804F// End of file.
  8805F//===========================================================================
  8806F 
  8807F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_I2C_defines.h*/
  8808F/*   CLOSE_FILE Include File */
  8809F 
  8810F              // Macros used for I2C examples.
  8811F#define PARTNO_28335 0xEF
  8812F#define PARTNO_28334 0xEE
  8813F#define PARTNO_28332 0xED
  8814F#define PARTNO_28235 0xE8
  8815F#define PARTNO_28234 0xE7
  8816F#define PARTNO_28232 0xE6
  8817F// Include files not used with DSP/BIOS
  8818F/* OPEN FILE F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DefaultISR.h */
  8819F// TI File $Revision: /main/1 $
  8820F// Checkin $Date: August 18, 2006 13:45:37 $
  8821F//###########################################################################
  8822F//
  8823F// FILE: DSP2833x_DefaultIsr.h
  8824F//
  8825F// TITLE: DSP2833x Devices Default Interrupt Service Routines Definitions.
  8826F//
  8827F//###########################################################################
  8828F// $TI Release: DSP2833x/DSP2823x C/C++ Header Files V1.31 $
  8829F// $Release Date: August 4, 2009 $
  8830F//###########################################################################
  8831F#ifndef DSP2833x_DEFAULT_ISR_H
  8832F#define DSP2833x_DEFAULT_ISR_H
  8833F//---------------------------------------------------------------------------
  8834F// Default Interrupt Service Routine Declarations:
  8835F//
  8836F// The following function prototypes are for the
  8837F// default ISR routines used with the default PIE vector table.
  8838F// This default vector table is found in the DSP2833x_PieVect.h
  8839F// file.
  8840F//
  8841F// Non-Peripheral Interrupts:
  8842F
  8843Finterrupt void
  8844F  INT13_ISR ( void ) ;          // XINT13 or CPU-Timer 1
  8845T  interrupt void
  8846F  INT14_ISR ( void ) ;          // CPU-Timer2
  8847T  interrupt void
  8848F  DATALOG_ISR ( void ) ;          // Datalogging interrupt
  8849T  interrupt void
  8850F  RTOSINT_ISR ( void ) ;          // RTOS interrupt
  8851T  interrupt void
  8852F  EMUINT_ISR ( void ) ;          // Emulation interrupt
  8853T  interrupt void
  8854F  NMI_ISR ( void ) ;          // Non-maskable interrupt
  8855T  interrupt void
  8856F  ILLEGAL_ISR ( void ) ;          // Illegal operation TRAP
  8857F// Group 1 PIE Interrupt Service Routines:
  8858T  interrupt void
  8859F  SEQ1INT_ISR ( void ) ;          // ADC Sequencer 1 ISR
  8860T  interrupt void
  8861F  SEQ2INT_ISR ( void ) ;          // ADC Sequencer 2 ISR
  8862T  interrupt void
  8863F  XINT1_ISR ( void ) ;          // External interrupt 1
  8864T  interrupt void
  8865F  XINT2_ISR ( void ) ;          // External interrupt 2
  8866T  interrupt void
  8867F  ADCINT_ISR ( void ) ;          // ADC
  8868T  interrupt void
  8869F  TINT0_ISR ( void ) ;          // Timer 0
  8870T  interrupt void
  8871F  WAKEINT_ISR ( void ) ;          // WD
  8872F// Group 6 PIE Interrupt Service Routines:
  8873T  interrupt void
  8874F  SPIRXINTA_ISR ( void ) ;          // SPI-A
  8875T  interrupt void
  8876F  SPITXINTA_ISR ( void ) ;          // SPI-A
  8877T  interrupt void
  8878F  MRINTA_ISR ( void ) ;          // McBSP-A
  8879T  interrupt void
  8880F  MXINTA_ISR ( void ) ;          // McBSP-A
  8881T  interrupt void
  8882F  MRINTB_ISR ( void ) ;          // McBSP-B
  8883T  interrupt void
  8884F  MXINTB_ISR ( void ) ;          // McBSP-B
  8885F// Group 7 PIE Interrupt Service Routines:
  8886T  interrupt void
  8887F  DINTCH1_ISR ( void ) ;          // DMA-Channel 1
  8888T  interrupt void
  8889F  DINTCH2_ISR ( void ) ;          // DMA-Channel 2
  8890T  interrupt void
  8891F  DINTCH3_ISR ( void ) ;          // DMA-Channel 3
  8892T  interrupt void
  8893F  DINTCH4_ISR ( void ) ;          // DMA-Channel 4
  8894T  interrupt void
  8895F  DINTCH5_ISR ( void ) ;          // DMA-Channel 5
  8896T  interrupt void
  8897F  DINTCH6_ISR ( void ) ;          // DMA-Channel 6
  8898F// Group 8 PIE Interrupt Service Routines:
  8899T  interrupt void
  8900F  I2CINT1A_ISR ( void ) ;          // I2C-A
  8901T  interrupt void
  8902F  I2CINT2A_ISR ( void ) ;          // I2C-A
  8903T  interrupt void
  8904F  SCIRXINTC_ISR ( void ) ;          // SCI-C
  8905T  interrupt void
  8906F  SCITXINTC_ISR ( void ) ;          // SCI-C
  8907F// Group 9 PIE Interrupt Service Routines:
  8908T  interrupt void
  8909F  SCIRXINTA_ISR ( void ) ;          // SCI-A
  8910T  interrupt void
  8911F  SCITXINTA_ISR ( void ) ;          // SCI-A
  8912T  interrupt void
  8913F  SCIRXINTB_ISR ( void ) ;          // SCI-B
  8914T  interrupt void
  8915F  SCITXINTB_ISR ( void ) ;          // SCI-B
  8916T  interrupt void
  8917F  ECAN0INTA_ISR ( void ) ;          // eCAN-A
  8918T  interrupt void
  8919F  ECAN1INTA_ISR ( void ) ;          // eCAN-A
  8920T  interrupt void
  8921F  ECAN0INTB_ISR ( void ) ;          // eCAN-B
  8922T  interrupt void
  8923F  ECAN1INTB_ISR ( void ) ;
  8924F                                    // eCAN-B
  8925F// Group 10 PIE Interrupt Service Routines:
  8926F// Group 11 PIE Interrupt Service Routines:
  8927F// Group 12 PIE Interrupt Service Routines:
  8928T  interrupt void
  8929F  XINT3_ISR ( void ) ;          // External interrupt 3
  8930T  interrupt void
  8931F  XINT4_ISR ( void ) ;          // External interrupt 4
  8932T  interrupt void
  8933F  XINT5_ISR ( void ) ;          // External interrupt 5
  8934T  interrupt void
  8935F  XINT6_ISR ( void ) ;          // External interrupt 6
  8936T  interrupt void
  8937F  XINT7_ISR ( void ) ;          // External interrupt 7
  8938T  interrupt void
  8939F  LVF_ISR ( void ) ;          // Latched overflow flag
  8940T  interrupt void
  8941F  LUF_ISR ( void ) ;          // Latched underflow flag
  8942F// Catch-all for Reserved Locations For testing purposes:
  8943T  interrupt void
  8944F  PIE_RESERVED ( void ) ;          // Reserved for test
  8945T  interrupt void
  8946F  rsvd_ISR ( void ) ;          // for test
  8947T  interrupt void
  8948F  INT_NOTUSED_ISR ( void ) ;
  8949F                                      // for unused interrupts
  8950F       /* extern "C" */
  8951F       // end of DSP2833x_DEFAULT_ISR_H definition
  8952F//===========================================================================
  8953F// End of file.
  8954F//===========================================================================
  8955F 
  8956F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_DefaultISR.h*/
  8957F/*   CLOSE_FILE Include File */
  8958F 
  8959F// DO NOT MODIFY THIS LINE.
  8960F#define DELAY_US( A ) DSP28x_usDelay ( ( ( ( ( long double ) A * 1000.0L ) / ( long double ) CPU_RATE ) - 9.0L ) / 5.0L )
  8961F       /* extern "C" */
  8962F       // end of DSP2833x_EXAMPLES_H definition
  8963F//===========================================================================
  8964F// End of file.
  8965F//===========================================================================
  8966F#endif /*00 F:\Dropbox\Profissional\Konatus\Codes\F28335_Example\inc\DSP2833x_Examples.h*/
  8967F/*   CLOSE_FILE Include File */
  8968F 
  8969F/* LDRA REMOVE #include "DSP2833x_Device.h" */
  8970F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_sensorhead_types.h */
  8971F//############################################################################
  8972F//
  8973F// File:         dsp_sensorhead_types.h
  8974F// Version:      0.1
  8975F//
  8976F// Description: Structure and variable definitions.
  8977F//
  8978F//############################################################################
  8979F// Author: Rogério Lima
  8980F// Release Date: July 2012
  8981F//############################################################################
  8982F#ifndef DSP_SENSORHEAD_TYPES_H
  8983F#define DSP_SENSORHEAD_TYPES_H
  8984F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_types.h */
  8985F//############################################################################
  8986F//
  8987F// File:         dsp_types.h
  8988F// Version:      0.1
  8989F//
  8990F// Description: Structure and variable definitions.
  8991F//
  8992F//############################################################################
  8993F// Author: Rogério Lima
  8994F// Release Date: July 2012
  8995F//############################################################################
  8996F#ifndef DSP_TYPES_H
  8997F#define DSP_TYPES_H
  8998F/* These definitions might not be 8-bit wide */
  8999F
  9000Ftypedef
  9001Fsigned char
  9002F  int8_t ;
  9003F
  9004Ftypedef
  9005Funsigned char
  9006F  uint8_t ;
  9007F  /* 7.18.1.1 Exact-width integer types */
  9008F
  9009Ftypedef
  9010Fshort
  9011F  int16_t ;
  9012F
  9013Ftypedef
  9014Funsigned short
  9015F  uint16_t ;
  9016F
  9017Ftypedef
  9018Flong
  9019F  int32_t ;
  9020F
  9021Ftypedef
  9022Funsigned long
  9023F  uint32_t ;
  9024F       /* DSP_TYPES_H */
  9025F 
  9026F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_types.h*/
  9027F/*   CLOSE_FILE Include File */
  9028F 
  9029F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_quat.h */
  9030F//############################################################################
  9031F//
  9032F// File:         EKF_Quat.h
  9033F// Version:      0.1
  9034F//
  9035F// Description: Preprocessor definitions and function declarations for quater-
  9036F//       nion calculations.
  9037F//
  9038F//############################################################################
  9039F// Author: Rogério Lima
  9040F// Release Date: July 2012
  9041F//############################################################################
  9042F#ifndef __EKF_quat_h
  9043F#define __EKF_quat_h
  9044F
  9045Ftypedef
  9046Fstruct _quat
  9047F{
  9048F  float a ,
  9049F  b ,
  9050F  c ,
  9051F  d ;
  9052F} quat ;
  9053F
  9054Fint16_t
  9055T  quat_mult (
  9056F  quat * src1 ,
  9057F  quat * src2 ,
  9058F  quat * dest ) ;
  9059F
  9060Fint16_t
  9061T  quat_conj (
  9062F  quat * src ,
  9063F  quat * dest ) ;
  9064F
  9065Fint16_t
  9066T  quat_norm (
  9067F  quat * src ) ;
  9068F
  9069Fint16_t
  9070T  quat_add (
  9071F  quat * src1 ,
  9072F  quat * src2 ,
  9073F  quat * dest ) ;
  9074F
  9075Fint16_t
  9076T  quat_subtract (
  9077F  quat * src1 ,
  9078F  quat * src2 ,
  9079F  quat * dest ) ;
  9080F
  9081Fint16_t
  9082T  quat_scalar_mult (
  9083F  quat * qsrc ,
  9084F  float scalar ,
  9085F  quat * dest ) ;
  9086F 
  9087F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_quat.h*/
  9088F/*   CLOSE_FILE Include File */
  9089F 
  9090F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_matrix.h */
  9091F//############################################################################
  9092F//
  9093F// File: dsp_matrix.h
  9094F// Version: 0.1
  9095F//
  9096F// Description: Preprocessor definitions and function declarations for matrix
  9097F// calculations.
  9098F//
  9099F//############################################################################
  9100F// Author: Rogério Lima
  9101F// Release Date: July 2012
  9102F//############################################################################
  9103F#ifndef DSP_MATRIX_H
  9104F#define DSP_MATRIX_H
  9105F#define MATRIX_MAX_ROWS 12
  9106F#define MATRIX_MAX_COLUMNS 12
  9107F
  9108Ftypedef
  9109Fstruct _fMatrix
  9110F{
  9111F  int rows ;
  9112F  int columns ;
  9113F  float data [ 12 ] [ 12 ] ;
  9114F} fMatrix ;
  9115F// Matrix operations
  9116F
  9117Fint
  9118T  mat_add (
  9119F  fMatrix * src1 ,
  9120F  fMatrix * src2 ,
  9121F  fMatrix * dest ) ;
  9122F
  9123Fint
  9124T  mat_mult (
  9125F  fMatrix * src1 ,
  9126F  fMatrix * src2 ,
  9127F  fMatrix * dest ) ;
  9128F
  9129Fint
  9130T  mat_scalar_mult (
  9131F  float scalar ,
  9132F  fMatrix * src ,
  9133F  fMatrix * dest ) ;
  9134F
  9135Fint
  9136T  mat_determinant (
  9137F  fMatrix * src ,
  9138F  float * det ) ;
  9139F
  9140Fint
  9141T  mat_transpose (
  9142F  fMatrix * src ,
  9143F  fMatrix * dest ) ;
  9144F
  9145Fint
  9146T  mat_create_identity (
  9147F  fMatrix * dest ,
  9148F  int rows ,
  9149F  int columns ) ;
  9150F
  9151Fint
  9152T  mat_zero (
  9153F  fMatrix * dest ,
  9154F  int rows ,
  9155F  int columns ) ;
  9156F
  9157Fint
  9158T  mat_copy (
  9159F  fMatrix * src ,
  9160F  fMatrix * dest ) ;
  9161F//int mat_print( fMatrix* matrix );
  9162F//void hexPrint16( short byte );
  9163F 
  9164F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_matrix.h*/
  9165F/*   CLOSE_FILE Include File */
  9166F 
  9167F#define SUCCESS ( 1 == 1 )
  9168F#define FAIL ( 0 == 1 )
  9169F#define MAG_UPDATE 0
  9170F#define ACCEL_UPDATE 1
  9171F         // Original values
  9172F#define ACCEL_VARIANCE 223.59E-4f
  9173F#define GYRO_VARIANCE 68.81E-5f
  9174F#define GYRO_BIAS_VARIANCE 201.93E-3f
  9175F#define MAGNETO_VARIANCE 48.12E-5f
  9176F#define GPS_VARIANCE 1.6E-3f
  9177F#define QUATERNION_NORM_VARIANCE 1.0E-9f
  9178F#define ACCEL_SCALE_FACTOR 0.03830859375f
  9179F#define GYRO_SCALE_FACTOR_DEG 0.06956521739f
  9180F#define GYRO_SCALE_FACTOR_RAD 0.00121414208f
  9181F#define MAG_SCALE_FACTOR 0.00151515151f
  9182F#define RAD2DEG 57.2957795130f
  9183F#define DEG2RAD 0.01745329251f
  9184F#define KM2M 0.27777777778f
  9185F//#define       ABS_PRESSURE_SCALE_FACTOR // -> Transfer function
  9186F//#define       DIFF_PRESSURE_SCALE_FACTOR // -> Transfer function
  9187F/* Structure for holding raw sensor data */
  9188F
  9189Ftypedef
  9190Fstruct sensor_data_raw
  9191F{
  9192F  int16_t gyro_x ;
  9193F  int16_t gyro_y ;
  9194F  int16_t gyro_z ;
  9195F  int16_t new_gyro_data ;
  9196F  int16_t accel_x ;
  9197F  int16_t accel_y ;
  9198F  int16_t accel_z ;
  9199F        // Flag specifies whether there is new accel data in the sensor data structure
  9200F  int16_t new_accel_data ;
  9201F  int16_t mag_x ;
  9202F  int16_t mag_y ;
  9203F  int16_t mag_z ;
  9204F        // Flag specifies whether there is new magnetometer data in the sensor data structure
  9205F  int16_t new_mag_data ;
  9206F        // Rate gyro temperature measurement
  9207F  int16_t gyro_temperature ;
  9208F  int32_t abs_pressure ;
  9209F  int16_t new_abs_pressure_data ;
  9210F  int16_t diff_pressure ;
  9211F  int16_t new_diff_pressure_data ;
  9212F} sensor_data_raw_t ;
  9213F/* Structure for holding scaled sensor data */
  9214F
  9215Ftypedef
  9216F  struct
  9217F  {
  9218F    float gyro_x ;
  9219F    float gyro_y ;
  9220F    float gyro_z ;
  9221F    float accel_x ;
  9222F    float accel_y ;
  9223F    float accel_z ;
  9224F    float mag_x ;
  9225F    float mag_y ;
  9226F    float mag_z ;
  9227F    float gyro_temperature ;
  9228F    float abs_pressure ;
  9229F    float baro_altitude ;
  9230F    float diff_pressure ;
  9231F    float airspeed ;
  9232F        /* GPS data */
  9233F        /* Latitude */
  9234F    int16_t gps_lat_deg ;
  9235F    uint32_t gps_lat_min ;
  9236F    uint8_t gps_lat_sector ;
  9237F        /* Longitude */
  9238F    int16_t gps_lon_deg ;
  9239F    uint32_t gps_lon_min ;
  9240F    uint8_t gps_lon_sector ;
  9241F        /* Altitude */
  9242F    int32_t gps_alt ;
  9243F        /* Speed */
  9244F    int32_t gps_speed ;
  9245F    int32_t gps_course ;
  9246F        /* Time */
  9247F    uint16_t gps_hour ;
  9248F    uint16_t gps_min ;
  9249F    float gps_sec ;
  9250F        // Status
  9251F    uint16_t gps_position_fix_status ;
  9252F    uint16_t gps_no_sv ;
  9253F    float gps_hdop ;
  9254F    uint16_t gps_new_message ;
  9255F  } sensor_data_scaled_t ;
  9256F// Structure for storing AHRS states and other data related to state computation
  9257F// This structure is, in a way, redundant because all this data is also stored in the
  9258F// UM6_config or UM6_data structures. However, in the config and data strucutres, the
  9259F// data is packaged as UInt32 entries into an array for convenience with communication.
  9260F// To use the data as floats, special formatting is required. This structure provides
  9261F// a place to store that data in the expected format, which makes accessing it easier.
  9262F
  9263Ftypedef
  9264F  struct
  9265F  {
  9266F        /* Attitude states */
  9267F    float psi ;
  9268F    float theta ;
  9269F    float phi ;
  9270F        /* Angle rate states */
  9271F    float psi_dot ;
  9272F    float theta_dot ;
  9273F    float phi_dot ;
  9274F        /* Quaternion states "qib" = Quaternion from Inertial to Body */
  9275F    quat qib ;
  9276F    quat quat_debug ;
  9277F        /* Gyro biases */
  9278F    float bias_p ;
  9279F    float bias_q ;
  9280F    float bias_r ;
  9281F        /* Accelerometer biases */
  9282F    float bias_accel_x ;
  9283F    float bias_accel_y ;
  9284F    float bias_accel_z ;
  9285F        /* Magnetometer biases */
  9286F    float bias_mag_x ;
  9287F    float bias_mag_y ;
  9288F    float bias_mag_z ;
  9289F        /* State Transition Matrix (jacobian of system matrix 'f') */
  9290F    fMatrix jac_f ;
  9291F        /* Linearized measurement equation (jacobian of output equation 'h') */
  9292F    fMatrix jac_h ;
  9293F        /* Measurement noise matrix */
  9294F    fMatrix R ;
  9295F        /* Auxiliary construction measurement matrix for phi and theta angles. */
  9296F    fMatrix R_phi_theta ;
  9297F        /* Auxiliary construction measurement matrix for psi angle. */
  9298F    fMatrix R_psi ;
  9299F        /* Process noise matrix */
  9300F    fMatrix Q ;
  9301F        /* Accelerometer alignment matrix */
  9302F    fMatrix accel_align_mat ;
  9303F        /* Gyro alignment matrix */
  9304F    fMatrix gyro_align_mat ;
  9305F        /* Magnetometer calibration matrix */
  9306F    fMatrix mag_align_mat ;
  9307F        // Error covariance matrix
  9308F    fMatrix P ;
  9309F        /* Magnetic field reference vector */
  9310F    float mag_ref_x ;
  9311F    float mag_ref_y ;
  9312F    float mag_ref_z ;
  9313F        /* Accelerometer reference vector */
  9314F    float accel_ref_x ;
  9315F    float accel_ref_y ;
  9316F    float accel_ref_z ;
  9317F        /* Accelerometer variance */
  9318F    float accel_var ;
  9319F        /* Gyrometer variance */
  9320F    float gyro_var ;
  9321F        /* Gyro bias variance */
  9322F    float gyro_bias_var ;
  9323F        /* Magnetometer variance */
  9324F    float mag_var ;
  9325F        /* GPS velocity variance */
  9326F    float gps_var ;
  9327F    float U ;
  9328F    float V ;
  9329F    float W ;
  9330F    float U_ant ;
  9331F    float V_ant ;
  9332F    float W_ant ;
  9333F    float U_dot ;
  9334F    float V_dot ;
  9335F    float W_dot ;
  9336F    float temperature ;
  9337F        // Time sampling
  9338F    float Ts ;    // In seconds
  9339F    float debug_misc [ 5 ] ;
  9340F        // GPS stuffs
  9341F    float GPS_north ;    // In meters
  9342F    float GPS_east ;
  9343F    float GPS_h ;
  9344F    float GPS_h_ant ;
  9345F    float GPS_speed ;    // In m/s
  9346F    float GPS_speed_ant ;    // past speed
  9347F    float GPS_heading ;    // In m/s
  9348F    float GPS_Ts ;
  9349F    float GPS_lat_home ;
  9350F    float GPS_lon_home ;
  9351F    float GPS_alt_home ;
  9352F  } ahrs_states_t ;
  9353F// Structure for holding raw sensor data
  9354F
  9355Ftypedef
  9356F  struct
  9357F  {
  9358F        // input
  9359F    float xk [ 9 ] ;
  9360F    float xk_1 [ 9 ] ;
  9361F    float xk_2 [ 9 ] ;
  9362F        // output
  9363F    float yk [ 9 ] ;
  9364F    float yk_1 [ 9 ] ;
  9365F    float yk_2 [ 9 ] ;
  9366F    float a [ 5 ] ; // denominator coefficient
  9367F    float b [ 5 ] ; // numerator coefficient
  9368F  } digital_filter_data_t ;
  9369F
  9370Fvoid
  9371T  compute_euler_angles (
  9372F  ahrs_states_t * estimated_states ) ;
  9373F
  9374Fvoid
  9375T  unroll_states (
  9376F  ahrs_states_t * states ) ;
  9377F 
  9378F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_sensorhead_types.h*/
  9379F/*   CLOSE_FILE Include File */
  9380F 
  9381F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_i2c.h */
  9382F/******************************************************************************
  9383F* FILENAME: dsp_i2c.h
  9384F*
  9385F* DESCRIPTION:
  9386F* High-level functions for I2C module..
  9387F*
  9388F* FUNCTIONS:
  9389F* uint8_t i2cBatchWrite ( uint8_t, uint8_t*, uint8_t)
  9390F* uint8_t i2cBatchRead ( uint8_t, uint8_t, uint8_t*, uint8_t)
  9391F* void I2C_get_data (I2C_RawSensorData*)
  9392F* void I2C_init_sensors (void)
  9393F*
  9394F* VERSION DATE WHO DETAIL
  9395F* 1.0 05 Set 2011 Rogerio Lima Start-up coding.
  9396F* Plínio Pereira
  9397F* -----------------------------------------------------------------------------
  9398F* 2.0 30 Aug 2014 Rogerio Lima Improving code quality rewriting the
  9399F* code and correcting errors.
  9400F******************************************************************************/
  9401F/*
  9402F * SECTION ORDER
  9403F * 1. Comment block
  9404F * 2. Include statements
  9405F * 3. Definitions: data type, constants, macros
  9406F * 4. Static data declarations
  9407F * 5. Private functions prototypes
  9408F * 6. Public function bodies
  9409F * 7. Private function bodies
  9410F *
  9411F */
  9412F#ifndef DSP_I2C_H
  9413F#define DSP_I2C_H
  9414F#define I2C_TX_BUFSIZE 16U
  9415F#define I2C_RX_BUFSIZE 24U
  9416F#define I2C_ACK_ATTEMPTS 5000U
  9417F#define MAX_RETRIES 10000U
  9418F#define I2C_TRANSMITTER I2C_Direction_Transmitter
  9419F#define I2C_RECEIVER I2C_Direction_Receiver
  9420F#define I2C_BIT_SET 1U
  9421F#define I2C_BIT_CLEAR 0U
  9422F#define I2C_ACK_DISABLE 1U
  9423F#define I2C_ACK_ENABLE 0U
  9424F#define I2C_SEND_START 1U
  9425F#define I2C_NO_START 0U
  9426F#define I2C_SEND_STOP 1U
  9427F#define I2C_NO_STOP 0U
  9428F#define I2C_SCL_PIN GPIO_Pin_6
  9429F#define I2C_SDA_PIN GPIO_Pin_7
  9430F#define I2C_PORT GPIOB
  9431F#define I2C_ARBITRATION_LOST 10U
  9432F#define I2C_NACK 1U
  9433F#define I2C_TIMEOUT 11U
  9434F/*------------------------------------------------------------------------------
  9435F F28335 Register I2CMDR
  9436F------------------------------------------------------------------------------*/
  9437F// BC Bits
  9438F#define I2C_BC_8BITS 0x0000
  9439F#define I2C_BC_1BITS 0x0001
  9440F#define I2C_BC_2BITS 0x0002
  9441F#define I2C_BC_3BITS 0x0003
  9442F#define I2C_BC_4BITS 0x0004
  9443F#define I2C_BC_5BITS 0x0005
  9444F#define I2C_BC_6BITS 0x0006
  9445F#define I2C_BC_7BITS 0x0007
  9446F// FDF
  9447F#define I2C_NO_FREE_DATA_FORMAT 0x0000
  9448F#define I2C_FREE_DATA_FORMAT 0x0008
  9449F// STB
  9450F#define I2C_NO_START_BYTE 0x0000
  9451F#define I2C_START_BYTE 0x0010
  9452F// IRS
  9453F#define I2C_RESET 0x0000
  9454F#define I2C_ENABLED 0x0020
  9455F// DLB
  9456F#define I2C_NO_LOOPBACK 0x0000
  9457F#define I2C_LOOPBACK 0x0040
  9458F// RM
  9459F#define I2C_NO_REPEAT 0x0000
  9460F#define I2C_REPEAT 0x0080
  9461F/* Defines the length of time the i2c software will wait for clock stretching *
  9462F * the number of attempts simply corresponds with the number of iterations *
  9463F * through a for loop. */
  9464F#define I2C_MAX_ATTEMPTS 1000
  9465F/* Macro definitions */
  9466F#define I2C_DELAY_INIT( ) int16_t _counter ;
  9467F#define I2C_DELAY( ) for ( _counter = 0 ; _counter < 5 ; _counter ++ ) { asm volatile("mov r0, r0")   ; }
  9468F#define I2C_DELAY_SHORT( ) asm volatile("mov r0, r0")
  9469F/* Structure for holding raw sensor data from I2C bus
  9470Ftypedef struct __I2CData {
  9471F Gyrometers
  9472F int16_t W_x;
  9473F int16_t W_y;
  9474F int16_t W_z;
  9475F int16_t new_gyro_data;
  9476F Accelerometers
  9477F int16_t A_x;
  9478F int16_t A_y;
  9479F int16_t A_z;
  9480F Flag specifies whether there is new accel data in the sensor data structure
  9481F int16_t new_accel_data;
  9482F Magnetometers
  9483F int16_t H_x;
  9484F int16_t H_y;
  9485F int16_t H_z;
  9486F Flag specifies whether there is new magnetometer data in the sensor data structure
  9487F int16_t new_mag_data;
  9488F 
  9489F Rate gyro temperature measurement
  9490F int16_t gyro_temperature;
  9491F Differential pressure
  9492F int16_t diff_press;
  9493F Flag specifies whether there is new differential pressure data in the sensor data structure
  9494F int16_t new_diff_press_data;
  9495F Absolute pressure
  9496F int16_t abs_press;
  9497F Flag specifies whether there is new differential pressure data in the sensor data structure
  9498F int16_t new_abs_press_data;
  9499F} I2C_RawSensorData;*/
  9500F// Prototype statements for functions found within this file.
  9501F
  9502Fvoid
  9503F  Gpio_select_I2C ( void ) ;
  9504F// Software-emulated i2c function calls. Use these ones.
  9505F
  9506Fuint8_t
  9507T  i2cBatchWrite (
  9508F  const uint8_t address7 ,
  9509F  uint8_t * txBuffer ,
  9510F  const uint8_t bytesToWrite ) ;
  9511F
  9512Fuint8_t
  9513T  i2cBatchRead (
  9514F  const uint8_t address7 ,
  9515F  const uint8_t device_start_address ,
  9516F  uint8_t * rxBuffer ,
  9517F  const uint8_t bytesToRead ) ;
  9518F
  9519Fvoid
  9520T  i2c_get_data (
  9521F  sensor_data_raw_t * raw_data ) ;
  9522F
  9523Fvoid
  9524F  i2c_init_sensors ( void ) ;
  9525F 
  9526F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_i2c.h*/
  9527F/*   CLOSE_FILE Include File */
  9528F 
  9529F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_i2c_hsc.h */
  9530F/******************************************************************************
  9531F* FILENAME: dsp_i2c_hsc.h
  9532F*
  9533F* DESCRIPTION:
  9534F* Function prototypes and defines for interacting with HSC differential pressure.
  9535F*
  9536F* FUNCTIONS:
  9537F* void HSC_init (uint8_t*)
  9538F* void HSC_get_data (void)
  9539F*
  9540F* NOTES:
  9541F* ITG3200 is a tri-axis digital gyrometer which uses protocol I2C to transmit
  9542F* and receive data.
  9543F*
  9544F* CODE: HSC-D-RR-N-010MD-2A3
  9545F* HSC: Serie
  9546F* D: DIP (Dual Inline Pin)
  9547F* RR: Dual radial barbed ports in the same side
  9548F* N: Gases only, no special options
  9549F* 010MD: +/- 10 mbar
  9550F* 2: I2C, address 0x28
  9551F* A: 10% to 90% of 2^14 counts
  9552F* 3: 3.3V supply voltage
  9553F*
  9554F* REFERENCES:
  9555F* Adapted from CH Robotics
  9556F*
  9557F* START DATE: 05 Set 2011
  9558F*
  9559F* CHANGES :
  9560F*
  9561F* VERSION DATE WHO DETAIL
  9562F* 1.0 05 Set 2011 Rogerio Lima Start-up coding.
  9563F* Plínio Pereira
  9564F* -----------------------------------------------------------------------------
  9565F* 2.0 06 Set 2014 Rogerio Lima Improving code quality rewriting the
  9566F* code and correcting errors.
  9567F******************************************************************************/
  9568F#ifndef DSP_I2C_HSC_H
  9569F#define DSP_I2C_HSC_H
  9570F/* HSC function prototypes */
  9571F
  9572Fuint8_t
  9573F  hsc_init ( void ) ;
  9574F
  9575Fuint8_t
  9576F  hsc_get_data ( void ) ;
  9577F  /* Register addresses for the HSC */
  9578F#define HSC_SLAVE_ADDRESS7 0x28U
  9579F#define OUTPUT_MIN 0x0666U
  9580F#define OUTPUT_MAX 0x3999U
  9581F#define PRESSURE_MIN - 10.0F
  9582F#define PRESSURE_MAX 10.0F
  9583F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_i2c_hsc.h*/
  9584F/*   CLOSE_FILE Include File */
  9585F 
  9586F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_i2c_bmp085.h */
  9587F/******************************************************************************
  9588F* FILENAME: dsp_i2c_hsc.h
  9589F*
  9590F* DESCRIPTION:
  9591F* Functions for interacting with HSC BMP085 static pressure sensor.
  9592F*
  9593F* FUNCTIONS:
  9594F* void HSC_init (uint8_t*)
  9595F* void HSC_get_data (void)
  9596F*
  9597F* VERSION DATE WHO DETAIL
  9598F* 1.0 05 Set 2011 Rogerio Lima Start-up coding.
  9599F* Plínio Pereira
  9600F* -----------------------------------------------------------------------------
  9601F* 2.0 06 Set 2014 Rogerio Lima Improving code quality rewriting the
  9602F* code and correcting errors.
  9603F******************************************************************************/
  9604F#ifndef DSP_I2C_BMP085_H
  9605F#define DSP_I2C_BMP085_H
  9606F/* Register addresses for the BMP085 */
  9607F#define BMP_SLAVE_ADDRESS7 0x77U
  9608F#define BMP_REG_COEF_CALIB_ADD 0xAAU
  9609F#define BMP_REG_CTL_ADDRESS 0xF4U
  9610F#define BMP_REG_CTL_TEMPERATURE 0x2EU
  9611F#define BMP_REG_CTL_PRESSURE_0 0x34U
  9612F#define BMP_REG_CTL_PRESSURE_1 0x74U
  9613F#define BMP_REG_CTL_PRESSURE_2 0xB4U
  9614F#define BMP_REG_CTL_PRESSURE_3 0xF4U
  9615F#define BMP_REG_RESULT_ADDRESS 0xF6U
  9616F#define BMP_OSS_PRESSURE_16BITS 0x00U
  9617F#define BMP_OSS_PRESSURE_17BITS 0x01U
  9618F#define BMP_OSS_PRESSURE_18BITS 0x02U
  9619F#define BMP_OSS_PRESSURE_19BITS 0x03U
  9620F
  9621Ftypedef
  9622F  struct
  9623F  {
  9624F    int16_t AC1 ;
  9625F    int16_t AC2 ;
  9626F    int16_t AC3 ;
  9627F    uint16_t AC4 ;
  9628F    uint16_t AC5 ;
  9629F    uint16_t AC6 ;
  9630F    int16_t B1 ;
  9631F    int16_t B2 ;
  9632F    int16_t MB ;
  9633F    int16_t MC ;
  9634F    int16_t MD ;
  9635F    const uint8_t oversampling_setting ;
  9636F    int32_t UT ;
  9637F    int32_t UP ;
  9638F    int32_t true_T ;
  9639F    int32_t true_P ;
  9640F  } bmp085_data_t ;
  9641F  /* BMP085 function prototypes */
  9642F
  9643Fuint8_t
  9644T  bmp_init (
  9645F  bmp085_data_t * bmp_data ) ;
  9646F
  9647Fuint8_t
  9648F  bmp_ut_request ( void ) ;
  9649F
  9650Fuint8_t
  9651T  bmp_up_request (
  9652F  const uint8_t oss ) ;
  9653F
  9654Fuint8_t
  9655F  bmp_ut_get ( void ) ;
  9656F
  9657Fuint8_t
  9658F  bmp_up_get ( void ) ;
  9659F
  9660Fuint8_t
  9661T  bmp_pressure_get_data (
  9662F  bmp085_data_t * bmp_data ) ;
  9663F
  9664Fuint8_t
  9665T  bmp_temp_get_data (
  9666F  bmp085_data_t * bmp_data ) ;
  9667F 
  9668F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_i2c_bmp085.h*/
  9669F/*   CLOSE_FILE Include File */
  9670F 
  9671F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_i2c_adxl345.h */
  9672F/******************************************************************************
  9673F* FILENAME: dsp_i2c_adxl345.h
  9674F*
  9675F* DESCRIPTION:
  9676F* Function prototypes and defines of ADXL345 driver.
  9677F*
  9678F* FUNCTIONS:
  9679F* int32_t ADXL_init (uint8_t*)U
  9680F* int32_t ADXL_self_test (uint8_t*)U
  9681F* int32_t ADXL_get_data (void)U
  9682F*
  9683F* VERSION DATE WHO DETAIL
  9684F* 1.0 05 Set 2011 Rogerio Lima Start-up coding.
  9685F* Plínio Pereira
  9686F* -----------------------------------------------------------------------------
  9687F* 2.0 30 Aug 2014 Rogerio Lima Improving code quality rewriting the
  9688F* code and correcting errors.
  9689F******************************************************************************/
  9690F#ifndef DSP_I2C_ADXL345_H
  9691F#define DSP_I2C_ADXL345_H
  9692F/* ADXL345 function prototypes */
  9693F
  9694Fuint8_t
  9695F  adxl_init ( void ) ;
  9696F
  9697Fuint8_t
  9698F  adxl_self_test ( void ) ;
  9699F
  9700Fuint8_t
  9701F  adxl_get_data ( void ) ;
  9702F  /*Register addresses for the ADXL345 */
  9703F#define ADXL_SLAVE_ADDRESS7 0x53U
  9704F#define ADXL_ODR_6_25HZ 0x06U
  9705F#define ADXL_ODR_12_50HZ 0x07U
  9706F#define ADXL_ODR_25HZ 0x08U
  9707F#define ADXL_ODR_50HZ 0x09U
  9708F#define ADXL_ODR_100HZ 0x0AU
  9709F#define ADXL_ODR_200HZ 0x0BU
  9710F#define ADXL_ODR_400HZ 0x0CU
  9711F#define ADXL_ODR_800HZ 0x0DU
  9712F#define ADXL_ODR_1600HZ 0x0EU
  9713F#define ADXL_ODR_3200HZ 0x0FU
  9714F#define ADXL_DEVID 0x00U
  9715F#define ADXL_THRESH_TAP 0x1DU
  9716F#define ADXL_OFSX 0x1EU
  9717F#define ADXL_OFSY 0x1FU
  9718F#define ADXL_OFSZ 0x20U
  9719F#define ADXL_DUR 0x21U
  9720F#define ADXL_Latent 0x22U
  9721F#define ADXL_Window 0x23U
  9722F#define ADXL_THRESH_ACT 0x24U
  9723F#define ADXL_THRESH_INACT 0x25U
  9724F#define ADXL_TIME_INACT 0x26U
  9725F#define ADXL_ACT_INACT_CTL 0x27U
  9726F#define ADXL_THRESH_FF 0x28U
  9727F#define ADXL_TIME_FF 0x29U
  9728F#define ADXL_TAP_AXES 0x2AU
  9729F#define ADXL_ACT_TAP_STATU 0x2BU
  9730F#define ADXL_BW_RATE 0x2CU
  9731F#define ADXL_POWER_CTL 0x2DU
  9732F#define ADXL_INT_ENABLE 0x2EU
  9733F#define ADXL_INT_MAP 0x2FU
  9734F#define ADXL_INT_SOURCE 0x30U
  9735F#define ADXL_DATA_FORMAT 0x31U
  9736F#define ADXL_DATAX0 0x32U
  9737F#define ADXL_DATAX1 0x33U
  9738F#define ADXL_DATAY0 0x34U
  9739F#define ADXL_DATAY1 0x35U
  9740F#define ADXL_DATAZ0 0x36U
  9741F#define ADXL_DATAZ1 0x37U
  9742F#define ADXL_FIFO_CTL 0x38U
  9743F#define ADXL_FIFO_STATUS 0x39U
  9744F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_i2c_adxl345.h*/
  9745F/*   CLOSE_FILE Include File */
  9746F 
  9747F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_i2c_hmc5883.h */
  9748F/******************************************************************************
  9749F* FILENAME: dsp_hmc5883.h
  9750F*
  9751F* DESCRIPTION:
  9752F* Function prototypes and defines of HMC5883 driver.
  9753F*
  9754F* FUNCTIONS:
  9755F* int32_t HMC_init (uint8_t*)
  9756F* int32_t HMC_get_data (void)
  9757F*
  9758F* VERSION DATE WHO DETAIL
  9759F* 1.0 05 Set 2011 Rogerio Lima Start-up coding.
  9760F* Plínio Pereira
  9761F* -----------------------------------------------------------------------------
  9762F* 2.0 30 Aug 2014 Rogerio Lima Improving code quality rewriting the
  9763F* code and correcting errors.
  9764F******************************************************************************/
  9765F#ifndef DSP_I2C_HMC5883_H
  9766F#define DSP_I2C_HMC5883_H
  9767F/* Function prototypes */
  9768F
  9769Fuint8_t
  9770F  hmc_init() ;
  9771F
  9772Fuint8_t
  9773F  hmc_get_data ( void ) ;
  9774F#define MAG_SLAVE_ADDRESS7 0x1EU
  9775F#define HMC_ODR_0_75HZ 0x00U
  9776F#define HMC_ODR_1_50HZ 0x04U
  9777F#define HMC_ODR_3HZ 0x08U
  9778F#define HMC_ODR_7_50HZ 0x0CU
  9779F#define HMC_ODR_15HZ 0x10U
  9780F#define HMC_ODR_30HZ 0x14U
  9781F#define HMC_ODR_75HZ 0x18U
  9782F#define HMC_RANGE_8_1GAUSS 0xE0U
  9783F#define HMC_RANGE_5_6GAUSS 0xC0U
  9784F#define HMC_RANGE_4_7GAUSS 0xA0U
  9785F#define HMC_RANGE_4_0GAUSS 0x80U
  9786F#define HMC_RANGE_2_5GAUSS 0x60U
  9787F#define HMC_RANGE_1_9GAUSS 0x40U
  9788F#define HMC_RANGE_1_3GAUSS 0x20U
  9789F#define HMC_RANGE_0_88GAUSS 0x00U
  9790F#define HMC_REG0_FAILED 0x01U
  9791F#define HMC_REG1_FAILED 0x02U
  9792F#define HMC_REG2_FAILED 0x03U
  9793F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_i2c_hmc5883.h*/
  9794F/*   CLOSE_FILE Include File */
  9795F 
  9796F/* OPEN FILE F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_i2c_itg3200.h */
  9797F/******************************************************************************
  9798F* FILENAME: dsp_system.c
  9799F*
  9800F* DESCRIPTION:
  9801F* Peripheral and I/Os configuration routines.
  9802F* Functions used to configure I/Os, peripherals, clocks, etc;
  9803F* See TMS320F28335 for detailed description.
  9804F*
  9805F* FUNCTIONS:
  9806F* void Gpio_Select (void)
  9807F*
  9808F* VERSION DATE WHO DETAIL
  9809F* 1.0 05 Set 2011 Rogerio Lima Start-up coding.
  9810F* PlÃ­nio Pereira
  9811F* -----------------------------------------------------------------------------
  9812F* 2.0 30 Aug 2014 Rogerio Lima Improving code quality rewriting the
  9813F* code and correcting errors.
  9814F******************************************************************************/
  9815F#ifndef DSP_I2C_ITG3200_H
  9816F#define DSP_I2C_ITG3200_H
  9817F/* ITG3200 function prototypes */
  9818F
  9819Fuint8_t
  9820F  itg_init ( void ) ;
  9821F
  9822Fuint8_t
  9823F  itg_get_data ( void ) ;
  9824F  /* Register addresses for the ITG3200 */
  9825F#define ITG_SLAVE_ADDRESS7 0x68U
  9826F#define ITG_REG_WHOAMI 0x00U
  9827F#define ITG_REG_SMPL 0x15U
  9828F#define ITG_REG_DLPF_FSSEL 0x16U
  9829F#define ITG_REG_INTCONF 0x17U
  9830F#define ITG_REG_INTSTAT 0x18U
  9831F#define ITG_REG_TEMP_HIGH 0x1BU
  9832F#define ITG_REG_TEMP_LOW 0x1CU
  9833F#define ITG_REG_GYRO_X_HIGH 0x1DU
  9834F#define ITG_REG_GYRO_X_LOW 0x1EU
  9835F#define ITG_REG_GYRO_Y_HIGH 0x1FU
  9836F#define ITG_REG_GYRO_Y_LOW 0x20U
  9837F#define ITG_REG_GYRO_Z_HIGH 0x21U
  9838F#define ITG_REG_GYRO_Z_LOW 0x22U
  9839F#define ITG_REG_PWR 0x3EU
  9840F#endif /*00 F:\Dropbox\Project UAV\Firmware\Firmware_VANT_MAVLink_Flash[Netrino]\inc\usr\dsp_i2c_itg3200.h*/
  9841F/*   CLOSE_FILE Include File */
  9842F 
  9843F/* Global definitions of i2c data types are made here. Their declarations
  9844F * occurs on the dependencies (dsp_i2c_xxxx.c source-files) using the
  9845F * keyword "extern". */
  9846F
  9847Fuint8_t
  9848F  g_i2cTxBuf [ 16U ] ;
  9849F
  9850Fuint8_t
  9851F  g_i2cRxBuf [ 24U ] ;
  9852F
  9853Fuint8_t
  9854F  g_i2cBytesToTransmit ;
  9855F
  9856Fuint8_t
  9857F  g_i2cBytesToReceive ;
  9858F
  9859Fuint8_t
  9860F  g_i2cReadPrelude ;
  9861F
  9862Fuint8_t
  9863F  g_i2cTxPtr ;
  9864F
  9865Fuint8_t
  9866F  g_i2cRxPtr ;
  9867F
  9868Fuint8_t
  9869F  g_i2cBusy ;
  9870F
  9871Fuint8_t
  9872F  g_i2cBusError ;
  9873F
  9874Fuint8_t
  9875F  g_i2cDirection ;
  9876F
  9877Fuint8_t
  9878F  g_i2cCurrentSlaveAddress ;
  9879F
  9880Fuint8_t *
  9881F  i2c_status_flag ;
  9882F  /* Variable declared at source file "dsp_i2c_bmp085" */
  9883F
  9884Fextern bmp085_data_t
  9885F  bmp_data_buffer ;
  9886F/*******************************************************************************
  9887F* Function Name : i2cBatchWrite
  9888F* Input : uint8_t address7, uint8_t* txBuffer, uint8_t bytesToWrite
  9889F* Output : uint8_t* status_flag
  9890F* Return : 1 if success, 0 if fail
  9891F* Description : Writes a pre-defined number of bytes (bytesToWrite) stored
  9892F in (txBuffer) into the slave addressed by (address7) address.
  9893F*******************************************************************************/
  9894F
  9895Fuint8_t
  9896T  i2cBatchWrite (
  9897F  const uint8_t address7 ,
  9898F  uint8_t * txBuffer ,
  9899F  const uint8_t bytesToWrite )
  9900F  {
  9901F    static uint16_t
  9902F      i ;
  9903F    static uint8_t
  9904F      returnval ;
  9905T    I2caRegs.I2CSAR = address7 ;/* I2C slave address register */
  9906T    I2caRegs.I2CCNT = bytesToWrite ;/* Number of bytes to send */
  9907T    I2caRegs.I2CMDR.all = 0x6E20 ;/* Master-transmitter, Start, Stop */
  9908T    for
  9909T      (
  9910T      i = 0U
  9911T      ;
  9912T      i < bytesToWrite
  9913T      ;
  9914T      i ++
  9915T      )                                 /* Send data bytes */
  9916T      {
  9917T        I2caRegs.I2CDXR = txBuffer [ i ] ;/* Loads DSP's buffet to transmit data */
  9918T        while
  9919T          (
  9920T          I2caRegs.I2CSTR.bit.XRDY == 0U
  9921T          )
  9922T          {
  9923T            ;                                   /* Aguarda fim da transmissão */
  9924T          }
  9925T      }
  9926F      /*#####WARNING #####*/
  9927T    while
  9928T      (
  9929T      I2caRegs.I2CSTR.bit.SCD == 0U
  9930T      )
  9931T      {
  9932T        ;                                  /* Aguarda Stop condition */
  9933T      }
  9934T    I2caRegs.I2CSTR.bit.SCD = 1 ;/* Clear Stop condition flag */
  9935T    returnval = I2caRegs.I2CSTR.bit.NACK ;/* 0: ACK, 1: NACK */
  9936T    return
  9937T    returnval ;
  9938F  }
  9939F/*******************************************************************************
  9940F* Function Name : i2cBatchRead
  9941F* Input : uint8_t address7, uint8_t device_start_address,
  9942F uint8_t bytesToRead
  9943F* Output : uint8_t* rxBuffer
  9944F* Return : 1 if success, 0 if fail
  9945F* Description : Reads a pre-defined number of bytes (bytesToRead) stored
  9946F in (rxBuffer) started in the register (device_start_address)
  9947F from the slave addressed by (address7) address.
  9948F*******************************************************************************/
  9949F
  9950Fuint8_t
  9951T  i2cBatchRead (
  9952F  uint8_t address7 ,
  9953F  uint8_t device_start_address ,
  9954F  uint8_t * rxBuffer ,
  9955F  uint8_t bytesToRead )
  9956F  {
  9957F    static int16_t
  9958F      i ;
  9959F    static uint8_t
  9960F      returnval ;
  9961T    I2caRegs.I2CSAR = address7 ;/* I2C slave address register */
  9962T    I2caRegs.I2CCNT = 1 ;
  9963F                         /* Enviar 1 byte */
  9964F    // Send start address for read
  9965T    I2caRegs.I2CDXR = device_start_address ;/* Endereço do registrador */
  9966T    I2caRegs.I2CMDR.all = 0x6620 ;/* Master-transmitter, Start, No_Stop */
  9967T    while
  9968T      (
  9969T      I2caRegs.I2CSTR.bit.ARDY == 0U
  9970T      )
  9971T      {
  9972T        ;                                   /* 1 = a previous cycle has completed (wait for access ready condition) */
  9973T      }
  9974T    returnval = I2caRegs.I2CSTR.bit.NACK ;
  9975F                                          /* 0: ACK, 1: NACK */
  9976F     // Send new start condition and initiate read
  9977T    I2caRegs.I2CCNT = bytesToRead ;/* Enviar 1 byte */
  9978T    I2caRegs.I2CMDR.all = 0x6C20 ;/* Master-receiver, Start, Stop after all bytes trans */
  9979T    for
  9980T      (
  9981T      i = 0
  9982T      ;
  9983T      i < bytesToRead
  9984T      ;
  9985T      i ++
  9986T      )
  9987T      {
  9988T        while
  9989T          (
  9990T          I2caRegs.I2CSTR.bit.RRDY == 0U
  9991T          )
  9992T          {
  9993T            ;                                   /* Aguarda dado ficar disponível no registrador */
  9994T          }
  9995T        rxBuffer [ i ] = I2caRegs.I2CDRR ;/* Lê dado do buffer do DSP */
  9996T      }
  9997T    while
  9998T      (
  9999T      I2caRegs.I2CSTR.bit.SCD == 0U
 10000T      )
 10001T      {
 10002T        ;                                  /* Aguarda Stop condition */
 10003T      }
 10004T    I2caRegs.I2CSTR.bit.SCD = 1 ;
 10005T    return
 10006T    returnval ;
 10007F  }
 10008F/*******************************************************************************
 10009F* Function Name : i2cBatchRead
 10010F* Input : uint8_t address7, uint8_t device_start_address,
 10011F uint8_t bytesToRead
 10012F* Output : uint8_t* g_sensor_data_raw
 10013F* Return : 1 if success, 0 if fail
 10014F* Description : Reads a pre-defined number of bytes (bytesToRead) stored
 10015F in (rxBuffer) started in the register (device_start_address)
 10016F from the slave addressed by (address7) address.
 10017F*******************************************************************************/
 10018F
 10019Fvoid
 10020T  i2c_get_data (
 10021F  sensor_data_raw_t * raw_data )
 10022F  {
 10023F    /* Solicita dados de pressão barométrica - BMP085 */
 10024T    bmp_up_request ( bmp_data_buffer.oversampling_setting ) ;
 10025T    DSP28x_usDelay (
 10026T    (
 10027T    (
 10028T    (
 10029T    ( long double ) 5 * 1000.0L ) /
 10030T    ( long double ) 6.667L ) - 9.0L ) /
 10031T    5.0L ) ;
 10032T    itg_get_data () ;
 10033T    DSP28x_usDelay (
 10034T    (
 10035T    (
 10036T    (
 10037T    ( long double ) 5 * 1000.0L ) /
 10038T    ( long double ) 6.667L ) - 9.0L ) /
 10039T    5.0L ) ;
 10040T    raw_data -> gyro_temperature = (
 10041T    ( g_i2cRxBuf [ 0 ] << 8 ) | g_i2cRxBuf [ 1 ] ) ;
 10042T    raw_data -> gyro_x = (
 10043T    ( g_i2cRxBuf [ 2 ] << 8 ) | g_i2cRxBuf [ 3 ] ) ;           /* Wx */
 10044T    raw_data -> gyro_y = (
 10045T    ( g_i2cRxBuf [ 4 ] << 8 ) | g_i2cRxBuf [ 5 ] ) ;           /* Wy */
 10046T    raw_data -> gyro_z = (
 10047T    ( g_i2cRxBuf [ 6 ] << 8 ) | g_i2cRxBuf [ 7 ] ) ;           /* Wz */
 10048T    raw_data -> new_gyro_data = 1 ;
 10049T    adxl_get_data () ;
 10050T    DSP28x_usDelay (
 10051T    (
 10052T    (
 10053T    (
 10054T    ( long double ) 5 * 1000.0L ) /
 10055T    ( long double ) 6.667L ) - 9.0L ) /
 10056T    5.0L ) ;
 10057T    raw_data -> accel_x = (
 10058T    ( g_i2cRxBuf [ 1 ] << 8 ) | g_i2cRxBuf [ 0 ] ) ;            /* Ax */
 10059T    raw_data -> accel_y = (
 10060T    ( g_i2cRxBuf [ 3 ] << 8 ) | g_i2cRxBuf [ 2 ] ) ;            /* Ay */
 10061T    raw_data -> accel_z = (
 10062T    ( g_i2cRxBuf [ 5 ] << 8 ) | g_i2cRxBuf [ 4 ] ) ;            /* Az */
 10063T    raw_data -> new_accel_data = 1 ;
 10064T    hmc_get_data () ;
 10065T    DSP28x_usDelay (
 10066T    (
 10067T    (
 10068T    (
 10069T    ( long double ) 5 * 1000.0L ) /
 10070T    ( long double ) 6.667L ) - 9.0L ) /
 10071T    5.0L ) ;
 10072T    raw_data -> mag_x = (
 10073T    ( g_i2cRxBuf [ 0 ] << 8 ) | g_i2cRxBuf [ 1 ] ) ;          /* Hx */
 10074T    raw_data -> mag_y = (
 10075T    ( g_i2cRxBuf [ 2 ] << 8 ) | g_i2cRxBuf [ 3 ] ) ;          /* Hy */
 10076T    raw_data -> mag_z = (
 10077T    ( g_i2cRxBuf [ 4 ] << 8 ) | g_i2cRxBuf [ 5 ] ) ;          /* Hz */
 10078T    raw_data -> new_mag_data = 1 ;
 10079T    hsc_get_data () ;
 10080T    DSP28x_usDelay (
 10081T    (
 10082T    (
 10083T    (
 10084T    ( long double ) 5 * 1000.0L ) /
 10085T    ( long double ) 6.667L ) - 9.0L ) /
 10086T    5.0L ) ;
 10087T    raw_data -> diff_pressure = (
 10088T    ( g_i2cRxBuf [ 0 ] << 8 ) | g_i2cRxBuf [ 1 ] ) ;
 10089T    raw_data -> new_diff_pressure_data = 1 ;
 10090T    bmp_pressure_get_data ( & bmp_data_buffer ) ;
 10091F                                              // Realiza leitura no barômetro BMP085
 10092T    raw_data -> abs_pressure = bmp_data_buffer.UP ;
 10093T    raw_data -> new_abs_pressure_data = 1 ;
 10094T  }
 10095F/*******************************************************************************
 10096F* Function Name : I2C_Read
 10097F* Input : none
 10098F* Output : I2C_RawSensorData* i2c_data
 10099F* Return : 1 if success, 0 if fail
 10100F* Description : Reads all data from the sensors which are connected to the
 10101F I2C bus.
 10102F*******************************************************************************/
 10103F
 10104Fvoid
 10105T  i2c_init_sensors()
 10106F  {
 10107T    DSP28x_usDelay (
 10108T    (
 10109T    (
 10110T    (
 10111T    ( long double ) 5 * 1000.0L ) /
 10112T    ( long double ) 6.667L ) - 9.0L ) /
 10113T    5.0L ) ;
 10114T    bmp_init ( & bmp_data_buffer ) ;
 10115T    DSP28x_usDelay (
 10116T    (
 10117T    (
 10118T    (
 10119T    ( long double ) 5 * 1000.0L ) /
 10120T    ( long double ) 6.667L ) - 9.0L ) /
 10121T    5.0L ) ;
 10122T    itg_init () ;/* Initialises gyrometer */
 10123T    DSP28x_usDelay (
 10124T    (
 10125T    (
 10126T    (
 10127T    ( long double ) 5 * 1000.0L ) /
 10128T    ( long double ) 6.667L ) - 9.0L ) /
 10129T    5.0L ) ;
 10130T    adxl_init () ;/* Initialises accelerometer */
 10131T    DSP28x_usDelay (
 10132T    (
 10133T    (
 10134T    (
 10135T    ( long double ) 5 * 1000.0L ) /
 10136T    ( long double ) 6.667L ) - 9.0L ) /
 10137T    5.0L ) ;
 10138T    hmc_init () ;/* Initialises magnetometer */
 10139T    DSP28x_usDelay (
 10140T    (
 10141T    (
 10142T    (
 10143T    ( long double ) 5 * 1000.0L ) /
 10144T    ( long double ) 6.667L ) - 9.0L ) /
 10145T    5.0L ) ;
 10146T  }
 10147F 
